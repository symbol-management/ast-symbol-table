{
 "tensorly": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "override_module_dispatch",
    "tensorly.full_dir"
   ]
  },
  "type": "module"
 },
 "tensorly.__version__": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "tensorly.backend": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorly.backend._get_backend_dir",
    "tensorly.backend._get_backend_method",
    "tensorly.backend.dispatch",
    "tensorly.backend.initialize_backend",
    "tensorly.backend.override_module_dispatch",
    "tensorly.backend.threading"
   ]
  },
  "type": "module"
 },
 "tensorly.backend._DEFAULT_BACKEND": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "tensorly.backend._KNOWN_BACKENDS": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "tensorly.backend._LOADED_BACKENDS": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "tensorly.backend._LOCAL_STATE": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "tensorly.backend._get_backend_dir": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "dir",
    "tensorly.backend._LOCAL_STATE"
   ]
  },
  "type": "function"
 },
 "tensorly.backend._get_backend_method": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "AttributeError",
    "getattr",
    "tensorly.backend._DEFAULT_BACKEND",
    "tensorly.backend._LOADED_BACKENDS",
    "tensorly.backend._LOCAL_STATE"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.abs": {
  "data": {
   "lineno": 209
  },
  "type": "constant"
 },
 "tensorly.backend.all": {
  "data": {
   "lineno": 204
  },
  "type": "constant"
 },
 "tensorly.backend.arange": {
  "data": {
   "lineno": 193
  },
  "type": "constant"
 },
 "tensorly.backend.argmax": {
  "data": {
   "lineno": 202
  },
  "type": "constant"
 },
 "tensorly.backend.argmin": {
  "data": {
   "lineno": 203
  },
  "type": "constant"
 },
 "tensorly.backend.backend_context": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "contextlib.contextmanager",
    "tensorly.backend.get_backend",
    "tensorly.backend.set_backend"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.clip": {
  "data": {
   "lineno": 199
  },
  "type": "constant"
 },
 "tensorly.backend.concatenate": {
  "data": {
   "lineno": 188
  },
  "type": "constant"
 },
 "tensorly.backend.context": {
  "data": {
   "lineno": 181
  },
  "type": "constant"
 },
 "tensorly.backend.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "tensorly.backend.copy": {
  "data": {
   "lineno": 187
  },
  "type": "constant"
 },
 "tensorly.backend.core": {
  "data": {},
  "type": "module"
 },
 "tensorly.backend.core.Backend": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorly.backend.core.Backend.SVD_FUNS": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.abs": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.all": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.arange": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.argmax": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.argmin": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.clip": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.concatenate": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.conj": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.context": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.copy": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.diag": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.dot": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.eps": {
  "data": {
   "lineno": 556
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.eye": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.finfo": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": [
    "numpy.finfo"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.float32": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.float64": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.int32": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.int64": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.is_tensor": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.kr": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "len"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.kron": {
  "data": {
   "lineno": 570
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.max": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.mean": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.min": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.moveaxis": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.ndim": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.norm": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.ones": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.partial_svd": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "numpy.dot",
    "numpy.ndarray",
    "numpy.sqrt",
    "tensorly.backend.core.warnings"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.prod": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.qr": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.register_method": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "classmethod",
    "setattr",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.reshape": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.shape": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.sign": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.solve": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.sqrt": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.stack": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.sum": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.tensor": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.to_numpy": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.transpose": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.where": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.zeros": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.Backend.zeros_like": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.core.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorly.backend.core.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "tensorly.backend.core.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.backend.core.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "tensorly.backend.core.scipy.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "tensorly.backend.core.scipy.sparse.linalg": {
  "data": {
   "shadows": "scipy.sparse.linalg"
  },
  "type": "import"
 },
 "tensorly.backend.core.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "tensorly.backend.core.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "tensorly.backend.core.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "tensorly.backend.core.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorly.backend.cupy_backend": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "cupy",
    "getattr",
    "tensorly.backend.cupy_backend.CupyBackend",
    "tensorly.backend.cupy_backend.message"
   ]
  },
  "type": "module"
 },
 "tensorly.backend.cupy_backend.CupyBackend": {
  "data": {
   "lineno": 15
  },
  "type": "class"
 },
 "tensorly.backend.cupy_backend.CupyBackend.SVD_FUNS": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.cupy_backend.CupyBackend.clip": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "cupy.clip",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.cupy_backend.CupyBackend.context": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.cupy_backend.CupyBackend.is_tensor": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "cupy.ndarray",
    "isinstance",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.cupy_backend.CupyBackend.ndim": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.cupy_backend.CupyBackend.norm": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "cupy.abs",
    "cupy.max",
    "cupy.sqrt",
    "cupy.sum"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.cupy_backend.CupyBackend.shape": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.cupy_backend.CupyBackend.solve": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "cupy.cuda.cusolver.CUSOLVERError",
    "cupy.linalg.solve",
    "numpy.linalg.solve",
    "tensorly.backend.cupy_backend.warnings"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.cupy_backend.CupyBackend.tensor": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "cupy.array",
    "cupy.float32",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.cupy_backend.CupyBackend.to_numpy": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "cupy.asnumpy",
    "cupy.ndarray",
    "isinstance",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.cupy_backend.CupyBackend.truncated_svd": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "cupy.linalg.svd",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.cupy_backend.cp": {
  "data": {
   "shadows": "cupy"
  },
  "type": "import"
 },
 "tensorly.backend.cupy_backend.message": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "tensorly.backend.cupy_backend.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.backend.cupy_backend.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorly.backend.dispatch": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "AttributeError",
    "getattr",
    "setattr",
    "tensorly.backend.inspect"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.dispatch.inner": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorly.backend._get_backend_method"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.dot": {
  "data": {
   "lineno": 212
  },
  "type": "constant"
 },
 "tensorly.backend.eye": {
  "data": {
   "lineno": 197
  },
  "type": "constant"
 },
 "tensorly.backend.get_backend": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "tensorly.backend._get_backend_method"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorly.backend.initialize_backend": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "UserWarning",
    "map",
    "repr",
    "tensorly.backend._DEFAULT_BACKEND",
    "tensorly.backend._KNOWN_BACKENDS",
    "tensorly.backend.os",
    "tensorly.backend.set_backend",
    "tensorly.backend.warnings"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "tensorly.backend.is_tensor": {
  "data": {
   "lineno": 183
  },
  "type": "constant"
 },
 "tensorly.backend.kr": {
  "data": {
   "lineno": 216
  },
  "type": "constant"
 },
 "tensorly.backend.kron": {
  "data": {
   "lineno": 213
  },
  "type": "constant"
 },
 "tensorly.backend.max": {
  "data": {
   "lineno": 200
  },
  "type": "constant"
 },
 "tensorly.backend.mean": {
  "data": {
   "lineno": 205
  },
  "type": "constant"
 },
 "tensorly.backend.min": {
  "data": {
   "lineno": 201
  },
  "type": "constant"
 },
 "tensorly.backend.moveaxis": {
  "data": {
   "lineno": 192
  },
  "type": "constant"
 },
 "tensorly.backend.mxnet_backend": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "getattr",
    "mxnet.nd",
    "tensorly.backend.mxnet_backend.MxnetBackend",
    "tensorly.backend.mxnet_backend.message",
    "tensorly.backend.mxnet_backend.numpy"
   ]
  },
  "type": "module"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.SVD_FUNS": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.abs": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "isinstance",
    "mxnet.nd.NDArray",
    "mxnet.nd.abs",
    "staticmethod",
    "tensorly.backend.mxnet_backend.numpy"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.all": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "mxnet.nd.sum",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.argmax": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "mxnet.nd.argmax",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.argmin": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "mxnet.nd.argmin",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.clip": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "max",
    "min",
    "mxnet.nd.max",
    "mxnet.nd.maximum",
    "mxnet.nd.min",
    "mxnet.nd.minimum",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.concatenate": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "mxnet.nd.concat",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.conj": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.context": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.copy": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.is_tensor": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "isinstance",
    "mxnet.nd.NDArray",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.max": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "isinstance",
    "mxnet.nd.NDArray",
    "mxnet.nd.max",
    "staticmethod",
    "tensorly.backend.mxnet_backend.numpy"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.mean": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "mxnet.nd.mean",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.min": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "isinstance",
    "mxnet.nd.NDArray",
    "mxnet.nd.min",
    "staticmethod",
    "tensorly.backend.mxnet_backend.numpy"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.moveaxis": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "IndexError",
    "ValueError",
    "list",
    "mxnet.ndarray.transpose",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.ndim": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.norm": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "mxnet.nd.abs",
    "mxnet.nd.max",
    "mxnet.nd.sqrt",
    "mxnet.nd.sum",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.qr": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "AttributeError",
    "mxnet.nd.linalg.gelqf",
    "tensorly.backend.mxnet_backend.numpy",
    "tensorly.backend.mxnet_backend.warnings"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.reshape": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "mxnet.nd.reshape",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.shape": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.solve": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorly.backend.mxnet_backend.numpy"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.sqrt": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "isinstance",
    "mxnet.nd.NDArray",
    "mxnet.nd.sqrt",
    "staticmethod",
    "tensorly.backend.mxnet_backend.math"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.stack": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "mxnet.ndarray.stack",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.sum": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "mxnet.nd.sum",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.symeig_svd": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "ValueError",
    "mxnet.nd.linalg.syevd",
    "mxnet.ndarray.dot",
    "mxnet.ndarray.reshape",
    "mxnet.ndarray.transpose",
    "tensorly.backend.mxnet_backend.warnings"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.tensor": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "isinstance",
    "mxnet.cpu",
    "mxnet.nd.array",
    "staticmethod",
    "tensorly.backend.mxnet_backend.numpy"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.MxnetBackend.to_numpy": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "isinstance",
    "mxnet.nd.NDArray",
    "staticmethod",
    "tensorly.backend.mxnet_backend.numpy"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.mxnet_backend.dot": {
  "data": {
   "shadows": "mxnet.ndarray.dot"
  },
  "type": "import"
 },
 "tensorly.backend.mxnet_backend.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "tensorly.backend.mxnet_backend.message": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "tensorly.backend.mxnet_backend.mx": {
  "data": {
   "shadows": "mxnet"
  },
  "type": "import"
 },
 "tensorly.backend.mxnet_backend.nd": {
  "data": {
   "shadows": "mxnet.nd"
  },
  "type": "import"
 },
 "tensorly.backend.mxnet_backend.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.backend.mxnet_backend.reshape": {
  "data": {
   "shadows": "mxnet.ndarray.reshape"
  },
  "type": "import"
 },
 "tensorly.backend.mxnet_backend.stack": {
  "data": {
   "shadows": "mxnet.ndarray.stack"
  },
  "type": "import"
 },
 "tensorly.backend.mxnet_backend.transpose": {
  "data": {
   "shadows": "mxnet.ndarray.transpose"
  },
  "type": "import"
 },
 "tensorly.backend.mxnet_backend.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorly.backend.ndim": {
  "data": {
   "lineno": 185
  },
  "type": "constant"
 },
 "tensorly.backend.norm": {
  "data": {
   "lineno": 211
  },
  "type": "constant"
 },
 "tensorly.backend.numpy_backend": {
  "data": {
   "symbols_in_volume": [
    "getattr",
    "numpy",
    "numpy.linalg",
    "tensorly.backend.numpy_backend.NumpyBackend"
   ]
  },
  "type": "module"
 },
 "tensorly.backend.numpy_backend.NumpyBackend": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "tensorly.backend.numpy_backend.NumpyBackend.SVD_FUNS": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.numpy_backend.NumpyBackend.clip": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "numpy.clip",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.numpy_backend.NumpyBackend.context": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.numpy_backend.NumpyBackend.dot": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.numpy_backend.NumpyBackend.is_tensor": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "isinstance",
    "numpy.ndarray",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.numpy_backend.NumpyBackend.kr": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "chr",
    "enumerate",
    "len",
    "numpy.einsum",
    "ord",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.numpy_backend.NumpyBackend.ndim": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.numpy_backend.NumpyBackend.norm": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.max",
    "numpy.sqrt",
    "numpy.sum",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.numpy_backend.NumpyBackend.shape": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.numpy_backend.NumpyBackend.tensor": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "numpy.array",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.numpy_backend.NumpyBackend.to_numpy": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "numpy.copy",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.numpy_backend.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.backend.ones": {
  "data": {
   "lineno": 194
  },
  "type": "constant"
 },
 "tensorly.backend.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "tensorly.backend.override_module_dispatch": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "tensorly.backend.sys"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.override_module_dispatch.BackendAttributeModuleType": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "tensorly.backend.types"
   ]
  },
  "type": "class"
 },
 "tensorly.backend.override_module_dispatch.BackendAttributeModuleType.__dir__": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "dir",
    "list",
    "set",
    "super",
    "tensorly.backend._LOCAL_STATE"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.override_module_dispatch.BackendAttributeModuleType.__getattr__": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "getter_fun"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.partial_svd": {
  "data": {
   "lineno": 217
  },
  "type": "constant"
 },
 "tensorly.backend.prod": {
  "data": {
   "lineno": 207
  },
  "type": "constant"
 },
 "tensorly.backend.pytorch_backend": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "distutils.version.LooseVersion",
    "getattr",
    "tensorly.backend.pytorch_backend.PyTorchBackend",
    "tensorly.backend.pytorch_backend.message",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "module"
 },
 "tensorly.backend.pytorch_backend.LooseVersion": {
  "data": {
   "shadows": "distutils.version.LooseVersion"
  },
  "type": "import"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend": {
  "data": {
   "lineno": 22
  },
  "type": "class"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.SVD_FUNS": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend._reverse": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.all": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.arange": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "float",
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.argmax": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "input",
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.argmin": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "input",
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.clip": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.concatenate": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.conj": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.context": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.copy": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.mean": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.moveaxis": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "IndexError",
    "ValueError",
    "list",
    "range",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.ndim": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.norm": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.shape": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.solve": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.stack": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.sum": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.symeig_svd": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "ValueError",
    "tensorly.backend.pytorch_backend.torch",
    "tensorly.backend.pytorch_backend.warnings"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.tensor": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "isinstance",
    "numpy.ndarray",
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.to_numpy": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "isinstance",
    "numpy.asarray",
    "numpy.ndarray",
    "staticmethod",
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.transpose": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "list",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.PyTorchBackend.truncated_svd": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "tensorly.backend.pytorch_backend.torch"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.pytorch_backend.message": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "tensorly.backend.pytorch_backend.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.backend.pytorch_backend.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "tensorly.backend.pytorch_backend.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorly.backend.qr": {
  "data": {
   "lineno": 215
  },
  "type": "constant"
 },
 "tensorly.backend.register_backend": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "ValueError",
    "getattr",
    "map",
    "repr",
    "tensorly.backend._KNOWN_BACKENDS",
    "tensorly.backend._LOADED_BACKENDS",
    "tensorly.backend.importlib"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.reshape": {
  "data": {
   "lineno": 190
  },
  "type": "constant"
 },
 "tensorly.backend.set_backend": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "isinstance",
    "tensorly.backend._DEFAULT_BACKEND",
    "tensorly.backend._LOADED_BACKENDS",
    "tensorly.backend._LOCAL_STATE",
    "tensorly.backend.register_backend"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.shape": {
  "data": {
   "lineno": 184
  },
  "type": "constant"
 },
 "tensorly.backend.sign": {
  "data": {
   "lineno": 208
  },
  "type": "constant"
 },
 "tensorly.backend.solve": {
  "data": {
   "lineno": 214
  },
  "type": "constant"
 },
 "tensorly.backend.sqrt": {
  "data": {
   "lineno": 210
  },
  "type": "constant"
 },
 "tensorly.backend.stack": {
  "data": {
   "lineno": 189
  },
  "type": "constant"
 },
 "tensorly.backend.sum": {
  "data": {
   "lineno": 206
  },
  "type": "constant"
 },
 "tensorly.backend.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "tensorly.backend.tensor": {
  "data": {
   "lineno": 182
  },
  "type": "constant"
 },
 "tensorly.backend.tensorflow_backend": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "numpy.float32",
    "numpy.float64",
    "numpy.int32",
    "numpy.int64",
    "tensorflow.abs",
    "tensorflow.argmax",
    "tensorflow.argmin",
    "tensorflow.concat",
    "tensorflow.contrib.eager.DEVICE_PLACEMENT_SILENT",
    "tensorflow.contrib.eager.enable_eager_execution",
    "tensorflow.diag",
    "tensorflow.eye",
    "tensorflow.identity",
    "tensorflow.linalg.qr",
    "tensorflow.ones",
    "tensorflow.reduce_all",
    "tensorflow.reduce_max",
    "tensorflow.reduce_mean",
    "tensorflow.reduce_min",
    "tensorflow.reduce_prod",
    "tensorflow.reduce_sum",
    "tensorflow.reshape",
    "tensorflow.sign",
    "tensorflow.sqrt",
    "tensorflow.stack",
    "tensorflow.transpose",
    "tensorflow.where",
    "tensorflow.zeros",
    "tensorflow.zeros_like",
    "tensorly.backend.tensorflow_backend.TensorflowBackend",
    "tensorly.backend.tensorflow_backend._FUN_NAMES",
    "tensorly.backend.tensorflow_backend.message"
   ]
  },
  "type": "module"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend": {
  "data": {
   "lineno": 17
  },
  "type": "class"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.SVD_FUNS": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.arange": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "numpy.float32",
    "staticmethod",
    "tensorflow.range"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.clip": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow.clip_by_value",
    "tensorflow.reduce_max",
    "tensorflow.reduce_min"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.conj": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.context": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.dot": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "tensorflow.tensordot"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.is_tensor": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "isinstance",
    "staticmethod",
    "tensorflow.Tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.moveaxis": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "IndexError",
    "ValueError",
    "list",
    "range",
    "tensorflow.transpose"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.ndim": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "len",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.norm": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "numpy.inf",
    "staticmethod",
    "tensorflow.norm"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.shape": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "staticmethod",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.solve": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.linalg.solve",
    "tensorflow.reshape",
    "tensorflow.squeeze"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.tensor": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "isinstance",
    "numpy.float32",
    "staticmethod",
    "tensorflow.Tensor",
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.to_numpy": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "isinstance",
    "numpy.ndarray",
    "staticmethod",
    "tensorflow.Tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend.TensorflowBackend.truncated_svd": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.svd",
    "tensorflow.transpose"
   ]
  },
  "type": "function"
 },
 "tensorly.backend.tensorflow_backend._FUN_NAMES": {
  "data": {
   "lineno": 163
  },
  "type": "constant"
 },
 "tensorly.backend.tensorflow_backend.message": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "tensorly.backend.tensorflow_backend.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.backend.tensorflow_backend.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorly.backend.tensorflow_backend.tfe": {
  "data": {
   "shadows": "tensorflow.contrib.eager"
  },
  "type": "import"
 },
 "tensorly.backend.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "tensorly.backend.to_numpy": {
  "data": {
   "lineno": 186
  },
  "type": "constant"
 },
 "tensorly.backend.transpose": {
  "data": {
   "lineno": 191
  },
  "type": "constant"
 },
 "tensorly.backend.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "tensorly.backend.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorly.backend.where": {
  "data": {
   "lineno": 198
  },
  "type": "constant"
 },
 "tensorly.backend.zeros": {
  "data": {
   "lineno": 195
  },
  "type": "constant"
 },
 "tensorly.backend.zeros_like": {
  "data": {
   "lineno": 196
  },
  "type": "constant"
 },
 "tensorly.base": {
  "data": {},
  "type": "module"
 },
 "tensorly.base.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.base.fold": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "tensorly.base.partial_fold": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "tensorly.base.partial_tensor_to_vec": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "tensorly.base.partial_unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.base.partial_unfold": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.base.partial_vec_to_tensor": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "tensorly.base.partial_fold"
   ]
  },
  "type": "function"
 },
 "tensorly.base.tensor_to_vec": {
  "data": {
   "lineno": 3
  },
  "type": "function"
 },
 "tensorly.base.unfold": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "tensorly.base.vec_to_tensor": {
  "data": {
   "lineno": 19
  },
  "type": "function"
 },
 "tensorly.contrib": {
  "data": {},
  "type": "module"
 },
 "tensorly.contrib.decomposition": {
  "data": {},
  "type": "module"
 },
 "tensorly.contrib.decomposition.tests": {
  "data": {},
  "type": "module"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross": {
  "data": {
   "symbols_in_volume": [
    "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.pytest",
    "tensorly.get_backend"
   ]
  },
  "type": "module"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.assert_": {
  "data": {
   "shadows": "tensorly.testing.assert_"
  },
  "type": "import"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.npr": {
  "data": {
   "shadows": "numpy.random"
  },
  "type": "import"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.skip_if_tensorflow": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.test_matrix_product_state_cross_1": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "check_random_state",
    "len",
    "matrix_product_state_cross",
    "numpy.arange",
    "range",
    "str",
    "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.skip_if_tensorflow",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.test_matrix_product_state_cross_2": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "check_random_state",
    "matrix_product_state_cross",
    "range",
    "str",
    "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.skip_if_tensorflow",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.test_matrix_product_state_cross_3": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "check_random_state",
    "matrix_product_state_cross",
    "mps_to_tensor",
    "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.skip_if_tensorflow",
    "tensorly.norm",
    "tensorly.tensor",
    "tensorly.testing.assert_"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.test_matrix_product_state_cross_4": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "evaluateGrid",
    "getEquispaceGrid",
    "matrix_product_state_cross",
    "mps_to_tensor",
    "print",
    "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.skip_if_tensorflow",
    "tensorly.norm",
    "tensorly.tensor",
    "tensorly.testing.assert_"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.test_matrix_product_state_cross_4.evaluateGrid": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "fcn",
    "len",
    "numpy.array",
    "numpy.zeros",
    "range",
    "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.itertools"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.test_matrix_product_state_cross_4.func": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.test_matrix_product_state_cross_4.getEquispaceGrid": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "numpy.array",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "__name__.__dict__.keys",
    "list",
    "override_module_dispatch",
    "tensorly.contrib.sparse.sparse_dir",
    "tensorly.contrib.sparse.sys",
    "wrap"
   ]
  },
  "type": "module"
 },
 "tensorly.contrib.sparse.backend": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "override_module_dispatch",
    "tensorly.contrib.sparse.backend._get_backend_dir",
    "tensorly.contrib.sparse.backend._get_backend_method",
    "tensorly.contrib.sparse.backend.dispatch_sparse"
   ]
  },
  "type": "module"
 },
 "tensorly.contrib.sparse.backend._KNOWN_BACKENDS": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend._LOADED_BACKENDS": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend._get_backend_dir": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "dir",
    "get_backend",
    "tensorly.contrib.sparse.backend._LOADED_BACKENDS",
    "tensorly.contrib.sparse.backend.register_sparse_backend"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend._get_backend_method": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "get_backend",
    "getattr",
    "tensorly.contrib.sparse.backend._LOADED_BACKENDS",
    "tensorly.contrib.sparse.backend.register_sparse_backend"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.abs": {
  "data": {
   "lineno": 96
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.all": {
  "data": {
   "lineno": 91
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.arange": {
  "data": {
   "lineno": 82
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.clip": {
  "data": {
   "lineno": 87
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.concatenate": {
  "data": {
   "lineno": 78
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.context": {
  "data": {
   "lineno": 73
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.backend.copy": {
  "data": {
   "lineno": 77
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.dispatch_sparse": {
  "data": {
   "lineno": 62
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.dispatch_sparse.inner": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "func",
    "tensorly.contrib.sparse.backend.functools",
    "tensorly.contrib.sparse.backend.sparse_context"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.dot": {
  "data": {
   "lineno": 99
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.eye": {
  "data": {
   "lineno": 86
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.fold": {
  "data": {
   "lineno": 106
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.backend.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.backend.is_tensor": {
  "data": {
   "lineno": 72
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.kr": {
  "data": {
   "lineno": 101
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.kron": {
  "data": {
   "lineno": 100
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.kruskal_to_tensor": {
  "data": {
   "lineno": 113
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.kruskal_to_unfolded": {
  "data": {
   "lineno": 114
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.kruskal_to_vec": {
  "data": {
   "lineno": 115
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.max": {
  "data": {
   "lineno": 89
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.mean": {
  "data": {
   "lineno": 92
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.min": {
  "data": {
   "lineno": 90
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.moveaxis": {
  "data": {
   "lineno": 80
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.mps_to_tensor": {
  "data": {
   "lineno": 119
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.mps_to_unfolded": {
  "data": {
   "lineno": 120
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.mps_to_vec": {
  "data": {
   "lineno": 121
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.ndim": {
  "data": {
   "lineno": 75
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.norm": {
  "data": {
   "lineno": 98
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.numpy_backend": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "distutils.version.LooseVersion",
    "getattr",
    "numpy",
    "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend",
    "tensorly.contrib.sparse.backend.numpy_backend._MIN_SPARSE_VERSION",
    "tensorly.contrib.sparse.backend.numpy_backend.sparse"
   ]
  },
  "type": "module"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.LooseVersion": {
  "data": {
   "shadows": "distutils.version.LooseVersion"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend": {
  "data": {
   "lineno": 24
  },
  "type": "class"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend.SVD_FUNS": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend.clip": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "numpy.clip",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend.context": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend.copy": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "copy.copy",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend.dot": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "numpy.dot",
    "tensorly.contrib.sparse.backend.numpy_backend.is_sparse",
    "tensorly.contrib.sparse.backend.numpy_backend.sparse"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend.is_tensor": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "staticmethod",
    "tensorly.contrib.sparse.backend.numpy_backend.is_sparse"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend.norm": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.max",
    "numpy.sqrt",
    "numpy.sum",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend.partial_svd": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "min",
    "numpy.complexfloating",
    "numpy.issubdtype",
    "numpy.sqrt",
    "numpy.zeros",
    "staticmethod",
    "tensorly.contrib.sparse.backend.numpy_backend.is_sparse",
    "tensorly.contrib.sparse.backend.numpy_backend.scipy",
    "tensorly.contrib.sparse.backend.numpy_backend.sparse"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend.solve": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "numpy.linalg.solve",
    "tensorly.contrib.sparse.backend.numpy_backend.is_sparse",
    "tensorly.contrib.sparse.backend.numpy_backend.scipy",
    "tensorly.contrib.sparse.backend.numpy_backend.sparse"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend.tensor": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "isinstance",
    "numpy.array",
    "numpy.ndarray",
    "staticmethod",
    "tensorly.contrib.sparse.backend.numpy_backend.is_sparse",
    "tensorly.contrib.sparse.backend.numpy_backend.sparse"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend.to_numpy": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "numpy.array",
    "staticmethod",
    "tensorly.contrib.sparse.backend.numpy_backend.is_sparse"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend._MIN_SPARSE_VERSION": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.numpy_backend._py_copy": {
  "data": {
   "shadows": "copy.copy"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.is_sparse": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "isinstance",
    "tensorly.contrib.sparse.backend.numpy_backend.sparse"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.scipy.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.scipy.sparse.linalg": {
  "data": {
   "shadows": "scipy.sparse.linalg"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.backend.numpy_backend.sparse": {
  "data": {
   "shadows": "sparse"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.backend.ones": {
  "data": {
   "lineno": 83
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.partial_fold": {
  "data": {
   "lineno": 110
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.partial_svd": {
  "data": {
   "lineno": 104
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.partial_tensor_to_vec": {
  "data": {
   "lineno": 111
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.partial_unfold": {
  "data": {
   "lineno": 109
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.partial_vec_to_tensor": {
  "data": {
   "lineno": 112
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.prod": {
  "data": {
   "lineno": 94
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.qr": {
  "data": {
   "lineno": 103
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.register_sparse_backend": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "ValueError",
    "getattr",
    "map",
    "repr",
    "tensorly.contrib.sparse.backend._KNOWN_BACKENDS",
    "tensorly.contrib.sparse.backend._LOADED_BACKENDS",
    "tensorly.contrib.sparse.backend.importlib"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.reshape": {
  "data": {
   "lineno": 79
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.shape": {
  "data": {
   "lineno": 74
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.sign": {
  "data": {
   "lineno": 95
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.solve": {
  "data": {
   "lineno": 102
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.sparse_context": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "backend_context",
    "contextlib.contextmanager",
    "get_backend",
    "tensorly.contrib.sparse.backend._LOADED_BACKENDS",
    "tensorly.contrib.sparse.backend.register_sparse_backend"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.backend.sqrt": {
  "data": {
   "lineno": 97
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.sum": {
  "data": {
   "lineno": 93
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.tensor": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.tensor_to_vec": {
  "data": {
   "lineno": 107
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.to_numpy": {
  "data": {
   "lineno": 76
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.transpose": {
  "data": {
   "lineno": 81
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.tucker_to_tensor": {
  "data": {
   "lineno": 116
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.tucker_to_unfolded": {
  "data": {
   "lineno": 117
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.tucker_to_vec": {
  "data": {
   "lineno": 118
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.unfold": {
  "data": {
   "lineno": 105
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.vec_to_tensor": {
  "data": {
   "lineno": 108
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.where": {
  "data": {
   "lineno": 88
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.zeros": {
  "data": {
   "lineno": 84
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.backend.zeros_like": {
  "data": {
   "lineno": 85
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.core": {
  "data": {},
  "type": "module"
 },
 "tensorly.contrib.sparse.core.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.core.wrap": {
  "data": {
   "lineno": 5
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.core.wrap.inner": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "func",
    "sparse_context",
    "tensorly.contrib.sparse.core.functools"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.decomposition": {
  "data": {
   "symbols_in_volume": [
    "wrap"
   ]
  },
  "type": "module"
 },
 "tensorly.contrib.sparse.decomposition.non_negative_parafac": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.decomposition.non_negative_tucker": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.decomposition.parafac": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.decomposition.partial_tucker": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.decomposition.robust_pca": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.decomposition.tucker": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.fold": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.kruskal_tensor": {
  "data": {
   "symbols_in_volume": [
    "wrap"
   ]
  },
  "type": "module"
 },
 "tensorly.contrib.sparse.kruskal_tensor.kruskal_to_tensor": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.kruskal_tensor.unfolding_dot_khatri_rao": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.kruskal_to_tensor": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.kruskal_to_unfolded": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.kruskal_to_vec": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.mps_to_tensor": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.mps_to_unfolded": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.mps_to_vec": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.partial_fold": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.partial_tensor_to_vec": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.partial_unfold": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.partial_vec_to_tensor": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.sparse_dir": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "_get_backend_dir",
    "tensorly.contrib.sparse.static_items"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.static_items": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.tenalg": {
  "data": {
   "symbols_in_volume": [
    "wrap"
   ]
  },
  "type": "module"
 },
 "tensorly.contrib.sparse.tenalg.inner": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.tenalg.khatri_rao": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.tenalg.kronecker": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.tenalg.mode_dot": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.tenalg.multi_mode_dot": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.tensor_to_vec": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.tests": {
  "data": {},
  "type": "module"
 },
 "tensorly.contrib.sparse.tests.test_decomposition": {
  "data": {
   "symbols_in_volume": [
    "tensorly.contrib.sparse.tests.test_decomposition.pytest"
   ]
  },
  "type": "module"
 },
 "tensorly.contrib.sparse.tests.test_decomposition.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.tests.test_decomposition.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.tests.test_decomposition.sparse": {
  "data": {
   "shadows": "sparse"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.tests.test_decomposition.test_sparse_parafac": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "kruskal_to_tensor",
    "numpy.ones",
    "parafac",
    "tensorly.contrib.sparse.tests.test_decomposition.sparse"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.tests.test_decomposition.tl": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.tests.test_tenalg": {
  "data": {
   "symbols_in_volume": [
    "tensorly.contrib.sparse.tests.test_tenalg.pytest"
   ]
  },
  "type": "module"
 },
 "tensorly.contrib.sparse.tests.test_tenalg.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.tests.test_tenalg.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.tests.test_tenalg.sparse": {
  "data": {
   "shadows": "sparse"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.tests.test_tenalg.sparse_unfolding_dot_khatri_rao": {
  "data": {
   "shadows": "tensorly.contrib.sparse.kruskal_tensor.unfolding_dot_khatri_rao"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.tests.test_tenalg.stl": {
  "data": {
   "shadows": "tensorly.contrib.sparse"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.tests.test_tenalg.test_sparse_unfolding_times_kruskal": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "numpy.ones",
    "range",
    "tensorly.contrib.sparse.kruskal_tensor.unfolding_dot_khatri_rao",
    "tensorly.contrib.sparse.kruskal_to_tensor",
    "tensorly.contrib.sparse.tests.test_tenalg.sparse"
   ]
  },
  "type": "function"
 },
 "tensorly.contrib.sparse.tests.test_tenalg.tl": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.contrib.sparse.tucker_to_tensor": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.tucker_to_unfolded": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.tucker_to_vec": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.unfold": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "tensorly.contrib.sparse.vec_to_tensor": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorly.datasets": {
  "data": {},
  "type": "module"
 },
 "tensorly.datasets.synthetic": {
  "data": {},
  "type": "module"
 },
 "tensorly.datasets.synthetic.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.datasets.synthetic.gen_image": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.float",
    "numpy.ogrid",
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "tensorly.datasets.synthetic.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.datasets.tests": {
  "data": {},
  "type": "module"
 },
 "tensorly.datasets.tests.test_synthetic": {
  "data": {},
  "type": "module"
 },
 "tensorly.datasets.tests.test_synthetic.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.datasets.tests.test_synthetic.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.datasets.tests.test_synthetic.test_gen_image": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "abs",
    "assert_array_equal",
    "gen_image",
    "numpy.pi"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition": {
  "data": {},
  "type": "module"
 },
 "tensorly.decomposition._tucker": {
  "data": {},
  "type": "module"
 },
 "tensorly.decomposition._tucker.non_negative_tucker": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "DeprecationWarning",
    "RuntimeWarning",
    "abs",
    "check_random_state",
    "enumerate",
    "int",
    "isinstance",
    "mode_dot",
    "print",
    "range",
    "tensorly.abs",
    "tensorly.clip",
    "tensorly.context",
    "tensorly.decomposition._tucker.tucker",
    "tensorly.decomposition._tucker.warnings",
    "tensorly.dot",
    "tensorly.ndim",
    "tensorly.norm",
    "tensorly.shape",
    "tensorly.tensor",
    "tensorly.transpose",
    "tucker_to_tensor",
    "unfold",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition._tucker.partial_tucker": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "DeprecationWarning",
    "KeyError",
    "ValueError",
    "Warning",
    "abs",
    "check_random_state",
    "enumerate",
    "int",
    "isinstance",
    "len",
    "math.sqrt",
    "multi_mode_dot",
    "print",
    "range",
    "svd_fun",
    "tensorly.SVD_FUNS",
    "tensorly.context",
    "tensorly.decomposition._tucker.warnings",
    "tensorly.get_backend",
    "tensorly.norm",
    "tensorly.shape",
    "tensorly.tensor",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition._tucker.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "tensorly.decomposition._tucker.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.decomposition._tucker.tucker": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "list",
    "range",
    "tensorly.decomposition._tucker.partial_tucker",
    "tensorly.ndim"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition._tucker.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorly.decomposition.candecomp_parafac": {
  "data": {},
  "type": "module"
 },
 "tensorly.decomposition.candecomp_parafac.initialize_factors": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "check_random_state",
    "range",
    "svd_fun",
    "tensorly.SVD_FUNS",
    "tensorly.abs",
    "tensorly.concatenate",
    "tensorly.context",
    "tensorly.get_backend",
    "tensorly.ndim",
    "tensorly.norm",
    "tensorly.reshape",
    "tensorly.shape",
    "tensorly.tensor",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.candecomp_parafac.non_negative_parafac": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorly.decomposition.candecomp_parafac.parafac"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.candecomp_parafac.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.decomposition.candecomp_parafac.parafac": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "KruskalTensor",
    "abs",
    "enumerate",
    "int",
    "isinstance",
    "kruskal_norm",
    "len",
    "min",
    "numpy.ones",
    "print",
    "range",
    "tensorly.abs",
    "tensorly.clip",
    "tensorly.conj",
    "tensorly.context",
    "tensorly.decomposition.candecomp_parafac.initialize_factors",
    "tensorly.dot",
    "tensorly.eps",
    "tensorly.kruskal_to_tensor",
    "tensorly.ndim",
    "tensorly.norm",
    "tensorly.ones",
    "tensorly.qr",
    "tensorly.reshape",
    "tensorly.shape",
    "tensorly.solve",
    "tensorly.sqrt",
    "tensorly.sum",
    "tensorly.tensor",
    "tensorly.transpose",
    "tensorly.where",
    "unfolding_dot_khatri_rao"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.candecomp_parafac.randomised_parafac": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": [
    "KruskalTensor",
    "abs",
    "check_random_state",
    "kruskal_to_tensor",
    "print",
    "range",
    "slice",
    "tensorly.context",
    "tensorly.decomposition.candecomp_parafac.initialize_factors",
    "tensorly.decomposition.candecomp_parafac.sample_khatri_rao",
    "tensorly.dot",
    "tensorly.ndim",
    "tensorly.norm",
    "tensorly.ones",
    "tensorly.solve",
    "tensorly.transpose",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.candecomp_parafac.sample_khatri_rao": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "check_random_state",
    "int",
    "isinstance",
    "len",
    "numpy.random.RandomState",
    "numpy.zeros",
    "range",
    "tensorly.context",
    "tensorly.decomposition.candecomp_parafac.warnings",
    "tensorly.ones",
    "tensorly.shape",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.candecomp_parafac.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.decomposition.candecomp_parafac.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorly.decomposition.mps_decomposition": {
  "data": {},
  "type": "module"
 },
 "tensorly.decomposition.mps_decomposition.matrix_product_state": {
  "data": {
   "lineno": 3,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "isinstance",
    "len",
    "list",
    "min",
    "print",
    "range",
    "str",
    "tensorly.partial_svd",
    "tensorly.reshape"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.mps_decomposition.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.decomposition.robust_decomposition": {
  "data": {},
  "type": "module"
 },
 "tensorly.decomposition.robust_decomposition.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.decomposition.robust_decomposition.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.decomposition.robust_decomposition.robust_pca": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "fold",
    "max",
    "min",
    "numpy.max",
    "print",
    "range",
    "soft_thresholding",
    "svd_thresholding",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.tests": {
  "data": {},
  "type": "module"
 },
 "tensorly.decomposition.tests.test_candecomp_parafac": {
  "data": {},
  "type": "module"
 },
 "tensorly.decomposition.tests.test_candecomp_parafac.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.decomposition.tests.test_candecomp_parafac.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.decomposition.tests.test_candecomp_parafac.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tensorly.decomposition.tests.test_candecomp_parafac.test_non_negative_parafac": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "assert_",
    "check_random_state",
    "kruskal_to_tensor",
    "non_negative_parafac",
    "parafac"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.tests.test_candecomp_parafac.test_parafac": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ValueError",
    "assert_",
    "check_random_state",
    "initialize_factors",
    "kruskal_to_tensor",
    "numpy.testing.assert_raises",
    "parafac",
    "random_kruskal"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.tests.test_candecomp_parafac.test_randomised_parafac": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "assert_",
    "check_random_state",
    "enumerate",
    "float",
    "kruskal_to_tensor",
    "random_kruskal",
    "randomised_parafac",
    "tensorly.decomposition.tests.test_candecomp_parafac.pytest",
    "tensorly.get_backend"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.tests.test_candecomp_parafac.test_sample_khatri_rao": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "assert_",
    "assert_array_equal",
    "check_random_state",
    "enumerate",
    "int",
    "khatri_rao",
    "numpy.max",
    "numpy.min",
    "parafac",
    "sample_khatri_rao",
    "tensorly.decomposition.tests.test_candecomp_parafac.pytest",
    "tensorly.get_backend"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.tests.test_candecomp_parafac.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.decomposition.tests.test_mps_decomposition": {
  "data": {},
  "type": "module"
 },
 "tensorly.decomposition.tests.test_mps_decomposition.test_matrix_product_state": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "assert_",
    "check_random_state",
    "len",
    "matrix_product_state",
    "range",
    "str",
    "tensorly.mps_to_tensor",
    "tensorly.norm",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.tests.test_mps_decomposition.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.decomposition.tests.test_robust_decomposition": {
  "data": {},
  "type": "module"
 },
 "tensorly.decomposition.tests.test_robust_decomposition.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.decomposition.tests.test_robust_decomposition.test_RPCA": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "assert_",
    "assert_array_almost_equal",
    "assert_array_equal",
    "check_random_state",
    "numpy.array",
    "numpy.copy",
    "numpy.vstack",
    "robust_pca",
    "tensorly.norm",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.tests.test_robust_decomposition.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.decomposition.tests.test_tucker": {
  "data": {},
  "type": "module"
 },
 "tensorly.decomposition.tests.test_tucker.test_non_negative_tucker": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "assert_",
    "check_random_state",
    "enumerate",
    "non_negative_tucker",
    "tensorly.all",
    "tensorly.ndim",
    "tensorly.norm",
    "tensorly.shape",
    "tensorly.tensor",
    "tucker",
    "tucker_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.tests.test_tucker.test_partial_tucker": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "assert_",
    "assert_equal",
    "check_random_state",
    "enumerate",
    "multi_mode_dot",
    "partial_tucker",
    "tensorly.abs",
    "tensorly.max",
    "tensorly.norm",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.tests.test_tucker.test_tucker": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "assert_",
    "assert_equal",
    "check_random_state",
    "enumerate",
    "tensorly.abs",
    "tensorly.max",
    "tensorly.norm",
    "tensorly.shape",
    "tensorly.tensor",
    "tucker",
    "tucker_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.decomposition.tests.test_tucker.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.full_dir": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "__name__.__dict__.keys",
    "_get_backend_dir",
    "list",
    "tensorly.sys"
   ]
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor": {
  "data": {},
  "type": "module"
 },
 "tensorly.kruskal_tensor.KruskalTensor": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "collections.abc.Mapping"
   ]
  },
  "type": "class"
 },
 "tensorly.kruskal_tensor.KruskalTensor.__getitem__": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "IndexError"
   ]
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.KruskalTensor.__init__": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "super",
    "tensorly.kruskal_tensor._validate_kruskal_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.KruskalTensor.__iter__": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.KruskalTensor.__len__": {
  "data": {
   "lineno": 47
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.KruskalTensor.__repr__": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.Mapping": {
  "data": {
   "shadows": "collections.abc.Mapping"
  },
  "type": "import"
 },
 "tensorly.kruskal_tensor.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.kruskal_tensor._validate_kruskal_tensor": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "int",
    "isinstance",
    "len",
    "tensorly.kruskal_tensor.KruskalTensor",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.kruskal_mode_dot": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "ValueError",
    "max",
    "tensorly.kruskal_tensor.KruskalTensor",
    "tensorly.kruskal_tensor._validate_kruskal_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.kruskal_norm": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "tensorly.kruskal_tensor._validate_kruskal_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.kruskal_normalise": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "tensorly.kruskal_tensor.KruskalTensor",
    "tensorly.kruskal_tensor._validate_kruskal_tensor",
    "tensorly.kruskal_tensor.warnings"
   ]
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.kruskal_to_tensor": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "fold",
    "khatri_rao",
    "tensorly.kruskal_tensor._validate_kruskal_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.kruskal_to_unfolded": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "khatri_rao",
    "tensorly.kruskal_tensor._validate_kruskal_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.kruskal_to_vec": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "tensor_to_vec",
    "tensorly.kruskal_tensor.kruskal_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.unfolding_dot_khatri_rao": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "multi_mode_dot",
    "range",
    "tensorly.kruskal_tensor._validate_kruskal_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.kruskal_tensor.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorly.metrics": {
  "data": {},
  "type": "module"
 },
 "tensorly.metrics.regression": {
  "data": {},
  "type": "module"
 },
 "tensorly.metrics.regression.MSE": {
  "data": {
   "lineno": 6
  },
  "type": "function"
 },
 "tensorly.metrics.regression.RMSE": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "tensorly.metrics.regression.MSE"
   ]
  },
  "type": "function"
 },
 "tensorly.metrics.regression.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.metrics.regression.correlation": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "tensorly.metrics.regression.covariance",
    "tensorly.metrics.regression.variance"
   ]
  },
  "type": "function"
 },
 "tensorly.metrics.regression.covariance": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "tensorly.metrics.regression.reflective_correlation_coefficient": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "tensorly.metrics.regression.standard_deviation": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "tensorly.metrics.regression.variance"
   ]
  },
  "type": "function"
 },
 "tensorly.metrics.regression.variance": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "tensorly.metrics.regression.covariance"
   ]
  },
  "type": "function"
 },
 "tensorly.metrics.tests": {
  "data": {},
  "type": "module"
 },
 "tensorly.metrics.tests.test_regression": {
  "data": {},
  "type": "module"
 },
 "tensorly.metrics.tests.test_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.metrics.tests.test_regression.test_MSE": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "MSE",
    "assert_array_almost_equal",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.metrics.tests.test_regression.test_RMSE": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "RMSE",
    "assert_array_almost_equal",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.metrics.tests.test_regression.test_correlation": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "correlation",
    "numpy.random.random",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.metrics.tests.test_regression.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.mps_tensor": {
  "data": {},
  "type": "module"
 },
 "tensorly.mps_tensor._validate_mps_tensor": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "len",
    "tensorly.ndim",
    "tensorly.shape",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorly.mps_tensor.mps_to_tensor": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "tensorly.dot",
    "tensorly.reshape"
   ]
  },
  "type": "function"
 },
 "tensorly.mps_tensor.mps_to_unfolded": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "tensorly.mps_tensor.mps_to_tensor",
    "tensorly.unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.mps_tensor.mps_to_vec": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "tensorly.mps_tensor.mps_to_tensor",
    "tensorly.tensor_to_vec"
   ]
  },
  "type": "function"
 },
 "tensorly.mps_tensor.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.random": {
  "data": {},
  "type": "module"
 },
 "tensorly.random.base": {
  "data": {},
  "type": "module"
 },
 "tensorly.random.base.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.random.base.check_random_state": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "isinstance",
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorly.random.base.cp_tensor": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "DeprecationWarning",
    "tensorly.random.base.random_kruskal",
    "tensorly.random.base.warnings"
   ]
  },
  "type": "function"
 },
 "tensorly.random.base.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.random.base.qr": {
  "data": {
   "shadows": "numpy.linalg.qr"
  },
  "type": "import"
 },
 "tensorly.random.base.random_kruskal": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "KruskalTensor",
    "ValueError",
    "kruskal_normalise",
    "kruskal_to_tensor",
    "min",
    "tensorly.random.base.check_random_state"
   ]
  },
  "type": "function"
 },
 "tensorly.random.base.random_mps": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "int",
    "isinstance",
    "len",
    "list",
    "mps_to_tensor",
    "tensorly.random.base.check_random_state"
   ]
  },
  "type": "function"
 },
 "tensorly.random.base.random_tucker": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "int",
    "isinstance",
    "tensorly.random.base.check_random_state",
    "tucker_to_tensor",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorly.random.base.tucker_tensor": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "DeprecationWarning",
    "tensorly.random.base.random_tucker",
    "tensorly.random.base.warnings"
   ]
  },
  "type": "function"
 },
 "tensorly.random.base.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorly.random.tests": {
  "data": {},
  "type": "module"
 },
 "tensorly.random.tests.test_base": {
  "data": {},
  "type": "module"
 },
 "tensorly.random.tests.test_base.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.random.tests.test_base.matrix_rank": {
  "data": {
   "shadows": "numpy.linalg.matrix_rank"
  },
  "type": "import"
 },
 "tensorly.random.tests.test_base.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.random.tests.test_base.test_check_random_state": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "ValueError",
    "assert_raises",
    "check_random_state",
    "isinstance",
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorly.random.tests.test_base.test_random_kruskal": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "ValueError",
    "assert_array_almost_equal",
    "assert_equal",
    "enumerate",
    "numpy.linalg.matrix_rank",
    "numpy.testing.assert_raises",
    "random_kruskal",
    "range",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.random.tests.test_base.test_random_mps": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "ValueError",
    "assert_equal",
    "enumerate",
    "numpy.testing.assert_raises",
    "random_mps",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorly.random.tests.test_base.test_random_tucker": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "ValueError",
    "assert_array_almost_equal",
    "assert_equal",
    "assert_raises",
    "enumerate",
    "min",
    "multi_mode_dot",
    "numpy.eye",
    "numpy.linalg.matrix_rank",
    "random_tucker",
    "range",
    "tucker_to_tensor",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.regression": {
  "data": {},
  "type": "module"
 },
 "tensorly.regression.kruskal_regression": {
  "data": {},
  "type": "module"
 },
 "tensorly.regression.kruskal_regression.KruskalRegressor": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "tensorly.regression.kruskal_regression.KruskalRegressor.__init__": {
  "data": {
   "lineno": 34
  },
  "type": "function"
 },
 "tensorly.regression.kruskal_regression.KruskalRegressor.fit": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "abs",
    "check_random_state",
    "khatri_rao",
    "kruskal_to_tensor",
    "kruskal_to_vec",
    "len",
    "numpy.eye",
    "partial_unfold",
    "print",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.regression.kruskal_regression.KruskalRegressor.get_params": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "getattr"
   ]
  },
  "type": "function"
 },
 "tensorly.regression.kruskal_regression.KruskalRegressor.predict": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "partial_tensor_to_vec"
   ]
  },
  "type": "function"
 },
 "tensorly.regression.kruskal_regression.KruskalRegressor.set_params": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "setattr"
   ]
  },
  "type": "function"
 },
 "tensorly.regression.kruskal_regression.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.regression.kruskal_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.regression.tests": {
  "data": {},
  "type": "module"
 },
 "tensorly.regression.tests.test_kruskal_regression": {
  "data": {},
  "type": "module"
 },
 "tensorly.regression.tests.test_kruskal_regression.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.regression.tests.test_kruskal_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.regression.tests.test_kruskal_regression.test_KruskalRegressor": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "KruskalRegressor",
    "RMSE",
    "assert_",
    "check_random_state",
    "numpy.zeros",
    "partial_tensor_to_vec",
    "tensor_to_vec"
   ]
  },
  "type": "function"
 },
 "tensorly.regression.tests.test_tucker_regression": {
  "data": {},
  "type": "module"
 },
 "tensorly.regression.tests.test_tucker_regression.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.regression.tests.test_tucker_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.regression.tests.test_tucker_regression.test_TuckerRegressor": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "RMSE",
    "TuckerRegressor",
    "assert_",
    "numpy.random.normal",
    "numpy.zeros",
    "partial_tensor_to_vec",
    "tensor_to_vec"
   ]
  },
  "type": "function"
 },
 "tensorly.regression.tucker_regression": {
  "data": {},
  "type": "module"
 },
 "tensorly.regression.tucker_regression.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.regression.tucker_regression.TuckerRegressor": {
  "data": {
   "lineno": 15
  },
  "type": "class"
 },
 "tensorly.regression.tucker_regression.TuckerRegressor.__init__": {
  "data": {
   "lineno": 35
  },
  "type": "function"
 },
 "tensorly.regression.tucker_regression.TuckerRegressor.fit": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "abs",
    "check_random_state",
    "kronecker",
    "len",
    "numpy.eye",
    "partial_tensor_to_vec",
    "partial_unfold",
    "print",
    "range",
    "tucker_to_tensor",
    "tucker_to_vec",
    "unfold",
    "vec_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.regression.tucker_regression.TuckerRegressor.get_params": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "getattr"
   ]
  },
  "type": "function"
 },
 "tensorly.regression.tucker_regression.TuckerRegressor.predict": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "partial_tensor_to_vec"
   ]
  },
  "type": "function"
 },
 "tensorly.regression.tucker_regression.TuckerRegressor.set_params": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "setattr"
   ]
  },
  "type": "function"
 },
 "tensorly.regression.tucker_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "tensorly.tenalg": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg._khatri_rao": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg._khatri_rao.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tenalg._khatri_rao.khatri_rao": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "len",
    "range",
    "tensorly.tenalg._khatri_rao.warnings"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg._khatri_rao.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorly.tenalg._kronecker": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg._kronecker.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tenalg._kronecker.kronecker": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.contraction": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.contraction.contract": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "isinstance",
    "len",
    "list",
    "numpy.prod",
    "range",
    "tensorly.dot",
    "tensorly.ndim",
    "tensorly.reshape",
    "tensorly.shape",
    "tensorly.transpose",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.contraction.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tenalg.contraction.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.tenalg.generalised_inner_product": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.generalised_inner_product.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tenalg.generalised_inner_product.inner": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "len",
    "list",
    "numpy.prod"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.generalised_inner_product.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tenalg.n_mode_product": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.n_mode_product.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tenalg.n_mode_product.fold": {
  "data": {
   "shadows": "tensorly.fold"
  },
  "type": "import"
 },
 "tensorly.tenalg.n_mode_product.mode_dot": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "list",
    "tensorly.fold",
    "tensorly.unfold",
    "tensorly.vec_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.n_mode_product.multi_mode_dot": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "range",
    "sorted",
    "tensorly.tenalg.n_mode_product.mode_dot",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.n_mode_product.unfold": {
  "data": {
   "shadows": "tensorly.unfold"
  },
  "type": "import"
 },
 "tensorly.tenalg.n_mode_product.vec_to_tensor": {
  "data": {
   "shadows": "tensorly.vec_to_tensor"
  },
  "type": "import"
 },
 "tensorly.tenalg.outer_product": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.outer_product.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tenalg.outer_product.outer": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.proximal": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.proximal.procrustes": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "min",
    "tensorly.dot",
    "tensorly.partial_svd"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.proximal.soft_thresholding": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "tensorly.abs",
    "tensorly.clip",
    "tensorly.sign"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.proximal.svd_thresholding": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "min",
    "tensorly.dot",
    "tensorly.partial_svd",
    "tensorly.reshape",
    "tensorly.tenalg.proximal.soft_thresholding"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.proximal.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.tests.test_contraction": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.tests.test_contraction.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_contraction.test_contract": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "ValueError",
    "assert_array_almost_equal",
    "assert_raises",
    "contract",
    "enumerate",
    "numpy.random.random_sample",
    "tensorly.tenalg.inner",
    "tensorly.tenalg.mode_dot",
    "tensorly.tenalg.multi_mode_dot",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.tests.test_contraction.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_generalised_inner_product": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.tests.test_generalised_inner_product.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_generalised_inner_product.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_generalised_inner_product.test_inner": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "ValueError",
    "assert_array_almost_equal",
    "assert_equal",
    "assert_raises",
    "inner",
    "numpy.arange"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.tests.test_khatri_rao": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.tests.test_khatri_rao.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_khatri_rao.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_khatri_rao.test_khatri_rao": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "ValueError",
    "assert_array_equal",
    "assert_raises",
    "khatri_rao",
    "numpy.arange",
    "numpy.eye",
    "numpy.reshape"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.tests.test_kronecker": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.tests.test_kronecker.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_kronecker.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_kronecker.test_kronecker": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "assert_array_equal",
    "enumerate",
    "khatri_rao",
    "kronecker",
    "numpy.random.randn"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.tests.test_n_mode_product": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.tests.test_n_mode_product.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_n_mode_product.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_n_mode_product.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_n_mode_product.test_mode_dot": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ValueError",
    "assert_array_almost_equal",
    "assert_array_equal",
    "assert_raises",
    "fold",
    "mode_dot",
    "numpy.arange",
    "numpy.random.random",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.tests.test_n_mode_product.test_multi_mode_dot": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "assert_array_equal",
    "assert_equal",
    "enumerate",
    "kronecker",
    "len",
    "multi_mode_dot",
    "numpy.arange",
    "numpy.prod",
    "numpy.random.rand",
    "numpy.random.randn",
    "numpy.random.random",
    "range",
    "tensorly.tenalg.tests.test_n_mode_product.itertools",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.tests.test_outer_product": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.tests.test_outer_product.test_outer": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "kruskal_to_tensor",
    "outer",
    "random_kruskal",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.tests.test_proximal": {
  "data": {},
  "type": "module"
 },
 "tensorly.tenalg.tests.test_proximal.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_proximal.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tenalg.tests.test_proximal.test_procrustes": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "min",
    "numpy.random.rand",
    "procrustes"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.tests.test_proximal.test_soft_thresholding": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "assert_array_equal",
    "soft_thresholding"
   ]
  },
  "type": "function"
 },
 "tensorly.tenalg.tests.test_proximal.test_svd_thresholding": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "svd_thresholding"
   ]
  },
  "type": "function"
 },
 "tensorly.testing": {
  "data": {
   "symbols_in_volume": [
    "numpy.testing.assert_",
    "numpy.testing.assert_raises"
   ]
  },
  "type": "module"
 },
 "tensorly.testing.T": {
  "data": {
   "shadows": "tensorly.backend"
  },
  "type": "import"
 },
 "tensorly.testing.assert_": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorly.testing.assert_array_almost_equal": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "numpy.testing.assert_array_almost_equal",
    "tensorly.backend.to_numpy"
   ]
  },
  "type": "function"
 },
 "tensorly.testing.assert_array_equal": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "numpy.testing.assert_array_equal",
    "tensorly.backend.to_numpy"
   ]
  },
  "type": "function"
 },
 "tensorly.testing.assert_equal": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "_tensor_to_numpy",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "tensorly.testing.assert_equal._tensor_to_numpy": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "tensorly.backend.is_tensor",
    "tensorly.backend.to_numpy"
   ]
  },
  "type": "function"
 },
 "tensorly.testing.assert_raises": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorly.testing.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tests": {
  "data": {},
  "type": "module"
 },
 "tensorly.tests.test_backend": {
  "data": {},
  "type": "module"
 },
 "tensorly.tests.test_backend.T": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tests.test_backend.ThreadPoolExecutor": {
  "data": {
   "shadows": "concurrent.futures.ThreadPoolExecutor"
  },
  "type": "import"
 },
 "tensorly.tests.test_backend.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tests.test_backend.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tensorly.tests.test_backend.svd": {
  "data": {
   "shadows": "scipy.linalg.svd"
  },
  "type": "import"
 },
 "tensorly.tests.test_backend.test_backend_and_tensorly_module_attributes": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "AttributeError",
    "assert_raises",
    "dir",
    "getattr",
    "tensorly",
    "tensorly.not_a_real_attribute"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_fold": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "assert_array_equal",
    "fold",
    "numpy.random.random",
    "range",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_ndim": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_norm": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "assert_array_equal",
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_partial_fold": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "assert_array_equal",
    "len",
    "numpy.random.random",
    "partial_fold",
    "partial_unfold",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_partial_tensor_to_vec": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "assert_array_equal",
    "numpy.arange",
    "numpy.concatenate",
    "partial_tensor_to_vec",
    "range",
    "tensor_to_vec"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_partial_unfold": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "assert_array_equal",
    "numpy.arange",
    "numpy.concatenate",
    "partial_unfold",
    "range",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_partial_vec_to_tensor": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "assert_array_equal",
    "numpy.arange",
    "numpy.random.random",
    "partial_tensor_to_vec",
    "partial_vec_to_tensor",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_prod": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_qr": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": [
    "abs",
    "assert_array_almost_equal",
    "numpy.random.random",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_set_backend": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "ValueError",
    "assert_raises",
    "isinstance",
    "numpy.float32",
    "numpy.ndarray",
    "tensorly.backend_context",
    "tensorly.float32",
    "tensorly.get_backend",
    "tensorly.set_backend",
    "tensorly.tensor",
    "tensorly.tests.test_backend.pytest"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_set_backend_local_threadsafe": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "concurrent.futures.ThreadPoolExecutor",
    "tensorly.backend_context",
    "tensorly.get_backend",
    "tensorly.set_backend",
    "tensorly.tests.test_backend.pytest"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_set_backend_local_threadsafe.check": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorly.backend_context",
    "tensorly.get_backend"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_shape": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_svd": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "ValueError",
    "assert_",
    "assert_array_almost_equal",
    "assert_raises",
    "numpy.abs",
    "numpy.dot",
    "numpy.random.random",
    "numpy.sum",
    "scipy.linalg.svd",
    "svd_fun",
    "tensorly.get_backend",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_tensor_creation": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "numpy.arange",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_tensor_to_vec": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "assert_array_equal",
    "tensor_to_vec"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_unfold": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "assert_array_equal",
    "range",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_vec_to_tensor": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "assert_array_equal",
    "numpy.random.random",
    "tensor_to_vec",
    "vec_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.test_where": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": [
    "assert_array_equal",
    "assert_equal",
    "map",
    "numpy.prod",
    "numpy.random.randn",
    "numpy.where",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_backend.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.tests.test_kruskal_tensor": {
  "data": {},
  "type": "module"
 },
 "tensorly.tests.test_kruskal_tensor.assert_": {
  "data": {
   "shadows": "tensorly.testing.assert_"
  },
  "type": "import"
 },
 "tensorly.tests.test_kruskal_tensor.assert_array_almost_equal": {
  "data": {
   "shadows": "tensorly.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "tensorly.tests.test_kruskal_tensor.assert_array_equal": {
  "data": {
   "shadows": "tensorly.testing.assert_array_equal"
  },
  "type": "import"
 },
 "tensorly.tests.test_kruskal_tensor.assert_equal": {
  "data": {
   "shadows": "tensorly.testing.assert_equal"
  },
  "type": "import"
 },
 "tensorly.tests.test_kruskal_tensor.assert_raises": {
  "data": {
   "shadows": "tensorly.testing.assert_raises"
  },
  "type": "import"
 },
 "tensorly.tests.test_kruskal_tensor.check_random_state": {
  "data": {
   "shadows": "tensorly.random.check_random_state"
  },
  "type": "import"
 },
 "tensorly.tests.test_kruskal_tensor.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tests.test_kruskal_tensor.random_kruskal": {
  "data": {
   "shadows": "tensorly.random.random_kruskal"
  },
  "type": "import"
 },
 "tensorly.tests.test_kruskal_tensor.test_kruskal_mode_dot": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "kruskal_mode_dot",
    "mode_dot",
    "tensorly.kruskal_to_tensor",
    "tensorly.random.check_random_state",
    "tensorly.random.random_kruskal",
    "tensorly.tensor",
    "tensorly.testing.assert_array_almost_equal",
    "tensorly.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_kruskal_tensor.test_kruskal_norm": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "kruskal_norm",
    "tensorly.abs",
    "tensorly.kruskal_to_tensor",
    "tensorly.norm",
    "tensorly.random.random_kruskal",
    "tensorly.testing.assert_"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_kruskal_tensor.test_kruskal_to_tensor": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "khatri_rao",
    "kruskal_to_tensor",
    "len",
    "numpy.arange",
    "numpy.reshape",
    "range",
    "tensorly.dot",
    "tensorly.ones",
    "tensorly.tensor",
    "tensorly.testing.assert_array_almost_equal",
    "tensorly.testing.assert_array_equal",
    "tensorly.transpose",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_kruskal_tensor.test_kruskal_to_tensor_with_weights": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "kruskal_to_tensor",
    "tensorly.arange",
    "tensorly.diag",
    "tensorly.dot",
    "tensorly.fold",
    "tensorly.random.random_kruskal",
    "tensorly.reshape",
    "tensorly.tenalg.khatri_rao",
    "tensorly.tensor",
    "tensorly.testing.assert_array_almost_equal",
    "tensorly.testing.assert_array_equal",
    "tensorly.transpose"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_kruskal_tensor.test_kruskal_to_unfolded": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "KruskalTensor",
    "kruskal_to_tensor",
    "kruskal_to_unfolded",
    "numpy.arange",
    "numpy.reshape",
    "range",
    "tensorly.ones",
    "tensorly.tensor",
    "tensorly.testing.assert_array_equal",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_kruskal_tensor.test_kruskal_to_vec": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "KruskalTensor",
    "kruskal_to_tensor",
    "kruskal_to_vec",
    "numpy.arange",
    "numpy.reshape",
    "tensor_to_vec",
    "tensorly.ones",
    "tensorly.tensor",
    "tensorly.testing.assert_array_equal"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_kruskal_tensor.test_unfolding_dot_khatri_rao": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "khatri_rao",
    "numpy.random.random",
    "range",
    "tensorly.dot",
    "tensorly.ndim",
    "tensorly.random.random_kruskal",
    "tensorly.tensor",
    "tensorly.testing.assert_array_almost_equal",
    "unfold",
    "unfolding_dot_khatri_rao"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_kruskal_tensor.test_validate_kruskal_tensor": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ValueError",
    "_validate_kruskal_tensor",
    "kruskal_normalise",
    "tensorly.random.check_random_state",
    "tensorly.random.random_kruskal",
    "tensorly.tensor",
    "tensorly.testing.assert_equal",
    "tensorly.testing.assert_raises"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_kruskal_tensor.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.tests.test_mps_tensor": {
  "data": {},
  "type": "module"
 },
 "tensorly.tests.test_mps_tensor.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tests.test_mps_tensor.test_mps_to_tensor": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "numpy.zeros",
    "range",
    "tensorly.mps_to_tensor",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_mps_tensor.test_mps_to_tensor_random": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "len",
    "matrix_product_state",
    "numpy.random.rand",
    "range",
    "str",
    "tensorly.mps_to_tensor",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_mps_tensor.test_validate_mps_tensor": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "ValueError",
    "_validate_mps_tensor",
    "assert_equal",
    "assert_raises",
    "check_random_state",
    "random_mps",
    "tensorly.tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_mps_tensor.tl": {
  "data": {
   "shadows": "tensorly"
  },
  "type": "import"
 },
 "tensorly.tests.test_tucker_tensor": {
  "data": {},
  "type": "module"
 },
 "tensorly.tests.test_tucker_tensor.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorly.tests.test_tucker_tensor.test_tucker_mode_dot": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "assert_equal",
    "check_random_state",
    "mode_dot",
    "random_tucker",
    "tucker_mode_dot",
    "tucker_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_tucker_tensor.test_tucker_to_tensor": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "assert_array_equal",
    "numpy.arange",
    "numpy.array",
    "tucker_to_tensor",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_tucker_tensor.test_tucker_to_unfolded": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "kronecker",
    "numpy.random.random",
    "range",
    "tucker_to_tensor",
    "tucker_to_unfolded",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_tucker_tensor.test_tucker_to_vec": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "assert_array_almost_equal",
    "kronecker",
    "numpy.random.random",
    "range",
    "tensor_to_vec",
    "tucker_to_tensor",
    "tucker_to_vec"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_tucker_tensor.test_validate_tucker_tensor": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "ValueError",
    "_validate_tucker_tensor",
    "assert_equal",
    "assert_raises",
    "check_random_state",
    "random_tucker"
   ]
  },
  "type": "function"
 },
 "tensorly.tests.test_tucker_tensor.tl": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tucker_tensor": {
  "data": {},
  "type": "module"
 },
 "tensorly.tucker_tensor._validate_tucker_tensor": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "len",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorly.tucker_tensor.tl": {
  "data": {
   "shadows": "backend"
  },
  "type": "import"
 },
 "tensorly.tucker_tensor.tucker_mode_dot": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "ValueError",
    "mode_dot",
    "print",
    "tensorly.tucker_tensor._validate_tucker_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.tucker_tensor.tucker_to_tensor": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "multi_mode_dot"
   ]
  },
  "type": "function"
 },
 "tensorly.tucker_tensor.tucker_to_unfolded": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "tensorly.tucker_tensor.tucker_to_tensor",
    "unfold"
   ]
  },
  "type": "function"
 },
 "tensorly.tucker_tensor.tucker_to_vec": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "tensor_to_vec",
    "tensorly.tucker_tensor.tucker_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorly.tucker_tensor.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 }
}