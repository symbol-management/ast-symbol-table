{
 "evalml": {
  "data": {
   "symbols_in_volume": [
    "DeprecationWarning",
    "FutureWarning",
    "evalml.warnings"
   ]
  },
  "type": "module"
 },
 "evalml.AutoMLSearch": {
  "data": {
   "shadows": "evalml.automl.AutoMLSearch"
  },
  "type": "import"
 },
 "evalml.__main__": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "evalml.__main__.cli",
    "evalml.__main__.info"
   ]
  },
  "type": "module"
 },
 "evalml.__main__.cli": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "evalml.__main__.click"
   ]
  },
  "type": "function"
 },
 "evalml.__main__.click": {
  "data": {
   "shadows": "click"
  },
  "type": "import"
 },
 "evalml.__main__.info": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.__main__.click",
    "evalml.utils.cli_utils.print_info"
   ]
  },
  "type": "function"
 },
 "evalml.__main__.print_info": {
  "data": {
   "shadows": "evalml.utils.cli_utils.print_info"
  },
  "type": "import"
 },
 "evalml.__version__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "evalml.automl": {
  "data": {},
  "type": "module"
 },
 "evalml.automl.automl_algorithm": {
  "data": {},
  "type": "module"
 },
 "evalml.automl.automl_algorithm.automl_algorithm": {
  "data": {},
  "type": "module"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "abc.ABC"
   ]
  },
  "type": "class"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm.__init__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "evalml.tuners.SKOptTuner",
    "evalml.utils.get_random_state"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm.add_result": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm.batch_number": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm.next_batch": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "abc.abstractmethod"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm.pipeline_number": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithmException": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.SKOptTuner": {
  "data": {
   "shadows": "evalml.tuners.SKOptTuner"
  },
  "type": "import"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.get_random_state": {
  "data": {
   "shadows": "evalml.utils.get_random_state"
  },
  "type": "import"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm": {
  "data": {},
  "type": "module"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.IterativeAlgorithm": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.IterativeAlgorithm.__init__": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.IterativeAlgorithm._transform_parameters": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "evalml.automl.automl_algorithm.iterative_algorithm.inspect",
    "evalml.pipelines.components.utils.handle_component_class",
    "pipeline_class.component_graph"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.IterativeAlgorithm.add_result": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.IterativeAlgorithm.next_batch": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "AutoMLAlgorithmException",
    "len",
    "operator.itemgetter",
    "pipeline_class",
    "pipeline_class.name.propose",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.handle_component_class": {
  "data": {
   "shadows": "evalml.pipelines.components.utils.handle_component_class"
  },
  "type": "import"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "evalml.automl.automl_search": {
  "data": {
   "symbols_in_volume": [
    "evalml.utils.logger.get_logger"
   ]
  },
  "type": "module"
 },
 "evalml.automl.automl_search.AutoMLSearch": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "class"
 },
 "evalml.automl.automl_search.AutoMLSearch.__init__": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "ImportError",
    "PipelineSearchPlots",
    "TypeError",
    "ValueError",
    "evalml.automl.automl_search.logger",
    "evalml.objectives.get_objective",
    "evalml.objectives.get_objectives",
    "evalml.problem_types.handle_problem_types",
    "evalml.tuners.SKOptTuner",
    "evalml.utils.convert_to_seconds",
    "evalml.utils.get_random_state",
    "float",
    "int",
    "isinstance",
    "issubclass",
    "next",
    "sklearn.model_selection.BaseCrossValidator",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.__str__": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "_get_funct_name",
    "_print_list",
    "evalml.objectives.get_objective",
    "evalml.problem_types.handle_problem_types"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.__str__._get_funct_name": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "callable"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.__str__._print_list": {
  "data": {
   "lineno": 208
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._add_baseline_pipelines": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": [
    "KeyboardInterrupt",
    "evalml.automl.automl_search.logger",
    "evalml.pipelines.MeanBaselineRegressionPipeline",
    "evalml.pipelines.ModeBaselineBinaryPipeline",
    "evalml.pipelines.ModeBaselineMulticlassPipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "evalml.utils.logger.update_pipeline",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._add_result": {
  "data": {
   "lineno": 615,
   "symbols_in_volume": [
    "evalml.automl.automl_search.warnings",
    "len",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._check_stopping_condition": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": [
    "abs",
    "evalml.automl.automl_search.logger",
    "evalml.automl.automl_search.time",
    "id",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._compute_cv_scores": {
  "data": {
   "lineno": 543,
   "symbols_in_volume": [
    "Exception",
    "collections.OrderedDict",
    "enumerate",
    "evalml.automl.automl_search.logger",
    "evalml.automl.automl_search.time",
    "evalml.exceptions.PipelineScoreError",
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "isinstance",
    "len",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "sklearn.model_selection.train_test_split",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._evaluate": {
  "data": {
   "lineno": 643,
   "symbols_in_volume": [
    "evalml.automl.automl_search.logger"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._handle_keyboard_interrupt": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "evalml.automl.automl_search.logger",
    "evalml.automl.automl_search.time",
    "input"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._validate_data_checks": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "ValueError",
    "evalml.data_checks.DataChecks",
    "evalml.data_checks.DefaultDataChecks",
    "evalml.data_checks.EmptyDataChecks",
    "isinstance",
    "list",
    "staticmethod",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._validate_problem_type": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.add_to_rankings": {
  "data": {
   "lineno": 731,
   "symbols_in_volume": [
    "RuntimeError",
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.best_pipeline": {
  "data": {
   "lineno": 793,
   "symbols_in_volume": [
    "evalml.exceptions.PipelineNotFoundError",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.data_check_results": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.describe_pipeline": {
  "data": {
   "lineno": 677,
   "symbols_in_volume": [
    "abs",
    "evalml.automl.automl_search.logger",
    "evalml.exceptions.PipelineNotFoundError",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.utils.logger.log_subtitle",
    "numpy.inf",
    "pandas.DataFrame",
    "pandas.option_context"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.full_rankings": {
  "data": {
   "lineno": 776,
   "symbols_in_volume": [
    "pandas.DataFrame",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.get_pipeline": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": [
    "evalml.exceptions.PipelineNotFoundError",
    "pipeline_class"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.has_searched": {
  "data": {
   "lineno": 765,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.load": {
  "data": {
   "lineno": 819,
   "symbols_in_volume": [
    "evalml.automl.automl_search.cloudpickle",
    "open",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.rankings": {
  "data": {
   "lineno": 771,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.results": {
  "data": {
   "lineno": 756,
   "symbols_in_volume": [
    "evalml.automl.automl_search.copy",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.save": {
  "data": {
   "lineno": 806,
   "symbols_in_volume": [
    "evalml.automl.automl_search.cloudpickle",
    "open"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.search": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "KeyboardInterrupt",
    "NameError",
    "StopIteration",
    "ValueError",
    "any",
    "evalml.automl.automl_algorithm.IterativeAlgorithm",
    "evalml.automl.automl_search.logger",
    "evalml.automl.automl_search.time",
    "evalml.automl.data_splitters.TrainingValidationSplit",
    "evalml.data_checks.data_check_message_type.DataCheckMessageType.ERROR",
    "evalml.data_checks.data_check_message_type.DataCheckMessageType.WARNING",
    "evalml.exceptions.AutoMLSearchException",
    "evalml.pipelines.components.utils.get_estimators",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "evalml.utils.logger.log_title",
    "evalml.utils.logger.time_elapsed",
    "evalml.utils.logger.update_pipeline",
    "float",
    "isinstance",
    "len",
    "list",
    "numpy.array",
    "numpy.isnan",
    "pandas.DataFrame",
    "pandas.Series",
    "set",
    "sklearn.model_selection.KFold",
    "sklearn.model_selection.StratifiedKFold"
   ]
  },
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearchException": {
  "data": {
   "shadows": "evalml.exceptions.AutoMLSearchException"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.BaseCrossValidator": {
  "data": {
   "shadows": "sklearn.model_selection.BaseCrossValidator"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.BinaryClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.BinaryClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.DataCheckMessageType": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message_type.DataCheckMessageType"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.DataChecks": {
  "data": {
   "shadows": "evalml.data_checks.DataChecks"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.DefaultDataChecks": {
  "data": {
   "shadows": "evalml.data_checks.DefaultDataChecks"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.EmptyDataChecks": {
  "data": {
   "shadows": "evalml.data_checks.EmptyDataChecks"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.IterativeAlgorithm": {
  "data": {
   "shadows": "evalml.automl.automl_algorithm.IterativeAlgorithm"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.KFold": {
  "data": {
   "shadows": "sklearn.model_selection.KFold"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.MeanBaselineRegressionPipeline": {
  "data": {
   "shadows": "evalml.pipelines.MeanBaselineRegressionPipeline"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.ModeBaselineBinaryPipeline": {
  "data": {
   "shadows": "evalml.pipelines.ModeBaselineBinaryPipeline"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.ModeBaselineMulticlassPipeline": {
  "data": {
   "shadows": "evalml.pipelines.ModeBaselineMulticlassPipeline"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.PipelineNotFoundError": {
  "data": {
   "shadows": "evalml.exceptions.PipelineNotFoundError"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.PipelineScoreError": {
  "data": {
   "shadows": "evalml.exceptions.PipelineScoreError"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.SKOptTuner": {
  "data": {
   "shadows": "evalml.tuners.SKOptTuner"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.StratifiedKFold": {
  "data": {
   "shadows": "sklearn.model_selection.StratifiedKFold"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.TrainingValidationSplit": {
  "data": {
   "shadows": "evalml.automl.data_splitters.TrainingValidationSplit"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.cloudpickle": {
  "data": {
   "shadows": "cloudpickle"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.convert_to_seconds": {
  "data": {
   "shadows": "evalml.utils.convert_to_seconds"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.get_estimators": {
  "data": {
   "shadows": "evalml.pipelines.components.utils.get_estimators"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.get_logger": {
  "data": {
   "shadows": "evalml.utils.logger.get_logger"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.get_objective": {
  "data": {
   "shadows": "evalml.objectives.get_objective"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.get_objectives": {
  "data": {
   "shadows": "evalml.objectives.get_objectives"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.get_random_state": {
  "data": {
   "shadows": "evalml.utils.get_random_state"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.handle_problem_types": {
  "data": {
   "shadows": "evalml.problem_types.handle_problem_types"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.log_subtitle": {
  "data": {
   "shadows": "evalml.utils.logger.log_subtitle"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.log_title": {
  "data": {
   "shadows": "evalml.utils.logger.log_title"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.logger": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "evalml.automl.automl_search.make_pipeline": {
  "data": {
   "shadows": "evalml.pipelines.utils.make_pipeline"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.time_elapsed": {
  "data": {
   "shadows": "evalml.utils.logger.time_elapsed"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.train_test_split": {
  "data": {
   "shadows": "sklearn.model_selection.train_test_split"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.update_pipeline": {
  "data": {
   "shadows": "evalml.utils.logger.update_pipeline"
  },
  "type": "import"
 },
 "evalml.automl.automl_search.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "evalml.automl.data_splitters": {
  "data": {},
  "type": "module"
 },
 "evalml.automl.data_splitters.training_validation_split": {
  "data": {},
  "type": "module"
 },
 "evalml.automl.data_splitters.training_validation_split.BaseCrossValidator": {
  "data": {
   "shadows": "sklearn.model_selection._split.BaseCrossValidator"
  },
  "type": "import"
 },
 "evalml.automl.data_splitters.training_validation_split.TrainingValidationSplit": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "sklearn.model_selection._split.BaseCrossValidator"
   ]
  },
  "type": "class"
 },
 "evalml.automl.data_splitters.training_validation_split.TrainingValidationSplit.__init__": {
  "data": {
   "lineno": 8
  },
  "type": "function"
 },
 "evalml.automl.data_splitters.training_validation_split.TrainingValidationSplit.get_n_splits": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "evalml.automl.data_splitters.training_validation_split.TrainingValidationSplit.split": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "sklearn.model_selection.train_test_split"
   ]
  },
  "type": "function"
 },
 "evalml.automl.data_splitters.training_validation_split.train_test_split": {
  "data": {
   "shadows": "sklearn.model_selection.train_test_split"
  },
  "type": "import"
 },
 "evalml.automl.pipeline_search_plots": {
  "data": {},
  "type": "module"
 },
 "evalml.automl.pipeline_search_plots.PipelineSearchPlots": {
  "data": {
   "lineno": 66
  },
  "type": "class"
 },
 "evalml.automl.pipeline_search_plots.PipelineSearchPlots.__init__": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "evalml.utils.import_or_raise"
   ]
  },
  "type": "function"
 },
 "evalml.automl.pipeline_search_plots.PipelineSearchPlots.search_iteration_plot": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "ImportError",
    "evalml.automl.pipeline_search_plots.SearchIterationPlot",
    "evalml.utils.import_or_raise"
   ]
  },
  "type": "function"
 },
 "evalml.automl.pipeline_search_plots.SearchIterationPlot": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "evalml.automl.pipeline_search_plots.SearchIterationPlot.__init__": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "evalml.utils.import_or_raise",
    "list"
   ]
  },
  "type": "function"
 },
 "evalml.automl.pipeline_search_plots.SearchIterationPlot.update": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "len",
    "list",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.automl.pipeline_search_plots.import_or_raise": {
  "data": {
   "shadows": "evalml.utils.import_or_raise"
  },
  "type": "import"
 },
 "evalml.data_checks": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.data_check.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "evalml.data_checks.data_check.DataCheck": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "abc.ABC"
   ]
  },
  "type": "class"
 },
 "evalml.data_checks.data_check.DataCheck.name": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.utils.classproperty",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.data_check.DataCheck.validate": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "abc.abstractmethod"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.data_check.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "evalml.data_checks.data_check.classproperty": {
  "data": {
   "shadows": "evalml.utils.classproperty"
  },
  "type": "import"
 },
 "evalml.data_checks.data_check_message": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.data_check_message.DataCheckError": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckMessage"
   ]
  },
  "type": "class"
 },
 "evalml.data_checks.data_check_message.DataCheckMessage": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "evalml.data_checks.data_check_message.DataCheckMessage.__eq__": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "evalml.data_checks.data_check_message.DataCheckMessage.__init__": {
  "data": {
   "lineno": 9
  },
  "type": "function"
 },
 "evalml.data_checks.data_check_message.DataCheckMessage.__str__": {
  "data": {
   "lineno": 20
  },
  "type": "function"
 },
 "evalml.data_checks.data_check_message.DataCheckWarning": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckMessage"
   ]
  },
  "type": "class"
 },
 "evalml.data_checks.data_check_message_type": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.data_check_message_type.DataCheckMessageType": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "enum.Enum"
   ]
  },
  "type": "class"
 },
 "evalml.data_checks.data_check_message_type.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "evalml.data_checks.data_checks": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.data_checks.DataChecks": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "evalml.data_checks.data_checks.DataChecks.__init__": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "ValueError",
    "all",
    "isinstance",
    "list",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.data_checks.DataChecks.validate": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "evalml.data_checks.default_data_checks": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.default_data_checks.DefaultDataChecks": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "evalml.data_checks.default_data_checks.DefaultDataChecks.__init__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "HighlyNullDataCheck",
    "IDColumnsDataCheck",
    "InvalidTargetDataCheck",
    "LabelLeakageDataCheck",
    "NoVarianceDataCheck"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.highly_null_data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck.__init__": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck.validate": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "DataCheckWarning",
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.highly_null_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.data_checks.id_columns_data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck.__init__": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck.validate": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "DataCheckWarning",
    "isinstance",
    "len",
    "pandas.DataFrame",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.id_columns_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.data_checks.invalid_targets_data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck.validate": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "DataCheckError",
    "evalml.utils.gen_utils.numeric_and_boolean_dtypes",
    "isinstance",
    "len",
    "pandas.Series",
    "set",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.invalid_targets_data_check.numeric_and_boolean_dtypes": {
  "data": {
   "shadows": "evalml.utils.gen_utils.numeric_and_boolean_dtypes"
  },
  "type": "import"
 },
 "evalml.data_checks.invalid_targets_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.data_checks.label_leakage_data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck.__init__": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck.validate": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "DataCheckWarning",
    "abs",
    "evalml.utils.gen_utils.numeric_and_boolean_dtypes",
    "isinstance",
    "len",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.label_leakage_data_check.numeric_and_boolean_dtypes": {
  "data": {
   "shadows": "evalml.utils.gen_utils.numeric_and_boolean_dtypes"
  },
  "type": "import"
 },
 "evalml.data_checks.label_leakage_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.data_checks.no_variance_data_check": {
  "data": {
   "symbols_in_volume": [
    "evalml.utils.logger.get_logger"
   ]
  },
  "type": "module"
 },
 "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck.__init__": {
  "data": {
   "lineno": 14
  },
  "type": "function"
 },
 "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck._check_for_errors": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "DataCheckError",
    "DataCheckWarning",
    "int"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck.validate": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "getattr",
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.no_variance_data_check.get_logger": {
  "data": {
   "shadows": "evalml.utils.logger.get_logger"
  },
  "type": "import"
 },
 "evalml.data_checks.no_variance_data_check.logger": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "evalml.data_checks.no_variance_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.data_checks.outliers_data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.outliers_data_check.IsolationForest": {
  "data": {
   "shadows": "sklearn.ensemble.IsolationForest"
  },
  "type": "import"
 },
 "evalml.data_checks.outliers_data_check.OutliersDataCheck": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "evalml.data_checks.outliers_data_check.OutliersDataCheck.__init__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "evalml.utils.get_random_state"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.outliers_data_check.OutliersDataCheck.validate": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "DataCheckWarning",
    "evalml.utils.gen_utils.numeric_dtypes",
    "get_IQR",
    "isinstance",
    "len",
    "pandas.DataFrame",
    "pandas.Series",
    "sklearn.ensemble.IsolationForest"
   ]
  },
  "type": "function"
 },
 "evalml.data_checks.outliers_data_check.OutliersDataCheck.validate.get_IQR": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "evalml.data_checks.outliers_data_check.get_random_state": {
  "data": {
   "shadows": "evalml.utils.get_random_state"
  },
  "type": "import"
 },
 "evalml.data_checks.outliers_data_check.numeric_dtypes": {
  "data": {
   "shadows": "evalml.utils.gen_utils.numeric_dtypes"
  },
  "type": "import"
 },
 "evalml.data_checks.outliers_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.data_checks.utils": {
  "data": {},
  "type": "module"
 },
 "evalml.data_checks.utils.EmptyDataChecks": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "evalml.data_checks.utils.EmptyDataChecks.__init__": {
  "data": {
   "lineno": 5
  },
  "type": "function"
 },
 "evalml.demos": {
  "data": {},
  "type": "module"
 },
 "evalml.demos.breast_cancer": {
  "data": {},
  "type": "module"
 },
 "evalml.demos.breast_cancer.load_breast_cancer": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "pandas.DataFrame",
    "pandas.Series",
    "sklearn.datasets.load_breast_cancer"
   ]
  },
  "type": "function"
 },
 "evalml.demos.breast_cancer.load_breast_cancer_sk": {
  "data": {
   "shadows": "sklearn.datasets.load_breast_cancer"
  },
  "type": "import"
 },
 "evalml.demos.breast_cancer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.demos.diabetes": {
  "data": {},
  "type": "module"
 },
 "evalml.demos.diabetes.load_diabetes": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "pandas.DataFrame",
    "pandas.Series",
    "sklearn.datasets.load_diabetes"
   ]
  },
  "type": "function"
 },
 "evalml.demos.diabetes.load_diabetes_sk": {
  "data": {
   "shadows": "sklearn.datasets.load_diabetes"
  },
  "type": "import"
 },
 "evalml.demos.diabetes.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.demos.fraud": {
  "data": {},
  "type": "module"
 },
 "evalml.demos.fraud.load_data": {
  "data": {
   "shadows": "evalml.preprocessing.load_data"
  },
  "type": "import"
 },
 "evalml.demos.fraud.load_fraud": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "evalml.demos.fraud.os",
    "evalml.preprocessing.load_data"
   ]
  },
  "type": "function"
 },
 "evalml.demos.fraud.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "evalml.demos.wine": {
  "data": {},
  "type": "module"
 },
 "evalml.demos.wine.load_wine": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "pandas.DataFrame",
    "pandas.Series",
    "sklearn.datasets.load_wine"
   ]
  },
  "type": "function"
 },
 "evalml.demos.wine.load_wine_sk": {
  "data": {
   "shadows": "sklearn.datasets.load_wine"
  },
  "type": "import"
 },
 "evalml.demos.wine.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.evalml.data_checks": {
  "data": {
   "shadows": "evalml.data_checks"
  },
  "type": "import"
 },
 "evalml.evalml.demos": {
  "data": {
   "shadows": "evalml.demos"
  },
  "type": "import"
 },
 "evalml.evalml.model_family": {
  "data": {
   "shadows": "evalml.model_family"
  },
  "type": "import"
 },
 "evalml.evalml.objectives": {
  "data": {
   "shadows": "evalml.objectives"
  },
  "type": "import"
 },
 "evalml.evalml.pipelines": {
  "data": {
   "shadows": "evalml.pipelines"
  },
  "type": "import"
 },
 "evalml.evalml.preprocessing": {
  "data": {
   "shadows": "evalml.preprocessing"
  },
  "type": "import"
 },
 "evalml.evalml.problem_types": {
  "data": {
   "shadows": "evalml.problem_types"
  },
  "type": "import"
 },
 "evalml.evalml.utils": {
  "data": {
   "shadows": "evalml.utils"
  },
  "type": "import"
 },
 "evalml.exceptions": {
  "data": {},
  "type": "module"
 },
 "evalml.exceptions.exceptions": {
  "data": {},
  "type": "module"
 },
 "evalml.exceptions.exceptions.AutoMLSearchException": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "evalml.exceptions.exceptions.ComponentNotYetFittedError": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "evalml.exceptions.exceptions.IllFormattedClassNameError": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "evalml.exceptions.exceptions.MethodPropertyNotFoundError": {
  "data": {
   "lineno": 1,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "evalml.exceptions.exceptions.MissingComponentError": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "evalml.exceptions.exceptions.ObjectiveNotFoundError": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "evalml.exceptions.exceptions.PipelineNotFoundError": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "evalml.exceptions.exceptions.PipelineScoreError": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "evalml.exceptions.exceptions.PipelineScoreError.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "str",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.model_family": {
  "data": {},
  "type": "module"
 },
 "evalml.model_family.model_family": {
  "data": {},
  "type": "module"
 },
 "evalml.model_family.model_family.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "evalml.model_family.model_family.ModelFamily": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "enum.Enum"
   ]
  },
  "type": "class"
 },
 "evalml.model_family.model_family.ModelFamily.__str__": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "evalml.model_family.model_family.ModelFamily"
   ]
  },
  "type": "function"
 },
 "evalml.model_family.model_family.ModelFamily.is_tree_estimator": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "evalml.model_family.utils": {
  "data": {},
  "type": "module"
 },
 "evalml.model_family.utils.handle_model_family": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "isinstance",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.objectives": {
  "data": {},
  "type": "module"
 },
 "evalml.objectives.binary_classification_objective": {
  "data": {},
  "type": "module"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.problem_types.ProblemTypes.BINARY"
   ]
  },
  "type": "class"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective.can_optimize_threshold": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective.decision_function": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "isinstance",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective.optimize_threshold": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "RuntimeError",
    "scipy.optimize.minimize_scalar"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective.optimize_threshold.cost": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective.validate_inputs": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "numpy.unique",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.binary_classification_objective.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.objectives.binary_classification_objective.minimize_scalar": {
  "data": {
   "shadows": "scipy.optimize.minimize_scalar"
  },
  "type": "import"
 },
 "evalml.objectives.binary_classification_objective.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.objectives.binary_classification_objective.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.objectives.fraud_cost": {
  "data": {},
  "type": "module"
 },
 "evalml.objectives.fraud_cost.FraudCost": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "evalml.objectives.fraud_cost.FraudCost.__init__": {
  "data": {
   "lineno": 12
  },
  "type": "function"
 },
 "evalml.objectives.fraud_cost.FraudCost.decision_function": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.fraud_cost.FraudCost.objective_function": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.fraud_cost.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.objectives.lead_scoring": {
  "data": {},
  "type": "module"
 },
 "evalml.objectives.lead_scoring.LeadScoring": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "evalml.objectives.lead_scoring.LeadScoring.__init__": {
  "data": {
   "lineno": 12
  },
  "type": "function"
 },
 "evalml.objectives.lead_scoring.LeadScoring.objective_function": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.lead_scoring.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.objectives.multiclass_classification_objective": {
  "data": {},
  "type": "module"
 },
 "evalml.objectives.multiclass_classification_objective.MulticlassClassificationObjective": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "evalml.problem_types.ProblemTypes.MULTICLASS"
   ]
  },
  "type": "class"
 },
 "evalml.objectives.multiclass_classification_objective.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.objectives.objective_base": {
  "data": {},
  "type": "module"
 },
 "evalml.objectives.objective_base.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "evalml.objectives.objective_base.ObjectiveBase": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "abc.ABC"
   ]
  },
  "type": "class"
 },
 "evalml.objectives.objective_base.ObjectiveBase._standardize_input_type": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.greater_is_better": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "abc.abstractmethod",
    "classmethod",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.name": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "abc.abstractmethod",
    "classmethod",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.objective_function": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "abc.abstractmethod",
    "classmethod"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.score": {
  "data": {
   "lineno": 42
  },
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.score_needs_proba": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "abc.abstractmethod",
    "classmethod",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.validate_inputs": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "numpy.any",
    "numpy.isinf",
    "numpy.isnan"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.objective_base.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "evalml.objectives.objective_base.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.objectives.objective_base.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.objectives.regression_objective": {
  "data": {},
  "type": "module"
 },
 "evalml.objectives.regression_objective.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.objectives.regression_objective.RegressionObjective": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "evalml.problem_types.ProblemTypes.REGRESSION"
   ]
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics": {
  "data": {},
  "type": "module"
 },
 "evalml.objectives.standard_metrics.AUC": {
  "data": {
   "lineno": 174
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AUC.objective_function": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "sklearn.metrics.roc_auc_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.AUCMacro": {
  "data": {
   "lineno": 195
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AUCMacro.objective_function": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "_handle_predictions",
    "sklearn.metrics.roc_auc_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.AUCMicro": {
  "data": {
   "lineno": 184
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AUCMicro.objective_function": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "_handle_predictions",
    "sklearn.metrics.roc_auc_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.AUCWeighted": {
  "data": {
   "lineno": 206
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AUCWeighted.objective_function": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "_handle_predictions",
    "sklearn.metrics.roc_auc_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.AccuracyBinary": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AccuracyBinary.objective_function": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "sklearn.metrics.accuracy_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.AccuracyMulticlass": {
  "data": {
   "lineno": 24
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AccuracyMulticlass.objective_function": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "sklearn.metrics.accuracy_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.BalancedAccuracyBinary": {
  "data": {
   "lineno": 34
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.BalancedAccuracyBinary.objective_function": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "sklearn.metrics.balanced_accuracy_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.BalancedAccuracyMulticlass": {
  "data": {
   "lineno": 44
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.BalancedAccuracyMulticlass.objective_function": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "sklearn.metrics.balanced_accuracy_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.ExpVariance": {
  "data": {
   "lineno": 349
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.ExpVariance.objective_function": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "sklearn.metrics.explained_variance_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.F1": {
  "data": {
   "lineno": 54
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.F1.objective_function": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "sklearn.metrics.f1_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.F1Macro": {
  "data": {
   "lineno": 74
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.F1Macro.objective_function": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "sklearn.metrics.f1_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.F1Micro": {
  "data": {
   "lineno": 64
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.F1Micro.objective_function": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "sklearn.metrics.f1_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.F1Weighted": {
  "data": {
   "lineno": 84
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.F1Weighted.objective_function": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "sklearn.metrics.f1_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.LogLossBinary": {
  "data": {
   "lineno": 217
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.LogLossBinary.objective_function": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "sklearn.metrics.log_loss"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.LogLossMulticlass": {
  "data": {
   "lineno": 227
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.LogLossMulticlass.objective_function": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "sklearn.metrics.log_loss"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MAE": {
  "data": {
   "lineno": 309
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MAE.objective_function": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "sklearn.metrics.mean_absolute_error"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MCCBinary": {
  "data": {
   "lineno": 237
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MCCBinary.objective_function": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "RuntimeWarning",
    "evalml.objectives.standard_metrics.warnings",
    "sklearn.metrics.matthews_corrcoef"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MCCMulticlass": {
  "data": {
   "lineno": 250
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MCCMulticlass.objective_function": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "RuntimeWarning",
    "evalml.objectives.standard_metrics.warnings",
    "sklearn.metrics.matthews_corrcoef"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MSE": {
  "data": {
   "lineno": 319
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MSE.objective_function": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "sklearn.metrics.mean_squared_error"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MaxError": {
  "data": {
   "lineno": 339
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MaxError.objective_function": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "sklearn.metrics.max_error"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MeanSquaredLogError": {
  "data": {
   "lineno": 286
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MeanSquaredLogError.objective_function": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "sklearn.metrics.mean_squared_log_error"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MedianAE": {
  "data": {
   "lineno": 329
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MedianAE.objective_function": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "sklearn.metrics.median_absolute_error"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.Precision": {
  "data": {
   "lineno": 94
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.Precision.objective_function": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "sklearn.metrics.precision_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.PrecisionMacro": {
  "data": {
   "lineno": 114
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.PrecisionMacro.objective_function": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "sklearn.metrics.precision_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.PrecisionMicro": {
  "data": {
   "lineno": 104
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.PrecisionMicro.objective_function": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "sklearn.metrics.precision_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.PrecisionWeighted": {
  "data": {
   "lineno": 124
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.PrecisionWeighted.objective_function": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "sklearn.metrics.precision_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.R2": {
  "data": {
   "lineno": 299
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.R2.objective_function": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "sklearn.metrics.r2_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.Recall": {
  "data": {
   "lineno": 134
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.Recall.objective_function": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "sklearn.metrics.recall_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.RecallMacro": {
  "data": {
   "lineno": 154
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.RecallMacro.objective_function": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "sklearn.metrics.recall_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.RecallMicro": {
  "data": {
   "lineno": 144
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.RecallMicro.objective_function": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "sklearn.metrics.recall_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.RecallWeighted": {
  "data": {
   "lineno": 164
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.RecallWeighted.objective_function": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "sklearn.metrics.recall_score"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.RootMeanSquaredError": {
  "data": {
   "lineno": 263
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.RootMeanSquaredError.objective_function": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "sklearn.metrics.mean_squared_error"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.RootMeanSquaredLogError": {
  "data": {
   "lineno": 273
  },
  "type": "class"
 },
 "evalml.objectives.standard_metrics.RootMeanSquaredLogError.objective_function": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "numpy.sqrt",
    "sklearn.metrics.mean_squared_log_error"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics._handle_predictions": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "len",
    "numpy.unique",
    "sklearn.preprocessing.label_binarize"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.standard_metrics.label_binarize": {
  "data": {
   "shadows": "sklearn.preprocessing.label_binarize"
  },
  "type": "import"
 },
 "evalml.objectives.standard_metrics.metrics": {
  "data": {
   "shadows": "sklearn.metrics"
  },
  "type": "import"
 },
 "evalml.objectives.standard_metrics.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.objectives.standard_metrics.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "evalml.objectives.utils": {
  "data": {},
  "type": "module"
 },
 "evalml.objectives.utils.OPTIONS": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "evalml.objectives.utils.ObjectiveNotFoundError": {
  "data": {
   "shadows": "evalml.exceptions.ObjectiveNotFoundError"
  },
  "type": "import"
 },
 "evalml.objectives.utils.get_objective": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "AttributeError",
    "KeyError",
    "TypeError",
    "evalml.exceptions.ObjectiveNotFoundError",
    "evalml.objectives.utils.OPTIONS",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.utils.get_objectives": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "evalml.objectives.utils.OPTIONS",
    "evalml.problem_types.handle_problem_types"
   ]
  },
  "type": "function"
 },
 "evalml.objectives.utils.handle_problem_types": {
  "data": {
   "shadows": "evalml.problem_types.handle_problem_types"
  },
  "type": "import"
 },
 "evalml.pipelines": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.binary_classification_pipeline": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.binary_classification_pipeline.BinaryClassificationPipeline": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "evalml.pipelines.classification_pipeline.ClassificationPipeline",
    "evalml.problem_types.ProblemTypes.BINARY"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.binary_classification_pipeline.BinaryClassificationPipeline._predict": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.get_objective",
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.binary_classification_pipeline.BinaryClassificationPipeline._score": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "evalml.pipelines.classification_pipeline.ClassificationPipeline._score",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.binary_classification_pipeline.BinaryClassificationPipeline.predict_proba": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.binary_classification_pipeline.ClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.classification_pipeline.ClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.pipelines.binary_classification_pipeline.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.binary_classification_pipeline.get_objective": {
  "data": {
   "shadows": "evalml.objectives.get_objective"
  },
  "type": "import"
 },
 "evalml.pipelines.binary_classification_pipeline.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.classification": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.classification.baseline_binary": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.classification.baseline_binary.BaselineBinaryPipeline": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.classification.baseline_binary.BinaryClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.BinaryClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.pipelines.classification.baseline_binary.ModeBaselineBinaryPipeline": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.classification.baseline_multiclass": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.classification.baseline_multiclass.BaselineMulticlassPipeline": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "evalml.pipelines.MulticlassClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.classification.baseline_multiclass.ModeBaselineMulticlassPipeline": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.pipelines.MulticlassClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.classification.baseline_multiclass.MulticlassClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.MulticlassClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.pipelines.classification_pipeline": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.pipelines.PipelineBase"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline.__init__": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "sklearn.preprocessing.LabelEncoder",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline._compute_predictions": {
  "data": {
   "lineno": 129
  },
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline._decode_targets": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline._encode_targets": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "ValueError",
    "pandas.Series",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline._predict": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline.fit": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline.predict": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline.predict_proba": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline.score": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "evalml.objectives.get_objective",
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.LabelEncoder": {
  "data": {
   "shadows": "sklearn.preprocessing.LabelEncoder"
  },
  "type": "import"
 },
 "evalml.pipelines.classification_pipeline.PipelineBase": {
  "data": {
   "shadows": "evalml.pipelines.PipelineBase"
  },
  "type": "import"
 },
 "evalml.pipelines.classification_pipeline.get_objective": {
  "data": {
   "shadows": "evalml.objectives.get_objective"
  },
  "type": "import"
 },
 "evalml.pipelines.classification_pipeline.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.component_base": {
  "data": {
   "symbols_in_volume": [
    "evalml.utils.get_logger"
   ]
  },
  "type": "module"
 },
 "evalml.pipelines.components.component_base.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "evalml.pipelines.components.component_base.ABCMeta": {
  "data": {
   "shadows": "abc.ABCMeta"
  },
  "type": "import"
 },
 "evalml.pipelines.components.component_base.ComponentBase": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "abc.ABC",
    "evalml.pipelines.components.component_base.ComponentBaseMeta"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.component_base.ComponentBase.__init__": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "evalml.utils.get_random_state"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.clone": {
  "data": {
   "lineno": 114
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.default_parameters": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "cls",
    "cls._default_parameters",
    "evalml.utils.classproperty"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.describe": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "evalml.pipelines.components.component_base.logger",
    "evalml.utils.log_subtitle"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.fit": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "AttributeError",
    "evalml.exceptions.MethodPropertyNotFoundError"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.load": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "evalml.pipelines.components.component_base.cloudpickle",
    "open",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.model_family": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "abc.abstractmethod",
    "classmethod",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.name": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "abc.abstractmethod",
    "classmethod",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.parameters": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "evalml.pipelines.components.component_base.copy",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.save": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "evalml.pipelines.components.component_base.cloudpickle",
    "open"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBaseMeta": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "abc.ABCMeta"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.component_base.ComponentBaseMeta.__new__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "property",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBaseMeta.check_for_fit": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBaseMeta.check_for_fit._check_for_fit": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "evalml.exceptions.ComponentNotYetFittedError",
    "functools.wraps",
    "method",
    "method.__name__",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBaseMeta.set_fit": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBaseMeta.set_fit._set_fit": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "functools.wraps",
    "method"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentNotYetFittedError": {
  "data": {
   "shadows": "evalml.exceptions.ComponentNotYetFittedError"
  },
  "type": "import"
 },
 "evalml.pipelines.components.component_base.MethodPropertyNotFoundError": {
  "data": {
   "shadows": "evalml.exceptions.MethodPropertyNotFoundError"
  },
  "type": "import"
 },
 "evalml.pipelines.components.component_base.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "evalml.pipelines.components.component_base.classproperty": {
  "data": {
   "shadows": "evalml.utils.classproperty"
  },
  "type": "import"
 },
 "evalml.pipelines.components.component_base.cloudpickle": {
  "data": {
   "shadows": "cloudpickle"
  },
  "type": "import"
 },
 "evalml.pipelines.components.component_base.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.component_base.get_logger": {
  "data": {
   "shadows": "evalml.utils.get_logger"
  },
  "type": "import"
 },
 "evalml.pipelines.components.component_base.get_random_state": {
  "data": {
   "shadows": "evalml.utils.get_random_state"
  },
  "type": "import"
 },
 "evalml.pipelines.components.component_base.log_subtitle": {
  "data": {
   "shadows": "evalml.utils.log_subtitle"
  },
  "type": "import"
 },
 "evalml.pipelines.components.component_base.logger": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "evalml.pipelines.components.component_base.wraps": {
  "data": {
   "shadows": "functools.wraps"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.BASELINE",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.__init__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "ValueError",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.classes_": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.feature_importance": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "numpy.zeros",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.fit": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "isinstance",
    "len",
    "list",
    "numpy.unique",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.predict": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "len",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.predict_proba": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "len",
    "numpy.array",
    "pandas.DataFrame",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.CatBoostClassifier": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.CATBOOST",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.utils.SEED_BOUNDS.max_bound",
    "skopt.space.Integer",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.CatBoostClassifier.__init__": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.classifiers.catboost_classifier.copy",
    "evalml.utils.get_random_seed",
    "evalml.utils.import_or_raise",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.CatBoostClassifier.feature_importance": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.CatBoostClassifier.fit": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series",
    "sklearn.preprocessing.LabelEncoder"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.CatBoostClassifier.predict": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "isinstance",
    "numpy.int64",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.LabelEncoder": {
  "data": {
   "shadows": "sklearn.preprocessing.LabelEncoder"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.SEED_BOUNDS": {
  "data": {
   "shadows": "evalml.utils.SEED_BOUNDS"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.get_random_seed": {
  "data": {
   "shadows": "evalml.utils.get_random_seed"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.import_or_raise": {
  "data": {
   "shadows": "evalml.utils.import_or_raise"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.ElasticNetClassifier": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.ElasticNetClassifier.__init__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "sklearn.linear_model.SGDClassifier",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.ElasticNetClassifier.feature_importance": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "len",
    "numpy.linalg.norm",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.SKElasticNetClassifier": {
  "data": {
   "shadows": "sklearn.linear_model.SGDClassifier"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.et_classifier": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.et_classifier.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.et_classifier.ExtraTreesClassifier": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.EXTRA_TREES",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "skopt.space.Integer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.et_classifier.ExtraTreesClassifier.__init__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "sklearn.ensemble.ExtraTreesClassifier",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.et_classifier.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.et_classifier.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.et_classifier.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.et_classifier.SKExtraTreesClassifier": {
  "data": {
   "shadows": "sklearn.ensemble.ExtraTreesClassifier"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.LogisticRegression": {
  "data": {
   "shadows": "sklearn.linear_model.LogisticRegression"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.LogisticRegressionClassifier": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.LogisticRegressionClassifier.__init__": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "sklearn.linear_model.LogisticRegression",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.LogisticRegressionClassifier.feature_importance": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "len",
    "numpy.linalg.norm",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier.RandomForestClassifier": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.RANDOM_FOREST",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "skopt.space.Integer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier.RandomForestClassifier.__init__": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "sklearn.ensemble.RandomForestClassifier",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier.RandomForestClassifier.feature_importance": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier.SKRandomForestClassifier": {
  "data": {
   "shadows": "sklearn.ensemble.RandomForestClassifier"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.XGBOOST",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "skopt.space.Integer",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier.__init__": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "evalml.utils.get_random_seed",
    "evalml.utils.import_or_raise",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier.feature_importance": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier.fit": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier.predict": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier.predict_proba": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.get_random_seed": {
  "data": {
   "shadows": "evalml.utils.get_random_seed"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.import_or_raise": {
  "data": {
   "shadows": "evalml.utils.import_or_raise"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.estimator": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.estimator.ComponentBase": {
  "data": {
   "shadows": "evalml.pipelines.components.ComponentBase"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.estimator.Estimator": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.pipelines.components.ComponentBase"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.estimator.Estimator.feature_importance": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "AttributeError",
    "evalml.exceptions.MethodPropertyNotFoundError",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.estimator.Estimator.predict": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "AttributeError",
    "evalml.exceptions.MethodPropertyNotFoundError",
    "isinstance",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.estimator.Estimator.predict_proba": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "AttributeError",
    "evalml.exceptions.MethodPropertyNotFoundError",
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.estimator.Estimator.supported_problem_types": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "abc.abstractmethod",
    "classmethod",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.estimator.MethodPropertyNotFoundError": {
  "data": {
   "shadows": "evalml.exceptions.MethodPropertyNotFoundError"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.estimator.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.estimator.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.BaselineRegressor": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.BASELINE",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.REGRESSION"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.BaselineRegressor.__init__": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "ValueError",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.BaselineRegressor.feature_importance": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "numpy.zeros",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.BaselineRegressor.fit": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.BaselineRegressor.predict": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "len",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.CatBoostRegressor": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.CATBOOST",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "evalml.utils.SEED_BOUNDS.max_bound",
    "skopt.space.Integer",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.CatBoostRegressor.__init__": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.regressors.catboost_regressor.copy",
    "evalml.utils.get_random_seed",
    "evalml.utils.import_or_raise",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.CatBoostRegressor.feature_importance": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.CatBoostRegressor.fit": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.SEED_BOUNDS": {
  "data": {
   "shadows": "evalml.utils.SEED_BOUNDS"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.get_random_seed": {
  "data": {
   "shadows": "evalml.utils.get_random_seed"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.import_or_raise": {
  "data": {
   "shadows": "evalml.utils.import_or_raise"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor.ElasticNetRegressor": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor.ElasticNetRegressor.__init__": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "sklearn.linear_model.ElasticNet",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor.ElasticNetRegressor.feature_importance": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor.SKElasticNet": {
  "data": {
   "shadows": "sklearn.linear_model.ElasticNet"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.et_regressor": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.et_regressor.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.et_regressor.ExtraTreesRegressor": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.EXTRA_TREES",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "skopt.space.Integer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.et_regressor.ExtraTreesRegressor.__init__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "sklearn.ensemble.ExtraTreesRegressor",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.et_regressor.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.et_regressor.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.et_regressor.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.et_regressor.SKExtraTreesRegressor": {
  "data": {
   "shadows": "sklearn.ensemble.ExtraTreesRegressor"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor.LinearRegressor": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.REGRESSION"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor.LinearRegressor.__init__": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "sklearn.linear_model.LinearRegression",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor.LinearRegressor.feature_importance": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor.SKLinearRegression": {
  "data": {
   "shadows": "sklearn.linear_model.LinearRegression"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor.RandomForestRegressor": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.RANDOM_FOREST",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "skopt.space.Integer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor.RandomForestRegressor.__init__": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "sklearn.ensemble.RandomForestRegressor",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor.RandomForestRegressor.feature_importance": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor.SKRandomForestRegressor": {
  "data": {
   "shadows": "sklearn.ensemble.RandomForestRegressor"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.XGBoostRegressor": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.XGBOOST",
    "evalml.pipelines.components.estimators.Estimator",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "skopt.space.Integer",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.XGBoostRegressor.__init__": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "evalml.utils.get_random_seed",
    "evalml.utils.import_or_raise",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.XGBoostRegressor.feature_importance": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.XGBoostRegressor.fit": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.XGBoostRegressor.predict": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.get_random_seed": {
  "data": {
   "shadows": "evalml.utils.get_random_seed"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.import_or_raise": {
  "data": {
   "shadows": "evalml.utils.import_or_raise"
  },
  "type": "import"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.column_selectors": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector.__init__": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "list",
    "super",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector._check_input_for_columns": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "numpy.ndarray",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector._modify_columns": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "abc.abstractmethod"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector.fit": {
  "data": {
   "lineno": 44
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector.fit_transform": {
  "data": {
   "lineno": 68
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector.transform": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.DropColumns": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.column_selectors.ColumnSelector"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.column_selectors.DropColumns._modify_columns": {
  "data": {
   "lineno": 89
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.DropColumns.transform": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.SelectColumns": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.column_selectors.ColumnSelector"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.column_selectors.SelectColumns._modify_columns": {
  "data": {
   "lineno": 110
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.SelectColumns.transform": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.transformers.Transformer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.column_selectors.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.column_selectors.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.column_selectors.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.encoders": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.encoders.encoder": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.encoders.encoder.CategoricalEncoder": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.encoders.encoder.CategoricalEncoder.get_feature_names": {
  "data": {
   "lineno": 8
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.encoders.encoder.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.transformers.Transformer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.OneHotEncoder": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.OneHotEncoder.__init__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ValueError",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.OneHotEncoder._get_cat_cols": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "enumerate",
    "numpy.object",
    "pandas.api.types.is_categorical_dtype"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.OneHotEncoder.fit": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "len",
    "list",
    "numpy.nan",
    "numpy.sort",
    "pandas.DataFrame",
    "sklearn.preprocessing.OneHotEncoder"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.OneHotEncoder.transform": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "len",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.concat",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.SKOneHotEncoder": {
  "data": {
   "shadows": "sklearn.preprocessing.OneHotEncoder"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.feature_selection": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector.FeatureSelector": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector.FeatureSelector.fit_transform": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "AttributeError",
    "RuntimeError",
    "isinstance",
    "list",
    "pandas.DataFrame",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector.FeatureSelector.get_names": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector.FeatureSelector.transform": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "AttributeError",
    "RuntimeError",
    "isinstance",
    "list",
    "pandas.DataFrame",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.transformers.Transformer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_classifier_feature_selector": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_classifier_feature_selector.RFClassifierSelectFromModel": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "numpy.inf",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_classifier_feature_selector.RFClassifierSelectFromModel.__init__": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "int",
    "max",
    "numpy.inf",
    "sklearn.ensemble.RandomForestClassifier",
    "sklearn.feature_selection.SelectFromModel",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_classifier_feature_selector.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_classifier_feature_selector.SKRandomForestClassifier": {
  "data": {
   "shadows": "sklearn.ensemble.RandomForestClassifier"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_classifier_feature_selector.SkSelect": {
  "data": {
   "shadows": "sklearn.feature_selection.SelectFromModel"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_classifier_feature_selector.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_regressor_feature_selector": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_regressor_feature_selector.RFRegressorSelectFromModel": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "numpy.inf",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_regressor_feature_selector.RFRegressorSelectFromModel.__init__": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "int",
    "max",
    "numpy.inf",
    "sklearn.ensemble.RandomForestRegressor",
    "sklearn.feature_selection.SelectFromModel",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_regressor_feature_selector.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_regressor_feature_selector.SKRandomForestRegressor": {
  "data": {
   "shadows": "sklearn.ensemble.RandomForestRegressor"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_regressor_feature_selector.SkSelect": {
  "data": {
   "shadows": "sklearn.feature_selection.SelectFromModel"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_regressor_feature_selector.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.imputers.imputer": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.Imputer": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.Transformer",
    "set"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.Imputer.__init__": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "ValueError",
    "sklearn.impute.SimpleImputer",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.Imputer.fit": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "evalml.utils.gen_utils.boolean",
    "evalml.utils.gen_utils.categorical_dtypes",
    "evalml.utils.gen_utils.numeric_dtypes",
    "isinstance",
    "len",
    "pandas.DataFrame",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.Imputer.transform": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.SkImputer": {
  "data": {
   "shadows": "sklearn.impute.SimpleImputer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.transformers.Transformer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.boolean": {
  "data": {
   "shadows": "evalml.utils.gen_utils.boolean"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.categorical_dtypes": {
  "data": {
   "shadows": "evalml.utils.gen_utils.categorical_dtypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.numeric_dtypes": {
  "data": {
   "shadows": "evalml.utils.gen_utils.numeric_dtypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.PerColumnImputer": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.PerColumnImputer.__init__": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "isinstance",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.PerColumnImputer.fit": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "dict",
    "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer",
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.PerColumnImputer.fit_transform": {
  "data": {
   "lineno": 87
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.PerColumnImputer.transform": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.SimpleImputer": {
  "data": {
   "shadows": "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.transformers.Transformer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer.__init__": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "sklearn.impute.SimpleImputer",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer.fit": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer.fit_transform": {
  "data": {
   "lineno": 67
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer.transform": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.SkImputer": {
  "data": {
   "shadows": "sklearn.impute.SimpleImputer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.transformers.Transformer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.preprocessing": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer.DateTimeFeaturizer": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.Transformer",
    "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_day_of_week",
    "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_hour",
    "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_month",
    "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_year"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer.DateTimeFeaturizer.__init__": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "set",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer.DateTimeFeaturizer.fit": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "isinstance",
    "numpy.datetime64",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer.DateTimeFeaturizer.transform": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.transformers.Transformer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_day_of_week": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_hour": {
  "data": {
   "lineno": 19
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_month": {
  "data": {
   "lineno": 11
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_year": {
  "data": {
   "lineno": 7
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns.DropNullColumns": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns.DropNullColumns.__init__": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "ValueError",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns.DropNullColumns.fit": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns.DropNullColumns.transform": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.transformers.Transformer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer.__init__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "RuntimeWarning",
    "enumerate",
    "evalml.pipelines.components.transformers.preprocessing.text_featurizer.warnings",
    "evalml.utils.import_or_raise",
    "isinstance",
    "len",
    "str",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer._clean_text": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer._clean_text.normalize": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.preprocessing.text_featurizer.string",
    "str.maketrans"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer._verify_col_names": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "RuntimeError",
    "RuntimeWarning",
    "evalml.pipelines.components.transformers.preprocessing.text_featurizer.warnings",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer._verify_col_types": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer.fit": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "pandas.DataFrame",
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer.transform": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "pandas.DataFrame",
    "pandas.concat",
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.transformers.Transformer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.import_or_raise": {
  "data": {
   "shadows": "evalml.utils.import_or_raise"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.string": {
  "data": {
   "shadows": "string"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.scalers": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.scalers.standard_scaler": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.scalers.standard_scaler.SkScaler": {
  "data": {
   "shadows": "sklearn.preprocessing.StandardScaler"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.scalers.standard_scaler.StandardScaler": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "evalml.pipelines.components.transformers.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.scalers.standard_scaler.StandardScaler.__init__": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "sklearn.preprocessing.StandardScaler",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.scalers.standard_scaler.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.transformers.Transformer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.transformer": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.components.transformers.transformer.ComponentBase": {
  "data": {
   "shadows": "evalml.pipelines.components.ComponentBase"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.transformer.MethodPropertyNotFoundError": {
  "data": {
   "shadows": "evalml.exceptions.MethodPropertyNotFoundError"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.transformer.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.components.transformers.transformer.Transformer": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.NONE",
    "evalml.pipelines.components.ComponentBase"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.components.transformers.transformer.Transformer.fit_transform": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "AttributeError",
    "evalml.exceptions.MethodPropertyNotFoundError",
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.transformer.Transformer.transform": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "AttributeError",
    "evalml.exceptions.MethodPropertyNotFoundError",
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.transformers.transformer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.components.utils": {
  "data": {
   "symbols_in_volume": [
    "evalml.pipelines.components.Estimator",
    "evalml.pipelines.components.Transformer",
    "evalml.pipelines.components.utils._all_estimators",
    "evalml.pipelines.components.utils._all_transformers",
    "evalml.utils.gen_utils.get_importable_subclasses",
    "evalml.utils.get_logger"
   ]
  },
  "type": "module"
 },
 "evalml.pipelines.components.utils.ComponentBase": {
  "data": {
   "shadows": "evalml.pipelines.components.ComponentBase"
  },
  "type": "import"
 },
 "evalml.pipelines.components.utils.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.Estimator"
  },
  "type": "import"
 },
 "evalml.pipelines.components.utils.MissingComponentError": {
  "data": {
   "shadows": "evalml.exceptions.MissingComponentError"
  },
  "type": "import"
 },
 "evalml.pipelines.components.utils.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.components.utils.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.Transformer"
  },
  "type": "import"
 },
 "evalml.pipelines.components.utils._all_estimators": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "evalml.pipelines.components.utils._all_estimators_used_in_search": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "evalml.pipelines.components.utils._all_transformers": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "evalml.pipelines.components.utils.all_components": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "evalml.pipelines.components.utils.allowed_model_families": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "evalml.pipelines.components.utils._all_estimators_used_in_search",
    "evalml.problem_types.handle_problem_types",
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.utils.get_estimators": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "RuntimeError",
    "TypeError",
    "evalml.model_family.utils.handle_model_family",
    "evalml.pipelines.components.utils._all_estimators_used_in_search",
    "evalml.pipelines.components.utils.allowed_model_families",
    "evalml.problem_types.handle_problem_types",
    "isinstance",
    "list"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.utils.get_importable_subclasses": {
  "data": {
   "shadows": "evalml.utils.gen_utils.get_importable_subclasses"
  },
  "type": "import"
 },
 "evalml.pipelines.components.utils.get_logger": {
  "data": {
   "shadows": "evalml.utils.get_logger"
  },
  "type": "import"
 },
 "evalml.pipelines.components.utils.handle_component_class": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "ValueError",
    "evalml.exceptions.MissingComponentError",
    "evalml.pipelines.components.ComponentBase",
    "evalml.pipelines.components.utils.all_components",
    "evalml.pipelines.components.utils.inspect",
    "isinstance",
    "issubclass",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.components.utils.handle_model_family": {
  "data": {
   "shadows": "evalml.model_family.utils.handle_model_family"
  },
  "type": "import"
 },
 "evalml.pipelines.components.utils.handle_problem_types": {
  "data": {
   "shadows": "evalml.problem_types.handle_problem_types"
  },
  "type": "import"
 },
 "evalml.pipelines.components.utils.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "evalml.pipelines.components.utils.logger": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "evalml.pipelines.graph_utils": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.graph_utils.LabelBinarizer": {
  "data": {
   "shadows": "sklearn.preprocessing.LabelBinarizer"
  },
  "type": "import"
 },
 "evalml.pipelines.graph_utils.calculate_permutation_importance": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.get_objective",
    "isinstance",
    "list",
    "pandas.DataFrame",
    "sklearn.inspection.permutation_importance",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.graph_utils.calculate_permutation_importance.scorer": {
  "data": {
   "lineno": 264
  },
  "type": "function"
 },
 "evalml.pipelines.graph_utils.confusion_matrix": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "isinstance",
    "normalize_confusion_matrix",
    "pandas.DataFrame",
    "pandas.Series",
    "sklearn.metrics.confusion_matrix",
    "sklearn.utils.multiclass.unique_labels"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.graph_utils.get_objective": {
  "data": {
   "shadows": "evalml.objectives.get_objective"
  },
  "type": "import"
 },
 "evalml.pipelines.graph_utils.graph_confusion_matrix": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "evalml.utils.import_or_raise",
    "isinstance",
    "pandas.Series",
    "sklearn.metrics.confusion_matrix"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.graph_utils.graph_permutation_importance": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "abs",
    "evalml.pipelines.graph_utils.calculate_permutation_importance",
    "evalml.utils.import_or_raise"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.graph_utils.graph_precision_recall_curve": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "dict",
    "evalml.utils.import_or_raise",
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series",
    "sklearn.metrics.precision_recall_curve"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.graph_utils.graph_roc_curve": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "evalml.utils.import_or_raise",
    "isinstance",
    "len",
    "numpy.isnan",
    "numpy.logical_or",
    "numpy.unique",
    "pandas.DataFrame",
    "pandas.Series",
    "range",
    "sklearn.metrics.roc_curve",
    "sklearn.preprocessing.LabelBinarizer"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.graph_utils.import_or_raise": {
  "data": {
   "shadows": "evalml.utils.import_or_raise"
  },
  "type": "import"
 },
 "evalml.pipelines.graph_utils.normalize_confusion_matrix": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.graph_utils.warnings",
    "numpy.newaxis",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.graph_utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.graph_utils.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.graph_utils.precision_recall_curve": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "sklearn.metrics.auc",
    "sklearn.metrics.precision_recall_curve"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.graph_utils.roc_curve": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "sklearn.metrics.auc",
    "sklearn.metrics.roc_curve"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.graph_utils.sk_permutation_importance": {
  "data": {
   "shadows": "sklearn.inspection.permutation_importance"
  },
  "type": "import"
 },
 "evalml.pipelines.graph_utils.sklearn_auc": {
  "data": {
   "shadows": "sklearn.metrics.auc"
  },
  "type": "import"
 },
 "evalml.pipelines.graph_utils.sklearn_confusion_matrix": {
  "data": {
   "shadows": "sklearn.metrics.confusion_matrix"
  },
  "type": "import"
 },
 "evalml.pipelines.graph_utils.sklearn_precision_recall_curve": {
  "data": {
   "shadows": "sklearn.metrics.precision_recall_curve"
  },
  "type": "import"
 },
 "evalml.pipelines.graph_utils.sklearn_roc_curve": {
  "data": {
   "shadows": "sklearn.metrics.roc_curve"
  },
  "type": "import"
 },
 "evalml.pipelines.graph_utils.unique_labels": {
  "data": {
   "shadows": "sklearn.utils.multiclass.unique_labels"
  },
  "type": "import"
 },
 "evalml.pipelines.graph_utils.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "evalml.pipelines.multiclass_classification_pipeline": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.multiclass_classification_pipeline.ClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.classification_pipeline.ClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.pipelines.multiclass_classification_pipeline.MulticlassClassificationPipeline": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "evalml.pipelines.classification_pipeline.ClassificationPipeline",
    "evalml.problem_types.ProblemTypes.MULTICLASS"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.multiclass_classification_pipeline.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base": {
  "data": {
   "symbols_in_volume": [
    "evalml.utils.get_logger"
   ]
  },
  "type": "module"
 },
 "evalml.pipelines.pipeline_base.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.IllFormattedClassNameError": {
  "data": {
   "shadows": "evalml.exceptions.IllFormattedClassNameError"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.MissingComponentError": {
  "data": {
   "shadows": "evalml.exceptions.MissingComponentError"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.PipelineBase": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "abc.ABC"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.__getitem__": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "NotImplementedError",
    "int",
    "isinstance",
    "slice"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.__init__": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "ValueError",
    "evalml.utils.get_random_state",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.__setitem__": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._fit": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "list",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._instantiate_component": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "component_class",
    "evalml.exceptions.MissingComponentError",
    "handle_component_class"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._score": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._score_all_objectives": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "Exception",
    "ValueError",
    "collections.OrderedDict",
    "evalml.exceptions.PipelineScoreError",
    "evalml.pipelines.pipeline_base.sys",
    "evalml.pipelines.pipeline_base.traceback"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._transform": {
  "data": {
   "lineno": 174
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._validate_estimator_problem_type": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.clone": {
  "data": {
   "lineno": 457
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.component_graph": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "abc.abstractmethod",
    "classmethod",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.default_parameters": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "evalml.utils.classproperty",
    "handle_component_class"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.describe": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "enumerate",
    "evalml.pipelines.pipeline_base.logger",
    "evalml.utils.log_subtitle",
    "evalml.utils.log_title",
    "len",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.feature_importance": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "abs",
    "list",
    "pandas.DataFrame",
    "property",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.fit": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "abc.abstractmethod"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.get_component": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "next"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.graph": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "FileNotFoundError",
    "IOError",
    "RuntimeError",
    "ValueError",
    "evalml.pipelines.pipeline_base.os",
    "evalml.utils.import_or_raise",
    "float",
    "isinstance",
    "len",
    "open",
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.graph_feature_importance": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "abs",
    "evalml.utils.import_or_raise"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.hyperparameters": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "component_class",
    "component_class.hyperparameter_ranges",
    "component_class.name",
    "dict",
    "evalml.pipelines.pipeline_base.copy",
    "evalml.utils.classproperty",
    "handle_component_class"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.load": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": [
    "evalml.pipelines.pipeline_base.cloudpickle",
    "open",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.model_family": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "evalml.pipelines.pipeline_base.copy",
    "evalml.utils.classproperty",
    "handle_component_class"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.name": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "evalml.exceptions.IllFormattedClassNameError",
    "evalml.pipelines.pipeline_base.re",
    "evalml.utils.classproperty"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.parameters": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "evalml.pipelines.pipeline_base.copy",
    "property"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.predict": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.save": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": [
    "evalml.pipelines.pipeline_base.cloudpickle",
    "open"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.score": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "abc.abstractmethod"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.summary": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "evalml.pipelines.pipeline_base.copy",
    "evalml.pipelines.pipeline_base.inspect",
    "evalml.utils.classproperty",
    "handle_component_class",
    "issubclass",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineScoreError": {
  "data": {
   "shadows": "evalml.exceptions.PipelineScoreError"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.classproperty": {
  "data": {
   "shadows": "evalml.utils.classproperty"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.cloudpickle": {
  "data": {
   "shadows": "cloudpickle"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.get_logger": {
  "data": {
   "shadows": "evalml.utils.get_logger"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.get_random_state": {
  "data": {
   "shadows": "evalml.utils.get_random_state"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.import_or_raise": {
  "data": {
   "shadows": "evalml.utils.import_or_raise"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.log_subtitle": {
  "data": {
   "shadows": "evalml.utils.log_subtitle"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.log_title": {
  "data": {
   "shadows": "evalml.utils.log_title"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.logger": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "evalml.pipelines.pipeline_base.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "evalml.pipelines.pipeline_base.traceback": {
  "data": {
   "shadows": "traceback"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.prediction_explanations._algorithms": {
  "data": {
   "symbols_in_volume": [
    "evalml.utils.get_logger"
   ]
  },
  "type": "module"
 },
 "evalml.pipelines.prediction_explanations._algorithms.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations._algorithms.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations._algorithms._compute_shap_values": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "evalml.model_family.model_family.ModelFamily.BASELINE",
    "evalml.model_family.model_family.ModelFamily.CATBOOST",
    "evalml.model_family.model_family.ModelFamily.XGBOOST",
    "evalml.pipelines.prediction_explanations._algorithms._create_dictionary",
    "evalml.pipelines.prediction_explanations._algorithms.logger",
    "evalml.pipelines.prediction_explanations._algorithms.shap",
    "evalml.pipelines.prediction_explanations._algorithms.warnings",
    "evalml.problem_types.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.problem_types.ProblemTypes.REGRESSION",
    "isinstance",
    "list",
    "numpy.ndarray",
    "numpy.zeros",
    "sklearn.utils.check_array",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.prediction_explanations._algorithms._create_dictionary": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "numpy.atleast_2d",
    "numpy.ndarray",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.prediction_explanations._algorithms._normalize_shap_values": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "evalml.pipelines.prediction_explanations._algorithms._normalize_values_dict",
    "isinstance",
    "list",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.prediction_explanations._algorithms._normalize_values_dict": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "enumerate",
    "numpy.abs",
    "numpy.newaxis",
    "numpy.stack",
    "sorted"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.prediction_explanations._algorithms.check_array": {
  "data": {
   "shadows": "sklearn.utils.check_array"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations._algorithms.get_logger": {
  "data": {
   "shadows": "evalml.utils.get_logger"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations._algorithms.logger": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "evalml.pipelines.prediction_explanations._algorithms.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations._algorithms.shap": {
  "data": {
   "shadows": "shap"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations._algorithms.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations._user_interface": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.prediction_explanations._user_interface.Texttable": {
  "data": {
   "shadows": "texttable.Texttable"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations._user_interface._make_rows": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "abs",
    "int",
    "len",
    "min",
    "reversed",
    "round",
    "sorted"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.prediction_explanations._user_interface._make_single_prediction_table": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "enumerate",
    "evalml.pipelines.prediction_explanations._user_interface._make_table",
    "isinstance",
    "len",
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.prediction_explanations._user_interface._make_table": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "evalml.pipelines.prediction_explanations._user_interface._make_rows",
    "texttable.Texttable",
    "texttable.Texttable.HEADER"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.prediction_explanations.explainers": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.prediction_explanations.explainers._compute_shap_values": {
  "data": {
   "shadows": "evalml.pipelines.prediction_explanations._algorithms._compute_shap_values"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations.explainers._make_single_prediction_table": {
  "data": {
   "shadows": "evalml.pipelines.prediction_explanations._user_interface._make_single_prediction_table"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations.explainers._normalize_shap_values": {
  "data": {
   "shadows": "evalml.pipelines.prediction_explanations._algorithms._normalize_shap_values"
  },
  "type": "import"
 },
 "evalml.pipelines.prediction_explanations.explainers.explain_prediction": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.prediction_explanations._algorithms._compute_shap_values",
    "evalml.pipelines.prediction_explanations._algorithms._normalize_shap_values",
    "evalml.pipelines.prediction_explanations._user_interface._make_single_prediction_table",
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.prediction_explanations.explainers.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.regression": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.regression.baseline_regression": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.regression.baseline_regression.BaselineRegressionPipeline": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "evalml.pipelines.RegressionPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.regression.baseline_regression.MeanBaselineRegressionPipeline": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.pipelines.RegressionPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.regression.baseline_regression.RegressionPipeline": {
  "data": {
   "shadows": "evalml.pipelines.RegressionPipeline"
  },
  "type": "import"
 },
 "evalml.pipelines.regression_pipeline": {
  "data": {},
  "type": "module"
 },
 "evalml.pipelines.regression_pipeline.PipelineBase": {
  "data": {
   "shadows": "evalml.pipelines.PipelineBase"
  },
  "type": "import"
 },
 "evalml.pipelines.regression_pipeline.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.regression_pipeline.RegressionPipeline": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.pipelines.PipelineBase",
    "evalml.problem_types.ProblemTypes.REGRESSION"
   ]
  },
  "type": "class"
 },
 "evalml.pipelines.regression_pipeline.RegressionPipeline.fit": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "ValueError",
    "evalml.utils.gen_utils.numeric_dtypes",
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.regression_pipeline.RegressionPipeline.score": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "evalml.objectives.get_objective",
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.regression_pipeline.get_objective": {
  "data": {
   "shadows": "evalml.objectives.get_objective"
  },
  "type": "import"
 },
 "evalml.pipelines.regression_pipeline.numeric_dtypes": {
  "data": {
   "shadows": "evalml.utils.gen_utils.numeric_dtypes"
  },
  "type": "import"
 },
 "evalml.pipelines.regression_pipeline.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.pipelines.utils": {
  "data": {
   "symbols_in_volume": [
    "evalml.utils.get_logger"
   ]
  },
  "type": "module"
 },
 "evalml.pipelines.utils.CatBoostClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.CatBoostClassifier"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.CatBoostRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.CatBoostRegressor"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.DateTimeFeaturizer": {
  "data": {
   "shadows": "evalml.pipelines.components.DateTimeFeaturizer"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.DropNullColumns": {
  "data": {
   "shadows": "evalml.pipelines.components.DropNullColumns"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.Imputer": {
  "data": {
   "shadows": "evalml.pipelines.components.Imputer"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.LinearRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.LinearRegressor"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.LogisticRegressionClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.LogisticRegressionClassifier"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.OneHotEncoder": {
  "data": {
   "shadows": "evalml.pipelines.components.OneHotEncoder"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.StandardScaler": {
  "data": {
   "shadows": "evalml.pipelines.components.StandardScaler"
  },
  "type": "import"
 },
 "evalml.pipelines.utils._get_preprocessing_components": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "evalml.pipelines.components.CatBoostClassifier",
    "evalml.pipelines.components.CatBoostRegressor",
    "evalml.pipelines.components.DateTimeFeaturizer",
    "evalml.pipelines.components.DropNullColumns",
    "evalml.pipelines.components.Imputer",
    "evalml.pipelines.components.LinearRegressor",
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.pipelines.components.StandardScaler",
    "isinstance",
    "len",
    "numpy.datetime64",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.utils.get_estimators": {
  "data": {
   "shadows": "evalml.pipelines.components.utils.get_estimators"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.get_logger": {
  "data": {
   "shadows": "evalml.utils.get_logger"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.handle_problem_types": {
  "data": {
   "shadows": "evalml.problem_types.handle_problem_types"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.logger": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "evalml.pipelines.utils.make_pipeline": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.utils.get_estimators",
    "evalml.pipelines.utils._get_preprocessing_components",
    "evalml.problem_types.handle_problem_types",
    "get_pipeline_base_class",
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.utils.make_pipeline.GeneratedPipeline": {
  "data": {
   "lineno": 100
  },
  "type": "class"
 },
 "evalml.pipelines.utils.make_pipeline.get_pipeline_base_class": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION"
   ]
  },
  "type": "function"
 },
 "evalml.pipelines.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.pipelines.utils.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.preprocessing": {
  "data": {},
  "type": "module"
 },
 "evalml.preprocessing.utils": {
  "data": {},
  "type": "module"
 },
 "evalml.preprocessing.utils.ShuffleSplit": {
  "data": {
   "shadows": "sklearn.model_selection.ShuffleSplit"
  },
  "type": "import"
 },
 "evalml.preprocessing.utils.StratifiedShuffleSplit": {
  "data": {
   "shadows": "sklearn.model_selection.StratifiedShuffleSplit"
  },
  "type": "import"
 },
 "evalml.preprocessing.utils.drop_nan_target_rows": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.preprocessing.utils.label_distribution": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.preprocessing.utils.load_data": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "label_distribution",
    "len",
    "number_of_features",
    "pandas.read_csv",
    "print"
   ]
  },
  "type": "function"
 },
 "evalml.preprocessing.utils.number_of_features": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.preprocessing.utils.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.preprocessing.utils.split_data": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "isinstance",
    "next",
    "pandas.DataFrame",
    "pandas.Series",
    "sklearn.model_selection.ShuffleSplit",
    "sklearn.model_selection.StratifiedShuffleSplit"
   ]
  },
  "type": "function"
 },
 "evalml.print_info": {
  "data": {
   "shadows": "evalml.utils.print_info"
  },
  "type": "import"
 },
 "evalml.problem_types": {
  "data": {},
  "type": "module"
 },
 "evalml.problem_types.problem_types": {
  "data": {},
  "type": "module"
 },
 "evalml.problem_types.problem_types.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "evalml.problem_types.problem_types.ProblemTypes": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "enum.Enum"
   ]
  },
  "type": "class"
 },
 "evalml.problem_types.problem_types.ProblemTypes.__str__": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.problem_types.problem_types.ProblemTypes"
   ]
  },
  "type": "function"
 },
 "evalml.problem_types.utils": {
  "data": {},
  "type": "module"
 },
 "evalml.problem_types.utils.handle_problem_types": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "isinstance",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.sklearn": {
  "data": {
   "shadows": "sklearn"
  },
  "type": "import"
 },
 "evalml.skopt": {
  "data": {
   "shadows": "skopt"
  },
  "type": "import"
 },
 "evalml.tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.automl_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.automl_tests.test_automl": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.automl_tests.test_automl.AutoMLSearch": {
  "data": {
   "shadows": "evalml.AutoMLSearch"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.AutoMLSearchException": {
  "data": {
   "shadows": "evalml.exceptions.AutoMLSearchException"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.BinaryClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.BinaryClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.DataCheck": {
  "data": {
   "shadows": "evalml.data_checks.DataCheck"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.DataCheckError": {
  "data": {
   "shadows": "evalml.data_checks.DataCheckError"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.DataCheckWarning": {
  "data": {
   "shadows": "evalml.data_checks.DataCheckWarning"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.DataChecks": {
  "data": {
   "shadows": "evalml.data_checks.DataChecks"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.FraudCost": {
  "data": {
   "shadows": "evalml.objectives.FraudCost"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.KeyboardInterruptOnKthPipeline": {
  "data": {
   "lineno": 850
  },
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl.KeyboardInterruptOnKthPipeline.__call__": {
  "data": {
   "lineno": 857,
   "symbols_in_volume": [
    "KeyboardInterrupt"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.KeyboardInterruptOnKthPipeline.__init__": {
  "data": {
   "lineno": 853
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.MagicMock": {
  "data": {
   "shadows": "unittest.mock.MagicMock"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.MockDataCheckErrorAndWarning": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "evalml.data_checks.DataCheck"
   ]
  },
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl.MockDataCheckErrorAndWarning.validate": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "evalml.data_checks.DataCheckError",
    "evalml.data_checks.DataCheckWarning"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.MulticlassClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.MulticlassClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.NoParamsException": {
  "data": {
   "shadows": "evalml.tuners.NoParamsException"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.PipelineNotFoundError": {
  "data": {
   "shadows": "evalml.exceptions.PipelineNotFoundError"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.RandomSearchTuner": {
  "data": {
   "shadows": "evalml.tuners.RandomSearchTuner"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.RegressionPipeline": {
  "data": {
   "shadows": "evalml.pipelines.RegressionPipeline"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.StratifiedKFold": {
  "data": {
   "shadows": "sklearn.model_selection.StratifiedKFold"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.TrainingValidationSplit": {
  "data": {
   "shadows": "evalml.automl.TrainingValidationSplit"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.cloudpickle": {
  "data": {
   "shadows": "cloudpickle"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.dont_interrupt": {
  "data": {
   "lineno": 872
  },
  "type": "constant"
 },
 "evalml.tests.automl_tests.test_automl.dont_interrupt_after_bad_message": {
  "data": {
   "lineno": 873
  },
  "type": "constant"
 },
 "evalml.tests.automl_tests.test_automl.get_estimators": {
  "data": {
   "shadows": "evalml.pipelines.components.utils.get_estimators"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.interrupt": {
  "data": {
   "lineno": 870
  },
  "type": "constant"
 },
 "evalml.tests.automl_tests.test_automl.interrupt_after_bad_message": {
  "data": {
   "lineno": 871
  },
  "type": "constant"
 },
 "evalml.tests.automl_tests.test_automl.load_breast_cancer": {
  "data": {
   "shadows": "evalml.demos.load_breast_cancer"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.load_wine": {
  "data": {
   "shadows": "evalml.demos.load_wine"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.make_pipeline": {
  "data": {
   "shadows": "evalml.pipelines.utils.make_pipeline"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl.test_add_to_rankings": {
  "data": {
   "lineno": 639,
   "symbols_in_volume": [
    "dummy_binary_pipeline_class",
    "evalml.AutoMLSearch",
    "len",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_add_to_rankings_duplicate": {
  "data": {
   "lineno": 669,
   "symbols_in_volume": [
    "dummy_binary_pipeline_class",
    "evalml.AutoMLSearch",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_add_to_rankings_no_search": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": [
    "RuntimeError",
    "dummy_binary_pipeline_class",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.pytest",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_add_to_rankings_trained": {
  "data": {
   "lineno": 685,
   "symbols_in_volume": [
    "CoolBinaryClassificationPipeline",
    "dummy_binary_pipeline_class",
    "evalml.AutoMLSearch",
    "list",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_add_to_rankings_trained.CoolBinaryClassificationPipeline": {
  "data": {
   "lineno": 698,
   "symbols_in_volume": [
    "dummy_binary_pipeline_class"
   ]
  },
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl.test_allowed_pipelines_with_incorrect_problem_type": {
  "data": {
   "lineno": 582,
   "symbols_in_volume": [
    "ValueError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_algorithm": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": [
    "StopIteration",
    "evalml.AutoMLSearch",
    "len",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_allowed_pipelines_algorithm": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": [
    "Exception",
    "evalml.AutoMLSearch",
    "evalml.model_family.ModelFamily.RANDOM_FOREST",
    "evalml.pipelines.components.utils.get_estimators",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.tests.automl_tests.test_automl.pytest",
    "unittest.mock.patch",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_bad_data_check_parameter_type": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "ValueError",
    "evalml.AutoMLSearch",
    "evalml.data_checks.DataChecks",
    "evalml.tests.automl_tests.test_automl.pytest",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_data_check_results_is_none_before_search": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "evalml.AutoMLSearch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_data_checks_raises_error": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "ValueError",
    "evalml.AutoMLSearch",
    "evalml.data_checks.DataChecks",
    "evalml.tests.automl_tests.test_automl.MockDataCheckErrorAndWarning",
    "evalml.tests.automl_tests.test_automl.pytest",
    "pandas.DataFrame",
    "pandas.Series",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_default_data_checks": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.data_checks.DataCheckWarning",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_empty_data_checks": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "pandas.DataFrame",
    "pandas.Series",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_feature_selection": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "unittest.mock.MagicMock",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_feature_selection.MockFeatureSelectionPipeline": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_feature_selection.MockFeatureSelectionPipeline.fit": {
  "data": {
   "lineno": 418
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_serialization": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.os",
    "pandas.testing.assert_frame_equal",
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_serialization_protocol": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.cloudpickle",
    "evalml.tests.automl_tests.test_automl.os",
    "len",
    "str",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_str_no_param_search": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "isinstance",
    "list",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_str_search": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.tuners.RandomSearchTuner",
    "isinstance",
    "list",
    "sklearn.model_selection.StratifiedKFold",
    "str",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_str_search._dummy_callback": {
  "data": {
   "lineno": 222
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_tuner_exception": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.pytest",
    "evalml.tuners.NoParamsException",
    "evalml.tuners.RandomSearchTuner",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_catch_keyboard_interrupt": {
  "data": {
   "lineno": 876,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.KeyboardInterruptOnKthPipeline",
    "evalml.tests.automl_tests.test_automl.dont_interrupt",
    "evalml.tests.automl_tests.test_automl.dont_interrupt_after_bad_message",
    "evalml.tests.automl_tests.test_automl.interrupt",
    "evalml.tests.automl_tests.test_automl.interrupt_after_bad_message",
    "evalml.tests.automl_tests.test_automl.pytest",
    "len",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_checks_at_search_time": {
  "data": {
   "lineno": 610,
   "symbols_in_volume": [
    "ValueError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.pytest",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_default_objective": {
  "data": {
   "lineno": 627,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_describe_pipeline": {
  "data": {
   "lineno": 767,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "len",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_error_during_train_test_split": {
  "data": {
   "lineno": 942,
   "symbols_in_volume": [
    "RuntimeError",
    "evalml.AutoMLSearch",
    "numpy.isnan",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_get_pipeline_invalid": {
  "data": {
   "lineno": 742,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.exceptions.PipelineNotFoundError",
    "evalml.tests.automl_tests.test_automl.pytest",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_has_searched": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_incompatible_additional_objectives": {
  "data": {
   "lineno": 622,
   "symbols_in_volume": [
    "ValueError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_init_objective": {
  "data": {
   "lineno": 603,
   "symbols_in_volume": [
    "evalml.AutoMLSearch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_init_problem_type_error": {
  "data": {
   "lineno": 595,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_invalid_data_splitter": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": [
    "ValueError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.pytest",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_large_dataset_binary": {
  "data": {
   "lineno": 524,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.automl.TrainingValidationSplit",
    "evalml.objectives.FraudCost",
    "isinstance",
    "len",
    "pandas.DataFrame",
    "pandas.Series",
    "range",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_large_dataset_multiclass": {
  "data": {
   "lineno": 548,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.automl.TrainingValidationSplit",
    "isinstance",
    "len",
    "pandas.DataFrame",
    "pandas.Series",
    "range",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_large_dataset_regression": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.automl.TrainingValidationSplit",
    "isinstance",
    "len",
    "pandas.DataFrame",
    "pandas.Series",
    "range",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_main_objective_problem_type_mismatch": {
  "data": {
   "lineno": 590,
   "symbols_in_volume": [
    "ValueError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_no_search": {
  "data": {
   "lineno": 721,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.exceptions.PipelineNotFoundError",
    "evalml.tests.automl_tests.test_automl.pytest",
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_objective_score_raises": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "Exception",
    "evalml.AutoMLSearch",
    "len",
    "list",
    "numpy.isnan",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_pipeline_fit_raises": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "Exception",
    "evalml.AutoMLSearch",
    "len",
    "numpy.isnan",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_pipeline_limits": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "evalml.tests.automl_tests.test_automl.pytest",
    "len",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_pipeline_score_raises": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "Exception",
    "evalml.AutoMLSearch",
    "len",
    "list",
    "numpy.isnan",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_pipelines_in_batch_return_nan": {
  "data": {
   "lineno": 909,
   "symbols_in_volume": [
    "dummy_binary_pipeline_class",
    "evalml.AutoMLSearch",
    "evalml.exceptions.AutoMLSearchException",
    "evalml.tests.automl_tests.test_automl.pytest",
    "numpy.nan",
    "range",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_pipelines_in_batch_return_none": {
  "data": {
   "lineno": 929,
   "symbols_in_volume": [
    "dummy_binary_pipeline_class",
    "evalml.AutoMLSearch",
    "evalml.exceptions.AutoMLSearchException",
    "evalml.tests.automl_tests.test_automl.pytest",
    "numpy.nan",
    "range",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_rankings": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_results_getter": {
  "data": {
   "lineno": 797,
   "symbols_in_volume": [
    "AttributeError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl.pytest",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_search_results": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "dict",
    "evalml.AutoMLSearch",
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.pipelines.MulticlassClassificationPipeline",
    "evalml.pipelines.RegressionPipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "evalml.tests.automl_tests.test_automl.pytest",
    "float",
    "isinstance",
    "issubclass",
    "len",
    "list",
    "numpy.all",
    "numpy.bool_",
    "numpy.dtype",
    "pandas.DataFrame",
    "pandas.Series",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_targets_data_types_classification": {
  "data": {
   "lineno": 817,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.demos.load_breast_cancer",
    "evalml.demos.load_wine",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.tests.automl_tests.test_automl.pytest",
    "float",
    "int",
    "len",
    "pandas.Categorical",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_algorithm": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.AutoMLAlgorithm": {
  "data": {
   "shadows": "evalml.automl.automl_algorithm.AutoMLAlgorithm"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.DummyAlgorithm": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.automl.automl_algorithm.AutoMLAlgorithm"
   ]
  },
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.DummyAlgorithm.__init__": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.DummyAlgorithm.next_batch": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "StopIteration",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.test_automl_algorithm_dummy": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "StopIteration",
    "evalml.tests.automl_tests.test_automl_algorithm.DummyAlgorithm",
    "evalml.tests.automl_tests.test_automl_algorithm.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.test_automl_algorithm_init_base": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "TypeError",
    "evalml.automl.automl_algorithm.AutoMLAlgorithm",
    "evalml.tests.automl_tests.test_automl_algorithm.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.AutoMLSearch": {
  "data": {
   "shadows": "evalml.AutoMLSearch"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.FraudCost": {
  "data": {
   "shadows": "evalml.objectives.FraudCost"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.MagicMock": {
  "data": {
   "shadows": "unittest.mock.MagicMock"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.ModeBaselineBinaryPipeline": {
  "data": {
   "shadows": "evalml.pipelines.ModeBaselineBinaryPipeline"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.ObjectiveNotFoundError": {
  "data": {
   "shadows": "evalml.exceptions.ObjectiveNotFoundError"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.PipelineBase": {
  "data": {
   "shadows": "evalml.pipelines.PipelineBase"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.PipelineNotFoundError": {
  "data": {
   "shadows": "evalml.exceptions.PipelineNotFoundError"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.Precision": {
  "data": {
   "shadows": "evalml.objectives.Precision"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.PrecisionMicro": {
  "data": {
   "shadows": "evalml.objectives.PrecisionMicro"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.Recall": {
  "data": {
   "shadows": "evalml.objectives.Recall"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.SearchIterationPlot": {
  "data": {
   "shadows": "evalml.automl.pipeline_search_plots.SearchIterationPlot"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.StratifiedKFold": {
  "data": {
   "shadows": "sklearn.model_selection.StratifiedKFold"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.TimeSeriesSplit": {
  "data": {
   "shadows": "sklearn.model_selection.TimeSeriesSplit"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.get_estimators": {
  "data": {
   "shadows": "evalml.pipelines.components.utils.get_estimators"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.get_objective": {
  "data": {
   "shadows": "evalml.objectives.get_objective"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.get_objectives": {
  "data": {
   "shadows": "evalml.objectives.get_objectives"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.make_pipeline": {
  "data": {
   "shadows": "evalml.pipelines.utils.make_pipeline"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_additional_objectives": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.objectives.FraudCost",
    "list"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_init_allowed_both_not_specified_binary": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": [
    "assert_allowed_pipelines_equal_helper",
    "evalml.AutoMLSearch",
    "evalml.pipelines.components.utils.get_estimators",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "set",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_init_allowed_both_not_specified_multi": {
  "data": {
   "lineno": 533,
   "symbols_in_volume": [
    "assert_allowed_pipelines_equal_helper",
    "evalml.AutoMLSearch",
    "evalml.pipelines.components.utils.get_estimators",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "set",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_init_allowed_both_specified_binary": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": [
    "assert_allowed_pipelines_equal_helper",
    "evalml.AutoMLSearch",
    "evalml.model_family.ModelFamily.RANDOM_FOREST",
    "set",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_init_allowed_both_specified_multi": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": [
    "assert_allowed_pipelines_equal_helper",
    "evalml.AutoMLSearch",
    "evalml.model_family.ModelFamily.RANDOM_FOREST",
    "set",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_no_allowed_pipelines": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": [
    "ValueError",
    "evalml.AutoMLSearch",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.tests.automl_tests.test_automl_search_classification.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_search": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.pipelines.ModeBaselineBinaryPipeline",
    "unittest.mock.MagicMock",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_specified_allowed_model_families_binary": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": [
    "assert_allowed_pipelines_equal_helper",
    "evalml.AutoMLSearch",
    "evalml.model_family.ModelFamily.RANDOM_FOREST",
    "evalml.pipelines.components.utils.get_estimators",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "set",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_specified_allowed_model_families_multi": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "assert_allowed_pipelines_equal_helper",
    "evalml.AutoMLSearch",
    "evalml.model_family.ModelFamily.RANDOM_FOREST",
    "evalml.pipelines.components.utils.get_estimators",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "set",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_specified_allowed_pipelines_binary": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.model_family.ModelFamily.NONE",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_specified_allowed_pipelines_multi": {
  "data": {
   "lineno": 446,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.model_family.ModelFamily.NONE",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_binary_auto": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "len",
    "numpy.unique"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_callback": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.objectives.Precision"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_callback.add_result_callback": {
  "data": {
   "lineno": 178
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_callback.start_iteration_callback": {
  "data": {
   "lineno": 175
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_categorical_classification": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "evalml.AutoMLSearch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_data_split": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "isinstance",
    "len",
    "pandas.DataFrame",
    "sklearn.model_selection.StratifiedKFold",
    "sklearn.model_selection.TimeSeriesSplit"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_describe_pipeline_objective_ordered": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.objectives.get_objective"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_early_stopping": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "ValueError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl_search_classification.pytest",
    "evalml.tests.automl_tests.test_automl_search_classification.time",
    "id"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_get_pipeline_none": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.exceptions.PipelineNotFoundError",
    "evalml.tests.automl_tests.test_automl_search_classification.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_init": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.pipelines.PipelineBase",
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_init_objective": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.objectives.Precision",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_max_pipelines": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_max_time": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_max_time_units": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "AssertionError",
    "TypeError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl_search_classification.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_multi_auto": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.objectives.PrecisionMicro",
    "evalml.objectives.get_objectives",
    "len",
    "next",
    "numpy.unique",
    "type",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_multi_objective": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_non_optimizable_threshold": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_optimizable_threshold_disabled": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_optimizable_threshold_enabled": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_plot_disabled_missing_dependency": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "AttributeError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl_search_classification.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_plot_iterations_ipython_mock": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.automl.pipeline_search_plots.SearchIterationPlot",
    "evalml.tests.automl_tests.test_automl_search_classification.pytest",
    "isinstance",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_plot_iterations_ipython_mock_import_failure": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "ImportError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl_search_classification.pytest",
    "isinstance",
    "len",
    "pandas.Series",
    "tuple",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_plot_iterations_max_pipelines": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl_search_classification.pytest",
    "isinstance",
    "len",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_plot_iterations_max_time": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl_search_classification.pytest",
    "isinstance",
    "len",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_random_state": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.objectives.Precision"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_recall_error": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.exceptions.ObjectiveNotFoundError",
    "evalml.tests.automl_tests.test_automl_search_classification.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_recall_object": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.objectives.Recall",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.AutoMLSearch": {
  "data": {
   "shadows": "evalml.AutoMLSearch"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.MagicMock": {
  "data": {
   "shadows": "unittest.mock.MagicMock"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.MeanBaselineRegressionPipeline": {
  "data": {
   "shadows": "evalml.pipelines.MeanBaselineRegressionPipeline"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.MeanSquaredLogError": {
  "data": {
   "shadows": "evalml.objectives.MeanSquaredLogError"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.ObjectiveNotFoundError": {
  "data": {
   "shadows": "evalml.exceptions.ObjectiveNotFoundError"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.PipelineBase": {
  "data": {
   "shadows": "evalml.pipelines.PipelineBase"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.RootMeanSquaredLogError": {
  "data": {
   "shadows": "evalml.objectives.RootMeanSquaredLogError"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.get_estimators": {
  "data": {
   "shadows": "evalml.pipelines.components.utils.get_estimators"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.make_pipeline": {
  "data": {
   "shadows": "evalml.pipelines.utils.make_pipeline"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_init_allowed_both_not_specified": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "assert_allowed_pipelines_equal_helper",
    "evalml.AutoMLSearch",
    "evalml.pipelines.components.utils.get_estimators",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "set",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_init_allowed_both_specified": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "assert_allowed_pipelines_equal_helper",
    "evalml.AutoMLSearch",
    "evalml.model_family.ModelFamily.RANDOM_FOREST",
    "set",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_no_allowed_pipelines": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "ValueError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl_search_regression.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_search": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.pipelines.MeanBaselineRegressionPipeline",
    "unittest.mock.MagicMock",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_specified_allowed_model_families": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "assert_allowed_pipelines_equal_helper",
    "evalml.AutoMLSearch",
    "evalml.model_family.ModelFamily.RANDOM_FOREST",
    "evalml.pipelines.components.utils.get_estimators",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "set",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_specified_allowed_pipelines": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.model_family.ModelFamily.NONE",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_callback": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "evalml.AutoMLSearch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_callback.add_result_callback": {
  "data": {
   "lineno": 67
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_callback.start_iteration_callback": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_categorical_regression": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "evalml.AutoMLSearch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_early_stopping": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl_search_regression.time",
    "id"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_init": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.pipelines.PipelineBase",
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_log_metrics_only_passed_directly": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.exceptions.ObjectiveNotFoundError",
    "evalml.objectives.MeanSquaredLogError",
    "evalml.objectives.RootMeanSquaredLogError",
    "evalml.tests.automl_tests.test_automl_search_regression.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_plot_disabled_missing_dependency": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "AttributeError",
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl_search_regression.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_plot_iterations_max_pipelines": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl_search_regression.pytest",
    "isinstance",
    "len",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_plot_iterations_max_time": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.tests.automl_tests.test_automl_search_regression.pytest",
    "isinstance",
    "len",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_random_state": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.AutoMLAlgorithmException": {
  "data": {
   "shadows": "evalml.automl.automl_algorithm.AutoMLAlgorithmException"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.BinaryClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.BinaryClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.Estimator"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.IterativeAlgorithm": {
  "data": {
   "shadows": "evalml.automl.automl_algorithm.IterativeAlgorithm"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "evalml.tests.automl_tests.test_iterative_algorithm.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes.MockBinaryClassificationPipeline1": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes.MockBinaryClassificationPipeline2": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes.MockBinaryClassificationPipeline3": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes.MockEstimator": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.NONE",
    "evalml.pipelines.components.Estimator",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS"
   ]
  },
  "type": "class"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes.MockEstimator.__init__": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.test_iterative_algorithm_allowed_pipelines": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "evalml.automl.automl_algorithm.IterativeAlgorithm"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.test_iterative_algorithm_empty": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "evalml.automl.automl_algorithm.AutoMLAlgorithmException",
    "evalml.automl.automl_algorithm.IterativeAlgorithm",
    "evalml.tests.automl_tests.test_iterative_algorithm.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.test_iterative_algorithm_init": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "evalml.automl.automl_algorithm.IterativeAlgorithm"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.test_iterative_algorithm_init_iterative": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "evalml.automl.automl_algorithm.IterativeAlgorithm"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.test_iterative_algorithm_results": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "all",
    "any",
    "evalml.automl.automl_algorithm.IterativeAlgorithm",
    "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes",
    "len",
    "numpy.arange",
    "print",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.SearchIterationPlot": {
  "data": {
   "shadows": "evalml.automl.pipeline_search_plots.SearchIterationPlot"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.test_search_iteration_plot_class": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "MockResults",
    "evalml.automl.pipeline_search_plots.SearchIterationPlot",
    "evalml.tests.automl_tests.test_pipeline_search_plots.pytest",
    "isinstance",
    "list"
   ]
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.test_search_iteration_plot_class.MockObjective": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.test_search_iteration_plot_class.MockObjective.__init__": {
  "data": {
   "lineno": 11
  },
  "type": "function"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.test_search_iteration_plot_class.MockResults": {
  "data": {
   "lineno": 15
  },
  "type": "class"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.test_search_iteration_plot_class.MockResults.__init__": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "MockObjective",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_baseline_classifier": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_baseline_classifier.BaselineClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.BaselineClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_baseline_classifier.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_baseline_classifier.get_random_state": {
  "data": {
   "shadows": "evalml.utils.get_random_state"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_baseline_classifier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_baseline_classifier.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_baseline_classifier.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_binary_mode": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "evalml.pipelines.components.BaselineClassifier",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_binary_random": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "evalml.pipelines.components.BaselineClassifier",
    "evalml.utils.get_random_state",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "numpy.unique",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_binary_random_weighted": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "evalml.pipelines.components.BaselineClassifier",
    "evalml.utils.get_random_state",
    "float",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "numpy.unique",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_init": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.BASELINE",
    "evalml.pipelines.components.BaselineClassifier"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_invalid_strategy": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.BaselineClassifier",
    "evalml.tests.component_tests.test_baseline_classifier.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_multiclass_mode": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "evalml.pipelines.components.BaselineClassifier",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_multiclass_random": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "evalml.pipelines.components.BaselineClassifier",
    "evalml.utils.get_random_state",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "numpy.unique",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_multiclass_random_weighted": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "evalml.pipelines.components.BaselineClassifier",
    "evalml.utils.get_random_state",
    "float",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "numpy.unique",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_no_mode": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "evalml.pipelines.components.BaselineClassifier",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "pandas.DataFrame",
    "pandas.Series",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_y_is_None": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.BaselineClassifier",
    "evalml.tests.component_tests.test_baseline_classifier.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_regressor": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_baseline_regressor.BaselineRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.BaselineRegressor"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_baseline_regressor.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_baseline_regressor.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_baseline_regressor.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_baseline_regressor.test_baseline_init": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.BASELINE",
    "evalml.pipelines.components.BaselineRegressor"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_regressor.test_baseline_invalid_strategy": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.BaselineRegressor",
    "evalml.tests.component_tests.test_baseline_regressor.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_regressor.test_baseline_mean": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "evalml.pipelines.components.BaselineRegressor",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_regressor.test_baseline_median": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "evalml.pipelines.components.BaselineRegressor",
    "len",
    "numpy.array",
    "numpy.median",
    "numpy.testing.assert_allclose"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_regressor.test_baseline_y_is_None": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.BaselineRegressor",
    "evalml.tests.component_tests.test_baseline_regressor.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_classifier": {
  "data": {
   "symbols_in_volume": [
    "pytest.importorskip"
   ]
  },
  "type": "module"
 },
 "evalml.tests.component_tests.test_catboost_classifier.CatBoostClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.CatBoostClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_catboost_classifier.SEED_BOUNDS": {
  "data": {
   "shadows": "evalml.utils.SEED_BOUNDS"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_catboost_classifier.importorskip": {
  "data": {
   "shadows": "pytest.importorskip"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_catboost_classifier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_catboost_classifier.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_catboost_classifier.test_catboost_classifier_random_state_bounds_rng": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "evalml.pipelines.components.CatBoostClassifier",
    "evalml.pipelines.components.CatBoostClassifier.SEED_MAX",
    "evalml.pipelines.components.CatBoostClassifier.SEED_MIN",
    "len",
    "make_mock_random_state",
    "pandas.DataFrame",
    "pandas.Series",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_classifier.test_catboost_classifier_random_state_bounds_rng.make_mock_random_state": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "MockRandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_classifier.test_catboost_classifier_random_state_bounds_rng.make_mock_random_state.MockRandomState": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_catboost_classifier.test_catboost_classifier_random_state_bounds_rng.make_mock_random_state.MockRandomState.randint": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_classifier.test_catboost_classifier_random_state_bounds_seed": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.pipelines.components.CatBoostClassifier",
    "evalml.utils.SEED_BOUNDS.max_bound",
    "evalml.utils.SEED_BOUNDS.min_bound",
    "len",
    "pandas.DataFrame",
    "pandas.Series",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_regressor": {
  "data": {
   "symbols_in_volume": [
    "pytest.importorskip"
   ]
  },
  "type": "module"
 },
 "evalml.tests.component_tests.test_catboost_regressor.CatBoostRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.CatBoostRegressor"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_catboost_regressor.SEED_BOUNDS": {
  "data": {
   "shadows": "evalml.utils.SEED_BOUNDS"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_catboost_regressor.importorskip": {
  "data": {
   "shadows": "pytest.importorskip"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_catboost_regressor.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_catboost_regressor.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_catboost_regressor.test_catboost_regressor_random_state_bounds_rng": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "evalml.pipelines.components.CatBoostRegressor",
    "evalml.pipelines.components.CatBoostRegressor.SEED_MAX",
    "evalml.pipelines.components.CatBoostRegressor.SEED_MIN",
    "len",
    "make_mock_random_state",
    "pandas.DataFrame",
    "pandas.Series",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_regressor.test_catboost_regressor_random_state_bounds_rng.make_mock_random_state": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "MockRandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_regressor.test_catboost_regressor_random_state_bounds_rng.make_mock_random_state.MockRandomState": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_catboost_regressor.test_catboost_regressor_random_state_bounds_rng.make_mock_random_state.MockRandomState.randint": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_regressor.test_catboost_regressor_random_state_bounds_seed": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.pipelines.components.CatBoostRegressor",
    "evalml.utils.SEED_BOUNDS.max_bound",
    "evalml.utils.SEED_BOUNDS.min_bound",
    "len",
    "pandas.DataFrame",
    "pandas.Series",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.DropColumns": {
  "data": {
   "shadows": "evalml.pipelines.components.DropColumns"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.SelectColumns": {
  "data": {
   "shadows": "evalml.pipelines.components.SelectColumns"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_empty_X": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "ValueError",
    "class_to_test",
    "evalml.pipelines.components.DropColumns",
    "evalml.pipelines.components.SelectColumns",
    "evalml.tests.component_tests.test_column_selector_transformers.pytest",
    "list",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_fit_transform": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "check1",
    "check2",
    "check3",
    "class_to_test",
    "evalml.pipelines.components.DropColumns",
    "evalml.pipelines.components.SelectColumns",
    "evalml.tests.component_tests.test_column_selector_transformers.pytest",
    "list",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_init": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ValueError",
    "class_to_test",
    "evalml.pipelines.components.DropColumns",
    "evalml.pipelines.components.SelectColumns",
    "evalml.tests.component_tests.test_column_selector_transformers.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_int_col_names": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "class_to_test",
    "evalml.pipelines.components.DropColumns",
    "evalml.pipelines.components.SelectColumns",
    "evalml.tests.component_tests.test_column_selector_transformers.pytest",
    "numpy.arange",
    "numpy.array",
    "numpy.testing.assert_allclose"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_numpy": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "class_to_test",
    "evalml.pipelines.components.DropColumns",
    "evalml.pipelines.components.SelectColumns",
    "evalml.tests.component_tests.test_column_selector_transformers.pytest",
    "numpy.arange",
    "numpy.array",
    "numpy.testing.assert_allclose"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_transform": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "check1",
    "check2",
    "check3",
    "check4",
    "class_to_test",
    "evalml.pipelines.components.DropColumns",
    "evalml.pipelines.components.SelectColumns",
    "evalml.tests.component_tests.test_column_selector_transformers.pytest",
    "list",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_drop_column_transformer_input_invalid_col_name": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "ValueError",
    "class_to_test",
    "evalml.pipelines.components.DropColumns",
    "evalml.pipelines.components.SelectColumns",
    "evalml.tests.component_tests.test_column_selector_transformers.pytest",
    "numpy.arange",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_components.ComponentBase": {
  "data": {
   "shadows": "evalml.pipelines.components.ComponentBase"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.ComponentBaseMeta": {
  "data": {
   "shadows": "evalml.pipelines.components.ComponentBaseMeta"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.ComponentNotYetFittedError": {
  "data": {
   "shadows": "evalml.exceptions.ComponentNotYetFittedError"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.DropColumns": {
  "data": {
   "shadows": "evalml.pipelines.components.DropColumns"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.ElasticNetClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.ElasticNetClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.ElasticNetRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.ElasticNetRegressor"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.Estimator"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.ExtraTreesClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.ExtraTreesClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.ExtraTreesRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.ExtraTreesRegressor"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.LinearRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.LinearRegressor"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.LogisticRegressionClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.LogisticRegressionClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.MethodPropertyNotFoundError": {
  "data": {
   "shadows": "evalml.exceptions.MethodPropertyNotFoundError"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.MockFitComponent": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.NONE",
    "evalml.pipelines.components.ComponentBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.MockFitComponent.__init__": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.MockFitComponent.fit": {
  "data": {
   "lineno": 74
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.MockFitComponent.predict": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.OneHotEncoder": {
  "data": {
   "shadows": "evalml.pipelines.components.OneHotEncoder"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.PerColumnImputer": {
  "data": {
   "shadows": "evalml.pipelines.components.PerColumnImputer"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.RFClassifierSelectFromModel": {
  "data": {
   "shadows": "evalml.pipelines.components.RFClassifierSelectFromModel"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.RandomForestClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.RandomForestClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.RandomForestRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.RandomForestRegressor"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.SelectColumns": {
  "data": {
   "shadows": "evalml.pipelines.components.SelectColumns"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.SimpleImputer": {
  "data": {
   "shadows": "evalml.pipelines.components.SimpleImputer"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.StandardScaler": {
  "data": {
   "shadows": "evalml.pipelines.components.StandardScaler"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.Transformer"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.XGBoostClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.XGBoostClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components._all_estimators": {
  "data": {
   "shadows": "evalml.pipelines.components.utils._all_estimators"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components._all_estimators_used_in_search": {
  "data": {
   "shadows": "evalml.pipelines.components.utils._all_estimators_used_in_search"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components._all_transformers": {
  "data": {
   "shadows": "evalml.pipelines.components.utils._all_transformers"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.all_components": {
  "data": {
   "shadows": "evalml.pipelines.components.utils.all_components"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.cloudpickle": {
  "data": {
   "shadows": "cloudpickle"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_components.test_all_estimators_check_fit": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": [
    "component_class",
    "component_class.__name__",
    "evalml.exceptions.ComponentNotYetFittedError",
    "evalml.pipelines.components.ComponentBaseMeta.NO_FITTING_REQUIRED",
    "evalml.pipelines.components.utils._all_estimators",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.tests.component_tests.test_components.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_all_transformers_check_fit": {
  "data": {
   "lineno": 648,
   "symbols_in_volume": [
    "component_class",
    "component_class.__name__",
    "evalml.exceptions.ComponentNotYetFittedError",
    "evalml.pipelines.components.ComponentBaseMeta.NO_FITTING_REQUIRED",
    "evalml.pipelines.components.utils._all_transformers",
    "evalml.tests.component_tests.test_components.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_classes": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "evalml.tests.component_tests.test_components.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_classes.MockComponent": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.NONE",
    "evalml.pipelines.components.ComponentBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_classes.MockEstimator": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.Estimator"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_classes.MockTransformer": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "evalml.pipelines.components.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_clone_fitted": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "evalml.exceptions.ComponentNotYetFittedError",
    "evalml.tests.component_tests.test_components.MockFitComponent",
    "evalml.tests.component_tests.test_components.pytest",
    "numpy.testing.assert_almost_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_clone_init": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "evalml.tests.component_tests.test_components.MockFitComponent"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_clone_random_state": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "evalml.tests.component_tests.test_components.MockFitComponent",
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_describe": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "MockComponent",
    "evalml.tests.component_tests.test_components.test_classes"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "MockComponent",
    "evalml.pipelines.components.ComponentBase",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit.MockComponent": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.Estimator"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit.MockComponent.__init__": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "MockEstimator",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit.MockEstimator": {
  "data": {
   "lineno": 201
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit.MockEstimator.fit": {
  "data": {
   "lineno": 202
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "MockTransformerWithFitAndTransform",
    "MockTransformerWithFitTransform",
    "MockTransformerWithFitTransformButError",
    "MockTransformerWithOnlyFit",
    "RuntimeError",
    "evalml.exceptions.MethodPropertyNotFoundError",
    "evalml.tests.component_tests.test_components.pytest",
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitAndTransform": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "evalml.pipelines.components.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitAndTransform.__init__": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitAndTransform.fit": {
  "data": {
   "lineno": 255
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitAndTransform.transform": {
  "data": {
   "lineno": 258
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransform": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "evalml.pipelines.components.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransform.__init__": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransform.fit_transform": {
  "data": {
   "lineno": 229
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransformButError": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "evalml.pipelines.components.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransformButError.__init__": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransformButError.fit_transform": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "RuntimeError"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithOnlyFit": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "evalml.pipelines.components.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithOnlyFit.__init__": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithOnlyFit.fit": {
  "data": {
   "lineno": 271
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_has_random_state": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "component_class",
    "component_class.__init__",
    "evalml.pipelines.components.utils.all_components",
    "evalml.tests.component_tests.test_components.inspect"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_parameters_getter": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "MockComponent",
    "evalml.tests.component_tests.test_components.test_classes"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_parameters_init": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "component_class",
    "evalml.pipelines.components.utils.all_components",
    "print"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_components_init_kwargs": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "component_class",
    "evalml.pipelines.components.utils.all_components",
    "evalml.tests.component_tests.test_components.importlib",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_components_init_kwargs.all_init": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": [
    "setattr"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_default_parameters": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": [
    "cls",
    "cls.__name__",
    "evalml.pipelines.components.utils.all_components",
    "evalml.tests.component_tests.test_components.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_describe": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "MockComponent",
    "MockEstimator",
    "MockTransformer",
    "evalml.tests.component_tests.test_components.test_classes"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_describe_component": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "ImportError",
    "evalml.pipelines.components.DropColumns",
    "evalml.pipelines.components.ElasticNetClassifier",
    "evalml.pipelines.components.ElasticNetRegressor",
    "evalml.pipelines.components.ExtraTreesClassifier",
    "evalml.pipelines.components.ExtraTreesRegressor",
    "evalml.pipelines.components.LinearRegressor",
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.pipelines.components.PerColumnImputer",
    "evalml.pipelines.components.RFClassifierSelectFromModel",
    "evalml.pipelines.components.RandomForestClassifier",
    "evalml.pipelines.components.RandomForestRegressor",
    "evalml.pipelines.components.SimpleImputer",
    "evalml.pipelines.components.StandardScaler",
    "evalml.pipelines.components.XGBoostClassifier",
    "numpy.inf"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "MockEstimator",
    "evalml.exceptions.ComponentNotYetFittedError",
    "evalml.tests.component_tests.test_components.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimator": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.Estimator"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimator.__init__": {
  "data": {
   "lineno": 524,
   "symbols_in_volume": [
    "MockEstimatorObj",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimatorObj": {
  "data": {
   "lineno": 506
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimatorObj.__init__": {
  "data": {
   "lineno": 507
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimatorObj.fit": {
  "data": {
   "lineno": 510
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimatorObj.predict": {
  "data": {
   "lineno": 513
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimatorObj.predict_proba": {
  "data": {
   "lineno": 516
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": [
    "MockEstimatorWithOverrides",
    "MockEstimatorWithOverridesSubclass",
    "evalml.exceptions.ComponentNotYetFittedError",
    "evalml.tests.component_tests.test_components.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverrides": {
  "data": {
   "lineno": 541,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.Estimator"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverrides.fit": {
  "data": {
   "lineno": 546
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverrides.predict": {
  "data": {
   "lineno": 549
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverrides.predict_proba": {
  "data": {
   "lineno": 552
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverridesSubclass": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.Estimator"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverridesSubclass.fit": {
  "data": {
   "lineno": 560
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverridesSubclass.predict": {
  "data": {
   "lineno": 563
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverridesSubclass.predict_proba": {
  "data": {
   "lineno": 566
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_predict_output_type": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": [
    "component_class",
    "component_class.name",
    "component_class.supported_problem_types",
    "evalml.pipelines.components.utils._all_estimators_used_in_search",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "isinstance",
    "len",
    "list",
    "numpy.ndarray",
    "numpy.unique",
    "pandas.DataFrame",
    "pandas.RangeIndex",
    "pandas.Series",
    "print",
    "range",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_init": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "MockComponent",
    "MockEstimator",
    "MockTransformer",
    "evalml.tests.component_tests.test_components.test_classes"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_missing_attributes": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "MockComponentModelFamily",
    "MockComponentName",
    "MockEstimatorWithoutAttribute",
    "TypeError",
    "evalml.tests.component_tests.test_components.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_missing_attributes.MockComponentModelFamily": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "evalml.pipelines.components.ComponentBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_missing_attributes.MockComponentName": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.NONE",
    "evalml.pipelines.components.ComponentBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_missing_attributes.MockEstimatorWithoutAttribute": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.Estimator"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_missing_methods_on_components": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "MockComponent",
    "MockEstimator",
    "MockTransformer",
    "MockTransformerWithFit",
    "evalml.exceptions.MethodPropertyNotFoundError",
    "evalml.tests.component_tests.test_components.pytest",
    "evalml.tests.component_tests.test_components.test_classes"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_missing_methods_on_components.MockTransformerWithFit": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "evalml.pipelines.components.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_missing_methods_on_components.MockTransformerWithFit.fit": {
  "data": {
   "lineno": 169
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_model_family_components": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "MockComponent",
    "MockComponent.model_family",
    "MockEstimator",
    "MockEstimator.model_family",
    "MockTransformer",
    "MockTransformer.model_family",
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.model_family.ModelFamily.NONE",
    "evalml.tests.component_tests.test_components.test_classes"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_no_fitting_required_components": {
  "data": {
   "lineno": 692,
   "symbols_in_volume": [
    "component_class",
    "component_class.__name__",
    "evalml.pipelines.components.ComponentBaseMeta.NO_FITTING_REQUIRED",
    "evalml.pipelines.components.Estimator",
    "evalml.pipelines.components.utils.all_components",
    "issubclass"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_regressor_call_predict_proba": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "MockEstimator",
    "evalml.exceptions.MethodPropertyNotFoundError",
    "evalml.tests.component_tests.test_components.pytest",
    "evalml.tests.component_tests.test_components.test_classes",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_serialization": {
  "data": {
   "lineno": 703,
   "symbols_in_volume": [
    "component_class",
    "component_class.name",
    "evalml.pipelines.components.ComponentBase.load",
    "evalml.pipelines.components.Estimator",
    "evalml.pipelines.components.utils.all_components",
    "evalml.tests.component_tests.test_components.cloudpickle",
    "evalml.tests.component_tests.test_components.os",
    "issubclass",
    "print",
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_serialization_protocol": {
  "data": {
   "lineno": 722,
   "symbols_in_volume": [
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.tests.component_tests.test_components.cloudpickle",
    "evalml.tests.component_tests.test_components.os",
    "len",
    "str",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit": {
  "data": {
   "lineno": 587,
   "symbols_in_volume": [
    "MockTransformer",
    "evalml.exceptions.ComponentNotYetFittedError",
    "evalml.tests.component_tests.test_components.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformer": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": [
    "evalml.pipelines.components.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformer.__init__": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": [
    "MockTransformerObj",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformerObj": {
  "data": {
   "lineno": 588
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformerObj.__init__": {
  "data": {
   "lineno": 589
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformerObj.fit": {
  "data": {
   "lineno": 592
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformerObj.transform": {
  "data": {
   "lineno": 595
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": [
    "MockTransformerWithOverride",
    "MockTransformerWithOverrideSubclass",
    "evalml.exceptions.ComponentNotYetFittedError",
    "evalml.tests.component_tests.test_components.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverride": {
  "data": {
   "lineno": 615,
   "symbols_in_volume": [
    "evalml.pipelines.components.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverride.fit": {
  "data": {
   "lineno": 618
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverride.transform": {
  "data": {
   "lineno": 621
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverrideSubclass": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": [
    "evalml.pipelines.components.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverrideSubclass.fit": {
  "data": {
   "lineno": 627
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverrideSubclass.transform": {
  "data": {
   "lineno": 630
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_transform_output_type": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": [
    "component_class",
    "component_class.name",
    "evalml.pipelines.components.SelectColumns",
    "evalml.pipelines.components.utils._all_transformers",
    "isinstance",
    "list",
    "numpy.ndarray",
    "pandas.DataFrame",
    "pandas.Index",
    "pandas.RangeIndex",
    "pandas.Series",
    "print",
    "range",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.DateTimeFeaturizer": {
  "data": {
   "shadows": "evalml.pipelines.components.DateTimeFeaturizer"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_custom_features_to_extract": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "evalml.pipelines.components.DateTimeFeaturizer",
    "len",
    "list",
    "pandas.DataFrame",
    "pandas.date_range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_fit_transform": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "evalml.pipelines.components.DateTimeFeaturizer",
    "list",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.date_range",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_init": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.DateTimeFeaturizer",
    "evalml.tests.component_tests.test_datetime_featurizer.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_no_col_names": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "evalml.pipelines.components.DateTimeFeaturizer",
    "list",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.date_range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_no_datetime_cols": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "evalml.pipelines.components.DateTimeFeaturizer",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_no_features_to_extract": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "evalml.pipelines.components.DateTimeFeaturizer",
    "len",
    "pandas.DataFrame",
    "pandas.date_range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_numpy_array_input": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "evalml.pipelines.components.DateTimeFeaturizer",
    "list",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_transform": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "evalml.pipelines.components.DateTimeFeaturizer",
    "list",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.date_range",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.DropNullColumns": {
  "data": {
   "shadows": "evalml.pipelines.components.DropNullColumns"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_fit_transform": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "evalml.pipelines.components.DropNullColumns",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_init": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.DropNullColumns",
    "evalml.tests.component_tests.test_drop_null_columns_transformer.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_np_array": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "evalml.pipelines.components.DropNullColumns",
    "numpy.array",
    "numpy.delete",
    "numpy.nan",
    "numpy.testing.assert_allclose",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_transform_boundary_pct_null_threshold": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "evalml.pipelines.components.DropNullColumns",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_transform_custom_pct_null_threshold": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "evalml.pipelines.components.DropNullColumns",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_transform_default_pct_null_threshold": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "evalml.pipelines.components.DropNullColumns",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_en_classifier.ElasticNetClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_en_classifier.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_en_classifier.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_en_classifier.SKElasticNetClassifier": {
  "data": {
   "shadows": "sklearn.linear_model.SGDClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_en_classifier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_en_classifier.test_en_parameters": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_feature_importance": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier",
    "numpy.testing.assert_almost_equal",
    "sklearn.linear_model.SGDClassifier"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_feature_importance_multi": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier",
    "numpy.linalg.norm",
    "numpy.testing.assert_almost_equal",
    "sklearn.linear_model.SGDClassifier"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_fit_predict_binary": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier",
    "numpy.testing.assert_almost_equal",
    "sklearn.linear_model.SGDClassifier"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_fit_predict_multi": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier",
    "numpy.testing.assert_almost_equal",
    "sklearn.linear_model.SGDClassifier"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_model_family": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier.model_family"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_problem_types": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier.supported_problem_types",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_regressor": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_en_regressor.ElasticNetRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_en_regressor.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_en_regressor.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_en_regressor.SKElasticNetRegressor": {
  "data": {
   "shadows": "sklearn.linear_model.ElasticNet"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_en_regressor.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_en_regressor.test_en_parameters": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_regressor.test_feature_importance": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor",
    "numpy.testing.assert_almost_equal",
    "sklearn.linear_model.ElasticNet"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_regressor.test_fit_predict": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor",
    "numpy.testing.assert_almost_equal",
    "sklearn.linear_model.ElasticNet"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_regressor.test_model_family": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor.model_family"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_regressor.test_problem_types": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor.supported_problem_types",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_estimators": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_estimators.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_estimators._all_estimators_used_in_search": {
  "data": {
   "shadows": "evalml.pipelines.components.utils._all_estimators_used_in_search"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_estimators.handle_problem_types": {
  "data": {
   "shadows": "evalml.problem_types.handle_problem_types"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_estimators.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_estimators.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_estimators.string": {
  "data": {
   "shadows": "string"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_estimators.test_binary_classification_estimators_predict_proba_col_order": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "estimator_class",
    "estimator_class.supported_problem_types",
    "evalml.pipelines.components.utils._all_estimators_used_in_search",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.handle_problem_types",
    "numpy.concatenate",
    "numpy.ones",
    "numpy.round",
    "numpy.testing.assert_allclose",
    "numpy.zeros",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_estimators.test_estimators_feature_name_with_random_ascii": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "estimator_class",
    "evalml.pipelines.components.utils._all_estimators_used_in_search",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "evalml.problem_types.handle_problem_types",
    "evalml.tests.component_tests.test_estimators.string",
    "len",
    "numpy.isnan",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_et_classifier.ExtraTreesClassifier": {
  "data": {
   "shadows": "evalml.pipelines.ExtraTreesClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_et_classifier.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_et_classifier.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_et_classifier.SKExtraTreesClassifier": {
  "data": {
   "shadows": "sklearn.ensemble.ExtraTreesClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_et_classifier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_et_classifier.test_et_parameters": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "evalml.pipelines.ExtraTreesClassifier"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier.test_feature_importance": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "evalml.pipelines.ExtraTreesClassifier",
    "numpy.testing.assert_almost_equal",
    "sklearn.ensemble.ExtraTreesClassifier"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier.test_fit_predict_binary": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "evalml.pipelines.ExtraTreesClassifier",
    "numpy.testing.assert_almost_equal",
    "sklearn.ensemble.ExtraTreesClassifier"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier.test_fit_predict_multi": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "evalml.pipelines.ExtraTreesClassifier",
    "numpy.testing.assert_almost_equal",
    "sklearn.ensemble.ExtraTreesClassifier"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier.test_model_family": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.EXTRA_TREES",
    "evalml.pipelines.ExtraTreesClassifier.model_family"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier.test_problem_types": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "evalml.pipelines.ExtraTreesClassifier.supported_problem_types",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_regressor": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_et_regressor.ExtraTreesRegressor": {
  "data": {
   "shadows": "evalml.pipelines.ExtraTreesRegressor"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_et_regressor.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_et_regressor.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_et_regressor.SKExtraTreesRegressor": {
  "data": {
   "shadows": "sklearn.ensemble.ExtraTreesRegressor"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_et_regressor.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_et_regressor.test_et_parameters": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "evalml.pipelines.ExtraTreesRegressor"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_regressor.test_feature_importance": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "evalml.pipelines.ExtraTreesRegressor",
    "numpy.testing.assert_almost_equal",
    "sklearn.ensemble.ExtraTreesRegressor"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_regressor.test_fit_predict": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "evalml.pipelines.ExtraTreesRegressor",
    "numpy.testing.assert_almost_equal",
    "sklearn.ensemble.ExtraTreesRegressor"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_regressor.test_model_family": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.EXTRA_TREES",
    "evalml.pipelines.ExtraTreesRegressor.model_family"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_regressor.test_problem_types": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "evalml.pipelines.ExtraTreesRegressor.supported_problem_types",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_feature_selectors": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_feature_selectors.ComponentBase": {
  "data": {
   "shadows": "evalml.pipelines.components.ComponentBase"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_feature_selectors.FeatureSelector": {
  "data": {
   "shadows": "evalml.pipelines.components.FeatureSelector"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_feature_selectors.RFClassifierSelectFromModel": {
  "data": {
   "shadows": "evalml.pipelines.components.RFClassifierSelectFromModel"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_feature_selectors.RFRegressorSelectFromModel": {
  "data": {
   "shadows": "evalml.pipelines.components.RFRegressorSelectFromModel"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_feature_selectors.make_rf_feature_selectors": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "evalml.pipelines.components.RFClassifierSelectFromModel",
    "evalml.pipelines.components.RFRegressorSelectFromModel"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_feature_selectors.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_feature_selectors.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_feature_selectors.test_component_fit": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "evalml.pipelines.components.ComponentBase",
    "evalml.tests.component_tests.test_feature_selectors.make_rf_feature_selectors",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_feature_selectors.test_feature_selector_missing_component_obj": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "MockFeatureSelector",
    "RuntimeError",
    "evalml.tests.component_tests.test_feature_selectors.pytest",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_feature_selectors.test_feature_selector_missing_component_obj.MockFeatureSelector": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "evalml.pipelines.components.FeatureSelector"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_feature_selectors.test_feature_selector_missing_component_obj.MockFeatureSelector.fit": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_feature_selectors.test_init": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "evalml.tests.component_tests.test_feature_selectors.make_rf_feature_selectors"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_imputer.Imputer": {
  "data": {
   "shadows": "evalml.pipelines.components.Imputer"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_imputer.assert_frame_equal": {
  "data": {
   "shadows": "pandas.testing.assert_frame_equal"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_imputer.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_imputer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_imputer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_imputer.test_categorical_and_numeric_input": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "evalml.pipelines.components.Imputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_categorical_only_input": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "evalml.pipelines.components.Imputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_drop_all_columns": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "evalml.pipelines.components.Imputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_datetime_input": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "evalml.pipelines.components.Imputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.testing.assert_frame_equal",
    "pandas.to_datetime"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_default_parameters": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "evalml.pipelines.components.Imputer"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_empty_data": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "evalml.pipelines.components.Imputer",
    "evalml.tests.component_tests.test_imputer.pytest",
    "numpy.array",
    "pandas.DataFrame",
    "pandas.Index",
    "pandas.Int64Index",
    "pandas.Series",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_init": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "evalml.pipelines.components.Imputer"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_resets_index": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "evalml.pipelines.components.Imputer",
    "float",
    "list",
    "numpy.arange",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_invalid_strategy_parameters": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.Imputer",
    "evalml.tests.component_tests.test_imputer.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_numeric_only_input": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "evalml.pipelines.components.Imputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_typed_imputer_numpy_input": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "evalml.pipelines.components.Imputer",
    "numpy.array",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.OneHotEncoder": {
  "data": {
   "shadows": "evalml.pipelines.components.OneHotEncoder"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.get_random_state": {
  "data": {
   "shadows": "evalml.utils.get_random_state"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_all_numerical_dtype": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "evalml.pipelines.components.OneHotEncoder",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_categorical_dtype": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "evalml.pipelines.components.OneHotEncoder",
    "pandas.DataFrame",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_categories": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.tests.component_tests.test_one_hot_encoder.pytest",
    "pandas.DataFrame",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_data_types": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.tests.component_tests.test_one_hot_encoder.pytest",
    "list",
    "numpy.array",
    "numpy.identity",
    "numpy.testing.assert_array_equal",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_drop": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "evalml.pipelines.components.OneHotEncoder",
    "pandas.DataFrame",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_handle_unknown": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.tests.component_tests.test_one_hot_encoder.pytest",
    "isinstance",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_init": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.pipelines.components.OneHotEncoder"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_invalid_inputs": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.tests.component_tests.test_one_hot_encoder.pytest",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_large_number_of_categories": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "evalml.pipelines.components.OneHotEncoder",
    "list",
    "numpy.arange",
    "numpy.array",
    "numpy.concatenate",
    "numpy.repeat",
    "pandas.DataFrame",
    "range",
    "set",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_less_than_top_n_unique_values": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "evalml.pipelines.components.OneHotEncoder",
    "pandas.DataFrame",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_more_top_n_unique_values": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.utils.get_random_state",
    "pandas.DataFrame",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_more_top_n_unique_values_large": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.utils.get_random_state",
    "pandas.DataFrame",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_no_top_n": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.tests.component_tests.test_one_hot_encoder.pytest",
    "pandas.DataFrame",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_null_values_in_dataframe": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.tests.component_tests.test_one_hot_encoder.pytest",
    "numpy.nan",
    "pandas.DataFrame",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_numpy_input": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "evalml.pipelines.components.OneHotEncoder",
    "numpy.array",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_parameters": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "evalml.pipelines.components.OneHotEncoder"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_per_column_imputer.PerColumnImputer": {
  "data": {
   "shadows": "evalml.pipelines.components.PerColumnImputer"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_per_column_imputer.assert_frame_equal": {
  "data": {
   "shadows": "pandas.testing.assert_frame_equal"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_per_column_imputer.non_numeric_df": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.tests.component_tests.test_per_column_imputer.pytest",
    "numpy.nan",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_per_column_imputer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_per_column_imputer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_all_strategies": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "evalml.pipelines.components.PerColumnImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_fit_transform": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "evalml.pipelines.components.PerColumnImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_fit_transform_drop_all_nan_columns": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "evalml.pipelines.components.PerColumnImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_invalid_parameters": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.PerColumnImputer",
    "evalml.tests.component_tests.test_per_column_imputer.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_non_numeric_errors": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.PerColumnImputer",
    "evalml.tests.component_tests.test_per_column_imputer.non_numeric_df",
    "evalml.tests.component_tests.test_per_column_imputer.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_non_numeric_valid": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "evalml.pipelines.components.PerColumnImputer",
    "evalml.tests.component_tests.test_per_column_imputer.non_numeric_df",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_transform_drop_all_nan_columns": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "evalml.pipelines.components.PerColumnImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_transform_drop_all_nan_columns_empty": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "evalml.pipelines.components.PerColumnImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_simple_imputer.SimpleImputer": {
  "data": {
   "shadows": "evalml.pipelines.components.SimpleImputer"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_simple_imputer.assert_frame_equal": {
  "data": {
   "shadows": "pandas.testing.assert_frame_equal"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_simple_imputer.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_simple_imputer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_simple_imputer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_col_with_non_numeric": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.SimpleImputer",
    "evalml.tests.component_tests.test_simple_imputer.pytest",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_constant": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "evalml.pipelines.components.SimpleImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_fit_transform_drop_all_nan_columns": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "evalml.pipelines.components.SimpleImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_mean": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "evalml.pipelines.components.SimpleImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_median": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.pipelines.components.SimpleImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_most_frequent": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "evalml.pipelines.components.SimpleImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_numpy_input": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "evalml.pipelines.components.SimpleImputer",
    "numpy.allclose",
    "numpy.array",
    "numpy.nan",
    "numpy.testing.assert_almost_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_transform_drop_all_nan_columns": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "evalml.pipelines.components.SimpleImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_transform_drop_all_nan_columns_empty": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "evalml.pipelines.components.SimpleImputer",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer": {
  "data": {
   "symbols_in_volume": [
    "evalml.tests.component_tests.test_text_featurizer.pytest"
   ]
  },
  "type": "module"
 },
 "evalml.tests.component_tests.test_text_featurizer.TextFeaturizer": {
  "data": {
   "shadows": "evalml.pipelines.components.TextFeaturizer"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_text_featurizer.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_text_featurizer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_text_featurizer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_all_missing_col_names": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "RuntimeError",
    "evalml.pipelines.components.TextFeaturizer",
    "evalml.tests.component_tests.test_text_featurizer.pytest",
    "evalml.tests.component_tests.test_text_featurizer.text_df"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_diversity_primitive_output": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "evalml.pipelines.components.TextFeaturizer",
    "numpy.testing.assert_almost_equal",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_featurizer_no_text": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "RuntimeWarning",
    "evalml.pipelines.components.TextFeaturizer",
    "evalml.tests.component_tests.test_text_featurizer.pytest",
    "len",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_featurizer_only_text": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "evalml.pipelines.components.TextFeaturizer",
    "evalml.tests.component_tests.test_text_featurizer.text_df",
    "len",
    "numpy.float64",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_featurizer_with_nontext": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "evalml.pipelines.components.TextFeaturizer",
    "evalml.tests.component_tests.test_text_featurizer.text_df",
    "len",
    "numpy.float64",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_index_col_names": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "evalml.pipelines.components.TextFeaturizer",
    "len",
    "numpy.array",
    "numpy.float64",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_invalid_text_column": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.TextFeaturizer",
    "evalml.tests.component_tests.test_text_featurizer.pytest",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_lsa_primitive_output": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "evalml.pipelines.components.TextFeaturizer",
    "numpy.testing.assert_almost_equal",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_mean_characters_primitive_output": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "evalml.pipelines.components.TextFeaturizer",
    "numpy.testing.assert_almost_equal",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_part_of_speech_primitive_output": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "evalml.pipelines.components.TextFeaturizer",
    "numpy.testing.assert_almost_equal",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_polarity_primitive_output": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "evalml.pipelines.components.TextFeaturizer",
    "numpy.testing.assert_almost_equal",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_some_missing_col_names": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "RuntimeWarning",
    "evalml.pipelines.components.TextFeaturizer",
    "evalml.tests.component_tests.test_text_featurizer.pytest",
    "evalml.tests.component_tests.test_text_featurizer.text_df",
    "len",
    "numpy.float64",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.text_df": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.tests.component_tests.test_text_featurizer.pytest",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_utils": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.component_tests.test_utils.ComponentBase": {
  "data": {
   "shadows": "evalml.pipelines.components.ComponentBase"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_utils.MissingComponentError": {
  "data": {
   "shadows": "evalml.exceptions.MissingComponentError"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_utils.all_components": {
  "data": {
   "shadows": "evalml.pipelines.components.utils.all_components"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_utils.handle_component_class": {
  "data": {
   "shadows": "evalml.pipelines.components.utils.handle_component_class"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_utils.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_utils.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_utils.test_all_components": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "evalml.pipelines.components.utils.all_components",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_utils.test_handle_component_class_names": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "NonComponent",
    "ValueError",
    "cls",
    "evalml.exceptions.MissingComponentError",
    "evalml.pipelines.components.ComponentBase",
    "evalml.pipelines.components.utils.all_components",
    "evalml.pipelines.components.utils.handle_component_class",
    "evalml.tests.component_tests.test_utils.inspect",
    "evalml.tests.component_tests.test_utils.pytest",
    "issubclass"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_utils.test_handle_component_class_names.NonComponent": {
  "data": {
   "lineno": 38
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_xgboost_classifier": {
  "data": {
   "symbols_in_volume": [
    "pytest.importorskip"
   ]
  },
  "type": "module"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.SEED_BOUNDS": {
  "data": {
   "shadows": "evalml.utils.SEED_BOUNDS"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.XGBoostClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.XGBoostClassifier"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.importorskip": {
  "data": {
   "shadows": "pytest.importorskip"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.test_xgboost_classifier_random_state_bounds_rng": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "evalml.pipelines.components.XGBoostClassifier",
    "evalml.pipelines.components.XGBoostClassifier.SEED_MAX",
    "evalml.pipelines.components.XGBoostClassifier.SEED_MIN",
    "len",
    "make_mock_random_state",
    "pandas.DataFrame",
    "pandas.Series",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.test_xgboost_classifier_random_state_bounds_rng.make_mock_random_state": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "MockRandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.test_xgboost_classifier_random_state_bounds_rng.make_mock_random_state.MockRandomState": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.test_xgboost_classifier_random_state_bounds_rng.make_mock_random_state.MockRandomState.randint": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.test_xgboost_classifier_random_state_bounds_seed": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.pipelines.components.XGBoostClassifier",
    "evalml.utils.SEED_BOUNDS.max_bound",
    "evalml.utils.SEED_BOUNDS.min_bound",
    "len",
    "pandas.DataFrame",
    "pandas.Series",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.xgb": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "evalml.tests.component_tests.test_xgboost_regressor": {
  "data": {
   "symbols_in_volume": [
    "pytest.importorskip"
   ]
  },
  "type": "module"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.SEED_BOUNDS": {
  "data": {
   "shadows": "evalml.utils.SEED_BOUNDS"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.XGBoostRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.XGBoostRegressor"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.importorskip": {
  "data": {
   "shadows": "pytest.importorskip"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.test_xgboost_regressor_random_state_bounds_rng": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "evalml.pipelines.components.XGBoostRegressor",
    "evalml.pipelines.components.XGBoostRegressor.SEED_MAX",
    "evalml.pipelines.components.XGBoostRegressor.SEED_MIN",
    "len",
    "make_mock_random_state",
    "pandas.DataFrame",
    "pandas.Series",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.test_xgboost_regressor_random_state_bounds_rng.make_mock_random_state": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "MockRandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.test_xgboost_regressor_random_state_bounds_rng.make_mock_random_state.MockRandomState": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "class"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.test_xgboost_regressor_random_state_bounds_rng.make_mock_random_state.MockRandomState.randint": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.test_xgboost_regressor_random_state_bounds_seed": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.pipelines.components.XGBoostRegressor",
    "evalml.utils.SEED_BOUNDS.max_bound",
    "evalml.utils.SEED_BOUNDS.min_bound",
    "len",
    "pandas.DataFrame",
    "pandas.Series",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.xgb": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "evalml.tests.conftest": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.conftest.BinaryClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.BinaryClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.tests.conftest.Estimator": {
  "data": {
   "shadows": "evalml.pipelines.components.Estimator"
  },
  "type": "import"
 },
 "evalml.tests.conftest.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.tests.conftest.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.conftest.MulticlassClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.MulticlassClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.tests.conftest.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.conftest.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.tests.conftest.RegressionPipeline": {
  "data": {
   "shadows": "evalml.pipelines.RegressionPipeline"
  },
  "type": "import"
 },
 "evalml.tests.conftest.X_y_binary": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest",
    "sklearn.datasets.make_classification"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.X_y_categorical_classification": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "evalml.tests.conftest.os",
    "evalml.tests.conftest.pytest",
    "pandas.read_csv"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.X_y_categorical_regression": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "evalml.tests.conftest.os",
    "evalml.tests.conftest.pytest",
    "pandas.read_csv"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.X_y_multi": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest",
    "sklearn.datasets.make_classification"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.X_y_regression": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest",
    "sklearn.datasets.make_regression"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest._all_estimators": {
  "data": {
   "shadows": "evalml.pipelines.components.utils._all_estimators"
  },
  "type": "import"
 },
 "evalml.tests.conftest.all_binary_pipeline_classes": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.tests.conftest.all_pipeline_classes",
    "evalml.tests.conftest.pytest",
    "issubclass"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.all_multiclass_pipeline_classes": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "evalml.pipelines.MulticlassClassificationPipeline",
    "evalml.tests.conftest.all_pipeline_classes",
    "evalml.tests.conftest.pytest",
    "issubclass"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.all_pipeline_classes": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "evalml.pipelines.components.utils._all_estimators",
    "evalml.tests.conftest.create_mock_pipeline",
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.assert_allowed_pipelines_equal_helper": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.assert_allowed_pipelines_equal_helper.assert_allowed_pipelines_equal_helper": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.pipelines.MulticlassClassificationPipeline",
    "evalml.pipelines.RegressionPipeline",
    "issubclass",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.create_mock_pipeline": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.create_mock_pipeline.MockBinaryPipelineWithOnlyEstimator": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.conftest.create_mock_pipeline.MockMulticlassPipelineWithOnlyEstimator": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "evalml.pipelines.MulticlassClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.conftest.create_mock_pipeline.MockRegressionPipelineWithOnlyEstimator": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "evalml.pipelines.RegressionPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.conftest.datasets": {
  "data": {
   "shadows": "sklearn.datasets"
  },
  "type": "import"
 },
 "evalml.tests.conftest.dummy_binary_pipeline_class": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "evalml.tests.conftest.dummy_classifier_estimator_class",
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.dummy_binary_pipeline_class.MockBinaryClassificationPipeline": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.conftest.dummy_classifier_estimator_class": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.dummy_classifier_estimator_class.MockEstimator": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.NONE",
    "evalml.pipelines.components.Estimator",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS"
   ]
  },
  "type": "class"
 },
 "evalml.tests.conftest.dummy_classifier_estimator_class.MockEstimator.__init__": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.dummy_multiclass_pipeline_class": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "evalml.tests.conftest.dummy_classifier_estimator_class",
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.dummy_multiclass_pipeline_class.MockMulticlassClassificationPipeline": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "evalml.pipelines.MulticlassClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.conftest.dummy_pipeline_hyperparameters": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest",
    "numpy.inf",
    "skopt.space.Integer",
    "skopt.space.Real"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.dummy_pipeline_hyperparameters_small": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.dummy_pipeline_hyperparameters_unicode": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest",
    "numpy.inf",
    "skopt.space.Integer",
    "skopt.space.Real"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.dummy_regression_pipeline_class": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "evalml.tests.conftest.dummy_regressor_estimator_class",
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.dummy_regression_pipeline_class.MockRegressionPipeline": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "evalml.pipelines.RegressionPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.conftest.dummy_regressor_estimator_class": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.dummy_regressor_estimator_class.MockRegressor": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.NONE",
    "evalml.pipelines.components.Estimator",
    "evalml.problem_types.ProblemTypes.REGRESSION"
   ]
  },
  "type": "class"
 },
 "evalml.tests.conftest.dummy_regressor_estimator_class.MockRegressor.__init__": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.has_minimal_dependencies": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.linear_regression_pipeline_class": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.linear_regression_pipeline_class.LinearRegressionPipeline": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "evalml.pipelines.RegressionPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.conftest.logistic_regression_binary_pipeline_class": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.logistic_regression_binary_pipeline_class.LogisticRegressionBinaryPipeline": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.conftest.logistic_regression_multiclass_pipeline_class": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "evalml.tests.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.conftest.logistic_regression_multiclass_pipeline_class.LogisticRegressionMulticlassPipeline": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "evalml.pipelines.MulticlassClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.conftest.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.conftest.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "evalml.tests.conftest.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.conftest.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.conftest.pytest_addoption": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_data_check.DataCheck": {
  "data": {
   "shadows": "evalml.data_checks.data_check.DataCheck"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_check.DataCheckError": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckError"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_check.DataCheckWarning": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckWarning"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_check.mock_data_check_class": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.tests.data_checks_tests.test_data_check.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.mock_data_check_class.MockDataCheck": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "evalml.data_checks.data_check.DataCheck"
   ]
  },
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_check.mock_data_check_class.MockDataCheck.validate": {
  "data": {
   "lineno": 14
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_check.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_name": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "Funky_Name1DataCheck",
    "Funky_Name1DataCheck.name",
    "evalml.tests.data_checks_tests.test_data_check.mock_data_check_class"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_name.Funky_Name1DataCheck": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "evalml.tests.data_checks_tests.test_data_check.mock_data_check_class"
   ]
  },
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_validate_simple": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "MockDataCheck",
    "evalml.data_checks.data_check_message.DataCheckError",
    "evalml.data_checks.data_check_message.DataCheckWarning"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_validate_simple.MockDataCheck": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "evalml.data_checks.data_check.DataCheck"
   ]
  },
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_validate_simple.MockDataCheck.validate": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckError",
    "evalml.data_checks.data_check_message.DataCheckWarning"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_with_param": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "MockDataCheckWithParam",
    "evalml.data_checks.data_check_message.DataCheckError",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_with_param.MockDataCheckWithParam": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "evalml.data_checks.data_check.DataCheck"
   ]
  },
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_with_param.MockDataCheckWithParam.__init__": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_with_param.MockDataCheckWithParam.validate": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckError"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_empty_data_check_validate": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "evalml.tests.data_checks_tests.test_data_check.mock_data_check_class",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.DataCheckError": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckError"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.DataCheckMessage": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckMessage"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.DataCheckMessageType": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message_type.DataCheckMessageType"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.DataCheckWarning": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckWarning"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.data_check_error": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckError",
    "evalml.tests.data_checks_tests.test_data_check_message.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.data_check_message": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckMessage",
    "evalml.tests.data_checks_tests.test_data_check_message.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.data_check_warning": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.tests.data_checks_tests.test_data_check_message.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_error_attributes": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message_type.DataCheckMessageType.ERROR",
    "evalml.tests.data_checks_tests.test_data_check_message.data_check_error"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_error_eq": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckError",
    "evalml.tests.data_checks_tests.test_data_check_message.data_check_error"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_error_str": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "evalml.tests.data_checks_tests.test_data_check_message.data_check_error",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_message_attributes": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "evalml.tests.data_checks_tests.test_data_check_message.data_check_message"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_message_eq": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckMessage",
    "evalml.tests.data_checks_tests.test_data_check_message.data_check_message"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_message_str": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "evalml.tests.data_checks_tests.test_data_check_message.data_check_message",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_warning_attributes": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message_type.DataCheckMessageType.WARNING",
    "evalml.tests.data_checks_tests.test_data_check_message.data_check_warning"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_warning_eq": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.tests.data_checks_tests.test_data_check_message.data_check_warning"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_warning_str": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "evalml.tests.data_checks_tests.test_data_check_message.data_check_warning",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_warning_error_eq": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckError",
    "evalml.data_checks.data_check_message.DataCheckWarning"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks": {
  "data": {
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckError",
    "evalml.data_checks.data_check_message.DataCheckWarning"
   ]
  },
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_data_checks.DataCheck": {
  "data": {
   "shadows": "evalml.data_checks.data_check.DataCheck"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_checks.DataCheckError": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckError"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_checks.DataCheckWarning": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckWarning"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_checks.DataChecks": {
  "data": {
   "shadows": "evalml.data_checks.data_checks.DataChecks"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_checks.DefaultDataChecks": {
  "data": {
   "shadows": "evalml.data_checks.default_data_checks.DefaultDataChecks"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_checks.EmptyDataChecks": {
  "data": {
   "shadows": "evalml.data_checks.utils.EmptyDataChecks"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_checks.messages": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_data_checks.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_checks.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "MockDataCheck",
    "MockDataCheckError",
    "MockDataCheckErrorAndWarning",
    "MockDataCheckWarning",
    "evalml.data_checks.data_check_message.DataCheckError",
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.data_checks.DataChecks"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheck": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "evalml.data_checks.data_check.DataCheck"
   ]
  },
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheck.validate": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckError": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "evalml.data_checks.data_check.DataCheck"
   ]
  },
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckError.validate": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckError"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckErrorAndWarning": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "evalml.data_checks.data_check.DataCheck"
   ]
  },
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckErrorAndWarning.validate": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckError",
    "evalml.data_checks.data_check_message.DataCheckWarning"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckWarning": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "evalml.data_checks.data_check.DataCheck"
   ]
  },
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckWarning.validate": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckWarning"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_default_data_checks_classification": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.default_data_checks.DefaultDataChecks",
    "evalml.tests.data_checks_tests.test_data_checks.messages",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_default_data_checks_regression": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckError",
    "evalml.data_checks.default_data_checks.DefaultDataChecks",
    "evalml.tests.data_checks_tests.test_data_checks.messages",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_empty_data_checks": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "evalml.data_checks.utils.EmptyDataChecks"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check.DataCheckWarning": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckWarning"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check.HighlyNullDataCheck": {
  "data": {
   "shadows": "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check.test_highly_null_data_check_init": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck",
    "evalml.tests.data_checks_tests.test_highly_null_data_check.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check.test_highly_null_data_check_input_formats": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck",
    "numpy.array",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check.test_highly_null_data_check_warnings": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.DataCheckWarning": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckWarning"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.IDColumnsDataCheck": {
  "data": {
   "shadows": "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.test_id_cols_data_check_init": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck",
    "evalml.tests.data_checks_tests.test_id_columns_data_check.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.test_id_cols_data_check_input_formats": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck",
    "numpy.array",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.test_id_columns_strings": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck",
    "pandas.DataFrame.from_dict"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.test_id_columns_warning": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck",
    "pandas.DataFrame.from_dict"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.DataCheckError": {
  "data": {
   "shadows": "evalml.data_checks.DataCheckError"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.InvalidTargetDataCheck": {
  "data": {
   "shadows": "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.numeric_and_boolean_dtypes": {
  "data": {
   "shadows": "evalml.utils.gen_utils.numeric_and_boolean_dtypes"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.test_invalid_target_data_check_invalid_data_types_error": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "evalml.data_checks.DataCheckError",
    "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck",
    "evalml.utils.gen_utils.numeric_and_boolean_dtypes",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.date_range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.test_invalid_target_data_check_nan_error": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.data_checks.DataCheckError",
    "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.test_invalid_target_data_check_numeric_binary_classification_error": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "evalml.data_checks.DataCheckError",
    "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.test_invalid_target_data_check_numeric_binary_classification_valid_float": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.test_invalid_target_data_input_formats": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "evalml.data_checks.DataCheckError",
    "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck",
    "numpy.array",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check.DataCheckWarning": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckWarning"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check.LabelLeakageDataCheck": {
  "data": {
   "shadows": "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check.test_label_leakage_data_check_init": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ValueError",
    "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck",
    "evalml.tests.data_checks_tests.test_label_leakage_data_check.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check.test_label_leakage_data_check_input_formats": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "bool",
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check.test_label_leakage_data_check_warnings": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "bool",
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check": {
  "data": {
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckError",
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck.name",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.NAME",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.all_distinct_X",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.all_distinct_y",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.all_null_X",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.all_null_y",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.all_null_y_with_name",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.feature_0_unique",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.feature_1_unique",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.labels_0_unique",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.labels_1_unique",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.two_distinct_with_nulls_X",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.two_distinct_with_nulls_y",
    "list",
    "numpy.arange",
    "pandas.DataFrame",
    "pandas.Series",
    "range"
   ]
  },
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.DataCheckError": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckError"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.DataCheckWarning": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckWarning"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.NAME": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.NoVarianceDataCheck": {
  "data": {
   "shadows": "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.all_distinct_X": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.all_distinct_y": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.all_null_X": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.all_null_y": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.all_null_y_with_name": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.cases": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.feature_0_unique": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.feature_1_unique": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.labels_0_unique": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.labels_1_unique": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.test_no_variance_data_check_warnings": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.cases",
    "evalml.tests.data_checks_tests.test_no_variance_data_check.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.two_distinct_with_nulls_X": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.two_distinct_with_nulls_y": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check.DataCheckWarning": {
  "data": {
   "shadows": "evalml.data_checks.data_check_message.DataCheckWarning"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check.OutliersDataCheck": {
  "data": {
   "shadows": "evalml.data_checks.outliers_data_check.OutliersDataCheck"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check.get_random_state": {
  "data": {
   "shadows": "evalml.utils.get_random_state"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check.test_outliers_data_check_init": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.data_checks.outliers_data_check.OutliersDataCheck",
    "evalml.utils.get_random_state"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check.test_outliers_data_check_input_formats": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.outliers_data_check.OutliersDataCheck",
    "numpy.arange",
    "numpy.random.randn",
    "numpy.tile",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check.test_outliers_data_check_warnings": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "evalml.data_checks.data_check_message.DataCheckWarning",
    "evalml.data_checks.outliers_data_check.OutliersDataCheck",
    "numpy.arange",
    "numpy.random.randn",
    "numpy.tile",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.demo_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.demo_tests.test_datasets": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.demo_tests.test_datasets.demos": {
  "data": {
   "shadows": "evalml.demos"
  },
  "type": "import"
 },
 "evalml.tests.demo_tests.test_datasets.test_breast_cancer": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "evalml.demos.load_breast_cancer"
   ]
  },
  "type": "function"
 },
 "evalml.tests.demo_tests.test_datasets.test_diabetes": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "evalml.demos.load_diabetes"
   ]
  },
  "type": "function"
 },
 "evalml.tests.demo_tests.test_datasets.test_fraud": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "evalml.demos.load_fraud"
   ]
  },
  "type": "function"
 },
 "evalml.tests.demo_tests.test_datasets.test_wine": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "evalml.demos.load_wine"
   ]
  },
  "type": "function"
 },
 "evalml.tests.model_family_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.model_family_tests.test_model_family": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.model_family_tests.test_model_family.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.model_family_tests.test_model_family.correct_model_families": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.BASELINE",
    "evalml.model_family.ModelFamily.CATBOOST",
    "evalml.model_family.ModelFamily.EXTRA_TREES",
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.model_family.ModelFamily.NONE",
    "evalml.model_family.ModelFamily.RANDOM_FOREST",
    "evalml.model_family.ModelFamily.XGBOOST",
    "evalml.tests.model_family_tests.test_model_family.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.model_family_tests.test_model_family.handle_model_family": {
  "data": {
   "shadows": "evalml.model_family.handle_model_family"
  },
  "type": "import"
 },
 "evalml.tests.model_family_tests.test_model_family.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.model_family_tests.test_model_family.test_handle_incorrect_type": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "ValueError",
    "evalml.model_family.handle_model_family",
    "evalml.tests.model_family_tests.test_model_family.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.model_family_tests.test_model_family.test_handle_model_family": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "evalml.model_family.handle_model_family",
    "evalml.tests.model_family_tests.test_model_family.correct_model_families"
   ]
  },
  "type": "function"
 },
 "evalml.tests.model_family_tests.test_model_family.test_handle_string": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "KeyError",
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.model_family.handle_model_family",
    "evalml.tests.model_family_tests.test_model_family.correct_model_families",
    "evalml.tests.model_family_tests.test_model_family.pytest",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.AUC": {
  "data": {
   "shadows": "evalml.objectives.standard_metrics.AUC"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.F1": {
  "data": {
   "shadows": "evalml.objectives.standard_metrics.F1"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.test_can_optimize_threshold": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "evalml.objectives.standard_metrics.AUC",
    "evalml.objectives.standard_metrics.F1"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.test_decision_function": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "bool",
    "evalml.objectives.standard_metrics.F1",
    "int",
    "numpy.arange",
    "numpy.array",
    "pandas.Series",
    "pandas.testing.assert_series_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.test_decision_function_neg": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "bool",
    "evalml.objectives.standard_metrics.F1",
    "float",
    "numpy.arange",
    "numpy.array",
    "pandas.Series",
    "pandas.testing.assert_series_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.test_optimize_threshold": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "evalml.objectives.standard_metrics.F1",
    "numpy.array",
    "numpy.random.seed"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.test_optimize_threshold_neg": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "RuntimeError",
    "evalml.objectives.standard_metrics.AUC",
    "evalml.tests.objective_tests.test_binary_classification_objective.pytest",
    "numpy.array",
    "numpy.random.seed"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.objective_tests.test_fraud_detection.AutoMLSearch": {
  "data": {
   "shadows": "evalml.AutoMLSearch"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_fraud_detection.FraudCost": {
  "data": {
   "shadows": "evalml.objectives.FraudCost"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_fraud_detection.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_fraud_detection.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_fraud_detection.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_binary_more_than_two_unique_values": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.FraudCost",
    "evalml.tests.objective_tests.test_fraud_detection.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_different_input_lengths": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.FraudCost",
    "evalml.tests.objective_tests.test_fraud_detection.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_fraud_objective": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.objectives.FraudCost"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_fraud_objective_function_amount_col": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.FraudCost",
    "evalml.tests.objective_tests.test_fraud_detection.pytest",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_fraud_objective_score": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "evalml.objectives.FraudCost",
    "isinstance",
    "numpy.array",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_input_contains_inf": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.FraudCost",
    "evalml.tests.objective_tests.test_fraud_detection.pytest",
    "numpy.array",
    "numpy.inf"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_input_contains_nan": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.FraudCost",
    "evalml.tests.objective_tests.test_fraud_detection.pytest",
    "numpy.array",
    "numpy.nan"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_zero_input_lengths": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.FraudCost",
    "evalml.tests.objective_tests.test_fraud_detection.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.objective_tests.test_lead_scoring.AutoMLSearch": {
  "data": {
   "shadows": "evalml.AutoMLSearch"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_lead_scoring.LeadScoring": {
  "data": {
   "shadows": "evalml.objectives.LeadScoring"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_lead_scoring.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_lead_scoring.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_lead_scoring.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_binary_more_than_two_unique_values": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.LeadScoring",
    "evalml.tests.objective_tests.test_lead_scoring.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_different_input_lengths": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.LeadScoring",
    "evalml.tests.objective_tests.test_lead_scoring.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_input_contains_inf": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.LeadScoring",
    "evalml.tests.objective_tests.test_lead_scoring.pytest",
    "numpy.array",
    "numpy.inf"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_input_contains_nan": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.LeadScoring",
    "evalml.tests.objective_tests.test_lead_scoring.pytest",
    "numpy.array",
    "numpy.nan"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_lead_scoring_objective": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.AutoMLSearch",
    "evalml.objectives.LeadScoring",
    "numpy.array",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_zero_input_lengths": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.LeadScoring",
    "evalml.tests.objective_tests.test_lead_scoring.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_objectives": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.objective_tests.test_objectives.BinaryClassificationObjective": {
  "data": {
   "shadows": "evalml.objectives.BinaryClassificationObjective"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.MulticlassClassificationObjective": {
  "data": {
   "shadows": "evalml.objectives.MulticlassClassificationObjective"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.ObjectiveBase": {
  "data": {
   "shadows": "evalml.objectives.objective_base.ObjectiveBase"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.ObjectiveNotFoundError": {
  "data": {
   "shadows": "evalml.exceptions.ObjectiveNotFoundError"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.Precision": {
  "data": {
   "shadows": "evalml.objectives.Precision"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.RegressionObjective": {
  "data": {
   "shadows": "evalml.objectives.RegressionObjective"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.get_objective": {
  "data": {
   "shadows": "evalml.objectives.get_objective"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.get_objectives": {
  "data": {
   "shadows": "evalml.objectives.get_objectives"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_objectives.test_create_custom_objective": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "MockEmptyObjective",
    "MockNoObjectiveFunctionObjective",
    "TypeError",
    "evalml.tests.objective_tests.test_objectives.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_objectives.test_create_custom_objective.MockEmptyObjective": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "evalml.objectives.objective_base.ObjectiveBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.objective_tests.test_objectives.test_create_custom_objective.MockEmptyObjective.objective_function": {
  "data": {
   "lineno": 20
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_objectives.test_create_custom_objective.MockNoObjectiveFunctionObjective": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "evalml.objectives.objective_base.ObjectiveBase",
    "evalml.problem_types.ProblemTypes.BINARY"
   ]
  },
  "type": "class"
 },
 "evalml.tests.objective_tests.test_objectives.test_get_objective": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "TypeError",
    "evalml.exceptions.ObjectiveNotFoundError",
    "evalml.objectives.Precision",
    "evalml.objectives.get_objective",
    "evalml.tests.objective_tests.test_objectives.pytest",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_objectives.test_get_objectives_types": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "evalml.objectives.get_objectives",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_objectives.test_objective_outputs": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "evalml.objectives.BinaryClassificationObjective",
    "evalml.objectives.MulticlassClassificationObjective",
    "evalml.objectives.RegressionObjective",
    "evalml.objectives.get_objectives",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "float",
    "isinstance",
    "numpy.concatenate",
    "numpy.ndarray",
    "numpy.testing.assert_almost_equal",
    "numpy.unique",
    "pandas.DataFrame",
    "pandas.Series",
    "print"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.objective_tests.test_standard_metrics.AccuracyBinary": {
  "data": {
   "shadows": "evalml.objectives.AccuracyBinary"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.AccuracyMulticlass": {
  "data": {
   "shadows": "evalml.objectives.AccuracyMulticlass"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.BalancedAccuracyBinary": {
  "data": {
   "shadows": "evalml.objectives.BalancedAccuracyBinary"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.BalancedAccuracyMulticlass": {
  "data": {
   "shadows": "evalml.objectives.BalancedAccuracyMulticlass"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.BinaryClassificationObjective": {
  "data": {
   "shadows": "evalml.objectives.BinaryClassificationObjective"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.EPS": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "evalml.tests.objective_tests.test_standard_metrics.F1": {
  "data": {
   "shadows": "evalml.objectives.F1"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.F1Macro": {
  "data": {
   "shadows": "evalml.objectives.F1Macro"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.F1Micro": {
  "data": {
   "shadows": "evalml.objectives.F1Micro"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.F1Weighted": {
  "data": {
   "shadows": "evalml.objectives.F1Weighted"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.MCCBinary": {
  "data": {
   "shadows": "evalml.objectives.MCCBinary"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.MCCMulticlass": {
  "data": {
   "shadows": "evalml.objectives.MCCMulticlass"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.MSE": {
  "data": {
   "shadows": "evalml.objectives.MSE"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.MeanSquaredLogError": {
  "data": {
   "shadows": "evalml.objectives.MeanSquaredLogError"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.OPTIONS": {
  "data": {
   "shadows": "evalml.objectives.utils.OPTIONS"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.Precision": {
  "data": {
   "shadows": "evalml.objectives.Precision"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.PrecisionMacro": {
  "data": {
   "shadows": "evalml.objectives.PrecisionMacro"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.PrecisionMicro": {
  "data": {
   "shadows": "evalml.objectives.PrecisionMicro"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.PrecisionWeighted": {
  "data": {
   "shadows": "evalml.objectives.PrecisionWeighted"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.Recall": {
  "data": {
   "shadows": "evalml.objectives.Recall"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.RecallMacro": {
  "data": {
   "shadows": "evalml.objectives.RecallMacro"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.RecallMicro": {
  "data": {
   "shadows": "evalml.objectives.RecallMicro"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.RecallWeighted": {
  "data": {
   "shadows": "evalml.objectives.RecallWeighted"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.RootMeanSquaredError": {
  "data": {
   "shadows": "evalml.objectives.RootMeanSquaredError"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.RootMeanSquaredLogError": {
  "data": {
   "shadows": "evalml.objectives.RootMeanSquaredLogError"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.sk_matthews_corrcoef": {
  "data": {
   "shadows": "sklearn.metrics.matthews_corrcoef"
  },
  "type": "import"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_accuracy_binary": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "evalml.objectives.AccuracyBinary",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_accuracy_multi": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "evalml.objectives.AccuracyMulticlass",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_balanced_accuracy_binary": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "evalml.objectives.BalancedAccuracyBinary",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_balanced_accuracy_multi": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "evalml.objectives.BalancedAccuracyMulticlass",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_binary_more_than_two_unique_values": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.BinaryClassificationObjective",
    "evalml.objectives.utils.OPTIONS.values",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "isinstance",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_different_input_lengths": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.utils.OPTIONS.values",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_f1_binary": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "evalml.objectives.F1",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_f1_macro_multi": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "evalml.objectives.F1Macro",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_f1_micro_multi": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "evalml.objectives.F1Micro",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_f1_weighted_multi": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "evalml.objectives.F1Weighted",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_input_contains_inf": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.utils.OPTIONS.values",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array",
    "numpy.inf"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_input_contains_nan": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.utils.OPTIONS.values",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array",
    "numpy.nan"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_log_linear_model": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "evalml.objectives.MeanSquaredLogError",
    "evalml.objectives.RootMeanSquaredLogError",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array",
    "numpy.sqrt"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_mcc_catches_warnings": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "RuntimeWarning",
    "evalml.objectives.MCCBinary",
    "evalml.objectives.MCCMulticlass",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "len",
    "sklearn.metrics.matthews_corrcoef",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_mse_linear_model": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "evalml.objectives.MSE",
    "evalml.objectives.RootMeanSquaredError",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array",
    "numpy.sqrt"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_negative_with_log": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.MeanSquaredLogError",
    "evalml.objectives.RootMeanSquaredLogError",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_precision_binary": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "evalml.objectives.Precision",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_precision_macro_multi": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "evalml.objectives.PrecisionMacro",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_precision_micro_multi": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "evalml.objectives.PrecisionMicro",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_precision_weighted_multi": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "evalml.objectives.PrecisionWeighted",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_probabilities_not_in_0_1_range": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.utils.OPTIONS.values",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_recall_binary": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "evalml.objectives.Recall",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_recall_macro_multi": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "evalml.objectives.RecallMacro",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_recall_micro_multi": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "evalml.objectives.RecallMicro",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_recall_weighted_multi": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "evalml.objectives.RecallWeighted",
    "evalml.tests.objective_tests.test_standard_metrics.EPS",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_zero_input_lengths": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "ValueError",
    "evalml.objectives.utils.OPTIONS.values",
    "evalml.tests.objective_tests.test_standard_metrics.pytest",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.BaselineBinaryPipeline": {
  "data": {
   "shadows": "evalml.pipelines.BaselineBinaryPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.BaselineMulticlassPipeline": {
  "data": {
   "shadows": "evalml.pipelines.BaselineMulticlassPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.get_random_state": {
  "data": {
   "shadows": "evalml.utils.get_random_state"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_binary_mode": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "evalml.pipelines.BaselineBinaryPipeline",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_binary_random": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "evalml.pipelines.BaselineBinaryPipeline",
    "evalml.utils.get_random_state",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "numpy.unique",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_binary_random_weighted": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "evalml.pipelines.BaselineBinaryPipeline",
    "evalml.utils.get_random_state",
    "float",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "numpy.unique",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_multi_mode": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "evalml.pipelines.BaselineMulticlassPipeline",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_multi_random": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "evalml.pipelines.BaselineMulticlassPipeline",
    "evalml.utils.get_random_state",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "numpy.unique",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_multi_random_weighted": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "evalml.pipelines.BaselineMulticlassPipeline",
    "evalml.utils.get_random_state",
    "float",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose",
    "numpy.unique",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification.test_binary_classification_pipeline_predict": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "dummy_binary_pipeline_class",
    "pandas.DataFrame",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification.test_binary_predict_pipeline_objective_mismatch": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "ValueError",
    "dummy_binary_pipeline_class",
    "evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification.pytest",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification.test_new_unique_targets_in_score": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "ValueError",
    "evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification.pytest",
    "len",
    "logistic_regression_binary_pipeline_class",
    "logistic_regression_multiclass_pipeline_class",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms": {
  "data": {
   "symbols_in_volume": [
    "evalml.model_family.model_family.ModelFamily.BASELINE",
    "evalml.model_family.model_family.ModelFamily.XGBOOST",
    "evalml.pipelines.components.utils._all_estimators_used_in_search",
    "evalml.problem_types.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.problem_types.ProblemTypes.REGRESSION"
   ]
  },
  "type": "module"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.BinaryClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.BinaryClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.CatBoostClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.CatBoostClassifier"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.LinearRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.LinearRegressor"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.MeanBaselineRegressionPipeline": {
  "data": {
   "shadows": "evalml.pipelines.MeanBaselineRegressionPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.ModeBaselineBinaryPipeline": {
  "data": {
   "shadows": "evalml.pipelines.ModeBaselineBinaryPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.ModeBaselineMulticlassPipeline": {
  "data": {
   "shadows": "evalml.pipelines.ModeBaselineMulticlassPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.MulticlassClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.MulticlassClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.N_CLASSES_BINARY": {
  "data": {
   "lineno": 81
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.N_CLASSES_MULTICLASS": {
  "data": {
   "lineno": 82
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.N_FEATURES": {
  "data": {
   "lineno": 83
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.RandomForestClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.RandomForestClassifier"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.RegressionPipeline": {
  "data": {
   "shadows": "evalml.pipelines.RegressionPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.XGBoostClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.XGBoostClassifier"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.XGBoostRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.XGBoostRegressor"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms._all_estimators_used_in_search": {
  "data": {
   "shadows": "evalml.pipelines.components.utils._all_estimators_used_in_search"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms._compute_shap_values": {
  "data": {
   "shadows": "evalml.pipelines.prediction_explanations._algorithms._compute_shap_values"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms._create_dictionary": {
  "data": {
   "shadows": "evalml.pipelines.prediction_explanations._algorithms._create_dictionary"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms._normalize_shap_values": {
  "data": {
   "shadows": "evalml.pipelines.prediction_explanations._algorithms._normalize_shap_values"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.all_n_points_to_explain": {
  "data": {
   "lineno": 96
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.all_problems": {
  "data": {
   "lineno": 95
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.baseline_message": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.calculate_shap_for_test": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "evalml.pipelines.prediction_explanations._algorithms._compute_shap_values",
    "pipeline",
    "pipeline.fit",
    "pipeline_class"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.catboost_message": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.data_message": {
  "data": {
   "lineno": 52
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.datatype_message": {
  "data": {
   "lineno": 51
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.interpretable_estimators": {
  "data": {
   "lineno": 94
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.make_pipeline": {
  "data": {
   "shadows": "evalml.pipelines.utils.make_pipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.make_test_pipeline": {
  "data": {
   "lineno": 34
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.make_test_pipeline.Pipeline": {
  "data": {
   "lineno": 41
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.test_create_dictionary_exception": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.prediction_explanations._algorithms._create_dictionary",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.test_normalize_values": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "check_equal_dicts",
    "dict",
    "evalml.pipelines.prediction_explanations._algorithms._normalize_shap_values",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.pytest",
    "isinstance",
    "len",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.test_normalize_values.check_equal_dicts": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "numpy.testing.assert_almost_equal",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.test_normalize_values_exceptions": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.prediction_explanations._algorithms._normalize_shap_values",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.test_shap": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "all",
    "dict",
    "evalml.model_family.model_family.ModelFamily.CATBOOST",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.problem_types.ProblemTypes.REGRESSION",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.N_CLASSES_BINARY",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.N_CLASSES_MULTICLASS",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.N_FEATURES",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.all_n_points_to_explain",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.all_problems",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.calculate_shap_for_test",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.interpretable_estimators",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.pytest",
    "isinstance",
    "itertools.product",
    "len",
    "list",
    "pipeline_class"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.test_value_errors_raised": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.pipelines.MeanBaselineRegressionPipeline",
    "evalml.pipelines.ModeBaselineBinaryPipeline",
    "evalml.pipelines.ModeBaselineMulticlassPipeline",
    "evalml.pipelines.MulticlassClassificationPipeline",
    "evalml.pipelines.RegressionPipeline",
    "evalml.pipelines.components.CatBoostClassifier",
    "evalml.pipelines.components.LinearRegressor",
    "evalml.pipelines.components.RandomForestClassifier",
    "evalml.pipelines.components.XGBoostClassifier",
    "evalml.pipelines.components.XGBoostRegressor",
    "evalml.pipelines.prediction_explanations._algorithms._compute_shap_values",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.baseline_message",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.catboost_message",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.data_message",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.datatype_message",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.make_test_pipeline",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.pytest",
    "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.xg_boost_message",
    "numpy.random.random",
    "pandas.DataFrame",
    "pipeline",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_algorithms.xg_boost_message": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_explainers": {
  "data": {
   "symbols_in_volume": [
    "numpy.ones",
    "pandas.DataFrame"
   ]
  },
  "type": "module"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_explainers.MagicMock": {
  "data": {
   "shadows": "unittest.mock.MagicMock"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_explainers.explain_prediction": {
  "data": {
   "shadows": "evalml.pipelines.prediction_explanations.explainers.explain_prediction"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_explainers.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_explainers.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_explainers.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_explainers.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_explainers.test_explain_prediction_runs": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "evalml.pipelines.prediction_explanations.explainers.explain_prediction",
    "len",
    "pandas.DataFrame",
    "unittest.mock.MagicMock",
    "unittest.mock.patch",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_explainers.test_explain_prediction_value_error": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.prediction_explanations.explainers.explain_prediction",
    "evalml.tests.pipeline_tests.explanations_tests.test_explainers.pytest",
    "evalml.tests.pipeline_tests.explanations_tests.test_explainers.test_features",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_explainers.test_features": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface._make_rows": {
  "data": {
   "shadows": "evalml.pipelines.prediction_explanations._user_interface._make_rows"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface._make_single_prediction_table": {
  "data": {
   "shadows": "evalml.pipelines.prediction_explanations._user_interface._make_single_prediction_table"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface._make_table": {
  "data": {
   "shadows": "evalml.pipelines.prediction_explanations._user_interface._make_table"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.binary": {
  "data": {
   "lineno": 74
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.binary_normalized": {
  "data": {
   "lineno": 79
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.binary_table": {
  "data": {
   "lineno": 83
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.binary_table_shap": {
  "data": {
   "lineno": 94
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.make_rows_test_cases": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.multiclass": {
  "data": {
   "lineno": 105
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.multiclass_normalized": {
  "data": {
   "lineno": 112
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.multiclass_table": {
  "data": {
   "lineno": 116
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.multiclass_table_shap": {
  "data": {
   "lineno": 151
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.regression": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.regression_normalized": {
  "data": {
   "lineno": 52
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.regression_table": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.regression_table_shap": {
  "data": {
   "lineno": 65
  },
  "type": "constant"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.test_make_rows_and_make_table": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "evalml.pipelines.prediction_explanations._user_interface._make_rows",
    "evalml.pipelines.prediction_explanations._user_interface._make_table",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.copy",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.make_rows_test_cases",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.pytest",
    "itertools.product",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.test_make_single_prediction_table": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "evalml.pipelines.prediction_explanations._user_interface._make_single_prediction_table",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.binary",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.binary_normalized",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.binary_table",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.binary_table_shap",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.multiclass",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.multiclass_normalized",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.multiclass_table",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.multiclass_table_shap",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.pytest",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.regression",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.regression_normalized",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.regression_table",
    "evalml.tests.pipeline_tests.explanations_tests.test_user_interface.regression_table_shap",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_baseline_regression": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_baseline_regression.BaselineRegressionPipeline": {
  "data": {
   "shadows": "evalml.pipelines.BaselineRegressionPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_baseline_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_baseline_regression.test_baseline_mean": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "evalml.pipelines.BaselineRegressionPipeline",
    "len",
    "numpy.array",
    "numpy.testing.assert_allclose"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_baseline_regression.test_baseline_median": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "evalml.pipelines.BaselineRegressionPipeline",
    "len",
    "numpy.array",
    "numpy.median",
    "numpy.testing.assert_allclose"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression.load_breast_cancer": {
  "data": {
   "shadows": "evalml.demos.load_breast_cancer"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression.load_wine": {
  "data": {
   "shadows": "evalml.demos.load_wine"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression.test_invalid_targets_regression_pipeline": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "ValueError",
    "dummy_regression_pipeline_class",
    "evalml.demos.load_breast_cancer",
    "evalml.demos.load_wine",
    "evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression.pytest",
    "pandas.Categorical"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.UndefinedMetricWarning": {
  "data": {
   "shadows": "sklearn.exceptions.UndefinedMetricWarning"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.binarized_ys": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "numpy.random.RandomState",
    "sklearn.preprocessing.label_binarize"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.confusion_matrix": {
  "data": {
   "shadows": "evalml.pipelines.graph_utils.confusion_matrix"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.graph_confusion_matrix": {
  "data": {
   "shadows": "evalml.pipelines.graph_utils.graph_confusion_matrix"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.graph_precision_recall_curve": {
  "data": {
   "shadows": "evalml.pipelines.graph_utils.graph_precision_recall_curve"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.graph_roc_curve": {
  "data": {
   "shadows": "evalml.pipelines.graph_utils.graph_roc_curve"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.label_binarize": {
  "data": {
   "shadows": "sklearn.preprocessing.label_binarize"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.normalize_confusion_matrix": {
  "data": {
   "shadows": "evalml.pipelines.graph_utils.normalize_confusion_matrix"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.precision_recall_curve": {
  "data": {
   "shadows": "evalml.pipelines.graph_utils.precision_recall_curve"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.roc_curve": {
  "data": {
   "shadows": "evalml.pipelines.graph_utils.roc_curve"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_confusion_matrix": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.graph_utils.confusion_matrix",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "isinstance",
    "numpy.allclose",
    "numpy.array",
    "numpy.array_equal",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_graph_confusion_matrix_default": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.confusion_matrix",
    "evalml.pipelines.graph_utils.graph_confusion_matrix",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "int",
    "isinstance",
    "numpy.all",
    "numpy.array",
    "numpy.array_equal",
    "numpy.random.RandomState",
    "numpy.round",
    "pandas.Series",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_graph_confusion_matrix_norm_disabled": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.confusion_matrix",
    "evalml.pipelines.graph_utils.graph_confusion_matrix",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "int",
    "isinstance",
    "numpy.all",
    "numpy.array",
    "numpy.array_equal",
    "numpy.random.RandomState",
    "numpy.round",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_graph_confusion_matrix_title_addition": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.graph_confusion_matrix",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "int",
    "isinstance",
    "numpy.random.RandomState",
    "numpy.round",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_graph_precision_recall_curve": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.graph_precision_recall_curve",
    "evalml.pipelines.graph_utils.precision_recall_curve",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "isinstance",
    "len",
    "numpy.array_equal",
    "numpy.random.RandomState",
    "pandas.DataFrame",
    "pandas.Series",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_graph_precision_recall_curve_title_addition": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.graph_precision_recall_curve",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "isinstance",
    "numpy.random.RandomState",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_graph_roc_curve_binary": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.graph_roc_curve",
    "evalml.pipelines.graph_utils.roc_curve",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "isinstance",
    "len",
    "numpy.array",
    "numpy.array_equal",
    "numpy.random.RandomState",
    "pandas.DataFrame",
    "pandas.Series",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_graph_roc_curve_multiclass": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.graph_utils.graph_roc_curve",
    "evalml.pipelines.graph_utils.roc_curve",
    "evalml.tests.pipeline_tests.test_graph_utils.binarized_ys",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "isinstance",
    "len",
    "numpy.array",
    "numpy.array_equal",
    "range",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_graph_roc_curve_multiclass_custom_class_names": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.graph_roc_curve",
    "evalml.pipelines.graph_utils.roc_curve",
    "evalml.tests.pipeline_tests.test_graph_utils.binarized_ys",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "isinstance",
    "numpy.array",
    "numpy.array_equal",
    "range",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_graph_roc_curve_nans": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.graph_roc_curve",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "isinstance",
    "numpy.allclose",
    "numpy.array",
    "numpy.array_equal",
    "numpy.nan",
    "sklearn.exceptions.UndefinedMetricWarning",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_graph_roc_curve_title_addition": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.graph_roc_curve",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "isinstance",
    "numpy.random.RandomState",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_normalize_confusion_matrix": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "all",
    "evalml.pipelines.graph_utils.normalize_confusion_matrix",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "isinstance",
    "list",
    "numpy.array",
    "pandas.DataFrame",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_normalize_confusion_matrix_error": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "RuntimeWarning",
    "ValueError",
    "evalml.pipelines.graph_utils.normalize_confusion_matrix",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "evalml.tests.pipeline_tests.test_graph_utils.warnings",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_precision_recall_curve": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.precision_recall_curve",
    "numpy.array",
    "numpy.testing.assert_almost_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_precision_recall_curve_return_type": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.precision_recall_curve",
    "float",
    "isinstance",
    "numpy.array",
    "numpy.ndarray"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.test_roc_curve_binary": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.roc_curve",
    "evalml.tests.pipeline_tests.test_graph_utils.pytest",
    "isinstance",
    "numpy.array",
    "numpy.array_equal",
    "numpy.ndarray",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graph_utils.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.test_graphs.BinaryClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.BinaryClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.calculate_permutation_importance": {
  "data": {
   "shadows": "evalml.pipelines.graph_utils.calculate_permutation_importance"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.get_objectives": {
  "data": {
   "shadows": "evalml.objectives.get_objectives"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.graph_permutation_importance": {
  "data": {
   "shadows": "evalml.pipelines.graph_utils.graph_permutation_importance"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.graphviz": {
  "data": {
   "shadows": "graphviz"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_backend": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "RuntimeError",
    "evalml.tests.pipeline_tests.test_graphs.graphviz",
    "evalml.tests.pipeline_tests.test_graphs.pytest",
    "evalml.tests.pipeline_tests.test_graphs.test_pipeline",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_get_permutation_importance_binary": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "evalml.objectives.get_objectives",
    "evalml.pipelines.graph_utils.calculate_permutation_importance",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.tests.pipeline_tests.test_graphs.pytest",
    "list",
    "logistic_regression_binary_pipeline_class",
    "numpy.random.RandomState",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_get_permutation_importance_correlated_features": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "bool",
    "evalml.pipelines.graph_utils.calculate_permutation_importance",
    "list",
    "logistic_regression_binary_pipeline_class",
    "numpy.random.RandomState",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_get_permutation_importance_invalid_objective": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.graph_utils.calculate_permutation_importance",
    "evalml.tests.pipeline_tests.test_graphs.pytest",
    "linear_regression_pipeline_class",
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_get_permutation_importance_multiclass": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "evalml.objectives.get_objectives",
    "evalml.pipelines.graph_utils.calculate_permutation_importance",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "list",
    "logistic_regression_multiclass_pipeline_class",
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_get_permutation_importance_regression": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "evalml.objectives.get_objectives",
    "evalml.pipelines.graph_utils.calculate_permutation_importance",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "linear_regression_pipeline_class",
    "list",
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_graph_feature_importance": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_graphs.pytest",
    "evalml.tests.pipeline_tests.test_graphs.test_pipeline",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_graph_feature_importance_show_all_features": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_graphs.pytest",
    "evalml.tests.pipeline_tests.test_graphs.test_pipeline",
    "isinstance",
    "numpy.all",
    "numpy.any"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_graph_permutation_importance": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.calculate_permutation_importance",
    "evalml.pipelines.graph_utils.graph_permutation_importance",
    "evalml.tests.pipeline_tests.test_graphs.pytest",
    "evalml.tests.pipeline_tests.test_graphs.test_pipeline",
    "isinstance",
    "len",
    "numpy.array_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_graph_permutation_importance_show_all_features": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "evalml.pipelines.graph_utils.graph_permutation_importance",
    "evalml.tests.pipeline_tests.test_graphs.pytest",
    "evalml.tests.pipeline_tests.test_graphs.test_pipeline",
    "isinstance",
    "numpy.all",
    "numpy.any",
    "pandas.DataFrame",
    "pandas.Series",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_invalid_format": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "ValueError",
    "evalml.tests.pipeline_tests.test_graphs.os",
    "evalml.tests.pipeline_tests.test_graphs.pytest",
    "evalml.tests.pipeline_tests.test_graphs.test_pipeline",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_invalid_path": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "ValueError",
    "evalml.tests.pipeline_tests.test_graphs.os",
    "evalml.tests.pipeline_tests.test_graphs.pytest",
    "evalml.tests.pipeline_tests.test_graphs.test_pipeline",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_missing_file_extension": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "ValueError",
    "evalml.tests.pipeline_tests.test_graphs.os",
    "evalml.tests.pipeline_tests.test_graphs.pytest",
    "evalml.tests.pipeline_tests.test_graphs.test_pipeline",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_pipeline": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "TestPipeline",
    "evalml.tests.pipeline_tests.test_graphs.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_pipeline.TestPipeline": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_pipeline.TestPipeline.__init__": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_pipeline.TestPipeline.feature_importance": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "len",
    "list",
    "pandas.DataFrame",
    "property",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_returns_digraph_object": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_graphs.graphviz",
    "evalml.tests.pipeline_tests.test_graphs.test_pipeline",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_saving_png_file": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_graphs.os",
    "evalml.tests.pipeline_tests.test_graphs.test_pipeline",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.pipeline_tests.test_pipelines.BinaryClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.BinaryClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.ComponentNotYetFittedError": {
  "data": {
   "shadows": "evalml.exceptions.ComponentNotYetFittedError"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.DateTimeFeaturizer": {
  "data": {
   "shadows": "evalml.pipelines.components.DateTimeFeaturizer"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.DropNullColumns": {
  "data": {
   "shadows": "evalml.pipelines.components.DropNullColumns"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.FraudCost": {
  "data": {
   "shadows": "evalml.objectives.FraudCost"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.IllFormattedClassNameError": {
  "data": {
   "shadows": "evalml.exceptions.IllFormattedClassNameError"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.Imputer": {
  "data": {
   "shadows": "evalml.pipelines.components.Imputer"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.LinearRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.LinearRegressor"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.LogisticRegressionClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.LogisticRegressionClassifier"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.MissingComponentError": {
  "data": {
   "shadows": "evalml.exceptions.MissingComponentError"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.ModelFamily": {
  "data": {
   "shadows": "evalml.model_family.ModelFamily"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.MulticlassClassificationPipeline": {
  "data": {
   "shadows": "evalml.pipelines.MulticlassClassificationPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.OneHotEncoder": {
  "data": {
   "shadows": "evalml.pipelines.components.OneHotEncoder"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.PipelineBase": {
  "data": {
   "shadows": "evalml.pipelines.PipelineBase"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.PipelineScoreError": {
  "data": {
   "shadows": "evalml.exceptions.PipelineScoreError"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.Precision": {
  "data": {
   "shadows": "evalml.objectives.Precision"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.RFClassifierSelectFromModel": {
  "data": {
   "shadows": "evalml.pipelines.components.RFClassifierSelectFromModel"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.RandomForestClassifier": {
  "data": {
   "shadows": "evalml.pipelines.components.RandomForestClassifier"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.RandomForestRegressor": {
  "data": {
   "shadows": "evalml.pipelines.components.RandomForestRegressor"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.RegressionPipeline": {
  "data": {
   "shadows": "evalml.pipelines.RegressionPipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.StandardScaler": {
  "data": {
   "shadows": "evalml.pipelines.components.StandardScaler"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.Transformer": {
  "data": {
   "shadows": "evalml.pipelines.components.Transformer"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines._all_estimators_used_in_search": {
  "data": {
   "shadows": "evalml.pipelines.components.utils._all_estimators_used_in_search"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.allowed_model_families": {
  "data": {
   "shadows": "evalml.pipelines.components.utils.allowed_model_families"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.cloudpickle": {
  "data": {
   "shadows": "cloudpickle"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.get_estimators": {
  "data": {
   "shadows": "evalml.pipelines.utils.get_estimators"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.load_breast_cancer": {
  "data": {
   "shadows": "evalml.demos.load_breast_cancer"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.load_wine": {
  "data": {
   "shadows": "evalml.demos.load_wine"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_binary_pipeline": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": [
    "MockBinaryClassificationPipeline"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_binary_pipeline.MockBinaryClassificationPipeline": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_multiclass_pipeline": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": [
    "MockMulticlassClassificationPipeline"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_multiclass_pipeline.MockMulticlassClassificationPipeline": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": [
    "evalml.pipelines.MulticlassClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_regression_pipeline": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": [
    "MockRegressionPipeline"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_regression_pipeline.MockRegressionPipeline": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "evalml.pipelines.RegressionPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_pipeline": {
  "data": {
   "shadows": "evalml.pipelines.utils.make_pipeline"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.pickled_pipeline_path": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_pipelines.os",
    "evalml.tests.pipeline_tests.test_pipelines.pytest",
    "logistic_regression_binary_pipeline_class",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_all_estimators": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "evalml.pipelines.components.utils._all_estimators_used_in_search",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_allowed_model_families": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "evalml.model_family.ModelFamily.CATBOOST",
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.model_family.ModelFamily.RANDOM_FOREST",
    "evalml.model_family.ModelFamily.XGBOOST",
    "evalml.pipelines.components.utils.allowed_model_families",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_clone_fitted": {
  "data": {
   "lineno": 890,
   "symbols_in_volume": [
    "evalml.exceptions.ComponentNotYetFittedError",
    "evalml.tests.pipeline_tests.test_pipelines.pytest",
    "logistic_regression_binary_pipeline_class",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_clone_init": {
  "data": {
   "lineno": 854,
   "symbols_in_volume": [
    "linear_regression_pipeline_class"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_clone_random_state": {
  "data": {
   "lineno": 870,
   "symbols_in_volume": [
    "linear_regression_pipeline_class",
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_component_not_found": {
  "data": {
   "lineno": 934,
   "symbols_in_volume": [
    "FakePipeline",
    "evalml.exceptions.MissingComponentError",
    "evalml.tests.pipeline_tests.test_pipelines.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_component_not_found.FakePipeline": {
  "data": {
   "lineno": 935,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_correct_parameters": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": [
    "logistic_regression_binary_pipeline_class",
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_describe": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "logistic_regression_binary_pipeline_class"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_describe_fitted": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "logistic_regression_binary_pipeline_class"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_drop_columns_in_pipeline": {
  "data": {
   "lineno": 829,
   "symbols_in_volume": [
    "PipelineWithDropCol",
    "list",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_drop_columns_in_pipeline.PipelineWithDropCol": {
  "data": {
   "lineno": 830,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_estimator_not_last": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "MockBinaryClassificationPipelineWithoutEstimator",
    "ValueError",
    "evalml.tests.pipeline_tests.test_pipelines.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_estimator_not_last.MockBinaryClassificationPipelineWithoutEstimator": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_feature_importance_has_feature_names": {
  "data": {
   "lineno": 907,
   "symbols_in_volume": [
    "len",
    "logistic_regression_binary_pipeline_class",
    "pandas.DataFrame",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_get_default_parameters": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": [
    "logistic_regression_binary_pipeline_class.default_parameters"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_get_estimators": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "KeyError",
    "RuntimeError",
    "TypeError",
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.utils.get_estimators",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "evalml.tests.pipeline_tests.test_pipelines.pytest",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters": {
  "data": {
   "lineno": 726,
   "symbols_in_volume": [
    "MockPipeline",
    "skopt.space.Integer"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters.MockPipeline": {
  "data": {
   "lineno": 727,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters_none": {
  "data": {
   "lineno": 775,
   "symbols_in_volume": [
    "MockPipelineNone"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters_none.MockPipelineNone": {
  "data": {
   "lineno": 778,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters_override": {
  "data": {
   "lineno": 745,
   "symbols_in_volume": [
    "MockPipelineOverRide"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters_override.MockPipelineOverRide": {
  "data": {
   "lineno": 746,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_indexing": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "NotImplementedError",
    "evalml.pipelines.components.Imputer",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.tests.pipeline_tests.test_pipelines.pytest",
    "isinstance",
    "logistic_regression_binary_pipeline_class"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_init_components_invalid_parameters": {
  "data": {
   "lineno": 694,
   "symbols_in_volume": [
    "TestPipeline",
    "ValueError",
    "evalml.tests.pipeline_tests.test_pipelines.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_init_components_invalid_parameters.TestPipeline": {
  "data": {
   "lineno": 695,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_load_pickled_pipeline_with_custom_objective": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "MockPrecision",
    "NameError",
    "evalml.objectives.Precision",
    "evalml.pipelines.PipelineBase.load",
    "evalml.tests.pipeline_tests.test_pipelines.pickled_pipeline_path",
    "evalml.tests.pipeline_tests.test_pipelines.pytest",
    "logistic_regression_binary_pipeline_class"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.pipelines.MulticlassClassificationPipeline",
    "evalml.pipelines.RegressionPipeline",
    "evalml.pipelines.components.DateTimeFeaturizer",
    "evalml.pipelines.components.DropNullColumns",
    "evalml.pipelines.components.Imputer",
    "evalml.pipelines.components.LinearRegressor",
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.pipelines.components.RandomForestClassifier",
    "evalml.pipelines.components.RandomForestRegressor",
    "evalml.pipelines.components.StandardScaler",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "isinstance",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.date_range",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_all_nan_no_categoricals": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.pipelines.components.DropNullColumns",
    "evalml.pipelines.components.Imputer",
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.pipelines.components.RandomForestClassifier",
    "evalml.pipelines.components.StandardScaler",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "isinstance",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_no_column_names": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.pipelines.MulticlassClassificationPipeline",
    "evalml.pipelines.RegressionPipeline",
    "evalml.pipelines.components.DropNullColumns",
    "evalml.pipelines.components.Imputer",
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.pipelines.components.RandomForestRegressor",
    "evalml.pipelines.components.StandardScaler",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "isinstance",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_no_datetimes": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.pipelines.MulticlassClassificationPipeline",
    "evalml.pipelines.RegressionPipeline",
    "evalml.pipelines.components.DropNullColumns",
    "evalml.pipelines.components.Imputer",
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.pipelines.components.RandomForestRegressor",
    "evalml.pipelines.components.StandardScaler",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "isinstance",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_no_nulls": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.pipelines.MulticlassClassificationPipeline",
    "evalml.pipelines.RegressionPipeline",
    "evalml.pipelines.components.DateTimeFeaturizer",
    "evalml.pipelines.components.Imputer",
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.pipelines.components.RandomForestRegressor",
    "evalml.pipelines.components.StandardScaler",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "isinstance",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.date_range",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_numpy_input": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.pipelines.MulticlassClassificationPipeline",
    "evalml.pipelines.RegressionPipeline",
    "evalml.pipelines.components.DropNullColumns",
    "evalml.pipelines.components.Imputer",
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.pipelines.components.RandomForestRegressor",
    "evalml.pipelines.components.StandardScaler",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "isinstance",
    "numpy.array",
    "numpy.nan",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_problem_type_mismatch": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "ValueError",
    "evalml.pipelines.components.LinearRegressor",
    "evalml.pipelines.components.LinearRegressor.name",
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.pipelines.components.LogisticRegressionClassifier.name",
    "evalml.pipelines.components.Transformer",
    "evalml.pipelines.components.Transformer.name",
    "evalml.pipelines.utils.make_pipeline",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "evalml.tests.pipeline_tests.test_pipelines.pytest",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_multi_format_creation": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "TestPipeline",
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.Imputer",
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.pipelines.components.StandardScaler",
    "isinstance",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_multi_format_creation.TestPipeline": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.pipelines.components.StandardScaler",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_multiple_feature_selectors": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": [
    "TestPipeline",
    "evalml.model_family.ModelFamily.LINEAR_MODEL",
    "evalml.pipelines.components.Imputer",
    "evalml.pipelines.components.LogisticRegressionClassifier",
    "evalml.pipelines.components.OneHotEncoder",
    "evalml.pipelines.components.RFClassifierSelectFromModel",
    "evalml.pipelines.components.StandardScaler",
    "isinstance",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_multiple_feature_selectors.TestPipeline": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline",
    "evalml.pipelines.components.StandardScaler",
    "skopt.space.Real"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_name": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "TestDefinedNamePipeline",
    "evalml.exceptions.IllFormattedClassNameError",
    "evalml.tests.pipeline_tests.test_pipelines.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_name.TestDefinedNamePipeline": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_name.TestNamePipeline": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_name.testillformattednamepipeline": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_no_default_parameters": {
  "data": {
   "lineno": 673,
   "symbols_in_volume": [
    "TestPipeline",
    "ValueError",
    "evalml.tests.pipeline_tests.test_pipelines.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_no_default_parameters.MockComponent": {
  "data": {
   "lineno": 674,
   "symbols_in_volume": [
    "evalml.pipelines.components.Transformer"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_no_default_parameters.MockComponent.__init__": {
  "data": {
   "lineno": 680
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_no_default_parameters.TestPipeline": {
  "data": {
   "lineno": 685,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_parameters": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "logistic_regression_binary_pipeline_class"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary": {
  "data": {
   "lineno": 807,
   "symbols_in_volume": [
    "MockPipeline.summary"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary.MockPipeline": {
  "data": {
   "lineno": 824,
   "symbols_in_volume": [
    "evalml.pipelines.PipelineBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary.MockPipelineWithNoComponents": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": [
    "evalml.pipelines.PipelineBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary.MockPipelineWithOnlyAnEstimator": {
  "data": {
   "lineno": 816,
   "symbols_in_volume": [
    "evalml.pipelines.PipelineBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary.MockPipelineWithSingleComponent": {
  "data": {
   "lineno": 812,
   "symbols_in_volume": [
    "evalml.pipelines.PipelineBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary.MockPipelineWithoutEstimator": {
  "data": {
   "lineno": 808,
   "symbols_in_volume": [
    "evalml.pipelines.PipelineBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_problem_types": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": [
    "TestPipeline",
    "ValueError",
    "evalml.tests.pipeline_tests.test_pipelines.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_problem_types.TestPipeline": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": [
    "evalml.pipelines.BinaryClassificationPipeline"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_reproducibility": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "evalml.objectives.FraudCost",
    "logistic_regression_binary_pipeline_class"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_required_fields": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "TestPipelineWithoutComponentGraph",
    "TypeError",
    "evalml.tests.pipeline_tests.test_pipelines.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_required_fields.TestPipelineWithoutComponentGraph": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "evalml.pipelines.PipelineBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_auc": {
  "data": {
   "lineno": 800,
   "symbols_in_volume": [
    "logistic_regression_binary_pipeline_class"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_binary_list": {
  "data": {
   "lineno": 575,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_pipelines.make_mock_binary_pipeline",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_binary_objective_error": {
  "data": {
   "lineno": 628,
   "symbols_in_volume": [
    "Exception",
    "evalml.exceptions.PipelineScoreError",
    "evalml.tests.pipeline_tests.test_pipelines.make_mock_binary_pipeline",
    "evalml.tests.pipeline_tests.test_pipelines.pytest",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_binary_single": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_pipelines.make_mock_binary_pipeline",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_multi_list": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_pipelines.make_mock_multiclass_pipeline",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_multiclass_objective_error": {
  "data": {
   "lineno": 650,
   "symbols_in_volume": [
    "Exception",
    "evalml.exceptions.PipelineScoreError",
    "evalml.tests.pipeline_tests.test_pipelines.make_mock_multiclass_pipeline",
    "evalml.tests.pipeline_tests.test_pipelines.pytest",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_multiclass_single": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_pipelines.make_mock_multiclass_pipeline",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_regression_list": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_pipelines.make_mock_regression_pipeline",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_regression_objective_error": {
  "data": {
   "lineno": 607,
   "symbols_in_volume": [
    "Exception",
    "evalml.exceptions.PipelineScoreError",
    "evalml.tests.pipeline_tests.test_pipelines.make_mock_regression_pipeline",
    "evalml.tests.pipeline_tests.test_pipelines.pytest",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_regression_single": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_pipelines.make_mock_regression_pipeline",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_with_objective_that_requires_predict_proba": {
  "data": {
   "lineno": 785,
   "symbols_in_volume": [
    "dummy_regression_pipeline_class",
    "evalml.exceptions.PipelineScoreError",
    "evalml.tests.pipeline_tests.test_pipelines.pytest",
    "numpy.array",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_serialization": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "evalml.pipelines.PipelineBase.load",
    "evalml.tests.pipeline_tests.test_pipelines.os",
    "logistic_regression_binary_pipeline_class",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_serialization_protocol": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "evalml.tests.pipeline_tests.test_pipelines.cloudpickle",
    "evalml.tests.pipeline_tests.test_pipelines.os",
    "len",
    "logistic_regression_binary_pipeline_class",
    "str",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_targets_data_types_classification_pipelines": {
  "data": {
   "lineno": 964,
   "symbols_in_volume": [
    "evalml.demos.load_breast_cancer",
    "evalml.demos.load_wine",
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.tests.pipeline_tests.test_pipelines.pytest",
    "float",
    "int",
    "len",
    "pandas.Categorical",
    "pipeline_class",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.preprocessing_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.X_y_na": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "evalml.tests.preprocessing_tests.test_drop_na_rows.pytest",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series"
   ]
  },
  "type": "function"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.assert_frame_equal": {
  "data": {
   "shadows": "pandas.testing.assert_frame_equal"
  },
  "type": "import"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.assert_series_equal": {
  "data": {
   "shadows": "pandas.testing.assert_series_equal"
  },
  "type": "import"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.drop_nan_target_rows": {
  "data": {
   "shadows": "evalml.preprocessing.utils.drop_nan_target_rows"
  },
  "type": "import"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.test_drop_nan_target_rows": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "evalml.preprocessing.utils.drop_nan_target_rows",
    "evalml.tests.preprocessing_tests.test_drop_na_rows.X_y_na",
    "pandas.Series",
    "pandas.testing.assert_frame_equal",
    "pandas.testing.assert_series_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.test_with_numpy_input": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "evalml.preprocessing.utils.drop_nan_target_rows",
    "evalml.tests.preprocessing_tests.test_drop_na_rows.X_y_na",
    "numpy.array",
    "numpy.nan",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.testing.assert_frame_equal",
    "pandas.testing.assert_series_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.preprocessing_tests.test_split_data": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.preprocessing_tests.test_split_data.split_data": {
  "data": {
   "shadows": "evalml.preprocessing.split_data"
  },
  "type": "import"
 },
 "evalml.tests.preprocessing_tests.test_split_data.test_split_classification": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "evalml.preprocessing.split_data",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.preprocessing_tests.test_split_data.test_split_regression": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "evalml.preprocessing.split_data",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.problem_type_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.problem_type_tests.test_problem_types": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.problem_type_tests.test_problem_types.ProblemTypes": {
  "data": {
   "shadows": "evalml.problem_types.ProblemTypes"
  },
  "type": "import"
 },
 "evalml.tests.problem_type_tests.test_problem_types.correct_problem_types": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "evalml.problem_types.ProblemTypes.BINARY",
    "evalml.problem_types.ProblemTypes.MULTICLASS",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "evalml.tests.problem_type_tests.test_problem_types.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.problem_type_tests.test_problem_types.handle_problem_types": {
  "data": {
   "shadows": "evalml.problem_types.handle_problem_types"
  },
  "type": "import"
 },
 "evalml.tests.problem_type_tests.test_problem_types.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.problem_type_tests.test_problem_types.test_handle_incorrect_type": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "ValueError",
    "evalml.problem_types.handle_problem_types",
    "evalml.tests.problem_type_tests.test_problem_types.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.problem_type_tests.test_problem_types.test_handle_problem_types": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "evalml.problem_types.handle_problem_types",
    "evalml.tests.problem_type_tests.test_problem_types.correct_problem_types"
   ]
  },
  "type": "function"
 },
 "evalml.tests.problem_type_tests.test_problem_types.test_handle_string": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "KeyError",
    "evalml.problem_types.ProblemTypes.REGRESSION",
    "evalml.problem_types.handle_problem_types",
    "evalml.tests.problem_type_tests.test_problem_types.correct_problem_types",
    "evalml.tests.problem_type_tests.test_problem_types.pytest",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.GridSearchTuner": {
  "data": {
   "shadows": "evalml.tuners.GridSearchTuner"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.NoParamsException": {
  "data": {
   "shadows": "evalml.tuners.NoParamsException"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.Tuner": {
  "data": {
   "shadows": "evalml.tuners.tuner.Tuner"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_basic": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "evalml.tuners.GridSearchTuner"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_inheritance": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "evalml.tuners.GridSearchTuner",
    "evalml.tuners.tuner.Tuner",
    "issubclass"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_invalid_space": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "evalml.tests.tuner_tests.test_grid_search_tuner.pytest",
    "evalml.tuners.GridSearchTuner"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_no_params": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "evalml.tests.tuner_tests.test_grid_search_tuner.pytest",
    "evalml.tuners.GridSearchTuner",
    "evalml.tuners.NoParamsException",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_space_types": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "evalml.tuners.GridSearchTuner"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_unique_values": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "evalml.tuners.GridSearchTuner",
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.NoParamsException": {
  "data": {
   "shadows": "evalml.tuners.NoParamsException"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.RandomSearchTuner": {
  "data": {
   "shadows": "evalml.tuners.RandomSearchTuner"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.Tuner": {
  "data": {
   "shadows": "evalml.tuners.tuner.Tuner"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.random_state": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_basic": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "evalml.tests.tuner_tests.test_random_search_tuner.random_state",
    "evalml.tuners.RandomSearchTuner",
    "numpy.inf"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_inheritance": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "evalml.tuners.RandomSearchTuner",
    "evalml.tuners.tuner.Tuner",
    "issubclass"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_invalid_space": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "ValueError",
    "evalml.tests.tuner_tests.test_random_search_tuner.pytest",
    "evalml.tests.tuner_tests.test_random_search_tuner.random_state",
    "evalml.tuners.RandomSearchTuner"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_no_params": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "evalml.tests.tuner_tests.test_random_search_tuner.pytest",
    "evalml.tests.tuner_tests.test_random_search_tuner.random_state",
    "evalml.tuners.NoParamsException",
    "evalml.tuners.RandomSearchTuner",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_space_types": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "evalml.tests.tuner_tests.test_random_search_tuner.random_state",
    "evalml.tuners.RandomSearchTuner"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_unique_values": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "evalml.tests.tuner_tests.test_random_search_tuner.random_state",
    "evalml.tuners.RandomSearchTuner",
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_with_replacement": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "dict",
    "evalml.tests.tuner_tests.test_random_search_tuner.random_state",
    "evalml.tuners.RandomSearchTuner",
    "isinstance",
    "range"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.ParameterError": {
  "data": {
   "shadows": "evalml.tuners.ParameterError"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.SKOptTuner": {
  "data": {
   "shadows": "evalml.tuners.skopt_tuner.SKOptTuner"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.Tuner": {
  "data": {
   "shadows": "evalml.tuners.Tuner"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.random_state": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_basic": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "evalml.tests.tuner_tests.test_skopt_tuner.random_state",
    "evalml.tuners.Tuner",
    "evalml.tuners.skopt_tuner.SKOptTuner",
    "isinstance",
    "numpy.inf",
    "skopt.space.Integer",
    "skopt.space.Real"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_init": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "ValueError",
    "evalml.tests.tuner_tests.test_skopt_tuner.pytest",
    "evalml.tuners.skopt_tuner.SKOptTuner"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_invalid_parameters_score": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "Exception",
    "TypeError",
    "ValueError",
    "evalml.tests.tuner_tests.test_skopt_tuner.pytest",
    "evalml.tests.tuner_tests.test_skopt_tuner.random_state",
    "evalml.tuners.ParameterError",
    "evalml.tuners.skopt_tuner.SKOptTuner",
    "numpy.inf",
    "numpy.nan",
    "print",
    "skopt.space.Integer",
    "skopt.space.Real",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_invalid_ranges": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "ValueError",
    "evalml.tests.tuner_tests.test_skopt_tuner.pytest",
    "evalml.tests.tuner_tests.test_skopt_tuner.random_state",
    "evalml.tuners.skopt_tuner.SKOptTuner",
    "skopt.space.Integer",
    "skopt.space.Real"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_is_search_space_exhausted": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "evalml.tuners.skopt_tuner.SKOptTuner"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_propose": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "evalml.tests.tuner_tests.test_skopt_tuner.random_state",
    "evalml.tuners.skopt_tuner.SKOptTuner",
    "print",
    "skopt.space.Integer",
    "skopt.space.Real"
   ]
  },
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_tuner_init": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "TypeError",
    "evalml.tests.tuner_tests.test_skopt_tuner.pytest",
    "evalml.tuners.Tuner"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.utils_tests.test_cli_utils": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.utils_tests.test_cli_utils.CliRunner": {
  "data": {
   "shadows": "click.testing.CliRunner"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.cli": {
  "data": {
   "shadows": "evalml.__main__.cli"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.current_dir": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_cli_utils.os",
    "evalml.tests.utils_tests.test_cli_utils.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.get_core_requirements": {
  "data": {
   "shadows": "evalml.utils.cli_utils.get_core_requirements"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.get_evalml_root": {
  "data": {
   "shadows": "evalml.utils.cli_utils.get_evalml_root"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.get_installed_packages": {
  "data": {
   "shadows": "evalml.utils.cli_utils.get_installed_packages"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.get_sys_info": {
  "data": {
   "shadows": "evalml.utils.cli_utils.get_sys_info"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.print_deps": {
  "data": {
   "shadows": "evalml.utils.cli_utils.print_deps"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.print_info": {
  "data": {
   "shadows": "evalml.utils.cli_utils.print_info"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.print_sys_info": {
  "data": {
   "shadows": "evalml.utils.cli_utils.print_sys_info"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_get_core_requirements": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.get_core_requirements",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_get_evalml_root": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_cli_utils.current_dir",
    "evalml.tests.utils_tests.test_cli_utils.os",
    "evalml.utils.cli_utils.get_evalml_root"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_installed_packages": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.get_core_requirements",
    "evalml.utils.cli_utils.get_installed_packages",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_print_cli_cmd": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "click.testing.CliRunner",
    "evalml.__main__.cli"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_print_cli_info_cmd": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "click.testing.CliRunner",
    "evalml.__main__.cli"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_print_deps_info": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.get_core_requirements",
    "evalml.utils.cli_utils.print_deps"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_print_info": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.print_info"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_print_sys_info": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.print_sys_info"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_sys_info": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.get_sys_info",
    "set"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_sys_info_error": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "ValueError",
    "evalml.utils.cli_utils.get_sys_info",
    "len",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_dependencies": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.utils_tests.test_dependencies.import_module": {
  "data": {
   "shadows": "importlib.import_module"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_dependencies.pathlib": {
  "data": {
   "shadows": "pathlib"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_dependencies.requirements": {
  "data": {
   "shadows": "requirements"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_dependencies.test_has_minimal_deps": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "ImportError",
    "evalml.tests.utils_tests.test_dependencies.pathlib",
    "evalml.tests.utils_tests.test_dependencies.requirements",
    "importlib.import_module",
    "open"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.utils_tests.test_gen_utils.ComponentBase": {
  "data": {
   "shadows": "evalml.pipelines.components.ComponentBase"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.SEED_BOUNDS": {
  "data": {
   "shadows": "evalml.utils.gen_utils.SEED_BOUNDS"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.classproperty": {
  "data": {
   "shadows": "evalml.utils.gen_utils.classproperty"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.convert_to_seconds": {
  "data": {
   "shadows": "evalml.utils.gen_utils.convert_to_seconds"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.get_importable_subclasses": {
  "data": {
   "shadows": "evalml.utils.gen_utils.get_importable_subclasses"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.get_random_seed": {
  "data": {
   "shadows": "evalml.utils.gen_utils.get_random_seed"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.get_random_state": {
  "data": {
   "shadows": "evalml.utils.gen_utils.get_random_state"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.import_or_raise": {
  "data": {
   "shadows": "evalml.utils.gen_utils.import_or_raise"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_class_property": {
  "data": {
   "lineno": 158
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_class_property.MockClass": {
  "data": {
   "lineno": 159
  },
  "type": "class"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_class_property.MockClass.caps_name": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "evalml.utils.gen_utils.classproperty"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_convert_to_seconds": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "AssertionError",
    "evalml.tests.utils_tests.test_gen_utils.pytest",
    "evalml.utils.gen_utils.convert_to_seconds"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_importable_subclasses_wont_get_custom_classes": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "evalml.pipelines.components.ComponentBase",
    "evalml.utils.gen_utils.get_importable_subclasses"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_importable_subclasses_wont_get_custom_classes.ChildClass": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "evalml.pipelines.components.ComponentBase"
   ]
  },
  "type": "class"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_int": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "ValueError",
    "evalml.tests.utils_tests.test_gen_utils.inspect",
    "evalml.tests.utils_tests.test_gen_utils.pytest",
    "evalml.utils.gen_utils.SEED_BOUNDS.max_bound",
    "evalml.utils.gen_utils.SEED_BOUNDS.min_bound",
    "evalml.utils.gen_utils.get_random_seed",
    "get_random_seed_vec",
    "make_expected_values",
    "numpy.arange",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_int.get_random_seed_vec": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "numpy.vectorize"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_int.get_random_seed_vec.get_random_seed_wrapper": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "evalml.utils.gen_utils.get_random_seed"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_int.make_expected_values": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_rng": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "evalml.utils.gen_utils.SEED_BOUNDS.max_bound",
    "evalml.utils.gen_utils.SEED_BOUNDS.min_bound",
    "evalml.utils.gen_utils.get_random_seed",
    "make_mock_random_state"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_rng.make_mock_random_state": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "MockRandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_rng.make_mock_random_state.MockRandomState": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "class"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_rng.make_mock_random_state.MockRandomState.__init__": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_rng.make_mock_random_state.MockRandomState.randint": {
  "data": {
   "lineno": 86
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_state_int": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "ValueError",
    "abs",
    "evalml.tests.utils_tests.test_gen_utils.pytest",
    "evalml.utils.gen_utils.SEED_BOUNDS.max_bound",
    "evalml.utils.gen_utils.SEED_BOUNDS.min_bound",
    "evalml.utils.gen_utils.get_random_state",
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_import_or_raise_errors": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "Exception",
    "ImportError",
    "evalml.tests.utils_tests.test_gen_utils.pytest",
    "evalml.utils.gen_utils.import_or_raise",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_import_or_raise_errors._mock_import_function": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "Exception",
    "ImportError"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_import_or_raise_imports": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "evalml.utils.gen_utils.import_or_raise"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger": {
  "data": {},
  "type": "module"
 },
 "evalml.tests.utils_tests.test_logger.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "evalml.tests.utils_tests.test_logger.call": {
  "data": {
   "shadows": "unittest.mock.call"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_logger.get_logger": {
  "data": {
   "shadows": "evalml.utils.logger.get_logger"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_logger.log_subtitle": {
  "data": {
   "shadows": "evalml.utils.logger.log_subtitle"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_logger.log_title": {
  "data": {
   "shadows": "evalml.utils.logger.log_title"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_logger.logger_env_cleanup": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.tests.utils_tests.test_logger.logging",
    "evalml.tests.utils_tests.test_logger.os",
    "evalml.tests.utils_tests.test_logger.pytest"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_logger.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_logger.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_logger.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_logger.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.tests.utils_tests.test_logger.logging",
    "evalml.utils.logger.get_logger",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_default": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.tests.utils_tests.test_logger.logging",
    "evalml.tests.utils_tests.test_logger.os",
    "evalml.utils.logger.get_logger",
    "len",
    "pathlib.Path",
    "unittest.mock.call",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_exception": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "Exception",
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.tests.utils_tests.test_logger.os",
    "evalml.utils.logger.get_logger",
    "len",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_path_empty": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.tests.utils_tests.test_logger.os",
    "evalml.utils.logger.get_logger",
    "len",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_path_invalid": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.tests.utils_tests.test_logger.os",
    "evalml.tests.utils_tests.test_logger.tempfile",
    "evalml.utils.logger.get_logger",
    "len",
    "pathlib.Path",
    "str",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_path_valid": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.tests.utils_tests.test_logger.logging",
    "evalml.tests.utils_tests.test_logger.os",
    "evalml.tests.utils_tests.test_logger.tempfile",
    "evalml.utils.logger.get_logger",
    "len",
    "pathlib.Path",
    "str",
    "unittest.mock.call",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_path_valid_but_dir": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.tests.utils_tests.test_logger.os",
    "evalml.tests.utils_tests.test_logger.tempfile",
    "evalml.utils.logger.get_logger",
    "len",
    "unittest.mock.patch"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_logger_critical": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.utils.logger.get_logger"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_logger_error": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.utils.logger.get_logger"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_logger_info": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.utils.logger.get_logger"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_logger_title": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.utils.logger.get_logger",
    "evalml.utils.logger.log_subtitle",
    "evalml.utils.logger.log_title"
   ]
  },
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_logger_warn": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "evalml.tests.utils_tests.test_logger.TEST_LOGGER_NAME",
    "evalml.utils.logger.get_logger"
   ]
  },
  "type": "function"
 },
 "evalml.tuners": {
  "data": {},
  "type": "module"
 },
 "evalml.tuners.grid_search_tuner": {
  "data": {},
  "type": "module"
 },
 "evalml.tuners.grid_search_tuner.GridSearchTuner": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "evalml.tuners.grid_search_tuner.GridSearchTuner.__init__": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "evalml.tuners.grid_search_tuner.itertools",
    "float",
    "int",
    "isinstance",
    "list",
    "range",
    "skopt.space.Integer",
    "skopt.space.Real",
    "super",
    "tuple"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.grid_search_tuner.GridSearchTuner.add": {
  "data": {
   "lineno": 57
  },
  "type": "function"
 },
 "evalml.tuners.grid_search_tuner.GridSearchTuner.is_search_space_exhausted": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "NoParamsException",
    "StopIteration",
    "next"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.grid_search_tuner.GridSearchTuner.propose": {
  "data": {
   "lineno": 67
  },
  "type": "function"
 },
 "evalml.tuners.grid_search_tuner.Integer": {
  "data": {
   "shadows": "skopt.space.Integer"
  },
  "type": "import"
 },
 "evalml.tuners.grid_search_tuner.Real": {
  "data": {
   "shadows": "skopt.space.Real"
  },
  "type": "import"
 },
 "evalml.tuners.grid_search_tuner.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "evalml.tuners.random_search_tuner": {
  "data": {},
  "type": "module"
 },
 "evalml.tuners.random_search_tuner.NoParamsException": {
  "data": {
   "shadows": "evalml.tuners.NoParamsException"
  },
  "type": "import"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "evalml.tuners.Tuner"
   ]
  },
  "type": "class"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner.__init__": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "evalml.utils.get_random_state",
    "set",
    "skopt.Space",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner._get_sample": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "tuple"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner.add": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner.is_search_space_exhausted": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "evalml.tuners.NoParamsException"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner.propose": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "evalml.tuners.random_search_tuner.Space": {
  "data": {
   "shadows": "skopt.Space"
  },
  "type": "import"
 },
 "evalml.tuners.random_search_tuner.Tuner": {
  "data": {
   "shadows": "evalml.tuners.Tuner"
  },
  "type": "import"
 },
 "evalml.tuners.random_search_tuner.get_random_state": {
  "data": {
   "shadows": "evalml.utils.get_random_state"
  },
  "type": "import"
 },
 "evalml.tuners.skopt_tuner": {
  "data": {
   "symbols_in_volume": [
    "evalml.utils.logger.get_logger"
   ]
  },
  "type": "module"
 },
 "evalml.tuners.skopt_tuner.Optimizer": {
  "data": {
   "shadows": "skopt.Optimizer"
  },
  "type": "import"
 },
 "evalml.tuners.skopt_tuner.SKOptTuner": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "evalml.tuners.skopt_tuner.SKOptTuner.__init__": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "skopt.Optimizer",
    "super"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.skopt_tuner.SKOptTuner.add": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "Exception",
    "ParameterError",
    "evalml.tuners.skopt_tuner.logger",
    "pandas.isnull",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.skopt_tuner.SKOptTuner.propose": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "evalml.tuners.skopt_tuner.warnings"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.skopt_tuner.get_logger": {
  "data": {
   "shadows": "evalml.utils.logger.get_logger"
  },
  "type": "import"
 },
 "evalml.tuners.skopt_tuner.logger": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "evalml.tuners.skopt_tuner.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "evalml.tuners.skopt_tuner.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "evalml.tuners.tuner": {
  "data": {},
  "type": "module"
 },
 "evalml.tuners.tuner.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "evalml.tuners.tuner.Tuner": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "abc.ABC"
   ]
  },
  "type": "class"
 },
 "evalml.tuners.tuner.Tuner.__init__": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "isinstance",
    "list",
    "type"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.tuner.Tuner._convert_to_flat_parameters": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.tuner.Tuner._convert_to_pipeline_parameters": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "dict",
    "zip"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.tuner.Tuner.add": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "abc.abstractmethod"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.tuner.Tuner.is_search_space_exhausted": {
  "data": {
   "lineno": 74
  },
  "type": "function"
 },
 "evalml.tuners.tuner.Tuner.propose": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "abc.abstractmethod"
   ]
  },
  "type": "function"
 },
 "evalml.tuners.tuner.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "evalml.tuners.tuner_exceptions": {
  "data": {},
  "type": "module"
 },
 "evalml.tuners.tuner_exceptions.NoParamsException": {
  "data": {
   "lineno": 1,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "evalml.tuners.tuner_exceptions.ParameterError": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "evalml.utils": {
  "data": {},
  "type": "module"
 },
 "evalml.utils.cli_utils": {
  "data": {
   "symbols_in_volume": [
    "evalml.utils.get_logger"
   ]
  },
  "type": "module"
 },
 "evalml.utils.cli_utils.bytes2human": {
  "data": {
   "shadows": "psutil._common.bytes2human"
  },
  "type": "import"
 },
 "evalml.utils.cli_utils.evalml": {
  "data": {
   "shadows": "evalml"
  },
  "type": "import"
 },
 "evalml.utils.cli_utils.get_core_requirements": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.evalml",
    "evalml.utils.cli_utils.os",
    "evalml.utils.cli_utils.requirements",
    "open"
   ]
  },
  "type": "function"
 },
 "evalml.utils.cli_utils.get_evalml_root": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.evalml",
    "evalml.utils.cli_utils.os"
   ]
  },
  "type": "function"
 },
 "evalml.utils.cli_utils.get_installed_packages": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.pkg_resources"
   ]
  },
  "type": "function"
 },
 "evalml.utils.cli_utils.get_logger": {
  "data": {
   "shadows": "evalml.utils.get_logger"
  },
  "type": "import"
 },
 "evalml.utils.cli_utils.get_sys_info": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "evalml.utils.cli_utils.locale",
    "evalml.utils.cli_utils.os",
    "evalml.utils.cli_utils.platform",
    "evalml.utils.cli_utils.psutil",
    "evalml.utils.cli_utils.struct",
    "evalml.utils.cli_utils.sys",
    "map",
    "psutil._common.bytes2human",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.utils.cli_utils.locale": {
  "data": {
   "shadows": "locale"
  },
  "type": "import"
 },
 "evalml.utils.cli_utils.logger": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "evalml.utils.cli_utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "evalml.utils.cli_utils.pkg_resources": {
  "data": {
   "shadows": "pkg_resources"
  },
  "type": "import"
 },
 "evalml.utils.cli_utils.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "evalml.utils.cli_utils.print_deps": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.logger",
    "get_installed_packages"
   ]
  },
  "type": "function"
 },
 "evalml.utils.cli_utils.print_info": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.evalml",
    "evalml.utils.cli_utils.get_core_requirements",
    "evalml.utils.cli_utils.logger",
    "get_evalml_root",
    "print_deps",
    "print_sys_info"
   ]
  },
  "type": "function"
 },
 "evalml.utils.cli_utils.print_sys_info": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "evalml.utils.cli_utils.logger",
    "get_sys_info"
   ]
  },
  "type": "function"
 },
 "evalml.utils.cli_utils.psutil": {
  "data": {
   "shadows": "psutil"
  },
  "type": "import"
 },
 "evalml.utils.cli_utils.requirements": {
  "data": {
   "shadows": "requirements"
  },
  "type": "import"
 },
 "evalml.utils.cli_utils.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "evalml.utils.cli_utils.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "evalml.utils.gen_utils": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple",
    "evalml.utils.gen_utils.boolean",
    "evalml.utils.gen_utils.numeric_dtypes",
    "evalml.utils.get_logger"
   ]
  },
  "type": "module"
 },
 "evalml.utils.gen_utils.MissingComponentError": {
  "data": {
   "shadows": "evalml.exceptions.MissingComponentError"
  },
  "type": "import"
 },
 "evalml.utils.gen_utils.SEED_BOUNDS": {
  "data": {
   "lineno": 61
  },
  "type": "constant"
 },
 "evalml.utils.gen_utils._get_subclasses": {
  "data": {
   "lineno": 122
  },
  "type": "function"
 },
 "evalml.utils.gen_utils._not_used_in_automl": {
  "data": {
   "lineno": 147
  },
  "type": "constant"
 },
 "evalml.utils.gen_utils.boolean": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "evalml.utils.gen_utils.categorical_dtypes": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "evalml.utils.gen_utils.check_random_state": {
  "data": {
   "shadows": "sklearn.utils.check_random_state"
  },
  "type": "import"
 },
 "evalml.utils.gen_utils.classproperty": {
  "data": {
   "lineno": 97
  },
  "type": "class"
 },
 "evalml.utils.gen_utils.classproperty.__get__": {
  "data": {
   "lineno": 118
  },
  "type": "function"
 },
 "evalml.utils.gen_utils.classproperty.__init__": {
  "data": {
   "lineno": 115
  },
  "type": "function"
 },
 "evalml.utils.gen_utils.convert_to_seconds": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "AssertionError",
    "float",
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.utils.gen_utils.get_importable_subclasses": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "ImportError",
    "TypeError",
    "cls",
    "cls.__name__",
    "evalml.exceptions.MissingComponentError",
    "evalml.utils.gen_utils._get_subclasses",
    "evalml.utils.gen_utils._not_used_in_automl",
    "evalml.utils.gen_utils.logger"
   ]
  },
  "type": "function"
 },
 "evalml.utils.gen_utils.get_logger": {
  "data": {
   "shadows": "evalml.utils.get_logger"
  },
  "type": "import"
 },
 "evalml.utils.gen_utils.get_random_seed": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "ValueError",
    "evalml.utils.gen_utils.SEED_BOUNDS",
    "isinstance",
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "evalml.utils.gen_utils.get_random_state": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "ValueError",
    "evalml.utils.gen_utils.SEED_BOUNDS",
    "int",
    "isinstance",
    "numpy.integer",
    "sklearn.utils.check_random_state"
   ]
  },
  "type": "function"
 },
 "evalml.utils.gen_utils.import_or_raise": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "Exception",
    "ImportError",
    "evalml.utils.gen_utils.importlib",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.utils.gen_utils.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "evalml.utils.gen_utils.logger": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "evalml.utils.gen_utils.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "evalml.utils.gen_utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "evalml.utils.gen_utils.numeric_and_boolean_dtypes": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "evalml.utils.gen_utils.numeric_dtypes": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "evalml.utils.logger": {
  "data": {},
  "type": "module"
 },
 "evalml.utils.logger.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "evalml.utils.logger.RotatingFileHandler": {
  "data": {
   "shadows": "logging.handlers.RotatingFileHandler"
  },
  "type": "import"
 },
 "evalml.utils.logger.get_logger": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "Exception",
    "evalml.utils.logger.logging",
    "evalml.utils.logger.os",
    "evalml.utils.logger.sys",
    "evalml.utils.logger.traceback",
    "len",
    "logging.handlers.RotatingFileHandler",
    "pathlib.Path",
    "print",
    "str"
   ]
  },
  "type": "function"
 },
 "evalml.utils.logger.log_subtitle": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.utils.logger.log_title": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "evalml.utils.logger.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "evalml.utils.logger.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "evalml.utils.logger.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "evalml.utils.logger.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "evalml.utils.logger.time_elapsed": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "evalml.utils.logger.time",
    "evalml.utils.logger.tqdm"
   ]
  },
  "type": "function"
 },
 "evalml.utils.logger.tqdm": {
  "data": {
   "shadows": "tqdm"
  },
  "type": "import"
 },
 "evalml.utils.logger.traceback": {
  "data": {
   "shadows": "traceback"
  },
  "type": "import"
 },
 "evalml.utils.logger.update_pipeline": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "evalml.utils.logger.time_elapsed"
   ]
  },
  "type": "function"
 },
 "evalml.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 }
}