{
 "planarity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "planarity.planarity_functions": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "planarity.planarity_functions.ascii": {
  "lineno": 14,
  "symbols_in_volume": [
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.planarity_functions.is_planar": {
  "lineno": 6,
  "symbols_in_volume": [
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.planarity_functions.kuratowski_edges": {
  "lineno": 10,
  "symbols_in_volume": [
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.planarity_functions.mapping": {
  "lineno": 22,
  "symbols_in_volume": [
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.planarity_functions.write": {
  "lineno": 18,
  "symbols_in_volume": [
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.planarity_networkx": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "planarity.planarity_networkx.draw": {
  "lineno": 32,
  "symbols_in_volume": [
   "ImportError",
   "dict",
   "int",
   "matplotlib.collections.PatchCollection",
   "matplotlib.patches.Circle",
   "matplotlib.pyplot.axis",
   "matplotlib.pyplot.gca",
   "matplotlib.pyplot.hlines",
   "matplotlib.pyplot.text",
   "matplotlib.pyplot.vlines",
   "matplotlib.pyplot.xlim",
   "matplotlib.pyplot.ylim",
   "max",
   "min",
   "networkx_graph",
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.planarity_networkx.kuratowski_subgraph": {
  "lineno": 7,
  "symbols_in_volume": [
   "ImportError",
   "networkx.Graph",
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.planarity_networkx.networkx_graph": {
  "lineno": 17,
  "symbols_in_volume": [
   "ImportError",
   "networkx.Graph"
  ],
  "type": "function"
 },
 "planarity.planarity_networkx.pgraph_graph": {
  "lineno": 28,
  "symbols_in_volume": [
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "planarity.tests.test": {
  "lineno": null,
  "symbols_in_volume": [
   "__name__",
   "run"
  ],
  "type": "module"
 },
 "planarity.tests.test.run": {
  "lineno": 5,
  "symbols_in_volume": [
   "ImportError",
   "nose.run",
   "os.path.dirname",
   "os.path.join",
   "os.path.pardir"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "planarity.tests.test_planarity.TestPlanarity": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "planarity.tests.test_planarity.TestPlanarity.setUp": {
  "lineno": 11,
  "symbols_in_volume": [
   "list",
   "set"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_draw_text": {
  "lineno": 112,
  "symbols_in_volume": [
   "nose.tools.assert_equal",
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_goldner_harary": {
  "lineno": 85,
  "symbols_in_volume": [
   "nose.tools.assert_true",
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_is_planar_adj_input": {
  "lineno": 64,
  "symbols_in_volume": [
   "nose.tools.assert_false",
   "nose.tools.assert_true",
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_is_planar_adj_input_function": {
  "lineno": 70,
  "symbols_in_volume": [
   "nose.tools.assert_false",
   "planarity.is_planar"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_is_planar_adj_list": {
  "lineno": 81,
  "symbols_in_volume": [
   "nose.tools.assert_false",
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_is_planar_adj_set": {
  "lineno": 77,
  "symbols_in_volume": [
   "nose.tools.assert_false",
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_is_planar_adj_symmetric": {
  "lineno": 73,
  "symbols_in_volume": [
   "nose.tools.assert_false",
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_is_planar_edgelist_input": {
  "lineno": 55,
  "symbols_in_volume": [
   "nose.tools.assert_false",
   "nose.tools.assert_true",
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_is_planar_edgelist_input_function": {
  "lineno": 61,
  "symbols_in_volume": [
   "nose.tools.assert_false",
   "planarity.is_planar"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_kuratowski_k5": {
  "lineno": 96,
  "symbols_in_volume": [
   "nose.tools.assert_equal",
   "planarity.PGraph",
   "sorted"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_kuratowski_k5_function": {
  "lineno": 101,
  "symbols_in_volume": [
   "nose.tools.assert_equal",
   "planarity.kuratowski_edges",
   "sorted"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_no_kuratowski_k5m": {
  "lineno": 105,
  "symbols_in_volume": [
   "nose.tools.assert_equal",
   "planarity.PGraph"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity.TestPlanarity.test_write_adjlist": {
  "lineno": 118,
  "symbols_in_volume": [
   "nose.tools.assert_equal",
   "open",
   "os.unlink",
   "planarity.PGraph",
   "tempfile.mktemp"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity_networkx": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "planarity.tests.test_planarity_networkx.TestPlanarityNetworkX": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "planarity.tests.test_planarity_networkx.TestPlanarityNetworkX.setUp": {
  "lineno": 7,
  "symbols_in_volume": [
   "ImportError",
   "networkx.complete_bipartite_graph",
   "networkx.complete_graph",
   "networkx.path_graph",
   "nose.SkipTest"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity_networkx.TestPlanarityNetworkX.test_goldner_harary": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.Graph",
   "nose.tools.assert_true",
   "planarity.is_planar"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity_networkx.TestPlanarityNetworkX.test_is_planar": {
  "lineno": 21,
  "symbols_in_volume": [
   "nose.tools.assert_false",
   "nose.tools.assert_true",
   "planarity.is_planar"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity_networkx.TestPlanarityNetworkX.test_is_planar_unions": {
  "lineno": 27,
  "symbols_in_volume": [
   "ImportError",
   "itertools.combinations",
   "itertools.product",
   "networkx.disjoint_union",
   "nose.SkipTest",
   "nose.tools.assert_false",
   "nose.tools.assert_true",
   "planarity.is_planar"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity_networkx.TestPlanarityNetworkX.test_kuratowski_k5": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "nose.tools.assert_equal",
   "planarity.kuratowski_subgraph",
   "sorted"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity_networkx.TestPlanarityNetworkX.test_kuratowski_k5m": {
  "lineno": 62,
  "symbols_in_volume": [
   "list",
   "networkx.complete_graph",
   "nose.tools.assert_equal",
   "planarity.kuratowski_subgraph"
  ],
  "type": "function"
 },
 "planarity.tests.test_planarity_networkx.TestPlanarityNetworkX.test_networkx_graph": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.Graph",
   "nose.tools.assert_equal",
   "planarity.PGraph",
   "planarity.networkx_graph",
   "sorted"
  ],
  "type": "function"
 }
}