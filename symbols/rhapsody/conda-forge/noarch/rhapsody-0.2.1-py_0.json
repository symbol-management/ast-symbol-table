{
 "rhapsody": {
  "data": {},
  "type": "module"
 },
 "rhapsody.__version__": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "rhapsody.multimodal": {
  "data": {},
  "type": "module"
 },
 "rhapsody.multimodal.MMvec": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "rhapsody.multimodal.MMvec.__call__": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "len",
    "numpy.array",
    "tensorflow.SparseTensor",
    "tensorflow.Variable",
    "tensorflow.abs",
    "tensorflow.clip_by_global_norm",
    "tensorflow.concat",
    "tensorflow.constant",
    "tensorflow.contrib.distributions.Multinomial",
    "tensorflow.contrib.distributions.Normal",
    "tensorflow.device",
    "tensorflow.float32",
    "tensorflow.gather",
    "tensorflow.global_variables_initializer",
    "tensorflow.log",
    "tensorflow.multinomial",
    "tensorflow.name_scope",
    "tensorflow.nn.softmax",
    "tensorflow.ones",
    "tensorflow.random_normal",
    "tensorflow.reduce_mean",
    "tensorflow.reduce_sum",
    "tensorflow.reshape",
    "tensorflow.squeeze",
    "tensorflow.summary.FileWriter",
    "tensorflow.summary.histogram",
    "tensorflow.summary.merge_all",
    "tensorflow.summary.scalar",
    "tensorflow.train.AdamOptimizer",
    "tensorflow.zeros",
    "zip"
   ]
  },
  "type": "function"
 },
 "rhapsody.multimodal.MMvec.__init__": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "rhapsody.multimodal.datetime"
   ]
  },
  "type": "function"
 },
 "rhapsody.multimodal.MMvec.fit": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "range",
    "rhapsody.multimodal.os",
    "rhapsody.multimodal.time",
    "tensorflow.train.Saver",
    "tqdm.tqdm"
   ]
  },
  "type": "function"
 },
 "rhapsody.multimodal.MMvec.predict": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "numpy.hstack",
    "numpy.ones",
    "numpy.vstack",
    "numpy.zeros",
    "onehot",
    "skbio.stats.composition.clr_inv"
   ]
  },
  "type": "function"
 },
 "rhapsody.multimodal.Multinomial": {
  "data": {
   "shadows": "tensorflow.contrib.distributions.Multinomial"
  },
  "type": "import"
 },
 "rhapsody.multimodal.Normal": {
  "data": {
   "shadows": "tensorflow.contrib.distributions.Normal"
  },
  "type": "import"
 },
 "rhapsody.multimodal.cross_validation": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "len",
    "numpy.argsort",
    "numpy.isnan",
    "numpy.mean",
    "onehot",
    "pandas.DataFrame",
    "pandas.Series",
    "print",
    "range",
    "scipy.stats.spearmanr",
    "set"
   ]
  },
  "type": "function"
 },
 "rhapsody.multimodal.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "rhapsody.multimodal.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "rhapsody.multimodal.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "rhapsody.multimodal.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "rhapsody.multimodal.softmax": {
  "data": {
   "shadows": "skbio.stats.composition.clr_inv"
  },
  "type": "import"
 },
 "rhapsody.multimodal.spearmanr": {
  "data": {
   "shadows": "scipy.stats.spearmanr"
  },
  "type": "import"
 },
 "rhapsody.multimodal.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "rhapsody.multimodal.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "rhapsody.multimodal.tqdm": {
  "data": {
   "shadows": "tqdm.tqdm"
  },
  "type": "import"
 },
 "rhapsody.q2": {
  "data": {},
  "type": "module"
 },
 "rhapsody.q2.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "rhapsody.q2._method": {
  "data": {},
  "type": "module"
 },
 "rhapsody.q2._method.MMvec": {
  "data": {
   "shadows": "rhapsody.multimodal.MMvec"
  },
  "type": "import"
 },
 "rhapsody.q2._method.Metadata": {
  "data": {
   "shadows": "qiime2.plugin.Metadata"
  },
  "type": "import"
 },
 "rhapsody.q2._method.OrdinationResults": {
  "data": {
   "shadows": "skbio.OrdinationResults"
  },
  "type": "import"
 },
 "rhapsody.q2._method.biom": {
  "data": {
   "shadows": "biom"
  },
  "type": "import"
 },
 "rhapsody.q2._method.clr": {
  "data": {
   "shadows": "skbio.stats.composition.clr"
  },
  "type": "import"
 },
 "rhapsody.q2._method.clr_inv": {
  "data": {
   "shadows": "skbio.stats.composition.clr_inv"
  },
  "type": "import"
 },
 "rhapsody.q2._method.coo_matrix": {
  "data": {
   "shadows": "scipy.sparse.coo_matrix"
  },
  "type": "import"
 },
 "rhapsody.q2._method.mmvec": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "float",
    "int",
    "len",
    "model",
    "model.U",
    "model.U.shape",
    "model.Ubias.reshape",
    "model.V",
    "model.V.shape",
    "model.Vbias.reshape",
    "model.fit",
    "numpy.hstack",
    "numpy.ones",
    "numpy.vstack",
    "numpy.zeros",
    "pandas.DataFrame",
    "pandas.Series",
    "qiime2.plugin.Metadata",
    "range",
    "rhapsody.multimodal.MMvec",
    "rhapsody.q2._method.biom",
    "rhapsody.util.split_tables",
    "scipy.sparse.coo_matrix",
    "skbio.OrdinationResults",
    "skbio.stats.composition.clr",
    "skbio.stats.composition.clr_inv",
    "str",
    "tensorflow.Graph",
    "tensorflow.Session"
   ]
  },
  "type": "function"
 },
 "rhapsody.q2._method.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "rhapsody.q2._method.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "rhapsody.q2._method.split_tables": {
  "data": {
   "shadows": "rhapsody.util.split_tables"
  },
  "type": "import"
 },
 "rhapsody.q2._method.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "rhapsody.q2._stats": {
  "data": {
   "symbols_in_volume": [
    "q2_types.feature_data.FeatureData.field",
    "qiime2.plugin.SemanticType",
    "qiime2.plugin.model.SingleFileDirectoryFormat",
    "rhapsody.q2._stats.ConditionalFormat"
   ]
  },
  "type": "module"
 },
 "rhapsody.q2._stats.Conditional": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "rhapsody.q2._stats.ConditionalDirFmt": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "rhapsody.q2._stats.ConditionalFormat": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "qiime2.plugin.model.TextFileFormat"
   ]
  },
  "type": "class"
 },
 "rhapsody.q2._stats.ConditionalFormat.validate": {
  "data": {
   "lineno": 10
  },
  "type": "function"
 },
 "rhapsody.q2._stats.FeatureData": {
  "data": {
   "shadows": "q2_types.feature_data.FeatureData"
  },
  "type": "import"
 },
 "rhapsody.q2._stats.SemanticType": {
  "data": {
   "shadows": "qiime2.plugin.SemanticType"
  },
  "type": "import"
 },
 "rhapsody.q2._stats.model": {
  "data": {
   "shadows": "qiime2.plugin.model"
  },
  "type": "import"
 },
 "rhapsody.q2._transformer": {
  "data": {},
  "type": "module"
 },
 "rhapsody.q2._transformer.ConditionalFormat": {
  "data": {
   "shadows": "rhapsody.q2.ConditionalFormat"
  },
  "type": "import"
 },
 "rhapsody.q2._transformer._1": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "object",
    "pandas.DataFrame",
    "pandas.read_csv",
    "rhapsody.q2.ConditionalFormat",
    "rhapsody.q2.plugin_setup.plugin.register_transformer",
    "str"
   ]
  },
  "type": "function"
 },
 "rhapsody.q2._transformer._2": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "pandas.DataFrame",
    "rhapsody.q2.ConditionalFormat",
    "rhapsody.q2.plugin_setup.plugin.register_transformer",
    "str"
   ]
  },
  "type": "function"
 },
 "rhapsody.q2._transformer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "rhapsody.q2._transformer.plugin": {
  "data": {
   "shadows": "rhapsody.q2.plugin_setup.plugin"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup": {
  "data": {
   "symbols_in_volume": [
    "q2_types.feature_data.FeatureData",
    "q2_types.feature_table.FeatureTable",
    "q2_types.feature_table.Frequency",
    "q2_types.ordination.PCoAResults",
    "qiime2.plugin.Float",
    "qiime2.plugin.Int",
    "qiime2.plugin.Metadata",
    "qiime2.plugin.Properties",
    "qiime2.plugin.Str",
    "rhapsody.__version__",
    "rhapsody.q2.Conditional",
    "rhapsody.q2.ConditionalDirFmt",
    "rhapsody.q2.ConditionalFormat",
    "rhapsody.q2.mmvec",
    "rhapsody.q2.plugin_setup.importlib",
    "rhapsody.q2.plugin_setup.plugin"
   ]
  },
  "type": "module"
 },
 "rhapsody.q2.plugin_setup.Conditional": {
  "data": {
   "shadows": "rhapsody.q2.Conditional"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.ConditionalDirFmt": {
  "data": {
   "shadows": "rhapsody.q2.ConditionalDirFmt"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.ConditionalFormat": {
  "data": {
   "shadows": "rhapsody.q2.ConditionalFormat"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.FeatureData": {
  "data": {
   "shadows": "q2_types.feature_data.FeatureData"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.FeatureTable": {
  "data": {
   "shadows": "q2_types.feature_table.FeatureTable"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.Float": {
  "data": {
   "shadows": "qiime2.plugin.Float"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.Frequency": {
  "data": {
   "shadows": "q2_types.feature_table.Frequency"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.Int": {
  "data": {
   "shadows": "qiime2.plugin.Int"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.Metadata": {
  "data": {
   "shadows": "qiime2.plugin.Metadata"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.PCoAResults": {
  "data": {
   "shadows": "q2_types.ordination.PCoAResults"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.Properties": {
  "data": {
   "shadows": "qiime2.plugin.Properties"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.Str": {
  "data": {
   "shadows": "qiime2.plugin.Str"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.__version__": {
  "data": {
   "shadows": "rhapsody.__version__"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.mmvec": {
  "data": {
   "shadows": "rhapsody.q2.mmvec"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.plugin": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "rhapsody.q2.plugin_setup.qiime2.plugin": {
  "data": {
   "shadows": "qiime2.plugin"
  },
  "type": "import"
 },
 "rhapsody.q2.plugin_setup.qiime2.sdk": {
  "data": {
   "shadows": "qiime2.sdk"
  },
  "type": "import"
 },
 "rhapsody.util": {
  "data": {},
  "type": "module"
 },
 "rhapsody.util.check_random_state": {
  "data": {
   "shadows": "sklearn.utils.check_random_state"
  },
  "type": "import"
 },
 "rhapsody.util.coo_matrix": {
  "data": {
   "shadows": "scipy.sparse.coo_matrix"
  },
  "type": "import"
 },
 "rhapsody.util.ilr_inv": {
  "data": {
   "shadows": "skbio.stats.composition.ilr_inv"
  },
  "type": "import"
 },
 "rhapsody.util.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "rhapsody.util.onehot": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "numpy.int32",
    "numpy.int64",
    "numpy.repeat",
    "scipy.sparse.coo_matrix"
   ]
  },
  "type": "function"
 },
 "rhapsody.util.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "rhapsody.util.random_multimodal": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "numpy.diag",
    "numpy.hstack",
    "numpy.linspace",
    "numpy.ones",
    "numpy.vstack",
    "numpy.zeros",
    "pandas.DataFrame",
    "range",
    "skbio.stats.composition.clr_inv",
    "skbio.stats.composition.ilr_inv",
    "sklearn.utils.check_random_state"
   ]
  },
  "type": "function"
 },
 "rhapsody.util.rank_hits": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "list",
    "numpy.float64",
    "pandas.DataFrame",
    "pandas.melt",
    "range"
   ]
  },
  "type": "function"
 },
 "rhapsody.util.rank_hits.sort_f": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "numpy.argsort"
   ]
  },
  "type": "function"
 },
 "rhapsody.util.softmax": {
  "data": {
   "shadows": "skbio.stats.composition.clr_inv"
  },
  "type": "import"
 },
 "rhapsody.util.split_tables": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.random.choice",
    "set"
   ]
  },
  "type": "function"
 }
}