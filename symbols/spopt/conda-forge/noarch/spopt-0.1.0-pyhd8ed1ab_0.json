{
 "spopt": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.BaseClass": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.BaseClass.BaseSpOptExactSolver": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.BaseClass.BaseSpOptExactSolver.__init__": {
  "lineno": 26,
  "symbols_in_volume": [
   "ortools.linear_solver.pywraplp.Solver",
   "ortools.linear_solver.pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING"
  ],
  "type": "function"
 },
 "spopt.BaseClass.BaseSpOptExactSolver.solve": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.BaseClass.BaseSpOptHeuristicSolver": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.BaseClass.BaseSpOptHeuristicSolver.solve": {
  "lineno": 56,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "spopt.BaseClass.BaseSpOptSolver": {
  "lineno": 4,
  "symbols_in_volume": [
   "abc.ABC"
  ],
  "type": "class"
 },
 "spopt.BaseClass.BaseSpOptSolver.solve": {
  "lineno": 9,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "spopt.region": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.azp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.azp.AZP": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.azp.AZP.__init__": {
  "lineno": 102,
  "symbols_in_volume": [
   "spopt.region.objective_function.ObjectiveFunctionPairwise"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZP.solve": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp.AZPBasicTabu": {
  "lineno": 846,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.azp.AZPBasicTabu.__init__": {
  "lineno": 857,
  "symbols_in_volume": [
   "collections.deque"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZPBasicTabu._azp_connected_component": {
  "lineno": 879,
  "symbols_in_volume": [
   "numpy.unique",
   "numpy.where",
   "spopt.region.csgraph_utils.is_connected",
   "spopt.region.csgraph_utils.neighbors",
   "spopt.region.csgraph_utils.sub_adj_matrix",
   "spopt.region.util.Move",
   "spopt.region.util.count",
   "spopt.region.util.random_element_from"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZPReactiveTabu": {
  "lineno": 978,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.azp.AZPReactiveTabu.__init__": {
  "lineno": 989,
  "symbols_in_volume": [
   "collections.deque"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZPReactiveTabu._azp_connected_component": {
  "lineno": 1021,
  "symbols_in_volume": [
   "collections.deque",
   "math.floor",
   "numpy.array",
   "numpy.unique",
   "numpy.where",
   "random.randrange",
   "spopt.region.csgraph_utils.is_connected",
   "spopt.region.csgraph_utils.neighbors",
   "spopt.region.csgraph_utils.sub_adj_matrix",
   "spopt.region.util.Move",
   "spopt.region.util.count"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZPSimulatedAnnealing": {
  "lineno": 511,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.azp.AZPSimulatedAnnealing.__init__": {
  "lineno": 522,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp.AZPSimulatedAnnealing.fit_from_dict": {
  "lineno": 617,
  "symbols_in_volume": [
   "numpy.int32",
   "spopt.region.objective_function.ObjectiveFunctionPairwise",
   "spopt.region.util.array_from_dict_values",
   "spopt.region.util.scipy_sparse_matrix_from_dict"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZPSimulatedAnnealing.fit_from_geodataframe": {
  "lineno": 574,
  "symbols_in_volume": [
   "spopt.region.objective_function.ObjectiveFunctionPairwise",
   "spopt.region.util.array_from_df_col",
   "spopt.region.util.w_from_gdf"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZPSimulatedAnnealing.fit_from_networkx": {
  "lineno": 658,
  "symbols_in_volume": [
   "networkx.to_scipy_sparse_matrix",
   "spopt.region.objective_function.ObjectiveFunctionPairwise",
   "spopt.region.util.array_from_graph_or_dict"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZPSimulatedAnnealing.fit_from_scipy_sparse_matrix": {
  "lineno": 699,
  "symbols_in_volume": [
   "spopt.region.azp_util.AllowMoveAZPSimulatedAnnealing",
   "spopt.region.objective_function.ObjectiveFunctionPairwise"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZPSimulatedAnnealing.fit_from_w": {
  "lineno": 778,
  "symbols_in_volume": [
   "spopt.region.objective_function.ObjectiveFunctionPairwise",
   "spopt.region.util.scipy_sparse_matrix_from_w"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZPSimulatedAnnealing.move_made_alert": {
  "lineno": 818,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp.AZPSimulatedAnnealing.sa_moves_alert": {
  "lineno": 815,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp.AZPTabu": {
  "lineno": 822,
  "symbols_in_volume": [
   "abc.ABC"
  ],
  "type": "class"
 },
 "spopt.region.azp.AZPTabu._make_move": {
  "lineno": 827,
  "symbols_in_volume": [
   "spopt.region.util.Move",
   "spopt.region.util.boolean_assert_feasible",
   "spopt.region.util.make_move"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZPTabu.reset_tabu": {
  "lineno": 841,
  "symbols_in_volume": [
   "collections.deque"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZP_orig": {
  "lineno": 135,
  "symbols_in_volume": [
   "spopt.region.util.copy_func"
  ],
  "type": "class"
 },
 "spopt.region.azp.AZP_orig.__init__": {
  "lineno": 146,
  "symbols_in_volume": [
   "random.seed",
   "spopt.region.azp_util.AllowMoveAZP",
   "spopt.region.azp_util.AllowMoveStrategy"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZP_orig._azp_connected_component": {
  "lineno": 398,
  "symbols_in_volume": [
   "numpy.unique",
   "numpy.where",
   "spopt.region.csgraph_utils.is_connected",
   "spopt.region.csgraph_utils.neighbors",
   "spopt.region.csgraph_utils.sub_adj_matrix",
   "spopt.region.util.count",
   "spopt.region.util.make_move",
   "spopt.region.util.pop_randomly_from"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZP_orig.fit_from_dict": {
  "lineno": 354,
  "symbols_in_volume": [
   "numpy.int32",
   "spopt.region.objective_function.ObjectiveFunctionPairwise",
   "spopt.region.util.array_from_dict_values",
   "spopt.region.util.scipy_sparse_matrix_from_dict"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZP_orig.fit_from_geodataframe": {
  "lineno": 314,
  "symbols_in_volume": [
   "spopt.region.objective_function.ObjectiveFunctionPairwise",
   "spopt.region.util.array_from_df_col",
   "spopt.region.util.w_from_gdf"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZP_orig.fit_from_networkx": {
  "lineno": 264,
  "symbols_in_volume": [
   "networkx.to_scipy_sparse_matrix",
   "spopt.region.objective_function.ObjectiveFunctionPairwise",
   "spopt.region.util.array_from_graph_or_dict"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZP_orig.fit_from_scipy_sparse_matrix": {
  "lineno": 172,
  "symbols_in_volume": [
   "numpy.ones",
   "numpy.where",
   "spopt.region.csgraph_utils.sub_adj_matrix",
   "spopt.region.objective_function.ObjectiveFunctionPairwise",
   "spopt.region.util.assert_feasible",
   "spopt.region.util.generate_initial_sol",
   "spopt.region.util.separate_components"
  ],
  "type": "function"
 },
 "spopt.region.azp.AZP_orig.fit_from_w": {
  "lineno": 230,
  "symbols_in_volume": [
   "spopt.region.objective_function.ObjectiveFunctionPairwise",
   "spopt.region.util.scipy_sparse_matrix_from_w"
  ],
  "type": "function"
 },
 "spopt.region.azp_util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.azp_util.AllowMoveAZP": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.azp_util.AllowMoveAZP.__call__": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPMaxPRegions": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.azp_util.AllowMoveAZPMaxPRegions.__call__": {
  "lineno": 185,
  "symbols_in_volume": [
   "numpy.where"
  ],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPMaxPRegions.__getattr__": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPMaxPRegions.__init__": {
  "lineno": 155,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPMaxPRegions.start_new_component": {
  "lineno": 176,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPSimulatedAnnealing": {
  "lineno": 73,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.azp_util.AllowMoveAZPSimulatedAnnealing.__call__": {
  "lineno": 86,
  "symbols_in_volume": [
   "math.exp",
   "random.random"
  ],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPSimulatedAnnealing.__init__": {
  "lineno": 74,
  "symbols_in_volume": [
   "numbers.Integral"
  ],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPSimulatedAnnealing.notify_min_sa_moves": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPSimulatedAnnealing.notify_move_made": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPSimulatedAnnealing.register_move_made": {
  "lineno": 119,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPSimulatedAnnealing.register_sa_moves_term": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPSimulatedAnnealing.reset": {
  "lineno": 142,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveAZPSimulatedAnnealing.update_temperature": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveStrategy": {
  "lineno": 9,
  "symbols_in_volume": [
   "abc.ABC"
  ],
  "type": "class"
 },
 "spopt.region.azp_util.AllowMoveStrategy.__call__": {
  "lineno": 35,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "spopt.region.azp_util.AllowMoveStrategy.start_new_component": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.base": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.base.RegionMixin": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.base.RegionMixin.solve_assign": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.base._centroid": {
  "lineno": 173,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "spopt.region.base._closest": {
  "lineno": 197,
  "symbols_in_volume": [
   "numpy.argmin"
  ],
  "type": "function"
 },
 "spopt.region.base._seeds": {
  "lineno": 221,
  "symbols_in_volume": [
   "numpy.random.choice"
  ],
  "type": "function"
 },
 "spopt.region.base.is_neighbor": {
  "lineno": 245,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.base.move_ok": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.is_connected"
  ],
  "type": "function"
 },
 "spopt.region.base.ok_moves": {
  "lineno": 104,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.base.region_neighbors": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.base.w_to_g": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "spopt.region.csgraph_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.csgraph_utils.is_connected": {
  "lineno": 12,
  "symbols_in_volume": [
   "scipy.sparse.csgraph.connected_components"
  ],
  "type": "function"
 },
 "spopt.region.csgraph_utils.neighbors": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.csgraph_utils.sub_adj_matrix": {
  "lineno": 73,
  "symbols_in_volume": [
   "numpy.in1d",
   "scipy.sparse.csr_matrix"
  ],
  "type": "function"
 },
 "spopt.region.maxp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.maxp.MaxPHeuristic": {
  "lineno": 694,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.maxp.MaxPHeuristic.__init__": {
  "lineno": 783,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.maxp.MaxPHeuristic.solve": {
  "lineno": 806,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.maxp.assignEnclave": {
  "lineno": 331,
  "symbols_in_volume": [
   "copy.deepcopy",
   "numpy.Inf",
   "numpy.array",
   "numpy.random.randint"
  ],
  "type": "function"
 },
 "spopt.region.maxp.calculateWithinRegionDistance": {
  "lineno": 411,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "spopt.region.maxp.checkMove": {
  "lineno": 500,
  "symbols_in_volume": [
   "numpy.Inf",
   "numpy.array"
  ],
  "type": "function"
 },
 "spopt.region.maxp.construction_phase": {
  "lineno": 151,
  "symbols_in_volume": [
   "copy.deepcopy",
   "numpy.random.shuffle"
  ],
  "type": "function"
 },
 "spopt.region.maxp.growClusterForPoly": {
  "lineno": 268,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.maxp.maxp": {
  "lineno": 31,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.atleast_2d",
   "numpy.inf",
   "scipy.spatial.distance.pdist",
   "scipy.spatial.distance.squareform"
  ],
  "type": "function"
 },
 "spopt.region.maxp.performSA": {
  "lineno": 559,
  "symbols_in_volume": [
   "copy.deepcopy",
   "numpy.exp",
   "numpy.random.randint",
   "numpy.random.random"
  ],
  "type": "function"
 },
 "spopt.region.maxp.pickMoveArea": {
  "lineno": 440,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.delete",
   "numpy.where",
   "scipy.sparse.csgraph.connected_components"
  ],
  "type": "function"
 },
 "spopt.region.objective_function": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.objective_function.ObjectiveFunction": {
  "lineno": 9,
  "symbols_in_volume": [
   "abc.ABC"
  ],
  "type": "class"
 },
 "spopt.region.objective_function.ObjectiveFunction.__call__": {
  "lineno": 20,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "spopt.region.objective_function.ObjectiveFunction.__init__": {
  "lineno": 10,
  "symbols_in_volume": [
   "spopt.region.util.get_metric_function"
  ],
  "type": "function"
 },
 "spopt.region.objective_function.ObjectiveFunction.update": {
  "lineno": 38,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "spopt.region.objective_function.ObjectiveFunctionCenter": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.objective_function.ObjectiveFunctionCenter.__call__": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.objective_function.ObjectiveFunctionCenter.__init__": {
  "lineno": 96,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.sum"
  ],
  "type": "function"
 },
 "spopt.region.objective_function.ObjectiveFunctionCenter._intraregional_heterogeneity": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.objective_function.ObjectiveFunctionCenter.update": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.objective_function.ObjectiveFunctionPairwise": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.objective_function.ObjectiveFunctionPairwise.__call__": {
  "lineno": 63,
  "symbols_in_volume": [
   "itertools.combinations",
   "numpy.where"
  ],
  "type": "function"
 },
 "spopt.region.objective_function.ObjectiveFunctionPairwise.update": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.region_k_means": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.region_k_means.RegionKMeansHeuristic": {
  "lineno": 117,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.region_k_means.RegionKMeansHeuristic.__init__": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.region_k_means.RegionKMeansHeuristic.solve": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.region_k_means.region_k_means": {
  "lineno": 16,
  "symbols_in_volume": [
   "collections.defaultdict",
   "numpy.arange",
   "numpy.array",
   "numpy.inf"
  ],
  "type": "function"
 },
 "spopt.region.skater": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "spopt.region.skater.Skater": {
  "lineno": 339,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.skater.Skater.__init__": {
  "lineno": 430,
  "symbols_in_volume": [
   "numpy.inf"
  ],
  "type": "function"
 },
 "spopt.region.skater.Skater.solve": {
  "lineno": 450,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.skater.SpanningForest": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.skater.SpanningForest.__init__": {
  "lineno": 16,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.mean",
   "numpy.sum",
   "sklearn.metrics.pairwise.manhattan_distances"
  ],
  "type": "function"
 },
 "spopt.region.skater.SpanningForest.__repr__": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.skater.SpanningForest.find_cut": {
  "lineno": 232,
  "symbols_in_volume": [
   "copy.deepcopy",
   "numpy.inf",
   "numpy.nan",
   "numpy.ones",
   "numpy.vstack",
   "scipy.sparse.csgraph.connected_components",
   "tqdm.tqdm"
  ],
  "type": "function"
 },
 "spopt.region.skater.SpanningForest.find_cut.tqdm": {
  "lineno": 280,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.skater.SpanningForest.fit": {
  "lineno": 53,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.isfinite",
   "numpy.nan",
   "numpy.ones",
   "numpy.unique",
   "scipy.optimize.OptimizeWarning",
   "scipy.sparse.csgraph.connected_components",
   "scipy.sparse.csgraph.minimum_spanning_tree",
   "time.time",
   "warnings.warn"
  ],
  "type": "function"
 },
 "spopt.region.skater.SpanningForest.make_cut": {
  "lineno": 319,
  "symbols_in_volume": [
   "numpy.isfinite",
   "scipy.optimize.OptimizeWarning",
   "scipy.sparse.csgraph.connected_components"
  ],
  "type": "function"
 },
 "spopt.region.skater.SpanningForest.score": {
  "lineno": 189,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.unique"
  ],
  "type": "function"
 },
 "spopt.region.spenc": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.spenc.Spenc": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.spenc.Spenc.__init__": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.spenc.Spenc.solve": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.spenclib": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.spenclib.abstracts": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.spenclib.abstracts.AgglomerativeClustering": {
  "lineno": 564,
  "symbols_in_volume": [
   "sklearn.cluster.AgglomerativeClustering"
  ],
  "type": "class"
 },
 "spopt.region.spenclib.abstracts.AgglomerativeClustering._sample_gen": {
  "lineno": 566,
  "symbols_in_volume": [
   "numpy.random.normal"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.abstracts.AgglomerativeClustering.sample": {
  "lineno": 579,
  "symbols_in_volume": [
   "numpy.vstack"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.abstracts.SPENC": {
  "lineno": 17,
  "symbols_in_volume": [
   "sklearn.cluster.SpectralClustering"
  ],
  "type": "class"
 },
 "spopt.region.spenclib.abstracts.SPENC.__init__": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.spenclib.abstracts.SPENC._embed": {
  "lineno": 298,
  "symbols_in_volume": [
   "scipy.sparse.csgraph.laplacian",
   "scipy.sparse.linalg.eigsh",
   "sklearn.utils.check_random_state",
   "sklearn.utils.extmath._deterministic_vector_sign_flip"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.abstracts.SPENC._make_hierarchical_cut": {
  "lineno": 415,
  "symbols_in_volume": [
   "numpy.argmin",
   "numpy.linspace",
   "numpy.median",
   "numpy.min",
   "numpy.percentile"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.abstracts.SPENC._make_hierarchical_cut.mkobjective": {
  "lineno": 423,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.spenclib.abstracts.SPENC._make_hierarchical_cut.mkobjective.objective": {
  "lineno": 425,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.isnan"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.abstracts.SPENC._sample_gen": {
  "lineno": 497,
  "symbols_in_volume": [
   "numpy.random.normal"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.abstracts.SPENC._spectral_bipartition": {
  "lineno": 328,
  "symbols_in_volume": [
   "numpy.flipud",
   "numpy.ones",
   "numpy.vstack",
   "scipy.sparse.issparse",
   "sklearn.preprocessing.LabelEncoder"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.abstracts.SPENC.fit": {
  "lineno": 179,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.isinf",
   "sklearn.cluster.KMeans",
   "sklearn.cluster._spectral.discretize",
   "sklearn.metrics.pairwise.pairwise_kernels",
   "sklearn.neighbors.kneighbors_graph",
   "sklearn.utils.check_random_state",
   "sklearn.utils.validation.check_array"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.abstracts.SPENC.sample": {
  "lineno": 531,
  "symbols_in_volume": [
   "numpy.vstack"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.abstracts.SPENC.score": {
  "lineno": 456,
  "symbols_in_volume": [
   "numpy.asarray",
   "sklearn.metrics.calinski_harabasz_score"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.scores": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.spenclib.scores.boundary_fraction": {
  "lineno": 3,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.spenclib.scores.boundary_score": {
  "lineno": 12,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.spenclib.utils.check_weights": {
  "lineno": 6,
  "symbols_in_volume": [
   "scipy.sparse.csc_matrix",
   "scipy.sparse.csgraph.connected_components",
   "warnings.warn"
  ],
  "type": "function"
 },
 "spopt.region.spenclib.utils.lattice": {
  "lineno": 17,
  "symbols_in_volume": [
   "geopandas.GeoDataFrame",
   "numpy.arange",
   "shapely.geometry.Polygon"
  ],
  "type": "function"
 },
 "spopt.region.util": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "spopt.region.util.MissingMetric": {
  "lineno": 507,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.util._randomly_divide_connected_graph": {
  "lineno": 646,
  "symbols_in_volume": [
   "numpy.unique",
   "random.randrange",
   "scipy.sparse.csgraph.connected_components",
   "scipy.sparse.csgraph.minimum_spanning_tree"
  ],
  "type": "function"
 },
 "spopt.region.util.all_elements_equal": {
  "lineno": 793,
  "symbols_in_volume": [
   "numpy.max",
   "numpy.min"
  ],
  "type": "function"
 },
 "spopt.region.util.array_from_df_col": {
  "lineno": 291,
  "symbols_in_volume": [
   "collections.Sequence",
   "numpy.array"
  ],
  "type": "function"
 },
 "spopt.region.util.array_from_dict_values": {
  "lineno": 21,
  "symbols_in_volume": [
   "collections.Iterable",
   "itertools.chain.from_iterable",
   "numpy.float",
   "numpy.fromiter"
  ],
  "type": "function"
 },
 "spopt.region.util.array_from_graph": {
  "lineno": 207,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.util.array_from_graph_or_dict": {
  "lineno": 251,
  "symbols_in_volume": [
   "collections.Iterable",
   "collections.Mapping"
  ],
  "type": "function"
 },
 "spopt.region.util.array_from_region_list": {
  "lineno": 263,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "spopt.region.util.assert_feasible": {
  "lineno": 736,
  "symbols_in_volume": [
   "numpy.where",
   "spopt.region.csgraph_utils.is_connected",
   "spopt.region.csgraph_utils.sub_adj_matrix"
  ],
  "type": "function"
 },
 "spopt.region.util.boolean_assert_feasible": {
  "lineno": 772,
  "symbols_in_volume": [
   "numpy.where",
   "spopt.region.csgraph_utils.is_connected",
   "spopt.region.csgraph_utils.sub_adj_matrix"
  ],
  "type": "function"
 },
 "spopt.region.util.check_solver": {
  "lineno": 891,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.util.copy_func": {
  "lineno": 709,
  "symbols_in_volume": [
   "functools.update_wrapper",
   "types.FunctionType"
  ],
  "type": "function"
 },
 "spopt.region.util.count": {
  "lineno": 861,
  "symbols_in_volume": [
   "numpy.unique",
   "numpy.where"
  ],
  "type": "function"
 },
 "spopt.region.util.dataframe_to_dict": {
  "lineno": 368,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "spopt.region.util.dict_from_graph_attr": {
  "lineno": 153,
  "symbols_in_volume": [
   "networkx.get_node_attributes",
   "numpy.array"
  ],
  "type": "function"
 },
 "spopt.region.util.distribute_regions_among_components": {
  "lineno": 540,
  "symbols_in_volume": [
   "random.randrange"
  ],
  "type": "function"
 },
 "spopt.region.util.find_sublist_containing": {
  "lineno": 404,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.util.generate_initial_sol": {
  "lineno": 587,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.ones",
   "scipy.sparse.csgraph.connected_components"
  ],
  "type": "function"
 },
 "spopt.region.util.get_metric_function": {
  "lineno": 446,
  "symbols_in_volume": [
   "sklearn.metrics.pairwise.distance_metrics"
  ],
  "type": "function"
 },
 "spopt.region.util.get_solver_instance": {
  "lineno": 904,
  "symbols_in_volume": [
   "pulp.solvers.CPLEX",
   "pulp.solvers.GLPK",
   "pulp.solvers.GUROBI",
   "pulp.solvers.PULP_CBC_CMD"
  ],
  "type": "function"
 },
 "spopt.region.util.make_move": {
  "lineno": 515,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.util.pop_randomly_from": {
  "lineno": 856,
  "symbols_in_volume": [
   "random.randrange"
  ],
  "type": "function"
 },
 "spopt.region.util.raise_distance_metric_not_set": {
  "lineno": 511,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.util.random_element_from": {
  "lineno": 851,
  "symbols_in_volume": [
   "random.randrange"
  ],
  "type": "function"
 },
 "spopt.region.util.scipy_sparse_matrix_from_dict": {
  "lineno": 80,
  "symbols_in_volume": [
   "scipy.sparse.dok.dok_matrix"
  ],
  "type": "function"
 },
 "spopt.region.util.scipy_sparse_matrix_from_w": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.util.separate_components": {
  "lineno": 797,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.ones",
   "scipy.sparse.csgraph.connected_components"
  ],
  "type": "function"
 },
 "spopt.region.util.w_from_gdf": {
  "lineno": 339,
  "symbols_in_volume": [
   "libpysal.weights.Queen.from_dataframe",
   "libpysal.weights.Rook.from_dataframe"
  ],
  "type": "function"
 },
 "spopt.region.ward": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.region.ward.WardSpatial": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "spopt.region.ward.WardSpatial.__init__": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "spopt.region.ward.WardSpatial.solve": {
  "lineno": 84,
  "symbols_in_volume": [
   "sklearn.cluster.AgglomerativeClustering"
  ],
  "type": "function"
 },
 "spopt.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.tests.test_azp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.tests.test_azp.test_azp": {
  "lineno": 6,
  "symbols_in_volume": [
   "geopandas.read_file",
   "libpysal.examples.get_path",
   "libpysal.weights.Queen.from_dataframe",
   "numpy.array",
   "numpy.array_equal",
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "spopt.tests.test_maxp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.tests.test_maxp.test_MaxPHeuristic": {
  "lineno": 11,
  "symbols_in_volume": [
   "geopandas.read_file",
   "libpysal.examples.get_path",
   "libpysal.weights.Queen.from_dataframe",
   "numpy.array_equal",
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "spopt.tests.test_region_k_means": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.tests.test_region_k_means.test_RegionKMeansHeuristic": {
  "lineno": 10,
  "symbols_in_volume": [
   "libpysal.weights.lat2W",
   "numpy.array",
   "numpy.array_equal",
   "numpy.random.normal",
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "spopt.tests.test_skater": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.tests.test_skater.TestSkater": {
  "lineno": 7,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "spopt.tests.test_skater.TestSkater.setUp": {
  "lineno": 9,
  "symbols_in_volume": [
   "geopandas.read_file",
   "libpysal.examples.get_path",
   "libpysal.weights.Queen.from_dataframe",
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "spopt.tests.test_skater.TestSkater.test_labels_": {
  "lineno": 19,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_equal"
  ],
  "type": "function"
 },
 "spopt.tests.test_spenc": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.tests.test_spenc.TestSpenc": {
  "lineno": 8,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "spopt.tests.test_spenc.TestSpenc.setUp": {
  "lineno": 11,
  "symbols_in_volume": [
   "geopandas.read_file",
   "libpysal.examples.get_path",
   "libpysal.weights.Queen.from_dataframe"
  ],
  "type": "function"
 },
 "spopt.tests.test_spenc.TestSpenc.test_labels_": {
  "lineno": 21,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "numpy.unique"
  ],
  "type": "function"
 },
 "spopt.tests.test_ward": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "spopt.tests.test_ward.TestWard": {
  "lineno": 10,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "spopt.tests.test_ward.TestWard.setUp": {
  "lineno": 13,
  "symbols_in_volume": [
   "geopandas.read_file",
   "libpysal.examples.get_path",
   "libpysal.weights.Queen.from_dataframe",
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "spopt.tests.test_ward.TestWard.test_labels_": {
  "lineno": 24,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_equal"
  ],
  "type": "function"
 }
}