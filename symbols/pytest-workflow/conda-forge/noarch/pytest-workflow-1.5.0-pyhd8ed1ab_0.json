{
 "pytest_workflow": {
  "data": {},
  "type": "module"
 },
 "pytest_workflow.content_tests": {
  "data": {},
  "type": "module"
 },
 "pytest_workflow.content_tests.ContentTestCollector": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "pytest_workflow.content_tests.pytest"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.content_tests.ContentTestCollector.__init__": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "pathlib.Path",
    "pytest_workflow.content_tests.pytest",
    "str",
    "super",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.content_tests.ContentTestCollector.collect": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "pytest_workflow.content_tests.threading"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.content_tests.ContentTestCollector.find_strings": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "FileNotFoundError",
    "file_open",
    "pytest_workflow.content_tests.check_content",
    "pytest_workflow.content_tests.check_regex_content",
    "pytest_workflow.content_tests.functools",
    "pytest_workflow.content_tests.gzip",
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.content_tests.ContentTestItem": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "pytest_workflow.content_tests.pytest"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.content_tests.ContentTestItem.__init__": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "bool",
    "pytest_workflow.content_tests.ContentTestCollector",
    "str",
    "super"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.content_tests.ContentTestItem.repr_failure": {
  "data": {
   "lineno": 255
  },
  "type": "function"
 },
 "pytest_workflow.content_tests.ContentTestItem.runtest": {
  "data": {
   "lineno": 237
  },
  "type": "function"
 },
 "pytest_workflow.content_tests.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "pytest_workflow.content_tests.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "pytest_workflow.content_tests.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "pytest_workflow.content_tests.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "pytest_workflow.content_tests.check_content": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "set",
    "str",
    "typing.Iterable",
    "typing.Set"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.content_tests.check_regex_content": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "list",
    "pytest_workflow.content_tests.re",
    "set",
    "str",
    "typing.Iterable",
    "typing.Set"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.content_tests.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "pytest_workflow.content_tests.gzip": {
  "data": {
   "shadows": "gzip"
  },
  "type": "import"
 },
 "pytest_workflow.content_tests.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "pytest_workflow.content_tests.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "pytest_workflow.content_tests.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "pytest_workflow.file_tests": {
  "data": {},
  "type": "module"
 },
 "pytest_workflow.file_tests.FileExists": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "pytest_workflow.file_tests.pytest"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.file_tests.FileExists.__init__": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "bool",
    "pathlib.Path",
    "pytest_workflow.file_tests.pytest",
    "super"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.file_tests.FileExists.repr_failure": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.file_tests.FileExists.runtest": {
  "data": {
   "lineno": 101
  },
  "type": "function"
 },
 "pytest_workflow.file_tests.FileMd5": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "pytest_workflow.file_tests.pytest"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.file_tests.FileMd5.__init__": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "pathlib.Path",
    "pytest_workflow.file_tests.pytest",
    "str",
    "super"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.file_tests.FileMd5.repr_failure": {
  "data": {
   "lineno": 140
  },
  "type": "function"
 },
 "pytest_workflow.file_tests.FileMd5.runtest": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "file_md5sum"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.file_tests.FileTestCollector": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "pytest_workflow.file_tests.pytest"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.file_tests.FileTestCollector.__init__": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "pytest_workflow.file_tests.pytest",
    "str",
    "super"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.file_tests.FileTestCollector.collect": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "any"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.file_tests.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "pytest_workflow.file_tests.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "pytest_workflow.plugin": {
  "data": {},
  "type": "module"
 },
 "pytest_workflow.plugin.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.ExitCodeTest": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "pytest_workflow.plugin.pytest"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.plugin.ExitCodeTest.__init__": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": [
    "Workflow",
    "int",
    "pytest_workflow.plugin.pytest",
    "super"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.ExitCodeTest.repr_failure": {
  "data": {
   "lineno": 468
  },
  "type": "function"
 },
 "pytest_workflow.plugin.ExitCodeTest.runtest": {
  "data": {
   "lineno": 464
  },
  "type": "function"
 },
 "pytest_workflow.plugin.FunctionDefinition": {
  "data": {
   "shadows": "_pytest.python.FunctionDefinition"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.Mark": {
  "data": {
   "shadows": "_pytest.mark.Mark"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.Metafunc": {
  "data": {
   "shadows": "_pytest.python.Metafunc"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.PytestConfig": {
  "data": {
   "shadows": "_pytest.config.Config"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.PytestParser": {
  "data": {
   "shadows": "_pytest.config.argparsing.Parser"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.WorkflowTestsCollector": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "pytest_workflow.plugin.pytest"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.plugin.WorkflowTestsCollector.__init__": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "pytest_workflow.plugin.pytest",
    "super"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.WorkflowTestsCollector.collect": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.WorkflowTestsCollector.queue_workflow": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": [
    "Workflow",
    "link_tree",
    "pathlib.Path",
    "pytest_workflow.plugin.shutil",
    "pytest_workflow.plugin.warnings",
    "replace_whitespace",
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.YamlFile": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "pytest_workflow.plugin.pytest"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.plugin.YamlFile.collect": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "pytest_workflow.plugin.yaml",
    "workflow_tests_from_schema"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.__pytest_workflow_cli": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "ArgParser",
    "pytest_workflow.plugin.pytest_addoption"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.__pytest_workflow_cli.ArgParser": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "pytest_workflow.plugin.argparse"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.plugin.__pytest_workflow_cli.ArgParser.addoption": {
  "data": {
   "lineno": 103
  },
  "type": "function"
 },
 "pytest_workflow.plugin.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.get_workflow_names_from_workflow_marker": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "DeprecationWarning",
    "_pytest.mark.Mark",
    "typing.Any",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.pytest_addoption": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "_pytest.config.argparsing.Parser",
    "int",
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.pytest_collect_file": {
  "data": {
   "lineno": 111
  },
  "type": "function"
 },
 "pytest_workflow.plugin.pytest_collection": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "print"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.pytest_collection_modifyitems": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "NotImplementedError",
    "_pytest.config.Config",
    "len",
    "pytest_workflow.plugin.get_workflow_names_from_workflow_marker",
    "pytest_workflow.plugin.pytest",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.pytest_collectstart": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "pytest_workflow.plugin.pytest",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.pytest_configure": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "ValueError",
    "WorkflowQueue",
    "_pytest.config.Config",
    "is_in_dir",
    "pathlib.Path",
    "pytest_workflow.plugin.tempfile",
    "setattr",
    "str",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.pytest_generate_tests": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "ValueError",
    "_pytest.mark.Mark",
    "_pytest.python.FunctionDefinition",
    "_pytest.python.Metafunc",
    "pathlib.Path",
    "pytest_workflow.plugin.get_workflow_names_from_workflow_marker",
    "replace_whitespace",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.pytest_runtestloop": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "pytest_workflow.plugin.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.pytest_sessionfinish": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "PermissionError",
    "bool",
    "int",
    "len",
    "pathlib.Path",
    "print",
    "pytest_workflow.plugin.pytest",
    "pytest_workflow.plugin.shutil",
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.plugin.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "pytest_workflow.plugin.yaml": {
  "data": {
   "shadows": "yaml"
  },
  "type": "import"
 },
 "pytest_workflow.schema": {
  "data": {
   "symbols_in_volume": [
    "pathlib.Path",
    "pytest_workflow.schema.SCHEMA",
    "pytest_workflow.schema.json"
   ]
  },
  "type": "module"
 },
 "pytest_workflow.schema.ContentTest": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.schema.ContentTest.__init__": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "str",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.schema.DEFAULT_EXIT_CODE": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "pytest_workflow.schema.DEFAULT_FILE_SHOULD_EXIST": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "pytest_workflow.schema.FileTest": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "pytest_workflow.schema.ContentTest"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.schema.FileTest.__init__": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "bool",
    "pathlib.Path",
    "pytest_workflow.schema.DEFAULT_FILE_SHOULD_EXIST",
    "str",
    "super",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.schema.JSON_SCHEMA": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "pytest_workflow.schema.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "pytest_workflow.schema.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "pytest_workflow.schema.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "pytest_workflow.schema.SCHEMA": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "pytest_workflow.schema.WorkflowTest": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.schema.WorkflowTest.__init__": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "int",
    "pytest_workflow.schema.ContentTest",
    "pytest_workflow.schema.DEFAULT_EXIT_CODE",
    "pytest_workflow.schema.FileTest",
    "str",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.schema.WorkflowTest.from_schema": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "dict",
    "pytest_workflow.schema.ContentTest",
    "pytest_workflow.schema.DEFAULT_EXIT_CODE",
    "pytest_workflow.schema.FileTest"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.schema.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "pytest_workflow.schema.jsonschema": {
  "data": {
   "shadows": "jsonschema"
  },
  "type": "import"
 },
 "pytest_workflow.schema.validate_schema": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "len",
    "pytest_workflow.schema.DEFAULT_FILE_SHOULD_EXIST",
    "pytest_workflow.schema.JSON_SCHEMA",
    "pytest_workflow.schema.jsonschema",
    "replace_whitespace",
    "set",
    "test_contains_concordance"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.schema.validate_schema.test_contains_concordance": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "dict",
    "len",
    "pytest_workflow.schema.jsonschema",
    "set",
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.schema.workflow_tests_from_schema": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "pytest_workflow.schema.validate_schema"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.util": {
  "data": {},
  "type": "module"
 },
 "pytest_workflow.util.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "pytest_workflow.util.file_md5sum": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "iter",
    "pathlib.Path",
    "pytest_workflow.util.hashlib",
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.util.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "pytest_workflow.util.is_in_dir": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "bool",
    "pathlib.Path",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.util.link_tree": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "pathlib.Path",
    "pytest_workflow.util.os",
    "pytest_workflow.util.warnings",
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.util.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "pytest_workflow.util.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "pytest_workflow.util.replace_whitespace": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "pytest_workflow.util.re",
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.util.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "pytest_workflow.workflow": {
  "data": {},
  "type": "module"
 },
 "pytest_workflow.workflow.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "pytest_workflow.workflow.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "pytest_workflow.workflow.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "pytest_workflow.workflow.Workflow": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.workflow.Workflow.__init__": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "Exception",
    "ValueError",
    "pathlib.Path",
    "pytest_workflow.workflow.subprocess",
    "pytest_workflow.workflow.tempfile",
    "pytest_workflow.workflow.threading",
    "str",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.workflow.Workflow.exit_code": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "property"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.workflow.Workflow.run": {
  "data": {
   "lineno": 97
  },
  "type": "function"
 },
 "pytest_workflow.workflow.Workflow.start": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "Exception",
    "ValueError",
    "pytest_workflow.workflow.shlex",
    "pytest_workflow.workflow.subprocess",
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.workflow.Workflow.stderr": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "bytes",
    "property"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.workflow.Workflow.stdout": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "bytes",
    "property"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.workflow.Workflow.wait": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "TimeoutError",
    "float",
    "pytest_workflow.workflow.threading",
    "pytest_workflow.workflow.time",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.workflow.WorkflowQueue": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "pytest_workflow.workflow.queue"
   ]
  },
  "type": "class"
 },
 "pytest_workflow.workflow.WorkflowQueue.__init__": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.workflow.WorkflowQueue.process": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "int",
    "len",
    "pytest_workflow.workflow.threading",
    "range"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.workflow.WorkflowQueue.put": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "pytest_workflow.workflow.Workflow",
    "super"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.workflow.WorkflowQueue.worker": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "print",
    "pytest_workflow.workflow.Workflow",
    "pytest_workflow.workflow.queue"
   ]
  },
  "type": "function"
 },
 "pytest_workflow.workflow.queue": {
  "data": {
   "shadows": "queue"
  },
  "type": "import"
 },
 "pytest_workflow.workflow.shlex": {
  "data": {
   "shadows": "shlex"
  },
  "type": "import"
 },
 "pytest_workflow.workflow.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "pytest_workflow.workflow.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "pytest_workflow.workflow.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "pytest_workflow.workflow.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 }
}