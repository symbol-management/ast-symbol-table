{
 "jwt": {
  "data": {},
  "type": "module"
 },
 "jwt.__author__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "jwt.__copyright__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "jwt.__license__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "jwt.__main__": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "jwt.__main__.main"
   ]
  },
  "type": "module"
 },
 "jwt.__main__.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "jwt.__main__.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "jwt.__main__.main": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "Exception",
    "ValueError",
    "__package__",
    "decode",
    "encode",
    "float",
    "int",
    "jwt.__main__.json",
    "jwt.__main__.optparse",
    "jwt.__main__.sys",
    "jwt.__main__.time",
    "len",
    "print",
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.__main__.optparse": {
  "data": {
   "shadows": "optparse"
  },
  "type": "import"
 },
 "jwt.__main__.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "jwt.__main__.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "jwt.__main__.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "jwt.__title__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "jwt.__version__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "jwt.algorithms": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "jwt.algorithms.has_crypto"
   ]
  },
  "type": "module"
 },
 "jwt.algorithms.Algorithm": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.Algorithm.prepare_key": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.Algorithm.sign": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.Algorithm.verify": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.ECAlgorithm": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.hashes.SHA256",
    "cryptography.hazmat.primitives.hashes.SHA384",
    "cryptography.hazmat.primitives.hashes.SHA512",
    "jwt.algorithms.Algorithm"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.ECAlgorithm.__init__": {
  "data": {
   "lineno": 208
  },
  "type": "function"
 },
 "jwt.algorithms.ECAlgorithm.prepare_key": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "cryptography.hazmat.backends.default_backend",
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey",
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey",
    "cryptography.hazmat.primitives.serialization.load_pem_private_key",
    "cryptography.hazmat.primitives.serialization.load_pem_public_key",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.ECAlgorithm.sign": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
    "der_to_raw_signature"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.ECAlgorithm.verify": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "ValueError",
    "cryptography.exceptions.InvalidSignature",
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
    "raw_to_der_signature"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.EllipticCurvePrivateKey": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
  },
  "type": "import"
 },
 "jwt.algorithms.EllipticCurvePublicKey": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
  },
  "type": "import"
 },
 "jwt.algorithms.HMACAlgorithm": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "jwt.algorithms.Algorithm",
    "jwt.algorithms.hashlib"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.HMACAlgorithm.__init__": {
  "data": {
   "lineno": 111
  },
  "type": "function"
 },
 "jwt.algorithms.HMACAlgorithm.prepare_key": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "InvalidKeyError",
    "TypeError",
    "any",
    "bytes",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.HMACAlgorithm.sign": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "jwt.algorithms.hmac"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.HMACAlgorithm.verify": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "constant_time_compare"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.InvalidSignature": {
  "data": {
   "shadows": "cryptography.exceptions.InvalidSignature"
  },
  "type": "import"
 },
 "jwt.algorithms.NoneAlgorithm": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "jwt.algorithms.Algorithm"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.NoneAlgorithm.prepare_key": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "InvalidKeyError"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.NoneAlgorithm.sign": {
  "data": {
   "lineno": 95
  },
  "type": "function"
 },
 "jwt.algorithms.NoneAlgorithm.verify": {
  "data": {
   "lineno": 98
  },
  "type": "function"
 },
 "jwt.algorithms.RSAAlgorithm": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.hashes.SHA256",
    "cryptography.hazmat.primitives.hashes.SHA384",
    "cryptography.hazmat.primitives.hashes.SHA512",
    "jwt.algorithms.Algorithm"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.RSAAlgorithm.__init__": {
  "data": {
   "lineno": 151
  },
  "type": "function"
 },
 "jwt.algorithms.RSAAlgorithm.prepare_key": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "cryptography.hazmat.backends.default_backend",
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey",
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey",
    "cryptography.hazmat.primitives.serialization.load_pem_private_key",
    "cryptography.hazmat.primitives.serialization.load_pem_public_key",
    "cryptography.hazmat.primitives.serialization.load_ssh_public_key",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAAlgorithm.sign": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAAlgorithm.verify": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "cryptography.exceptions.InvalidSignature",
    "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAPSSAlgorithm": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "jwt.algorithms.RSAAlgorithm"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.RSAPSSAlgorithm.sign": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1",
    "cryptography.hazmat.primitives.asymmetric.padding.PSS"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAPSSAlgorithm.verify": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "cryptography.exceptions.InvalidSignature",
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1",
    "cryptography.hazmat.primitives.asymmetric.padding.PSS"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAPrivateKey": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey"
  },
  "type": "import"
 },
 "jwt.algorithms.RSAPublicKey": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey"
  },
  "type": "import"
 },
 "jwt.algorithms.default_backend": {
  "data": {
   "shadows": "cryptography.hazmat.backends.default_backend"
  },
  "type": "import"
 },
 "jwt.algorithms.ec": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.ec"
  },
  "type": "import"
 },
 "jwt.algorithms.get_default_algorithms": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "ECAlgorithm.SHA256",
    "ECAlgorithm.SHA384",
    "ECAlgorithm.SHA512",
    "HMACAlgorithm.SHA256",
    "HMACAlgorithm.SHA384",
    "HMACAlgorithm.SHA512",
    "RSAAlgorithm.SHA256",
    "RSAAlgorithm.SHA384",
    "RSAAlgorithm.SHA512",
    "RSAPSSAlgorithm.SHA256",
    "RSAPSSAlgorithm.SHA384",
    "RSAPSSAlgorithm.SHA512",
    "jwt.algorithms.ECAlgorithm",
    "jwt.algorithms.HMACAlgorithm",
    "jwt.algorithms.NoneAlgorithm",
    "jwt.algorithms.RSAAlgorithm",
    "jwt.algorithms.RSAPSSAlgorithm",
    "jwt.algorithms.has_crypto"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.has_crypto": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "jwt.algorithms.hashes": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.hashes"
  },
  "type": "import"
 },
 "jwt.algorithms.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "jwt.algorithms.hmac": {
  "data": {
   "shadows": "hmac"
  },
  "type": "import"
 },
 "jwt.algorithms.load_pem_private_key": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.serialization.load_pem_private_key"
  },
  "type": "import"
 },
 "jwt.algorithms.load_pem_public_key": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.serialization.load_pem_public_key"
  },
  "type": "import"
 },
 "jwt.algorithms.load_ssh_public_key": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.serialization.load_ssh_public_key"
  },
  "type": "import"
 },
 "jwt.algorithms.padding": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.padding"
  },
  "type": "import"
 },
 "jwt.api_jws": {
  "data": {
   "symbols_in_volume": [
    "jwt.api_jws.PyJWS",
    "jwt.api_jws._jws_global_obj"
   ]
  },
  "type": "module"
 },
 "jwt.api_jws.Mapping": {
  "data": {
   "shadows": "collections.Mapping"
  },
  "type": "import"
 },
 "jwt.api_jws.PyJWS": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "jwt.api_jws.PyJWS.__init__": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "get_default_algorithms",
    "list",
    "merge_dict",
    "set"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS._get_default_options": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS._load": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "DecodeError",
    "TypeError",
    "ValueError",
    "base64url_decode",
    "collections.Mapping",
    "isinstance",
    "jwt.api_jws.binascii",
    "jwt.api_jws.json"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS._verify_signature": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "DecodeError",
    "InvalidAlgorithmError",
    "KeyError"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.decode": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "DeprecationWarning",
    "jwt.api_jws.warnings",
    "merge_dict"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.encode": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "KeyError",
    "NotImplementedError",
    "base64url_encode",
    "jwt.api_jws.json"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.get_algorithms": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.get_unverified_header": {
  "data": {
   "lineno": 122
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.register_algorithm": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.unregister_algorithm": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws._jws_global_obj": {
  "data": {
   "lineno": 184
  },
  "type": "constant"
 },
 "jwt.api_jws.binascii": {
  "data": {
   "shadows": "binascii"
  },
  "type": "import"
 },
 "jwt.api_jws.decode": {
  "data": {
   "lineno": 186
  },
  "type": "constant"
 },
 "jwt.api_jws.encode": {
  "data": {
   "lineno": 185
  },
  "type": "constant"
 },
 "jwt.api_jws.get_unverified_header": {
  "data": {
   "lineno": 189
  },
  "type": "constant"
 },
 "jwt.api_jws.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "jwt.api_jws.register_algorithm": {
  "data": {
   "lineno": 187
  },
  "type": "constant"
 },
 "jwt.api_jws.unregister_algorithm": {
  "data": {
   "lineno": 188
  },
  "type": "constant"
 },
 "jwt.api_jws.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "jwt.api_jwt": {
  "data": {
   "symbols_in_volume": [
    "jwt.api_jwt.PyJWT",
    "jwt.api_jwt._jwt_global_obj"
   ]
  },
  "type": "module"
 },
 "jwt.api_jwt.Mapping": {
  "data": {
   "shadows": "collections.Mapping"
  },
  "type": "import"
 },
 "jwt.api_jwt.PyJWT": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "jwt.api_jwt.PyJWT._get_default_options": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_aud": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "InvalidAudienceError",
    "MissingRequiredClaimError",
    "any",
    "isinstance",
    "list"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_claims": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "DeprecationWarning",
    "TypeError",
    "calendar.timegm",
    "datetime.datetime.utcnow",
    "datetime.timedelta",
    "isinstance",
    "jwt.api_jwt.warnings",
    "timedelta_total_seconds",
    "type"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_exp": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "DecodeError",
    "ExpiredSignatureError",
    "ValueError",
    "int"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_iat": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "DecodeError",
    "InvalidIssuedAtError",
    "ValueError",
    "int"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_iss": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "InvalidIssuerError",
    "MissingRequiredClaimError"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_nbf": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "DecodeError",
    "ImmatureSignatureError",
    "ValueError",
    "int"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_required_claims": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "MissingRequiredClaimError"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT.decode": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "DecodeError",
    "ValueError",
    "collections.Mapping",
    "isinstance",
    "jwt.api_jwt.PyJWT",
    "jwt.api_jwt.json",
    "merge_dict",
    "super"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT.encode": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "TypeError",
    "calendar.timegm",
    "collections.Mapping",
    "datetime.datetime",
    "isinstance",
    "jwt.api_jwt.PyJWT",
    "jwt.api_jwt.json",
    "super"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt._jwt_global_obj": {
  "data": {
   "lineno": 182
  },
  "type": "constant"
 },
 "jwt.api_jwt.datetime": {
  "data": {
   "shadows": "datetime.datetime"
  },
  "type": "import"
 },
 "jwt.api_jwt.decode": {
  "data": {
   "lineno": 184
  },
  "type": "constant"
 },
 "jwt.api_jwt.encode": {
  "data": {
   "lineno": 183
  },
  "type": "constant"
 },
 "jwt.api_jwt.get_unverified_header": {
  "data": {
   "lineno": 187
  },
  "type": "constant"
 },
 "jwt.api_jwt.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "jwt.api_jwt.register_algorithm": {
  "data": {
   "lineno": 185
  },
  "type": "constant"
 },
 "jwt.api_jwt.timedelta": {
  "data": {
   "shadows": "datetime.timedelta"
  },
  "type": "import"
 },
 "jwt.api_jwt.timegm": {
  "data": {
   "shadows": "calendar.timegm"
  },
  "type": "import"
 },
 "jwt.api_jwt.unregister_algorithm": {
  "data": {
   "lineno": 186
  },
  "type": "constant"
 },
 "jwt.api_jwt.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "jwt.compat": {
  "data": {
   "symbols_in_volume": [
    "AttributeError",
    "jwt.compat.PY3",
    "jwt.compat.hmac",
    "jwt.compat.sys",
    "str"
   ]
  },
  "type": "module"
 },
 "jwt.compat.PY3": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "jwt.compat.constant_time_compare": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "len",
    "ord",
    "zip"
   ]
  },
  "type": "function"
 },
 "jwt.compat.hmac": {
  "data": {
   "shadows": "hmac"
  },
  "type": "import"
 },
 "jwt.compat.string_types": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "jwt.compat.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "jwt.compat.text_type": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "jwt.compat.timedelta_total_seconds": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "AttributeError"
   ]
  },
  "type": "function"
 },
 "jwt.contrib": {
  "data": {},
  "type": "module"
 },
 "jwt.contrib.algorithms": {
  "data": {},
  "type": "module"
 },
 "jwt.contrib.algorithms.py_ecdsa": {
  "data": {},
  "type": "module"
 },
 "jwt.contrib.algorithms.py_ecdsa.Algorithm": {
  "data": {
   "shadows": "jwt.algorithms.Algorithm"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.py_ecdsa.ECAlgorithm": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "jwt.algorithms.Algorithm",
    "jwt.contrib.algorithms.py_ecdsa.hashlib"
   ]
  },
  "type": "class"
 },
 "jwt.contrib.algorithms.py_ecdsa.ECAlgorithm.__init__": {
  "data": {
   "lineno": 25
  },
  "type": "function"
 },
 "jwt.contrib.algorithms.py_ecdsa.ECAlgorithm.prepare_key": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "jwt.compat.string_types",
    "jwt.compat.text_type",
    "jwt.contrib.algorithms.py_ecdsa.ecdsa"
   ]
  },
  "type": "function"
 },
 "jwt.contrib.algorithms.py_ecdsa.ECAlgorithm.sign": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "jwt.contrib.algorithms.py_ecdsa.ecdsa"
   ]
  },
  "type": "function"
 },
 "jwt.contrib.algorithms.py_ecdsa.ECAlgorithm.verify": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "AssertionError",
    "jwt.contrib.algorithms.py_ecdsa.ecdsa"
   ]
  },
  "type": "function"
 },
 "jwt.contrib.algorithms.py_ecdsa.ecdsa": {
  "data": {
   "shadows": "ecdsa"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.py_ecdsa.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.py_ecdsa.string_types": {
  "data": {
   "shadows": "jwt.compat.string_types"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.py_ecdsa.text_type": {
  "data": {
   "shadows": "jwt.compat.text_type"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.pycrypto": {
  "data": {},
  "type": "module"
 },
 "jwt.contrib.algorithms.pycrypto.Algorithm": {
  "data": {
   "shadows": "jwt.algorithms.Algorithm"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.pycrypto.Crypto.Hash.SHA256": {
  "data": {
   "shadows": "Crypto.Hash.SHA256"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.pycrypto.Crypto.Hash.SHA384": {
  "data": {
   "shadows": "Crypto.Hash.SHA384"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.pycrypto.Crypto.Hash.SHA512": {
  "data": {
   "shadows": "Crypto.Hash.SHA512"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.pycrypto.PKCS1_v1_5": {
  "data": {
   "shadows": "Crypto.Signature.PKCS1_v1_5"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.pycrypto.RSA": {
  "data": {
   "shadows": "Crypto.PublicKey.RSA"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.pycrypto.RSAAlgorithm": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "jwt.algorithms.Algorithm"
   ]
  },
  "type": "class"
 },
 "jwt.contrib.algorithms.pycrypto.RSAAlgorithm.__init__": {
  "data": {
   "lineno": 25
  },
  "type": "function"
 },
 "jwt.contrib.algorithms.pycrypto.RSAAlgorithm.prepare_key": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "Crypto.PublicKey.RSA._RSAobj",
    "Crypto.PublicKey.RSA.importKey",
    "TypeError",
    "isinstance",
    "jwt.compat.string_types",
    "jwt.compat.text_type"
   ]
  },
  "type": "function"
 },
 "jwt.contrib.algorithms.pycrypto.RSAAlgorithm.sign": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "Crypto.Signature.PKCS1_v1_5.new"
   ]
  },
  "type": "function"
 },
 "jwt.contrib.algorithms.pycrypto.RSAAlgorithm.verify": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "Crypto.Signature.PKCS1_v1_5.new"
   ]
  },
  "type": "function"
 },
 "jwt.contrib.algorithms.pycrypto.string_types": {
  "data": {
   "shadows": "jwt.compat.string_types"
  },
  "type": "import"
 },
 "jwt.contrib.algorithms.pycrypto.text_type": {
  "data": {
   "shadows": "jwt.compat.text_type"
  },
  "type": "import"
 },
 "jwt.exceptions": {
  "data": {
   "symbols_in_volume": [
    "jwt.exceptions.ExpiredSignatureError",
    "jwt.exceptions.InvalidAudienceError",
    "jwt.exceptions.InvalidIssuerError"
   ]
  },
  "type": "module"
 },
 "jwt.exceptions.DecodeError": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.ExpiredSignature": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "jwt.exceptions.ExpiredSignatureError": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.ImmatureSignatureError": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidAlgorithmError": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidAudience": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "jwt.exceptions.InvalidAudienceError": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidIssuedAtError": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidIssuer": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "jwt.exceptions.InvalidIssuerError": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidKeyError": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidTokenError": {
  "data": {
   "lineno": 1,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.MissingRequiredClaimError": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.MissingRequiredClaimError.__init__": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "jwt.exceptions.MissingRequiredClaimError.__str__": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "jwt.utils": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "jwt.utils.base64": {
  "data": {
   "shadows": "base64"
  },
  "type": "import"
 },
 "jwt.utils.base64url_decode": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "input",
    "jwt.utils.base64",
    "len"
   ]
  },
  "type": "function"
 },
 "jwt.utils.base64url_encode": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "input",
    "jwt.utils.base64"
   ]
  },
  "type": "function"
 },
 "jwt.utils.binascii": {
  "data": {
   "shadows": "binascii"
  },
  "type": "import"
 },
 "jwt.utils.bytes_to_number": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "int",
    "jwt.utils.binascii"
   ]
  },
  "type": "function"
 },
 "jwt.utils.decode_rfc6979_signature": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.utils.decode_rfc6979_signature"
  },
  "type": "import"
 },
 "jwt.utils.der_to_raw_signature": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.asymmetric.utils.decode_rfc6979_signature",
    "jwt.utils.number_to_bytes"
   ]
  },
  "type": "function"
 },
 "jwt.utils.encode_rfc6979_signature": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.utils.encode_rfc6979_signature"
  },
  "type": "import"
 },
 "jwt.utils.merge_dict": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "AttributeError",
    "TypeError",
    "ValueError"
   ]
  },
  "type": "function"
 },
 "jwt.utils.number_to_bytes": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "jwt.utils.binascii"
   ]
  },
  "type": "function"
 },
 "jwt.utils.raw_to_der_signature": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "ValueError",
    "cryptography.hazmat.primitives.asymmetric.utils.encode_rfc6979_signature",
    "jwt.utils.bytes_to_number",
    "len"
   ]
  },
  "type": "function"
 }
}