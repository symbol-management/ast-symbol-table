{
 "jwt": {
  "data": {
   "symbols_in_volume": [
    "jwt.__description__",
    "jwt.__uri__",
    "jwt.__url__"
   ]
  },
  "type": "module"
 },
 "jwt.__all__": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "jwt.__author__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "jwt.__copyright__": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "jwt.__description__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "jwt.__doc__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "jwt.__email__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "jwt.__license__": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "jwt.__title__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "jwt.__uri__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "jwt.__url__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "jwt.__version__": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "jwt.algorithms": {
  "data": {
   "symbols_in_volume": [
    "ModuleNotFoundError",
    "jwt.algorithms.has_crypto"
   ]
  },
  "type": "module"
 },
 "jwt.algorithms.Algorithm": {
  "data": {
   "lineno": 97
  },
  "type": "class"
 },
 "jwt.algorithms.Algorithm.from_jwk": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.Algorithm.prepare_key": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.Algorithm.sign": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.Algorithm.to_jwk": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.Algorithm.verify": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.ECAlgorithm": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.hashes.SHA256",
    "cryptography.hazmat.primitives.hashes.SHA384",
    "cryptography.hazmat.primitives.hashes.SHA512",
    "jwt.algorithms.Algorithm"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.ECAlgorithm.__init__": {
  "data": {
   "lineno": 388
  },
  "type": "function"
 },
 "jwt.algorithms.ECAlgorithm.from_jwk": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "InvalidKeyError",
    "ValueError",
    "base64url_decode",
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers",
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers",
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1",
    "dict",
    "int.from_bytes",
    "isinstance",
    "jwt.algorithms.json",
    "len",
    "staticmethod",
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.ECAlgorithm.prepare_key": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "bytes",
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey",
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey",
    "cryptography.hazmat.primitives.serialization.load_pem_private_key",
    "cryptography.hazmat.primitives.serialization.load_pem_public_key",
    "cryptography.hazmat.primitives.serialization.load_ssh_public_key",
    "force_bytes",
    "isinstance",
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.ECAlgorithm.sign": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
    "der_to_raw_signature"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.ECAlgorithm.verify": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": [
    "ValueError",
    "cryptography.exceptions.InvalidSignature",
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
    "raw_to_der_signature"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.Ed25519Algorithm": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": [
    "jwt.algorithms.Algorithm"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.Ed25519Algorithm.__init__": {
  "data": {
   "lineno": 529
  },
  "type": "function"
 },
 "jwt.algorithms.Ed25519Algorithm.prepare_key": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": [
    "TypeError",
    "bytes",
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey",
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey",
    "cryptography.hazmat.primitives.serialization.load_pem_private_key",
    "cryptography.hazmat.primitives.serialization.load_pem_public_key",
    "cryptography.hazmat.primitives.serialization.load_ssh_public_key",
    "isinstance",
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.Ed25519Algorithm.sign": {
  "data": {
   "lineno": 551,
   "symbols_in_volume": [
    "bytes",
    "type"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.Ed25519Algorithm.verify": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": [
    "bytes",
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey",
    "isinstance",
    "type"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.Ed25519PrivateKey": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey"
  },
  "type": "import"
 },
 "jwt.algorithms.Ed25519PublicKey": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey"
  },
  "type": "import"
 },
 "jwt.algorithms.EllipticCurvePrivateKey": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey"
  },
  "type": "import"
 },
 "jwt.algorithms.EllipticCurvePublicKey": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey"
  },
  "type": "import"
 },
 "jwt.algorithms.HMACAlgorithm": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "jwt.algorithms.Algorithm",
    "jwt.algorithms.hashlib"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.HMACAlgorithm.__init__": {
  "data": {
   "lineno": 170
  },
  "type": "function"
 },
 "jwt.algorithms.HMACAlgorithm.from_jwk": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "InvalidKeyError",
    "ValueError",
    "base64url_decode",
    "dict",
    "isinstance",
    "jwt.algorithms.json",
    "staticmethod",
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.HMACAlgorithm.prepare_key": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "InvalidKeyError",
    "any",
    "force_bytes"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.HMACAlgorithm.sign": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "jwt.algorithms.hmac"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.HMACAlgorithm.to_jwk": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "base64url_encode",
    "force_bytes",
    "jwt.algorithms.json",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.HMACAlgorithm.verify": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "jwt.algorithms.hmac"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.InvalidSignature": {
  "data": {
   "shadows": "cryptography.exceptions.InvalidSignature"
  },
  "type": "import"
 },
 "jwt.algorithms.NoneAlgorithm": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "jwt.algorithms.Algorithm"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.NoneAlgorithm.prepare_key": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "InvalidKeyError"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.NoneAlgorithm.sign": {
  "data": {
   "lineno": 153
  },
  "type": "function"
 },
 "jwt.algorithms.NoneAlgorithm.verify": {
  "data": {
   "lineno": 156
  },
  "type": "function"
 },
 "jwt.algorithms.RSAAlgorithm": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.hashes.SHA256",
    "cryptography.hazmat.primitives.hashes.SHA384",
    "cryptography.hazmat.primitives.hashes.SHA512",
    "jwt.algorithms.Algorithm"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.RSAAlgorithm.__init__": {
  "data": {
   "lineno": 236
  },
  "type": "function"
 },
 "jwt.algorithms.RSAAlgorithm.from_jwk": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "InvalidKeyError",
    "ValueError",
    "all",
    "any",
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers",
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers",
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmp1",
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmq1",
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_iqmp",
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_recover_prime_factors",
    "dict",
    "from_base64url_uint",
    "isinstance",
    "jwt.algorithms.json",
    "staticmethod",
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAAlgorithm.prepare_key": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "bytes",
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey",
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey",
    "cryptography.hazmat.primitives.serialization.load_pem_private_key",
    "cryptography.hazmat.primitives.serialization.load_pem_public_key",
    "cryptography.hazmat.primitives.serialization.load_ssh_public_key",
    "force_bytes",
    "isinstance",
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAAlgorithm.sign": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAAlgorithm.to_jwk": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "InvalidKeyError",
    "getattr",
    "jwt.algorithms.json",
    "staticmethod",
    "to_base64url_uint"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAAlgorithm.verify": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "cryptography.exceptions.InvalidSignature",
    "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAPSSAlgorithm": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": [
    "jwt.algorithms.RSAAlgorithm"
   ]
  },
  "type": "class"
 },
 "jwt.algorithms.RSAPSSAlgorithm.sign": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1",
    "cryptography.hazmat.primitives.asymmetric.padding.PSS"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAPSSAlgorithm.verify": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "cryptography.exceptions.InvalidSignature",
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1",
    "cryptography.hazmat.primitives.asymmetric.padding.PSS"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.RSAPrivateKey": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey"
  },
  "type": "import"
 },
 "jwt.algorithms.RSAPrivateNumbers": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers"
  },
  "type": "import"
 },
 "jwt.algorithms.RSAPublicKey": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey"
  },
  "type": "import"
 },
 "jwt.algorithms.RSAPublicNumbers": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers"
  },
  "type": "import"
 },
 "jwt.algorithms.cryptography.exceptions": {
  "data": {
   "shadows": "cryptography.exceptions"
  },
  "type": "import"
 },
 "jwt.algorithms.ec": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.ec"
  },
  "type": "import"
 },
 "jwt.algorithms.get_default_algorithms": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "ECAlgorithm.SHA256",
    "ECAlgorithm.SHA384",
    "ECAlgorithm.SHA512",
    "HMACAlgorithm.SHA256",
    "HMACAlgorithm.SHA384",
    "HMACAlgorithm.SHA512",
    "RSAAlgorithm.SHA256",
    "RSAAlgorithm.SHA384",
    "RSAAlgorithm.SHA512",
    "RSAPSSAlgorithm.SHA256",
    "RSAPSSAlgorithm.SHA384",
    "RSAPSSAlgorithm.SHA512",
    "jwt.algorithms.ECAlgorithm",
    "jwt.algorithms.Ed25519Algorithm",
    "jwt.algorithms.HMACAlgorithm",
    "jwt.algorithms.NoneAlgorithm",
    "jwt.algorithms.RSAAlgorithm",
    "jwt.algorithms.RSAPSSAlgorithm",
    "jwt.algorithms.has_crypto"
   ]
  },
  "type": "function"
 },
 "jwt.algorithms.has_crypto": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "jwt.algorithms.hashes": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.hashes"
  },
  "type": "import"
 },
 "jwt.algorithms.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "jwt.algorithms.hmac": {
  "data": {
   "shadows": "hmac"
  },
  "type": "import"
 },
 "jwt.algorithms.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "jwt.algorithms.load_pem_private_key": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.serialization.load_pem_private_key"
  },
  "type": "import"
 },
 "jwt.algorithms.load_pem_public_key": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.serialization.load_pem_public_key"
  },
  "type": "import"
 },
 "jwt.algorithms.load_ssh_public_key": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.serialization.load_ssh_public_key"
  },
  "type": "import"
 },
 "jwt.algorithms.padding": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.padding"
  },
  "type": "import"
 },
 "jwt.algorithms.requires_cryptography": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "jwt.algorithms.rsa_crt_dmp1": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmp1"
  },
  "type": "import"
 },
 "jwt.algorithms.rsa_crt_dmq1": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmq1"
  },
  "type": "import"
 },
 "jwt.algorithms.rsa_crt_iqmp": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_iqmp"
  },
  "type": "import"
 },
 "jwt.algorithms.rsa_recover_prime_factors": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.rsa.rsa_recover_prime_factors"
  },
  "type": "import"
 },
 "jwt.api_jwk": {
  "data": {},
  "type": "module"
 },
 "jwt.api_jwk.PyJWK": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "jwt.api_jwk.PyJWK.__init__": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "PyJWKError",
    "dict",
    "get_default_algorithms",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwk.PyJWK.from_dict": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "jwt.api_jwk.PyJWK",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwk.PyJWK.from_json": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "jwt.api_jwk.PyJWK",
    "jwt.api_jwk.json",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwk.PyJWK.key_id": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwk.PyJWK.key_type": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwk.PyJWK.public_key_use": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwk.PyJWKSet": {
  "data": {
   "lineno": 47
  },
  "type": "class"
 },
 "jwt.api_jwk.PyJWKSet.__init__": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "PyJWKSetError",
    "isinstance",
    "jwt.api_jwk.PyJWK",
    "len",
    "list"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwk.PyJWKSet.from_dict": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "jwt.api_jwk.PyJWKSet",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwk.PyJWKSet.from_json": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "jwt.api_jwk.PyJWKSet",
    "jwt.api_jwk.json",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwk.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "jwt.api_jws": {
  "data": {
   "symbols_in_volume": [
    "jwt.api_jws.PyJWS",
    "jwt.api_jws._jws_global_obj"
   ]
  },
  "type": "module"
 },
 "jwt.api_jws.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "jwt.api_jws.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "jwt.api_jws.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "jwt.api_jws.Mapping": {
  "data": {
   "shadows": "collections.abc.Mapping"
  },
  "type": "import"
 },
 "jwt.api_jws.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "jwt.api_jws.PyJWS": {
  "data": {
   "lineno": 21
  },
  "type": "class"
 },
 "jwt.api_jws.PyJWS.__init__": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "get_default_algorithms",
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS._get_default_options": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS._load": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "DecodeError",
    "TypeError",
    "ValueError",
    "base64url_decode",
    "bytes",
    "collections.abc.Mapping",
    "isinstance",
    "jwt.api_jws.binascii",
    "jwt.api_jws.json",
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS._validate_headers": {
  "data": {
   "lineno": 241
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS._validate_kid": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "InvalidTokenError",
    "isinstance",
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS._verify_signature": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "InvalidAlgorithmError",
    "InvalidSignatureError",
    "KeyError"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.decode": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "str",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.decode_complete": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "DecodeError",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.encode": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "KeyError",
    "NotImplementedError",
    "base64url_encode",
    "bytes",
    "jwt.api_jws.json",
    "str",
    "typing.Dict",
    "typing.Optional",
    "typing.Type"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.get_algorithms": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.get_unverified_header": {
  "data": {
   "lineno": 168
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.register_algorithm": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.PyJWS.unregister_algorithm": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "jwt.api_jws.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "jwt.api_jws._jws_global_obj": {
  "data": {
   "lineno": 250
  },
  "type": "constant"
 },
 "jwt.api_jws.binascii": {
  "data": {
   "shadows": "binascii"
  },
  "type": "import"
 },
 "jwt.api_jws.decode": {
  "data": {
   "lineno": 253
  },
  "type": "constant"
 },
 "jwt.api_jws.decode_complete": {
  "data": {
   "lineno": 252
  },
  "type": "constant"
 },
 "jwt.api_jws.encode": {
  "data": {
   "lineno": 251
  },
  "type": "constant"
 },
 "jwt.api_jws.get_unverified_header": {
  "data": {
   "lineno": 256
  },
  "type": "constant"
 },
 "jwt.api_jws.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "jwt.api_jws.register_algorithm": {
  "data": {
   "lineno": 254
  },
  "type": "constant"
 },
 "jwt.api_jws.unregister_algorithm": {
  "data": {
   "lineno": 255
  },
  "type": "constant"
 },
 "jwt.api_jwt": {
  "data": {
   "symbols_in_volume": [
    "jwt.api_jwt.PyJWT",
    "jwt.api_jwt._jwt_global_obj"
   ]
  },
  "type": "module"
 },
 "jwt.api_jwt.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "jwt.api_jwt.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "jwt.api_jwt.Iterable": {
  "data": {
   "shadows": "collections.abc.Iterable"
  },
  "type": "import"
 },
 "jwt.api_jwt.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "jwt.api_jwt.Mapping": {
  "data": {
   "shadows": "collections.abc.Mapping"
  },
  "type": "import"
 },
 "jwt.api_jwt.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "jwt.api_jwt.PyJWT": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "jwt.api_jwt.PyJWT.__init__": {
  "data": {
   "lineno": 20
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._get_default_options": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "bool",
    "staticmethod",
    "str",
    "typing.Dict",
    "typing.List",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_aud": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "InvalidAudienceError",
    "MissingRequiredClaimError",
    "any",
    "isinstance",
    "list",
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_claims": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "TypeError",
    "bytes",
    "calendar.timegm",
    "collections.abc.Iterable",
    "datetime.datetime.utcnow",
    "datetime.timedelta",
    "isinstance",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_exp": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "DecodeError",
    "ExpiredSignatureError",
    "ValueError",
    "int"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_iat": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "InvalidIssuedAtError",
    "ValueError",
    "int"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_iss": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "InvalidIssuerError",
    "MissingRequiredClaimError"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_nbf": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "DecodeError",
    "ImmatureSignatureError",
    "ValueError",
    "int"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT._validate_required_claims": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "MissingRequiredClaimError"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT.decode": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT.decode_complete": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "DecodeError",
    "ValueError",
    "dict",
    "isinstance",
    "jwt.api_jwt.json",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.PyJWT.encode": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "TypeError",
    "calendar.timegm",
    "collections.abc.Mapping",
    "datetime.datetime",
    "isinstance",
    "jwt.api_jwt.json",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.Optional",
    "typing.Type"
   ]
  },
  "type": "function"
 },
 "jwt.api_jwt.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "jwt.api_jwt.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "jwt.api_jwt._jwt_global_obj": {
  "data": {
   "lineno": 213
  },
  "type": "constant"
 },
 "jwt.api_jwt.datetime": {
  "data": {
   "shadows": "datetime.datetime"
  },
  "type": "import"
 },
 "jwt.api_jwt.decode": {
  "data": {
   "lineno": 216
  },
  "type": "constant"
 },
 "jwt.api_jwt.decode_complete": {
  "data": {
   "lineno": 215
  },
  "type": "constant"
 },
 "jwt.api_jwt.encode": {
  "data": {
   "lineno": 214
  },
  "type": "constant"
 },
 "jwt.api_jwt.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "jwt.api_jwt.timedelta": {
  "data": {
   "shadows": "datetime.timedelta"
  },
  "type": "import"
 },
 "jwt.api_jwt.timegm": {
  "data": {
   "shadows": "calendar.timegm"
  },
  "type": "import"
 },
 "jwt.exceptions": {
  "data": {},
  "type": "module"
 },
 "jwt.exceptions.DecodeError": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.ExpiredSignatureError": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.ImmatureSignatureError": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidAlgorithmError": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidAudienceError": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidIssuedAtError": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidIssuerError": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidKeyError": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "jwt.exceptions.PyJWTError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidSignatureError": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "jwt.exceptions.DecodeError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.InvalidTokenError": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "jwt.exceptions.PyJWTError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.MissingRequiredClaimError": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "jwt.exceptions.InvalidTokenError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.MissingRequiredClaimError.__init__": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "jwt.exceptions.MissingRequiredClaimError.__str__": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "jwt.exceptions.PyJWKClientError": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "jwt.exceptions.PyJWTError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.PyJWKError": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "jwt.exceptions.PyJWTError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.PyJWKSetError": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "jwt.exceptions.PyJWTError"
   ]
  },
  "type": "class"
 },
 "jwt.exceptions.PyJWTError": {
  "data": {
   "lineno": 1,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "jwt.help": {
  "data": {
   "symbols_in_volume": [
    "ModuleNotFoundError",
    "__name__",
    "jwt.help.main"
   ]
  },
  "type": "module"
 },
 "jwt.help.cryptography": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "jwt.help.info": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "OSError",
    "getattr",
    "jwt.help.cryptography",
    "jwt.help.platform",
    "jwt.help.sys"
   ]
  },
  "type": "function"
 },
 "jwt.help.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "jwt.help.main": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "jwt.help.info",
    "jwt.help.json",
    "print"
   ]
  },
  "type": "function"
 },
 "jwt.help.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "jwt.help.pyjwt_version": {
  "data": {
   "shadows": "__version__"
  },
  "type": "import"
 },
 "jwt.help.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "jwt.jwks_client": {
  "data": {},
  "type": "module"
 },
 "jwt.jwks_client.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "jwt.jwks_client.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "jwt.jwks_client.PyJWKClient": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "jwt.jwks_client.PyJWKClient.__init__": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.jwks_client.PyJWKClient.fetch_data": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "jwt.jwks_client.json",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "jwt.jwks_client.PyJWKClient.get_jwk_set": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "jwt.jwks_client.PyJWKClient.get_signing_key": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "PyJWKClientError",
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.jwks_client.PyJWKClient.get_signing_key_from_jwt": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "jwt.jwks_client.PyJWKClient.get_signing_keys": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "PyJWKClientError",
    "len",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "jwt.jwks_client.decode_token": {
  "data": {
   "shadows": "decode_complete"
  },
  "type": "import"
 },
 "jwt.jwks_client.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "jwt.jwks_client.urllib.request": {
  "data": {
   "shadows": "urllib.request"
  },
  "type": "import"
 },
 "jwt.utils": {
  "data": {
   "symbols_in_volume": [
    "ModuleNotFoundError",
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve",
    "typing.Any"
   ]
  },
  "type": "module"
 },
 "jwt.utils.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "jwt.utils.EllipticCurve": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "jwt.utils.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "jwt.utils.base64": {
  "data": {
   "shadows": "base64"
  },
  "type": "import"
 },
 "jwt.utils.base64url_decode": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "bytes",
    "input",
    "input.encode",
    "isinstance",
    "jwt.utils.base64",
    "len",
    "str",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "jwt.utils.base64url_encode": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "bytes",
    "input",
    "jwt.utils.base64"
   ]
  },
  "type": "function"
 },
 "jwt.utils.binascii": {
  "data": {
   "shadows": "binascii"
  },
  "type": "import"
 },
 "jwt.utils.bytes_from_int": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "bytes",
    "int"
   ]
  },
  "type": "function"
 },
 "jwt.utils.bytes_to_number": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "bytes",
    "int",
    "jwt.utils.binascii"
   ]
  },
  "type": "function"
 },
 "jwt.utils.decode_dss_signature": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.utils.decode_dss_signature"
  },
  "type": "import"
 },
 "jwt.utils.der_to_raw_signature": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "bytes",
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve",
    "cryptography.hazmat.primitives.asymmetric.utils.decode_dss_signature",
    "jwt.utils.number_to_bytes"
   ]
  },
  "type": "function"
 },
 "jwt.utils.encode_dss_signature": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.utils.encode_dss_signature"
  },
  "type": "import"
 },
 "jwt.utils.force_bytes": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "TypeError",
    "bytes",
    "isinstance",
    "str",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "jwt.utils.from_base64url_uint": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "bytes",
    "int",
    "int.from_bytes",
    "isinstance",
    "jwt.utils.base64url_decode",
    "str",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "jwt.utils.number_to_bytes": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "bytes",
    "int",
    "jwt.utils.binascii"
   ]
  },
  "type": "function"
 },
 "jwt.utils.raw_to_der_signature": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "ValueError",
    "bytes",
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve",
    "cryptography.hazmat.primitives.asymmetric.utils.encode_dss_signature",
    "jwt.utils.bytes_to_number",
    "len"
   ]
  },
  "type": "function"
 },
 "jwt.utils.to_base64url_uint": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "ValueError",
    "bytes",
    "int",
    "jwt.utils.base64url_encode",
    "jwt.utils.bytes_from_int",
    "len"
   ]
  },
  "type": "function"
 }
}