{
 "pycalphad": {
  "lineno": null,
  "symbols_in_volume": [
   "warnings.filterwarnings"
  ],
  "type": "module"
 },
 "pycalphad._version": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad._version.get_versions": {
  "lineno": 20,
  "symbols_in_volume": [
   "json.loads"
  ],
  "type": "function"
 },
 "pycalphad.codegen": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.codegen.callables": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.codegen.callables.build_callables": {
  "lineno": 11,
  "symbols_in_volume": [
   "itertools.repeat",
   "pycalphad.codegen.sympydiff_utils.build_functions",
   "pycalphad.core.utils.get_pure_elements",
   "pycalphad.core.utils.get_state_variables",
   "pycalphad.core.utils.unpack_components",
   "pycalphad.core.utils.wrap_symbol",
   "pycalphad.variables.N",
   "pycalphad.variables.P",
   "pycalphad.variables.StateVariable",
   "pycalphad.variables.T",
   "warnings.warn"
  ],
  "type": "function"
 },
 "pycalphad.codegen.callables.build_phase_records": {
  "lineno": 136,
  "symbols_in_volume": [
   "pycalphad.core.constraints.build_constraints",
   "pycalphad.core.phase_rec.PhaseRecord",
   "pycalphad.core.utils.extract_parameters",
   "pycalphad.core.utils.get_state_variables"
  ],
  "type": "function"
 },
 "pycalphad.codegen.sympydiff_utils": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "pycalphad.codegen.sympydiff_utils.build_functions": {
  "lineno": 15,
  "symbols_in_volume": [
   "pycalphad.core.cache.cacheit",
   "pycalphad.core.utils.wrap_symbol_symengine",
   "symengine.count_ops",
   "symengine.lambdify",
   "symengine.sympify"
  ],
  "type": "function"
 },
 "pycalphad.core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.core.cache": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "pycalphad.core.cache._HashedSeq": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.core.cache._HashedSeq.__hash__": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.cache._HashedSeq.__init__": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.cache._make_key": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.cache.fhash": {
  "lineno": 18,
  "symbols_in_volume": [
   "collections.Iterable",
   "collections.Mapping"
  ],
  "type": "function"
 },
 "pycalphad.core.cache.lru_cache": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.cache.lru_cache.decorating_function": {
  "lineno": 89,
  "symbols_in_volume": [
   "functools.update_wrapper",
   "threading.RLock"
  ],
  "type": "function"
 },
 "pycalphad.core.cache.lru_cache.decorating_function.cache_clear": {
  "lineno": 179,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.cache.lru_cache.decorating_function.cache_info": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.cache.lru_cache.decorating_function.wrapper": {
  "lineno": 127,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.calculate": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.core.calculate._compute_phase_values": {
  "lineno": 121,
  "symbols_in_volume": [
   "itertools.chain",
   "numpy.append",
   "numpy.asarray",
   "numpy.ascontiguousarray",
   "numpy.atleast_1d",
   "numpy.broadcast_to",
   "numpy.concatenate",
   "numpy.empty",
   "numpy.eye",
   "numpy.float",
   "numpy.full",
   "numpy.meshgrid",
   "numpy.nan",
   "numpy.repeat",
   "numpy.zeros",
   "pycalphad.core.light_dataset.LightDataset",
   "pycalphad.core.utils.broadcast_to"
  ],
  "type": "function"
 },
 "pycalphad.core.calculate._generate_fake_points": {
  "lineno": 24,
  "symbols_in_volume": [
   "numpy.atleast_1d",
   "numpy.eye",
   "numpy.full",
   "numpy.nan",
   "numpy.repeat",
   "numpy.tile",
   "pycalphad.core.utils.broadcast_to",
   "xarray.Dataset"
  ],
  "type": "function"
 },
 "pycalphad.core.calculate._sample_phase_constitution": {
  "lineno": 64,
  "symbols_in_volume": [
   "itertools.chain",
   "itertools.combinations",
   "numpy.asarray",
   "numpy.atleast_2d",
   "numpy.concatenate",
   "numpy.float",
   "numpy.isnan",
   "numpy.linspace",
   "numpy.newaxis.T",
   "pycalphad.core.cache.cacheit",
   "pycalphad.core.utils.endmember_matrix"
  ],
  "type": "function"
 },
 "pycalphad.core.calculate.calculate": {
  "lineno": 246,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "numpy.any",
   "numpy.array",
   "numpy.atleast_2d",
   "numpy.concatenate",
   "pycalphad.ConditionError",
   "pycalphad.codegen.callables.build_phase_records",
   "pycalphad.core.light_dataset.LightDataset",
   "pycalphad.core.utils.filter_phases",
   "pycalphad.core.utils.generate_dof",
   "pycalphad.core.utils.instantiate_models",
   "pycalphad.core.utils.point_sample",
   "pycalphad.core.utils.unpack_components",
   "pycalphad.core.utils.unpack_condition",
   "pycalphad.core.utils.unpack_kwarg",
   "pycalphad.variables",
   "pycalphad.variables.Species",
   "pycalphad.variables.StateVariable"
  ],
  "type": "function"
 },
 "pycalphad.core.cartesian": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.core.cartesian.cartesian": {
  "lineno": 9,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.asarray",
   "numpy.prod",
   "numpy.repeat",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "pycalphad.core.constants": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.core.constraints": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "pycalphad.core.constraints._build_constraint_functions": {
  "lineno": 12,
  "symbols_in_volume": [
   "pycalphad.core.cache.cacheit",
   "pycalphad.core.utils.wrap_symbol_symengine",
   "pycalphad.variables",
   "symengine.lambdify",
   "symengine.sympify"
  ],
  "type": "function"
 },
 "pycalphad.core.constraints.build_constraints": {
  "lineno": 46,
  "symbols_in_volume": [
   "pycalphad.core.constants.INTERNAL_CONSTRAINT_SCALING",
   "pycalphad.core.constants.MULTIPHASE_CONSTRAINT_SCALING",
   "pycalphad.variables",
   "symengine.Symbol"
  ],
  "type": "function"
 },
 "pycalphad.core.constraints.get_multiphase_constraint_rhs": {
  "lineno": 70,
  "symbols_in_volume": [
   "pycalphad.core.constants.MULTIPHASE_CONSTRAINT_SCALING"
  ],
  "type": "function"
 },
 "pycalphad.core.constraints.is_multiphase_constraint": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.equilibrium": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.core.equilibrium._adjust_conditions": {
  "lineno": 22,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "pycalphad.core.constants.MIN_SITE_FRACTION",
   "pycalphad.core.utils.unpack_condition",
   "pycalphad.variables",
   "pycalphad.variables.Composition"
  ],
  "type": "function"
 },
 "pycalphad.core.equilibrium._eqcalculate": {
  "lineno": 35,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "numpy.any",
   "numpy.arange",
   "numpy.asarray",
   "numpy.atleast_1d",
   "numpy.full",
   "numpy.meshgrid",
   "numpy.nan",
   "numpy.nansum",
   "numpy.nonzero",
   "numpy.take",
   "pycalphad.calculate",
   "pycalphad.core.light_dataset.LightDataset",
   "pycalphad.core.utils.unpack_phases"
  ],
  "type": "function"
 },
 "pycalphad.core.equilibrium.equilibrium": {
  "lineno": 133,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "datetime.datetime.utcnow",
   "numpy.any",
   "numpy.arange",
   "numpy.array",
   "pycalphad.calculate",
   "pycalphad.codegen.callables.build_phase_records",
   "pycalphad.core.eqsolver._solve_eq_at_conditions",
   "pycalphad.core.errors.ConditionError",
   "pycalphad.core.errors.EquilibriumError",
   "pycalphad.core.solver.InteriorPointSolver",
   "pycalphad.core.starting_point.starting_point",
   "pycalphad.core.utils.filter_phases",
   "pycalphad.core.utils.get_state_variables",
   "pycalphad.core.utils.instantiate_models",
   "pycalphad.core.utils.unpack_components",
   "pycalphad.core.utils.unpack_phases",
   "pycalphad.variables.ChemicalPotential",
   "pycalphad.variables.Composition",
   "pycalphad.variables.N",
   "pycalphad.variables.Species",
   "warnings.warn"
  ],
  "type": "function"
 },
 "pycalphad.core.errors": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.core.errors.CalculateError": {
  "lineno": 1,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.core.errors.ConditionError": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.core.errors.DofError": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.core.errors.EquilibriumError": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.core.halton": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.OrderedDict"
  ],
  "type": "module"
 },
 "pycalphad.core.halton.halton": {
  "lineno": 87,
  "symbols_in_volume": [
   "collections.defaultdict",
   "numpy.arange",
   "numpy.asarray",
   "numpy.ceil",
   "numpy.dot",
   "numpy.empty",
   "numpy.float",
   "numpy.floor",
   "numpy.int",
   "numpy.log",
   "numpy.longdouble",
   "numpy.mod",
   "numpy.outer",
   "numpy.power"
  ],
  "type": "function"
 },
 "pycalphad.core.light_dataset": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.core.light_dataset.LightDataset": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.core.light_dataset.LightDataset.__getitem__": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.light_dataset.LightDataset.__init__": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.light_dataset.LightDataset.add_variable": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.light_dataset.LightDataset.get_dataset": {
  "lineno": 58,
  "symbols_in_volume": [
   "xarray.Dataset"
  ],
  "type": "function"
 },
 "pycalphad.core.light_dataset.LightDataset.merge": {
  "lineno": 72,
  "symbols_in_volume": [
   "numpy.all"
  ],
  "type": "function"
 },
 "pycalphad.core.light_dataset.LightDataset.remove": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.lower_convex_hull": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.core.lower_convex_hull.lower_convex_hull": {
  "lineno": 13,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.atleast_1d",
   "numpy.atleast_2d",
   "numpy.index_exp",
   "numpy.nan",
   "numpy.nditer",
   "numpy.nonzero",
   "numpy.ravel_multi_index",
   "numpy.uint64",
   "numpy.where",
   "numpy.zeros",
   "pycalphad.core.cartesian.cartesian",
   "pycalphad.core.constants.MIN_SITE_FRACTION"
  ],
  "type": "function"
 },
 "pycalphad.core.patched_piecewise": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.core.patched_piecewise.exprcondpair_new": {
  "lineno": 32,
  "symbols_in_volume": [
   "sympy.core.Tuple.__new__",
   "sympy.core.basic.as_Basic",
   "sympy.logic.boolalg.Boolean",
   "sympy.logic.boolalg.false",
   "sympy.logic.boolalg.true",
   "sympy.utilities.misc.filldedent",
   "sympy.utilities.misc.func_name"
  ],
  "type": "function"
 },
 "pycalphad.core.patched_piecewise.piecewise_eval": {
  "lineno": 45,
  "symbols_in_volume": [
   "sympy.core.Dummy",
   "sympy.core.Function",
   "sympy.core.S.Infinity",
   "sympy.core.S.NegativeInfinity",
   "sympy.core.S.true",
   "sympy.core.relational.Relational",
   "sympy.core.relational._canonical",
   "sympy.logic.boolalg.And",
   "sympy.logic.boolalg.Boolean",
   "sympy.logic.boolalg.Or",
   "sympy.logic.boolalg.distribute_and_over_or",
   "sympy.utilities.misc.filldedent"
  ],
  "type": "function"
 },
 "pycalphad.core.solver": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "ipopt.setLoggingLevel"
  ],
  "type": "module"
 },
 "pycalphad.core.solver.InteriorPointSolver": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.core.solver.InteriorPointSolver.__init__": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.solver.InteriorPointSolver.apply_options": {
  "lineno": 87,
  "symbols_in_volume": [
   "pycalphad.variables.string_type"
  ],
  "type": "function"
 },
 "pycalphad.core.solver.InteriorPointSolver.solve": {
  "lineno": 107,
  "symbols_in_volume": [
   "ipopt.problem",
   "numpy.abs",
   "numpy.min",
   "pycalphad.core.constants.MIN_SITE_FRACTION"
  ],
  "type": "function"
 },
 "pycalphad.core.solver.SolverBase": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.core.solver.SolverBase.solve": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.starting_point": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.core.starting_point.global_min_is_possible": {
  "lineno": 9,
  "symbols_in_volume": [
   "pycalphad.variables.ChemicalPotential",
   "pycalphad.variables.Composition",
   "pycalphad.variables.N"
  ],
  "type": "function"
 },
 "pycalphad.core.starting_point.starting_point": {
  "lineno": 38,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "numpy.arange",
   "numpy.empty",
   "numpy.int32",
   "pycalphad.__version__",
   "pycalphad.core.light_dataset.LightDataset",
   "pycalphad.core.lower_convex_hull.lower_convex_hull"
  ],
  "type": "function"
 },
 "pycalphad.core.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.core.utils.broadcast_to": {
  "lineno": 24,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.broadcast_arrays",
   "numpy.empty"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.endmember_matrix": {
  "lineno": 175,
  "symbols_in_volume": [
   "functools.reduce",
   "itertools.product",
   "numpy.all",
   "numpy.array",
   "numpy.concatenate",
   "numpy.delete",
   "numpy.empty",
   "numpy.eye",
   "numpy.float",
   "numpy.where",
   "operator.mul",
   "pycalphad.core.constants.MIN_SITE_FRACTION"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.extract_parameters": {
  "lineno": 360,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.empty",
   "numpy.float64",
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.filter_phases": {
  "lineno": 322,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.utils.filter_phases.all_sublattices_active": {
  "lineno": 344,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.utils.generate_dof": {
  "lineno": 160,
  "symbols_in_volume": [
   "pycalphad.variables.SiteFraction"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.get_pure_elements": {
  "lineno": 298,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.utils.get_state_variables": {
  "lineno": 430,
  "symbols_in_volume": [
   "pycalphad.variables.StateVariable"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.instantiate_models": {
  "lineno": 384,
  "symbols_in_volume": [
   "pycalphad.Model"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.make_callable": {
  "lineno": 72,
  "symbols_in_volume": [
   "sympy.utilities.lambdify.lambdify"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.point_sample": {
  "lineno": 29,
  "symbols_in_volume": [
   "numpy.atleast_2d",
   "numpy.log",
   "pycalphad.core.halton.halton"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.sizeof_fmt": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.utils.unpack_components": {
  "lineno": 269,
  "symbols_in_volume": [
   "pycalphad.variables.Species"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.unpack_condition": {
  "lineno": 120,
  "symbols_in_volume": [
   "collections.Iterable",
   "numpy.arange",
   "numpy.float"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.unpack_kwarg": {
  "lineno": 216,
  "symbols_in_volume": [
   "collections.Iterable",
   "collections.Mapping",
   "collections.defaultdict",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.unpack_phases": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.core.utils.wrap_symbol": {
  "lineno": 466,
  "symbols_in_volume": [
   "sympy.Symbol"
  ],
  "type": "function"
 },
 "pycalphad.core.utils.wrap_symbol_symengine": {
  "lineno": 473,
  "symbols_in_volume": [
   "symengine.sympify",
   "sympy.Symbol"
  ],
  "type": "function"
 },
 "pycalphad.io": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.io.database": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "pycalphad.io.database.Database": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.io.database.Database.__eq__": {
  "lineno": 332,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Database.__eq__.param_sort_key": {
  "lineno": 340,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Database.__getstate__": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Database.__hash__": {
  "lineno": 137,
  "symbols_in_volume": [
   "pycalphad.core.cache.fhash"
  ],
  "type": "function"
 },
 "pycalphad.io.database.Database.__ne__": {
  "lineno": 356,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Database.__new__": {
  "lineno": 99,
  "symbols_in_volume": [
   "os.path.splitext",
   "tinydb.TinyDB",
   "tinydb.storages.MemoryStorage"
  ],
  "type": "function"
 },
 "pycalphad.io.database.Database.__setstate__": {
  "lineno": 150,
  "symbols_in_volume": [
   "tinydb.TinyDB",
   "tinydb.storages.MemoryStorage"
  ],
  "type": "function"
 },
 "pycalphad.io.database.Database.__str__": {
  "lineno": 323,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Database.add_parameter": {
  "lineno": 377,
  "symbols_in_volume": [
   "pycalphad.variables.Species"
  ],
  "type": "function"
 },
 "pycalphad.io.database.Database.add_phase": {
  "lineno": 416,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Database.add_phase_constituents": {
  "lineno": 440,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Database.add_structure_entry": {
  "lineno": 359,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Database.from_file": {
  "lineno": 178,
  "symbols_in_volume": [
   "os.path.splitext"
  ],
  "type": "function"
 },
 "pycalphad.io.database.Database.from_string": {
  "lineno": 233,
  "symbols_in_volume": [
   "io.StringIO"
  ],
  "type": "function"
 },
 "pycalphad.io.database.Database.register_format": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Database.search": {
  "lineno": 463,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Database.to_file": {
  "lineno": 252,
  "symbols_in_volume": [
   "datetime.datetime.now",
   "os.path.exists",
   "os.path.splitext"
  ],
  "type": "function"
 },
 "pycalphad.io.database.Database.to_string": {
  "lineno": 305,
  "symbols_in_volume": [
   "io.StringIO"
  ],
  "type": "function"
 },
 "pycalphad.io.database.DatabaseExportError": {
  "lineno": 27,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.io.database.FileExistsError": {
  "lineno": 23,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.io.database.Phase": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.io.database.Phase.__eq__": {
  "lineno": 58,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Phase.__hash__": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Phase.__init__": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Phase.__ne__": {
  "lineno": 63,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database.Phase.__repr__": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.database._to_tuple": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.grammar": {
  "lineno": null,
  "symbols_in_volume": [
   "pyparsing.Group",
   "pyparsing.OneOrMore",
   "pyparsing.Optional",
   "pyparsing.Regex",
   "pyparsing.Suppress",
   "pyparsing.Word",
   "pyparsing.alphas",
   "pyparsing.nums"
  ],
  "type": "module"
 },
 "pycalphad.io.grammar.parse_chemical_formula": {
  "lineno": 21,
  "symbols_in_volume": [
   "re.findall",
   "re.search"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb": {
  "lineno": null,
  "symbols_in_volume": [
   "ast.Add",
   "ast.BinOp",
   "ast.Call",
   "ast.Div",
   "ast.Expression",
   "ast.Load",
   "ast.Mult",
   "ast.Name",
   "ast.Num",
   "ast.Pow",
   "ast.Sub",
   "ast.UAdd",
   "ast.USub",
   "ast.UnaryOp",
   "pycalphad.Database.register_format",
   "pycalphad.variables.P",
   "pycalphad.variables.R",
   "pycalphad.variables.T",
   "sympy.Symbol",
   "sympy.abc._clash"
  ],
  "type": "module"
 },
 "pycalphad.io.tdb.TCCommand": {
  "lineno": 158,
  "symbols_in_volume": [
   "pyparsing.CaselessKeyword"
  ],
  "type": "class"
 },
 "pycalphad.io.tdb.TCCommand.parseImpl": {
  "lineno": 162,
  "symbols_in_volume": [
   "pycalphad.io.tdb_keywords.expand_keyword",
   "pyparsing.ParseException"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter": {
  "lineno": 447,
  "symbols_in_volume": [
   "sympy.printing.str.StrPrinter"
  ],
  "type": "class"
 },
 "pycalphad.io.tdb.TCPrinter._print_Function": {
  "lineno": 555,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter._print_Infinity": {
  "lineno": 544,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter._print_Mul": {
  "lineno": 482,
  "symbols_in_volume": [
   "sympy.Mul.make_args",
   "sympy.Pow",
   "sympy.Rational",
   "sympy.S.Infinity",
   "sympy.S.One",
   "sympy.core.mul._keep_coeff",
   "sympy.printing.precedence.precedence"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter._print_Piecewise": {
  "lineno": 451,
  "symbols_in_volume": [
   "pycalphad.variables.T",
   "sympy.EmptySet",
   "sympy.Intersection",
   "sympy.Interval",
   "sympy.S.Zero",
   "sympy.S.true",
   "sympy.Union"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter._print_Pow": {
  "lineno": 532,
  "symbols_in_volume": [
   "sympy.printing.precedence.precedence"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter._print_Symbol": {
  "lineno": 548,
  "symbols_in_volume": [
   "pycalphad.variables.StateVariable"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter.blacklisted": {
  "lineno": 563,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.tdb._apply_new_symbol_names": {
  "lineno": 635,
  "symbols_in_volume": [
   "pycalphad.variables",
   "sympy.S",
   "sympy.Symbol"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb._make_piecewise_ast": {
  "lineno": 120,
  "symbols_in_volume": [
   "pycalphad.variables.T",
   "sympy.And",
   "sympy.Piecewise"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb._parse_action": {
  "lineno": 75,
  "symbols_in_volume": [
   "inspect.getargspec",
   "inspect.signature",
   "sys.version_info"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb._parse_action.action": {
  "lineno": 104,
  "symbols_in_volume": [
   "functools.wraps",
   "sys.exc_info"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb._process_parameter": {
  "lineno": 350,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.tdb._process_phase": {
  "lineno": 318,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.tdb._process_reference_state": {
  "lineno": 373,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.tdb._process_species": {
  "lineno": 367,
  "symbols_in_volume": [
   "pycalphad.variables.Species"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb._process_typedef": {
  "lineno": 273,
  "symbols_in_volume": [
   "pycalphad.io.tdb_keywords.expand_keyword"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb._setitem_raise_duplicates": {
  "lineno": 381,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.tdb._sympify_string": {
  "lineno": 50,
  "symbols_in_volume": [
   "ast.Expression",
   "ast.parse",
   "ast.walk",
   "re.IGNORECASE",
   "re.sub",
   "sympy.sympify"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb._tdb_grammar": {
  "lineno": 191,
  "symbols_in_volume": [
   "pycalphad.io.grammar.chemical_formula",
   "pycalphad.io.grammar.float_number",
   "pycalphad.io.tdb_keywords.TDB_PARAM_TYPES",
   "pyparsing.CharsNotIn",
   "pyparsing.Group",
   "pyparsing.LineEnd",
   "pyparsing.MatchFirst",
   "pyparsing.OneOrMore",
   "pyparsing.Optional",
   "pyparsing.SkipTo",
   "pyparsing.Suppress",
   "pyparsing.White",
   "pyparsing.Word",
   "pyparsing.ZeroOrMore",
   "pyparsing.alphanums",
   "pyparsing.alphas",
   "pyparsing.delimitedList",
   "pyparsing.nums"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb._unimplemented": {
  "lineno": 361,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.tdb.read_tdb": {
  "lineno": 904,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.tdb.reflow_text": {
  "lineno": 598,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.io.tdb.to_interval": {
  "lineno": 407,
  "symbols_in_volume": [
   "sympy.And",
   "sympy.Complement",
   "sympy.GreaterThan",
   "sympy.Intersection",
   "sympy.Interval",
   "sympy.LessThan",
   "sympy.Not",
   "sympy.Or",
   "sympy.S.Infinity",
   "sympy.S.NegativeInfinity",
   "sympy.S.true",
   "sympy.StrictGreaterThan",
   "sympy.StrictLessThan",
   "sympy.Union"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb.write_tdb": {
  "lineno": 655,
  "symbols_in_volume": [
   "collections.defaultdict",
   "collections.namedtuple",
   "copy.deepcopy",
   "datetime.datetime.now",
   "getpass.getuser",
   "hashlib.md5",
   "itertools.combinations",
   "pycalphad.__version__",
   "pycalphad.io.database.DatabaseExportError",
   "pycalphad.variables.Species",
   "pycalphad.variables.T",
   "sympy.And",
   "sympy.Piecewise",
   "warnings.warn"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb.write_tdb.write_parameter": {
  "lineno": 845,
  "symbols_in_volume": [
   "pycalphad.variables.Species",
   "pycalphad.variables.T",
   "sympy.And",
   "sympy.Piecewise"
  ],
  "type": "function"
 },
 "pycalphad.io.tdb_keywords": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.io.tdb_keywords.expand_keyword": {
  "lineno": 85,
  "symbols_in_volume": [
   "re.escape",
   "re.match"
  ],
  "type": "function"
 },
 "pycalphad.model": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.model.Model": {
  "lineno": 67,
  "symbols_in_volume": [
   "pycalphad.variables.T",
   "sympy.S.Zero"
  ],
  "type": "class"
 },
 "pycalphad.model.Model._Muggianu_correction_dict": {
  "lineno": 483,
  "symbols_in_volume": [
   "sympy.Add",
   "sympy.S.One"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.__eq__": {
  "lineno": 218,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.model.Model.__hash__": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.model.Model.__init__": {
  "lineno": 102,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "pycalphad.core.errors.DofError",
   "pycalphad.core.utils.unpack_components",
   "pycalphad.core.utils.wrap_symbol",
   "pycalphad.variables.SiteFraction",
   "pycalphad.variables.Species",
   "sympy.Add",
   "sympy.Symbol"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.__ne__": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.model.Model._array_validity": {
  "lineno": 437,
  "symbols_in_volume": [
   "pycalphad.variables.Species"
  ],
  "type": "function"
 },
 "pycalphad.model.Model._build_reference_model": {
  "lineno": 352,
  "symbols_in_volume": [
   "copy.deepcopy",
   "sympy.S.Zero",
   "sympy.nan",
   "tinydb.where"
  ],
  "type": "function"
 },
 "pycalphad.model.Model._interaction_test": {
  "lineno": 450,
  "symbols_in_volume": [
   "pycalphad.variables.Species"
  ],
  "type": "function"
 },
 "pycalphad.model.Model._purity_test": {
  "lineno": 422,
  "symbols_in_volume": [
   "pycalphad.variables.Species"
  ],
  "type": "function"
 },
 "pycalphad.model.Model._site_ratio_normalization": {
  "lineno": 469,
  "symbols_in_volume": [
   "pycalphad.variables.SiteFraction",
   "sympy.S.Zero"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.ast": {
  "lineno": 260,
  "symbols_in_volume": [
   "sympy.Add"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.atomic_ordering_energy": {
  "lineno": 917,
  "symbols_in_volume": [
   "pycalphad.variables.SiteFraction",
   "sympy.Add",
   "sympy.S.Zero"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.build_phase": {
  "lineno": 404,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "sympy.S"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.degree_of_ordering": {
  "lineno": 270,
  "symbols_in_volume": [
   "pycalphad.variables.SiteFraction",
   "sympy.Abs",
   "sympy.S.Zero"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.einstein_energy": {
  "lineno": 858,
  "symbols_in_volume": [
   "pycalphad.variables.R",
   "pycalphad.variables.T",
   "sympy.exp",
   "sympy.log",
   "tinydb.where"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.excess_mixing_energy": {
  "lineno": 658,
  "symbols_in_volume": [
   "tinydb.where"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.get_internal_constraints": {
  "lineno": 382,
  "symbols_in_volume": [
   "pycalphad.variables.SiteFraction"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.get_multiphase_constraints": {
  "lineno": 388,
  "symbols_in_volume": [
   "pycalphad.core.constraints.is_multiphase_constraint",
   "pycalphad.variables.ChemicalPotential",
   "pycalphad.variables.Composition",
   "pycalphad.variables.N",
   "pycalphad.variables.P",
   "pycalphad.variables.T",
   "sympy.S.Zero",
   "sympy.Symbol"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.ideal_mixing_energy": {
  "lineno": 631,
  "symbols_in_volume": [
   "pycalphad.core.constants.MIN_SITE_FRACTION",
   "pycalphad.variables.R",
   "pycalphad.variables.SiteFraction",
   "pycalphad.variables.T",
   "sympy.Float",
   "sympy.Piecewise",
   "sympy.S.Zero",
   "sympy.StrictGreaterThan",
   "sympy.log"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.magnetic_energy": {
  "lineno": 677,
  "symbols_in_volume": [
   "pycalphad.variables.R",
   "pycalphad.variables.T",
   "sympy.And",
   "sympy.Piecewise",
   "sympy.S.Zero",
   "sympy.log",
   "tinydb.where"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.mole_fraction": {
  "lineno": 880,
  "symbols_in_volume": [
   "pycalphad.variables.SiteFraction",
   "sympy.S.Zero"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.moles": {
  "lineno": 232,
  "symbols_in_volume": [
   "pycalphad.variables.SiteFraction",
   "pycalphad.variables.Species",
   "sympy.S.Zero"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.redlich_kister_sum": {
  "lineno": 511,
  "symbols_in_volume": [
   "copy.deepcopy",
   "pycalphad.variables.SiteFraction",
   "pycalphad.variables.Species",
   "sympy.Add",
   "sympy.Mul",
   "sympy.Pow",
   "sympy.S.One",
   "tinydb.where"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.reference_energy": {
  "lineno": 614,
  "symbols_in_volume": [
   "tinydb.where"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.reference_model": {
  "lineno": 312,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.model.Model.shift_reference_state": {
  "lineno": 992,
  "symbols_in_volume": [
   "copy.deepcopy",
   "pycalphad.core.errors.DofError",
   "pycalphad.core.utils.get_pure_elements",
   "pycalphad.variables.SiteFraction",
   "pycalphad.variables.Species",
   "sympy.Add",
   "tinydb.where"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.shift_reference_state._pure_element_test": {
  "lineno": 1027,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.model.Model.symbol_replace": {
  "lineno": 191,
  "symbols_in_volume": [
   "pycalphad.variables.StateVariable"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.twostate_energy": {
  "lineno": 841,
  "symbols_in_volume": [
   "pycalphad.variables.R",
   "pycalphad.variables.T",
   "sympy.S.Zero",
   "sympy.exp",
   "sympy.log",
   "tinydb.where"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.variables": {
  "lineno": 265,
  "symbols_in_volume": [
   "pycalphad.variables.StateVariable"
  ],
  "type": "function"
 },
 "pycalphad.model.Model.xiong_magnetic_energy": {
  "lineno": 762,
  "symbols_in_volume": [
   "pycalphad.variables.R",
   "pycalphad.variables.T",
   "sympy.Piecewise",
   "sympy.S.Zero",
   "sympy.log",
   "sympy.zoo",
   "tinydb.where"
  ],
  "type": "function"
 },
 "pycalphad.model.ReferenceState": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.model.ReferenceState.__init__": {
  "lineno": 39,
  "symbols_in_volume": [
   "pycalphad.variables.Species"
  ],
  "type": "function"
 },
 "pycalphad.model.ReferenceState.__repr__": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.model.TestModel": {
  "lineno": 1065,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.model.TestModel.__init__": {
  "lineno": 1093,
  "symbols_in_volume": [
   "numpy.float",
   "numpy.int",
   "numpy.ones",
   "numpy.ones_like",
   "numpy.random.dirichlet",
   "pycalphad.variables.SiteFraction",
   "sympy.Add",
   "sympy.sin"
  ],
  "type": "function"
 },
 "pycalphad.plot": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.plot.binary": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.plot.binary.compsets": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset.__eq__": {
  "lineno": 43,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.isclose"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset.__init__": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset.__repr__": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset.__str__": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset.from_dataset_vertices": {
  "lineno": 52,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.Tdiscrepancy": {
  "lineno": 185,
  "symbols_in_volume": [
   "numpy.abs"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.__init__": {
  "lineno": 104,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.mean",
   "warnings.warn"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.__repr__": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.__str__": {
  "lineno": 205,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.pairwise_xdiscrepancy": {
  "lineno": 208,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.full",
   "numpy.infty"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.xdiscrepancy": {
  "lineno": 129,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.infty"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.ydiscrepancy": {
  "lineno": 150,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.infty"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.ydiscrepancy_max": {
  "lineno": 169,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.max"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.find_two_phase_region_compsets": {
  "lineno": 253,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.any",
   "numpy.arange",
   "numpy.empty",
   "numpy.isnan",
   "numpy.nditer"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.get_compsets": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.map": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.plot.binary.map.map_binary": {
  "lineno": 15,
  "symbols_in_volume": [
   "copy.deepcopy",
   "numpy.atleast_1d",
   "pycalphad.calculate",
   "pycalphad.codegen.callables.build_phase_records",
   "pycalphad.core.eqsolver._solve_eq_at_conditions",
   "pycalphad.core.equilibrium._adjust_conditions",
   "pycalphad.core.starting_point.starting_point",
   "pycalphad.core.utils.get_pure_elements",
   "pycalphad.core.utils.get_state_variables",
   "pycalphad.core.utils.instantiate_models",
   "pycalphad.core.utils.unpack_components",
   "pycalphad.core.utils.unpack_condition",
   "pycalphad.variables.Composition",
   "pycalphad.variables.N",
   "pycalphad.variables.P",
   "pycalphad.variables.StateVariable",
   "pycalphad.variables.T",
   "pycalphad.variables.X",
   "time.time"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.plot": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.plot.binary.plot.binplot": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.plot.plot_boundaries": {
  "lineno": 13,
  "symbols_in_volume": [
   "matplotlib.pyplot.figure",
   "pycalphad.plot.eqplot._axis_label",
   "pycalphad.variables.T"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.__init__": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.__repr__": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.add_compsets": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.compsets_belong_in_region": {
  "lineno": 27,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.all"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.__init__": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.__repr__": {
  "lineno": 127,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.add_compsets": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.get_line_plot_boundaries": {
  "lineno": 197,
  "symbols_in_volume": [
   "matplotlib.collections.LineCollection",
   "matplotlib.colors.to_rgba",
   "numpy.array",
   "pycalphad.plot.utils.phase_legend"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.get_phases": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.get_scatter_plot_boundaries": {
  "lineno": 150,
  "symbols_in_volume": [
   "matplotlib.collections.LineCollection",
   "numpy.array",
   "pycalphad.plot.utils.phase_legend"
  ],
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.rebuild_two_phase_regions": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.eqplot": {
  "lineno": null,
  "symbols_in_volume": [
   "pycalphad.variables.P",
   "pycalphad.variables.T"
  ],
  "type": "module"
 },
 "pycalphad.plot.eqplot._axis_label": {
  "lineno": 17,
  "symbols_in_volume": [
   "pycalphad.variables.Composition",
   "pycalphad.variables.StateVariable"
  ],
  "type": "function"
 },
 "pycalphad.plot.eqplot._map_coord_to_variable": {
  "lineno": 25,
  "symbols_in_volume": [
   "pycalphad.variables.P",
   "pycalphad.variables.T",
   "pycalphad.variables.X"
  ],
  "type": "function"
 },
 "pycalphad.plot.eqplot.eqplot": {
  "lineno": 47,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "matplotlib.collections.LineCollection",
   "matplotlib.pyplot.figure",
   "matplotlib.pyplot.gca",
   "numpy.array",
   "numpy.asarray",
   "numpy.concatenate",
   "numpy.int",
   "numpy.max",
   "numpy.min",
   "numpy.newaxis",
   "numpy.nonzero",
   "numpy.rollaxis",
   "numpy.sum",
   "numpy.take",
   "pycalphad.core.utils.unpack_condition",
   "pycalphad.plot.utils.phase_legend",
   "pycalphad.variables.Composition",
   "pycalphad.variables.StateVariable"
  ],
  "type": "function"
 },
 "pycalphad.plot.ternary": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.plot.ternary.ternplot": {
  "lineno": 11,
  "symbols_in_volume": [
   "numpy.atleast_1d",
   "pycalphad.equilibrium",
   "pycalphad.plot.eqplot.eqplot",
   "pycalphad.variables.Composition",
   "pycalphad.variables.StateVariable"
  ],
  "type": "function"
 },
 "pycalphad.plot.triangular": {
  "lineno": null,
  "symbols_in_volume": [
   "matplotlib.projections.register_projection"
  ],
  "type": "module"
 },
 "pycalphad.plot.triangular.TriangularAxes": {
  "lineno": 11,
  "symbols_in_volume": [
   "matplotlib.axes.Axes"
  ],
  "type": "class"
 },
 "pycalphad.plot.triangular.TriangularAxes.__init__": {
  "lineno": 18,
  "symbols_in_volume": [
   "matplotlib.axes.Axes.__init__"
  ],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes._gen_axes_patch": {
  "lineno": 177,
  "symbols_in_volume": [
   "matplotlib.patches.Polygon",
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes._gen_axes_spines": {
  "lineno": 166,
  "symbols_in_volume": [
   "matplotlib.spines.Spine.linear_spine"
  ],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes._init_axis": {
  "lineno": 23,
  "symbols_in_volume": [
   "matplotlib.axis.XAxis",
   "matplotlib.axis.YAxis"
  ],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes._set_lim_and_transforms": {
  "lineno": 50,
  "symbols_in_volume": [
   "matplotlib.transforms.Affine2D",
   "matplotlib.transforms.Affine2D.from_values",
   "matplotlib.transforms.BboxTransformTo",
   "matplotlib.transforms.IdentityTransform",
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.can_zoom": {
  "lineno": 188,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.cla": {
  "lineno": 28,
  "symbols_in_volume": [
   "matplotlib.axes.Axes.cla",
   "matplotlib.axes.Axes.set_xlim",
   "matplotlib.axes.Axes.set_ylim",
   "matplotlib.ticker.NullLocator",
   "numpy.arange"
  ],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.drag_pan": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.end_pan": {
  "lineno": 195,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_xaxis_text1_transform": {
  "lineno": 150,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_xaxis_text2_transform": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_xaxis_transform": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_yaxis_text1_transform": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_yaxis_text2_transform": {
  "lineno": 163,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_yaxis_transform": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.start_pan": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.plot.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.plot.utils.phase_legend": {
  "lineno": 8,
  "symbols_in_volume": [
   "matplotlib.patches.Patch",
   "numpy.mod"
  ],
  "type": "function"
 },
 "pycalphad.refdata": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pycalphad.variables": {
  "lineno": null,
  "symbols_in_volume": [
   "sympy.Float",
   "sys.version_info"
  ],
  "type": "module"
 },
 "pycalphad.variables.ChemicalPotential": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.variables.ChemicalPotential.__getnewargs__": {
  "lineno": 230,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.ChemicalPotential.__new__": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.ChemicalPotential.__str__": {
  "lineno": 237,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.ChemicalPotential._latex": {
  "lineno": 233,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Composition": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.variables.Composition.__getnewargs__": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Composition.__new__": {
  "lineno": 180,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Composition._latex": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.PhaseFraction": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.variables.PhaseFraction.__getnewargs__": {
  "lineno": 166,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.PhaseFraction.__new__": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.PhaseFraction._latex": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.SiteFraction": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.variables.SiteFraction.__getnewargs__": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.SiteFraction.__new__": {
  "lineno": 129,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.SiteFraction.__str__": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.SiteFraction._latex": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Species": {
  "lineno": 17,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pycalphad.variables.Species.__eq__": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Species.__getnewargs__": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Species.__hash__": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Species.__lt__": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Species.__ne__": {
  "lineno": 76,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Species.__new__": {
  "lineno": 30,
  "symbols_in_volume": [
   "pycalphad.io.grammar.parse_chemical_formula"
  ],
  "type": "function"
 },
 "pycalphad.variables.Species.__repr__": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Species.__str__": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Species.escaped_name": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Species.number_of_atoms": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.Species.weight": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pycalphad.variables.StateVariable": {
  "lineno": 117,
  "symbols_in_volume": [
   "sympy.Symbol"
  ],
  "type": "class"
 },
 "pycalphad.variables.StateVariable.__new__": {
  "lineno": 121,
  "symbols_in_volume": [
   "sympy.Symbol.__new__"
  ],
  "type": "function"
 }
}