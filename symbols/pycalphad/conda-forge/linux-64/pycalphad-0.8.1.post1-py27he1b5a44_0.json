{
 "*": {
  "data": {
   "imports": [
    "pycalphad.core.errors"
   ]
  },
  "type": "star-import"
 },
 "pycalphad": {
  "data": {
   "symbols_in_volume": [
    "classmethod",
    "get_versions",
    "pycalphad.warnings",
    "staticmethod"
   ]
  },
  "type": "module"
 },
 "pycalphad.Database": {
  "data": {
   "shadows": "pycalphad.io.database.Database"
  },
  "type": "import"
 },
 "pycalphad.Model": {
  "data": {
   "shadows": "pycalphad.model.Model"
  },
  "type": "import"
 },
 "pycalphad.ReferenceState": {
  "data": {
   "shadows": "pycalphad.model.ReferenceState"
  },
  "type": "import"
 },
 "pycalphad.__version__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "pycalphad._version": {
  "data": {},
  "type": "module"
 },
 "pycalphad._version.get_versions": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "pycalphad._version.json",
    "pycalphad._version.version_json"
   ]
  },
  "type": "function"
 },
 "pycalphad._version.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "pycalphad._version.version_json": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "pycalphad.binplot": {
  "data": {
   "shadows": "pycalphad.plot.binary.binplot"
  },
  "type": "import"
 },
 "pycalphad.calculate": {
  "data": {
   "shadows": "pycalphad.core.calculate.calculate"
  },
  "type": "import"
 },
 "pycalphad.codegen": {
  "data": {},
  "type": "module"
 },
 "pycalphad.codegen.callables": {
  "data": {},
  "type": "module"
 },
 "pycalphad.codegen.callables.PhaseRecord": {
  "data": {
   "shadows": "pycalphad.core.phase_rec.PhaseRecord"
  },
  "type": "import"
 },
 "pycalphad.codegen.callables.build_callables": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "AttributeError",
    "dict",
    "getattr",
    "isinstance",
    "itertools.repeat",
    "len",
    "pycalphad.codegen.callables.warnings",
    "pycalphad.codegen.sympydiff_utils.build_functions",
    "pycalphad.core.utils.get_pure_elements",
    "pycalphad.core.utils.get_state_variables",
    "pycalphad.core.utils.unpack_components",
    "pycalphad.core.utils.wrap_symbol",
    "pycalphad.variables.N",
    "pycalphad.variables.P",
    "pycalphad.variables.StateVariable",
    "pycalphad.variables.T",
    "set",
    "sorted",
    "str",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "pycalphad.codegen.callables.build_constraints": {
  "data": {
   "shadows": "pycalphad.core.constraints.build_constraints"
  },
  "type": "import"
 },
 "pycalphad.codegen.callables.build_functions": {
  "data": {
   "shadows": "pycalphad.codegen.sympydiff_utils.build_functions"
  },
  "type": "import"
 },
 "pycalphad.codegen.callables.build_phase_records": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "print",
    "pycalphad.codegen.callables.build_callables",
    "pycalphad.core.constraints.build_constraints",
    "pycalphad.core.phase_rec.PhaseRecord",
    "pycalphad.core.utils.extract_parameters",
    "pycalphad.core.utils.get_state_variables",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.codegen.callables.extract_parameters": {
  "data": {
   "shadows": "pycalphad.core.utils.extract_parameters"
  },
  "type": "import"
 },
 "pycalphad.codegen.callables.get_pure_elements": {
  "data": {
   "shadows": "pycalphad.core.utils.get_pure_elements"
  },
  "type": "import"
 },
 "pycalphad.codegen.callables.get_state_variables": {
  "data": {
   "shadows": "pycalphad.core.utils.get_state_variables"
  },
  "type": "import"
 },
 "pycalphad.codegen.callables.repeat": {
  "data": {
   "shadows": "itertools.repeat"
  },
  "type": "import"
 },
 "pycalphad.codegen.callables.unpack_components": {
  "data": {
   "shadows": "pycalphad.core.utils.unpack_components"
  },
  "type": "import"
 },
 "pycalphad.codegen.callables.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.codegen.callables.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "pycalphad.codegen.callables.wrap_symbol": {
  "data": {
   "shadows": "pycalphad.core.utils.wrap_symbol"
  },
  "type": "import"
 },
 "pycalphad.codegen.sympydiff_utils": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple"
   ]
  },
  "type": "module"
 },
 "pycalphad.codegen.sympydiff_utils.BACKEND_OPS_THRESHOLD": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "pycalphad.codegen.sympydiff_utils.BuildFunctionsResult": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "pycalphad.codegen.sympydiff_utils.build_functions": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "list",
    "pycalphad.codegen.sympydiff_utils.BACKEND_OPS_THRESHOLD",
    "pycalphad.codegen.sympydiff_utils.BuildFunctionsResult",
    "pycalphad.core.cache.cacheit",
    "pycalphad.core.utils.wrap_symbol_symengine",
    "sum",
    "symengine.count_ops",
    "symengine.lambdify",
    "symengine.sympify",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.codegen.sympydiff_utils.cacheit": {
  "data": {
   "shadows": "pycalphad.core.cache.cacheit"
  },
  "type": "import"
 },
 "pycalphad.codegen.sympydiff_utils.count_ops": {
  "data": {
   "shadows": "symengine.count_ops"
  },
  "type": "import"
 },
 "pycalphad.codegen.sympydiff_utils.lambdify": {
  "data": {
   "shadows": "symengine.lambdify"
  },
  "type": "import"
 },
 "pycalphad.codegen.sympydiff_utils.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pycalphad.codegen.sympydiff_utils.sympify": {
  "data": {
   "shadows": "symengine.sympify"
  },
  "type": "import"
 },
 "pycalphad.codegen.sympydiff_utils.wrap_symbol_symengine": {
  "data": {
   "shadows": "pycalphad.core.utils.wrap_symbol_symengine"
  },
  "type": "import"
 },
 "pycalphad.core": {
  "data": {},
  "type": "module"
 },
 "pycalphad.core.cache": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "collections.namedtuple",
    "pycalphad.core.cache.lru_cache"
   ]
  },
  "type": "module"
 },
 "pycalphad.core.cache.Iterable": {
  "data": {
   "shadows": "collections.Iterable"
  },
  "type": "import"
 },
 "pycalphad.core.cache.Mapping": {
  "data": {
   "shadows": "collections.Mapping"
  },
  "type": "import"
 },
 "pycalphad.core.cache.RLock": {
  "data": {
   "shadows": "threading.RLock"
  },
  "type": "import"
 },
 "pycalphad.core.cache._CacheInfo": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "pycalphad.core.cache._HashedSeq": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "class"
 },
 "pycalphad.core.cache._HashedSeq.__hash__": {
  "data": {
   "lineno": 42
  },
  "type": "function"
 },
 "pycalphad.core.cache._HashedSeq.__init__": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "hash",
    "pycalphad.core.cache.fhash"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.cache._make_key": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "frozenset",
    "int",
    "len",
    "object",
    "pycalphad.core.cache._HashedSeq",
    "sorted",
    "str",
    "tuple",
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.cache.cacheit": {
  "data": {
   "lineno": 195
  },
  "type": "constant"
 },
 "pycalphad.core.cache.fhash": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "TypeError",
    "collections.Iterable",
    "collections.Mapping",
    "hash",
    "isinstance",
    "sorted",
    "tuple",
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.cache.lru_cache": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "pycalphad.core.cache.lru_cache.decorating_function": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "dict",
    "functools.update_wrapper",
    "len",
    "pycalphad.core.cache._make_key",
    "threading.RLock",
    "user_function"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.cache.lru_cache.decorating_function.cache_clear": {
  "data": {
   "lineno": 179
  },
  "type": "function"
 },
 "pycalphad.core.cache.lru_cache.decorating_function.cache_info": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "len",
    "pycalphad.core.cache._CacheInfo"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.cache.lru_cache.decorating_function.wrapper": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "_len",
    "cache_get",
    "make_key",
    "user_function"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.cache.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pycalphad.core.cache.update_wrapper": {
  "data": {
   "shadows": "functools.update_wrapper"
  },
  "type": "import"
 },
 "pycalphad.core.calculate": {
  "data": {},
  "type": "module"
 },
 "pycalphad.core.calculate.ConditionError": {
  "data": {
   "shadows": "pycalphad.ConditionError"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.Dataset": {
  "data": {
   "shadows": "xarray.Dataset"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.LightDataset": {
  "data": {
   "shadows": "pycalphad.core.light_dataset.LightDataset"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.PhaseRecord": {
  "data": {
   "shadows": "pycalphad.core.phase_rec.PhaseRecord"
  },
  "type": "import"
 },
 "pycalphad.core.calculate._compute_phase_values": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "int",
    "isinstance",
    "len",
    "list",
    "numpy.append",
    "numpy.asarray",
    "numpy.ascontiguousarray",
    "numpy.atleast_1d",
    "numpy.broadcast_to",
    "numpy.concatenate",
    "numpy.empty",
    "numpy.eye",
    "numpy.float",
    "numpy.full",
    "numpy.meshgrid",
    "numpy.nan",
    "numpy.repeat",
    "numpy.zeros",
    "pycalphad.core.calculate.itertools",
    "pycalphad.core.light_dataset.LightDataset",
    "pycalphad.core.utils.broadcast_to",
    "range",
    "set",
    "sorted",
    "str",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.calculate._generate_fake_points": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "float",
    "len",
    "max",
    "numpy.atleast_1d",
    "numpy.eye",
    "numpy.full",
    "numpy.nan",
    "numpy.repeat",
    "numpy.tile",
    "pycalphad.core.utils.broadcast_to",
    "str",
    "tuple",
    "xarray.Dataset"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.calculate._sample_phase_constitution": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "list",
    "numpy.asarray",
    "numpy.atleast_2d",
    "numpy.concatenate",
    "numpy.float",
    "numpy.isnan",
    "numpy.linspace",
    "numpy.newaxis.T",
    "pycalphad.core.cache.cacheit",
    "pycalphad.core.calculate.itertools",
    "pycalphad.core.utils.endmember_matrix",
    "sampler",
    "set",
    "sorted",
    "sum"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.calculate.broadcast_to": {
  "data": {
   "shadows": "pycalphad.core.utils.broadcast_to"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.build_phase_records": {
  "data": {
   "shadows": "pycalphad.codegen.callables.build_phase_records"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.cacheit": {
  "data": {
   "shadows": "pycalphad.core.cache.cacheit"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.calculate": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "collections.OrderedDict",
    "dict",
    "float",
    "getattr",
    "isinstance",
    "len",
    "list",
    "max",
    "numpy.any",
    "numpy.array",
    "numpy.atleast_2d",
    "numpy.concatenate",
    "pycalphad.ConditionError",
    "pycalphad.codegen.callables.build_phase_records",
    "pycalphad.core.calculate._compute_phase_values",
    "pycalphad.core.calculate._sample_phase_constitution",
    "pycalphad.core.calculate.collections",
    "pycalphad.core.light_dataset.LightDataset",
    "pycalphad.core.utils.filter_phases",
    "pycalphad.core.utils.generate_dof",
    "pycalphad.core.utils.instantiate_models",
    "pycalphad.core.utils.point_sample",
    "pycalphad.core.utils.unpack_components",
    "pycalphad.core.utils.unpack_condition",
    "pycalphad.core.utils.unpack_kwarg",
    "pycalphad.variables",
    "pycalphad.variables.Species",
    "pycalphad.variables.StateVariable",
    "set",
    "sorted",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.calculate.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.concat": {
  "data": {
   "shadows": "xarray.concat"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.endmember_matrix": {
  "data": {
   "shadows": "pycalphad.core.utils.endmember_matrix"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.filter_phases": {
  "data": {
   "shadows": "pycalphad.core.utils.filter_phases"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.generate_dof": {
  "data": {
   "shadows": "pycalphad.core.utils.generate_dof"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.get_state_variables": {
  "data": {
   "shadows": "pycalphad.core.utils.get_state_variables"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.instantiate_models": {
  "data": {
   "shadows": "pycalphad.core.utils.instantiate_models"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.point_sample": {
  "data": {
   "shadows": "pycalphad.core.utils.point_sample"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.unpack_components": {
  "data": {
   "shadows": "pycalphad.core.utils.unpack_components"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.unpack_condition": {
  "data": {
   "shadows": "pycalphad.core.utils.unpack_condition"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.unpack_kwarg": {
  "data": {
   "shadows": "pycalphad.core.utils.unpack_kwarg"
  },
  "type": "import"
 },
 "pycalphad.core.calculate.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.core.cartesian": {
  "data": {},
  "type": "module"
 },
 "pycalphad.core.cartesian.cartesian": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "int",
    "len",
    "numpy.arange",
    "numpy.asarray",
    "numpy.prod",
    "numpy.repeat",
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.cartesian.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.core.constants": {
  "data": {},
  "type": "module"
 },
 "pycalphad.core.constants.CHEMPOT_CONSTRAINT_SCALING": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "pycalphad.core.constants.COMP_DIFFERENCE_TOL": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "pycalphad.core.constants.INTERNAL_CONSTRAINT_SCALING": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "pycalphad.core.constants.MIN_PHASE_FRACTION": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "pycalphad.core.constants.MIN_SITE_FRACTION": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "pycalphad.core.constants.MULTIPHASE_CONSTRAINT_SCALING": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "pycalphad.core.constraints": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple"
   ]
  },
  "type": "module"
 },
 "pycalphad.core.constraints.ConstraintFunctions": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "pycalphad.core.constraints.ConstraintTuple": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "pycalphad.core.constraints.INTERNAL_CONSTRAINT_SCALING": {
  "data": {
   "shadows": "pycalphad.core.constants.INTERNAL_CONSTRAINT_SCALING"
  },
  "type": "import"
 },
 "pycalphad.core.constraints.MULTIPHASE_CONSTRAINT_SCALING": {
  "data": {
   "shadows": "pycalphad.core.constants.MULTIPHASE_CONSTRAINT_SCALING"
  },
  "type": "import"
 },
 "pycalphad.core.constraints.Symbol": {
  "data": {
   "shadows": "symengine.Symbol"
  },
  "type": "import"
 },
 "pycalphad.core.constraints._build_constraint_functions": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "list",
    "pycalphad.core.cache.cacheit",
    "pycalphad.core.constraints.ConstraintFunctions",
    "pycalphad.core.utils.wrap_symbol_symengine",
    "pycalphad.variables",
    "symengine.lambdify",
    "symengine.sympify",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.constraints.build_constraints": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "len",
    "pycalphad.core.constants.INTERNAL_CONSTRAINT_SCALING",
    "pycalphad.core.constants.MULTIPHASE_CONSTRAINT_SCALING",
    "pycalphad.core.constraints.ConstraintTuple",
    "pycalphad.core.constraints._build_constraint_functions",
    "pycalphad.variables",
    "symengine.Symbol"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.constraints.cacheit": {
  "data": {
   "shadows": "pycalphad.core.cache.cacheit"
  },
  "type": "import"
 },
 "pycalphad.core.constraints.get_multiphase_constraint_rhs": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "float",
    "pycalphad.core.constants.MULTIPHASE_CONSTRAINT_SCALING",
    "pycalphad.core.constraints.is_multiphase_constraint"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.constraints.is_multiphase_constraint": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.constraints.lambdify": {
  "data": {
   "shadows": "symengine.lambdify"
  },
  "type": "import"
 },
 "pycalphad.core.constraints.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pycalphad.core.constraints.sympify": {
  "data": {
   "shadows": "symengine.sympify"
  },
  "type": "import"
 },
 "pycalphad.core.constraints.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.core.constraints.wrap_symbol_symengine": {
  "data": {
   "shadows": "pycalphad.core.utils.wrap_symbol_symengine"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium": {
  "data": {},
  "type": "module"
 },
 "pycalphad.core.equilibrium.ConditionError": {
  "data": {
   "shadows": "pycalphad.core.errors.ConditionError"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.EquilibriumError": {
  "data": {
   "shadows": "pycalphad.core.errors.EquilibriumError"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.InteriorPointSolver": {
  "data": {
   "shadows": "pycalphad.core.solver.InteriorPointSolver"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.LightDataset": {
  "data": {
   "shadows": "pycalphad.core.light_dataset.LightDataset"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.MIN_SITE_FRACTION": {
  "data": {
   "shadows": "pycalphad.core.constants.MIN_SITE_FRACTION"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium._adjust_conditions": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "collections.OrderedDict",
    "getattr",
    "isinstance",
    "max",
    "pycalphad.core.constants.MIN_SITE_FRACTION",
    "pycalphad.core.utils.unpack_condition",
    "pycalphad.variables",
    "pycalphad.variables.Composition",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.equilibrium._eqcalculate": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "collections.OrderedDict",
    "float",
    "len",
    "list",
    "numpy.any",
    "numpy.arange",
    "numpy.asarray",
    "numpy.atleast_1d",
    "numpy.full",
    "numpy.meshgrid",
    "numpy.nan",
    "numpy.nansum",
    "numpy.nonzero",
    "numpy.take",
    "pycalphad.calculate",
    "pycalphad.core.equilibrium._adjust_conditions",
    "pycalphad.core.equilibrium.equilibrium",
    "pycalphad.core.light_dataset.LightDataset",
    "pycalphad.core.utils.unpack_phases",
    "set",
    "sorted",
    "str",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.equilibrium._solve_eq_at_conditions": {
  "data": {
   "shadows": "pycalphad.core.eqsolver._solve_eq_at_conditions"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.build_phase_records": {
  "data": {
   "shadows": "pycalphad.codegen.callables.build_phase_records"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.calculate": {
  "data": {
   "shadows": "pycalphad.calculate"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.datetime": {
  "data": {
   "shadows": "datetime.datetime"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.equilibrium": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "NotImplementedError",
    "collections.OrderedDict",
    "datetime.datetime.utcnow",
    "dict",
    "isinstance",
    "len",
    "list",
    "numpy.any",
    "numpy.arange",
    "numpy.array",
    "print",
    "pycalphad.calculate",
    "pycalphad.codegen.callables.build_phase_records",
    "pycalphad.core.eqsolver._solve_eq_at_conditions",
    "pycalphad.core.equilibrium._adjust_conditions",
    "pycalphad.core.equilibrium._eqcalculate",
    "pycalphad.core.equilibrium.warnings",
    "pycalphad.core.errors.ConditionError",
    "pycalphad.core.errors.EquilibriumError",
    "pycalphad.core.solver.InteriorPointSolver",
    "pycalphad.core.starting_point.starting_point",
    "pycalphad.core.utils.filter_phases",
    "pycalphad.core.utils.get_state_variables",
    "pycalphad.core.utils.instantiate_models",
    "pycalphad.core.utils.unpack_components",
    "pycalphad.core.utils.unpack_phases",
    "pycalphad.variables.ChemicalPotential",
    "pycalphad.variables.Composition",
    "pycalphad.variables.N",
    "pycalphad.variables.Species",
    "set",
    "sorted",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.equilibrium.filter_phases": {
  "data": {
   "shadows": "pycalphad.core.utils.filter_phases"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.get_state_variables": {
  "data": {
   "shadows": "pycalphad.core.utils.get_state_variables"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.instantiate_models": {
  "data": {
   "shadows": "pycalphad.core.utils.instantiate_models"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.starting_point": {
  "data": {
   "shadows": "pycalphad.core.starting_point.starting_point"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.unpack_components": {
  "data": {
   "shadows": "pycalphad.core.utils.unpack_components"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.unpack_condition": {
  "data": {
   "shadows": "pycalphad.core.utils.unpack_condition"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.unpack_phases": {
  "data": {
   "shadows": "pycalphad.core.utils.unpack_phases"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.core.equilibrium.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "pycalphad.core.errors": {
  "data": {},
  "type": "module"
 },
 "pycalphad.core.errors.CalculateError": {
  "data": {
   "lineno": 1,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "pycalphad.core.errors.ConditionError": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "pycalphad.core.errors.CalculateError",
    "pycalphad.core.errors.EquilibriumError"
   ]
  },
  "type": "class"
 },
 "pycalphad.core.errors.DofError": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "pycalphad.core.errors.EquilibriumError": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "pycalphad.core.halton": {
  "data": {
   "symbols_in_volume": [
    "collections.OrderedDict",
    "list",
    "pycalphad.core.halton._scrambling_multipliers"
   ]
  },
  "type": "module"
 },
 "pycalphad.core.halton.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "pycalphad.core.halton._primes": {
  "data": {
   "lineno": 84
  },
  "type": "constant"
 },
 "pycalphad.core.halton._scrambling_multipliers": {
  "data": {
   "lineno": 83
  },
  "type": "constant"
 },
 "pycalphad.core.halton.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "pycalphad.core.halton.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "pycalphad.core.halton.halton": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "ValueError",
    "collections.defaultdict",
    "len",
    "numpy.arange",
    "numpy.asarray",
    "numpy.ceil",
    "numpy.dot",
    "numpy.empty",
    "numpy.float",
    "numpy.floor",
    "numpy.int",
    "numpy.log",
    "numpy.longdouble",
    "numpy.mod",
    "numpy.outer",
    "numpy.power",
    "pycalphad.core.halton._primes",
    "pycalphad.core.halton._scrambling_multipliers"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.halton.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.core.light_dataset": {
  "data": {},
  "type": "module"
 },
 "pycalphad.core.light_dataset.Dataset": {
  "data": {
   "shadows": "xarray.Dataset"
  },
  "type": "import"
 },
 "pycalphad.core.light_dataset.LightDataset": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "pycalphad.core.light_dataset.LightDataset.__getitem__": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "KeyError",
    "getattr"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.light_dataset.LightDataset.__init__": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "dict",
    "setattr"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.light_dataset.LightDataset.add_variable": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "setattr"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.light_dataset.LightDataset.get_dataset": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "xarray.Dataset"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.light_dataset.LightDataset.merge": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "numpy.all",
    "setattr"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.light_dataset.LightDataset.remove": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "delattr"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.light_dataset.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.core.lower_convex_hull": {
  "data": {},
  "type": "module"
 },
 "pycalphad.core.lower_convex_hull.MIN_SITE_FRACTION": {
  "data": {
   "shadows": "pycalphad.core.constants.MIN_SITE_FRACTION"
  },
  "type": "import"
 },
 "pycalphad.core.lower_convex_hull.cartesian": {
  "data": {
   "shadows": "pycalphad.core.cartesian.cartesian"
  },
  "type": "import"
 },
 "pycalphad.core.lower_convex_hull.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "pycalphad.core.lower_convex_hull.lower_convex_hull": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "float",
    "hyperplane",
    "len",
    "numpy.array",
    "numpy.atleast_1d",
    "numpy.atleast_2d",
    "numpy.index_exp",
    "numpy.nan",
    "numpy.nditer",
    "numpy.nonzero",
    "numpy.ravel_multi_index",
    "numpy.uint64",
    "numpy.where",
    "numpy.zeros",
    "pycalphad.core.cartesian.cartesian",
    "pycalphad.core.constants.MIN_SITE_FRACTION",
    "range",
    "set",
    "sorted",
    "str",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.lower_convex_hull.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.core.lower_convex_hull.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise": {
  "data": {},
  "type": "module"
 },
 "pycalphad.core.patched_piecewise.And": {
  "data": {
   "shadows": "sympy.logic.boolalg.And"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.Boolean": {
  "data": {
   "shadows": "sympy.logic.boolalg.Boolean"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.Dummy": {
  "data": {
   "shadows": "sympy.core.Dummy"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.Function": {
  "data": {
   "shadows": "sympy.core.Function"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.Or": {
  "data": {
   "shadows": "sympy.logic.boolalg.Or"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.Relational": {
  "data": {
   "shadows": "sympy.core.relational.Relational"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.S": {
  "data": {
   "shadows": "sympy.core.S"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.Tuple": {
  "data": {
   "shadows": "sympy.core.Tuple"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise._canonical": {
  "data": {
   "shadows": "sympy.core.relational._canonical"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.as_Basic": {
  "data": {
   "shadows": "sympy.core.basic.as_Basic"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.distribute_and_over_or": {
  "data": {
   "shadows": "sympy.logic.boolalg.distribute_and_over_or"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.exprcondpair_new": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "sympy.core.Tuple.__new__",
    "sympy.core.basic.as_Basic",
    "sympy.logic.boolalg.Boolean",
    "sympy.logic.boolalg.false",
    "sympy.logic.boolalg.true",
    "sympy.utilities.misc.filldedent",
    "sympy.utilities.misc.func_name"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.patched_piecewise.false": {
  "data": {
   "shadows": "sympy.logic.boolalg.false"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.filldedent": {
  "data": {
   "shadows": "sympy.utilities.misc.filldedent"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.func_name": {
  "data": {
   "shadows": "sympy.utilities.misc.func_name"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.piecewise_eval": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "all",
    "cls",
    "enumerate",
    "isinstance",
    "len",
    "list",
    "set",
    "sympy.core.Dummy",
    "sympy.core.Function",
    "sympy.core.S.Infinity",
    "sympy.core.S.NegativeInfinity",
    "sympy.core.S.true",
    "sympy.core.relational.Relational",
    "sympy.core.relational._canonical",
    "sympy.logic.boolalg.And",
    "sympy.logic.boolalg.Boolean",
    "sympy.logic.boolalg.Or",
    "sympy.logic.boolalg.distribute_and_over_or",
    "sympy.utilities.misc.filldedent",
    "zip"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.patched_piecewise.sympy.functions.elementary.piecewise": {
  "data": {
   "shadows": "sympy.functions.elementary.piecewise"
  },
  "type": "import"
 },
 "pycalphad.core.patched_piecewise.true": {
  "data": {
   "shadows": "sympy.logic.boolalg.true"
  },
  "type": "import"
 },
 "pycalphad.core.solver": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple",
    "pycalphad.core.solver.ipopt"
   ]
  },
  "type": "module"
 },
 "pycalphad.core.solver.InteriorPointSolver": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "pycalphad.core.solver.SolverBase"
   ]
  },
  "type": "class"
 },
 "pycalphad.core.solver.InteriorPointSolver.__init__": {
  "data": {
   "lineno": 52
  },
  "type": "function"
 },
 "pycalphad.core.solver.InteriorPointSolver.apply_options": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "isinstance",
    "pycalphad.variables.string_type"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.solver.InteriorPointSolver.solve": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "float",
    "len",
    "max",
    "numpy.abs",
    "numpy.min",
    "print",
    "pycalphad.core.constants.MIN_SITE_FRACTION",
    "pycalphad.core.solver.SolverResult",
    "pycalphad.core.solver.ipopt"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.solver.MIN_SITE_FRACTION": {
  "data": {
   "shadows": "pycalphad.core.constants.MIN_SITE_FRACTION"
  },
  "type": "import"
 },
 "pycalphad.core.solver.SolverBase": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pycalphad.core.solver.SolverBase.solve": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.solver.SolverResult": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "pycalphad.core.solver.ipopt": {
  "data": {
   "shadows": "ipopt"
  },
  "type": "import"
 },
 "pycalphad.core.solver.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pycalphad.core.solver.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.core.solver.string_type": {
  "data": {
   "shadows": "pycalphad.variables.string_type"
  },
  "type": "import"
 },
 "pycalphad.core.starting_point": {
  "data": {},
  "type": "module"
 },
 "pycalphad.core.starting_point.Dataset": {
  "data": {
   "shadows": "xarray.Dataset"
  },
  "type": "import"
 },
 "pycalphad.core.starting_point.LightDataset": {
  "data": {
   "shadows": "pycalphad.core.light_dataset.LightDataset"
  },
  "type": "import"
 },
 "pycalphad.core.starting_point.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "pycalphad.core.starting_point.global_min_is_possible": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "isinstance",
    "pycalphad.variables.ChemicalPotential",
    "pycalphad.variables.Composition",
    "pycalphad.variables.N"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.starting_point.lower_convex_hull": {
  "data": {
   "shadows": "pycalphad.core.lower_convex_hull.lower_convex_hull"
  },
  "type": "import"
 },
 "pycalphad.core.starting_point.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.core.starting_point.pycalphad_version": {
  "data": {
   "shadows": "pycalphad.__version__"
  },
  "type": "import"
 },
 "pycalphad.core.starting_point.starting_point": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "collections.OrderedDict",
    "hasattr",
    "len",
    "max",
    "numpy.arange",
    "numpy.empty",
    "numpy.int32",
    "pycalphad.__version__",
    "pycalphad.core.light_dataset.LightDataset",
    "pycalphad.core.lower_convex_hull.lower_convex_hull",
    "pycalphad.core.starting_point.global_min_is_possible",
    "set",
    "sorted",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.starting_point.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.core.utils": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "pycalphad.core.utils.Iterable": {
  "data": {
   "shadows": "collections.Iterable"
  },
  "type": "import"
 },
 "pycalphad.core.utils.MIN_SITE_FRACTION": {
  "data": {
   "shadows": "pycalphad.core.constants.MIN_SITE_FRACTION"
  },
  "type": "import"
 },
 "pycalphad.core.utils.Mapping": {
  "data": {
   "shadows": "collections.Mapping"
  },
  "type": "import"
 },
 "pycalphad.core.utils.Model": {
  "data": {
   "shadows": "pycalphad.Model"
  },
  "type": "import"
 },
 "pycalphad.core.utils.Symbol": {
  "data": {
   "shadows": "symengine.Symbol"
  },
  "type": "import"
 },
 "pycalphad.core.utils.Symbol_sympy": {
  "data": {
   "shadows": "sympy.Symbol"
  },
  "type": "import"
 },
 "pycalphad.core.utils.broadcast_to": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.broadcast_arrays",
    "numpy.empty"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "pycalphad.core.utils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "pycalphad.core.utils.endmember_matrix": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "len",
    "numpy.all",
    "numpy.array",
    "numpy.concatenate",
    "numpy.delete",
    "numpy.empty",
    "numpy.eye",
    "numpy.float",
    "numpy.where",
    "pycalphad.core.constants.MIN_SITE_FRACTION",
    "pycalphad.core.utils.functools",
    "pycalphad.core.utils.itertools",
    "pycalphad.core.utils.operator",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.extract_parameters": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "len",
    "numpy.asarray",
    "numpy.empty",
    "numpy.float64",
    "pycalphad.core.utils.operator",
    "pycalphad.core.utils.wrap_symbol",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.filter_phases": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "all_sublattices_active",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.filter_phases.all_sublattices_active": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "all",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "pycalphad.core.utils.generate_dof": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "enumerate",
    "pycalphad.variables.SiteFraction",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.get_pure_elements": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "list",
    "pycalphad.core.utils.unpack_components",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.get_state_variables": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": [
    "mod",
    "mod.state_variables",
    "pycalphad.variables.StateVariable",
    "set",
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.halton": {
  "data": {
   "shadows": "pycalphad.core.halton.halton"
  },
  "type": "import"
 },
 "pycalphad.core.utils.instantiate_models": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "len",
    "mod",
    "pycalphad.Model",
    "pycalphad.core.utils.extract_parameters",
    "pycalphad.core.utils.unpack_kwarg",
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "pycalphad.core.utils.lambdify": {
  "data": {
   "shadows": "sympy.utilities.lambdify.lambdify"
  },
  "type": "import"
 },
 "pycalphad.core.utils.make_callable": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "sympy.utilities.lambdify.lambdify",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.core.utils.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "pycalphad.core.utils.point_sample": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "len",
    "numpy.atleast_2d",
    "numpy.log",
    "pycalphad.core.halton.halton",
    "sum"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.sizeof_fmt": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "abs"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.sympify": {
  "data": {
   "shadows": "symengine.sympify"
  },
  "type": "import"
 },
 "pycalphad.core.utils.unpack_components": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "list",
    "pycalphad.variables.Species",
    "set"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.unpack_condition": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "ValueError",
    "collections.Iterable",
    "float",
    "isinstance",
    "len",
    "numpy.arange",
    "numpy.float",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.unpack_kwarg": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "collections.Iterable",
    "collections.Mapping",
    "isinstance",
    "numpy.ndarray",
    "pycalphad.core.utils.collections"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.unpack_phases": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "dict",
    "isinstance",
    "list",
    "set",
    "sorted",
    "str",
    "tuple",
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.core.utils.wrap_symbol": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "isinstance",
    "sympy.Symbol"
   ]
  },
  "type": "function"
 },
 "pycalphad.core.utils.wrap_symbol_symengine": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": [
    "isinstance",
    "symengine.sympify",
    "sympy.Symbol"
   ]
  },
  "type": "function"
 },
 "pycalphad.eqplot": {
  "data": {
   "shadows": "pycalphad.plot.eqplot.eqplot"
  },
  "type": "import"
 },
 "pycalphad.equilibrium": {
  "data": {
   "shadows": "pycalphad.core.equilibrium.equilibrium"
  },
  "type": "import"
 },
 "pycalphad.io": {
  "data": {},
  "type": "module"
 },
 "pycalphad.io.database": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "NameError",
    "collections.namedtuple"
   ]
  },
  "type": "module"
 },
 "pycalphad.io.database.Database": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pycalphad.io.database.Database.__eq__": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "len",
    "sorted",
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.__eq__.param_sort_key": {
  "data": {
   "lineno": 340
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.__getstate__": {
  "data": {
   "lineno": 141
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.__hash__": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "pycalphad.core.cache.fhash"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.__ne__": {
  "data": {
   "lineno": 356
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.__new__": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "AttributeError",
    "TypeError",
    "ValueError",
    "hasattr",
    "len",
    "pycalphad.io.database.Database",
    "pycalphad.io.database.format_registry",
    "pycalphad.io.database.os",
    "set",
    "super",
    "tinydb.TinyDB",
    "tinydb.storages.MemoryStorage"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.__setstate__": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "setattr",
    "tinydb.TinyDB",
    "tinydb.storages.MemoryStorage"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.__str__": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "len",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.add_parameter": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "pycalphad.variables.Species",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.add_phase": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "pycalphad.io.database.Phase",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.add_phase_constituents": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "KeyError",
    "frozenset",
    "print",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.add_structure_entry": {
  "data": {
   "lineno": 359
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.from_file": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "AttributeError",
    "NotImplementedError",
    "TypeError",
    "ValueError",
    "hasattr",
    "open",
    "pycalphad.io.database.Database",
    "pycalphad.io.database.format_registry",
    "pycalphad.io.database.os",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.from_string": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "classmethod",
    "io.StringIO"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.register_format": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "pycalphad.io.database.DatabaseFormat",
    "pycalphad.io.database.format_registry",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.search": {
  "data": {
   "lineno": 463
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.to_file": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "AttributeError",
    "NotImplementedError",
    "TypeError",
    "ValueError",
    "datetime.datetime.now",
    "hasattr",
    "open",
    "pycalphad.io.database.FileExistsError",
    "pycalphad.io.database.format_registry",
    "pycalphad.io.database.os"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Database.to_string": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "io.StringIO"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.DatabaseExportError": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "pycalphad.io.database.DatabaseFormat": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "pycalphad.io.database.FileExistsError": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "OSError"
   ]
  },
  "type": "class"
 },
 "pycalphad.io.database.MemoryStorage": {
  "data": {
   "shadows": "tinydb.storages.MemoryStorage"
  },
  "type": "import"
 },
 "pycalphad.io.database.Phase": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pycalphad.io.database.Phase.__eq__": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Phase.__hash__": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "hash",
    "pycalphad.io.database._to_tuple",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.Phase.__init__": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "pycalphad.io.database.Phase.__ne__": {
  "data": {
   "lineno": 63
  },
  "type": "function"
 },
 "pycalphad.io.database.Phase.__repr__": {
  "data": {
   "lineno": 65
  },
  "type": "function"
 },
 "pycalphad.io.database.Species": {
  "data": {
   "shadows": "pycalphad.variables.Species"
  },
  "type": "import"
 },
 "pycalphad.io.database.StringIO": {
  "data": {
   "shadows": "io.StringIO"
  },
  "type": "import"
 },
 "pycalphad.io.database.TinyDB": {
  "data": {
   "shadows": "tinydb.TinyDB"
  },
  "type": "import"
 },
 "pycalphad.io.database._to_tuple": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.database.datetime": {
  "data": {
   "shadows": "datetime.datetime"
  },
  "type": "import"
 },
 "pycalphad.io.database.fhash": {
  "data": {
   "shadows": "pycalphad.core.cache.fhash"
  },
  "type": "import"
 },
 "pycalphad.io.database.format_registry": {
  "data": {
   "lineno": 72
  },
  "type": "constant"
 },
 "pycalphad.io.database.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pycalphad.io.database.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "pycalphad.io.grammar": {
  "data": {
   "symbols_in_volume": [
    "float",
    "int",
    "pycalphad.io.grammar.float_number",
    "pycalphad.io.grammar.pos_neg_int_number",
    "pycalphad.io.grammar.reg_amount",
    "pycalphad.io.grammar.reg_symbol",
    "pycalphad.io.grammar.regex_after_decimal",
    "pyparsing.Group",
    "pyparsing.OneOrMore",
    "pyparsing.Optional",
    "pyparsing.Regex",
    "pyparsing.Suppress",
    "pyparsing.Word",
    "pyparsing.alphas",
    "pyparsing.nums"
   ]
  },
  "type": "module"
 },
 "pycalphad.io.grammar.Group": {
  "data": {
   "shadows": "pyparsing.Group"
  },
  "type": "import"
 },
 "pycalphad.io.grammar.OneOrMore": {
  "data": {
   "shadows": "pyparsing.OneOrMore"
  },
  "type": "import"
 },
 "pycalphad.io.grammar.Optional": {
  "data": {
   "shadows": "pyparsing.Optional"
  },
  "type": "import"
 },
 "pycalphad.io.grammar.Regex": {
  "data": {
   "shadows": "pyparsing.Regex"
  },
  "type": "import"
 },
 "pycalphad.io.grammar.Suppress": {
  "data": {
   "shadows": "pyparsing.Suppress"
  },
  "type": "import"
 },
 "pycalphad.io.grammar.Word": {
  "data": {
   "shadows": "pyparsing.Word"
  },
  "type": "import"
 },
 "pycalphad.io.grammar.alphas": {
  "data": {
   "shadows": "pyparsing.alphas"
  },
  "type": "import"
 },
 "pycalphad.io.grammar.chem_regex": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "pycalphad.io.grammar.chemical_formula": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "pycalphad.io.grammar.float_number": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "pycalphad.io.grammar.nums": {
  "data": {
   "shadows": "pyparsing.nums"
  },
  "type": "import"
 },
 "pycalphad.io.grammar.parse_chemical_formula": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "float",
    "int",
    "pycalphad.io.grammar.chem_regex",
    "pycalphad.io.grammar.re",
    "pycalphad.io.grammar.reg_charge"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.grammar.pos_neg_int_number": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "pycalphad.io.grammar.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "pycalphad.io.grammar.reg_amount": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "pycalphad.io.grammar.reg_charge": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "pycalphad.io.grammar.reg_symbol": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "pycalphad.io.grammar.regex_after_decimal": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "pycalphad.io.tdb": {
  "data": {
   "symbols_in_volume": [
    "dict",
    "pycalphad.Database.register_format",
    "pycalphad.io.tdb._process_parameter",
    "pycalphad.io.tdb._process_phase",
    "pycalphad.io.tdb._process_reference_state",
    "pycalphad.io.tdb._process_species",
    "pycalphad.io.tdb._process_typedef",
    "pycalphad.io.tdb._setitem_raise_duplicates",
    "pycalphad.io.tdb._unimplemented",
    "pycalphad.io.tdb.ast",
    "pycalphad.io.tdb.clashing_namespace",
    "pycalphad.io.tdb.phase_options",
    "pycalphad.io.tdb.read_tdb",
    "pycalphad.io.tdb.write_tdb",
    "pycalphad.variables.P",
    "pycalphad.variables.R",
    "pycalphad.variables.T",
    "reversed",
    "sympy.Symbol",
    "sympy.abc._clash"
   ]
  },
  "type": "module"
 },
 "pycalphad.io.tdb.And": {
  "data": {
   "shadows": "sympy.And"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.CaselessKeyword": {
  "data": {
   "shadows": "pyparsing.CaselessKeyword"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.CharsNotIn": {
  "data": {
   "shadows": "pyparsing.CharsNotIn"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Complement": {
  "data": {
   "shadows": "sympy.Complement"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Database": {
  "data": {
   "shadows": "pycalphad.Database"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.DatabaseExportError": {
  "data": {
   "shadows": "pycalphad.io.database.DatabaseExportError"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.EmptySet": {
  "data": {
   "shadows": "sympy.EmptySet"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.GreaterThan": {
  "data": {
   "shadows": "sympy.GreaterThan"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Group": {
  "data": {
   "shadows": "pyparsing.Group"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Intersection": {
  "data": {
   "shadows": "sympy.Intersection"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Interval": {
  "data": {
   "shadows": "sympy.Interval"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.LessThan": {
  "data": {
   "shadows": "sympy.LessThan"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.LineEnd": {
  "data": {
   "shadows": "pyparsing.LineEnd"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.MatchFirst": {
  "data": {
   "shadows": "pyparsing.MatchFirst"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Mul": {
  "data": {
   "shadows": "sympy.Mul"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Not": {
  "data": {
   "shadows": "sympy.Not"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.OneOrMore": {
  "data": {
   "shadows": "pyparsing.OneOrMore"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Optional": {
  "data": {
   "shadows": "pyparsing.Optional"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Or": {
  "data": {
   "shadows": "sympy.Or"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.ParseException": {
  "data": {
   "shadows": "pyparsing.ParseException"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Piecewise": {
  "data": {
   "shadows": "sympy.Piecewise"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Pow": {
  "data": {
   "shadows": "sympy.Pow"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Rational": {
  "data": {
   "shadows": "sympy.Rational"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Regex": {
  "data": {
   "shadows": "pyparsing.Regex"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.S": {
  "data": {
   "shadows": "sympy.S"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.SkipTo": {
  "data": {
   "shadows": "pyparsing.SkipTo"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Species": {
  "data": {
   "shadows": "pycalphad.variables.Species"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.StrPrinter": {
  "data": {
   "shadows": "sympy.printing.str.StrPrinter"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.StrictGreaterThan": {
  "data": {
   "shadows": "sympy.StrictGreaterThan"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.StrictLessThan": {
  "data": {
   "shadows": "sympy.StrictLessThan"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Suppress": {
  "data": {
   "shadows": "pyparsing.Suppress"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Symbol": {
  "data": {
   "shadows": "sympy.Symbol"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.TCCommand": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "pyparsing.CaselessKeyword"
   ]
  },
  "type": "class"
 },
 "pycalphad.io.tdb.TCCommand.parseImpl": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "min",
    "pycalphad.io.tdb_keywords.expand_keyword",
    "pyparsing.ParseException"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "sympy.printing.str.StrPrinter"
   ]
  },
  "type": "class"
 },
 "pycalphad.io.tdb.TCPrinter._print_Function": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter._print_Infinity": {
  "data": {
   "lineno": 544
  },
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter._print_Mul": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": [
    "len",
    "sympy.Mul.make_args",
    "sympy.Pow",
    "sympy.Rational",
    "sympy.S.Infinity",
    "sympy.S.One",
    "sympy.core.mul._keep_coeff",
    "sympy.printing.precedence.precedence"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter._print_Piecewise": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": [
    "ValueError",
    "all",
    "enumerate",
    "isinstance",
    "len",
    "pycalphad.io.tdb.to_interval",
    "pycalphad.variables.T",
    "sorted",
    "sympy.EmptySet",
    "sympy.Intersection",
    "sympy.Interval",
    "sympy.S.Zero",
    "sympy.S.true",
    "sympy.Union",
    "zip"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter._print_Pow": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": [
    "sympy.printing.precedence.precedence"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter._print_Symbol": {
  "data": {
   "lineno": 548,
   "symbols_in_volume": [
    "isinstance",
    "pycalphad.variables.StateVariable"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb.TCPrinter.blacklisted": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb.TDB_PARAM_TYPES": {
  "data": {
   "shadows": "pycalphad.io.tdb_keywords.TDB_PARAM_TYPES"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Union": {
  "data": {
   "shadows": "sympy.Union"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.White": {
  "data": {
   "shadows": "pyparsing.White"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.Word": {
  "data": {
   "shadows": "pyparsing.Word"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.ZeroOrMore": {
  "data": {
   "shadows": "pyparsing.ZeroOrMore"
  },
  "type": "import"
 },
 "pycalphad.io.tdb._AST_WHITELIST": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "pycalphad.io.tdb._TDB_PROCESSOR": {
  "data": {
   "lineno": 386
  },
  "type": "constant"
 },
 "pycalphad.io.tdb.__version__": {
  "data": {
   "shadows": "pycalphad.__version__"
  },
  "type": "import"
 },
 "pycalphad.io.tdb._apply_new_symbol_names": {
  "data": {
   "lineno": 635,
   "symbols_in_volume": [
    "pycalphad.variables",
    "sympy.S",
    "sympy.Symbol"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb._clash": {
  "data": {
   "shadows": "sympy.abc._clash"
  },
  "type": "import"
 },
 "pycalphad.io.tdb._keep_coeff": {
  "data": {
   "shadows": "sympy.core.mul._keep_coeff"
  },
  "type": "import"
 },
 "pycalphad.io.tdb._make_piecewise_ast": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "IndexError",
    "len",
    "pycalphad.io.tdb._parse_action",
    "pycalphad.io.tdb._sympify_string",
    "pycalphad.variables.T",
    "sympy.And",
    "sympy.Piecewise"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb._parse_action": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "pycalphad.io.tdb.inspect",
    "pycalphad.io.tdb.sys"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb._parse_action.action": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "TypeError",
    "func",
    "len",
    "pycalphad.io.tdb.functools",
    "pycalphad.io.tdb.sys"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb._process_parameter": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb._process_phase": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "len",
    "list",
    "pycalphad.io.tdb.inv_phase_options"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb._process_reference_state": {
  "data": {
   "lineno": 373
  },
  "type": "function"
 },
 "pycalphad.io.tdb._process_species": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "len",
    "pycalphad.variables.Species",
    "range"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb._process_typedef": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "len",
    "pycalphad.io.tdb_keywords.expand_keyword"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb._setitem_raise_duplicates": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb._sympify_string": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "ValueError",
    "pycalphad.io.tdb._AST_WHITELIST",
    "pycalphad.io.tdb.ast",
    "pycalphad.io.tdb.clashing_namespace",
    "pycalphad.io.tdb.re",
    "sympy.sympify",
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb._tdb_grammar": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "int",
    "pycalphad.io.grammar.chemical_formula",
    "pycalphad.io.grammar.float_number",
    "pycalphad.io.tdb.TCCommand",
    "pycalphad.io.tdb._make_piecewise_ast",
    "pycalphad.io.tdb_keywords.TDB_PARAM_TYPES",
    "pyparsing.CharsNotIn",
    "pyparsing.Group",
    "pyparsing.LineEnd",
    "pyparsing.MatchFirst",
    "pyparsing.OneOrMore",
    "pyparsing.Optional",
    "pyparsing.SkipTo",
    "pyparsing.Suppress",
    "pyparsing.White",
    "pyparsing.Word",
    "pyparsing.ZeroOrMore",
    "pyparsing.alphanums",
    "pyparsing.alphas",
    "pyparsing.delimitedList",
    "pyparsing.nums"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb._unimplemented": {
  "data": {
   "lineno": 361
  },
  "type": "function"
 },
 "pycalphad.io.tdb.alphanums": {
  "data": {
   "shadows": "pyparsing.alphanums"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.alphas": {
  "data": {
   "shadows": "pyparsing.alphas"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.ast": {
  "data": {
   "shadows": "ast"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.chemical_formula": {
  "data": {
   "shadows": "pycalphad.io.grammar.chemical_formula"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.clashing_namespace": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "pycalphad.io.tdb.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.delimitedList": {
  "data": {
   "shadows": "pyparsing.delimitedList"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.expand_keyword": {
  "data": {
   "shadows": "pycalphad.io.tdb_keywords.expand_keyword"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.float_number": {
  "data": {
   "shadows": "pycalphad.io.grammar.float_number"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.getpass": {
  "data": {
   "shadows": "getpass"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.inv_phase_options": {
  "data": {
   "lineno": 315
  },
  "type": "constant"
 },
 "pycalphad.io.tdb.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.nums": {
  "data": {
   "shadows": "pyparsing.nums"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.phase_options": {
  "data": {
   "lineno": 308
  },
  "type": "constant"
 },
 "pycalphad.io.tdb.precedence": {
  "data": {
   "shadows": "sympy.printing.precedence.precedence"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.read_tdb": {
  "data": {
   "lineno": 904,
   "symbols_in_volume": [
    "len",
    "print",
    "pycalphad.io.tdb._TDB_PROCESSOR",
    "pycalphad.io.tdb._tdb_grammar",
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb.reflow_text": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb.sympify": {
  "data": {
   "shadows": "sympy.sympify"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.to_interval": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "len",
    "list",
    "sympy.And",
    "sympy.Complement",
    "sympy.GreaterThan",
    "sympy.Intersection",
    "sympy.Interval",
    "sympy.LessThan",
    "sympy.Not",
    "sympy.Or",
    "sympy.S.Infinity",
    "sympy.S.NegativeInfinity",
    "sympy.S.true",
    "sympy.StrictGreaterThan",
    "sympy.StrictLessThan",
    "sympy.Union"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "pycalphad.io.tdb.write_tdb": {
  "data": {
   "lineno": 655,
   "symbols_in_volume": [
    "ValueError",
    "collections.defaultdict",
    "collections.namedtuple",
    "copy.deepcopy",
    "isinstance",
    "len",
    "list",
    "paramtuple",
    "pycalphad.__version__",
    "pycalphad.io.database.DatabaseExportError",
    "pycalphad.io.tdb.TCPrinter",
    "pycalphad.io.tdb._apply_new_symbol_names",
    "pycalphad.io.tdb.datetime",
    "pycalphad.io.tdb.getpass",
    "pycalphad.io.tdb.hashlib",
    "pycalphad.io.tdb.itertools",
    "pycalphad.io.tdb.phase_options",
    "pycalphad.io.tdb.reflow_text",
    "pycalphad.io.tdb.warnings",
    "pycalphad.variables.Species",
    "pycalphad.variables.T",
    "range",
    "set",
    "sorted",
    "str",
    "sum",
    "sympy.And",
    "sympy.Piecewise",
    "tuple",
    "write_parameter"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb.write_tdb.write_parameter": {
  "data": {
   "lineno": 845,
   "symbols_in_volume": [
    "isinstance",
    "pycalphad.io.tdb.TCPrinter",
    "pycalphad.variables.Species",
    "pycalphad.variables.T",
    "sorted",
    "sympy.And",
    "sympy.Piecewise"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb_keywords": {
  "data": {
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "module"
 },
 "pycalphad.io.tdb_keywords.TDB_COMMANDS": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "pycalphad.io.tdb_keywords.TDB_KEYWORDS": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "pycalphad.io.tdb_keywords.TDB_PARAM_TYPES": {
  "data": {
   "lineno": 69
  },
  "type": "constant"
 },
 "pycalphad.io.tdb_keywords.TDB_PHASE_DESCRIPTIONS": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "pycalphad.io.tdb_keywords.expand_keyword": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "pycalphad.io.tdb_keywords.re"
   ]
  },
  "type": "function"
 },
 "pycalphad.io.tdb_keywords.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "pycalphad.model": {
  "data": {},
  "type": "module"
 },
 "pycalphad.model.Abs": {
  "data": {
   "shadows": "sympy.Abs"
  },
  "type": "import"
 },
 "pycalphad.model.Add": {
  "data": {
   "shadows": "sympy.Add"
  },
  "type": "import"
 },
 "pycalphad.model.And": {
  "data": {
   "shadows": "sympy.And"
  },
  "type": "import"
 },
 "pycalphad.model.DofError": {
  "data": {
   "shadows": "pycalphad.core.errors.DofError"
  },
  "type": "import"
 },
 "pycalphad.model.Float": {
  "data": {
   "shadows": "sympy.Float"
  },
  "type": "import"
 },
 "pycalphad.model.MIN_SITE_FRACTION": {
  "data": {
   "shadows": "pycalphad.core.constants.MIN_SITE_FRACTION"
  },
  "type": "import"
 },
 "pycalphad.model.Model": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "object",
    "property",
    "pycalphad.variables.T",
    "sympy.S.Zero"
   ]
  },
  "type": "class"
 },
 "pycalphad.model.Model._Muggianu_correction_dict": {
  "data": {
   "lineno": 483,
   "symbols_in_volume": [
    "len",
    "staticmethod",
    "sympy.Add",
    "sympy.S.One"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.__eq__": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.__hash__": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "hash",
    "repr"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.__init__": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "ValueError",
    "abs",
    "collections.OrderedDict",
    "dict",
    "enumerate",
    "getattr",
    "isinstance",
    "len",
    "list",
    "map",
    "pycalphad.core.errors.DofError",
    "pycalphad.core.utils.unpack_components",
    "pycalphad.core.utils.wrap_symbol",
    "pycalphad.variables.SiteFraction",
    "pycalphad.variables.Species",
    "set",
    "sorted",
    "str",
    "sum",
    "sympy.Add",
    "sympy.Symbol",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.__ne__": {
  "data": {
   "lineno": 226
  },
  "type": "function"
 },
 "pycalphad.model.Model._array_validity": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "len",
    "pycalphad.variables.Species",
    "set"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model._build_reference_model": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "pycalphad.model.copy",
    "sympy.S.Zero",
    "sympy.nan",
    "tinydb.where"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model._interaction_test": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": [
    "len",
    "pycalphad.variables.Species",
    "set"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model._purity_test": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "len",
    "pycalphad.variables.Species"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model._site_ratio_normalization": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": [
    "enumerate",
    "property",
    "pycalphad.variables.SiteFraction",
    "set",
    "sum",
    "sympy.S.Zero"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.ast": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "list",
    "property",
    "sympy.Add"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.atomic_ordering_energy": {
  "data": {
   "lineno": 917,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "list",
    "pycalphad.variables.SiteFraction",
    "set",
    "sorted",
    "sympy.Add",
    "sympy.S.Zero"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.build_phase": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": [
    "ValueError",
    "collections.OrderedDict",
    "getattr",
    "len",
    "list",
    "sympy.S"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.degree_of_ordering": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "property",
    "pycalphad.variables.SiteFraction",
    "set",
    "sum",
    "sympy.Abs",
    "sympy.S.Zero"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.einstein_energy": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": [
    "param_search",
    "pycalphad.variables.R",
    "pycalphad.variables.T",
    "sympy.exp",
    "sympy.log",
    "tinydb.where"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.excess_mixing_energy": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": [
    "param_search",
    "tinydb.where"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.get_internal_constraints": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "enumerate",
    "pycalphad.variables.SiteFraction",
    "sum"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.get_multiphase_constraints": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "NotImplementedError",
    "isinstance",
    "pycalphad.core.constraints.is_multiphase_constraint",
    "pycalphad.variables.ChemicalPotential",
    "pycalphad.variables.Composition",
    "pycalphad.variables.N",
    "pycalphad.variables.P",
    "pycalphad.variables.T",
    "sorted",
    "str",
    "sum",
    "sympy.S.Zero",
    "sympy.Symbol"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.ideal_mixing_energy": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": [
    "enumerate",
    "pycalphad.core.constants.MIN_SITE_FRACTION",
    "pycalphad.variables.R",
    "pycalphad.variables.SiteFraction",
    "pycalphad.variables.T",
    "set",
    "sympy.Float",
    "sympy.Piecewise",
    "sympy.S.Zero",
    "sympy.StrictGreaterThan",
    "sympy.log"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.magnetic_energy": {
  "data": {
   "lineno": 677,
   "symbols_in_volume": [
    "param_search",
    "pycalphad.variables.R",
    "pycalphad.variables.T",
    "sympy.And",
    "sympy.Piecewise",
    "sympy.S.Zero",
    "sympy.log",
    "tinydb.where"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.mole_fraction": {
  "data": {
   "lineno": 880,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "list",
    "pycalphad.variables.SiteFraction",
    "staticmethod",
    "str",
    "sum",
    "sympy.S.Zero"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.moles": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "len",
    "list",
    "pycalphad.variables.SiteFraction",
    "pycalphad.variables.Species",
    "set",
    "sum",
    "sympy.S.Zero"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.redlich_kister_sum": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": [
    "any",
    "enumerate",
    "len",
    "max",
    "param_search",
    "pycalphad.model.copy",
    "pycalphad.variables.SiteFraction",
    "pycalphad.variables.Species",
    "range",
    "set",
    "sorted",
    "sympy.Add",
    "sympy.Mul",
    "sympy.Pow",
    "sympy.S.One",
    "tinydb.where"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.reference_energy": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": [
    "param_search",
    "tinydb.where"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.reference_model": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.shift_reference_state": {
  "data": {
   "lineno": 992,
   "symbols_in_volume": [
    "getattr",
    "isinstance",
    "len",
    "pycalphad.core.errors.DofError",
    "pycalphad.core.utils.get_pure_elements",
    "pycalphad.model.copy",
    "pycalphad.variables.SiteFraction",
    "pycalphad.variables.Species",
    "set",
    "setattr",
    "sympy.Add",
    "tinydb.where"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.shift_reference_state._pure_element_test": {
  "data": {
   "lineno": 1027,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.symbol_replace": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "AttributeError",
    "isinstance",
    "len",
    "pycalphad.model._MAX_PARAM_NESTING",
    "pycalphad.variables.StateVariable",
    "range",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.twostate_energy": {
  "data": {
   "lineno": 841,
   "symbols_in_volume": [
    "param_search",
    "pycalphad.variables.R",
    "pycalphad.variables.T",
    "sympy.S.Zero",
    "sympy.exp",
    "sympy.log",
    "tinydb.where"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.variables": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "isinstance",
    "property",
    "pycalphad.variables.StateVariable",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Model.xiong_magnetic_energy": {
  "data": {
   "lineno": 762,
   "symbols_in_volume": [
    "ValueError",
    "param_search",
    "pycalphad.variables.R",
    "pycalphad.variables.T",
    "sympy.Piecewise",
    "sympy.S.Zero",
    "sympy.log",
    "sympy.zoo",
    "tinydb.where"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.Mul": {
  "data": {
   "shadows": "sympy.Mul"
  },
  "type": "import"
 },
 "pycalphad.model.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "pycalphad.model.Piecewise": {
  "data": {
   "shadows": "sympy.Piecewise"
  },
  "type": "import"
 },
 "pycalphad.model.Pow": {
  "data": {
   "shadows": "sympy.Pow"
  },
  "type": "import"
 },
 "pycalphad.model.ReferenceState": {
  "data": {
   "lineno": 22
  },
  "type": "class"
 },
 "pycalphad.model.ReferenceState.__init__": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "isinstance",
    "pycalphad.variables.Species"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.ReferenceState.__repr__": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pycalphad.model.S": {
  "data": {
   "shadows": "sympy.S"
  },
  "type": "import"
 },
 "pycalphad.model.StrictGreaterThan": {
  "data": {
   "shadows": "sympy.StrictGreaterThan"
  },
  "type": "import"
 },
 "pycalphad.model.Symbol": {
  "data": {
   "shadows": "sympy.Symbol"
  },
  "type": "import"
 },
 "pycalphad.model.TestModel": {
  "data": {
   "lineno": 1065,
   "symbols_in_volume": [
    "pycalphad.model.Model"
   ]
  },
  "type": "class"
 },
 "pycalphad.model.TestModel.__init__": {
  "data": {
   "lineno": 1093,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "len",
    "list",
    "numpy.float",
    "numpy.int",
    "numpy.ones",
    "numpy.ones_like",
    "numpy.random.dirichlet",
    "pycalphad.variables.SiteFraction",
    "range",
    "set",
    "sorted",
    "sympy.Add",
    "sympy.sin",
    "zip"
   ]
  },
  "type": "function"
 },
 "pycalphad.model._MAX_PARAM_NESTING": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "pycalphad.model.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "pycalphad.model.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "pycalphad.model.exp": {
  "data": {
   "shadows": "sympy.exp"
  },
  "type": "import"
 },
 "pycalphad.model.get_pure_elements": {
  "data": {
   "shadows": "pycalphad.core.utils.get_pure_elements"
  },
  "type": "import"
 },
 "pycalphad.model.is_multiphase_constraint": {
  "data": {
   "shadows": "pycalphad.core.constraints.is_multiphase_constraint"
  },
  "type": "import"
 },
 "pycalphad.model.log": {
  "data": {
   "shadows": "sympy.log"
  },
  "type": "import"
 },
 "pycalphad.model.nan": {
  "data": {
   "shadows": "sympy.nan"
  },
  "type": "import"
 },
 "pycalphad.model.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.model.oo": {
  "data": {
   "shadows": "sympy.oo"
  },
  "type": "import"
 },
 "pycalphad.model.sin": {
  "data": {
   "shadows": "sympy.sin"
  },
  "type": "import"
 },
 "pycalphad.model.unpack_components": {
  "data": {
   "shadows": "pycalphad.core.utils.unpack_components"
  },
  "type": "import"
 },
 "pycalphad.model.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.model.where": {
  "data": {
   "shadows": "tinydb.where"
  },
  "type": "import"
 },
 "pycalphad.model.wrap_symbol": {
  "data": {
   "shadows": "pycalphad.core.utils.wrap_symbol"
  },
  "type": "import"
 },
 "pycalphad.model.zoo": {
  "data": {
   "shadows": "sympy.zoo"
  },
  "type": "import"
 },
 "pycalphad.plot": {
  "data": {},
  "type": "module"
 },
 "pycalphad.plot.binary": {
  "data": {},
  "type": "module"
 },
 "pycalphad.plot.binary.compsets": {
  "data": {},
  "type": "module"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset.__eq__": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "hasattr",
    "numpy.all",
    "numpy.isclose"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset.__init__": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset.__repr__": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset.__str__": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.BinaryCompset.from_dataset_vertices": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "numpy.array",
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair": {
  "data": {
   "lineno": 71
  },
  "type": "class"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.Tdiscrepancy": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "numpy.abs"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.__init__": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "frozenset",
    "numpy.array",
    "numpy.mean",
    "pycalphad.plot.binary.compsets.warnings",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.__repr__": {
  "data": {
   "lineno": 201
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.__str__": {
  "data": {
   "lineno": 205
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.pairwise_xdiscrepancy": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.full",
    "numpy.infty"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.xdiscrepancy": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.infty"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.ydiscrepancy": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.infty"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.CompsetPair.ydiscrepancy_max": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.max"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.find_two_phase_region_compsets": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "len",
    "numpy.all",
    "numpy.any",
    "numpy.arange",
    "numpy.empty",
    "numpy.isnan",
    "numpy.nditer",
    "pycalphad.plot.binary.compsets.BinaryCompset",
    "pycalphad.plot.binary.compsets.CompsetPair",
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.get_compsets": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "len",
    "pycalphad.plot.binary.compsets.BinaryCompset",
    "pycalphad.plot.binary.compsets.CompsetPair"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.compsets.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.compsets.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map": {
  "data": {},
  "type": "module"
 },
 "pycalphad.plot.binary.map._adjust_conditions": {
  "data": {
   "shadows": "pycalphad.core.equilibrium._adjust_conditions"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map._solve_eq_at_conditions": {
  "data": {
   "shadows": "pycalphad.core.eqsolver._solve_eq_at_conditions"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.build_phase_records": {
  "data": {
   "shadows": "pycalphad.codegen.callables.build_phase_records"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.calculate": {
  "data": {
   "shadows": "pycalphad.calculate"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.get_pure_elements": {
  "data": {
   "shadows": "pycalphad.core.utils.get_pure_elements"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.get_state_variables": {
  "data": {
   "shadows": "pycalphad.core.utils.get_state_variables"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.instantiate_models": {
  "data": {
   "shadows": "pycalphad.core.utils.instantiate_models"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.map_binary": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ValueError",
    "ZPFBoundarySets",
    "copy.deepcopy",
    "find_two_phase_region_compsets",
    "float",
    "get_compsets",
    "isinstance",
    "len",
    "numpy.atleast_1d",
    "print",
    "pycalphad.calculate",
    "pycalphad.codegen.callables.build_phase_records",
    "pycalphad.core.eqsolver._solve_eq_at_conditions",
    "pycalphad.core.equilibrium._adjust_conditions",
    "pycalphad.core.starting_point.starting_point",
    "pycalphad.core.utils.get_pure_elements",
    "pycalphad.core.utils.get_state_variables",
    "pycalphad.core.utils.instantiate_models",
    "pycalphad.core.utils.unpack_components",
    "pycalphad.core.utils.unpack_condition",
    "pycalphad.plot.binary.map.time",
    "pycalphad.variables.Composition",
    "pycalphad.variables.N",
    "pycalphad.variables.P",
    "pycalphad.variables.StateVariable",
    "pycalphad.variables.T",
    "pycalphad.variables.X",
    "range",
    "sorted",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.map.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.starting_point": {
  "data": {
   "shadows": "pycalphad.core.starting_point.starting_point"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.unpack_components": {
  "data": {
   "shadows": "pycalphad.core.utils.unpack_components"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.unpack_condition": {
  "data": {
   "shadows": "pycalphad.core.utils.unpack_condition"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.map.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.plot": {
  "data": {},
  "type": "module"
 },
 "pycalphad.plot.binary.plot._axis_label": {
  "data": {
   "shadows": "pycalphad.plot.eqplot._axis_label"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.plot.binplot": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "dict",
    "map_binary",
    "pycalphad.plot.binary.plot.plot_boundaries"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.plot.plot_boundaries": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "matplotlib.pyplot.figure",
    "pycalphad.plot.eqplot._axis_label",
    "pycalphad.variables.T",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.plot.plt": {
  "data": {
   "shadows": "matplotlib.pyplot"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.plot.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.zpf_boundary_sets": {
  "data": {},
  "type": "module"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.CompsetPair": {
  "data": {
   "shadows": "pycalphad.plot.binary.compsets.CompsetPair"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.LineCollection": {
  "data": {
   "shadows": "matplotlib.collections.LineCollection"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.__init__": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.__repr__": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.add_compsets": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion.compsets_belong_in_region": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.all"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets": {
  "data": {
   "lineno": 79
  },
  "type": "class"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.__init__": {
  "data": {
   "lineno": 94
  },
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.__repr__": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.add_compsets": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "len",
    "pycalphad.plot.binary.zpf_boundary_sets.TwoPhaseRegion"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.get_line_plot_boundaries": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "len",
    "matplotlib.collections.LineCollection",
    "matplotlib.colors.to_rgba",
    "numpy.array",
    "pycalphad.plot.utils.phase_legend"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.get_phases": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.get_scatter_plot_boundaries": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "matplotlib.collections.LineCollection",
    "numpy.array",
    "pycalphad.plot.utils.phase_legend"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.ZPFBoundarySets.rebuild_two_phase_regions": {
  "data": {
   "lineno": 132
  },
  "type": "function"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.phase_legend": {
  "data": {
   "shadows": "pycalphad.plot.utils.phase_legend"
  },
  "type": "import"
 },
 "pycalphad.plot.binary.zpf_boundary_sets.to_rgba": {
  "data": {
   "shadows": "matplotlib.colors.to_rgba"
  },
  "type": "import"
 },
 "pycalphad.plot.eqplot": {
  "data": {
   "symbols_in_volume": [
    "pycalphad.variables.P",
    "pycalphad.variables.T"
   ]
  },
  "type": "module"
 },
 "pycalphad.plot.eqplot.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "pycalphad.plot.eqplot._axis_label": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "isinstance",
    "pycalphad.plot.eqplot._plot_labels",
    "pycalphad.variables.Composition",
    "pycalphad.variables.StateVariable"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.eqplot._map_coord_to_variable": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "pycalphad.variables.P",
    "pycalphad.variables.T",
    "pycalphad.variables.X"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.eqplot._plot_labels": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "pycalphad.plot.eqplot.eqplot": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "collections.OrderedDict",
    "isinstance",
    "len",
    "list",
    "map",
    "matplotlib.collections.LineCollection",
    "matplotlib.pyplot.figure",
    "matplotlib.pyplot.gca",
    "numpy.array",
    "numpy.asarray",
    "numpy.concatenate",
    "numpy.int",
    "numpy.max",
    "numpy.min",
    "numpy.newaxis",
    "numpy.nonzero",
    "numpy.rollaxis",
    "numpy.sum",
    "numpy.take",
    "pycalphad.core.utils.unpack_condition",
    "pycalphad.plot.eqplot._axis_label",
    "pycalphad.plot.eqplot._map_coord_to_variable",
    "pycalphad.plot.utils.phase_legend",
    "pycalphad.variables.Composition",
    "pycalphad.variables.StateVariable",
    "set",
    "sorted",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.eqplot.mc": {
  "data": {
   "shadows": "matplotlib.collections"
  },
  "type": "import"
 },
 "pycalphad.plot.eqplot.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.plot.eqplot.phase_legend": {
  "data": {
   "shadows": "pycalphad.plot.utils.phase_legend"
  },
  "type": "import"
 },
 "pycalphad.plot.eqplot.plt": {
  "data": {
   "shadows": "matplotlib.pyplot"
  },
  "type": "import"
 },
 "pycalphad.plot.eqplot.unpack_condition": {
  "data": {
   "shadows": "pycalphad.core.utils.unpack_condition"
  },
  "type": "import"
 },
 "pycalphad.plot.eqplot.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.plot.ternary": {
  "data": {},
  "type": "module"
 },
 "pycalphad.plot.ternary.eqplot": {
  "data": {
   "shadows": "pycalphad.plot.eqplot.eqplot"
  },
  "type": "import"
 },
 "pycalphad.plot.ternary.equilibrium": {
  "data": {
   "shadows": "pycalphad.equilibrium"
  },
  "type": "import"
 },
 "pycalphad.plot.ternary.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.plot.ternary.ternplot": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "isinstance",
    "len",
    "numpy.atleast_1d",
    "pycalphad.equilibrium",
    "pycalphad.plot.eqplot.eqplot",
    "pycalphad.variables.Composition",
    "pycalphad.variables.StateVariable",
    "type"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.ternary.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular": {
  "data": {
   "symbols_in_volume": [
    "matplotlib.projections.register_projection",
    "pycalphad.plot.triangular.TriangularAxes"
   ]
  },
  "type": "module"
 },
 "pycalphad.plot.triangular.Affine2D": {
  "data": {
   "shadows": "matplotlib.transforms.Affine2D"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular.Axes": {
  "data": {
   "shadows": "matplotlib.axes.Axes"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular.BboxTransformTo": {
  "data": {
   "shadows": "matplotlib.transforms.BboxTransformTo"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular.FixedLocator": {
  "data": {
   "shadows": "matplotlib.ticker.FixedLocator"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular.Formatter": {
  "data": {
   "shadows": "matplotlib.ticker.Formatter"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular.IdentityTransform": {
  "data": {
   "shadows": "matplotlib.transforms.IdentityTransform"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular.NullLocator": {
  "data": {
   "shadows": "matplotlib.ticker.NullLocator"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular.Polygon": {
  "data": {
   "shadows": "matplotlib.patches.Polygon"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular.TriangularAxes": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "matplotlib.axes.Axes"
   ]
  },
  "type": "class"
 },
 "pycalphad.plot.triangular.TriangularAxes.__init__": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "matplotlib.axes.Axes.__init__"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes._gen_axes_patch": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "matplotlib.patches.Polygon",
    "numpy.sqrt"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes._gen_axes_spines": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "matplotlib.spines.Spine.linear_spine"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes._init_axis": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "matplotlib.axis.XAxis",
    "matplotlib.axis.YAxis"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes._set_lim_and_transforms": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "matplotlib.transforms.Affine2D",
    "matplotlib.transforms.Affine2D.from_values",
    "matplotlib.transforms.BboxTransformTo",
    "matplotlib.transforms.IdentityTransform",
    "numpy.sqrt"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.can_zoom": {
  "data": {
   "lineno": 188
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.cla": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "matplotlib.axes.Axes.cla",
    "matplotlib.axes.Axes.set_xlim",
    "matplotlib.axes.Axes.set_ylim",
    "matplotlib.ticker.NullLocator",
    "numpy.arange"
   ]
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.drag_pan": {
  "data": {
   "lineno": 197
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.end_pan": {
  "data": {
   "lineno": 195
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_xaxis_text1_transform": {
  "data": {
   "lineno": 150
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_xaxis_text2_transform": {
  "data": {
   "lineno": 153
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_xaxis_transform": {
  "data": {
   "lineno": 146
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_yaxis_text1_transform": {
  "data": {
   "lineno": 160
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_yaxis_text2_transform": {
  "data": {
   "lineno": 163
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.get_yaxis_transform": {
  "data": {
   "lineno": 156
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.TriangularAxes.start_pan": {
  "data": {
   "lineno": 193
  },
  "type": "function"
 },
 "pycalphad.plot.triangular.maxis": {
  "data": {
   "shadows": "matplotlib.axis"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular.mspines": {
  "data": {
   "shadows": "matplotlib.spines"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.plot.triangular.register_projection": {
  "data": {
   "shadows": "matplotlib.projections.register_projection"
  },
  "type": "import"
 },
 "pycalphad.plot.utils": {
  "data": {},
  "type": "module"
 },
 "pycalphad.plot.utils.mpatches": {
  "data": {
   "shadows": "matplotlib.patches"
  },
  "type": "import"
 },
 "pycalphad.plot.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pycalphad.plot.utils.phase_legend": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "len",
    "matplotlib.patches.Patch",
    "numpy.mod"
   ]
  },
  "type": "function"
 },
 "pycalphad.pycalphad.core.patched_piecewise": {
  "data": {
   "shadows": "pycalphad.core.patched_piecewise"
  },
  "type": "import"
 },
 "pycalphad.pycalphad.io.tdb": {
  "data": {
   "shadows": "pycalphad.io.tdb"
  },
  "type": "import"
 },
 "pycalphad.refdata": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "pycalphad.sympy.functions.elementary.piecewise": {
  "data": {
   "shadows": "sympy.functions.elementary.piecewise"
  },
  "type": "import"
 },
 "pycalphad.ternplot": {
  "data": {
   "shadows": "pycalphad.plot.ternary.ternplot"
  },
  "type": "import"
 },
 "pycalphad.v": {
  "data": {
   "shadows": "pycalphad.variables"
  },
  "type": "import"
 },
 "pycalphad.variables": {
  "data": {
   "symbols_in_volume": [
    "pycalphad.variables.ChemicalPotential",
    "pycalphad.variables.Composition",
    "pycalphad.variables.PhaseFraction",
    "pycalphad.variables.SiteFraction",
    "pycalphad.variables.StateVariable",
    "pycalphad.variables.sys",
    "str",
    "sympy.Float"
   ]
  },
  "type": "module"
 },
 "pycalphad.variables.CONDITIONS_REQUIRING_HESSIANS": {
  "data": {
   "lineno": 251
  },
  "type": "constant"
 },
 "pycalphad.variables.ChemicalPotential": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "pycalphad.variables.StateVariable"
   ]
  },
  "type": "class"
 },
 "pycalphad.variables.ChemicalPotential.__getnewargs__": {
  "data": {
   "lineno": 230
  },
  "type": "function"
 },
 "pycalphad.variables.ChemicalPotential.__new__": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "pycalphad.variables.Species",
    "pycalphad.variables.StateVariable"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.ChemicalPotential.__str__": {
  "data": {
   "lineno": 237
  },
  "type": "function"
 },
 "pycalphad.variables.ChemicalPotential._latex": {
  "data": {
   "lineno": 233
  },
  "type": "function"
 },
 "pycalphad.variables.Composition": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "pycalphad.variables.StateVariable"
   ]
  },
  "type": "class"
 },
 "pycalphad.variables.Composition.__getnewargs__": {
  "data": {
   "lineno": 204
  },
  "type": "function"
 },
 "pycalphad.variables.Composition.__new__": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "pycalphad.variables.Species",
    "pycalphad.variables.StateVariable"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.Composition._latex": {
  "data": {
   "lineno": 210
  },
  "type": "function"
 },
 "pycalphad.variables.Float": {
  "data": {
   "shadows": "sympy.Float"
  },
  "type": "import"
 },
 "pycalphad.variables.MU": {
  "data": {
   "lineno": 248
  },
  "type": "constant"
 },
 "pycalphad.variables.PhaseFraction": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "pycalphad.variables.StateVariable"
   ]
  },
  "type": "class"
 },
 "pycalphad.variables.PhaseFraction.__getnewargs__": {
  "data": {
   "lineno": 166
  },
  "type": "function"
 },
 "pycalphad.variables.PhaseFraction.__new__": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "pycalphad.variables.StateVariable",
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.PhaseFraction._latex": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.SiteFraction": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "pycalphad.variables.StateVariable"
   ]
  },
  "type": "class"
 },
 "pycalphad.variables.SiteFraction.__getnewargs__": {
  "data": {
   "lineno": 138
  },
  "type": "function"
 },
 "pycalphad.variables.SiteFraction.__new__": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "pycalphad.variables.Species",
    "pycalphad.variables.StateVariable",
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.SiteFraction.__str__": {
  "data": {
   "lineno": 147
  },
  "type": "function"
 },
 "pycalphad.variables.SiteFraction._latex": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.Species": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pycalphad.variables.Species.__eq__": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "isinstance"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.Species.__getnewargs__": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "pycalphad.variables.Species.__hash__": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.Species.__lt__": {
  "data": {
   "lineno": 79
  },
  "type": "function"
 },
 "pycalphad.variables.Species.__ne__": {
  "data": {
   "lineno": 76
  },
  "type": "function"
 },
 "pycalphad.variables.Species.__new__": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "dict",
    "isinstance",
    "object.__new__",
    "pycalphad.io.grammar.parse_chemical_formula",
    "pycalphad.variables.string_type"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.Species.__repr__": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.Species.__str__": {
  "data": {
   "lineno": 82
  },
  "type": "function"
 },
 "pycalphad.variables.Species.escaped_name": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "property",
    "str"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.Species.number_of_atoms": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "property",
    "sum"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.Species.weight": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.StateVariable": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "sympy.Symbol"
   ]
  },
  "type": "class"
 },
 "pycalphad.variables.StateVariable.__new__": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "sympy.Symbol.__new__"
   ]
  },
  "type": "function"
 },
 "pycalphad.variables.Symbol": {
  "data": {
   "shadows": "sympy.Symbol"
  },
  "type": "import"
 },
 "pycalphad.variables.X": {
  "data": {
   "lineno": 247
  },
  "type": "constant"
 },
 "pycalphad.variables.parse_chemical_formula": {
  "data": {
   "shadows": "pycalphad.io.grammar.parse_chemical_formula"
  },
  "type": "import"
 },
 "pycalphad.variables.string_type": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "pycalphad.variables.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "pycalphad.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 }
}