{
 "dipy": {
  "data": {
   "symbols_in_volume": {
    "dipy.sys": {
     "line number": [
      51
     ]
    },
    "numpy.testing.Tester": {
     "line number": [
      42,
      43,
      44
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.__config__": {
  "data": {},
  "type": "module"
 },
 "dipy.__config__.HAVE_OPENMP": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "dipy.__config__.USING_GCC_SSE2": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "dipy._get_pkg_info": {
  "data": {
   "shadows": "get_pkg_info"
  },
  "type": "import"
 },
 "dipy.align": {
  "data": {
   "symbols_in_volume": {
    "dipy.align.Bunch": {
     "line number": [
      13
     ]
    },
    "numpy.float32": {
     "line number": [
      2
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.Bunch": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.Bunch.__init__": {
  "data": {
   "lineno": 5
  },
  "type": "function"
 },
 "dipy.align.VerbosityLevels": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "dipy.align.floating": {
  "data": {
   "lineno": 2
  },
  "type": "constant"
 },
 "dipy.align.imaffine": {
  "data": {
   "symbols_in_volume": {
    "dipy.align.imaffine._transform_method": {
     "line number": [
      63,
      64,
      65,
      66
     ]
    },
    "dipy.align.vector_fields.transform_2d_affine": {
     "line number": [
      65
     ]
    },
    "dipy.align.vector_fields.transform_2d_affine_nn": {
     "line number": [
      63
     ]
    },
    "dipy.align.vector_fields.transform_3d_affine": {
     "line number": [
      66
     ]
    },
    "dipy.align.vector_fields.transform_3d_affine_nn": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.imaffine.AffineInvalidValuesError": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.imaffine.AffineInversionError": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.imaffine.AffineMap": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "object": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.imaffine.AffineMap.__format__": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      243
     ]
    },
    "isinstance": {
     "line number": [
      227
     ]
    },
    "str": {
     "line number": [
      226,
      227,
      230,
      233,
      238
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.AffineMap.__init__": {
  "data": {
   "lineno": 80
  },
  "type": "function"
 },
 "dipy.align.imaffine.AffineMap.__repr__": {
  "data": {
   "lineno": 217
  },
  "type": "function"
 },
 "dipy.align.imaffine.AffineMap.__str__": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": {
    "str": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.AffineMap._apply_transform": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      306,
      316,
      324
     ]
    },
    "dipy.align.imaffine._interp_options": {
     "line number": [
      305
     ]
    },
    "dipy.align.imaffine._transform_method": {
     "line number": [
      359
     ]
    },
    "len": {
     "line number": [
      318,
      322
     ]
    },
    "numpy.array": {
     "line number": [
      319
     ]
    },
    "numpy.eye": {
     "line number": [
      333,
      342
     ]
    },
    "numpy.float64": {
     "line number": [
      358
     ]
    },
    "numpy.int32": {
     "line number": [
      319
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      343
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.AffineMap.get_affine": {
  "data": {
   "lineno": 141
  },
  "type": "function"
 },
 "dipy.align.imaffine.AffineMap.set_affine": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      177
     ]
    },
    "TypeError": {
     "line number": [
      178
     ]
    },
    "dipy.align.imaffine.AffineInvalidValuesError": {
     "line number": [
      189,
      195,
      201
     ]
    },
    "dipy.align.imaffine.AffineInversionError": {
     "line number": [
      182,
      185,
      210
     ]
    },
    "dipy.align.imaffine._number_dim_affine_matrix": {
     "line number": [
      181
     ]
    },
    "len": {
     "line number": [
      181
     ]
    },
    "numpy.all": {
     "line number": [
      188,
      194
     ]
    },
    "numpy.array": {
     "line number": [
      176
     ]
    },
    "numpy.isfinite": {
     "line number": [
      188
     ]
    },
    "numpy.linalg.LinAlgError": {
     "line number": [
      209
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      208
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.AffineMap.transform": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      409
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.AffineMap.transform_inverse": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      458
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.AffineRegistration": {
  "data": {
   "lineno": 783,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.STATUS": {
     "line number": [
      877
     ]
    },
    "object": {
     "line number": [
      783
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.imaffine.AffineRegistration.__init__": {
  "data": {
   "lineno": 785,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      846
     ]
    },
    "dipy.align.VerbosityLevels.STATUS": {
     "line number": [
      793
     ]
    },
    "dipy.align.imaffine.MutualInformationMetric": {
     "line number": [
      839
     ]
    },
    "len": {
     "line number": [
      844
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.AffineRegistration._init_optimizer": {
  "data": {
   "lineno": 881,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      947,
      952
     ]
    },
    "dipy.align.imaffine.transform_centers_of_mass": {
     "line number": [
      931
     ]
    },
    "dipy.align.imaffine.transform_geometric_centers": {
     "line number": [
      941
     ]
    },
    "dipy.align.imaffine.transform_origins": {
     "line number": [
      937
     ]
    },
    "dipy.align.imwarp.ScaleSpace": {
     "line number": [
      976,
      980
     ]
    },
    "dipy.align.imwarp.get_direction_and_spacings": {
     "line number": [
      955,
      957
     ]
    },
    "dipy.align.scalespace.IsotropicScaleSpace": {
     "line number": [
      966,
      971
     ]
    },
    "isinstance": {
     "line number": [
      929,
      948
     ]
    },
    "len": {
     "line number": [
      919
     ]
    },
    "numpy.eye": {
     "line number": [
      928
     ]
    },
    "numpy.float64": {
     "line number": [
      959,
      961
     ]
    },
    "numpy.ndarray": {
     "line number": [
      948
     ]
    },
    "str": {
     "line number": [
      929
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.AffineRegistration.optimize": {
  "data": {
   "lineno": 984,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.STATUS": {
     "line number": [
      1060
     ]
    },
    "dipy.align.imaffine.AffineMap": {
     "line number": [
      1051,
      1067
     ]
    },
    "dipy.core.optimize.Optimizer": {
     "line number": [
      1093
     ]
    },
    "print": {
     "line number": [
      1061
     ]
    },
    "range": {
     "line number": [
      1057
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.IsotropicScaleSpace": {
  "data": {
   "shadows": "dipy.align.scalespace.IsotropicScaleSpace"
  },
  "type": "import"
 },
 "dipy.align.imaffine.MutualInformationMetric": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": {
    "object": {
     "line number": [
      461
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.imaffine.MutualInformationMetric.__init__": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": {
    "dipy.align.parzenhist.ParzenJointHistogram": {
     "line number": [
      495
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.MutualInformationMetric._update_histogram": {
  "data": {
   "lineno": 589,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      626
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.MutualInformationMetric._update_mutual_information": {
  "data": {
   "lineno": 632,
   "symbols_in_volume": {
    "dipy.align.parzenhist.compute_parzen_mi": {
     "line number": [
      703
     ]
    },
    "dipy.align.vector_fields.gradient": {
     "line number": [
      676
     ]
    },
    "dipy.align.vector_fields.sparse_gradient": {
     "line number": [
      693
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.MutualInformationMetric.distance": {
  "data": {
   "lineno": 707,
   "symbols_in_volume": {
    "dipy.align.imaffine.AffineInvalidValuesError": {
     "line number": [
      730
     ]
    },
    "dipy.align.imaffine.AffineInversionError": {
     "line number": [
      730
     ]
    },
    "numpy.inf": {
     "line number": [
      731
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.MutualInformationMetric.distance_and_gradient": {
  "data": {
   "lineno": 756,
   "symbols_in_volume": {
    "dipy.align.imaffine.AffineInvalidValuesError": {
     "line number": [
      778
     ]
    },
    "dipy.align.imaffine.AffineInversionError": {
     "line number": [
      778
     ]
    },
    "numpy.inf": {
     "line number": [
      779
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.MutualInformationMetric.gradient": {
  "data": {
   "lineno": 734,
   "symbols_in_volume": {
    "dipy.align.imaffine.AffineInvalidValuesError": {
     "line number": [
      752
     ]
    },
    "dipy.align.imaffine.AffineInversionError": {
     "line number": [
      752
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.MutualInformationMetric.setup": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": {
    "dipy.align.imaffine.AffineMap": {
     "line number": [
      558
     ]
    },
    "dipy.align.imwarp.get_direction_and_spacings": {
     "line number": [
      549,
      551
     ]
    },
    "dipy.align.parzenhist.sample_domain_regular": {
     "line number": [
      572
     ]
    },
    "dipy.core.interpolation.interpolate_scalar_2d": {
     "line number": [
      562
     ]
    },
    "dipy.core.interpolation.interpolate_scalar_3d": {
     "line number": [
      564
     ]
    },
    "int": {
     "line number": [
      570
     ]
    },
    "len": {
     "line number": [
      536
     ]
    },
    "numpy.array": {
     "line number": [
      542,
      543,
      571,
      573,
      586
     ]
    },
    "numpy.ceil": {
     "line number": [
      570
     ]
    },
    "numpy.eye": {
     "line number": [
      538,
      540,
      554
     ]
    },
    "numpy.float64": {
     "line number": [
      535,
      542,
      543,
      586
     ]
    },
    "numpy.hstack": {
     "line number": [
      576
     ]
    },
    "numpy.int32": {
     "line number": [
      571
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      545,
      547
     ]
    },
    "numpy.ones": {
     "line number": [
      576
     ]
    },
    "numpy.zeros": {
     "line number": [
      535
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.Optimizer": {
  "data": {
   "shadows": "dipy.core.optimize.Optimizer"
  },
  "type": "import"
 },
 "dipy.align.imaffine.ParzenJointHistogram": {
  "data": {
   "shadows": "dipy.align.parzenhist.ParzenJointHistogram"
  },
  "type": "import"
 },
 "dipy.align.imaffine.ScaleSpace": {
  "data": {
   "shadows": "dipy.align.imwarp.ScaleSpace"
  },
  "type": "import"
 },
 "dipy.align.imaffine.VerbosityLevels": {
  "data": {
   "shadows": "dipy.align.VerbosityLevels"
  },
  "type": "import"
 },
 "dipy.align.imaffine._interp_options": {
  "data": {
   "lineno": 61
  },
  "type": "constant"
 },
 "dipy.align.imaffine._number_dim_affine_matrix": {
  "data": {
   "lineno": 67
  },
  "type": "constant"
 },
 "dipy.align.imaffine._transform_method": {
  "data": {
   "lineno": 62
  },
  "type": "constant"
 },
 "dipy.align.imaffine.compute_parzen_mi": {
  "data": {
   "shadows": "dipy.align.parzenhist.compute_parzen_mi"
  },
  "type": "import"
 },
 "dipy.align.imaffine.get_direction_and_spacings": {
  "data": {
   "shadows": "dipy.align.imwarp.get_direction_and_spacings"
  },
  "type": "import"
 },
 "dipy.align.imaffine.interpolate_scalar_2d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_scalar_2d"
  },
  "type": "import"
 },
 "dipy.align.imaffine.interpolate_scalar_3d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_scalar_3d"
  },
  "type": "import"
 },
 "dipy.align.imaffine.ndimage": {
  "data": {
   "shadows": "scipy.ndimage"
  },
  "type": "import"
 },
 "dipy.align.imaffine.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.imaffine.npl": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "dipy.align.imaffine.sample_domain_regular": {
  "data": {
   "shadows": "dipy.align.parzenhist.sample_domain_regular"
  },
  "type": "import"
 },
 "dipy.align.imaffine.transform_centers_of_mass": {
  "data": {
   "lineno": 1112,
   "symbols_in_volume": {
    "dipy.align.imaffine.AffineMap": {
     "line number": [
      1146
     ]
    },
    "len": {
     "line number": [
      1135
     ]
    },
    "numpy.array": {
     "line number": [
      1140,
      1142
     ]
    },
    "numpy.eye": {
     "line number": [
      1137,
      1139,
      1144
     ]
    },
    "scipy.ndimage.measurements.center_of_mass": {
     "line number": [
      1140,
      1142
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.transform_geometric_centers": {
  "data": {
   "lineno": 1152,
   "symbols_in_volume": {
    "dipy.align.imaffine.AffineMap": {
     "line number": [
      1189
     ]
    },
    "len": {
     "line number": [
      1178
     ]
    },
    "numpy.array": {
     "line number": [
      1183,
      1185
     ]
    },
    "numpy.eye": {
     "line number": [
      1180,
      1182,
      1187
     ]
    },
    "numpy.float64": {
     "line number": [
      1183,
      1185
     ]
    },
    "tuple": {
     "line number": [
      1183,
      1185
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.transform_origins": {
  "data": {
   "lineno": 1195,
   "symbols_in_volume": {
    "dipy.align.imaffine.AffineMap": {
     "line number": [
      1230
     ]
    },
    "len": {
     "line number": [
      1221
     ]
    },
    "numpy.eye": {
     "line number": [
      1223,
      1225,
      1228
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imaffine.vf": {
  "data": {
   "shadows": "dipy.align.vector_fields"
  },
  "type": "import"
 },
 "dipy.align.imaffine.warn": {
  "data": {
   "shadows": "warnings.warn"
  },
  "type": "import"
 },
 "dipy.align.imwarp": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      40
     ]
    },
    "dipy.align.Bunch": {
     "line number": [
      16
     ]
    },
    "dipy.align.imwarp.logging": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.imwarp.Bunch": {
  "data": {
   "shadows": "dipy.align.Bunch"
  },
  "type": "import"
 },
 "dipy.align.imwarp.DiffeomorphicMap": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "object": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.imwarp.DiffeomorphicMap.__init__": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      157
     ]
    },
    "numpy.asarray": {
     "line number": [
      159,
      172,
      184
     ]
    },
    "numpy.int32": {
     "line number": [
      159,
      172,
      184
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      166,
      177,
      189,
      195
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap._get_warping_function": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": {
    "dipy.align.vector_fields.warp_2d": {
     "line number": [
      269
     ]
    },
    "dipy.align.vector_fields.warp_2d_nn": {
     "line number": [
      271
     ]
    },
    "dipy.align.vector_fields.warp_3d": {
     "line number": [
      274
     ]
    },
    "dipy.align.vector_fields.warp_3d_nn": {
     "line number": [
      276
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap._warp_backward": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      462
     ]
    },
    "dipy.align.floating": {
     "line number": [
      487,
      488,
      492
     ]
    },
    "dipy.align.imwarp.mult_aff": {
     "line number": [
      475,
      480,
      480,
      484
     ]
    },
    "numpy.asarray": {
     "line number": [
      492
     ]
    },
    "numpy.dtype": {
     "line number": [
      487,
      489
     ]
    },
    "numpy.float32": {
     "line number": [
      487
     ]
    },
    "numpy.int32": {
     "line number": [
      490
     ]
    },
    "warp_f": {
     "line number": [
      494,
      496
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap._warp_forward": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      347
     ]
    },
    "dipy.align.floating": {
     "line number": [
      376,
      377,
      381
     ]
    },
    "dipy.align.imwarp.mult_aff": {
     "line number": [
      363,
      363,
      368,
      368
     ]
    },
    "numpy.asarray": {
     "line number": [
      351,
      381
     ]
    },
    "numpy.dtype": {
     "line number": [
      376,
      378
     ]
    },
    "numpy.float32": {
     "line number": [
      376
     ]
    },
    "numpy.int32": {
     "line number": [
      351,
      379
     ]
    },
    "warp_f": {
     "line number": [
      385
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.allocate": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      257,
      259
     ]
    },
    "numpy.zeros": {
     "line number": [
      256,
      258
     ]
    },
    "tuple": {
     "line number": [
      256,
      258
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error": {
  "data": {
   "lineno": 650,
   "symbols_in_volume": {
    "compose_f": {
     "line number": [
      684
     ]
    },
    "dipy.align.vector_fields.compose_vector_fields_2d": {
     "line number": [
      680
     ]
    },
    "dipy.align.vector_fields.compose_vector_fields_3d": {
     "line number": [
      682
     ]
    },
    "numpy.asarray": {
     "line number": [
      687,
      687
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.expand_fields": {
  "data": {
   "lineno": 617,
   "symbols_in_volume": {
    "dipy.align.imwarp.mult_aff": {
     "line number": [
      641
     ]
    },
    "dipy.align.vector_fields.resample_displacement_field_2d": {
     "line number": [
      633
     ]
    },
    "dipy.align.vector_fields.resample_displacement_field_3d": {
     "line number": [
      635
     ]
    },
    "expand_f": {
     "line number": [
      637,
      638
     ]
    },
    "numpy.append": {
     "line number": [
      640
     ]
    },
    "numpy.diag": {
     "line number": [
      642
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      643
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.get_backward_field": {
  "data": {
   "lineno": 239
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.get_forward_field": {
  "data": {
   "lineno": 227
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform": {
  "data": {
   "lineno": 770,
   "symbols_in_volume": {
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      820
     ]
    },
    "dipy.align.imwarp.mult_aff": {
     "line number": [
      794,
      794,
      799,
      799,
      814,
      815,
      815,
      816
     ]
    },
    "dipy.align.vector_fields.simplify_warp_function_2d": {
     "line number": [
      782
     ]
    },
    "dipy.align.vector_fields.simplify_warp_function_3d": {
     "line number": [
      784
     ]
    },
    "simplify_f": {
     "line number": [
      805,
      817
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.interpret_matrix": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      225
     ]
    },
    "isinstance": {
     "line number": [
      221,
      223
     ]
    },
    "numpy.ndarray": {
     "line number": [
      221
     ]
    },
    "str": {
     "line number": [
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.inverse": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": {
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      604
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.shallow_copy": {
  "data": {
   "lineno": 689,
   "symbols_in_volume": {
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      701
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.transform": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      537,
      545
     ]
    },
    "numpy.int32": {
     "line number": [
      537
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.transform_inverse": {
  "data": {
   "lineno": 547,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      590
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism": {
  "data": {
   "lineno": 714,
   "symbols_in_volume": {
    "compose_f": {
     "line number": [
      757,
      759,
      761,
      762
     ]
    },
    "dipy.align.vector_fields.compose_vector_fields_2d": {
     "line number": [
      757
     ]
    },
    "dipy.align.vector_fields.compose_vector_fields_3d": {
     "line number": [
      759
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicRegistration": {
  "data": {
   "lineno": 833,
   "symbols_in_volume": {
    "dipy.align.imwarp.abc": {
     "line number": [
      833
     ]
    },
    "object": {
     "line number": [
      833
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.imwarp.DiffeomorphicRegistration.__init__": {
  "data": {
   "lineno": 834,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      848
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicRegistration.get_map": {
  "data": {
   "lineno": 877,
   "symbols_in_volume": {
    "dipy.align.imwarp.abc": {
     "line number": [
      877
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicRegistration.optimize": {
  "data": {
   "lineno": 868,
   "symbols_in_volume": {
    "dipy.align.imwarp.abc": {
     "line number": [
      868
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters": {
  "data": {
   "lineno": 852,
   "symbols_in_volume": {
    "len": {
     "line number": [
      865
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.RegistrationStages": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "dipy.align.imwarp.ScaleSpace": {
  "data": {
   "shadows": "dipy.align.scalespace.ScaleSpace"
  },
  "type": "import"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
  "data": {
   "lineno": 884,
   "symbols_in_volume": {
    "dipy.align.imwarp.DiffeomorphicRegistration": {
     "line number": [
      884
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__init__": {
  "data": {
   "lineno": 885,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      933
     ]
    },
    "dipy.align.VerbosityLevels.STATUS": {
     "line number": [
      944
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      928
     ]
    },
    "len": {
     "line number": [
      932
     ]
    },
    "super": {
     "line number": [
      928
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__invert_models": {
  "data": {
   "lineno": 1293,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1307,
      1315,
      1323,
      1331
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__set_no_boundary_displacement": {
  "data": {
   "lineno": 1271
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration._approximate_derivative_direct": {
  "data": {
   "lineno": 1338,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1363
     ]
    },
    "numpy.asarray": {
     "line number": [
      1357,
      1358
     ]
    },
    "numpy.linalg.solve": {
     "line number": [
      1362
     ]
    },
    "numpy.ones_like": {
     "line number": [
      1359
     ]
    },
    "numpy.row_stack": {
     "line number": [
      1359
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration._connect_functions": {
  "data": {
   "lineno": 1002,
   "symbols_in_volume": {
    "dipy.align.vector_fields.compose_vector_fields_2d": {
     "line number": [
      1011
     ]
    },
    "dipy.align.vector_fields.compose_vector_fields_3d": {
     "line number": [
      1014
     ]
    },
    "dipy.align.vector_fields.invert_vector_field_fixed_point_2d": {
     "line number": [
      1010
     ]
    },
    "dipy.align.vector_fields.invert_vector_field_fixed_point_3d": {
     "line number": [
      1013
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration._end_optimizer": {
  "data": {
   "lineno": 1139
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration._get_energy_derivative": {
  "data": {
   "lineno": 1367,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1375
     ]
    },
    "len": {
     "line number": [
      1373
     ]
    },
    "range": {
     "line number": [
      1376
     ]
    },
    "sum": {
     "line number": [
      1378
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration._init_optimizer": {
  "data": {
   "lineno": 1016,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      1082
     ]
    },
    "dipy.align.VerbosityLevels.DIAGNOSE": {
     "line number": [
      1061
     ]
    },
    "dipy.align.VerbosityLevels.STATUS": {
     "line number": [
      1064,
      1073
     ]
    },
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      1107,
      1129
     ]
    },
    "dipy.align.imwarp.get_direction_and_spacings": {
     "line number": [
      1050,
      1052
     ]
    },
    "dipy.align.imwarp.logger": {
     "line number": [
      1062,
      1065,
      1074,
      1083,
      1087
     ]
    },
    "dipy.align.scalespace.ScaleSpace": {
     "line number": [
      1069,
      1078
     ]
    },
    "numpy.eye": {
     "line number": [
      1055,
      1056
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      1126
     ]
    },
    "range": {
     "line number": [
      1084,
      1088
     ]
    },
    "str": {
     "line number": [
      1062
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration._iterate": {
  "data": {
   "lineno": 1145,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DIAGNOSE": {
     "line number": [
      1253
     ]
    },
    "dipy.align.imwarp.RegistrationStages": {
     "line number": [
      1207,
      1266
     ]
    },
    "dipy.align.imwarp.logger": {
     "line number": [
      1255
     ]
    },
    "len": {
     "line number": [
      1249,
      1250
     ]
    },
    "numpy.array": {
     "line number": [
      1210,
      1230
     ]
    },
    "numpy.inf": {
     "line number": [
      1248
     ]
    },
    "numpy.isnan": {
     "line number": [
      1254
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1216,
      1236
     ]
    },
    "numpy.sum": {
     "line number": [
      1216,
      1236
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration._optimize": {
  "data": {
   "lineno": 1385,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DIAGNOSE": {
     "line number": [
      1429,
      1435,
      1445
     ]
    },
    "dipy.align.VerbosityLevels.STATUS": {
     "line number": [
      1394
     ]
    },
    "dipy.align.imwarp.RegistrationStages": {
     "line number": [
      1392,
      1414,
      1424,
      1449
     ]
    },
    "dipy.align.imwarp.logger": {
     "line number": [
      1395,
      1430,
      1436,
      1446
     ]
    },
    "numpy.inf": {
     "line number": [
      1411
     ]
    },
    "range": {
     "line number": [
      1393
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map": {
  "data": {
   "lineno": 995
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize": {
  "data": {
   "lineno": 1451,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      1488
     ]
    },
    "dipy.align.floating": {
     "line number": [
      1492,
      1492
     ]
    },
    "dipy.align.imwarp.logger": {
     "line number": [
      1490
     ]
    },
    "numpy.array": {
     "line number": [
      1496,
      1497
     ]
    },
    "str": {
     "line number": [
      1490
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update": {
  "data": {
   "lineno": 952,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      984,
      993,
      993
     ]
    },
    "numpy.sqrt": {
     "line number": [
      985
     ]
    },
    "numpy.sum": {
     "line number": [
      984
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.VerbosityLevels": {
  "data": {
   "shadows": "dipy.align.VerbosityLevels"
  },
  "type": "import"
 },
 "dipy.align.imwarp.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "dipy.align.imwarp.floating": {
  "data": {
   "shadows": "dipy.align.floating"
  },
  "type": "import"
 },
 "dipy.align.imwarp.get_direction_and_spacings": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "nibabel.Nifti1Image": {
     "line number": [
      95
     ]
    },
    "numpy.asarray": {
     "line number": [
      96,
      97
     ]
    },
    "numpy.diag": {
     "line number": [
      99
     ]
    },
    "numpy.eye": {
     "line number": [
      88,
      91
     ]
    },
    "numpy.float64": {
     "line number": [
      97
     ]
    },
    "numpy.ones": {
     "line number": [
      88
     ]
    },
    "numpy.zeros": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.imwarp.logger": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "dipy.align.imwarp.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.align.imwarp.mult_aff": {
  "data": {
   "lineno": 42
  },
  "type": "function"
 },
 "dipy.align.imwarp.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.align.imwarp.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.imwarp.npl": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "dipy.align.imwarp.vfu": {
  "data": {
   "shadows": "dipy.align.vector_fields"
  },
  "type": "import"
 },
 "dipy.align.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.reslice": {
  "data": {},
  "type": "module"
 },
 "dipy.align.reslice.Pool": {
  "data": {
   "shadows": "multiprocessing.Pool"
  },
  "type": "import"
 },
 "dipy.align.reslice._affine_transform": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      11
     ]
    },
    "dipy.align.reslice.warnings": {
     "line number": [
      9,
      10
     ]
    },
    "scipy.ndimage.affine_transform": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.reslice.affine_transform": {
  "data": {
   "shadows": "scipy.ndimage.affine_transform"
  },
  "type": "import"
 },
 "dipy.align.reslice.cpu_count": {
  "data": {
   "shadows": "multiprocessing.cpu_count"
  },
  "type": "import"
 },
 "dipy.align.reslice.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.reslice.reslice": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      76
     ]
    },
    "dipy.align.reslice._affine_transform": {
     "line number": [
      101
     ]
    },
    "dipy.align.reslice.warnings": {
     "line number": [
      74,
      75
     ]
    },
    "enumerate": {
     "line number": [
      101
     ]
    },
    "multiprocessing.Pool": {
     "line number": [
      100
     ]
    },
    "multiprocessing.cpu_count": {
     "line number": [
      89
     ]
    },
    "numpy.array": {
     "line number": [
      77,
      78,
      80
     ]
    },
    "numpy.diag": {
     "line number": [
      106
     ]
    },
    "numpy.dot": {
     "line number": [
      107
     ]
    },
    "numpy.eye": {
     "line number": [
      105
     ]
    },
    "numpy.round": {
     "line number": [
      81
     ]
    },
    "numpy.zeros": {
     "line number": [
      87
     ]
    },
    "range": {
     "line number": [
      91,
      96
     ]
    },
    "scipy.ndimage.affine_transform": {
     "line number": [
      85,
      92
     ]
    },
    "tuple": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.reslice.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.align.scalespace": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      7
     ]
    },
    "dipy.align.scalespace.logging": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.scalespace.IsotropicScaleSpace": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "dipy.align.scalespace.ScaleSpace": {
     "line number": [
      314
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.scalespace.IsotropicScaleSpace.__init__": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      353
     ]
    },
    "dipy.align.floating": {
     "line number": [
      366,
      419
     ]
    },
    "len": {
     "line number": [
      350,
      351,
      352
     ]
    },
    "numpy.abs": {
     "line number": [
      393,
      396
     ]
    },
    "numpy.append": {
     "line number": [
      402
     ]
    },
    "numpy.argmin": {
     "line number": [
      381
     ]
    },
    "numpy.array": {
     "line number": [
      354
     ]
    },
    "numpy.asarray": {
     "line number": [
      356
     ]
    },
    "numpy.diag": {
     "line number": [
      404,
      406
     ]
    },
    "numpy.float64": {
     "line number": [
      359,
      411,
      413
     ]
    },
    "numpy.int32": {
     "line number": [
      356,
      367,
      369,
      407
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      376,
      424
     ]
    },
    "numpy.ones": {
     "line number": [
      369,
      371,
      373,
      408
     ]
    },
    "numpy.zeros": {
     "line number": [
      384,
      385
     ]
    },
    "range": {
     "line number": [
      382,
      388,
      394
     ]
    },
    "scipy.ndimage.filters.gaussian_filter": {
     "line number": [
      411
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.scalespace.ScaleSpace": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "object": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.scalespace.ScaleSpace.__init__": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      60,
      106
     ]
    },
    "len": {
     "line number": [
      47
     ]
    },
    "numpy.append": {
     "line number": [
      89
     ]
    },
    "numpy.array": {
     "line number": [
      49
     ]
    },
    "numpy.asarray": {
     "line number": [
      51
     ]
    },
    "numpy.diag": {
     "line number": [
      91,
      93
     ]
    },
    "numpy.int32": {
     "line number": [
      51,
      61,
      63,
      95
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      70,
      111
     ]
    },
    "numpy.min": {
     "line number": [
      75
     ]
    },
    "numpy.ones": {
     "line number": [
      63,
      65
     ]
    },
    "numpy.zeros": {
     "line number": [
      67
     ]
    },
    "range": {
     "line number": [
      76
     ]
    },
    "scipy.ndimage.filters.gaussian_filter": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.scalespace.ScaleSpace._get_attribute": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      176
     ]
    },
    "str": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.scalespace.ScaleSpace.get_affine": {
  "data": {
   "lineno": 255
  },
  "type": "function"
 },
 "dipy.align.scalespace.ScaleSpace.get_affine_inv": {
  "data": {
   "lineno": 275
  },
  "type": "function"
 },
 "dipy.align.scalespace.ScaleSpace.get_domain_shape": {
  "data": {
   "lineno": 195
  },
  "type": "function"
 },
 "dipy.align.scalespace.ScaleSpace.get_expand_factors": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      135,
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.scalespace.ScaleSpace.get_image": {
  "data": {
   "lineno": 178
  },
  "type": "function"
 },
 "dipy.align.scalespace.ScaleSpace.get_scaling": {
  "data": {
   "lineno": 235
  },
  "type": "function"
 },
 "dipy.align.scalespace.ScaleSpace.get_sigmas": {
  "data": {
   "lineno": 295
  },
  "type": "function"
 },
 "dipy.align.scalespace.ScaleSpace.get_spacing": {
  "data": {
   "lineno": 215
  },
  "type": "function"
 },
 "dipy.align.scalespace.ScaleSpace.print_level": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "dipy.align.scalespace.logger": {
     "line number": [
      149,
      150,
      151,
      152,
      153
     ]
    },
    "str": {
     "line number": [
      149,
      150,
      151,
      152,
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.scalespace.filters": {
  "data": {
   "shadows": "scipy.ndimage.filters"
  },
  "type": "import"
 },
 "dipy.align.scalespace.floating": {
  "data": {
   "shadows": "dipy.align.floating"
  },
  "type": "import"
 },
 "dipy.align.scalespace.logger": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "dipy.align.scalespace.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.align.scalespace.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.scalespace.npl": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "dipy.align.tests": {
  "data": {},
  "type": "module"
 },
 "dipy.align.tests.test_crosscorr": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      217
     ]
    },
    "dipy.align.tests.test_crosscorr.test_cc_factors_2d": {
     "line number": [
      218
     ]
    },
    "dipy.align.tests.test_crosscorr.test_cc_factors_3d": {
     "line number": [
      219
     ]
    },
    "dipy.align.tests.test_crosscorr.test_compute_cc_steps_2d": {
     "line number": [
      220
     ]
    },
    "dipy.align.tests.test_crosscorr.test_compute_cc_steps_3d": {
     "line number": [
      221
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.tests.test_crosscorr.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_crosscorr.cc": {
  "data": {
   "shadows": "dipy.align.crosscorr"
  },
  "type": "import"
 },
 "dipy.align.tests.test_crosscorr.floating": {
  "data": {
   "shadows": "dipy.align.floating"
  },
  "type": "import"
 },
 "dipy.align.tests.test_crosscorr.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_crosscorr.test_cc_factors_2d": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "dipy.align.crosscorr.precompute_cc_factors_2d": {
     "line number": [
      18
     ]
    },
    "dipy.align.crosscorr.precompute_cc_factors_2d_test": {
     "line number": [
      19
     ]
    },
    "dipy.align.floating": {
     "line number": [
      13,
      14
     ]
    },
    "numpy.array": {
     "line number": [
      13,
      14
     ]
    },
    "numpy.asarray": {
     "line number": [
      18,
      19
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      20
     ]
    },
    "range": {
     "line number": [
      13,
      14
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_crosscorr.test_cc_factors_3d": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "dipy.align.crosscorr.precompute_cc_factors_3d": {
     "line number": [
      34
     ]
    },
    "dipy.align.crosscorr.precompute_cc_factors_3d_test": {
     "line number": [
      35
     ]
    },
    "dipy.align.floating": {
     "line number": [
      29,
      30
     ]
    },
    "numpy.array": {
     "line number": [
      29,
      30
     ]
    },
    "numpy.asarray": {
     "line number": [
      34,
      35
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      36
     ]
    },
    "range": {
     "line number": [
      29,
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_crosscorr.test_compute_cc_steps_2d": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "dipy.align.crosscorr.compute_cc_backward_step_2d": {
     "line number": [
      115,
      122
     ]
    },
    "dipy.align.crosscorr.compute_cc_forward_step_2d": {
     "line number": [
      100,
      107
     ]
    },
    "dipy.align.crosscorr.precompute_cc_factors_2d_test": {
     "line number": [
      86
     ]
    },
    "dipy.align.floating": {
     "line number": [
      59,
      60,
      64,
      69,
      74,
      75,
      78,
      82,
      87,
      95
     ]
    },
    "numpy.array": {
     "line number": [
      59,
      60,
      74,
      75,
      87
     ]
    },
    "numpy.asarray": {
     "line number": [
      45,
      49,
      50
     ]
    },
    "numpy.float64": {
     "line number": [
      51
     ]
    },
    "numpy.ndarray": {
     "line number": [
      51,
      95
     ]
    },
    "numpy.ones": {
     "line number": [
      52
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      63,
      68,
      77,
      81
     ]
    },
    "numpy.random.seed": {
     "line number": [
      57
     ]
    },
    "numpy.size": {
     "line number": [
      62,
      67,
      77,
      81
     ]
    },
    "numpy.sum": {
     "line number": [
      72,
      74
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      101,
      108,
      116,
      123
     ]
    },
    "range": {
     "line number": [
      49,
      50,
      102,
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_crosscorr.test_compute_cc_steps_3d": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "dipy.align.crosscorr.compute_cc_backward_step_3d": {
     "line number": [
      204,
      213
     ]
    },
    "dipy.align.crosscorr.compute_cc_forward_step_3d": {
     "line number": [
      187,
      196
     ]
    },
    "dipy.align.crosscorr.precompute_cc_factors_3d_test": {
     "line number": [
      173
     ]
    },
    "dipy.align.floating": {
     "line number": [
      146,
      147,
      151,
      156,
      161,
      162,
      165,
      169,
      174,
      182
     ]
    },
    "numpy.array": {
     "line number": [
      146,
      147,
      161,
      162,
      174
     ]
    },
    "numpy.asarray": {
     "line number": [
      131,
      135,
      136,
      137
     ]
    },
    "numpy.float64": {
     "line number": [
      138
     ]
    },
    "numpy.ndarray": {
     "line number": [
      138,
      182
     ]
    },
    "numpy.ones": {
     "line number": [
      139
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      150,
      155,
      164,
      168
     ]
    },
    "numpy.random.seed": {
     "line number": [
      145
     ]
    },
    "numpy.size": {
     "line number": [
      149,
      154,
      164,
      168
     ]
    },
    "numpy.sum": {
     "line number": [
      159,
      161
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      188,
      197,
      205,
      214
     ]
    },
    "range": {
     "line number": [
      135,
      136,
      137,
      189,
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_expectmax": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      464
     ]
    },
    "dipy.align.tests.test_expectmax.test_compute_em_demons_step_2d": {
     "line number": [
      465
     ]
    },
    "dipy.align.tests.test_expectmax.test_compute_em_demons_step_3d": {
     "line number": [
      466
     ]
    },
    "dipy.align.tests.test_expectmax.test_compute_masked_class_stats_2d": {
     "line number": [
      469
     ]
    },
    "dipy.align.tests.test_expectmax.test_compute_masked_class_stats_3d": {
     "line number": [
      470
     ]
    },
    "dipy.align.tests.test_expectmax.test_quantize_positive_2d": {
     "line number": [
      467
     ]
    },
    "dipy.align.tests.test_expectmax.test_quantize_positive_3d": {
     "line number": [
      468
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.tests.test_expectmax.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_expectmax.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_expectmax.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_expectmax.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.align.tests.test_expectmax.em": {
  "data": {
   "shadows": "dipy.align.expectmax"
  },
  "type": "import"
 },
 "dipy.align.tests.test_expectmax.floating": {
  "data": {
   "shadows": "dipy.align.floating"
  },
  "type": "import"
 },
 "dipy.align.tests.test_expectmax.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_expectmax.test_compute_em_demons_step_2d": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      112,
      113,
      119,
      120,
      126,
      127,
      133,
      134,
      140,
      141
     ]
    },
    "dipy.align.expectmax.compute_em_demons_step_2d": {
     "line number": [
      102
     ]
    },
    "dipy.align.floating": {
     "line number": [
      101,
      102,
      103,
      104
     ]
    },
    "numpy.array": {
     "line number": [
      96,
      102,
      103,
      104
     ]
    },
    "numpy.asarray": {
     "line number": [
      28,
      32,
      33
     ]
    },
    "numpy.empty_like": {
     "line number": [
      101
     ]
    },
    "numpy.float64": {
     "line number": [
      34
     ]
    },
    "numpy.inf": {
     "line number": [
      72
     ]
    },
    "numpy.ndarray": {
     "line number": [
      34
     ]
    },
    "numpy.ones": {
     "line number": [
      35
     ]
    },
    "numpy.random.randint": {
     "line number": [
      62
     ]
    },
    "numpy.random.seed": {
     "line number": [
      61
     ]
    },
    "numpy.sum": {
     "line number": [
      44,
      47
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      110,
      117,
      124,
      131,
      138
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      70
     ]
    },
    "range": {
     "line number": [
      32,
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_expectmax.test_compute_em_demons_step_3d": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      250,
      251,
      257,
      258,
      264,
      265,
      271,
      272,
      278,
      279
     ]
    },
    "dipy.align.expectmax.compute_em_demons_step_3d": {
     "line number": [
      240
     ]
    },
    "dipy.align.floating": {
     "line number": [
      239,
      240,
      241,
      242
     ]
    },
    "numpy.array": {
     "line number": [
      235,
      240,
      241,
      242
     ]
    },
    "numpy.asarray": {
     "line number": [
      163,
      167,
      168,
      169
     ]
    },
    "numpy.empty_like": {
     "line number": [
      239
     ]
    },
    "numpy.float64": {
     "line number": [
      170
     ]
    },
    "numpy.inf": {
     "line number": [
      209
     ]
    },
    "numpy.ndarray": {
     "line number": [
      170
     ]
    },
    "numpy.ones": {
     "line number": [
      171
     ]
    },
    "numpy.random.randint": {
     "line number": [
      199
     ]
    },
    "numpy.random.seed": {
     "line number": [
      198
     ]
    },
    "numpy.sum": {
     "line number": [
      181,
      184
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      248,
      255,
      262,
      269,
      276
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      207
     ]
    },
    "range": {
     "line number": [
      167,
      168,
      169
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_expectmax.test_compute_masked_class_stats_2d": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": {
    "dipy.align.expectmax.compute_masked_class_stats_2d": {
     "line number": [
      431
     ]
    },
    "dipy.align.floating": {
     "line number": [
      421
     ]
    },
    "numpy.inf": {
     "line number": [
      427,
      427
     ]
    },
    "numpy.int32": {
     "line number": [
      415,
      430
     ]
    },
    "numpy.ndarray": {
     "line number": [
      415
     ]
    },
    "numpy.ones": {
     "line number": [
      430
     ]
    },
    "numpy.random.randint": {
     "line number": [
      416
     ]
    },
    "numpy.random.randn": {
     "line number": [
      421
     ]
    },
    "numpy.random.seed": {
     "line number": [
      410
     ]
    },
    "numpy.size": {
     "line number": [
      416
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      432,
      433
     ]
    },
    "range": {
     "line number": [
      426,
      428
     ]
    },
    "vars": {
     "line number": [
      431,
      433
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_expectmax.test_compute_masked_class_stats_3d": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "dipy.align.expectmax.compute_masked_class_stats_3d": {
     "line number": [
      459
     ]
    },
    "dipy.align.floating": {
     "line number": [
      449
     ]
    },
    "numpy.inf": {
     "line number": [
      455,
      455
     ]
    },
    "numpy.int32": {
     "line number": [
      442,
      458
     ]
    },
    "numpy.ndarray": {
     "line number": [
      442
     ]
    },
    "numpy.ones": {
     "line number": [
      458
     ]
    },
    "numpy.random.randint": {
     "line number": [
      443
     ]
    },
    "numpy.random.randn": {
     "line number": [
      449
     ]
    },
    "numpy.random.seed": {
     "line number": [
      437
     ]
    },
    "numpy.size": {
     "line number": [
      443
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      460,
      461
     ]
    },
    "range": {
     "line number": [
      454,
      456
     ]
    },
    "vars": {
     "line number": [
      459,
      461
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_expectmax.test_quantize_positive_2d": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      333,
      334
     ]
    },
    "dipy.align.expectmax.quantize_positive_2d": {
     "line number": [
      324,
      333,
      334,
      336,
      340
     ]
    },
    "dipy.align.floating": {
     "line number": [
      313,
      314,
      337,
      341
     ]
    },
    "numpy.asarray": {
     "line number": [
      325,
      329
     ]
    },
    "numpy.empty": {
     "line number": [
      299
     ]
    },
    "numpy.float32": {
     "line number": [
      294
     ]
    },
    "numpy.int32": {
     "line number": [
      299,
      338,
      342
     ]
    },
    "numpy.linspace": {
     "line number": [
      296
     ]
    },
    "numpy.min": {
     "line number": [
      310
     ]
    },
    "numpy.ndarray": {
     "line number": [
      314
     ]
    },
    "numpy.ones": {
     "line number": [
      341,
      342
     ]
    },
    "numpy.random.randint": {
     "line number": [
      300
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      312
     ]
    },
    "numpy.random.seed": {
     "line number": [
      283
     ]
    },
    "numpy.size": {
     "line number": [
      301,
      311
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      327
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      326
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      330,
      338,
      342
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      333,
      334
     ]
    },
    "numpy.zeros": {
     "line number": [
      294,
      337,
      338
     ]
    },
    "range": {
     "line number": [
      328
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_expectmax.test_quantize_positive_3d": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      397,
      398
     ]
    },
    "dipy.align.expectmax.quantize_positive_3d": {
     "line number": [
      388,
      397,
      398,
      400,
      404
     ]
    },
    "dipy.align.floating": {
     "line number": [
      377,
      378,
      401,
      405
     ]
    },
    "numpy.asarray": {
     "line number": [
      389,
      393
     ]
    },
    "numpy.empty": {
     "line number": [
      363
     ]
    },
    "numpy.float32": {
     "line number": [
      357
     ]
    },
    "numpy.int32": {
     "line number": [
      363,
      402,
      406
     ]
    },
    "numpy.linspace": {
     "line number": [
      359
     ]
    },
    "numpy.min": {
     "line number": [
      374
     ]
    },
    "numpy.ndarray": {
     "line number": [
      378
     ]
    },
    "numpy.ones": {
     "line number": [
      404,
      406
     ]
    },
    "numpy.random.randint": {
     "line number": [
      364
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      376
     ]
    },
    "numpy.random.seed": {
     "line number": [
      346
     ]
    },
    "numpy.size": {
     "line number": [
      365,
      375
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      391
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      390
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      394,
      402,
      406
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      397,
      398
     ]
    },
    "numpy.zeros": {
     "line number": [
      357,
      400,
      402
     ]
    },
    "range": {
     "line number": [
      392
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imaffine": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      28,
      29,
      30,
      31,
      32,
      34,
      35,
      36,
      38,
      39
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.tests.test_imaffine.AffineInvalidValuesError": {
  "data": {
   "shadows": "dipy.align.imaffine.AffineInvalidValuesError"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.AffineInversionError": {
  "data": {
   "shadows": "dipy.align.imaffine.AffineInversionError"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.AffineMap": {
  "data": {
   "shadows": "dipy.align.imaffine.AffineMap"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.Transform": {
  "data": {
   "shadows": "dipy.align.transforms.Transform"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine._number_dim_affine_matrix": {
  "data": {
   "shadows": "dipy.align.imaffine._number_dim_affine_matrix"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.create_affine_transforms": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": {
    "dipy.core.geometry.rodrigues_axis_rotation": {
     "line number": [
      389
     ]
    },
    "numpy.array": {
     "line number": [
      384
     ]
    },
    "numpy.cos": {
     "line number": [
      382
     ]
    },
    "numpy.eye": {
     "line number": [
      377,
      388,
      392
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      379
     ]
    },
    "numpy.sin": {
     "line number": [
      383
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imaffine.factors": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "dipy.align.tests.test_imaffine.floating": {
  "data": {
   "shadows": "dipy.align.floating"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.geometry": {
  "data": {
   "shadows": "dipy.core.geometry"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.imaffine": {
  "data": {
   "shadows": "dipy.align.imaffine"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.npl": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.regtransforms": {
  "data": {
   "shadows": "dipy.align.transforms.regtransforms"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.rt": {
  "data": {
   "shadows": "dipy.viz.regtools"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.sample_domain_regular": {
  "data": {
   "shadows": "dipy.align.tests.test_parzenhist.sample_domain_regular"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.setup_random_transform": {
  "data": {
   "shadows": "dipy.align.tests.test_parzenhist.setup_random_transform"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.sp": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imaffine.test_MIMetric_invalid_params": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": {
    "dipy.align.imaffine.MutualInformationMetric": {
     "line number": [
      600
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      589
     ]
    },
    "numpy.inf": {
     "line number": [
      598
     ]
    },
    "numpy.isinf": {
     "line number": [
      605,
      614
     ]
    },
    "numpy.nan": {
     "line number": [
      596
     ]
    },
    "numpy.random.rand": {
     "line number": [
      590,
      591
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      610,
      615
     ]
    },
    "numpy.zeros": {
     "line number": [
      594,
      595,
      597,
      608
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imaffine.test_affine_map": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      545,
      546,
      551,
      552,
      555,
      556,
      566,
      567
     ]
    },
    "dipy.align.imaffine.AffineInvalidValuesError": {
     "line number": [
      520,
      524,
      531,
      535,
      575,
      578,
      579
     ]
    },
    "dipy.align.imaffine.AffineInversionError": {
     "line number": [
      510,
      585
     ]
    },
    "dipy.align.imaffine.AffineMap": {
     "line number": [
      436,
      457,
      497,
      510,
      514,
      520,
      524,
      532,
      536,
      542,
      550,
      561,
      585
     ]
    },
    "dipy.align.imaffine._number_dim_affine_matrix": {
     "line number": [
      583
     ]
    },
    "dipy.align.tests.test_imaffine.create_affine_transforms": {
     "line number": [
      429
     ]
    },
    "dipy.align.vector_fields.create_circle": {
     "line number": [
      416
     ]
    },
    "dipy.align.vector_fields.create_sphere": {
     "line number": [
      421
     ]
    },
    "dipy.align.vector_fields.transform_2d_affine": {
     "line number": [
      417
     ]
    },
    "dipy.align.vector_fields.transform_2d_affine_nn": {
     "line number": [
      418
     ]
    },
    "dipy.align.vector_fields.transform_3d_affine": {
     "line number": [
      423
     ]
    },
    "dipy.align.vector_fields.transform_3d_affine_nn": {
     "line number": [
      424
     ]
    },
    "format": {
     "line number": [
      440
     ]
    },
    "id": {
     "line number": [
      479,
      479
     ]
    },
    "numpy.array": {
     "line number": [
      402,
      403,
      407,
      425
     ]
    },
    "numpy.eye": {
     "line number": [
      481,
      541,
      549,
      561
     ]
    },
    "numpy.float64": {
     "line number": [
      507,
      508,
      527,
      529
     ]
    },
    "numpy.inf": {
     "line number": [
      572
     ]
    },
    "numpy.int32": {
     "line number": [
      402,
      403
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      491,
      492
     ]
    },
    "numpy.nan": {
     "line number": [
      528,
      570
     ]
    },
    "numpy.pi": {
     "line number": [
      410,
      410
     ]
    },
    "numpy.random.random": {
     "line number": [
      584
     ]
    },
    "numpy.random.seed": {
     "line number": [
      401
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      463,
      464,
      481,
      503,
      504
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      473,
      477
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      437,
      438,
      440
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      510,
      520,
      524,
      530,
      534,
      545,
      546,
      551,
      552,
      555,
      556,
      566,
      567,
      574,
      578,
      579,
      585
     ]
    },
    "numpy.zeros": {
     "line number": [
      507,
      508,
      527,
      529,
      565,
      568,
      569,
      571
     ]
    },
    "oracle_linear": {
     "line number": [
      452,
      493
     ]
    },
    "oracle_nn": {
     "line number": [
      454,
      495
     ]
    },
    "range": {
     "line number": [
      582
     ]
    },
    "repr": {
     "line number": [
      438
     ]
    },
    "str": {
     "line number": [
      437
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imaffine.test_affreg_all_transforms": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      230
     ]
    },
    "dipy.align.imaffine.AffineRegistration": {
     "line number": [
      211,
      230
     ]
    },
    "dipy.align.imaffine.MutualInformationMetric": {
     "line number": [
      210,
      229
     ]
    },
    "dipy.align.tests.test_imaffine.factors": {
     "line number": [
      192,
      198,
      199
     ]
    },
    "dipy.align.tests.test_parzenhist.setup_random_transform": {
     "line number": [
      202
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      200
     ]
    },
    "numpy.abs": {
     "line number": [
      209,
      223
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      230
     ]
    },
    "print": {
     "line number": [
      225
     ]
    },
    "sorted": {
     "line number": [
      192
     ]
    },
    "srt": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imaffine.test_affreg_defaults": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "dipy.align.imaffine.AffineRegistration": {
     "line number": [
      262
     ]
    },
    "dipy.align.tests.test_imaffine.factors": {
     "line number": [
      247
     ]
    },
    "dipy.align.tests.test_parzenhist.setup_random_transform": {
     "line number": [
      250
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      248
     ]
    },
    "numpy.abs": {
     "line number": [
      252,
      274,
      281
     ]
    },
    "numpy.eye": {
     "line number": [
      240
     ]
    },
    "print": {
     "line number": [
      276,
      283
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imaffine.test_mi_gradient": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "dipy.align.imaffine.MutualInformationMetric": {
     "line number": [
      315
     ]
    },
    "dipy.align.tests.test_imaffine.factors": {
     "line number": [
      296,
      303,
      304,
      305
     ]
    },
    "dipy.align.tests.test_parzenhist.setup_random_transform": {
     "line number": [
      312
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      297,
      307
     ]
    },
    "numpy.empty": {
     "line number": [
      326
     ]
    },
    "numpy.float64": {
     "line number": [
      326
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      336,
      337
     ]
    },
    "numpy.random.randn": {
     "line number": [
      309
     ]
    },
    "numpy.random.seed": {
     "line number": [
      288
     ]
    },
    "range": {
     "line number": [
      329
     ]
    },
    "sorted": {
     "line number": [
      296
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imaffine.test_transform_centers_of_mass_3d": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "dipy.align.imaffine.transform_centers_of_mass": {
     "line number": [
      87
     ]
    },
    "dipy.align.vector_fields.create_sphere": {
     "line number": [
      48,
      55
     ]
    },
    "dipy.core.geometry.rodrigues_axis_rotation": {
     "line number": [
      69
     ]
    },
    "numpy.array": {
     "line number": [
      58,
      60,
      72
     ]
    },
    "numpy.eye": {
     "line number": [
      83
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      64,
      78
     ]
    },
    "numpy.pi": {
     "line number": [
      66,
      66
     ]
    },
    "numpy.random.seed": {
     "line number": [
      45
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      91
     ]
    },
    "numpy.zeros": {
     "line number": [
      49,
      68
     ]
    },
    "scipy": {
     "line number": [
      48,
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imaffine.test_transform_geometric_centers_3d": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "dipy.align.imaffine.transform_geometric_centers": {
     "line number": [
      135
     ]
    },
    "dipy.core.geometry.rodrigues_axis_rotation": {
     "line number": [
      113
     ]
    },
    "numpy.array": {
     "line number": [
      96,
      107,
      115,
      125,
      128
     ]
    },
    "numpy.eye": {
     "line number": [
      131
     ]
    },
    "numpy.float64": {
     "line number": [
      125,
      128
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      111,
      122
     ]
    },
    "numpy.ndarray": {
     "line number": [
      105,
      106
     ]
    },
    "numpy.pi": {
     "line number": [
      99,
      99
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      137
     ]
    },
    "numpy.zeros": {
     "line number": [
      112
     ]
    },
    "tuple": {
     "line number": [
      126,
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imaffine.test_transform_origins_3d": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "dipy.align.imaffine.transform_origins": {
     "line number": [
      177
     ]
    },
    "dipy.core.geometry.rodrigues_axis_rotation": {
     "line number": [
      159
     ]
    },
    "numpy.array": {
     "line number": [
      142,
      153,
      161
     ]
    },
    "numpy.eye": {
     "line number": [
      173
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      157,
      168
     ]
    },
    "numpy.ndarray": {
     "line number": [
      151,
      152
     ]
    },
    "numpy.pi": {
     "line number": [
      145,
      145
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      181
     ]
    },
    "numpy.zeros": {
     "line number": [
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imaffine.vf": {
  "data": {
   "shadows": "dipy.align.vector_fields"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp": {
  "data": {},
  "type": "module"
 },
 "dipy.align.tests.test_imwarp.DiffeomorphicMap": {
  "data": {
   "shadows": "dipy.align.imwarp.DiffeomorphicMap"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.VerbosityLevels": {
  "data": {
   "shadows": "dipy.align.VerbosityLevels"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.eulerangles": {
  "data": {
   "shadows": "nibabel.eulerangles"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.floating": {
  "data": {
   "shadows": "dipy.align.floating"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.get_synthetic_warped_circle": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      566,
      570,
      571,
      581,
      588
     ]
    },
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      572
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_2d": {
     "line number": [
      569
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      565
     ]
    },
    "numpy.asarray": {
     "line number": [
      570,
      571
     ]
    },
    "numpy.load": {
     "line number": [
      566
     ]
    },
    "numpy.ndarray": {
     "line number": [
      581,
      588
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.get_warped_stacked_image": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      542,
      543,
      552
     ]
    },
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      544
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_2d": {
     "line number": [
      541
     ]
    },
    "numpy.asarray": {
     "line number": [
      542,
      543
     ]
    },
    "numpy.zeros": {
     "line number": [
      555,
      557
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.imwarp": {
  "data": {
   "shadows": "dipy.align.imwarp"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.metrics": {
  "data": {
   "shadows": "dipy.align.metrics"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_imwarp.simple_callback": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "dipy.align.imwarp.RegistrationStages.INIT_END": {
     "line number": [
      355
     ]
    },
    "dipy.align.imwarp.RegistrationStages.INIT_START": {
     "line number": [
      353
     ]
    },
    "dipy.align.imwarp.RegistrationStages.ITER_END": {
     "line number": [
      367
     ]
    },
    "dipy.align.imwarp.RegistrationStages.ITER_START": {
     "line number": [
      365
     ]
    },
    "dipy.align.imwarp.RegistrationStages.OPT_END": {
     "line number": [
      359
     ]
    },
    "dipy.align.imwarp.RegistrationStages.OPT_START": {
     "line number": [
      357
     ]
    },
    "dipy.align.imwarp.RegistrationStages.SCALE_END": {
     "line number": [
      363
     ]
    },
    "dipy.align.imwarp.RegistrationStages.SCALE_START": {
     "line number": [
      361
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_cc_2d": {
  "data": {
   "lineno": 690,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      713
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      712
     ]
    },
    "dipy.align.metrics.CCMetric": {
     "line number": [
      708
     ]
    },
    "dipy.align.tests.test_imwarp.get_warped_stacked_image": {
     "line number": [
      703
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      697
     ]
    },
    "numpy.load": {
     "line number": [
      702
     ]
    },
    "numpy.sum": {
     "line number": [
      719,
      720
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      716
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_cc_3d": {
  "data": {
   "lineno": 726,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      762
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      754
     ]
    },
    "dipy.align.metrics.CCMetric": {
     "line number": [
      745
     ]
    },
    "dipy.align.tests.test_imwarp.get_warped_stacked_image": {
     "line number": [
      740
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      734
     ]
    },
    "numpy.load": {
     "line number": [
      739
     ]
    },
    "numpy.sum": {
     "line number": [
      769,
      770
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      766
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_diffeomorphic_map_2d": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      151,
      162,
      166,
      171,
      172
     ]
    },
    "dipy.align.floating": {
     "line number": [
      72,
      75,
      98,
      126
     ]
    },
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      89,
      122,
      143,
      154,
      166
     ]
    },
    "dipy.align.vector_fields.create_random_displacement_2d": {
     "line number": [
      68
     ]
    },
    "numpy.array": {
     "line number": [
      56,
      60,
      69,
      70,
      72,
      73
     ]
    },
    "numpy.float64": {
     "line number": [
      98,
      126
     ]
    },
    "numpy.int32": {
     "line number": [
      69,
      70,
      98,
      126
     ]
    },
    "numpy.int64": {
     "line number": [
      98,
      126
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      59
     ]
    },
    "numpy.ndarray": {
     "line number": [
      75
     ]
    },
    "numpy.ones": {
     "line number": [
      170
     ]
    },
    "numpy.random.randint": {
     "line number": [
      77
     ]
    },
    "numpy.random.seed": {
     "line number": [
      48
     ]
    },
    "numpy.size": {
     "line number": [
      76
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      105,
      111,
      116,
      119,
      133,
      139
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      175
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      151,
      162,
      166,
      171,
      172
     ]
    },
    "type": {
     "line number": [
      98,
      99,
      126,
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_diffeomorphic_map_simplification_2d": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      221,
      222
     ]
    },
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      217
     ]
    },
    "dipy.align.imwarp.mult_aff": {
     "line number": [
      212
     ]
    },
    "dipy.align.vector_fields.create_circle": {
     "line number": [
      206
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_2d": {
     "line number": [
      207
     ]
    },
    "numpy.array": {
     "line number": [
      196,
      200,
      221,
      222
     ]
    },
    "numpy.eye": {
     "line number": [
      213
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      199
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      232
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      234,
      235,
      236,
      237,
      238,
      239
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_diffeomorphic_map_simplification_3d": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      289,
      290
     ]
    },
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      285
     ]
    },
    "dipy.align.imwarp.mult_aff": {
     "line number": [
      280
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_3d": {
     "line number": [
      275
     ]
    },
    "dipy.align.vector_fields.create_sphere": {
     "line number": [
      273
     ]
    },
    "numpy.array": {
     "line number": [
      261,
      266,
      289,
      290
     ]
    },
    "numpy.eye": {
     "line number": [
      281
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      265
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      300
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      302,
      303,
      304,
      305,
      306,
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_em_2d_demons": {
  "data": {
   "lineno": 923,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      950
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      949
     ]
    },
    "dipy.align.metrics.EMMetric": {
     "line number": [
      944
     ]
    },
    "dipy.align.tests.test_imwarp.get_warped_stacked_image": {
     "line number": [
      936
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      930
     ]
    },
    "numpy.load": {
     "line number": [
      935
     ]
    },
    "numpy.sum": {
     "line number": [
      956,
      957
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      953
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_em_2d_gauss_newton": {
  "data": {
   "lineno": 829,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      857
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      856
     ]
    },
    "dipy.align.metrics.EMMetric": {
     "line number": [
      851
     ]
    },
    "dipy.align.tests.test_imwarp.get_warped_stacked_image": {
     "line number": [
      843
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      837
     ]
    },
    "numpy.load": {
     "line number": [
      842
     ]
    },
    "numpy.sum": {
     "line number": [
      863,
      864
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      860
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_em_3d_demons": {
  "data": {
   "lineno": 870,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      910
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      902
     ]
    },
    "dipy.align.metrics.EMMetric": {
     "line number": [
      893
     ]
    },
    "dipy.align.tests.test_imwarp.get_warped_stacked_image": {
     "line number": [
      884
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      878
     ]
    },
    "numpy.load": {
     "line number": [
      883
     ]
    },
    "numpy.sum": {
     "line number": [
      916,
      917
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      913
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_em_3d_gauss_newton": {
  "data": {
   "lineno": 776,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      816
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      808
     ]
    },
    "dipy.align.metrics.EMMetric": {
     "line number": [
      799
     ]
    },
    "dipy.align.tests.test_imwarp.get_warped_stacked_image": {
     "line number": [
      790
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      784
     ]
    },
    "numpy.load": {
     "line number": [
      789
     ]
    },
    "numpy.sum": {
     "line number": [
      822,
      823
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      819
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_get_direction_and_spacings": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "dipy.align.imwarp.get_direction_and_spacings": {
     "line number": [
      346
     ]
    },
    "nibabel.eulerangles.euler2mat": {
     "line number": [
      337
     ]
    },
    "numpy.array": {
     "line number": [
      338,
      340
     ]
    },
    "numpy.diag": {
     "line number": [
      339
     ]
    },
    "numpy.eye": {
     "line number": [
      342
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      347,
      348
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_mult_aff": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "dipy.align.imwarp.mult_aff": {
     "line number": [
      22,
      26,
      29,
      32
     ]
    },
    "numpy.array": {
     "line number": [
      19,
      20,
      23
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      24,
      27,
      30
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_optimizer_exceptions": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      316,
      319,
      328
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      316,
      319,
      322
     ]
    },
    "dipy.align.metrics.SSDMetric": {
     "line number": [
      314
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      324
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      316,
      319,
      328
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_ssd_2d_demons": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      421
     ]
    },
    "dipy.align.floating": {
     "line number": [
      382,
      383
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      399
     ]
    },
    "dipy.align.metrics.SSDMetric": {
     "line number": [
      389
     ]
    },
    "dipy.align.tests.test_imwarp.simple_callback": {
     "line number": [
      419
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      377,
      378
     ]
    },
    "numpy.array": {
     "line number": [
      382,
      383
     ]
    },
    "numpy.load": {
     "line number": [
      380,
      381
     ]
    },
    "numpy.sum": {
     "line number": [
      427,
      428
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      424,
      432,
      433,
      434,
      435,
      436,
      437
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_ssd_2d_gauss_newton": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      487
     ]
    },
    "dipy.align.floating": {
     "line number": [
      451,
      452
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      468
     ]
    },
    "dipy.align.metrics.SSDMetric": {
     "line number": [
      459
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      446,
      447
     ]
    },
    "id": {
     "line number": [
      488,
      489,
      489,
      489
     ]
    },
    "numpy.array": {
     "line number": [
      451,
      452
     ]
    },
    "numpy.eye": {
     "line number": [
      488
     ]
    },
    "numpy.load": {
     "line number": [
      449,
      450
     ]
    },
    "numpy.sum": {
     "line number": [
      494,
      495
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      491,
      499,
      500,
      501,
      502,
      503,
      504
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_ssd_3d_demons": {
  "data": {
   "lineno": 596,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      630
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      622
     ]
    },
    "dipy.align.metrics.SSDMetric": {
     "line number": [
      612
     ]
    },
    "dipy.align.tests.test_imwarp.get_synthetic_warped_circle": {
     "line number": [
      603
     ]
    },
    "numpy.sum": {
     "line number": [
      636,
      637
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      633
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.test_ssd_3d_gauss_newton": {
  "data": {
   "lineno": 643,
   "symbols_in_volume": {
    "dipy.align.VerbosityLevels.DEBUG": {
     "line number": [
      677
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      669
     ]
    },
    "dipy.align.metrics.SSDMetric": {
     "line number": [
      660
     ]
    },
    "dipy.align.tests.test_imwarp.get_synthetic_warped_circle": {
     "line number": [
      650
     ]
    },
    "numpy.sum": {
     "line number": [
      683,
      684
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      680
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_imwarp.vfu": {
  "data": {
   "shadows": "dipy.align.vector_fields"
  },
  "type": "import"
 },
 "dipy.align.tests.test_metrics": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      261
     ]
    },
    "dipy.align.tests.test_metrics.test_EMMetric_image_dynamics": {
     "line number": [
      265
     ]
    },
    "dipy.align.tests.test_metrics.test_em_demons_step_2d": {
     "line number": [
      262
     ]
    },
    "dipy.align.tests.test_metrics.test_em_demons_step_3d": {
     "line number": [
      263
     ]
    },
    "dipy.align.tests.test_metrics.test_exceptions": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.tests.test_metrics.CCMetric": {
  "data": {
   "shadows": "dipy.align.metrics.CCMetric"
  },
  "type": "import"
 },
 "dipy.align.tests.test_metrics.EMMetric": {
  "data": {
   "shadows": "dipy.align.metrics.EMMetric"
  },
  "type": "import"
 },
 "dipy.align.tests.test_metrics.SSDMetric": {
  "data": {
   "shadows": "dipy.align.metrics.SSDMetric"
  },
  "type": "import"
 },
 "dipy.align.tests.test_metrics.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_metrics.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_metrics.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.align.tests.test_metrics.floating": {
  "data": {
   "shadows": "dipy.align.floating"
  },
  "type": "import"
 },
 "dipy.align.tests.test_metrics.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "dipy.align.tests.test_metrics.ndimage": {
  "data": {
   "shadows": "scipy.ndimage"
  },
  "type": "import"
 },
 "dipy.align.tests.test_metrics.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_metrics.test_EMMetric_image_dynamics": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      50
     ]
    },
    "dipy.align.metrics.EMMetric": {
     "line number": [
      46
     ]
    },
    "numpy.int32": {
     "line number": [
      54
     ]
    },
    "numpy.ndarray": {
     "line number": [
      50
     ]
    },
    "numpy.random.randint": {
     "line number": [
      51
     ]
    },
    "numpy.random.seed": {
     "line number": [
      45
     ]
    },
    "numpy.size": {
     "line number": [
      52
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      57,
      60
     ]
    },
    "tuple": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_metrics.test_em_demons_step_2d": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123
     ]
    },
    "dipy.align.metrics.EMMetric": {
     "line number": [
      105
     ]
    },
    "numpy.array": {
     "line number": [
      106,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      134,
      146
     ]
    },
    "numpy.asarray": {
     "line number": [
      81,
      85,
      86
     ]
    },
    "numpy.float64": {
     "line number": [
      87
     ]
    },
    "numpy.ndarray": {
     "line number": [
      87
     ]
    },
    "numpy.ones": {
     "line number": [
      88
     ]
    },
    "numpy.sum": {
     "line number": [
      97,
      98,
      109
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      155,
      156
     ]
    },
    "range": {
     "line number": [
      85,
      86
     ]
    },
    "scipy.ndimage.filters.gaussian_filter": {
     "line number": [
      138,
      140,
      150,
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_metrics.test_em_demons_step_3d": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221
     ]
    },
    "dipy.align.metrics.EMMetric": {
     "line number": [
      203
     ]
    },
    "numpy.array": {
     "line number": [
      204,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      231,
      245
     ]
    },
    "numpy.asarray": {
     "line number": [
      177,
      181,
      182,
      183
     ]
    },
    "numpy.float64": {
     "line number": [
      184
     ]
    },
    "numpy.ndarray": {
     "line number": [
      184
     ]
    },
    "numpy.ones": {
     "line number": [
      185
     ]
    },
    "numpy.sum": {
     "line number": [
      195,
      196,
      207
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      257,
      258
     ]
    },
    "range": {
     "line number": [
      181,
      182,
      183
     ]
    },
    "scipy.ndimage.filters.gaussian_filter": {
     "line number": [
      236,
      238,
      240,
      250,
      252,
      254
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_metrics.test_exceptions": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      13,
      14,
      15,
      16,
      17,
      37
     ]
    },
    "dipy.align.metrics.CCMetric": {
     "line number": [
      13
     ]
    },
    "dipy.align.metrics.EMMetric": {
     "line number": [
      14,
      17
     ]
    },
    "dipy.align.metrics.SSDMetric": {
     "line number": [
      15,
      16
     ]
    },
    "dipy.align.tests.test_metrics.itertools": {
     "line number": [
      31,
      32,
      33
     ]
    },
    "init_metric": {
     "line number": [
      36,
      40
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      13,
      14,
      15,
      16,
      17,
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_metrics.test_exceptions.init_metric": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "dipy.align.metrics.CCMetric": {
     "line number": [
      21
     ]
    },
    "len": {
     "line number": [
      20
     ]
    },
    "numpy.arange": {
     "line number": [
      22,
      25
     ]
    },
    "numpy.eye": {
     "line number": [
      24,
      24,
      27,
      27
     ]
    },
    "numpy.float": {
     "line number": [
      23,
      26
     ]
    },
    "numpy.ones": {
     "line number": [
      24,
      27
     ]
    },
    "numpy.prod": {
     "line number": [
      22,
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_parzenhist": {
  "data": {},
  "type": "module"
 },
 "dipy.align.tests.test_parzenhist.ParzenJointHistogram": {
  "data": {
   "shadows": "dipy.align.parzenhist.ParzenJointHistogram"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.create_random_image_pair": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      53
     ]
    },
    "numpy.float64": {
     "line number": [
      65,
      65
     ]
    },
    "numpy.random.randint": {
     "line number": [
      55,
      59,
      63
     ]
    },
    "numpy.random.seed": {
     "line number": [
      52
     ]
    },
    "operator.mul": {
     "line number": [
      53
     ]
    },
    "tuple": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_parzenhist.cubic_spline": {
  "data": {
   "shadows": "dipy.align.parzenhist.cubic_spline"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.cubic_spline_derivative": {
  "data": {
   "shadows": "dipy.align.parzenhist.cubic_spline_derivative"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.factors": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "dipy.align.tests.test_parzenhist.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.interpolate_scalar_2d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_scalar_2d"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.interpolate_scalar_3d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_scalar_3d"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.mul": {
  "data": {
   "shadows": "operator.mul"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.ndindex": {
  "data": {
   "shadows": "dipy.core.ndindex.ndindex"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.regtransforms": {
  "data": {
   "shadows": "dipy.align.transforms.regtransforms"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.sample_domain_regular": {
  "data": {
   "shadows": "dipy.align.parzenhist.sample_domain_regular"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.setup_random_transform": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      280
     ]
    },
    "dipy.align.vector_fields.transform_2d_affine": {
     "line number": [
      291
     ]
    },
    "dipy.align.vector_fields.transform_3d_affine": {
     "line number": [
      294
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      284
     ]
    },
    "numpy.array": {
     "line number": [
      309,
      310
     ]
    },
    "numpy.eye": {
     "line number": [
      300,
      312
     ]
    },
    "numpy.float32": {
     "line number": [
      310
     ]
    },
    "numpy.float64": {
     "line number": [
      311
     ]
    },
    "numpy.int32": {
     "line number": [
      301,
      309,
      313
     ]
    },
    "numpy.load": {
     "line number": [
      285
     ]
    },
    "numpy.ones_like": {
     "line number": [
      301,
      313
     ]
    },
    "numpy.random.rand": {
     "line number": [
      306
     ]
    },
    "numpy.random.seed": {
     "line number": [
      281
     ]
    },
    "numpy.zeros": {
     "line number": [
      295
     ]
    },
    "scipy.ndimage.filters.gaussian_filter": {
     "line number": [
      298
     ]
    },
    "transform_method": {
     "line number": [
      310
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_parzenhist.sp": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_parzenhist.test_cubic_spline": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "dipy.align.parzenhist.cubic_spline": {
     "line number": [
      89
     ]
    },
    "numpy.abs": {
     "line number": [
      81
     ]
    },
    "numpy.array": {
     "line number": [
      89,
      90
     ]
    },
    "numpy.float64": {
     "line number": [
      89,
      90
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_parzenhist.test_cubic_spline_derivative": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "dipy.align.parzenhist.cubic_spline": {
     "line number": [
      109,
      110
     ]
    },
    "dipy.align.parzenhist.cubic_spline_derivative": {
     "line number": [
      112
     ]
    },
    "numpy.array": {
     "line number": [
      107,
      109,
      110
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_parzenhist.test_exceptions": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      569,
      570,
      571,
      591,
      620
     ]
    },
    "dipy.align.parzenhist.ParzenJointHistogram": {
     "line number": [
      564
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      577,
      597
     ]
    },
    "len": {
     "line number": [
      575
     ]
    },
    "numpy.empty": {
     "line number": [
      565,
      566,
      579,
      580,
      582,
      584,
      599,
      600,
      601,
      603,
      604,
      605,
      606,
      607,
      608
     ]
    },
    "numpy.eye": {
     "line number": [
      576
     ]
    },
    "numpy.float64": {
     "line number": [
      565,
      566,
      579,
      580,
      582,
      584,
      599,
      600,
      601,
      604,
      605,
      606,
      607,
      608
     ]
    },
    "numpy.int32": {
     "line number": [
      583,
      603
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      569,
      570,
      571,
      591,
      620
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_parzenhist.test_joint_pdf_gradients_dense": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": {
    "dipy.align.parzenhist.ParzenJointHistogram": {
     "line number": [
      354
     ]
    },
    "dipy.align.tests.test_parzenhist.factors": {
     "line number": [
      339,
      349
     ]
    },
    "dipy.align.tests.test_parzenhist.setup_random_transform": {
     "line number": [
      353
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      348
     ]
    },
    "dipy.align.vector_fields.gradient": {
     "line number": [
      369
     ]
    },
    "dipy.align.vector_fields.transform_2d_affine": {
     "line number": [
      343
     ]
    },
    "dipy.align.vector_fields.transform_3d_affine": {
     "line number": [
      346
     ]
    },
    "id": {
     "line number": [
      371,
      373
     ]
    },
    "numpy.array": {
     "line number": [
      359,
      362,
      388,
      390
     ]
    },
    "numpy.copy": {
     "line number": [
      366,
      376,
      393
     ]
    },
    "numpy.empty_like": {
     "line number": [
      382
     ]
    },
    "numpy.eye": {
     "line number": [
      367
     ]
    },
    "numpy.float32": {
     "line number": [
      361,
      369,
      389
     ]
    },
    "numpy.float64": {
     "line number": [
      363,
      364,
      368,
      373,
      374,
      391,
      392
     ]
    },
    "numpy.int32": {
     "line number": [
      359,
      388
     ]
    },
    "numpy.ones": {
     "line number": [
      368
     ]
    },
    "numpy.sqrt": {
     "line number": [
      399,
      400
     ]
    },
    "range": {
     "line number": [
      383
     ]
    },
    "sorted": {
     "line number": [
      339
     ]
    },
    "transform_method": {
     "line number": [
      343,
      346,
      361,
      389
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_parzenhist.test_joint_pdf_gradients_sparse": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": {
    "dipy.align.parzenhist.ParzenJointHistogram": {
     "line number": [
      438
     ]
    },
    "dipy.align.parzenhist.sample_domain_regular": {
     "line number": [
      446
     ]
    },
    "dipy.align.tests.test_parzenhist.factors": {
     "line number": [
      423,
      433
     ]
    },
    "dipy.align.tests.test_parzenhist.setup_random_transform": {
     "line number": [
      437
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      432
     ]
    },
    "dipy.align.vector_fields.sparse_gradient": {
     "line number": [
      471
     ]
    },
    "dipy.core.interpolation.interpolate_scalar_2d": {
     "line number": [
      427
     ]
    },
    "dipy.core.interpolation.interpolate_scalar_3d": {
     "line number": [
      430
     ]
    },
    "interp_method": {
     "line number": [
      451,
      463,
      492
     ]
    },
    "numpy.array": {
     "line number": [
      445,
      447,
      457,
      465,
      493
     ]
    },
    "numpy.copy": {
     "line number": [
      468,
      479,
      496
     ]
    },
    "numpy.empty_like": {
     "line number": [
      483
     ]
    },
    "numpy.float32": {
     "line number": [
      451,
      463,
      471,
      492
     ]
    },
    "numpy.float64": {
     "line number": [
      457,
      465,
      470,
      493
     ]
    },
    "numpy.hstack": {
     "line number": [
      448
     ]
    },
    "numpy.int32": {
     "line number": [
      445
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      449,
      461,
      489
     ]
    },
    "numpy.ones": {
     "line number": [
      448,
      470
     ]
    },
    "numpy.sqrt": {
     "line number": [
      502,
      503
     ]
    },
    "range": {
     "line number": [
      484
     ]
    },
    "sorted": {
     "line number": [
      423
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_parzenhist.test_parzen_densities": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "dipy.align.parzenhist.ParzenJointHistogram": {
     "line number": [
      194
     ]
    },
    "dipy.align.parzenhist.cubic_spline": {
     "line number": [
      218,
      229
     ]
    },
    "dipy.align.tests.test_parzenhist.create_random_image_pair": {
     "line number": [
      188,
      191
     ]
    },
    "dipy.core.ndindex.ndindex": {
     "line number": [
      212
     ]
    },
    "numpy.array": {
     "line number": [
      217,
      228
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      235,
      236,
      243,
      245,
      253,
      255
     ]
    },
    "numpy.zeros": {
     "line number": [
      211,
      222
     ]
    },
    "range": {
     "line number": [
      217,
      223,
      228
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_parzenhist.test_parzen_joint_histogram": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "dipy.align.parzenhist.ParzenJointHistogram": {
     "line number": [
      125
     ]
    },
    "numpy.array": {
     "line number": [
      128,
      131,
      135,
      136
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      142,
      146,
      152,
      156
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      144,
      148,
      154,
      158,
      167,
      172
     ]
    },
    "range": {
     "line number": [
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_parzenhist.test_sample_domain_regular": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      527,
      548
     ]
    },
    "dipy.align.parzenhist.sample_domain_regular": {
     "line number": [
      527,
      529,
      548,
      550
     ]
    },
    "len": {
     "line number": [
      523,
      535,
      535,
      544,
      558,
      558
     ]
    },
    "numpy.array": {
     "line number": [
      519,
      530,
      540,
      551
     ]
    },
    "numpy.eye": {
     "line number": [
      520,
      521,
      541,
      542
     ]
    },
    "numpy.int32": {
     "line number": [
      519,
      530,
      540,
      551
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      533,
      556
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      535,
      537,
      558,
      560
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      527,
      548
     ]
    },
    "set": {
     "line number": [
      535,
      558
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_parzenhist.vf": {
  "data": {
   "shadows": "dipy.align.vector_fields"
  },
  "type": "import"
 },
 "dipy.align.tests.test_reslice": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      65
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.tests.test_reslice.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.align.tests.test_reslice.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_reslice.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_reslice.estimate_sigma": {
  "data": {
   "shadows": "dipy.denoise.noise_estimate.estimate_sigma"
  },
  "type": "import"
 },
 "dipy.align.tests.test_reslice.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.align.tests.test_reslice.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.align.tests.test_reslice.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.align.tests.test_reslice.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_reslice.reslice": {
  "data": {
   "shadows": "dipy.align.reslice.reslice"
  },
  "type": "import"
 },
 "dipy.align.tests.test_reslice.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.align.tests.test_reslice.test_resample": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "dipy.align.reslice.reslice": {
     "line number": [
      19,
      27,
      34,
      48,
      50,
      55,
      60
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      14
     ]
    },
    "dipy.denoise.noise_estimate.estimate_sigma": {
     "line number": [
      40,
      41,
      42
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      15
     ]
    },
    "nibabel.Nifti1Image": {
     "line number": [
      21
     ]
    },
    "numpy.all": {
     "line number": [
      44,
      45
     ]
    },
    "numpy.array": {
     "line number": [
      29,
      36
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      44,
      45
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      23,
      51,
      52,
      56,
      57,
      61,
      62
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      29,
      30,
      36,
      37
     ]
    },
    "range": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_scalespace": {
  "data": {},
  "type": "module"
 },
 "dipy.align.tests.test_scalespace.IsotropicScaleSpace": {
  "data": {
   "shadows": "dipy.align.scalespace.IsotropicScaleSpace"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.ScaleSpace": {
  "data": {
   "shadows": "dipy.align.scalespace.ScaleSpace"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.floating": {
  "data": {
   "shadows": "dipy.align.floating"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.get_direction_and_spacings": {
  "data": {
   "shadows": "dipy.align.imwarp.get_direction_and_spacings"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.get_synthetic_warped_circle": {
  "data": {
   "shadows": "dipy.align.tests.test_imwarp.get_synthetic_warped_circle"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.sp": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_scalespace.test_scale_space": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "dipy.align.imwarp.get_direction_and_spacings": {
     "line number": [
      67
     ]
    },
    "dipy.align.scalespace.IsotropicScaleSpace": {
     "line number": [
      17,
      34
     ]
    },
    "dipy.align.scalespace.ScaleSpace": {
     "line number": [
      17,
      28
     ]
    },
    "dipy.align.tests.test_imwarp.get_synthetic_warped_circle": {
     "line number": [
      21,
      23
     ]
    },
    "numpy.array": {
     "line number": [
      24
     ]
    },
    "numpy.diag": {
     "line number": [
      25
     ]
    },
    "numpy.eye": {
     "line number": [
      62
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      50,
      57,
      64,
      69
     ]
    },
    "print": {
     "line number": [
      19
     ]
    },
    "range": {
     "line number": [
      43
     ]
    },
    "scipy.ndimage.filters.gaussian_filter": {
     "line number": [
      46
     ]
    },
    "test_class": {
     "line number": [
      29,
      34,
      37
     ]
    },
    "tuple": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_scalespace.test_scale_space_exceptions": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      83
     ]
    },
    "dipy.align.floating": {
     "line number": [
      76
     ]
    },
    "dipy.align.scalespace.ScaleSpace": {
     "line number": [
      81,
      86
     ]
    },
    "numpy.int32": {
     "line number": [
      79,
      89
     ]
    },
    "numpy.ndarray": {
     "line number": [
      76
     ]
    },
    "numpy.random.randint": {
     "line number": [
      78
     ]
    },
    "numpy.random.seed": {
     "line number": [
      73
     ]
    },
    "numpy.size": {
     "line number": [
      77
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      90
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      83
     ]
    },
    "range": {
     "line number": [
      87
     ]
    },
    "tuple": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      485
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      487
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.tests.test_streamlinear.BundleMinDistanceMatrixMetric": {
  "data": {
   "shadows": "dipy.align.streamlinear.BundleMinDistanceMatrixMetric"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.BundleMinDistanceMetric": {
  "data": {
   "shadows": "dipy.align.streamlinear.BundleMinDistanceMetric"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.BundleSumDistanceMatrixMetric": {
  "data": {
   "shadows": "dipy.align.streamlinear.BundleSumDistanceMatrixMetric"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.StreamlineDistanceMetric": {
  "data": {
   "shadows": "dipy.align.streamlinear.StreamlineDistanceMetric"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.StreamlineLinearRegistration": {
  "data": {
   "shadows": "dipy.align.streamlinear.StreamlineLinearRegistration"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear._bundle_minimum_distance": {
  "data": {
   "shadows": "dipy.align.bundlemin._bundle_minimum_distance"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear._bundle_minimum_distance_matrix": {
  "data": {
   "shadows": "dipy.align.bundlemin._bundle_minimum_distance_matrix"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.center_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.center_streamlines"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.compose_matrix": {
  "data": {
   "shadows": "dipy.core.geometry.compose_matrix"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.compose_matrix44": {
  "data": {
   "shadows": "dipy.align.streamlinear.compose_matrix44"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.decompose_matrix44": {
  "data": {
   "shadows": "dipy.align.streamlinear.decompose_matrix44"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.distance_matrix_mdf": {
  "data": {
   "shadows": "dipy.align.bundlemin.distance_matrix_mdf"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.evaluate_convergence": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      59,
      60
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.fornix_streamlines": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      48
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      50
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      53
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.relist_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.relist_streamlines"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamline.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.simulated_bundle": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      41
     ]
    },
    "numpy.cos": {
     "line number": [
      38
     ]
    },
    "numpy.linspace": {
     "line number": [
      33,
      36
     ]
    },
    "numpy.ones": {
     "line number": [
      38,
      40
     ]
    },
    "numpy.vstack": {
     "line number": [
      38,
      40
     ]
    },
    "numpy.zeros": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_abstract_metric_class": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      319
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      319
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_abstract_metric_class.DummyStreamlineMetric": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "dipy.align.streamlinear.StreamlineDistanceMetric": {
     "line number": [
      316
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.align.tests.test_streamlinear.test_abstract_metric_class.DummyStreamlineMetric.test": {
  "data": {
   "lineno": 317
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_affine_real_bundles": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": {
    "dipy.align.streamlinear.BundleMinDistanceMatrixMetric": {
     "line number": [
      379
     ]
    },
    "dipy.align.streamlinear.StreamlineLinearRegistration": {
     "line number": [
      381,
      391
     ]
    },
    "dipy.align.streamlinear.compose_matrix44": {
     "line number": [
      365
     ]
    },
    "dipy.align.tests.test_streamlinear.evaluate_convergence": {
     "line number": [
      402
     ]
    },
    "dipy.align.tests.test_streamlinear.fornix_streamlines": {
     "line number": [
      361
     ]
    },
    "dipy.tracking.streamline.center_streamlines": {
     "line number": [
      362
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      366
     ]
    },
    "numpy.array": {
     "line number": [
      368
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_cascade_of_optimizations_and_threading": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": {
    "dipy.align.streamlinear.StreamlineLinearRegistration": {
     "line number": [
      469,
      473,
      477
     ]
    },
    "dipy.align.streamlinear.compose_matrix44": {
     "line number": [
      465
     ]
    },
    "dipy.data.two_cingulum_bundles": {
     "line number": [
      457
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      460,
      466
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      464
     ]
    },
    "numpy.array": {
     "line number": [
      462
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      481,
      482
     ]
    },
    "print": {
     "line number": [
      468,
      472,
      476
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_compose_decompose_matrix44": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      452
     ]
    },
    "dipy.align.streamlinear.compose_matrix44": {
     "line number": [
      445,
      447,
      449
     ]
    },
    "dipy.align.streamlinear.decompose_matrix44": {
     "line number": [
      446,
      448,
      450,
      452
     ]
    },
    "numpy.random.rand": {
     "line number": [
      444
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      446,
      448,
      450
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      452
     ]
    },
    "range": {
     "line number": [
      443
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_efficient_bmd": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": {
    "dipy.align.bundlemin._bundle_minimum_distance": {
     "line number": [
      251
     ]
    },
    "dipy.align.bundlemin._bundle_minimum_distance_matrix": {
     "line number": [
      228,
      236
     ]
    },
    "dipy.align.bundlemin.distance_matrix_mdf": {
     "line number": [
      241
     ]
    },
    "dipy.tracking.streamline.relist_streamlines": {
     "line number": [
      240
     ]
    },
    "dipy.tracking.streamline.unlist_streamlines": {
     "line number": [
      222
     ]
    },
    "float": {
     "line number": [
      248,
      249
     ]
    },
    "len": {
     "line number": [
      226,
      226,
      229,
      229,
      237,
      237,
      252,
      252
     ]
    },
    "numpy.array": {
     "line number": [
      216
     ]
    },
    "numpy.diag": {
     "line number": [
      232
     ]
    },
    "numpy.double": {
     "line number": [
      223
     ]
    },
    "numpy.min": {
     "line number": [
      248,
      249
     ]
    },
    "numpy.sum": {
     "line number": [
      232,
      248,
      249
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      254
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      243
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      232
     ]
    },
    "numpy.zeros": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_evolution_of_previous_iterations": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": {
    "dipy.align.streamlinear.StreamlineLinearRegistration": {
     "line number": [
      329
     ]
    },
    "dipy.align.tests.test_streamlinear.fornix_streamlines": {
     "line number": [
      324,
      325
     ]
    },
    "len": {
     "line number": [
      333
     ]
    },
    "numpy.array": {
     "line number": [
      327
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      333
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_from_to_rigid": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "dipy.align.streamlinear.compose_matrix44": {
     "line number": [
      292
     ]
    },
    "dipy.align.streamlinear.decompose_matrix44": {
     "line number": [
      293,
      302
     ]
    },
    "numpy.array": {
     "line number": [
      291,
      297
     ]
    },
    "numpy.eye": {
     "line number": [
      299
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      295,
      304
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_matrix44": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      309,
      310,
      311
     ]
    },
    "dipy.align.streamlinear.compose_matrix44": {
     "line number": [
      309,
      310,
      311
     ]
    },
    "numpy.ones": {
     "line number": [
      309,
      310,
      311
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      309,
      310,
      311
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_min_vs_min_fast_precision": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "dipy.align.streamlinear.BundleMinDistanceMatrixMetric": {
     "line number": [
      188
     ]
    },
    "dipy.align.streamlinear.BundleMinDistanceMetric": {
     "line number": [
      191
     ]
    },
    "dipy.align.tests.test_streamlinear.fornix_streamlines": {
     "line number": [
      182,
      183
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      198
     ]
    },
    "print": {
     "line number": [
      196,
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_openmp_locks": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": {
    "dipy.align.bundlemin._bundle_minimum_distance": {
     "line number": [
      282
     ]
    },
    "dipy.align.bundlemin._bundle_minimum_distance_matrix": {
     "line number": [
      275
     ]
    },
    "dipy.tracking.streamline.unlist_streamlines": {
     "line number": [
      270,
      271
     ]
    },
    "float": {
     "line number": [
      279,
      280
     ]
    },
    "len": {
     "line number": [
      273,
      273,
      276,
      276,
      283,
      283
     ]
    },
    "numpy.min": {
     "line number": [
      279,
      280
     ]
    },
    "numpy.random.rand": {
     "line number": [
      264
     ]
    },
    "numpy.sum": {
     "line number": [
      279,
      280
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      286
     ]
    },
    "numpy.zeros": {
     "line number": [
      273
     ]
    },
    "range": {
     "line number": [
      263
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_rigid_parallel_lines": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "dipy.align.streamlinear.BundleSumDistanceMatrixMetric": {
     "line number": [
      72
     ]
    },
    "dipy.align.streamlinear.StreamlineLinearRegistration": {
     "line number": [
      74
     ]
    },
    "dipy.align.streamlinear.compose_matrix44": {
     "line number": [
      68
     ]
    },
    "dipy.align.tests.test_streamlinear.evaluate_convergence": {
     "line number": [
      81
     ]
    },
    "dipy.align.tests.test_streamlinear.simulated_bundle": {
     "line number": [
      66
     ]
    },
    "dipy.tracking.streamline.center_streamlines": {
     "line number": [
      67
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      70
     ]
    },
    "numpy.zeros": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_rigid_partial_real_bundles": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "dipy.align.streamlinear.StreamlineLinearRegistration": {
     "line number": [
      124
     ]
    },
    "dipy.align.tests.test_streamlinear.fornix_streamlines": {
     "line number": [
      114,
      115
     ]
    },
    "dipy.core.geometry.compose_matrix": {
     "line number": [
      120
     ]
    },
    "dipy.tracking.streamline.center_streamlines": {
     "line number": [
      116,
      117
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      134,
      135
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      122
     ]
    },
    "float": {
     "line number": [
      153
     ]
    },
    "numpy.array": {
     "line number": [
      120,
      139,
      142
     ]
    },
    "numpy.concatenate": {
     "line number": [
      138,
      141
     ]
    },
    "numpy.deg2rad": {
     "line number": [
      121
     ]
    },
    "numpy.int": {
     "line number": [
      139,
      142
     ]
    },
    "numpy.logical_and": {
     "line number": [
      153
     ]
    },
    "numpy.round": {
     "line number": [
      139,
      142
     ]
    },
    "numpy.sum": {
     "line number": [
      153,
      153
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      155
     ]
    },
    "numpy.zeros": {
     "line number": [
      137,
      148
     ]
    },
    "print": {
     "line number": [
      119,
      127,
      128,
      129,
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_rigid_real_bundles": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      109
     ]
    },
    "dipy.align.streamlinear.BundleMinDistanceMatrixMetric": {
     "line number": [
      101
     ]
    },
    "dipy.align.streamlinear.BundleSumDistanceMatrixMetric": {
     "line number": [
      93
     ]
    },
    "dipy.align.streamlinear.StreamlineLinearRegistration": {
     "line number": [
      94,
      102,
      109
     ]
    },
    "dipy.align.streamlinear.compose_matrix44": {
     "line number": [
      89
     ]
    },
    "dipy.align.tests.test_streamlinear.evaluate_convergence": {
     "line number": [
      99,
      107
     ]
    },
    "dipy.align.tests.test_streamlinear.fornix_streamlines": {
     "line number": [
      86
     ]
    },
    "dipy.tracking.streamline.center_streamlines": {
     "line number": [
      87
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      91
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      109
     ]
    },
    "numpy.zeros": {
     "line number": [
      95,
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_same_number_of_points": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      209,
      210,
      211
     ]
    },
    "dipy.align.streamlinear.StreamlineLinearRegistration": {
     "line number": [
      208
     ]
    },
    "numpy.random.rand": {
     "line number": [
      203,
      203,
      204,
      204,
      205,
      205,
      206,
      206
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      209,
      210,
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_similarity_real_bundles": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": {
    "dipy.align.streamlinear.BundleMinDistanceMatrixMetric": {
     "line number": [
      345
     ]
    },
    "dipy.align.streamlinear.StreamlineLinearRegistration": {
     "line number": [
      348
     ]
    },
    "dipy.align.streamlinear.compose_matrix44": {
     "line number": [
      342
     ]
    },
    "dipy.align.tests.test_streamlinear.evaluate_convergence": {
     "line number": [
      356
     ]
    },
    "dipy.align.tests.test_streamlinear.fornix_streamlines": {
     "line number": [
      338
     ]
    },
    "dipy.tracking.streamline.center_streamlines": {
     "line number": [
      339
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      343
     ]
    },
    "numpy.array": {
     "line number": [
      346
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_stream_rigid": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": {
    "dipy.align.streamlinear.StreamlineLinearRegistration": {
     "line number": [
      167,
      171
     ]
    },
    "dipy.align.streamlinear.compose_matrix44": {
     "line number": [
      164
     ]
    },
    "dipy.align.tests.test_streamlinear.fornix_streamlines": {
     "line number": [
      160,
      161
     ]
    },
    "dipy.tracking.streamline.center_streamlines": {
     "line number": [
      162
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      165,
      169,
      173
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      176,
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_vectorize_streamlines": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": {
    "dipy.data.two_cingulum_bundles": {
     "line number": [
      407
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      410
     ]
    },
    "numpy.all": {
     "line number": [
      413
     ]
    },
    "numpy.array": {
     "line number": [
      411
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      413
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.test_x0_input": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      425,
      428
     ]
    },
    "dipy.align.streamlinear.StreamlineLinearRegistration": {
     "line number": [
      419,
      422,
      425,
      428,
      437
     ]
    },
    "enumerate": {
     "line number": [
      436
     ]
    },
    "numpy.array": {
     "line number": [
      431,
      432
     ]
    },
    "numpy.random.rand": {
     "line number": [
      421,
      421,
      421,
      424,
      424,
      427
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      438
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      425,
      428
     ]
    },
    "numpy.zeros": {
     "line number": [
      430
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_streamlinear.transform_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.transform_streamlines"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.two_cingulum_bundles": {
  "data": {
   "shadows": "dipy.data.two_cingulum_bundles"
  },
  "type": "import"
 },
 "dipy.align.tests.test_streamlinear.unlist_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.unlist_streamlines"
  },
  "type": "import"
 },
 "dipy.align.tests.test_sumsqdiff": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      747
     ]
    },
    "dipy.align.tests.test_sumsqdiff.test_compute_energy_ssd_2d": {
     "line number": [
      750
     ]
    },
    "dipy.align.tests.test_sumsqdiff.test_compute_energy_ssd_3d": {
     "line number": [
      751
     ]
    },
    "dipy.align.tests.test_sumsqdiff.test_compute_residual_displacement_field_ssd_2d": {
     "line number": [
      748
     ]
    },
    "dipy.align.tests.test_sumsqdiff.test_compute_residual_displacement_field_ssd_3d": {
     "line number": [
      749
     ]
    },
    "dipy.align.tests.test_sumsqdiff.test_compute_ssd_demons_step_2d": {
     "line number": [
      752
     ]
    },
    "dipy.align.tests.test_sumsqdiff.test_compute_ssd_demons_step_3d": {
     "line number": [
      753
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.tests.test_sumsqdiff.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "dipy.align.tests.test_sumsqdiff.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_sumsqdiff.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_sumsqdiff.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_sumsqdiff.floating": {
  "data": {
   "shadows": "dipy.align.floating"
  },
  "type": "import"
 },
 "dipy.align.tests.test_sumsqdiff.iterate_residual_field_ssd_2d": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      48
     ]
    },
    "numpy.isinf": {
     "line number": [
      44
     ]
    },
    "numpy.linalg.det": {
     "line number": [
      49
     ]
    },
    "numpy.linalg.solve": {
     "line number": [
      58
     ]
    },
    "numpy.outer": {
     "line number": [
      48
     ]
    },
    "numpy.sum": {
     "line number": [
      51
     ]
    },
    "numpy.zeros": {
     "line number": [
      26
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      20
     ]
    },
    "range": {
     "line number": [
      27,
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_sumsqdiff.iterate_residual_field_ssd_3d": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      111
     ]
    },
    "numpy.isinf": {
     "line number": [
      100
     ]
    },
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      114
     ]
    },
    "numpy.linalg.solve": {
     "line number": [
      113
     ]
    },
    "numpy.ndarray": {
     "line number": [
      77
     ]
    },
    "numpy.outer": {
     "line number": [
      111
     ]
    },
    "numpy.sum": {
     "line number": [
      103,
      115
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      71
     ]
    },
    "range": {
     "line number": [
      72,
      78,
      79,
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_sumsqdiff.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_sumsqdiff.ssd": {
  "data": {
   "shadows": "dipy.align.sumsqdiff"
  },
  "type": "import"
 },
 "dipy.align.tests.test_sumsqdiff.test_compute_energy_ssd_2d": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      502
     ]
    },
    "dipy.align.sumsqdiff.compute_energy_ssd_2d": {
     "line number": [
      502
     ]
    },
    "numpy.array": {
     "line number": [
      502
     ]
    },
    "numpy.asarray": {
     "line number": [
      477,
      481,
      482
     ]
    },
    "numpy.float64": {
     "line number": [
      483
     ]
    },
    "numpy.ndarray": {
     "line number": [
      483
     ]
    },
    "numpy.ones": {
     "line number": [
      484
     ]
    },
    "numpy.sum": {
     "line number": [
      493,
      494
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      503
     ]
    },
    "range": {
     "line number": [
      481,
      482
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_sumsqdiff.test_compute_energy_ssd_3d": {
  "data": {
   "lineno": 506,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      537
     ]
    },
    "dipy.align.sumsqdiff.compute_energy_ssd_3d": {
     "line number": [
      537
     ]
    },
    "numpy.array": {
     "line number": [
      537
     ]
    },
    "numpy.asarray": {
     "line number": [
      510,
      514,
      515,
      516
     ]
    },
    "numpy.float64": {
     "line number": [
      517
     ]
    },
    "numpy.ndarray": {
     "line number": [
      517
     ]
    },
    "numpy.ones": {
     "line number": [
      518
     ]
    },
    "numpy.sum": {
     "line number": [
      528,
      529
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      538
     ]
    },
    "range": {
     "line number": [
      514,
      515,
      516
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_sumsqdiff.test_compute_residual_displacement_field_ssd_2d": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      147,
      153,
      164,
      168,
      171,
      174,
      182,
      224,
      228,
      231,
      244,
      253
     ]
    },
    "dipy.align.sumsqdiff.compute_residual_displacement_field_ssd_2d": {
     "line number": [
      186
     ]
    },
    "dipy.align.sumsqdiff.iterate_residual_displacement_field_ssd_2d": {
     "line number": [
      250
     ]
    },
    "dipy.align.tests.test_sumsqdiff.iterate_residual_field_ssd_2d": {
     "line number": [
      241
     ]
    },
    "iut": {
     "line number": [
      224,
      231
     ]
    },
    "numpy.array": {
     "line number": [
      171
     ]
    },
    "numpy.asarray": {
     "line number": [
      127,
      131,
      132
     ]
    },
    "numpy.float64": {
     "line number": [
      133,
      195,
      205,
      213
     ]
    },
    "numpy.inf": {
     "line number": [
      179
     ]
    },
    "numpy.ndarray": {
     "line number": [
      133,
      228
     ]
    },
    "numpy.ones": {
     "line number": [
      134
     ]
    },
    "numpy.random.randint": {
     "line number": [
      177
     ]
    },
    "numpy.random.randn": {
     "line number": [
      173,
      182
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      144,
      150,
      163,
      167
     ]
    },
    "numpy.random.seed": {
     "line number": [
      139
     ]
    },
    "numpy.size": {
     "line number": [
      145,
      151,
      163,
      167
     ]
    },
    "numpy.sum": {
     "line number": [
      157,
      160
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      226,
      233,
      258
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      195,
      209
     ]
    },
    "range": {
     "line number": [
      131,
      132,
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_sumsqdiff.test_compute_residual_displacement_field_ssd_3d": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      288,
      294,
      305,
      309,
      312,
      315,
      323,
      366,
      370,
      373,
      386,
      395
     ]
    },
    "dipy.align.sumsqdiff.compute_residual_displacement_field_ssd_3d": {
     "line number": [
      327
     ]
    },
    "dipy.align.sumsqdiff.iterate_residual_displacement_field_ssd_3d": {
     "line number": [
      392
     ]
    },
    "dipy.align.tests.test_sumsqdiff.iterate_residual_field_ssd_3d": {
     "line number": [
      383
     ]
    },
    "iut": {
     "line number": [
      327,
      366,
      373
     ]
    },
    "numpy.array": {
     "line number": [
      312
     ]
    },
    "numpy.asarray": {
     "line number": [
      266,
      270,
      271,
      272
     ]
    },
    "numpy.float64": {
     "line number": [
      273,
      336,
      356
     ]
    },
    "numpy.inf": {
     "line number": [
      320
     ]
    },
    "numpy.ndarray": {
     "line number": [
      273,
      370
     ]
    },
    "numpy.ones": {
     "line number": [
      274
     ]
    },
    "numpy.random.randint": {
     "line number": [
      318
     ]
    },
    "numpy.random.randn": {
     "line number": [
      314,
      323
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      285,
      291,
      304,
      308
     ]
    },
    "numpy.random.seed": {
     "line number": [
      280
     ]
    },
    "numpy.size": {
     "line number": [
      286,
      292,
      304,
      308
     ]
    },
    "numpy.sum": {
     "line number": [
      298,
      301
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      368,
      375,
      402
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      336,
      352
     ]
    },
    "range": {
     "line number": [
      270,
      271,
      272,
      334,
      353,
      359
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_sumsqdiff.test_compute_ssd_demons_step_2d": {
  "data": {
   "lineno": 541,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      579,
      585,
      596,
      600,
      603,
      632,
      635
     ]
    },
    "dipy.align.sumsqdiff.compute_ssd_demons_step_2d": {
     "line number": [
      634
     ]
    },
    "numpy.array": {
     "line number": [
      603,
      626,
      635
     ]
    },
    "numpy.asarray": {
     "line number": [
      559,
      563,
      564
     ]
    },
    "numpy.empty_like": {
     "line number": [
      632
     ]
    },
    "numpy.float64": {
     "line number": [
      565
     ]
    },
    "numpy.ndarray": {
     "line number": [
      565
     ]
    },
    "numpy.ones": {
     "line number": [
      566
     ]
    },
    "numpy.random.randint": {
     "line number": [
      606
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      576,
      582,
      595,
      599
     ]
    },
    "numpy.random.seed": {
     "line number": [
      571
     ]
    },
    "numpy.size": {
     "line number": [
      577,
      583,
      595,
      599
     ]
    },
    "numpy.sum": {
     "line number": [
      589,
      592
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      639
     ]
    },
    "range": {
     "line number": [
      563,
      564
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_sumsqdiff.test_compute_ssd_demons_step_3d": {
  "data": {
   "lineno": 642,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      683,
      689,
      700,
      704,
      707,
      737,
      740
     ]
    },
    "dipy.align.sumsqdiff.compute_ssd_demons_step_3d": {
     "line number": [
      739
     ]
    },
    "numpy.array": {
     "line number": [
      707,
      730,
      740
     ]
    },
    "numpy.asarray": {
     "line number": [
      661,
      665,
      666,
      667
     ]
    },
    "numpy.empty_like": {
     "line number": [
      737
     ]
    },
    "numpy.float64": {
     "line number": [
      668
     ]
    },
    "numpy.ndarray": {
     "line number": [
      668
     ]
    },
    "numpy.ones": {
     "line number": [
      669
     ]
    },
    "numpy.random.randint": {
     "line number": [
      710
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      680,
      686,
      699,
      703
     ]
    },
    "numpy.random.seed": {
     "line number": [
      675
     ]
    },
    "numpy.size": {
     "line number": [
      681,
      687,
      699,
      703
     ]
    },
    "numpy.sum": {
     "line number": [
      693,
      696
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      744
     ]
    },
    "range": {
     "line number": [
      665,
      666,
      667
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_sumsqdiff.test_solve_2d_symmetric_positive_definite": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": {
    "dipy.align.sumsqdiff.solve_2d_symmetric_positive_definite": {
     "line number": [
      429
     ]
    },
    "numpy.array": {
     "line number": [
      407,
      408,
      409,
      410,
      416,
      419,
      422,
      425
     ]
    },
    "numpy.linalg.det": {
     "line number": [
      426
     ]
    },
    "numpy.linalg.solve": {
     "line number": [
      428
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      430
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_sumsqdiff.test_solve_3d_symmetric_positive_definite": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": {
    "dipy.align.sumsqdiff.solve_3d_symmetric_positive_definite": {
     "line number": [
      464
     ]
    },
    "numpy.array": {
     "line number": [
      435,
      436,
      437,
      438,
      447,
      450,
      451,
      452,
      455,
      456,
      457
     ]
    },
    "numpy.eye": {
     "line number": [
      462
     ]
    },
    "numpy.linalg.solve": {
     "line number": [
      469
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      470
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      467
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_transforms": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      251
     ]
    },
    "dipy.align.tests.test_transforms.test_identity_parameters": {
     "line number": [
      256
     ]
    },
    "dipy.align.tests.test_transforms.test_invalid_transform": {
     "line number": [
      257
     ]
    },
    "dipy.align.tests.test_transforms.test_jacobian_functions": {
     "line number": [
      253
     ]
    },
    "dipy.align.tests.test_transforms.test_number_of_parameters": {
     "line number": [
      252
     ]
    },
    "dipy.align.tests.test_transforms.test_param_to_matrix_2d": {
     "line number": [
      254
     ]
    },
    "dipy.align.tests.test_transforms.test_param_to_matrix_3d": {
     "line number": [
      255
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.tests.test_transforms.Transform": {
  "data": {
   "shadows": "dipy.align.transforms.Transform"
  },
  "type": "import"
 },
 "dipy.align.tests.test_transforms.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_transforms.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_transforms.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_transforms.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_transforms.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.align.tests.test_transforms.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_transforms.regtransforms": {
  "data": {
   "shadows": "dipy.align.transforms.regtransforms"
  },
  "type": "import"
 },
 "dipy.align.tests.test_transforms.test_identity_parameters": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "dipy.align.transforms.regtransforms.values": {
     "line number": [
      179
     ]
    },
    "numpy.eye": {
     "line number": [
      183
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_transforms.test_invalid_transform": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      239,
      240,
      241
     ]
    },
    "dipy.align.transforms.Transform": {
     "line number": [
      236
     ]
    },
    "numpy.ndarray": {
     "line number": [
      237,
      238
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      245,
      248
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      239,
      240,
      241
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_transforms.test_jacobian_functions": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      225
     ]
    },
    "dipy.align.transforms.regtransforms.values": {
     "line number": [
      194,
      220
     ]
    },
    "numpy.array": {
     "line number": [
      212
     ]
    },
    "numpy.empty": {
     "line number": [
      198
     ]
    },
    "numpy.ones": {
     "line number": [
      207
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      189
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      216
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      225
     ]
    },
    "numpy.zeros": {
     "line number": [
      223,
      224
     ]
    },
    "range": {
     "line number": [
      202,
      209
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_transforms.test_number_of_parameters": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "dipy.align.transforms.regtransforms.items": {
     "line number": [
      22
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_transforms.test_param_to_matrix_2d": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      80
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      31,
      39,
      49,
      59,
      67
     ]
    },
    "dipy.align.transforms.regtransforms.values": {
     "line number": [
      76
     ]
    },
    "numpy.array": {
     "line number": [
      33,
      34,
      41,
      44,
      51,
      54,
      61,
      62
     ]
    },
    "numpy.cos": {
     "line number": [
      42,
      52
     ]
    },
    "numpy.eye": {
     "line number": [
      69
     ]
    },
    "numpy.float64": {
     "line number": [
      79
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      29
     ]
    },
    "numpy.sin": {
     "line number": [
      43,
      53
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      46,
      56,
      64,
      73
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      80
     ]
    },
    "numpy.zeros": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_transforms.test_param_to_matrix_3d": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      175
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      86,
      97,
      123,
      150,
      161
     ]
    },
    "dipy.align.transforms.regtransforms.values": {
     "line number": [
      171
     ]
    },
    "numpy.array": {
     "line number": [
      88,
      89,
      106,
      109,
      112,
      132,
      135,
      138,
      152,
      153
     ]
    },
    "numpy.cos": {
     "line number": [
      99,
      101,
      103,
      125,
      127,
      129
     ]
    },
    "numpy.eye": {
     "line number": [
      117,
      143,
      163
     ]
    },
    "numpy.float64": {
     "line number": [
      174
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      84
     ]
    },
    "numpy.sin": {
     "line number": [
      100,
      102,
      104,
      126,
      128,
      130
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      120,
      147,
      158,
      168
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      94
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      175
     ]
    },
    "numpy.zeros": {
     "line number": [
      174
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields": {
  "data": {},
  "type": "module"
 },
 "dipy.align.tests.test_vector_fields.apply_affine": {
  "data": {
   "shadows": "nibabel.affines.apply_affine"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.floating": {
  "data": {
   "shadows": "dipy.align.floating"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.from_matvec": {
  "data": {
   "shadows": "nibabel.affines.from_matvec"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.geometry": {
  "data": {
   "shadows": "dipy.core.geometry"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.imwarp": {
  "data": {
   "shadows": "dipy.align.imwarp"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.map_coordinates": {
  "data": {
   "shadows": "scipy.ndimage.interpolation.map_coordinates"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.regtransforms": {
  "data": {
   "shadows": "dipy.align.transforms.regtransforms"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.sample_domain_regular": {
  "data": {
   "shadows": "dipy.align.parzenhist.sample_domain_regular"
  },
  "type": "import"
 },
 "dipy.align.tests.test_vector_fields.test_affine_transforms_2d": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      552,
      554,
      561,
      567
     ]
    },
    "dipy.align.floating": {
     "line number": [
      488
     ]
    },
    "dipy.align.vector_fields.create_circle": {
     "line number": [
      487
     ]
    },
    "dipy.align.vector_fields.transform_2d_affine": {
     "line number": [
      524,
      536,
      552,
      555
     ]
    },
    "dipy.align.vector_fields.transform_2d_affine_nn": {
     "line number": [
      531,
      541,
      562,
      568
     ]
    },
    "numpy.apply_along_axis": {
     "line number": [
      521
     ]
    },
    "numpy.array": {
     "line number": [
      488,
      501,
      510,
      514,
      525,
      532,
      537,
      542,
      550
     ]
    },
    "numpy.asarray": {
     "line number": [
      491,
      492
     ]
    },
    "numpy.cos": {
     "line number": [
      507
     ]
    },
    "numpy.empty": {
     "line number": [
      493
     ]
    },
    "numpy.float64": {
     "line number": [
      493,
      547,
      548
     ]
    },
    "numpy.int32": {
     "line number": [
      526,
      532,
      538,
      543,
      550
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      504
     ]
    },
    "numpy.nan": {
     "line number": [
      549
     ]
    },
    "numpy.ones": {
     "line number": [
      494
     ]
    },
    "numpy.pi": {
     "line number": [
      505,
      505
     ]
    },
    "numpy.sin": {
     "line number": [
      508
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      527,
      533
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      539,
      544
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      552,
      553,
      560,
      566
     ]
    },
    "numpy.zeros": {
     "line number": [
      547,
      548
     ]
    },
    "range": {
     "line number": [
      491,
      492
     ]
    },
    "scipy.ndimage.interpolation.map_coordinates": {
     "line number": [
      523,
      530
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_affine_transforms_3d": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      653,
      655,
      662,
      668
     ]
    },
    "dipy.align.floating": {
     "line number": [
      589
     ]
    },
    "dipy.align.vector_fields.create_sphere": {
     "line number": [
      587
     ]
    },
    "dipy.align.vector_fields.transform_3d_affine": {
     "line number": [
      628,
      639,
      653,
      656
     ]
    },
    "dipy.align.vector_fields.transform_3d_affine_nn": {
     "line number": [
      634,
      643,
      663,
      669
     ]
    },
    "dipy.core.geometry.rodrigues_axis_rotation": {
     "line number": [
      614
     ]
    },
    "numpy.apply_along_axis": {
     "line number": [
      625
     ]
    },
    "numpy.array": {
     "line number": [
      589,
      604,
      606,
      617,
      629,
      635,
      640,
      644,
      651
     ]
    },
    "numpy.asarray": {
     "line number": [
      592,
      593,
      594
     ]
    },
    "numpy.empty": {
     "line number": [
      595
     ]
    },
    "numpy.float64": {
     "line number": [
      595,
      648,
      649
     ]
    },
    "numpy.int32": {
     "line number": [
      629,
      635,
      640,
      644,
      651
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      610
     ]
    },
    "numpy.nan": {
     "line number": [
      650
     ]
    },
    "numpy.ones": {
     "line number": [
      596
     ]
    },
    "numpy.pi": {
     "line number": [
      611,
      611
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      630,
      636
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      641,
      645
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      653,
      654,
      661,
      667
     ]
    },
    "numpy.zeros": {
     "line number": [
      613,
      648,
      649
     ]
    },
    "range": {
     "line number": [
      592,
      593,
      594
     ]
    },
    "scipy.ndimage.interpolation.map_coordinates": {
     "line number": [
      627,
      633
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_circle": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": {
    "dipy.align.vector_fields.create_circle": {
     "line number": [
      239
     ]
    },
    "numpy.asarray": {
     "line number": [
      230,
      231
     ]
    },
    "numpy.empty": {
     "line number": [
      232
     ]
    },
    "numpy.float64": {
     "line number": [
      232
     ]
    },
    "numpy.ones": {
     "line number": [
      233
     ]
    },
    "numpy.sqrt": {
     "line number": [
      236
     ]
    },
    "numpy.sum": {
     "line number": [
      236
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      240
     ]
    },
    "range": {
     "line number": [
      230,
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_compose_vector_fields_2d": {
  "data": {
   "lineno": 675,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      799,
      801
     ]
    },
    "dipy.align.floating": {
     "line number": [
      708,
      716,
      720,
      782
     ]
    },
    "dipy.align.vector_fields.compose_vector_fields_2d": {
     "line number": [
      741,
      758,
      783,
      792,
      799,
      801
     ]
    },
    "dipy.align.vector_fields.create_random_displacement_2d": {
     "line number": [
      703,
      711
     ]
    },
    "dipy.align.vector_fields.warp_2d": {
     "line number": [
      747,
      762
     ]
    },
    "dipy.align.vector_fields.warp_2d_nn": {
     "line number": [
      752,
      767
     ]
    },
    "numpy.array": {
     "line number": [
      690,
      694,
      704,
      706,
      708,
      709,
      712,
      714,
      716,
      717,
      747,
      752,
      762,
      767,
      781
     ]
    },
    "numpy.asarray": {
     "line number": [
      772,
      773
     ]
    },
    "numpy.empty": {
     "line number": [
      720,
      774
     ]
    },
    "numpy.float64": {
     "line number": [
      774,
      797,
      798
     ]
    },
    "numpy.int32": {
     "line number": [
      704,
      706,
      712,
      714
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      693,
      736
     ]
    },
    "numpy.ones": {
     "line number": [
      775
     ]
    },
    "numpy.random.randint": {
     "line number": [
      722,
      778
     ]
    },
    "numpy.random.seed": {
     "line number": [
      682
     ]
    },
    "numpy.size": {
     "line number": [
      722
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      749,
      754,
      764,
      769,
      788,
      794
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      799,
      801
     ]
    },
    "numpy.zeros": {
     "line number": [
      797,
      798
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      788,
      794
     ]
    },
    "range": {
     "line number": [
      772,
      773
     ]
    },
    "tuple": {
     "line number": [
      722
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_compose_vector_fields_3d": {
  "data": {
   "lineno": 805,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      935,
      937
     ]
    },
    "dipy.align.floating": {
     "line number": [
      840,
      847,
      851,
      918
     ]
    },
    "dipy.align.vector_fields.compose_vector_fields_3d": {
     "line number": [
      875,
      892,
      919,
      928,
      935,
      937
     ]
    },
    "dipy.align.vector_fields.create_random_displacement_3d": {
     "line number": [
      836,
      843
     ]
    },
    "dipy.align.vector_fields.warp_3d": {
     "line number": [
      881,
      896
     ]
    },
    "dipy.align.vector_fields.warp_3d_nn": {
     "line number": [
      886,
      901
     ]
    },
    "numpy.array": {
     "line number": [
      821,
      826,
      837,
      838,
      840,
      841,
      844,
      845,
      847,
      848,
      881,
      886,
      896,
      901,
      917
     ]
    },
    "numpy.asarray": {
     "line number": [
      906,
      907,
      908
     ]
    },
    "numpy.empty": {
     "line number": [
      851,
      909
     ]
    },
    "numpy.float64": {
     "line number": [
      909,
      933,
      934
     ]
    },
    "numpy.int32": {
     "line number": [
      837,
      838,
      845,
      846
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      825,
      870
     ]
    },
    "numpy.ones": {
     "line number": [
      910
     ]
    },
    "numpy.random.randint": {
     "line number": [
      853,
      915
     ]
    },
    "numpy.random.seed": {
     "line number": [
      812
     ]
    },
    "numpy.size": {
     "line number": [
      853
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      883,
      888,
      898,
      903,
      924,
      930
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      935,
      937
     ]
    },
    "numpy.zeros": {
     "line number": [
      933,
      934
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      924,
      930
     ]
    },
    "range": {
     "line number": [
      906,
      907,
      908
     ]
    },
    "tuple": {
     "line number": [
      853
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_downsample_displacement_field_2d": {
  "data": {
   "lineno": 1131,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      1139
     ]
    },
    "dipy.align.vector_fields.downsample_displacement_field_2d": {
     "line number": [
      1159
     ]
    },
    "numpy.empty": {
     "line number": [
      1139
     ]
    },
    "numpy.random.randint": {
     "line number": [
      1140
     ]
    },
    "numpy.random.seed": {
     "line number": [
      1132
     ]
    },
    "numpy.size": {
     "line number": [
      1140
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1160
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_downsample_displacement_field_3d": {
  "data": {
   "lineno": 1206,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      1216
     ]
    },
    "dipy.align.vector_fields.downsample_displacement_field_3d": {
     "line number": [
      1246
     ]
    },
    "numpy.empty": {
     "line number": [
      1216
     ]
    },
    "numpy.random.randint": {
     "line number": [
      1218
     ]
    },
    "numpy.random.seed": {
     "line number": [
      1207
     ]
    },
    "numpy.size": {
     "line number": [
      1218
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1247
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_downsample_scalar_field_2d": {
  "data": {
   "lineno": 1099,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      1107
     ]
    },
    "dipy.align.vector_fields.downsample_scalar_field_2d": {
     "line number": [
      1127
     ]
    },
    "numpy.array": {
     "line number": [
      1127
     ]
    },
    "numpy.empty": {
     "line number": [
      1107
     ]
    },
    "numpy.random.randint": {
     "line number": [
      1108
     ]
    },
    "numpy.random.seed": {
     "line number": [
      1100
     ]
    },
    "numpy.size": {
     "line number": [
      1108
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1128
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_downsample_scalar_field_3d": {
  "data": {
   "lineno": 1163,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      1173
     ]
    },
    "dipy.align.vector_fields.downsample_scalar_field_3d": {
     "line number": [
      1202
     ]
    },
    "numpy.empty": {
     "line number": [
      1173
     ]
    },
    "numpy.random.randint": {
     "line number": [
      1175
     ]
    },
    "numpy.random.seed": {
     "line number": [
      1164
     ]
    },
    "numpy.size": {
     "line number": [
      1175
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1203
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_gradient_2d": {
  "data": {
   "lineno": 1337,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1383,
      1385,
      1402,
      1404,
      1406
     ]
    },
    "dipy.align.floating": {
     "line number": [
      1363,
      1370,
      1390
     ]
    },
    "dipy.align.parzenhist.sample_domain_regular": {
     "line number": [
      1367
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      1349
     ]
    },
    "dipy.align.vector_fields.gradient": {
     "line number": [
      1396,
      1402,
      1404,
      1406
     ]
    },
    "dipy.align.vector_fields.sparse_gradient": {
     "line number": [
      1376,
      1383,
      1385
     ]
    },
    "numpy.abs": {
     "line number": [
      1377,
      1397
     ]
    },
    "numpy.array": {
     "line number": [
      1350,
      1367,
      1368
     ]
    },
    "numpy.asarray": {
     "line number": [
      1341,
      1342
     ]
    },
    "numpy.empty": {
     "line number": [
      1343,
      1370,
      1390
     ]
    },
    "numpy.eye": {
     "line number": [
      1381
     ]
    },
    "numpy.float64": {
     "line number": [
      1343
     ]
    },
    "numpy.int32": {
     "line number": [
      1367
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      1374,
      1394
     ]
    },
    "numpy.ones": {
     "line number": [
      1344,
      1375,
      1382,
      1395
     ]
    },
    "numpy.random.seed": {
     "line number": [
      1338
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1379,
      1400
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1383,
      1385,
      1402,
      1404,
      1406
     ]
    },
    "range": {
     "line number": [
      1341,
      1342
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_gradient_3d": {
  "data": {
   "lineno": 1410,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1464,
      1466,
      1484,
      1486,
      1488
     ]
    },
    "dipy.align.floating": {
     "line number": [
      1440,
      1446,
      1471
     ]
    },
    "dipy.align.parzenhist.sample_domain_regular": {
     "line number": [
      1443
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      1424
     ]
    },
    "dipy.align.vector_fields.gradient": {
     "line number": [
      1478,
      1484,
      1486,
      1488
     ]
    },
    "dipy.align.vector_fields.sparse_gradient": {
     "line number": [
      1456,
      1464,
      1466
     ]
    },
    "numpy.abs": {
     "line number": [
      1458,
      1479
     ]
    },
    "numpy.array": {
     "line number": [
      1425,
      1443,
      1444
     ]
    },
    "numpy.asarray": {
     "line number": [
      1414,
      1415,
      1416
     ]
    },
    "numpy.empty": {
     "line number": [
      1446,
      1471
     ]
    },
    "numpy.eye": {
     "line number": [
      1462
     ]
    },
    "numpy.float64": {
     "line number": [
      1417
     ]
    },
    "numpy.int32": {
     "line number": [
      1443
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      1454,
      1476
     ]
    },
    "numpy.ones": {
     "line number": [
      1418,
      1455,
      1463,
      1477
     ]
    },
    "numpy.random.seed": {
     "line number": [
      1411
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1460,
      1482
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1464,
      1466,
      1484,
      1486,
      1488
     ]
    },
    "numpy.zeros": {
     "line number": [
      1417
     ]
    },
    "range": {
     "line number": [
      1414,
      1415,
      1416
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_harmonic_fields_2d": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": {
    "dipy.align.vector_fields.create_harmonic_fields_2d": {
     "line number": [
      187
     ]
    },
    "numpy.arctan2": {
     "line number": [
      178
     ]
    },
    "numpy.cos": {
     "line number": [
      180,
      182,
      183,
      184
     ]
    },
    "numpy.empty": {
     "line number": [
      170,
      171
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      188,
      189
     ]
    },
    "range": {
     "line number": [
      174,
      175
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_harmonic_fields_3d": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "dipy.align.vector_fields.create_harmonic_fields_3d": {
     "line number": [
      221
     ]
    },
    "numpy.arctan2": {
     "line number": [
      209
     ]
    },
    "numpy.cos": {
     "line number": [
      211,
      213,
      215,
      216,
      217,
      218
     ]
    },
    "numpy.empty": {
     "line number": [
      199,
      200
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      222,
      223
     ]
    },
    "range": {
     "line number": [
      203,
      204,
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_invert_vector_field_2d": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      994
     ]
    },
    "dipy.align.floating": {
     "line number": [
      957
     ]
    },
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      984
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_2d": {
     "line number": [
      956
     ]
    },
    "dipy.align.vector_fields.invert_vector_field_fixed_point_2d": {
     "line number": [
      980,
      994
     ]
    },
    "dipy.align.vector_fields.reorient_vector_field_2d": {
     "line number": [
      977
     ]
    },
    "numpy.array": {
     "line number": [
      951,
      964,
      968,
      981,
      993
     ]
    },
    "numpy.asarray": {
     "line number": [
      957
     ]
    },
    "numpy.copy": {
     "line number": [
      974
     ]
    },
    "numpy.cos": {
     "line number": [
      961
     ]
    },
    "numpy.float64": {
     "line number": [
      992
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      954,
      973
     ]
    },
    "numpy.pi": {
     "line number": [
      959,
      959
     ]
    },
    "numpy.sin": {
     "line number": [
      962
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      988,
      989
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      994
     ]
    },
    "numpy.zeros": {
     "line number": [
      992
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_invert_vector_field_3d": {
  "data": {
   "lineno": 998,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1059
     ]
    },
    "dipy.align.floating": {
     "line number": [
      1020
     ]
    },
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      1049
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_3d": {
     "line number": [
      1019
     ]
    },
    "dipy.align.vector_fields.invert_vector_field_fixed_point_3d": {
     "line number": [
      1046,
      1059
     ]
    },
    "dipy.align.vector_fields.reorient_vector_field_3d": {
     "line number": [
      1037
     ]
    },
    "dipy.core.geometry.rodrigues_axis_rotation": {
     "line number": [
      1025
     ]
    },
    "numpy.array": {
     "line number": [
      1010,
      1013,
      1027,
      1047,
      1058
     ]
    },
    "numpy.asarray": {
     "line number": [
      1020
     ]
    },
    "numpy.copy": {
     "line number": [
      1034
     ]
    },
    "numpy.float64": {
     "line number": [
      1057
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      1017,
      1033
     ]
    },
    "numpy.pi": {
     "line number": [
      1022,
      1022
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1053,
      1054
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1059
     ]
    },
    "numpy.zeros": {
     "line number": [
      1024,
      1057
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_random_displacement_field_2d": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      82,
      84
     ]
    },
    "dipy.align.floating": {
     "line number": [
      59
     ]
    },
    "dipy.align.vector_fields.create_random_displacement_2d": {
     "line number": [
      56,
      82,
      84
     ]
    },
    "numpy.apply_along_axis": {
     "line number": [
      67,
      72
     ]
    },
    "numpy.array": {
     "line number": [
      34,
      44,
      48,
      57,
      58,
      59,
      60,
      81
     ]
    },
    "numpy.asarray": {
     "line number": [
      23,
      24
     ]
    },
    "numpy.cos": {
     "line number": [
      41
     ]
    },
    "numpy.empty": {
     "line number": [
      25
     ]
    },
    "numpy.float64": {
     "line number": [
      25,
      79,
      80
     ]
    },
    "numpy.int32": {
     "line number": [
      57,
      58,
      81
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      37,
      54
     ]
    },
    "numpy.ones": {
     "line number": [
      26
     ]
    },
    "numpy.pi": {
     "line number": [
      39,
      39
     ]
    },
    "numpy.random.seed": {
     "line number": [
      18
     ]
    },
    "numpy.sin": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      75,
      76
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      62,
      64
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      82,
      84
     ]
    },
    "numpy.zeros": {
     "line number": [
      79,
      80
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      68
     ]
    },
    "range": {
     "line number": [
      23,
      24,
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_random_displacement_field_3d": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      159,
      161
     ]
    },
    "dipy.align.floating": {
     "line number": [
      134
     ]
    },
    "dipy.align.vector_fields.create_random_displacement_2d": {
     "line number": [
      159,
      161
     ]
    },
    "dipy.align.vector_fields.create_random_displacement_3d": {
     "line number": [
      131
     ]
    },
    "dipy.core.geometry.rodrigues_axis_rotation": {
     "line number": [
      119
     ]
    },
    "numpy.apply_along_axis": {
     "line number": [
      142,
      148
     ]
    },
    "numpy.array": {
     "line number": [
      105,
      110,
      122,
      132,
      133,
      134,
      135,
      158
     ]
    },
    "numpy.asarray": {
     "line number": [
      94,
      95,
      96
     ]
    },
    "numpy.empty": {
     "line number": [
      97
     ]
    },
    "numpy.float64": {
     "line number": [
      97,
      156,
      157
     ]
    },
    "numpy.int32": {
     "line number": [
      132,
      133,
      158
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      114,
      129
     ]
    },
    "numpy.ones": {
     "line number": [
      98
     ]
    },
    "numpy.pi": {
     "line number": [
      116,
      116
     ]
    },
    "numpy.random.seed": {
     "line number": [
      89
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      151,
      152,
      153
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      137,
      139
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      159,
      161
     ]
    },
    "numpy.zeros": {
     "line number": [
      118,
      156,
      157
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      143
     ]
    },
    "range": {
     "line number": [
      94,
      95,
      96,
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_reorient_random_vector_fields": {
  "data": {
   "lineno": 1313,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1334
     ]
    },
    "dipy.align.floating": {
     "line number": [
      1320,
      1328
     ]
    },
    "dipy.align.vector_fields.reorient_vector_field_2d": {
     "line number": [
      1316
     ]
    },
    "dipy.align.vector_fields.reorient_vector_field_3d": {
     "line number": [
      1317
     ]
    },
    "func": {
     "line number": [
      1323,
      1329,
      1334
     ]
    },
    "nibabel.affines.apply_affine": {
     "line number": [
      1324,
      1330
     ]
    },
    "nibabel.affines.from_matvec": {
     "line number": [
      1321
     ]
    },
    "numpy.arange": {
     "line number": [
      1326
     ]
    },
    "numpy.eye": {
     "line number": [
      1333
     ]
    },
    "numpy.random.normal": {
     "line number": [
      1319,
      1321
     ]
    },
    "numpy.random.seed": {
     "line number": [
      1314
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1324,
      1330
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1334
     ]
    },
    "numpy.zeros": {
     "line number": [
      1322
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_reorient_vector_field_2d": {
  "data": {
   "lineno": 1250,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1271
     ]
    },
    "dipy.align.floating": {
     "line number": [
      1253,
      1256
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_2d": {
     "line number": [
      1252
     ]
    },
    "dipy.align.vector_fields.reorient_vector_field_2d": {
     "line number": [
      1263,
      1264,
      1271
     ]
    },
    "numpy.array": {
     "line number": [
      1253,
      1262
     ]
    },
    "numpy.empty": {
     "line number": [
      1256
     ]
    },
    "numpy.float64": {
     "line number": [
      1270
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1261
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1267
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1271
     ]
    },
    "numpy.zeros": {
     "line number": [
      1270
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_reorient_vector_field_3d": {
  "data": {
   "lineno": 1274,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1310
     ]
    },
    "dipy.align.floating": {
     "line number": [
      1277,
      1278,
      1281
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_3d": {
     "line number": [
      1276
     ]
    },
    "dipy.align.vector_fields.reorient_vector_field_3d": {
     "line number": [
      1289,
      1290,
      1302,
      1303,
      1310
     ]
    },
    "numpy.array": {
     "line number": [
      1277,
      1278,
      1288,
      1301
     ]
    },
    "numpy.empty": {
     "line number": [
      1281
     ]
    },
    "numpy.float64": {
     "line number": [
      1309
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1287
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1293,
      1306
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1310
     ]
    },
    "numpy.zeros": {
     "line number": [
      1309
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_resample_vector_field_2d": {
  "data": {
   "lineno": 1063,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      1073
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_2d": {
     "line number": [
      1071
     ]
    },
    "dipy.align.vector_fields.resample_displacement_field_2d": {
     "line number": [
      1075
     ]
    },
    "numpy.array": {
     "line number": [
      1068,
      1069,
      1070,
      1073
     ]
    },
    "numpy.int32": {
     "line number": [
      1068,
      1069
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1078
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_resample_vector_field_3d": {
  "data": {
   "lineno": 1081,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      1091
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_3d": {
     "line number": [
      1089
     ]
    },
    "dipy.align.vector_fields.resample_displacement_field_3d": {
     "line number": [
      1093
     ]
    },
    "numpy.array": {
     "line number": [
      1086,
      1087,
      1088,
      1091
     ]
    },
    "numpy.int32": {
     "line number": [
      1086,
      1087
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1096
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_sphere": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": {
    "dipy.align.vector_fields.create_sphere": {
     "line number": [
      259
     ]
    },
    "numpy.asarray": {
     "line number": [
      248,
      249,
      250
     ]
    },
    "numpy.empty": {
     "line number": [
      251
     ]
    },
    "numpy.float64": {
     "line number": [
      251
     ]
    },
    "numpy.ones": {
     "line number": [
      252
     ]
    },
    "numpy.sqrt": {
     "line number": [
      256
     ]
    },
    "numpy.sum": {
     "line number": [
      256
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      260
     ]
    },
    "range": {
     "line number": [
      248,
      249,
      250
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_warping_2d": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      356,
      357,
      358,
      360,
      361,
      362
     ]
    },
    "dipy.align.floating": {
     "line number": [
      273,
      277,
      326
     ]
    },
    "dipy.align.vector_fields.create_circle": {
     "line number": [
      272
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_2d": {
     "line number": [
      276
     ]
    },
    "dipy.align.vector_fields.reorient_vector_field_2d": {
     "line number": [
      325
     ]
    },
    "dipy.align.vector_fields.warp_2d": {
     "line number": [
      341,
      356,
      357,
      358
     ]
    },
    "dipy.align.vector_fields.warp_2d_nn": {
     "line number": [
      347,
      360,
      361,
      362
     ]
    },
    "numpy.apply_along_axis": {
     "line number": [
      330,
      335,
      336
     ]
    },
    "numpy.array": {
     "line number": [
      273,
      290,
      301,
      305,
      342,
      348,
      354
     ]
    },
    "numpy.asarray": {
     "line number": [
      277,
      280,
      281
     ]
    },
    "numpy.copy": {
     "line number": [
      324
     ]
    },
    "numpy.cos": {
     "line number": [
      298
     ]
    },
    "numpy.empty": {
     "line number": [
      282
     ]
    },
    "numpy.float64": {
     "line number": [
      282,
      352,
      353
     ]
    },
    "numpy.int32": {
     "line number": [
      342,
      348,
      354
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      293,
      314,
      316
     ]
    },
    "numpy.ones": {
     "line number": [
      283
     ]
    },
    "numpy.pi": {
     "line number": [
      296,
      296
     ]
    },
    "numpy.sin": {
     "line number": [
      299
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      343,
      349
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      356,
      357,
      358,
      360,
      361,
      362
     ]
    },
    "numpy.zeros": {
     "line number": [
      326,
      352,
      353
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      331
     ]
    },
    "range": {
     "line number": [
      280,
      281
     ]
    },
    "scipy.ndimage.interpolation.map_coordinates": {
     "line number": [
      332,
      333,
      340,
      346
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.test_warping_3d": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      466,
      467,
      468,
      470,
      471,
      472
     ]
    },
    "dipy.align.floating": {
     "line number": [
      377,
      381,
      435
     ]
    },
    "dipy.align.vector_fields.create_harmonic_fields_3d": {
     "line number": [
      380
     ]
    },
    "dipy.align.vector_fields.create_sphere": {
     "line number": [
      376
     ]
    },
    "dipy.align.vector_fields.reorient_vector_field_3d": {
     "line number": [
      432
     ]
    },
    "dipy.align.vector_fields.warp_3d": {
     "line number": [
      451,
      466,
      467,
      468
     ]
    },
    "dipy.align.vector_fields.warp_3d_nn": {
     "line number": [
      457,
      470,
      471,
      472
     ]
    },
    "dipy.core.geometry.rodrigues_axis_rotation": {
     "line number": [
      408
     ]
    },
    "numpy.apply_along_axis": {
     "line number": [
      439,
      445,
      446
     ]
    },
    "numpy.array": {
     "line number": [
      377,
      395,
      398,
      411,
      452,
      458,
      464
     ]
    },
    "numpy.asarray": {
     "line number": [
      381,
      384,
      385,
      386
     ]
    },
    "numpy.copy": {
     "line number": [
      431
     ]
    },
    "numpy.empty": {
     "line number": [
      387
     ]
    },
    "numpy.float64": {
     "line number": [
      387,
      462,
      463
     ]
    },
    "numpy.int32": {
     "line number": [
      452,
      458,
      464
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      402,
      421,
      423
     ]
    },
    "numpy.ones": {
     "line number": [
      388
     ]
    },
    "numpy.pi": {
     "line number": [
      405,
      405
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      453,
      459
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      466,
      467,
      468,
      470,
      471,
      472
     ]
    },
    "numpy.zeros": {
     "line number": [
      407,
      434,
      462,
      463
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      440
     ]
    },
    "range": {
     "line number": [
      384,
      385,
      386
     ]
    },
    "scipy.ndimage.interpolation.map_coordinates": {
     "line number": [
      441,
      442,
      443,
      450,
      456
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_vector_fields.vfu": {
  "data": {
   "shadows": "dipy.align.vector_fields"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      71
     ]
    },
    "dipy.align.tests.test_whole_brain_slr.test_whole_brain_slr": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.align.tests.test_whole_brain_slr.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.bundles_distances_mam": {
  "data": {
   "shadows": "dipy.tracking.distances.bundles_distances_mam"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.compose_matrix44": {
  "data": {
   "shadows": "dipy.align.streamlinear.compose_matrix44"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.decompose_matrix44": {
  "data": {
   "shadows": "dipy.align.streamlinear.decompose_matrix44"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.slr_with_qbx": {
  "data": {
   "shadows": "dipy.align.streamlinear.slr_with_qbx"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.test_whole_brain_slr": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "dipy.align.streamlinear.compose_matrix44": {
     "line number": [
      48
     ]
    },
    "dipy.align.streamlinear.decompose_matrix44": {
     "line number": [
      60,
      69
     ]
    },
    "dipy.align.streamlinear.slr_with_qbx": {
     "line number": [
      53,
      62
     ]
    },
    "dipy.align.streamlinear.transform_streamlines": {
     "line number": [
      51
     ]
    },
    "dipy.align.streamlinear.whole_brain_slr": {
     "line number": [
      27
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      15
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      17
     ]
    },
    "dipy.tracking.distances.bundles_distances_mam": {
     "line number": [
      34,
      35
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      20
     ]
    },
    "numpy.array": {
     "line number": [
      25
     ]
    },
    "numpy.inf": {
     "line number": [
      29,
      55,
      64
     ]
    },
    "numpy.min": {
     "line number": [
      37,
      38
     ]
    },
    "numpy.sum": {
     "line number": [
      37,
      38
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      44,
      60,
      69
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      42
     ]
    },
    "print": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.align.tests.test_whole_brain_slr.transform_streamlines": {
  "data": {
   "shadows": "dipy.align.streamlinear.transform_streamlines"
  },
  "type": "import"
 },
 "dipy.align.tests.test_whole_brain_slr.whole_brain_slr": {
  "data": {
   "shadows": "dipy.align.streamlinear.whole_brain_slr"
  },
  "type": "import"
 },
 "dipy.bench": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "dipy.boots": {
  "data": {},
  "type": "module"
 },
 "dipy.conftest": {
  "data": {
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      18
     ]
    },
    "UserWarning": {
     "line number": [
      19
     ]
    },
    "dipy.conftest.warnings": {
     "line number": [
      18,
      19
     ]
    },
    "distutils.version.LooseVersion": {
     "line number": [
      15,
      15
     ]
    },
    "numpy.__version__": {
     "line number": [
      15
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.conftest.LooseVersion": {
  "data": {
   "shadows": "distutils.version.LooseVersion"
  },
  "type": "import"
 },
 "dipy.conftest.collect_ignore": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "dipy.conftest.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.conftest.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "dipy.conftest.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.core": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.Tester": {
     "line number": [
      6,
      7
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.core.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.core.geometry": {
  "data": {
   "symbols_in_volume": {
    "dict": {
     "line number": [
      26
     ]
    },
    "dipy.core.geometry._AXES2TUPLE": {
     "line number": [
      26
     ]
    },
    "float": {
     "line number": [
      10
     ]
    },
    "numpy.finfo": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.core.geometry._AXES2TUPLE": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "dipy.core.geometry._EPS": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "dipy.core.geometry._NEXT_AXIS": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "dipy.core.geometry._TUPLE2AXES": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "dipy.core.geometry.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.core.geometry.cart2sphere": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "numpy.arccos": {
     "line number": [
      129
     ]
    },
    "numpy.arctan2": {
     "line number": [
      131
     ]
    },
    "numpy.broadcast_arrays": {
     "line number": [
      132
     ]
    },
    "numpy.divide": {
     "line number": [
      129
     ]
    },
    "numpy.sqrt": {
     "line number": [
      128
     ]
    },
    "numpy.where": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.cart_distance": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": {
    "numpy.sqrt": {
     "line number": [
      435
     ]
    },
    "numpy.subtract": {
     "line number": [
      434
     ]
    },
    "numpy.sum": {
     "line number": [
      435
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.circumradius": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      808
     ]
    },
    "numpy.cross": {
     "line number": [
      801
     ]
    },
    "numpy.dot": {
     "line number": [
      804,
      804,
      805,
      808
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      808
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      798,
      800,
      803,
      809
     ]
    },
    "numpy.max": {
     "line number": [
      804
     ]
    },
    "numpy.sqrt": {
     "line number": [
      804
     ]
    },
    "numpy.vstack": {
     "line number": [
      807
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.compose_matrix": {
  "data": {
   "lineno": 621,
   "symbols_in_volume": {
    "dipy.core.geometry.euler_matrix": {
     "line number": [
      671
     ]
    },
    "numpy.dot": {
     "line number": [
      665,
      669,
      672,
      678,
      684
     ]
    },
    "numpy.identity": {
     "line number": [
      661,
      663,
      667,
      674,
      680
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.compose_transformations": {
  "data": {
   "lineno": 887,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      905
     ]
    },
    "len": {
     "line number": [
      904
     ]
    },
    "numpy.dot": {
     "line number": [
      909
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.decompose_matrix": {
  "data": {
   "lineno": 689,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      728,
      733
     ]
    },
    "abs": {
     "line number": [
      727,
      739
     ]
    },
    "any": {
     "line number": [
      739
     ]
    },
    "dipy.core.geometry._EPS": {
     "line number": [
      727,
      739
     ]
    },
    "dipy.core.geometry.math": {
     "line number": [
      768,
      769,
      770,
      771,
      774
     ]
    },
    "dipy.core.geometry.vector_norm": {
     "line number": [
      749,
      753,
      760
     ]
    },
    "numpy.array": {
     "line number": [
      726,
      743
     ]
    },
    "numpy.cross": {
     "line number": [
      764
     ]
    },
    "numpy.dot": {
     "line number": [
      740,
      751,
      756,
      758,
      764
     ]
    },
    "numpy.float64": {
     "line number": [
      726,
      735,
      743
     ]
    },
    "numpy.linalg.det": {
     "line number": [
      732
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      740
     ]
    },
    "numpy.zeros": {
     "line number": [
      735
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.dist_to_corner": {
  "data": {
   "lineno": 1011,
   "symbols_in_volume": {
    "numpy.diag": {
     "line number": [
      1027
     ]
    },
    "numpy.linalg.cholesky": {
     "line number": [
      1027
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1028
     ]
    },
    "numpy.sum": {
     "line number": [
      1028
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.core.geometry.euler_matrix": {
  "data": {
   "lineno": 544,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      580
     ]
    },
    "KeyError": {
     "line number": [
      580
     ]
    },
    "dipy.core.geometry._AXES2TUPLE": {
     "line number": [
      579
     ]
    },
    "dipy.core.geometry._NEXT_AXIS": {
     "line number": [
      584,
      585
     ]
    },
    "dipy.core.geometry.math": {
     "line number": [
      592,
      592,
      592,
      593,
      593,
      593
     ]
    },
    "numpy.identity": {
     "line number": [
      597
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.is_hemispherical": {
  "data": {
   "lineno": 1031,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1055,
      1057
     ]
    },
    "dipy.core.geometry.itertools": {
     "line number": [
      1060
     ]
    },
    "int": {
     "line number": [
      1076,
      1080
     ]
    },
    "len": {
     "line number": [
      1076,
      1080
     ]
    },
    "numpy.allclose": {
     "line number": [
      1056
     ]
    },
    "numpy.arccos": {
     "line number": [
      1069
     ]
    },
    "numpy.array": {
     "line number": [
      1086
     ]
    },
    "numpy.cross": {
     "line number": [
      1061
     ]
    },
    "numpy.dot": {
     "line number": [
      1069
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1056,
      1064,
      1084
     ]
    },
    "numpy.mean": {
     "line number": [
      1083
     ]
    },
    "numpy.newaxis": {
     "line number": [
      1064
     ]
    },
    "numpy.pi": {
     "line number": [
      1072
     ]
    },
    "numpy.sum": {
     "line number": [
      1076,
      1080
     ]
    },
    "zip": {
     "line number": [
      1060
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "dipy.core.geometry.lambert_equal_area_projection_cart": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": {
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      540
     ]
    },
    "dipy.core.geometry.lambert_equal_area_projection_polar": {
     "line number": [
      541
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.lambert_equal_area_projection_polar": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": {
    "numpy.column_stack": {
     "line number": [
      506
     ]
    },
    "numpy.cos": {
     "line number": [
      506
     ]
    },
    "numpy.repeat": {
     "line number": [
      505
     ]
    },
    "numpy.sin": {
     "line number": [
      505,
      506
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "dipy.core.geometry.nearest_pos_semi_def": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": {
    "numpy.argsort": {
     "line number": [
      317,
      342
     ]
    },
    "numpy.asarray": {
     "line number": [
      314
     ]
    },
    "numpy.diag": {
     "line number": [
      343
     ]
    },
    "numpy.dot": {
     "line number": [
      343,
      343
     ]
    },
    "numpy.linalg.eigh": {
     "line number": [
      315
     ]
    },
    "numpy.max": {
     "line number": [
      327,
      336,
      339
     ]
    },
    "numpy.sum": {
     "line number": [
      319
     ]
    },
    "numpy.zeros": {
     "line number": [
      323,
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.normalized_vector": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "dipy.core.geometry.vector_norm": {
     "line number": [
      175
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.geometry.npl": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "dipy.core.geometry.perpendicular_directions": {
  "data": {
   "lineno": 914,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      999
     ]
    },
    "dipy.core.geometry.math": {
     "line number": [
      991,
      993
     ]
    },
    "float": {
     "line number": [
      984
     ]
    },
    "numpy.array": {
     "line number": [
      984,
      1001,
      1005
     ]
    },
    "numpy.cos": {
     "line number": [
      995
     ]
    },
    "numpy.finfo": {
     "line number": [
      987
     ]
    },
    "numpy.linspace": {
     "line number": [
      991,
      993
     ]
    },
    "numpy.sin": {
     "line number": [
      996
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1000,
      1004
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.core.geometry.rodrigues_axis_rotation": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      274,
      278
     ]
    },
    "numpy.cos": {
     "line number": [
      276
     ]
    },
    "numpy.deg2rad": {
     "line number": [
      271
     ]
    },
    "numpy.dot": {
     "line number": [
      276,
      281
     ]
    },
    "numpy.eye": {
     "line number": [
      275,
      280
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      273
     ]
    },
    "numpy.sin": {
     "line number": [
      275
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.sph2latlon": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "numpy.pi": {
     "line number": [
      145,
      145
     ]
    },
    "numpy.rad2deg": {
     "line number": [
      145,
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.sphere2cart": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "numpy.broadcast_arrays": {
     "line number": [
      98
     ]
    },
    "numpy.cos": {
     "line number": [
      95,
      97
     ]
    },
    "numpy.sin": {
     "line number": [
      94,
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.sphere_distance": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      393
     ]
    },
    "numpy.allclose": {
     "line number": [
      391,
      392
     ]
    },
    "numpy.arccos": {
     "line number": [
      397
     ]
    },
    "numpy.asarray": {
     "line number": [
      384,
      385
     ]
    },
    "numpy.inner": {
     "line number": [
      395
     ]
    },
    "numpy.mean": {
     "line number": [
      389,
      389
     ]
    },
    "numpy.sqrt": {
     "line number": [
      386,
      387
     ]
    },
    "numpy.sum": {
     "line number": [
      386,
      387
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.vec2vec_rotmat": {
  "data": {
   "lineno": 812,
   "symbols_in_volume": {
    "float": {
     "line number": [
      856
     ]
    },
    "numpy.any": {
     "line number": [
      881
     ]
    },
    "numpy.array": {
     "line number": [
      872,
      876
     ]
    },
    "numpy.cross": {
     "line number": [
      851
     ]
    },
    "numpy.dot": {
     "line number": [
      868,
      874,
      877,
      877
     ]
    },
    "numpy.eye": {
     "line number": [
      861,
      862,
      882
     ]
    },
    "numpy.finfo": {
     "line number": [
      856
     ]
    },
    "numpy.isnan": {
     "line number": [
      856,
      881
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      852,
      857,
      860,
      869
     ]
    },
    "numpy.sqrt": {
     "line number": [
      875
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.vector_cosine": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      466,
      467
     ]
    },
    "numpy.inner": {
     "line number": [
      470
     ]
    },
    "numpy.sqrt": {
     "line number": [
      468,
      469
     ]
    },
    "numpy.sum": {
     "line number": [
      468,
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.geometry.vector_norm": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "list": {
     "line number": [
      217
     ]
    },
    "numpy.asarray": {
     "line number": [
      211
     ]
    },
    "numpy.sqrt": {
     "line number": [
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      14
     ]
    },
    "dipy.core.gradients.logging": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.core.gradients.GradientTable": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "object": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.core.gradients.GradientTable.__init__": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      63
     ]
    },
    "dipy.io.gradients": {
     "line number": [
      61,
      61,
      64,
      66,
      66
     ]
    },
    "dipy.io.gradients.ndim": {
     "line number": [
      62
     ]
    },
    "dipy.io.gradients.shape": {
     "line number": [
      62
     ]
    },
    "numpy.asarray": {
     "line number": [
      61
     ]
    },
    "numpy.isnan": {
     "line number": [
      66
     ]
    },
    "numpy.where": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.GradientTable.b0s_mask": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "dipy.core.onetime.auto_attr": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.GradientTable.bvals": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "dipy.core.geometry.vector_norm": {
     "line number": [
      73
     ]
    },
    "dipy.core.onetime.auto_attr": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.GradientTable.bvecs": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "dipy.core.onetime.auto_attr": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.GradientTable.gradient_strength": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "dipy.core.gradients.WATER_GYROMAGNETIC_RATIO": {
     "line number": [
      89
     ]
    },
    "dipy.core.onetime.auto_attr": {
     "line number": [
      84
     ]
    },
    "numpy.pi": {
     "line number": [
      87,
      88
     ]
    },
    "numpy.sqrt": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.GradientTable.info": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "dipy.core.gradients.logger": {
     "line number": [
      106,
      107,
      108,
      109,
      110,
      111
     ]
    },
    "property": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.GradientTable.qvals": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "dipy.core.onetime.auto_attr": {
     "line number": [
      79
     ]
    },
    "numpy.pi": {
     "line number": [
      82
     ]
    },
    "numpy.sqrt": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.GradientTable.tau": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "dipy.core.onetime.auto_attr": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.HemiSphere": {
  "data": {
   "shadows": "dipy.core.sphere.HemiSphere"
  },
  "type": "import"
 },
 "dipy.core.gradients.WATER_GYROMAGNETIC_RATIO": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "dipy.core.gradients.auto_attr": {
  "data": {
   "shadows": "dipy.core.onetime.auto_attr"
  },
  "type": "import"
 },
 "dipy.core.gradients.check_multi_b": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": {
    "dipy.core.gradients.unique_bvals": {
     "line number": [
      617
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.disperse_charges": {
  "data": {
   "shadows": "dipy.core.sphere.disperse_charges"
  },
  "type": "import"
 },
 "dipy.core.gradients.generate_bvecs": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": {
    "dipy.core.sphere.HemiSphere": {
     "line number": [
      526
     ]
    },
    "dipy.core.sphere.disperse_charges": {
     "line number": [
      527
     ]
    },
    "numpy.pi": {
     "line number": [
      524,
      525
     ]
    },
    "numpy.random.rand": {
     "line number": [
      524,
      525
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.gradient_table": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      435
     ]
    },
    "dipy.core.gradients.gradient_table_from_bvals_bvecs": {
     "line number": [
      441
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      420,
      422
     ]
    },
    "isinstance": {
     "line number": [
      419,
      421
     ]
    },
    "numpy.asarray": {
     "line number": [
      424,
      438
     ]
    },
    "numpy.squeeze": {
     "line number": [
      430,
      433
     ]
    },
    "str": {
     "line number": [
      419,
      421
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.gradient_table_from_bvals_bvecs": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      152,
      157,
      172,
      174
     ]
    },
    "abs": {
     "line number": [
      170
     ]
    },
    "dipy.core.geometry.vector_norm": {
     "line number": [
      170
     ]
    },
    "dipy.core.gradients.GradientTable": {
     "line number": [
      181
     ]
    },
    "dipy.io.gradients": {
     "line number": [
      179,
      181
     ]
    },
    "numpy.all": {
     "line number": [
      173
     ]
    },
    "numpy.asarray": {
     "line number": [
      146,
      147
     ]
    },
    "numpy.float": {
     "line number": [
      146,
      147
     ]
    },
    "numpy.isnan": {
     "line number": [
      169
     ]
    },
    "numpy.where": {
     "line number": [
      169,
      177
     ]
    },
    "warnings.warn": {
     "line number": [
      161,
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.gradient_table_from_gradient_strength_bvecs": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "dipy.core.gradients.WATER_GYROMAGNETIC_RATIO": {
     "line number": [
      335
     ]
    },
    "dipy.core.gradients.gradient_table_from_bvals_bvecs": {
     "line number": [
      338
     ]
    },
    "numpy.asarray": {
     "line number": [
      331,
      332
     ]
    },
    "numpy.pi": {
     "line number": [
      336,
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.gradient_table_from_qvals_bvecs": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table_from_bvals_bvecs": {
     "line number": [
      259
     ]
    },
    "numpy.asarray": {
     "line number": [
      253,
      254
     ]
    },
    "numpy.pi": {
     "line number": [
      258
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.inv": {
  "data": {
   "shadows": "scipy.linalg.inv"
  },
  "type": "import"
 },
 "dipy.core.gradients.io": {
  "data": {
   "shadows": "dipy.io.gradients"
  },
  "type": "import"
 },
 "dipy.core.gradients.logger": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "dipy.core.gradients.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.core.gradients.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.gradients.polar": {
  "data": {
   "shadows": "scipy.linalg.polar"
  },
  "type": "import"
 },
 "dipy.core.gradients.reorient_bvecs": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      482
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      501
     ]
    },
    "enumerate": {
     "line number": [
      484
     ]
    },
    "len": {
     "line number": [
      479
     ]
    },
    "numpy.dot": {
     "line number": [
      497
     ]
    },
    "numpy.zeros": {
     "line number": [
      499
     ]
    },
    "scipy.linalg.inv": {
     "line number": [
      494
     ]
    },
    "scipy.linalg.polar": {
     "line number": [
      490
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.round_bvals": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": {
    "int": {
     "line number": [
      552
     ]
    },
    "numpy.log10": {
     "line number": [
      552
     ]
    },
    "numpy.max": {
     "line number": [
      552
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.unique_bvals": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": {
    "dipy.core.gradients.round_bvals": {
     "line number": [
      581
     ]
    },
    "numpy.unique": {
     "line number": [
      583,
      585
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.gradients.vector_norm": {
  "data": {
   "shadows": "dipy.core.geometry.vector_norm"
  },
  "type": "import"
 },
 "dipy.core.gradients.warn": {
  "data": {
   "shadows": "warnings.warn"
  },
  "type": "import"
 },
 "dipy.core.graph": {
  "data": {},
  "type": "module"
 },
 "dipy.core.graph.Graph": {
  "data": {
   "lineno": 3,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.core.graph.Graph.__init__": {
  "data": {
   "lineno": 8
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.add_edge": {
  "data": {
   "lineno": 44
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.add_node": {
  "data": {
   "lineno": 39
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.all_paths": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.children": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.del_node": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      112,
      113,
      122,
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.del_node_and_edges": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      98,
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.down": {
  "data": {
   "lineno": 57
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.down_short": {
  "data": {
   "lineno": 63
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.parents": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.shortest_path": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "len": {
     "line number": [
      91,
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.up": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "dipy.core.graph.Graph.up_short": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "dipy.core.histeq": {
  "data": {},
  "type": "module"
 },
 "dipy.core.histeq.histeq": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": {
    "numpy.histogram": {
     "line number": [
      22
     ]
    },
    "numpy.interp": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.histeq.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.ndindex": {
  "data": {},
  "type": "module"
 },
 "dipy.core.ndindex.as_strided": {
  "data": {
   "shadows": "numpy.lib.stride_tricks.as_strided"
  },
  "type": "import"
 },
 "dipy.core.ndindex.ndindex": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      38
     ]
    },
    "len": {
     "line number": [
      32
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      35
     ]
    },
    "numpy.ndindex": {
     "line number": [
      40
     ]
    },
    "numpy.nditer": {
     "line number": [
      37
     ]
    },
    "numpy.zeros": {
     "line number": [
      35
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.ndindex.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.onetime": {
  "data": {},
  "type": "module"
 },
 "dipy.core.onetime.OneTimeProperty": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "object": {
     "line number": [
      144
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.core.onetime.OneTimeProperty.__get__": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "setattr": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.onetime.OneTimeProperty.__init__": {
  "data": {
   "lineno": 149
  },
  "type": "function"
 },
 "dipy.core.onetime.ResetMixin": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "object": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.core.onetime.ResetMixin.reset": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "delattr": {
     "line number": [
      141
     ]
    },
    "isinstance": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.onetime.auto_attr": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "dipy.core.onetime.OneTimeProperty": {
     "line number": [
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize": {
  "data": {},
  "type": "module"
 },
 "dipy.core.optimize.NonNegativeLeastSquares": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "dipy.core.optimize.SKLearnLinearSolver": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.core.optimize.NonNegativeLeastSquares.fit": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": {
    "scipy.optimize.nnls": {
     "line number": [
      342
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.Optimizer": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "object": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.core.optimize.Optimizer.__init__": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "len": {
     "line number": [
      114
     ]
    },
    "scipy.optimize.minimize": {
     "line number": [
      123,
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.Optimizer.__init__.history_of_x": {
  "data": {
   "lineno": 121
  },
  "type": "function"
 },
 "dipy.core.optimize.Optimizer.evolution": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      166
     ]
    },
    "property": {
     "line number": [
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.Optimizer.fopt": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "property": {
     "line number": [
      139
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.Optimizer.message": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "property": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.Optimizer.nfev": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "property": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.Optimizer.nit": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "property": {
     "line number": [
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.Optimizer.print_summary": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "print": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.Optimizer.xopt": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "property": {
     "line number": [
      134
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.SKLearnLinearSolver": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "dipy.core.optimize.abc": {
     "line number": [
      292
     ]
    },
    "object": {
     "line number": [
      292
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.core.optimize.SKLearnLinearSolver.__init__": {
  "data": {
   "lineno": 303
  },
  "type": "function"
 },
 "dipy.core.optimize.SKLearnLinearSolver.fit": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "dipy.core.optimize.abc": {
     "line number": [
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.SKLearnLinearSolver.predict": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      325
     ]
    },
    "numpy.dot": {
     "line number": [
      326
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "dipy.core.optimize.minimize": {
  "data": {
   "shadows": "scipy.optimize.minimize"
  },
  "type": "import"
 },
 "dipy.core.optimize.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.optimize.opt": {
  "data": {
   "shadows": "scipy.optimize"
  },
  "type": "import"
 },
 "dipy.core.optimize.sparse_nnls": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "dipy.core.optimize.spdot": {
     "line number": [
      256,
      256,
      270
     ]
    },
    "numpy.dot": {
     "line number": [
      260
     ]
    },
    "numpy.inf": {
     "line number": [
      248,
      249
     ]
    },
    "numpy.mod": {
     "line number": [
      268
     ]
    },
    "numpy.sqrt": {
     "line number": [
      260
     ]
    },
    "numpy.sum": {
     "line number": [
      270
     ]
    },
    "numpy.zeros": {
     "line number": [
      244
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.spdot": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      195
     ]
    },
    "scipy.sparse.issparse": {
     "line number": [
      188,
      188,
      190,
      190,
      192,
      192
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.optimize.sps": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "dipy.core.profile": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      9,
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.core.profile.Profiler": {
  "data": {
   "lineno": 15
  },
  "type": "class"
 },
 "dipy.core.profile.Profiler.__init__": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      71
     ]
    },
    "dipy.core.profile.os": {
     "line number": [
      61
     ]
    },
    "dipy.core.profile.pyximport": {
     "line number": [
      57
     ]
    },
    "dipy.core.profile.subprocess": {
     "line number": [
      65
     ]
    },
    "globals": {
     "line number": [
      77
     ]
    },
    "locals": {
     "line number": [
      77
     ]
    },
    "print": {
     "line number": [
      62,
      64,
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.profile.Profiler._profile_function": {
  "data": {
   "lineno": 83
  },
  "type": "function"
 },
 "dipy.core.profile.Profiler.print_stats": {
  "data": {
   "lineno": 86
  },
  "type": "function"
 },
 "dipy.core.profile.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.core.profile.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.core.profile.pyximport": {
  "data": {
   "shadows": "pyximport"
  },
  "type": "import"
 },
 "dipy.core.profile.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "dipy.core.rng": {
  "data": {},
  "type": "module"
 },
 "dipy.core.rng.LEcuyer": {
  "data": {
   "lineno": 101
  },
  "type": "function"
 },
 "dipy.core.rng.WichmannHill1982": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "numpy.float": {
     "line number": [
      97,
      97,
      98
     ]
    },
    "numpy.remainder": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.rng.WichmannHill2006": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "math.floor": {
     "line number": [
      56
     ]
    },
    "platform.architecture": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.rng.architecture": {
  "data": {
   "shadows": "platform.architecture"
  },
  "type": "import"
 },
 "dipy.core.rng.floor": {
  "data": {
   "shadows": "math.floor"
  },
  "type": "import"
 },
 "dipy.core.rng.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.sphere": {
  "data": {
   "symbols_in_volume": {
    "dipy.core.geometry.vector_norm": {
     "line number": [
      751
     ]
    },
    "dipy.core.sphere.HemiSphere": {
     "line number": [
      776
     ]
    },
    "dipy.core.sphere.Sphere": {
     "line number": [
      774,
      775
     ]
    },
    "dipy.core.sphere.icosahedron_faces": {
     "line number": [
      775
     ]
    },
    "dipy.core.sphere.icosahedron_vertices": {
     "line number": [
      751,
      751,
      775
     ]
    },
    "dipy.core.sphere.octahedron_faces": {
     "line number": [
      774
     ]
    },
    "dipy.core.sphere.octahedron_vertices": {
     "line number": [
      774
     ]
    },
    "dipy.core.sphere.t": {
     "line number": [
      738,
      739,
      740,
      741,
      742,
      743,
      744,
      745,
      746,
      747,
      748,
      749
     ]
    },
    "dipy.core.sphere.unit_icosahedron": {
     "line number": [
      776
     ]
    },
    "numpy.array": {
     "line number": [
      719,
      726,
      737,
      752
     ]
    },
    "numpy.sqrt": {
     "line number": [
      736
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.core.sphere.Delaunay": {
  "data": {
   "shadows": "scipy.spatial.Delaunay"
  },
  "type": "import"
 },
 "dipy.core.sphere.HemiSphere": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      282
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.core.sphere.HemiSphere.__init__": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      327,
      337
     ]
    },
    "dipy.core.sphere.unique_sets": {
     "line number": [
      333,
      336
     ]
    },
    "dipy.reconst.recspeed.remove_similar_vertices": {
     "line number": [
      328
     ]
    },
    "numpy.asarray": {
     "line number": [
      332,
      335
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.HemiSphere.faces": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": {
    "dipy.core.onetime.auto_attr": {
     "line number": [
      358
     ]
    },
    "dipy.core.sphere.faces_from_sphere_vertices": {
     "line number": [
      361
     ]
    },
    "dipy.core.sphere.unique_sets": {
     "line number": [
      362
     ]
    },
    "len": {
     "line number": [
      362
     ]
    },
    "numpy.vstack": {
     "line number": [
      360
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.HemiSphere.find_closest": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      390
     ]
    },
    "numpy.argmax": {
     "line number": [
      391
     ]
    },
    "numpy.dot": {
     "line number": [
      390
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.HemiSphere.from_sphere": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      339
     ]
    },
    "klass": {
     "line number": [
      342
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.HemiSphere.mirror": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      356
     ]
    },
    "dipy.core.sphere._switch_vertex": {
     "line number": [
      351,
      354,
      355
     ]
    },
    "len": {
     "line number": [
      347
     ]
    },
    "numpy.vstack": {
     "line number": [
      348,
      350,
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.HemiSphere.subdivide": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "dipy.core.sphere.HemiSphere": {
     "line number": [
      372
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.Sphere": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "object": {
     "line number": [
      124
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.core.sphere.Sphere.__init__": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      162,
      166
     ]
    },
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      184
     ]
    },
    "dipy.core.sphere._all_specified": {
     "line number": [
      156,
      156,
      157
     ]
    },
    "dipy.core.sphere._some_specified": {
     "line number": [
      158,
      158,
      159
     ]
    },
    "dipy.core.sphere.warnings": {
     "line number": [
      187
     ]
    },
    "numpy.allclose": {
     "line number": [
      186
     ]
    },
    "numpy.array": {
     "line number": [
      175,
      176
     ]
    },
    "numpy.asarray": {
     "line number": [
      170,
      172,
      180,
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.Sphere.edges": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "dipy.core.onetime.auto_attr": {
     "line number": [
      210
     ]
    },
    "dipy.core.sphere.unique_edges": {
     "line number": [
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.Sphere.faces": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "dipy.core.onetime.auto_attr": {
     "line number": [
      205
     ]
    },
    "dipy.core.sphere.faces_from_sphere_vertices": {
     "line number": [
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.Sphere.find_closest": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "numpy.argmax": {
     "line number": [
      279
     ]
    },
    "numpy.dot": {
     "line number": [
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.Sphere.subdivide": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": {
    "dipy.core.geometry.vector_norm": {
     "line number": [
      247
     ]
    },
    "dipy.core.sphere.Sphere": {
     "line number": [
      261
     ]
    },
    "dipy.core.sphere.unique_edges": {
     "line number": [
      245
     ]
    },
    "len": {
     "line number": [
      248,
      259
     ]
    },
    "numpy.asarray": {
     "line number": [
      260
     ]
    },
    "numpy.column_stack": {
     "line number": [
      253,
      254,
      255
     ]
    },
    "numpy.concatenate": {
     "line number": [
      257
     ]
    },
    "numpy.vstack": {
     "line number": [
      249
     ]
    },
    "range": {
     "line number": [
      244
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.Sphere.vertices": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "dipy.core.geometry.sphere2cart": {
     "line number": [
      191
     ]
    },
    "dipy.core.onetime.auto_attr": {
     "line number": [
      189
     ]
    },
    "numpy.column_stack": {
     "line number": [
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.Sphere.x": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": {
    "property": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.Sphere.y": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "property": {
     "line number": [
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.Sphere.z": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "property": {
     "line number": [
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "dipy.core.sphere._all_specified": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "dipy.core.sphere._equality_constraints": {
  "data": {
   "lineno": 500
  },
  "type": "function"
 },
 "dipy.core.sphere._get_forces": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": {
    "dipy.core.sphere.warnings": {
     "line number": [
      426,
      427
     ]
    },
    "len": {
     "line number": [
      431
     ]
    },
    "numpy.arange": {
     "line number": [
      431
     ]
    },
    "numpy.concatenate": {
     "line number": [
      422
     ]
    },
    "numpy.sqrt": {
     "line number": [
      425
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere._get_forces_alt": {
  "data": {
   "lineno": 544,
   "symbols_in_volume": {
    "dipy.core.sphere.warnings": {
     "line number": [
      586,
      587
     ]
    },
    "len": {
     "line number": [
      590
     ]
    },
    "numpy.arange": {
     "line number": [
      590
     ]
    },
    "numpy.concatenate": {
     "line number": [
      582
     ]
    },
    "numpy.ones": {
     "line number": [
      580
     ]
    },
    "numpy.sqrt": {
     "line number": [
      585
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere._get_grad_forces_alt": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": {
    "dipy.core.sphere.warnings": {
     "line number": [
      638,
      639
     ]
    },
    "len": {
     "line number": [
      642
     ]
    },
    "numpy.arange": {
     "line number": [
      642
     ]
    },
    "numpy.concatenate": {
     "line number": [
      634
     ]
    },
    "numpy.ones": {
     "line number": [
      632
     ]
    },
    "numpy.sqrt": {
     "line number": [
      637
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere._grad_equality_constraints": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": {
    "numpy.diag": {
     "line number": [
      540
     ]
    },
    "numpy.sqrt": {
     "line number": [
      537
     ]
    },
    "numpy.zeros": {
     "line number": [
      538
     ]
    },
    "range": {
     "line number": [
      539
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere._some_specified": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "dipy.core.sphere._switch_vertex": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": {
    "len": {
     "line number": [
      400
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.auto_attr": {
  "data": {
   "shadows": "dipy.core.onetime.auto_attr"
  },
  "type": "import"
 },
 "dipy.core.sphere.cart2sphere": {
  "data": {
   "shadows": "dipy.core.geometry.cart2sphere"
  },
  "type": "import"
 },
 "dipy.core.sphere.disperse_charges": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      476
     ]
    },
    "dipy.core.sphere.HemiSphere": {
     "line number": [
      475,
      497
     ]
    },
    "dipy.core.sphere._get_forces": {
     "line number": [
      478,
      488
     ]
    },
    "isinstance": {
     "line number": [
      475
     ]
    },
    "numpy.empty": {
     "line number": [
      481
     ]
    },
    "numpy.sqrt": {
     "line number": [
      479,
      486
     ]
    },
    "range": {
     "line number": [
      484
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.disperse_charges_alt": {
  "data": {
   "lineno": 650,
   "symbols_in_volume": {
    "dipy.core.sphere._equality_constraints": {
     "line number": [
      672
     ]
    },
    "dipy.core.sphere._get_forces_alt": {
     "line number": [
      671
     ]
    },
    "dipy.core.sphere._get_grad_forces_alt": {
     "line number": [
      673
     ]
    },
    "scipy.optimize.fmin_slsqp": {
     "line number": [
      671
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.euler_characteristic_check": {
  "data": {
   "lineno": 678
  },
  "type": "function"
 },
 "dipy.core.sphere.faces_from_sphere_vertices": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "len": {
     "line number": [
      46
     ]
    },
    "numpy.asarray": {
     "line number": [
      47
     ]
    },
    "numpy.uint16": {
     "line number": [
      47
     ]
    },
    "scipy.spatial.Delaunay": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.hemi_icosahedron": {
  "data": {
   "lineno": 776
  },
  "type": "constant"
 },
 "dipy.core.sphere.icosahedron_faces": {
  "data": {
   "lineno": 752
  },
  "type": "constant"
 },
 "dipy.core.sphere.icosahedron_vertices": {
  "data": {
   "lineno": 737
  },
  "type": "constant"
 },
 "dipy.core.sphere.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.sphere.octahedron_faces": {
  "data": {
   "lineno": 726
  },
  "type": "constant"
 },
 "dipy.core.sphere.octahedron_vertices": {
  "data": {
   "lineno": 719
  },
  "type": "constant"
 },
 "dipy.core.sphere.optimize": {
  "data": {
   "shadows": "scipy.optimize"
  },
  "type": "import"
 },
 "dipy.core.sphere.remove_similar_vertices": {
  "data": {
   "shadows": "dipy.reconst.recspeed.remove_similar_vertices"
  },
  "type": "import"
 },
 "dipy.core.sphere.sphere2cart": {
  "data": {
   "shadows": "dipy.core.geometry.sphere2cart"
  },
  "type": "import"
 },
 "dipy.core.sphere.t": {
  "data": {
   "lineno": 736
  },
  "type": "constant"
 },
 "dipy.core.sphere.unique_edges": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "dipy.core.sphere.unique_sets": {
     "line number": [
      83,
      86
     ]
    },
    "numpy.asarray": {
     "line number": [
      80
     ]
    },
    "numpy.concatenate": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.unique_sets": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "len": {
     "line number": [
      112,
      117
     ]
    },
    "numpy.arange": {
     "line number": [
      117
     ]
    },
    "numpy.empty_like": {
     "line number": [
      116
     ]
    },
    "numpy.lexsort": {
     "line number": [
      110
     ]
    },
    "numpy.ones": {
     "line number": [
      112
     ]
    },
    "numpy.sort": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere.unit_icosahedron": {
  "data": {
   "lineno": 775
  },
  "type": "constant"
 },
 "dipy.core.sphere.unit_octahedron": {
  "data": {
   "lineno": 774
  },
  "type": "constant"
 },
 "dipy.core.sphere.vector_norm": {
  "data": {
   "shadows": "dipy.core.geometry.vector_norm"
  },
  "type": "import"
 },
 "dipy.core.sphere.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.core.sphere_stats": {
  "data": {},
  "type": "module"
 },
 "dipy.core.sphere_stats.angular_similarity": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "itertools.permutations": {
     "line number": [
      290
     ]
    },
    "len": {
     "line number": [
      271,
      272
     ]
    },
    "numpy.abs": {
     "line number": [
      289
     ]
    },
    "numpy.dot": {
     "line number": [
      289
     ]
    },
    "numpy.float": {
     "line number": [
      292
     ]
    },
    "numpy.max": {
     "line number": [
      292
     ]
    },
    "numpy.sum": {
     "line number": [
      289
     ]
    },
    "range": {
     "line number": [
      289
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere_stats.compare_orientation_sets": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "itertools.permutations": {
     "line number": [
      204
     ]
    },
    "len": {
     "line number": [
      194,
      195
     ]
    },
    "numpy.abs": {
     "line number": [
      203
     ]
    },
    "numpy.dot": {
     "line number": [
      203
     ]
    },
    "numpy.float": {
     "line number": [
      205
     ]
    },
    "numpy.max": {
     "line number": [
      205
     ]
    },
    "numpy.sum": {
     "line number": [
      203
     ]
    },
    "range": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere_stats.eigenstats": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      113
     ]
    },
    "numpy.arcsin": {
     "line number": [
      132
     ]
    },
    "numpy.argsort": {
     "line number": [
      101
     ]
    },
    "numpy.array": {
     "line number": [
      113
     ]
    },
    "numpy.dot": {
     "line number": [
      95,
      118,
      119,
      120
     ]
    },
    "numpy.linalg.eig": {
     "line number": [
      130
     ]
    },
    "numpy.linalg.eigh": {
     "line number": [
      98
     ]
    },
    "numpy.log": {
     "line number": [
      129
     ]
    },
    "numpy.pi": {
     "line number": [
      83
     ]
    },
    "numpy.sign": {
     "line number": [
      110
     ]
    },
    "numpy.sqrt": {
     "line number": [
      131
     ]
    },
    "numpy.sum": {
     "line number": [
      123,
      124,
      125
     ]
    },
    "numpy.zeros": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.sphere_stats.geometry": {
  "data": {
   "shadows": "dipy.core.geometry"
  },
  "type": "import"
 },
 "dipy.core.sphere_stats.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.sphere_stats.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "dipy.core.sphere_stats.random_uniform_on_sphere": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "dipy.core.geometry.sphere2cart": {
     "line number": [
      51
     ]
    },
    "numpy.arccos": {
     "line number": [
      47
     ]
    },
    "numpy.ones": {
     "line number": [
      50
     ]
    },
    "numpy.pi": {
     "line number": [
      48
     ]
    },
    "numpy.rad2deg": {
     "line number": [
      56
     ]
    },
    "numpy.random.uniform": {
     "line number": [
      46,
      48
     ]
    },
    "numpy.vstack": {
     "line number": [
      51,
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.subdivide_octahedron": {
  "data": {},
  "type": "module"
 },
 "dipy.core.subdivide_octahedron.HemiSphere": {
  "data": {
   "shadows": "dipy.core.sphere.HemiSphere"
  },
  "type": "import"
 },
 "dipy.core.subdivide_octahedron.create_unit_hemisphere": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      64
     ]
    },
    "dipy.core.subdivide_octahedron.create_unit_sphere": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.subdivide_octahedron.create_unit_sphere": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      39
     ]
    },
    "dipy.core.sphere.unit_octahedron.subdivide": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.subdivide_octahedron.unit_octahedron": {
  "data": {
   "shadows": "dipy.core.sphere.unit_octahedron"
  },
  "type": "import"
 },
 "dipy.core.test": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "dipy.core.tests": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.Tester": {
     "line number": [
      5,
      6
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.core.tests.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.core.tests.test": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "dipy.core.tests.test_geometry": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      339
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      340
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.core.tests.test_geometry._rotation_from_angles": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      292,
      296,
      300
     ]
    },
    "numpy.cos": {
     "line number": [
      293,
      294,
      296,
      298,
      300,
      301
     ]
    },
    "numpy.dot": {
     "line number": [
      296,
      300
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      303
     ]
    },
    "numpy.sin": {
     "line number": [
      293,
      294,
      296,
      298,
      300,
      301
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.cart2sphere": {
  "data": {
   "shadows": "dipy.core.geometry.cart2sphere"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.cart_distance": {
  "data": {
   "shadows": "dipy.core.geometry.cart_distance"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.circumradius": {
  "data": {
   "shadows": "dipy.core.geometry.circumradius"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.compose_matrix": {
  "data": {
   "shadows": "dipy.core.geometry.compose_matrix"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.compose_transformations": {
  "data": {
   "shadows": "dipy.core.geometry.compose_transformations"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.decompose_matrix": {
  "data": {
   "shadows": "dipy.core.geometry.decompose_matrix"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.dist_to_corner": {
  "data": {
   "shadows": "dipy.core.geometry.dist_to_corner"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.is_hemispherical": {
  "data": {
   "shadows": "dipy.core.geometry.is_hemispherical"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.lambert_equal_area_projection_polar": {
  "data": {
   "shadows": "dipy.core.geometry.lambert_equal_area_projection_polar"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.nearest_pos_semi_def": {
  "data": {
   "shadows": "dipy.core.geometry.nearest_pos_semi_def"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.perpendicular_directions": {
  "data": {
   "shadows": "dipy.core.geometry.perpendicular_directions"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.random_uniform_on_sphere": {
  "data": {
   "shadows": "dipy.core.sphere_stats.random_uniform_on_sphere"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.sphere2cart": {
  "data": {
   "shadows": "dipy.core.geometry.sphere2cart"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.sphere_distance": {
  "data": {
   "shadows": "dipy.core.geometry.sphere_distance"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.sphere_points": {
  "data": {
   "shadows": "dipy.testing.spherepoints.sphere_points"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.test_cart_distance": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "dipy.core.geometry.cart_distance": {
     "line number": [
      112,
      113,
      116,
      119
     ]
    },
    "numpy.sqrt": {
     "line number": [
      112,
      116,
      119
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      112,
      113,
      116,
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_circumradius": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "dipy.core.geometry.circumradius": {
     "line number": [
      211
     ]
    },
    "numpy.array": {
     "line number": [
      211,
      212,
      213
     ]
    },
    "numpy.sqrt": {
     "line number": [
      211
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_compose_decompose_matrix": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": {
    "dipy.core.geometry.compose_matrix": {
     "line number": [
      248
     ]
    },
    "dipy.core.geometry.decompose_matrix": {
     "line number": [
      250
     ]
    },
    "itertools.permutations": {
     "line number": [
      243,
      244,
      245,
      246
     ]
    },
    "numpy.deg2rad": {
     "line number": [
      244
     ]
    },
    "numpy.random.rand": {
     "line number": [
      243,
      244,
      245,
      246
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      252,
      253,
      255,
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_compose_transformations": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      238
     ]
    },
    "dipy.core.geometry.compose_transformations": {
     "line number": [
      234,
      238
     ]
    },
    "numpy.eye": {
     "line number": [
      225,
      228,
      231,
      236
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      236
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      238
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_dist_to_corner": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "dipy.core.geometry.dist_to_corner": {
     "line number": [
      312,
      317
     ]
    },
    "dipy.core.tests.test_geometry._rotation_from_angles": {
     "line number": [
      315
     ]
    },
    "numpy.diag": {
     "line number": [
      310
     ]
    },
    "numpy.dot": {
     "line number": [
      316
     ]
    },
    "numpy.eye": {
     "line number": [
      308
     ]
    },
    "numpy.pi": {
     "line number": [
      315
     ]
    },
    "numpy.random.randn": {
     "line number": [
      315
     ]
    },
    "numpy.sqrt": {
     "line number": [
      310
     ]
    },
    "numpy.sum": {
     "line number": [
      310
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      312,
      317
     ]
    },
    "numpy.vstack": {
     "line number": [
      316
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_invert_transform": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      82
     ]
    },
    "dipy.core.geometry.sphere2cart": {
     "line number": [
      81
     ]
    },
    "numpy.arange": {
     "line number": [
      79,
      80
     ]
    },
    "numpy.pi": {
     "line number": [
      79,
      80
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      84,
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_is_hemispherical": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      322,
      336
     ]
    },
    "dipy.core.geometry.is_hemispherical": {
     "line number": [
      322,
      329,
      333,
      336
     ]
    },
    "dipy.core.sphere_stats.random_uniform_on_sphere": {
     "line number": [
      327,
      332
     ]
    },
    "numpy.array": {
     "line number": [
      322
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      329,
      333
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      322,
      336
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_lambert_equal_area_projection_cart": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      198
     ]
    },
    "dipy.core.geometry.lambert_equal_area_projection_polar": {
     "line number": [
      200
     ]
    },
    "numpy.array": {
     "line number": [
      194,
      203
     ]
    },
    "numpy.sqrt": {
     "line number": [
      201,
      202
     ]
    },
    "numpy.sum": {
     "line number": [
      202
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      202
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_lambert_equal_area_projection_polar": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "dipy.core.geometry.lambert_equal_area_projection_polar": {
     "line number": [
      185
     ]
    },
    "numpy.array": {
     "line number": [
      187
     ]
    },
    "numpy.linspace": {
     "line number": [
      183
     ]
    },
    "numpy.pi": {
     "line number": [
      182,
      183
     ]
    },
    "numpy.repeat": {
     "line number": [
      182
     ]
    },
    "numpy.sqrt": {
     "line number": [
      186
     ]
    },
    "numpy.sum": {
     "line number": [
      186
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_nearest_pos_semi_def": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "dipy.core.geometry.nearest_pos_semi_def": {
     "line number": [
      90,
      92,
      94,
      97,
      100,
      103,
      106
     ]
    },
    "numpy.array": {
     "line number": [
      89,
      91,
      93,
      95,
      96,
      98,
      99,
      101,
      102,
      104,
      105
     ]
    },
    "numpy.diag": {
     "line number": [
      89,
      91,
      93,
      95,
      98,
      101,
      104
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      90,
      92,
      94,
      97,
      100,
      103,
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_perpendicular_directions": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": {
    "dipy.core.geometry.perpendicular_directions": {
     "line number": [
      271
     ]
    },
    "dipy.core.geometry.sphere2cart": {
     "line number": [
      267
     ]
    },
    "dipy.core.tests.test_geometry.random": {
     "line number": [
      265,
      266
     ]
    },
    "len": {
     "line number": [
      274
     ]
    },
    "numpy.arccos": {
     "line number": [
      284
     ]
    },
    "numpy.dot": {
     "line number": [
      278,
      284
     ]
    },
    "numpy.pi": {
     "line number": [
      265,
      266,
      282
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      279,
      288
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      274
     ]
    },
    "numpy.zeros": {
     "line number": [
      262
     ]
    },
    "range": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_sphere_cart": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      49,
      54,
      60,
      68,
      73
     ]
    },
    "dipy.core.geometry.sphere2cart": {
     "line number": [
      50,
      56,
      63,
      69,
      73
     ]
    },
    "dipy.testing.spherepoints.sphere_points": {
     "line number": [
      53,
      67
     ]
    },
    "dipy.testing.spherepoints.sphere_points.T": {
     "line number": [
      49,
      51
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      51,
      55,
      57,
      70,
      74
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      61,
      62,
      64,
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_sphere_distance": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      146,
      150
     ]
    },
    "dipy.core.geometry.sphere_distance": {
     "line number": [
      140,
      143,
      146,
      148,
      150
     ]
    },
    "numpy.c_": {
     "line number": [
      140,
      143
     ]
    },
    "numpy.cos": {
     "line number": [
      130
     ]
    },
    "numpy.cumsum": {
     "line number": [
      136
     ]
    },
    "numpy.diff": {
     "line number": [
      134,
      134
     ]
    },
    "numpy.linspace": {
     "line number": [
      128
     ]
    },
    "numpy.pi": {
     "line number": [
      128
     ]
    },
    "numpy.r_": {
     "line number": [
      138
     ]
    },
    "numpy.sin": {
     "line number": [
      129
     ]
    },
    "numpy.sqrt": {
     "line number": [
      134
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      141,
      144
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      146,
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_vec2vec_rotmat": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "dipy.core.geometry.vec2vec_rotmat": {
     "line number": [
      219
     ]
    },
    "numpy.array": {
     "line number": [
      217,
      218
     ]
    },
    "numpy.dot": {
     "line number": [
      220
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      220
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_vector_cosine": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "dipy.core.geometry.vector_cosine": {
     "line number": [
      156,
      157,
      158,
      159,
      162,
      165,
      171,
      176
     ]
    },
    "numpy.allclose": {
     "line number": [
      172
     ]
    },
    "numpy.corrcoef": {
     "line number": [
      170
     ]
    },
    "numpy.mean": {
     "line number": [
      174,
      175
     ]
    },
    "numpy.random.uniform": {
     "line number": [
      168,
      169
     ]
    },
    "numpy.sqrt": {
     "line number": [
      158
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      156,
      157,
      158,
      159,
      162,
      165,
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.test_vector_norm": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "dipy.core.geometry.vector_norm": {
     "line number": [
      40,
      42,
      43
     ]
    },
    "numpy.array": {
     "line number": [
      35,
      39
     ]
    },
    "numpy.sqrt": {
     "line number": [
      39
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      40,
      42,
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_geometry.vec2vec_rotmat": {
  "data": {
   "shadows": "dipy.core.geometry.vec2vec_rotmat"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.vector_cosine": {
  "data": {
   "shadows": "dipy.core.geometry.vector_cosine"
  },
  "type": "import"
 },
 "dipy.core.tests.test_geometry.vector_norm": {
  "data": {
   "shadows": "dipy.core.geometry.vector_norm"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      420
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      422
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.core.tests.test_gradients.GradientTable": {
  "data": {
   "shadows": "dipy.core.gradients.GradientTable"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.WATER_GYROMAGNETIC_RATIO": {
  "data": {
   "shadows": "dipy.core.gradients.WATER_GYROMAGNETIC_RATIO"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.check_multi_b": {
  "data": {
   "shadows": "dipy.core.gradients.check_multi_b"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.generate_bvecs": {
  "data": {
   "shadows": "dipy.core.gradients.generate_bvecs"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.gradient_table_from_bvals_bvecs": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table_from_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.gradient_table_from_gradient_strength_bvecs": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table_from_gradient_strength_bvecs"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.gradient_table_from_qvals_bvecs": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table_from_qvals_bvecs"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.reorient_bvecs": {
  "data": {
   "shadows": "dipy.core.gradients.reorient_bvecs"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.round_bvals": {
  "data": {
   "shadows": "dipy.core.gradients.round_bvals"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.test_GradientTable": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      74,
      75,
      76
     ]
    },
    "dipy.core.gradients.GradientTable": {
     "line number": [
      62,
      68,
      74,
      75,
      76
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      79
     ]
    },
    "dipy.core.tests.test_gradients.warnings": {
     "line number": [
      78
     ]
    },
    "len": {
     "line number": [
      81
     ]
    },
    "numpy.array": {
     "line number": [
      52,
      58
     ]
    },
    "numpy.ones": {
     "line number": [
      75,
      76
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      63,
      65,
      66
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      64,
      69,
      70,
      71
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      74,
      75,
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_b0s": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      205
     ]
    },
    "numpy.arange": {
     "line number": [
      207
     ]
    },
    "numpy.array": {
     "line number": [
      197,
      206
     ]
    },
    "numpy.ones": {
     "line number": [
      194
     ]
    },
    "numpy.sqrt": {
     "line number": [
      193
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      206,
      207
     ]
    },
    "numpy.where": {
     "line number": [
      206,
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_btable_prepare": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      47
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      29,
      35,
      37,
      40,
      43,
      47
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      32
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      33
     ]
    },
    "numpy.array": {
     "line number": [
      22
     ]
    },
    "numpy.concatenate": {
     "line number": [
      39
     ]
    },
    "numpy.isnan": {
     "line number": [
      34
     ]
    },
    "numpy.ones": {
     "line number": [
      20
     ]
    },
    "numpy.sqrt": {
     "line number": [
      19
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      30,
      36,
      38,
      41,
      42,
      44,
      45
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      47
     ]
    },
    "numpy.where": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_check_multi_b": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": {
    "dipy.core.gradients.check_multi_b": {
     "line number": [
      398,
      404,
      407,
      410,
      417
     ]
    },
    "dipy.core.gradients.generate_bvecs": {
     "line number": [
      396,
      402,
      415
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      397,
      403,
      416
     ]
    },
    "numpy.array": {
     "line number": [
      395,
      401,
      413
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      398,
      404,
      407,
      410,
      417
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_deltas": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      229
     ]
    },
    "numpy.array": {
     "line number": [
      222
     ]
    },
    "numpy.ones": {
     "line number": [
      220
     ]
    },
    "numpy.sqrt": {
     "line number": [
      219
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      230,
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_generate_bvecs": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": {
    "dipy.core.gradients.generate_bvecs": {
     "line number": [
      330,
      335
     ]
    },
    "numpy.dot": {
     "line number": [
      336
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      331
     ]
    },
    "numpy.ones": {
     "line number": [
      332
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      332,
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_gradient_table_from_bvals_bvecs": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      157,
      161,
      165,
      169,
      173,
      177,
      181
     ]
    },
    "dipy.core.gradients.gradient_table_from_bvals_bvecs": {
     "line number": [
      143,
      152,
      157,
      161,
      165,
      169,
      173,
      177,
      181,
      185
     ]
    },
    "numpy.array": {
     "line number": [
      134
     ]
    },
    "numpy.nan": {
     "line number": [
      151
     ]
    },
    "numpy.ones": {
     "line number": [
      160,
      168,
      172,
      176
     ]
    },
    "numpy.reshape": {
     "line number": [
      146
     ]
    },
    "numpy.sqrt": {
     "line number": [
      132
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      144,
      145,
      146,
      147,
      153
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      187,
      188
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      157,
      161,
      165,
      169,
      173,
      177,
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_gradient_table_from_gradient_strength_bvecs": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "dipy.core.gradients.WATER_GYROMAGNETIC_RATIO": {
     "line number": [
      122
     ]
    },
    "dipy.core.gradients.gradient_table_from_gradient_strength_bvecs": {
     "line number": [
      120
     ]
    },
    "numpy.array": {
     "line number": [
      113
     ]
    },
    "numpy.ones": {
     "line number": [
      108
     ]
    },
    "numpy.pi": {
     "line number": [
      123,
      124
     ]
    },
    "numpy.sqrt": {
     "line number": [
      112
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      126,
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_gradient_table_from_qvals_bvecs": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "dipy.core.gradients.WATER_GYROMAGNETIC_RATIO": {
     "line number": [
      102
     ]
    },
    "dipy.core.gradients.gradient_table_from_qvals_bvecs": {
     "line number": [
      97
     ]
    },
    "numpy.array": {
     "line number": [
      90
     ]
    },
    "numpy.ones": {
     "line number": [
      85
     ]
    },
    "numpy.pi": {
     "line number": [
      100,
      101
     ]
    },
    "numpy.sqrt": {
     "line number": [
      89
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      103,
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_gtable_from_files": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      212
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      211
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      213
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      214,
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_nan_bvecs": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      322
     ]
    },
    "dipy.core.tests.test_gradients.warnings": {
     "line number": [
      321
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      320
     ]
    },
    "len": {
     "line number": [
      323
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      323
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_qvalues": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      246
     ]
    },
    "numpy.array": {
     "line number": [
      238
     ]
    },
    "numpy.ones": {
     "line number": [
      236
     ]
    },
    "numpy.pi": {
     "line number": [
      245
     ]
    },
    "numpy.sqrt": {
     "line number": [
      235,
      245
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      247
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_reorient_bvecs": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      309
     ]
    },
    "dipy.core.gradients.gradient_table_from_bvals_bvecs": {
     "line number": [
      261,
      295
     ]
    },
    "dipy.core.gradients.reorient_bvecs": {
     "line number": [
      268,
      297,
      304,
      309
     ]
    },
    "len": {
     "line number": [
      288
     ]
    },
    "numpy.array": {
     "line number": [
      253,
      278,
      290,
      304
     ]
    },
    "numpy.concatenate": {
     "line number": [
      252
     ]
    },
    "numpy.cos": {
     "line number": [
      276
     ]
    },
    "numpy.dot": {
     "line number": [
      282,
      289
     ]
    },
    "numpy.ones": {
     "line number": [
      252
     ]
    },
    "numpy.random.rand": {
     "line number": [
      275
     ]
    },
    "numpy.sin": {
     "line number": [
      277
     ]
    },
    "numpy.sqrt": {
     "line number": [
      251
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      300,
      305
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      269
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      309
     ]
    },
    "numpy.where": {
     "line number": [
      274
     ]
    },
    "numpy.zeros": {
     "line number": [
      263,
      308
     ]
    },
    "range": {
     "line number": [
      264,
      288
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_round_bvals": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": {
    "dipy.core.gradients.round_bvals": {
     "line number": [
      342,
      347,
      351,
      357
     ]
    },
    "numpy.array": {
     "line number": [
      341,
      345,
      355,
      358
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      343,
      348,
      352,
      359
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.test_unique_bvals": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": {
    "dipy.core.gradients.unique_bvals": {
     "line number": [
      365,
      370,
      375,
      381,
      389
     ]
    },
    "numpy.array": {
     "line number": [
      363,
      364,
      368,
      376,
      379,
      382,
      386,
      387,
      388
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      366,
      371,
      376,
      383,
      390,
      391
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_gradients.unique_bvals": {
  "data": {
   "shadows": "dipy.core.gradients.unique_bvals"
  },
  "type": "import"
 },
 "dipy.core.tests.test_gradients.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.core.tests.test_graph": {
  "data": {},
  "type": "module"
 },
 "dipy.core.tests.test_graph.Graph": {
  "data": {
   "shadows": "dipy.core.graph.Graph"
  },
  "type": "import"
 },
 "dipy.core.tests.test_graph.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.core.tests.test_graph.test_graph": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "dipy.core.graph.Graph": {
     "line number": [
      8
     ]
    },
    "len": {
     "line number": [
      44,
      45,
      46
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      44,
      45,
      46
     ]
    },
    "print": {
     "line number": [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      37,
      38,
      39,
      40,
      41,
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      412
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      413
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.core.tests.test_interpolation.NearestNeighborInterpolator": {
  "data": {
   "shadows": "dipy.core.interpolation.NearestNeighborInterpolator"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.OutsideImage": {
  "data": {
   "shadows": "dipy.core.interpolation.OutsideImage"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.TriLinearInterpolator": {
  "data": {
   "shadows": "dipy.core.interpolation.TriLinearInterpolator"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.create_unit_sphere": {
  "data": {
   "shadows": "dipy.core.subdivide_octahedron.create_unit_sphere"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.floating": {
  "data": {
   "shadows": "dipy.align.floating"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.interp_rbf": {
  "data": {
   "shadows": "dipy.core.interpolation.interp_rbf"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.interpolate_scalar_2d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_scalar_2d"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.interpolate_scalar_3d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_scalar_3d"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.interpolate_scalar_nn_2d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_scalar_nn_2d"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.interpolate_scalar_nn_3d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_scalar_nn_3d"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.interpolate_vector_2d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_vector_2d"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.interpolate_vector_3d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_vector_3d"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.map_coordinates": {
  "data": {
   "shadows": "scipy.ndimage.interpolation.map_coordinates"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.map_coordinates_trilinear_iso": {
  "data": {
   "shadows": "dipy.core.interpolation.map_coordinates_trilinear_iso"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.test_NearestNeighborInterpolator": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "dipy.core.interpolation.NearestNeighborInterpolator": {
     "line number": [
      322
     ]
    },
    "dipy.core.interpolation.OutsideImage": {
     "line number": [
      332,
      333
     ]
    },
    "int": {
     "line number": [
      328,
      328,
      328
     ]
    },
    "numpy.array": {
     "line number": [
      330
     ]
    },
    "numpy.mgrid": {
     "line number": [
      323
     ]
    },
    "numpy.ogrid": {
     "line number": [
      319
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      329,
      331
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      332,
      333
     ]
    },
    "range": {
     "line number": [
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_TriLinearInterpolator": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": {
    "dipy.core.interpolation.OutsideImage": {
     "line number": [
      360,
      361
     ]
    },
    "dipy.core.interpolation.TriLinearInterpolator": {
     "line number": [
      342
     ]
    },
    "numpy.arange": {
     "line number": [
      354,
      357
     ]
    },
    "numpy.array": {
     "line number": [
      350
     ]
    },
    "numpy.mgrid": {
     "line number": [
      343
     ]
    },
    "numpy.ogrid": {
     "line number": [
      338
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      349,
      351,
      355,
      358
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      360,
      361
     ]
    },
    "range": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_interp_rbf": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": {
    "PendingDeprecationWarning": {
     "line number": [
      408
     ]
    },
    "data_func": {
     "line number": [
      396,
      397
     ]
    },
    "dipy.core.interpolation.interp_rbf": {
     "line number": [
      398,
      406
     ]
    },
    "dipy.core.subdivide_octahedron.create_unit_sphere": {
     "line number": [
      393,
      394
     ]
    },
    "dipy.core.tests.test_interpolation.warnings": {
     "line number": [
      404,
      405
     ]
    },
    "issubclass": {
     "line number": [
      408
     ]
    },
    "len": {
     "line number": [
      407
     ]
    },
    "numpy.abs": {
     "line number": [
      399
     ]
    },
    "numpy.mean": {
     "line number": [
      399
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      399,
      407,
      408,
      409
     ]
    },
    "str": {
     "line number": [
      409
     ]
    },
    "zip": {
     "line number": [
      395
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_interp_rbf.data_func": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": {
    "numpy.cos": {
     "line number": [
      391
     ]
    },
    "numpy.sin": {
     "line number": [
      391
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_interpolate_scalar_2d": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      72,
      75
     ]
    },
    "dipy.core.interpolation.interpolate_scalar_2d": {
     "line number": [
      85,
      100
     ]
    },
    "numpy.array": {
     "line number": [
      106,
      108
     ]
    },
    "numpy.empty": {
     "line number": [
      72
     ]
    },
    "numpy.int32": {
     "line number": [
      106,
      108
     ]
    },
    "numpy.random.randint": {
     "line number": [
      73
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      81,
      97,
      99
     ]
    },
    "numpy.random.seed": {
     "line number": [
      69
     ]
    },
    "numpy.size": {
     "line number": [
      73
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      91,
      104,
      109
     ]
    },
    "numpy.zeros": {
     "line number": [
      75
     ]
    },
    "range": {
     "line number": [
      95
     ]
    },
    "scipy.ndimage.interpolation.map_coordinates": {
     "line number": [
      88,
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_interpolate_scalar_3d": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      173,
      176
     ]
    },
    "dipy.core.interpolation.interpolate_scalar_3d": {
     "line number": [
      186,
      202
     ]
    },
    "numpy.array": {
     "line number": [
      209,
      211
     ]
    },
    "numpy.empty": {
     "line number": [
      173
     ]
    },
    "numpy.int32": {
     "line number": [
      209,
      211
     ]
    },
    "numpy.random.randint": {
     "line number": [
      174
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      182,
      198,
      200,
      201
     ]
    },
    "numpy.random.seed": {
     "line number": [
      170
     ]
    },
    "numpy.size": {
     "line number": [
      174
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      192,
      206,
      212
     ]
    },
    "numpy.zeros": {
     "line number": [
      176
     ]
    },
    "range": {
     "line number": [
      196
     ]
    },
    "scipy.ndimage.interpolation.map_coordinates": {
     "line number": [
      189,
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_interpolate_scalar_nn_2d": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      116
     ]
    },
    "dipy.core.interpolation.interpolate_scalar_nn_2d": {
     "line number": [
      124
     ]
    },
    "numpy.empty": {
     "line number": [
      116
     ]
    },
    "numpy.random.randint": {
     "line number": [
      117
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      121
     ]
    },
    "numpy.random.seed": {
     "line number": [
      113
     ]
    },
    "numpy.size": {
     "line number": [
      117
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      129
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      135,
      137
     ]
    },
    "range": {
     "line number": [
      132
     ]
    },
    "scipy.ndimage.interpolation.map_coordinates": {
     "line number": [
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_interpolate_scalar_nn_3d": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      144
     ]
    },
    "dipy.core.interpolation.interpolate_scalar_nn_3d": {
     "line number": [
      152
     ]
    },
    "numpy.empty": {
     "line number": [
      144
     ]
    },
    "numpy.random.randint": {
     "line number": [
      145
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      149
     ]
    },
    "numpy.random.seed": {
     "line number": [
      141
     ]
    },
    "numpy.size": {
     "line number": [
      145
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      157
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      166
     ]
    },
    "range": {
     "line number": [
      160,
      162
     ]
    },
    "scipy.ndimage.interpolation.map_coordinates": {
     "line number": [
      155
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_interpolate_vector_2d": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      271,
      274
     ]
    },
    "dipy.core.interpolation.interpolate_vector_2d": {
     "line number": [
      283,
      301
     ]
    },
    "numpy.array": {
     "line number": [
      311,
      313
     ]
    },
    "numpy.empty": {
     "line number": [
      271
     ]
    },
    "numpy.int32": {
     "line number": [
      311,
      313
     ]
    },
    "numpy.random.randint": {
     "line number": [
      273
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      279,
      298,
      300
     ]
    },
    "numpy.random.seed": {
     "line number": [
      268
     ]
    },
    "numpy.size": {
     "line number": [
      273
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      292,
      308,
      314
     ]
    },
    "numpy.zeros": {
     "line number": [
      274
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      286
     ]
    },
    "range": {
     "line number": [
      287,
      296,
      304
     ]
    },
    "scipy.ndimage.interpolation.map_coordinates": {
     "line number": [
      288,
      305
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_interpolate_vector_3d": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "dipy.align.floating": {
     "line number": [
      219,
      223
     ]
    },
    "dipy.core.interpolation.interpolate_vector_3d": {
     "line number": [
      232,
      251
     ]
    },
    "numpy.array": {
     "line number": [
      261,
      263
     ]
    },
    "numpy.empty": {
     "line number": [
      219
     ]
    },
    "numpy.int32": {
     "line number": [
      261,
      263
     ]
    },
    "numpy.random.randint": {
     "line number": [
      221
     ]
    },
    "numpy.random.ranf": {
     "line number": [
      228,
      247,
      249,
      250
     ]
    },
    "numpy.random.seed": {
     "line number": [
      216
     ]
    },
    "numpy.size": {
     "line number": [
      221
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      241,
      258,
      264
     ]
    },
    "numpy.zeros": {
     "line number": [
      223
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      235
     ]
    },
    "range": {
     "line number": [
      236,
      245,
      254
     ]
    },
    "scipy.ndimage.interpolation.map_coordinates": {
     "line number": [
      237,
      255
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_trilinear_interp_cubic_voxels": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      379,
      381,
      383,
      385
     ]
    },
    "dipy.core.interpolation.map_coordinates_trilinear_iso": {
     "line number": [
      375,
      379,
      381,
      383,
      385
     ]
    },
    "numpy.array": {
     "line number": [
      372,
      374,
      376
     ]
    },
    "numpy.intp": {
     "line number": [
      372
     ]
    },
    "numpy.ones": {
     "line number": [
      370
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      376
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      379,
      381,
      383,
      385
     ]
    },
    "numpy.zeros": {
     "line number": [
      371
     ]
    },
    "stepped_1d": {
     "line number": [
      384,
      386
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_trilinear_interp_cubic_voxels.stepped_1d": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": {
    "numpy.vstack": {
     "line number": [
      368
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_trilinear_interpolate": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      63,
      65
     ]
    },
    "dipy.core.interpolation.trilinear_interpolate4d": {
     "line number": [
      39,
      45,
      51,
      58,
      63,
      65
     ]
    },
    "linear_function": {
     "line number": [
      34,
      40,
      57
     ]
    },
    "numpy.array": {
     "line number": [
      38,
      49,
      55,
      62,
      64
     ]
    },
    "numpy.empty": {
     "line number": [
      33
     ]
    },
    "numpy.mgrid": {
     "line number": [
      32
     ]
    },
    "numpy.random.random": {
     "line number": [
      26
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      41,
      46,
      52,
      59
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      63,
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.test_trilinear_interpolate.linear_function": {
  "data": {
   "lineno": 28
  },
  "type": "function"
 },
 "dipy.core.tests.test_interpolation.trilinear_interpolate4d": {
  "data": {
   "shadows": "dipy.core.interpolation.trilinear_interpolate4d"
  },
  "type": "import"
 },
 "dipy.core.tests.test_interpolation.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.core.tests.test_ndindex": {
  "data": {},
  "type": "module"
 },
 "dipy.core.tests.test_ndindex.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.core.tests.test_ndindex.ndindex": {
  "data": {
   "shadows": "dipy.core.ndindex.ndindex"
  },
  "type": "import"
 },
 "dipy.core.tests.test_ndindex.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.tests.test_ndindex.test_ndindex": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "dipy.core.ndindex.ndindex": {
     "line number": [
      8
     ]
    },
    "list": {
     "line number": [
      8
     ]
    },
    "numpy.ndenumerate": {
     "line number": [
      9
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      10
     ]
    },
    "numpy.zeros": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_ndindex.test_ndindex_0d": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "dipy.core.ndindex.ndindex": {
     "line number": [
      14
     ]
    },
    "list": {
     "line number": [
      14
     ]
    },
    "numpy.array": {
     "line number": [
      14
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_optimize": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      113
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.core.tests.test_optimize.Optimizer": {
  "data": {
   "shadows": "dipy.core.optimize.Optimizer"
  },
  "type": "import"
 },
 "dipy.core.tests.test_optimize.func": {
  "data": {
   "lineno": 9
  },
  "type": "function"
 },
 "dipy.core.tests.test_optimize.func2": {
  "data": {
   "lineno": 13
  },
  "type": "function"
 },
 "dipy.core.tests.test_optimize.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.tests.test_optimize.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.core.tests.test_optimize.opt": {
  "data": {
   "shadows": "dipy.core.optimize"
  },
  "type": "import"
 },
 "dipy.core.tests.test_optimize.sparse_nnls": {
  "data": {
   "shadows": "dipy.core.optimize.sparse_nnls"
  },
  "type": "import"
 },
 "dipy.core.tests.test_optimize.spdot": {
  "data": {
   "shadows": "dipy.core.optimize.spdot"
  },
  "type": "import"
 },
 "dipy.core.tests.test_optimize.sps": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "dipy.core.tests.test_optimize.test_nonnegativeleastsquares": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "dipy.core.optimize.NonNegativeLeastSquares": {
     "line number": [
      79
     ]
    },
    "numpy.dot": {
     "line number": [
      78
     ]
    },
    "numpy.eye": {
     "line number": [
      76
     ]
    },
    "numpy.random.rand": {
     "line number": [
      77
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      81,
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_optimize.test_optimize_new_scipy": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "dipy.core.optimize": {
     "line number": [
      18,
      23,
      33,
      43,
      51
     ]
    },
    "dipy.core.optimize.Optimizer": {
     "line number": [
      18,
      23,
      33,
      43,
      51
     ]
    },
    "dipy.core.optimize.evolution": {
     "line number": [
      29,
      31
     ]
    },
    "dipy.core.optimize.evolution.shape": {
     "line number": [
      49
     ]
    },
    "dipy.core.optimize.fopt": {
     "line number": [
      21,
      28,
      39
     ]
    },
    "dipy.core.optimize.nit": {
     "line number": [
      49
     ]
    },
    "dipy.core.optimize.print_summary": {
     "line number": [
      41
     ]
    },
    "dipy.core.optimize.xopt": {
     "line number": [
      20,
      27,
      38,
      56
     ]
    },
    "dipy.core.tests.test_optimize.func": {
     "line number": [
      18,
      23,
      33
     ]
    },
    "dipy.core.tests.test_optimize.func2": {
     "line number": [
      43,
      51
     ]
    },
    "numpy.array": {
     "line number": [
      18,
      20,
      23,
      27,
      33,
      38,
      43,
      51,
      56
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      21,
      28,
      39
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      20,
      27,
      38,
      56
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      29,
      31,
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_optimize.test_sklearn_linear_solver": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "SillySolver": {
     "line number": [
      64
     ]
    },
    "numpy.ones": {
     "line number": [
      68,
      70,
      71
     ]
    },
    "numpy.random.rand": {
     "line number": [
      67
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      70,
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_optimize.test_sklearn_linear_solver.SillySolver": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "dipy.core.optimize.SKLearnLinearSolver": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.core.tests.test_optimize.test_sklearn_linear_solver.SillySolver.fit": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_optimize.test_sparse_nnls": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "dipy.core.optimize.sparse_nnls": {
     "line number": [
      106,
      107
     ]
    },
    "numpy.dot": {
     "line number": [
      105
     ]
    },
    "numpy.random.rand": {
     "line number": [
      103
     ]
    },
    "numpy.random.randn": {
     "line number": [
      104
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      109,
      110
     ]
    },
    "scipy.sparse.csr_matrix": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_optimize.test_spdot": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "dipy.core.optimize.spdot": {
     "line number": [
      96,
      97,
      98
     ]
    },
    "numpy.dot": {
     "line number": [
      93
     ]
    },
    "numpy.random.randn": {
     "line number": [
      89,
      90
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      95,
      97,
      98
     ]
    },
    "scipy.sparse.csr_matrix": {
     "line number": [
      91,
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      387
     ]
    },
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      24
     ]
    },
    "dipy.core.sphere.unit_octahedron.edges": {
     "line number": [
      22
     ]
    },
    "dipy.core.sphere.unit_octahedron.faces": {
     "line number": [
      23
     ]
    },
    "dipy.core.sphere.unit_octahedron.vertices": {
     "line number": [
      21
     ]
    },
    "dipy.core.tests.test_sphere.verts": {
     "line number": [
      24
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      16
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      388
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.core.tests.test_sphere.Delaunay": {
  "data": {
   "shadows": "scipy.spatial.Delaunay"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.HemiSphere": {
  "data": {
   "shadows": "dipy.core.sphere.HemiSphere"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.Sphere": {
  "data": {
   "shadows": "dipy.core.sphere.Sphere"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere._get_forces": {
  "data": {
   "shadows": "dipy.core.sphere._get_forces"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere._get_forces_alt": {
  "data": {
   "shadows": "dipy.core.sphere._get_forces_alt"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.array_to_set": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "frozenset": {
     "line number": [
      71
     ]
    },
    "set": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.cart2sphere": {
  "data": {
   "shadows": "dipy.core.geometry.cart2sphere"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.disperse_charges": {
  "data": {
   "shadows": "dipy.core.sphere.disperse_charges"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.disperse_charges_alt": {
  "data": {
   "shadows": "dipy.core.sphere.disperse_charges_alt"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.edges": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "dipy.core.tests.test_sphere.faces_from_sphere_vertices": {
  "data": {
   "shadows": "dipy.core.sphere.faces_from_sphere_vertices"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.hemi_icosahedron": {
  "data": {
   "shadows": "dipy.core.sphere.hemi_icosahedron"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.nt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.oct_faces": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "dipy.core.tests.test_sphere.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.random_uniform_on_sphere": {
  "data": {
   "shadows": "dipy.core.sphere_stats.random_uniform_on_sphere"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.test_bad_edges_faces": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      53
     ]
    },
    "dipy.core.sphere.Sphere": {
     "line number": [
      53
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_disperse_charges": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": {
    "dipy.core.sphere.HemiSphere": {
     "line number": [
      331,
      338,
      345,
      355
     ]
    },
    "dipy.core.sphere.disperse_charges": {
     "line number": [
      331,
      338,
      345,
      355
     ]
    },
    "len": {
     "line number": [
      340,
      347,
      356
     ]
    },
    "numpy.arange": {
     "line number": [
      352
     ]
    },
    "numpy.array": {
     "line number": [
      328,
      334,
      336
     ]
    },
    "numpy.sqrt": {
     "line number": [
      353,
      361
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      342,
      349,
      358
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      332,
      339,
      346,
      362
     ]
    },
    "range": {
     "line number": [
      340,
      347,
      356
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_disperse_charges_alt": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": {
    "dipy.core.sphere._get_forces_alt": {
     "line number": [
      372,
      380
     ]
    },
    "dipy.core.sphere.disperse_charges_alt": {
     "line number": [
      376
     ]
    },
    "dipy.core.sphere_stats.random_uniform_on_sphere": {
     "line number": [
      368
     ]
    },
    "numpy.testing.assert_array_less": {
     "line number": [
      384
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_edges_faces": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      131,
      136,
      141
     ]
    },
    "dipy.core.tests.test_sphere.array_to_set": {
     "line number": [
      133,
      133,
      134,
      134,
      137,
      137,
      138,
      139,
      142,
      142,
      143,
      144
     ]
    },
    "dipy.core.tests.test_sphere.edges": {
     "line number": [
      134
     ]
    },
    "dipy.core.tests.test_sphere.oct_faces": {
     "line number": [
      132
     ]
    },
    "dipy.core.tests.test_sphere.pytest": {
     "line number": [
      128
     ]
    },
    "dipy.core.tests.test_sphere.verts": {
     "line number": [
      131,
      136,
      141
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      133,
      134,
      137,
      138,
      142,
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_faces_from_sphere_vertices": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "dipy.core.sphere.faces_from_sphere_vertices": {
     "line number": [
      114
     ]
    },
    "dipy.core.tests.test_sphere.array_to_set": {
     "line number": [
      115,
      116
     ]
    },
    "dipy.core.tests.test_sphere.oct_faces": {
     "line number": [
      116
     ]
    },
    "dipy.core.tests.test_sphere.pytest": {
     "line number": [
      111
     ]
    },
    "dipy.core.tests.test_sphere.verts": {
     "line number": [
      114
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_get_force": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "dipy.core.sphere._get_forces": {
     "line number": [
      317,
      322
     ]
    },
    "numpy.array": {
     "line number": [
      314,
      320
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      324
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      318,
      323
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_hemisphere_constructor": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      221
     ]
    },
    "dipy.core.sphere.HemiSphere": {
     "line number": [
      216,
      217,
      218
     ]
    },
    "dipy.core.tests.test_sphere.verts": {
     "line number": [
      216,
      218,
      220
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      223,
      224,
      225,
      227,
      228,
      229
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_hemisphere_faces": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": {
    "dipy.core.geometry.vector_norm": {
     "line number": [
      275
     ]
    },
    "dipy.core.sphere.HemiSphere": {
     "line number": [
      306
     ]
    },
    "dipy.core.tests.test_sphere.array_to_set": {
     "line number": [
      308,
      308,
      310,
      310
     ]
    },
    "dipy.core.tests.test_sphere.edges": {
     "line number": [
      288,
      307,
      308
     ]
    },
    "dipy.core.tests.test_sphere.pytest": {
     "line number": [
      262
     ]
    },
    "len": {
     "line number": [
      307,
      307,
      309,
      309
     ]
    },
    "numpy.array": {
     "line number": [
      267,
      276,
      288
     ]
    },
    "numpy.sqrt": {
     "line number": [
      266
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      307,
      308,
      309,
      310
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_hemisphere_find_closest": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "dipy.core.sphere.hemi_icosahedron.subdivide": {
     "line number": [
      171
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      173,
      174,
      176
     ]
    },
    "range": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_hemisphere_subdivide": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "dipy.core.sphere.HemiSphere": {
     "line number": [
      210
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      192,
      200
     ]
    },
    "dipy.core.sphere.unit_icosahedron": {
     "line number": [
      192
     ]
    },
    "dipy.core.sphere.unit_icosahedron.subdivide": {
     "line number": [
      199
     ]
    },
    "dipy.core.tests.test_sphere.pytest": {
     "line number": [
      180
     ]
    },
    "flip": {
     "line number": [
      194,
      202
     ]
    },
    "numpy.lexsort": {
     "line number": [
      195,
      203
     ]
    },
    "numpy.round": {
     "line number": [
      193,
      201
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      207,
      211,
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_hemisphere_subdivide.flip": {
  "data": {
   "lineno": 184
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_mirror": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "_angle": {
     "line number": [
      257,
      258,
      259
     ]
    },
    "dipy.core.sphere.HemiSphere": {
     "line number": [
      245
     ]
    },
    "dipy.core.tests.test_sphere.pytest": {
     "line number": [
      232
     ]
    },
    "dipy.core.tests.test_sphere.verts": {
     "line number": [
      235,
      239,
      239,
      240,
      240,
      240,
      240,
      245,
      250,
      257,
      257,
      258,
      258,
      259,
      259
     ]
    },
    "len": {
     "line number": [
      248,
      249
     ]
    },
    "numpy.array": {
     "line number": [
      239
     ]
    },
    "numpy.pi": {
     "line number": [
      257,
      258,
      259
     ]
    },
    "numpy.sqrt": {
     "line number": [
      240
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      257,
      258,
      259
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      248,
      249
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_mirror._angle": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "numpy.arccos": {
     "line number": [
      253
     ]
    },
    "numpy.dot": {
     "line number": [
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_sphere_attrs": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      121
     ]
    },
    "dipy.core.tests.test_sphere.verts": {
     "line number": [
      121,
      122,
      123,
      124,
      125
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      122,
      123,
      124,
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_sphere_construct": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      57,
      58,
      59
     ]
    },
    "dipy.core.tests.test_sphere.verts": {
     "line number": [
      57,
      59
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      61,
      62,
      63,
      65,
      66,
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_sphere_construct_args": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      28,
      29,
      30,
      31
     ]
    },
    "dipy.core.sphere.Sphere": {
     "line number": [
      28,
      29,
      30,
      31
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      28,
      29,
      30,
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_sphere_edges_faces": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      35
     ]
    },
    "dipy.core.sphere.Sphere": {
     "line number": [
      35,
      36,
      37
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_sphere_find_closest": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "dipy.core.sphere.unit_octahedron.subdivide": {
     "line number": [
      165
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      167
     ]
    },
    "range": {
     "line number": [
      166
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_sphere_not_unit": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      49
     ]
    },
    "dipy.core.sphere.Sphere": {
     "line number": [
      49
     ]
    },
    "dipy.core.tests.test_sphere.warnings": {
     "line number": [
      47,
      48
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_sphere_subdivide": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      151,
      156
     ]
    },
    "dipy.core.sphere.unit_icosahedron.subdivide": {
     "line number": [
      155
     ]
    },
    "dipy.core.sphere.unit_octahedron.subdivide": {
     "line number": [
      150
     ]
    },
    "dipy.core.tests.test_sphere.array_to_set": {
     "line number": [
      153,
      153,
      158,
      158
     ]
    },
    "dipy.core.tests.test_sphere.pytest": {
     "line number": [
      147
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      152,
      153,
      157,
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_unique_edges": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "dipy.core.sphere.unique_edges": {
     "line number": [
      81,
      84
     ]
    },
    "dipy.core.tests.test_sphere.array_to_set": {
     "line number": [
      77,
      82,
      85
     ]
    },
    "dipy.core.tests.test_sphere.edges": {
     "line number": [
      86,
      88
     ]
    },
    "numpy.array": {
     "line number": [
      75
     ]
    },
    "numpy.sort": {
     "line number": [
      88,
      88
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      82,
      85,
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.test_unique_sets": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "dipy.core.sphere.unique_sets": {
     "line number": [
      100,
      105
     ]
    },
    "dipy.core.tests.test_sphere.array_to_set": {
     "line number": [
      96,
      102,
      107
     ]
    },
    "len": {
     "line number": [
      101,
      101,
      106,
      106
     ]
    },
    "numpy.array": {
     "line number": [
      92
     ]
    },
    "numpy.sort": {
     "line number": [
      108,
      108
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      101,
      102,
      106,
      107,
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_sphere.unique_edges": {
  "data": {
   "shadows": "dipy.core.sphere.unique_edges"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.unique_sets": {
  "data": {
   "shadows": "dipy.core.sphere.unique_sets"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.unit_icosahedron": {
  "data": {
   "shadows": "dipy.core.sphere.unit_icosahedron"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.unit_octahedron": {
  "data": {
   "shadows": "dipy.core.sphere.unit_octahedron"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.vector_norm": {
  "data": {
   "shadows": "dipy.core.geometry.vector_norm"
  },
  "type": "import"
 },
 "dipy.core.tests.test_sphere.verts": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "dipy.core.tests.test_sphere.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.core.tests.test_subdivide_octahedron": {
  "data": {},
  "type": "module"
 },
 "dipy.core.tests.test_subdivide_octahedron.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.core.tests.test_subdivide_octahedron.create_half_unit_sphere": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.tests.test_subdivide_octahedron.create_unit_sphere": {
  "data": {
   "shadows": "dipy.core.subdivide_octahedron.create_unit_sphere"
  },
  "type": "import"
 },
 "dipy.core.tests.test_subdivide_octahedron.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.tests.test_subdivide_octahedron.test_create_unit_sphere": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "dipy.core.subdivide_octahedron.create_unit_sphere": {
     "line number": [
      8
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.wavelet": {
  "data": {},
  "type": "module"
 },
 "dipy.core.wavelet.afb3D": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "dipy.core.wavelet.afb3D_A": {
     "line number": [
      232,
      234,
      235,
      237,
      238,
      239,
      240
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.wavelet.afb3D_A": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "dipy.core.wavelet.cshift3D": {
     "line number": [
      96
     ]
    },
    "dipy.core.wavelet.permutationinverse": {
     "line number": [
      110
     ]
    },
    "dipy.denoise.nlmeans_block.firdn": {
     "line number": [
      101,
      106
     ]
    },
    "numpy.zeros": {
     "line number": [
      98,
      99
     ]
    },
    "range": {
     "line number": [
      91,
      100,
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.wavelet.cshift3D": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      34,
      35
     ]
    },
    "numpy.int64": {
     "line number": [
      35
     ]
    },
    "range": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.wavelet.dwt3D": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "dipy.core.wavelet.afb3D": {
     "line number": [
      266
     ]
    },
    "range": {
     "line number": [
      265
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.wavelet.idwt3D": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": {
    "dipy.core.wavelet.sfb3D": {
     "line number": [
      292
     ]
    },
    "range": {
     "line number": [
      291
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.wavelet.nlmeans_block": {
  "data": {
   "shadows": "dipy.denoise.nlmeans_block"
  },
  "type": "import"
 },
 "dipy.core.wavelet.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.core.wavelet.permutationinverse": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      59
     ]
    },
    "len": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.wavelet.sfb3D": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "dipy.core.wavelet.sfb3D_A": {
     "line number": [
      191,
      192,
      193,
      194,
      196,
      197,
      199
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.core.wavelet.sfb3D_A": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "dipy.core.wavelet.cshift3D": {
     "line number": [
      153
     ]
    },
    "dipy.core.wavelet.permutationinverse": {
     "line number": [
      155
     ]
    },
    "dipy.denoise.nlmeans_block.upfir": {
     "line number": [
      149,
      150
     ]
    },
    "numpy.array": {
     "line number": [
      149,
      150
     ]
    },
    "numpy.zeros": {
     "line number": [
      147
     ]
    },
    "range": {
     "line number": [
      140,
      148
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data": {
  "data": {
   "symbols_in_volume": {
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      196,
      197
     ]
    },
    "dipy.data.DATA_DIR": {
     "line number": [
      66,
      67,
      68,
      69,
      70,
      71
     ]
    },
    "dipy.data._gradient_from_file": {
     "line number": [
      211,
      212,
      213
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      196,
      197
     ]
    },
    "os.path.dirname": {
     "line number": [
      64
     ]
    },
    "os.path.join": {
     "line number": [
      64,
      66,
      67,
      68,
      69,
      70,
      71
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.data.DATA_DIR": {
  "data": {
   "lineno": 64
  },
  "type": "constant"
 },
 "dipy.data.DataError": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.data.GradientTable": {
  "data": {
   "shadows": "dipy.core.gradients.GradientTable"
  },
  "type": "import"
 },
 "dipy.data.HemiSphere": {
  "data": {
   "shadows": "dipy.core.sphere.HemiSphere"
  },
  "type": "import"
 },
 "dipy.data.SPHERE_FILES": {
  "data": {
   "lineno": 65
  },
  "type": "constant"
 },
 "dipy.data.Sphere": {
  "data": {
   "shadows": "dipy.core.sphere.Sphere"
  },
  "type": "import"
 },
 "dipy.data._gradient_from_file": {
  "data": {
   "lineno": 200
  },
  "type": "function"
 },
 "dipy.data._gradient_from_file.gtab_getter": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "dipy.core.gradients.GradientTable": {
     "line number": [
      206
     ]
    },
    "dipy.data.DATA_DIR": {
     "line number": [
      204
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      205
     ]
    },
    "os.path.join": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.default_sphere": {
  "data": {
   "lineno": 196
  },
  "type": "constant"
 },
 "dipy.data.dipy_cmaps": {
  "data": {
   "lineno": 272
  },
  "type": "constant"
 },
 "dipy.data.dirname": {
  "data": {
   "shadows": "os.path.dirname"
  },
  "type": "import"
 },
 "dipy.data.dsi_deconv_voxels": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      227
     ]
    },
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      227
     ]
    },
    "dipy.sims.voxel.sticks_and_ball": {
     "line number": [
      232
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      227
     ]
    },
    "numpy.zeros": {
     "line number": [
      228
     ]
    },
    "range": {
     "line number": [
      229,
      230,
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.dsi_voxels": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      221
     ]
    },
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      217
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      220
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      218,
      219
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetch_bundle_atlas_hcp842": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_bundle_atlas_hcp842"
  },
  "type": "import"
 },
 "dipy.data.fetch_bundle_fa_hcp": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_bundle_fa_hcp"
  },
  "type": "import"
 },
 "dipy.data.fetch_bundles_2_subjects": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_bundles_2_subjects"
  },
  "type": "import"
 },
 "dipy.data.fetch_cenir_multib": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_cenir_multib"
  },
  "type": "import"
 },
 "dipy.data.fetch_cfin_multib": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_cfin_multib"
  },
  "type": "import"
 },
 "dipy.data.fetch_gold_standard_io": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_gold_standard_io"
  },
  "type": "import"
 },
 "dipy.data.fetch_isbi2013_2shell": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_isbi2013_2shell"
  },
  "type": "import"
 },
 "dipy.data.fetch_ivim": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_ivim"
  },
  "type": "import"
 },
 "dipy.data.fetch_mni_template": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_mni_template"
  },
  "type": "import"
 },
 "dipy.data.fetch_scil_b0": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_scil_b0"
  },
  "type": "import"
 },
 "dipy.data.fetch_sherbrooke_3shell": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_sherbrooke_3shell"
  },
  "type": "import"
 },
 "dipy.data.fetch_stanford_hardi": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_stanford_hardi"
  },
  "type": "import"
 },
 "dipy.data.fetch_stanford_labels": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_stanford_labels"
  },
  "type": "import"
 },
 "dipy.data.fetch_stanford_pve_maps": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_stanford_pve_maps"
  },
  "type": "import"
 },
 "dipy.data.fetch_stanford_t1": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_stanford_t1"
  },
  "type": "import"
 },
 "dipy.data.fetch_syn_data": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_syn_data"
  },
  "type": "import"
 },
 "dipy.data.fetch_taiwan_ntu_dsi": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_taiwan_ntu_dsi"
  },
  "type": "import"
 },
 "dipy.data.fetch_target_tractogram_hcp": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_target_tractogram_hcp"
  },
  "type": "import"
 },
 "dipy.data.fetch_tissue_data": {
  "data": {
   "shadows": "dipy.data.fetcher.fetch_tissue_data"
  },
  "type": "import"
 },
 "dipy.data.fetcher": {
  "data": {
   "symbols_in_volume": {
    "dipy.data.fetcher.CENIR_notes": {
     "line number": [
      1197,
      1198
     ]
    },
    "dipy.data.fetcher.UW_RW_URL": {
     "line number": [
      250,
      274,
      315,
      330,
      360,
      372,
      394
     ]
    },
    "dipy.data.fetcher._make_fetcher": {
     "line number": [
      247,
      261,
      271,
      283,
      294,
      302,
      312,
      327,
      338,
      357,
      369,
      380,
      391,
      412,
      426,
      437,
      449,
      461,
      493
     ]
    },
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      249,
      263,
      273,
      285,
      296,
      304,
      314,
      329,
      340,
      359,
      371,
      382,
      393,
      414,
      428,
      439,
      451,
      463,
      495
     ]
    },
    "dipy.data.fetcher.fetch_cenir_multib": {
     "line number": [
      1197
     ]
    },
    "dipy.data.fetcher.fetch_mni_template": {
     "line number": [
      1080
     ]
    },
    "dipy.data.fetcher.mni_notes": {
     "line number": [
      1079,
      1080
     ]
    },
    "dipy.data.fetcher.os": {
     "line number": [
      24,
      25,
      27
     ]
    },
    "dipy.data.fetcher.read_cenir_multib": {
     "line number": [
      1198
     ]
    },
    "dipy.data.fetcher.read_mni_template": {
     "line number": [
      1079
     ]
    },
    "os.path.join": {
     "line number": [
      27,
      249,
      263,
      273,
      285,
      296,
      304,
      314,
      329,
      340,
      371,
      382,
      393,
      414,
      428,
      439,
      451,
      463,
      495
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.data.fetcher.CENIR_notes": {
  "data": {
   "lineno": 1187
  },
  "type": "constant"
 },
 "dipy.data.fetcher.FetcherError": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.data.fetcher.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.data.fetcher.UW_RW_URL": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "dipy.data.fetcher._already_there_msg": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "dipy.data.fetcher._log": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher._get_file_data": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      120
     ]
    },
    "dipy.data.fetcher.contextlib": {
     "line number": [
      117
     ]
    },
    "dipy.data.fetcher.copyfileobj_withprogress": {
     "line number": [
      127
     ]
    },
    "open": {
     "line number": [
      123
     ]
    },
    "shutil.copyfileobj": {
     "line number": [
      125
     ]
    },
    "urllib.request.urlopen": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher._get_file_md5": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "hashlib.md5": {
     "line number": [
      84
     ]
    },
    "iter": {
     "line number": [
      86
     ]
    },
    "open": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher._log": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      41
     ]
    },
    "dipy.data.fetcher.logging": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher._make_fetcher": {
  "data": {
   "lineno": 175
  },
  "type": "function"
 },
 "dipy.data.fetcher._make_fetcher.fetcher": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      231,
      238
     ]
    },
    "dipy.data.fetcher._log": {
     "line number": [
      221
     ]
    },
    "dipy.data.fetcher.fetch_data": {
     "line number": [
      218
     ]
    },
    "dipy.data.fetcher.os": {
     "line number": [
      224,
      226
     ]
    },
    "dipy.data.fetcher.tarfile": {
     "line number": [
      227
     ]
    },
    "dipy.data.fetcher.zipfile": {
     "line number": [
      233
     ]
    },
    "enumerate": {
     "line number": [
      215
     ]
    },
    "os.path.join": {
     "line number": [
      227,
      233
     ]
    },
    "tuple": {
     "line number": [
      234
     ]
    },
    "zip": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.check_md5": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "dipy.data.fetcher.FetcherError": {
     "line number": [
      113
     ]
    },
    "dipy.data.fetcher._get_file_md5": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.contextlib": {
  "data": {
   "shadows": "contextlib"
  },
  "type": "import"
 },
 "dipy.data.fetcher.copyfileobj": {
  "data": {
   "shadows": "shutil.copyfileobj"
  },
  "type": "import"
 },
 "dipy.data.fetcher.copyfileobj_withprogress": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "dipy.data.fetcher.update_progressbar": {
     "line number": [
      70
     ]
    },
    "float": {
     "line number": [
      69,
      69
     ]
    },
    "len": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.dipy_home": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_bundle_atlas_hcp842": {
  "data": {
   "lineno": 426
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_bundle_fa_hcp": {
  "data": {
   "lineno": 449
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_bundles_2_subjects": {
  "data": {
   "lineno": 369
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_cenir_multib": {
  "data": {
   "lineno": 1083,
   "symbols_in_volume": {
    "dipy.data.fetcher.UW_RW_URL": {
     "line number": [
      1131
     ]
    },
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      1092
     ]
    },
    "dipy.data.fetcher.fetch_data": {
     "line number": [
      1135
     ]
    },
    "os.path.join": {
     "line number": [
      1092
     ]
    },
    "zip": {
     "line number": [
      1132
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.fetch_cfin_multib": {
  "data": {
   "lineno": 391
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_data": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "dipy.data.fetcher._already_there_msg": {
     "line number": [
      170
     ]
    },
    "dipy.data.fetcher._get_file_data": {
     "line number": [
      167
     ]
    },
    "dipy.data.fetcher._get_file_md5": {
     "line number": [
      163
     ]
    },
    "dipy.data.fetcher._log": {
     "line number": [
      153,
      157,
      166,
      172
     ]
    },
    "dipy.data.fetcher.check_md5": {
     "line number": [
      168
     ]
    },
    "dipy.data.fetcher.os": {
     "line number": [
      152,
      154,
      163
     ]
    },
    "hashlib.md5": {
     "line number": [
      161,
      163,
      168
     ]
    },
    "os.path.join": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.fetch_file_formats": {
  "data": {
   "lineno": 412
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_gold_standard_io": {
  "data": {
   "lineno": 493
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_isbi2013_2shell": {
  "data": {
   "lineno": 247
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_ivim": {
  "data": {
   "lineno": 380
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_mni_template": {
  "data": {
   "lineno": 338
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_qtdMRI_test_retest_2subjects": {
  "data": {
   "lineno": 461
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_scil_b0": {
  "data": {
   "lineno": 357
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_sherbrooke_3shell": {
  "data": {
   "lineno": 271
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_stanford_hardi": {
  "data": {
   "lineno": 283
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_stanford_labels": {
  "data": {
   "lineno": 261
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_stanford_pve_maps": {
  "data": {
   "lineno": 302
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_stanford_t1": {
  "data": {
   "lineno": 294
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_syn_data": {
  "data": {
   "lineno": 327
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_taiwan_ntu_dsi": {
  "data": {
   "lineno": 312
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_target_tractogram_hcp": {
  "data": {
   "lineno": 437
  },
  "type": "constant"
 },
 "dipy.data.fetcher.fetch_tissue_data": {
  "data": {
   "lineno": 906,
   "symbols_in_volume": {
    "dipy.data.fetcher._already_there_msg": {
     "line number": [
      937
     ]
    },
    "dipy.data.fetcher._get_file_data": {
     "line number": [
      931
     ]
    },
    "dipy.data.fetcher._log": {
     "line number": [
      925,
      928,
      934,
      935
     ]
    },
    "dipy.data.fetcher.check_md5": {
     "line number": [
      932
     ]
    },
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      914
     ]
    },
    "dipy.data.fetcher.os": {
     "line number": [
      924,
      926
     ]
    },
    "len": {
     "line number": [
      930
     ]
    },
    "os.path.join": {
     "line number": [
      914,
      931,
      932
     ]
    },
    "range": {
     "line number": [
      930
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.get_bundle_atlas_hcp842": {
  "data": {
   "lineno": 1338,
   "symbols_in_volume": {
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      1345,
      1351
     ]
    },
    "os.path.join": {
     "line number": [
      1345,
      1351
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.get_file_formats": {
  "data": {
   "lineno": 1318,
   "symbols_in_volume": {
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      1326,
      1331
     ]
    },
    "os.path.join": {
     "line number": [
      1326,
      1331
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.get_fnames": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": {
    "dipy.data.fetcher.fetch_bundle_atlas_hcp842": {
     "line number": [
      684
     ]
    },
    "dipy.data.fetcher.fetch_cfin_multib": {
     "line number": [
      671
     ]
    },
    "dipy.data.fetcher.fetch_isbi2013_2shell": {
     "line number": [
      636
     ]
    },
    "dipy.data.fetcher.fetch_ivim": {
     "line number": [
      659
     ]
    },
    "dipy.data.fetcher.fetch_scil_b0": {
     "line number": [
      613
     ]
    },
    "dipy.data.fetcher.fetch_sherbrooke_3shell": {
     "line number": [
      630
     ]
    },
    "dipy.data.fetcher.fetch_stanford_hardi": {
     "line number": [
      618
     ]
    },
    "dipy.data.fetcher.fetch_stanford_labels": {
     "line number": [
      642
     ]
    },
    "dipy.data.fetcher.fetch_stanford_pve_maps": {
     "line number": [
      653
     ]
    },
    "dipy.data.fetcher.fetch_stanford_t1": {
     "line number": [
      650
     ]
    },
    "dipy.data.fetcher.fetch_syn_data": {
     "line number": [
      645
     ]
    },
    "dipy.data.fetcher.fetch_taiwan_ntu_dsi": {
     "line number": [
      624
     ]
    },
    "dipy.data.fetcher.fetch_target_tractogram_hcp": {
     "line number": [
      680
     ]
    },
    "dipy.data.fetcher.fetch_tissue_data": {
     "line number": [
      665
     ]
    },
    "dipy.data.fetcher.get_bundle_atlas_hcp842": {
     "line number": [
      685
     ]
    },
    "dipy.data.fetcher.os": {
     "line number": [
      560,
      616
     ]
    },
    "os.path.join": {
     "line number": [
      560,
      562,
      563,
      564,
      567,
      569,
      570,
      571,
      574,
      576,
      578,
      580,
      582,
      584,
      586,
      588,
      589,
      590,
      593,
      596,
      599,
      602,
      604,
      606,
      608,
      611,
      615,
      619,
      620,
      621,
      625,
      626,
      627,
      631,
      632,
      633,
      637,
      638,
      639,
      643,
      646,
      647,
      651,
      654,
      655,
      656,
      660,
      661,
      662,
      666,
      667,
      668,
      672,
      673,
      674,
      676,
      681
     ]
    },
    "str": {
     "line number": [
      611
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.get_target_tractogram_hcp": {
  "data": {
   "lineno": 1382,
   "symbols_in_volume": {
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      1388
     ]
    },
    "os.path.join": {
     "line number": [
      1388
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.get_two_hcp842_bundles": {
  "data": {
   "lineno": 1360,
   "symbols_in_volume": {
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      1367,
      1373
     ]
    },
    "os.path.join": {
     "line number": [
      1367,
      1373
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.data.fetcher.gradient_table_from_gradient_strength_bvecs": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table_from_gradient_strength_bvecs"
  },
  "type": "import"
 },
 "dipy.data.fetcher.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.data.fetcher.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.data.fetcher.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.data.fetcher.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.data.fetcher.md5": {
  "data": {
   "shadows": "hashlib.md5"
  },
  "type": "import"
 },
 "dipy.data.fetcher.mni_notes": {
  "data": {
   "lineno": 977
  },
  "type": "constant"
 },
 "dipy.data.fetcher.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.data.fetcher.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.data.fetcher.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.data.fetcher.pjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.data.fetcher.read_bundles_2_subjects": {
  "data": {
   "lineno": 1201,
   "symbols_in_volume": {
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      1238
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      1246,
      1250
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      1257
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      1262
     ]
    },
    "os.path.join": {
     "line number": [
      1238,
      1246,
      1250,
      1257
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.data.fetcher.read_cenir_multib": {
  "data": {
   "lineno": 1139,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      1184
     ]
    },
    "dipy.data.fetcher.fetch_cenir_multib": {
     "line number": [
      1153
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      1177
     ]
    },
    "int": {
     "line number": [
      1156
     ]
    },
    "isinstance": {
     "line number": [
      1156
     ]
    },
    "nibabel.Nifti1Image": {
     "line number": [
      1183
     ]
    },
    "nibabel.load": {
     "line number": [
      1182
     ]
    },
    "numpy.concatenate": {
     "line number": [
      1183,
      1184
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      1178,
      1179
     ]
    },
    "os.path.join": {
     "line number": [
      1158,
      1159,
      1160,
      1161,
      1162,
      1163,
      1164,
      1165,
      1166,
      1167,
      1168,
      1169,
      1170,
      1171,
      1172
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_cfin_dwi": {
  "data": {
   "lineno": 1286,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      1299
     ]
    },
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      1297
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      1298
     ]
    },
    "nibabel.load": {
     "line number": [
      1300
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_cfin_t1": {
  "data": {
   "lineno": 1304,
   "symbols_in_volume": {
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      1313
     ]
    },
    "nibabel.load": {
     "line number": [
      1314
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_isbi2013_2shell": {
  "data": {
   "lineno": 791,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      804
     ]
    },
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      802
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      803
     ]
    },
    "nibabel.load": {
     "line number": [
      805
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_ivim": {
  "data": {
   "lineno": 1268,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      1281
     ]
    },
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      1279
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      1280
     ]
    },
    "nibabel.load": {
     "line number": [
      1282
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_mni_template": {
  "data": {
   "lineno": 1013,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1049,
      1052,
      1057,
      1074
     ]
    },
    "dipy.data.fetcher.fetch_mni_template": {
     "line number": [
      1039
     ]
    },
    "isinstance": {
     "line number": [
      1054,
      1060,
      1067
     ]
    },
    "nibabel.load": {
     "line number": [
      1061,
      1065,
      1068,
      1072
     ]
    },
    "os.path.join": {
     "line number": [
      1040,
      1041,
      1044,
      1045
     ]
    },
    "str": {
     "line number": [
      1054,
      1060,
      1067
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_qtdMRI_test_retest_2subjects": {
  "data": {
   "lineno": 688,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table_from_gradient_strength_bvecs": {
     "line number": [
      757
     ]
    },
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      732,
      741,
      750
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      733,
      742
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      752
     ]
    },
    "os.path.join": {
     "line number": [
      732,
      741,
      750
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_scil_b0": {
  "data": {
   "lineno": 765,
   "symbols_in_volume": {
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      774
     ]
    },
    "nibabel.load": {
     "line number": [
      775
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_sherbrooke_3shell": {
  "data": {
   "lineno": 809,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      822
     ]
    },
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      820
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      821
     ]
    },
    "nibabel.load": {
     "line number": [
      823
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_siemens_scil_b0": {
  "data": {
   "lineno": 778,
   "symbols_in_volume": {
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      787
     ]
    },
    "nibabel.load": {
     "line number": [
      788
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_stanford_hardi": {
  "data": {
   "lineno": 837,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      850
     ]
    },
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      848
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      849
     ]
    },
    "nibabel.load": {
     "line number": [
      851
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_stanford_labels": {
  "data": {
   "lineno": 827,
   "symbols_in_volume": {
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      832
     ]
    },
    "dipy.data.fetcher.read_stanford_hardi": {
     "line number": [
      830
     ]
    },
    "nibabel.load": {
     "line number": [
      833
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_stanford_pve_maps": {
  "data": {
   "lineno": 861,
   "symbols_in_volume": {
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      862
     ]
    },
    "nibabel.load": {
     "line number": [
      863,
      864,
      865
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_stanford_t1": {
  "data": {
   "lineno": 855,
   "symbols_in_volume": {
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      856
     ]
    },
    "nibabel.load": {
     "line number": [
      857
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_syn_data": {
  "data": {
   "lineno": 889,
   "symbols_in_volume": {
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      900
     ]
    },
    "nibabel.load": {
     "line number": [
      901,
      902
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_taiwan_ntu_dsi": {
  "data": {
   "lineno": 869,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      884
     ]
    },
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      880
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      881
     ]
    },
    "nibabel.load": {
     "line number": [
      885
     ]
    },
    "numpy.sqrt": {
     "line number": [
      883
     ]
    },
    "numpy.sum": {
     "line number": [
      883
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.read_tissue_data": {
  "data": {
   "lineno": 942,
   "symbols_in_volume": {
    "dipy.data.fetcher.check_md5": {
     "line number": [
      965,
      966,
      967
     ]
    },
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      956
     ]
    },
    "nibabel.load": {
     "line number": [
      970,
      972,
      974
     ]
    },
    "os.path.join": {
     "line number": [
      956,
      957,
      958,
      959
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.data.fetcher.tarfile": {
  "data": {
   "shadows": "tarfile"
  },
  "type": "import"
 },
 "dipy.data.fetcher.update_progressbar": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "dipy.data.fetcher.sys": {
     "line number": [
      57,
      58
     ]
    },
    "float": {
     "line number": [
      54
     ]
    },
    "int": {
     "line number": [
      53
     ]
    },
    "round": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.fetcher.urlopen": {
  "data": {
   "shadows": "urllib.request.urlopen"
  },
  "type": "import"
 },
 "dipy.data.fetcher.zipfile": {
  "data": {
   "shadows": "zipfile"
  },
  "type": "import"
 },
 "dipy.data.get_3shell_gtab": {
  "data": {
   "lineno": 211
  },
  "type": "constant"
 },
 "dipy.data.get_bundle_atlas_hcp842": {
  "data": {
   "shadows": "dipy.data.fetcher.get_bundle_atlas_hcp842"
  },
  "type": "import"
 },
 "dipy.data.get_cmap": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": {
    "dipy.data.DATA_DIR": {
     "line number": [
      279
     ]
    },
    "dipy.data.dipy_cmaps": {
     "line number": [
      278,
      281,
      283
     ]
    },
    "dipy.data.json": {
     "line number": [
      281
     ]
    },
    "open": {
     "line number": [
      280
     ]
    },
    "os.path.join": {
     "line number": [
      279
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.get_cmap.simple_cmap": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      290
     ]
    },
    "len": {
     "line number": [
      289
     ]
    },
    "numpy.interp": {
     "line number": [
      296
     ]
    },
    "numpy.ones": {
     "line number": [
      289
     ]
    },
    "zip": {
     "line number": [
      291
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.get_fnames": {
  "data": {
   "shadows": "dipy.data.fetcher.get_fnames"
  },
  "type": "import"
 },
 "dipy.data.get_gtab_taiwan_dsi": {
  "data": {
   "lineno": 213
  },
  "type": "constant"
 },
 "dipy.data.get_isbi2013_2shell_gtab": {
  "data": {
   "lineno": 212
  },
  "type": "constant"
 },
 "dipy.data.get_sim_voxels": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "dipy.data.DATA_DIR": {
     "line number": [
      117,
      119,
      121
     ]
    },
    "dipy.data.gzip": {
     "line number": [
      122
     ]
    },
    "dipy.data.loads_compat": {
     "line number": [
      122
     ]
    },
    "os.path.join": {
     "line number": [
      117,
      119,
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.get_skeleton": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "dipy.data.DATA_DIR": {
     "line number": [
      147,
      149
     ]
    },
    "dipy.data.gzip": {
     "line number": [
      150
     ]
    },
    "dipy.data.loads_compat": {
     "line number": [
      150
     ]
    },
    "os.path.join": {
     "line number": [
      147,
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.get_sphere": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "as_native_array": {
     "line number": [
      192,
      193
     ]
    },
    "dipy.core.sphere.Sphere": {
     "line number": [
      192
     ]
    },
    "dipy.data.DataError": {
     "line number": [
      188
     ]
    },
    "dipy.data.SPHERE_FILES": {
     "line number": [
      186
     ]
    },
    "numpy.load": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.get_target_tractogram_hcp": {
  "data": {
   "shadows": "dipy.data.fetcher.get_target_tractogram_hcp"
  },
  "type": "import"
 },
 "dipy.data.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.data.gzip": {
  "data": {
   "shadows": "gzip"
  },
  "type": "import"
 },
 "dipy.data.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "dipy.data.load": {
  "data": {
   "shadows": "nibabel.load"
  },
  "type": "import"
 },
 "dipy.data.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.data.loads_compat": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      61
     ]
    },
    "dipy.data.pickle": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.matlab_life_results": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "dipy.data.DATA_DIR": {
     "line number": [
      311,
      312
     ]
    },
    "numpy.load": {
     "line number": [
      311,
      312
     ]
    },
    "os.path.join": {
     "line number": [
      311,
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.mrtrix_spherical_functions": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      268
     ]
    },
    "dipy.data.DATA_DIR": {
     "line number": [
      262,
      263,
      264
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      262,
      263
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      264
     ]
    },
    "os.path.join": {
     "line number": [
      262,
      263,
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.data.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.data.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "dipy.data.pjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.data.read_bundles_2_subjects": {
  "data": {
   "shadows": "dipy.data.fetcher.read_bundles_2_subjects"
  },
  "type": "import"
 },
 "dipy.data.read_cenir_multib": {
  "data": {
   "shadows": "dipy.data.fetcher.read_cenir_multib"
  },
  "type": "import"
 },
 "dipy.data.read_cfin_dwi": {
  "data": {
   "shadows": "dipy.data.fetcher.read_cfin_dwi"
  },
  "type": "import"
 },
 "dipy.data.read_cfin_t1": {
  "data": {
   "shadows": "dipy.data.fetcher.read_cfin_t1"
  },
  "type": "import"
 },
 "dipy.data.read_isbi2013_2shell": {
  "data": {
   "shadows": "dipy.data.fetcher.read_isbi2013_2shell"
  },
  "type": "import"
 },
 "dipy.data.read_ivim": {
  "data": {
   "shadows": "dipy.data.fetcher.read_ivim"
  },
  "type": "import"
 },
 "dipy.data.read_mni_template": {
  "data": {
   "shadows": "dipy.data.fetcher.read_mni_template"
  },
  "type": "import"
 },
 "dipy.data.read_scil_b0": {
  "data": {
   "shadows": "dipy.data.fetcher.read_scil_b0"
  },
  "type": "import"
 },
 "dipy.data.read_sherbrooke_3shell": {
  "data": {
   "shadows": "dipy.data.fetcher.read_sherbrooke_3shell"
  },
  "type": "import"
 },
 "dipy.data.read_stanford_hardi": {
  "data": {
   "shadows": "dipy.data.fetcher.read_stanford_hardi"
  },
  "type": "import"
 },
 "dipy.data.read_stanford_labels": {
  "data": {
   "shadows": "dipy.data.fetcher.read_stanford_labels"
  },
  "type": "import"
 },
 "dipy.data.read_stanford_pve_maps": {
  "data": {
   "shadows": "dipy.data.fetcher.read_stanford_pve_maps"
  },
  "type": "import"
 },
 "dipy.data.read_stanford_t1": {
  "data": {
   "shadows": "dipy.data.fetcher.read_stanford_t1"
  },
  "type": "import"
 },
 "dipy.data.read_syn_data": {
  "data": {
   "shadows": "dipy.data.fetcher.read_syn_data"
  },
  "type": "import"
 },
 "dipy.data.read_taiwan_ntu_dsi": {
  "data": {
   "shadows": "dipy.data.fetcher.read_taiwan_ntu_dsi"
  },
  "type": "import"
 },
 "dipy.data.read_tissue_data": {
  "data": {
   "shadows": "dipy.data.fetcher.read_tissue_data"
  },
  "type": "import"
 },
 "dipy.data.relist_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.relist_streamlines"
  },
  "type": "import"
 },
 "dipy.data.small_sphere": {
  "data": {
   "lineno": 197
  },
  "type": "constant"
 },
 "dipy.data.sticks_and_ball": {
  "data": {
   "shadows": "dipy.sims.voxel.sticks_and_ball"
  },
  "type": "import"
 },
 "dipy.data.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.data.tests": {
  "data": {},
  "type": "module"
 },
 "dipy.data.tests.test_data": {
  "data": {},
  "type": "module"
 },
 "dipy.data.tests.test_data.SPHERE_FILES": {
  "data": {
   "shadows": "dipy.data.SPHERE_FILES"
  },
  "type": "import"
 },
 "dipy.data.tests.test_data.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.data.tests.test_data.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.data.tests.test_data.test_sphere_dtypes": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": {
    "dipy.data.SPHERE_FILES.items": {
     "line number": [
      6
     ]
    },
    "numpy.float64": {
     "line number": [
      8
     ]
    },
    "numpy.load": {
     "line number": [
      7
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      8
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.tests.test_fetcher": {
  "data": {
   "symbols_in_volume": {
    "dipy.data.tests.test_fetcher.sys": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.data.tests.test_fetcher.HTTPServer": {
  "data": {
   "shadows": "http.server.HTTPServer"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.SPHERE_FILES": {
  "data": {
   "shadows": "dipy.data.SPHERE_FILES"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.SimpleHTTPRequestHandler": {
  "data": {
   "shadows": "http.server.SimpleHTTPRequestHandler"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.Thread": {
  "data": {
   "shadows": "threading.Thread"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.fetcher": {
  "data": {
   "shadows": "dipy.data.fetcher"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.op": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.pathname2url": {
  "data": {
   "shadows": "urllib.request.pathname2url"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "dipy.data.tests.test_fetcher.test_check_md5": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "dipy.data.fetcher.FetcherError": {
     "line number": [
      27
     ]
    },
    "dipy.data.fetcher._get_file_md5": {
     "line number": [
      21
     ]
    },
    "dipy.data.fetcher.check_md5": {
     "line number": [
      23,
      25,
      27
     ]
    },
    "dipy.data.tests.test_fetcher.tempfile": {
     "line number": [
      20
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      23,
      25
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.tests.test_fetcher.test_fetch_data": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      99,
      110
     ]
    },
    "dipy.data.SPHERE_FILES": {
     "line number": [
      75
     ]
    },
    "dipy.data.fetcher.FetcherError": {
     "line number": [
      120
     ]
    },
    "dipy.data.fetcher._get_file_md5": {
     "line number": [
      77,
      115
     ]
    },
    "dipy.data.fetcher.fetch_data": {
     "line number": [
      98,
      109,
      121
     ]
    },
    "dipy.data.tests.test_fetcher.os": {
     "line number": [
      87,
      89,
      89,
      126
     ]
    },
    "http.server.HTTPServer": {
     "line number": [
      91
     ]
    },
    "http.server.SimpleHTTPRequestHandler": {
     "line number": [
      91
     ]
    },
    "len": {
     "line number": [
      78
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      76
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      103,
      114
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      115
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      120
     ]
    },
    "open": {
     "line number": [
      106
     ]
    },
    "os.path.exists": {
     "line number": [
      103,
      114
     ]
    },
    "os.path.join": {
     "line number": [
      80
     ]
    },
    "os.path.split": {
     "line number": [
      84
     ]
    },
    "print": {
     "line number": [
      83,
      100,
      111
     ]
    },
    "threading.Thread": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.tests.test_fetcher.test_fetch_data.test_dipy_home": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "dipy.data.fetcher": {
     "line number": [
      136,
      141
     ]
    },
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      138,
      142
     ]
    },
    "dipy.data.tests.test_fetcher.os": {
     "line number": [
      130,
      131,
      132,
      139,
      140,
      146
     ]
    },
    "numpy.testing.assert_string_equal": {
     "line number": [
      138,
      142
     ]
    },
    "os.path.join": {
     "line number": [
      139
     ]
    },
    "reload": {
     "line number": [
      136,
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.tests.test_fetcher.test_make_fetcher": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      59
     ]
    },
    "dipy.data.SPHERE_FILES": {
     "line number": [
      31
     ]
    },
    "dipy.data.fetcher._get_file_md5": {
     "line number": [
      33,
      65
     ]
    },
    "dipy.data.fetcher._make_fetcher": {
     "line number": [
      50
     ]
    },
    "dipy.data.tests.test_fetcher.os": {
     "line number": [
      36,
      41,
      43,
      71
     ]
    },
    "http.server.HTTPServer": {
     "line number": [
      44
     ]
    },
    "http.server.SimpleHTTPRequestHandler": {
     "line number": [
      44
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      32
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      65
     ]
    },
    "os.path.isfile": {
     "line number": [
      64
     ]
    },
    "os.path.join": {
     "line number": [
      64,
      65
     ]
    },
    "os.path.sep": {
     "line number": [
      52
     ]
    },
    "os.path.split": {
     "line number": [
      36,
      53
     ]
    },
    "print": {
     "line number": [
      39,
      40,
      60
     ]
    },
    "sphere_fetcher": {
     "line number": [
      58
     ]
    },
    "threading.Thread": {
     "line number": [
      45
     ]
    },
    "urllib.request.pathname2url": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.two_cingulum_bundles": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": {
    "dipy.data.fetcher.get_fnames": {
     "line number": [
      303
     ]
    },
    "dipy.tracking.streamline.relist_streamlines": {
     "line number": [
      305,
      306
     ]
    },
    "numpy.load": {
     "line number": [
      304
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.data.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.denoise": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.Tester": {
     "line number": [
      5,
      6,
      8
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.denoise.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.denoise.adaptive_soft_matching": {
  "data": {},
  "type": "module"
 },
 "dipy.denoise.adaptive_soft_matching.adaptive_soft_matching": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      75,
      78
     ]
    },
    "dipy.core.wavelet.dwt3D": {
     "line number": [
      66,
      67,
      68
     ]
    },
    "dipy.core.wavelet.idwt3D": {
     "line number": [
      84
     ]
    },
    "dipy.denoise.adaptive_soft_matching.math": {
     "line number": [
      46,
      46,
      47,
      47,
      48,
      48
     ]
    },
    "numpy.array": {
     "line number": [
      55,
      65,
      70,
      79
     ]
    },
    "numpy.exp": {
     "line number": [
      80
     ]
    },
    "numpy.int": {
     "line number": [
      46,
      47,
      48
     ]
    },
    "numpy.std": {
     "line number": [
      72
     ]
    },
    "numpy.zeros": {
     "line number": [
      49,
      50,
      51
     ]
    },
    "range": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.adaptive_soft_matching.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "dipy.denoise.adaptive_soft_matching.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.adaptive_soft_matching.wavelet": {
  "data": {
   "shadows": "dipy.core.wavelet"
  },
  "type": "import"
 },
 "dipy.denoise.bench": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "dipy.denoise.gibbs": {
  "data": {},
  "type": "module"
 },
 "dipy.denoise.gibbs._gibbs_removal_1d": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      97,
      102
     ]
    },
    "dipy.denoise.gibbs._image_tv": {
     "line number": [
      82,
      98,
      103
     ]
    },
    "numpy.exp": {
     "line number": [
      97,
      102
     ]
    },
    "numpy.fft.fft2": {
     "line number": [
      92
     ]
    },
    "numpy.fft.fftshift": {
     "line number": [
      92,
      97,
      102
     ]
    },
    "numpy.fft.ifft2": {
     "line number": [
      97,
      102
     ]
    },
    "numpy.linspace": {
     "line number": [
      77,
      93
     ]
    },
    "numpy.minimum": {
     "line number": [
      83,
      99,
      104
     ]
    },
    "numpy.nonzero": {
     "line number": [
      117
     ]
    },
    "numpy.pi": {
     "line number": [
      94
     ]
    },
    "numpy.zeros": {
     "line number": [
      89,
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.gibbs._gibbs_removal_2d": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      220
     ]
    },
    "dipy.denoise.gibbs._gibbs_removal_1d": {
     "line number": [
      215,
      216
     ]
    },
    "dipy.denoise.gibbs._weights": {
     "line number": [
      213
     ]
    },
    "numpy.any": {
     "line number": [
      212,
      212
     ]
    },
    "numpy.fft.fft2": {
     "line number": [
      218,
      219
     ]
    },
    "numpy.fft.fftshift": {
     "line number": [
      220,
      220
     ]
    },
    "numpy.fft.ifft2": {
     "line number": [
      220
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.gibbs._image_tv": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "numpy.absolute": {
     "line number": [
      33,
      35,
      38,
      40
     ]
    },
    "numpy.concatenate": {
     "line number": [
      30
     ]
    },
    "range": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.gibbs._weights": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "numpy.cos": {
     "line number": [
      156,
      157
     ]
    },
    "numpy.linspace": {
     "line number": [
      151,
      152
     ]
    },
    "numpy.meshgrid": {
     "line number": [
      155
     ]
    },
    "numpy.pi": {
     "line number": [
      151,
      151,
      152,
      152
     ]
    },
    "numpy.zeros": {
     "line number": [
      149,
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.gibbs.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.denoise.gibbs.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.denoise.gibbs.gibbs_removal": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      266,
      280,
      282
     ]
    },
    "dipy.denoise.gibbs._gibbs_removal_2d": {
     "line number": [
      290,
      293
     ]
    },
    "dipy.denoise.gibbs._weights": {
     "line number": [
      286
     ]
    },
    "numpy.swapaxes": {
     "line number": [
      273,
      300
     ]
    },
    "range": {
     "line number": [
      292
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.gibbs.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.gibbs.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.denoise.localpca": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.denoise.localpca._pca_classifier": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "numpy.mean": {
     "line number": [
      42,
      46
     ]
    },
    "numpy.sqrt": {
     "line number": [
      44,
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.localpca.eigh": {
  "data": {
   "shadows": "scipy.linalg.eigh"
  },
  "type": "import"
 },
 "dipy.denoise.localpca.genpca": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      132,
      140,
      150,
      159
     ]
    },
    "bool": {
     "line number": [
      119
     ]
    },
    "dipy.denoise.localpca._pca_classifier": {
     "line number": [
      214
     ]
    },
    "dipy.denoise.localpca.svd_args": {
     "line number": [
      197
     ]
    },
    "float": {
     "line number": [
      160
     ]
    },
    "int": {
     "line number": [
      160
     ]
    },
    "isinstance": {
     "line number": [
      152,
      160
     ]
    },
    "numpy.float32": {
     "line number": [
      129
     ]
    },
    "numpy.float64": {
     "line number": [
      125,
      126
     ]
    },
    "numpy.mean": {
     "line number": [
      191
     ]
    },
    "numpy.ndarray": {
     "line number": [
      152
     ]
    },
    "numpy.ones": {
     "line number": [
      161
     ]
    },
    "numpy.ones_like": {
     "line number": [
      119
     ]
    },
    "numpy.sqrt": {
     "line number": [
      165,
      246
     ]
    },
    "numpy.sum": {
     "line number": [
      223
     ]
    },
    "numpy.transpose": {
     "line number": [
      208
     ]
    },
    "numpy.zeros": {
     "line number": [
      167,
      168,
      171,
      172
     ]
    },
    "range": {
     "line number": [
      175,
      176,
      177
     ]
    },
    "scipy.linalg.eigh": {
     "line number": [
      210
     ]
    },
    "scipy.linalg.svd": {
     "line number": [
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.localpca.localpca": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": {
    "dipy.denoise.localpca.genpca": {
     "line number": [
      310
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.localpca.mppca": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "dipy.denoise.localpca.genpca": {
     "line number": [
      363
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.localpca.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.localpca.svd": {
  "data": {
   "shadows": "scipy.linalg.svd"
  },
  "type": "import"
 },
 "dipy.denoise.localpca.svd_args": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "dipy.denoise.nlmeans": {
  "data": {},
  "type": "module"
 },
 "dipy.denoise.nlmeans.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.denoise.nlmeans.nlmeans": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      81
     ]
    },
    "dipy.denoise.denspeed.nlmeans_3d": {
     "line number": [
      56,
      70
     ]
    },
    "isinstance": {
     "line number": [
      63
     ]
    },
    "numpy.float64": {
     "line number": [
      55,
      64,
      67
     ]
    },
    "numpy.ndarray": {
     "line number": [
      63
     ]
    },
    "numpy.newaxis": {
     "line number": [
      65
     ]
    },
    "numpy.ones": {
     "line number": [
      55,
      64,
      67
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      61
     ]
    },
    "range": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.nlmeans.nlmeans_3d": {
  "data": {
   "shadows": "dipy.denoise.denspeed.nlmeans_3d"
  },
  "type": "import"
 },
 "dipy.denoise.nlmeans.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.nlmeans.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.denoise.noise_estimate": {
  "data": {},
  "type": "module"
 },
 "dipy.denoise.noise_estimate._inv_nchi_cdf": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "scipy.special.gammainccinv": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.noise_estimate._piesno_3D": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "dipy.denoise.noise_estimate._inv_nchi_cdf": {
     "line number": [
      221,
      237,
      238
     ]
    },
    "dipy.denoise.noise_estimate.opt_quantile": {
     "line number": [
      216,
      217
     ]
    },
    "numpy.abs": {
     "line number": [
      251
     ]
    },
    "numpy.all": {
     "line number": [
      210
     ]
    },
    "numpy.arange": {
     "line number": [
      228
     ]
    },
    "numpy.bool": {
     "line number": [
      212,
      235
     ]
    },
    "numpy.float32": {
     "line number": [
      230
     ]
    },
    "numpy.int16": {
     "line number": [
      244
     ]
    },
    "numpy.logical_and": {
     "line number": [
      243,
      255
     ]
    },
    "numpy.percentile": {
     "line number": [
      224,
      265
     ]
    },
    "numpy.sqrt": {
     "line number": [
      221
     ]
    },
    "numpy.sum": {
     "line number": [
      230,
      243
     ]
    },
    "numpy.zeros": {
     "line number": [
      212,
      235
     ]
    },
    "range": {
     "line number": [
      250
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.noise_estimate.convolve": {
  "data": {
   "shadows": "scipy.ndimage.filters.convolve"
  },
  "type": "import"
 },
 "dipy.denoise.noise_estimate.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.denoise.noise_estimate.estimate_sigma": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      346,
      355
     ]
    },
    "list": {
     "line number": [
      347
     ]
    },
    "numpy.bool": {
     "line number": [
      358,
      360
     ]
    },
    "numpy.float32": {
     "line number": [
      350,
      353
     ]
    },
    "numpy.float64": {
     "line number": [
      362
     ]
    },
    "numpy.int8": {
     "line number": [
      320
     ]
    },
    "numpy.mean": {
     "line number": [
      367
     ]
    },
    "numpy.ones_like": {
     "line number": [
      360
     ]
    },
    "numpy.sqrt": {
     "line number": [
      366,
      367
     ]
    },
    "numpy.zeros": {
     "line number": [
      320,
      350,
      353,
      362
     ]
    },
    "range": {
     "line number": [
      364
     ]
    },
    "scipy.ndimage.filters.convolve": {
     "line number": [
      365
     ]
    },
    "sorted": {
     "line number": [
      347
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.noise_estimate.gammainccinv": {
  "data": {
   "shadows": "scipy.special.gammainccinv"
  },
  "type": "import"
 },
 "dipy.denoise.noise_estimate.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.noise_estimate.opt_quantile": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "dipy.denoise.noise_estimate.piesno": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      100
     ]
    },
    "dipy.denoise.noise_estimate._inv_nchi_cdf": {
     "line number": [
      109
     ]
    },
    "dipy.denoise.noise_estimate._piesno_3D": {
     "line number": [
      117,
      127
     ]
    },
    "dipy.denoise.noise_estimate.opt_quantile": {
     "line number": [
      102,
      103
     ]
    },
    "numpy.bool": {
     "line number": [
      114
     ]
    },
    "numpy.float32": {
     "line number": [
      113
     ]
    },
    "numpy.percentile": {
     "line number": [
      108
     ]
    },
    "numpy.sqrt": {
     "line number": [
      109
     ]
    },
    "numpy.zeros": {
     "line number": [
      113,
      114
     ]
    },
    "range": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.noise_estimate.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.denoise.non_local_means": {
  "data": {},
  "type": "module"
 },
 "dipy.denoise.non_local_means.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.denoise.non_local_means.nlmeans_block": {
  "data": {
   "shadows": "dipy.denoise.nlmeans_block.nlmeans_block"
  },
  "type": "import"
 },
 "dipy.denoise.non_local_means.non_local_means": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      47,
      54,
      74
     ]
    },
    "dipy.denoise.nlmeans_block.nlmeans_block": {
     "line number": [
      57,
      67
     ]
    },
    "numpy.array": {
     "line number": [
      57,
      67
     ]
    },
    "numpy.ascontiguousarray": {
     "line number": [
      51
     ]
    },
    "numpy.double": {
     "line number": [
      58,
      67
     ]
    },
    "numpy.int": {
     "line number": [
      63,
      69
     ]
    },
    "numpy.isscalar": {
     "line number": [
      46
     ]
    },
    "numpy.ones": {
     "line number": [
      49
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      65
     ]
    },
    "range": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.non_local_means.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.non_local_means.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.denoise.test": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "dipy.denoise.tests": {
  "data": {},
  "type": "module"
 },
 "dipy.denoise.tests.test_ascm": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      134
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.denoise.tests.test_ascm.adaptive_soft_matching": {
  "data": {
   "shadows": "dipy.denoise.adaptive_soft_matching.adaptive_soft_matching"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.dpd": {
  "data": {
   "shadows": "dipy.data"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.estimate_sigma": {
  "data": {
   "shadows": "dipy.denoise.noise_estimate.estimate_sigma"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.fetch_stanford_t1": {
  "data": {
   "shadows": "dipy.data.fetch_stanford_t1"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.non_local_means": {
  "data": {
   "shadows": "dipy.denoise.non_local_means.non_local_means"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.read_stanford_t1": {
  "data": {
   "shadows": "dipy.data.read_stanford_t1"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_ascm.test_ascm_accuracy": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      104,
      106
     ]
    },
    "dipy.denoise.adaptive_soft_matching.adaptive_soft_matching": {
     "line number": [
      128
     ]
    },
    "dipy.denoise.noise_estimate.estimate_sigma": {
     "line number": [
      110
     ]
    },
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      112,
      120
     ]
    },
    "nibabel.load": {
     "line number": [
      105,
      106
     ]
    },
    "numpy.array": {
     "line number": [
      128
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      105,
      106
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_ascm.test_ascm_random_noise": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "dipy.denoise.adaptive_soft_matching.adaptive_soft_matching": {
     "line number": [
      30
     ]
    },
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      26,
      28
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      25
     ]
    },
    "numpy.round": {
     "line number": [
      37
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      35,
      36
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      37
     ]
    },
    "print": {
     "line number": [
      32,
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_ascm.test_ascm_rmse_with_nlmeans": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "dipy.denoise.adaptive_soft_matching.adaptive_soft_matching": {
     "line number": [
      62
     ]
    },
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      48,
      55
     ]
    },
    "numpy.abs": {
     "line number": [
      46,
      54,
      61,
      63,
      65,
      66,
      67,
      68
     ]
    },
    "numpy.mean": {
     "line number": [
      69
     ]
    },
    "numpy.ones": {
     "line number": [
      42
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      45
     ]
    },
    "numpy.sum": {
     "line number": [
      46,
      46,
      54,
      54,
      61,
      61,
      63,
      63,
      65,
      65,
      66,
      66,
      67,
      67,
      68,
      68
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      65,
      67,
      69
     ]
    },
    "print": {
     "line number": [
      46,
      54,
      61,
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_ascm.test_ascm_static": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "dipy.denoise.adaptive_soft_matching.adaptive_soft_matching": {
     "line number": [
      20
     ]
    },
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      16,
      18
     ]
    },
    "numpy.ones": {
     "line number": [
      15
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_ascm.test_sharpness": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "dipy.denoise.adaptive_soft_matching.adaptive_soft_matching": {
     "line number": [
      94
     ]
    },
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      78,
      86
     ]
    },
    "numpy.abs": {
     "line number": [
      84,
      92,
      95,
      100
     ]
    },
    "numpy.mean": {
     "line number": [
      84,
      92,
      95
     ]
    },
    "numpy.ones": {
     "line number": [
      74
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      77
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      98,
      99,
      100
     ]
    },
    "print": {
     "line number": [
      85,
      93,
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_denoise": {
  "data": {},
  "type": "module"
 },
 "dipy.denoise.tests.test_denoise.dpd": {
  "data": {
   "shadows": "dipy.data"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_denoise.estimate_sigma": {
  "data": {
   "shadows": "dipy.denoise.noise_estimate.estimate_sigma"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_denoise.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_denoise.nlmeans": {
  "data": {
   "shadows": "dipy.denoise.nlmeans.nlmeans"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_denoise.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_denoise.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_denoise.test_denoise": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      13
     ]
    },
    "dipy.denoise.nlmeans.nlmeans": {
     "line number": [
      17,
      22
     ]
    },
    "dipy.denoise.noise_estimate.estimate_sigma": {
     "line number": [
      16,
      21
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_gibbs": {
  "data": {},
  "type": "module"
 },
 "dipy.denoise.tests.test_gibbs._gibbs_removal_1d": {
  "data": {
   "shadows": "dipy.denoise.gibbs._gibbs_removal_1d"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_gibbs._gibbs_removal_2d": {
  "data": {
   "shadows": "dipy.denoise.gibbs._gibbs_removal_2d"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_gibbs._image_tv": {
  "data": {
   "shadows": "dipy.denoise.gibbs._image_tv"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_gibbs.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_gibbs.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_gibbs.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_gibbs.gibbs_removal": {
  "data": {
   "shadows": "dipy.denoise.gibbs.gibbs_removal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_gibbs.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_gibbs.setup_module": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      25
     ]
    },
    "dipy.denoise.gibbs._gibbs_removal_2d": {
     "line number": [
      38
     ]
    },
    "numpy.fft.fft2": {
     "line number": [
      22
     ]
    },
    "numpy.fft.fftshift": {
     "line number": [
      23
     ]
    },
    "numpy.fft.ifft2": {
     "line number": [
      25
     ]
    },
    "numpy.zeros": {
     "line number": [
      13,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_gibbs.test_gibbs_2d": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      44,
      45
     ]
    },
    "dipy.denoise.gibbs.gibbs_removal": {
     "line number": [
      49
     ]
    },
    "numpy.mean": {
     "line number": [
      44,
      45
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      46
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_gibbs.test_gibbs_3d": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "dipy.denoise.gibbs.gibbs_removal": {
     "line number": [
      59
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      60,
      61
     ]
    },
    "numpy.zeros": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_gibbs.test_gibbs_4d": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "dipy.denoise.gibbs.gibbs_removal": {
     "line number": [
      72
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      73,
      74,
      75,
      76
     ]
    },
    "numpy.zeros": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_gibbs.test_gibbs_errors": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      125,
      126,
      127
     ]
    },
    "dipy.denoise.gibbs.gibbs_removal": {
     "line number": [
      125,
      126,
      127
     ]
    },
    "numpy.ones": {
     "line number": [
      125,
      126,
      127
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      125,
      126,
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_gibbs.test_gibbs_subfunction": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      143,
      144,
      156,
      157
     ]
    },
    "dipy.denoise.gibbs._gibbs_removal_1d": {
     "line number": [
      135,
      148
     ]
    },
    "dipy.denoise.gibbs._image_tv": {
     "line number": [
      138,
      140,
      151,
      153
     ]
    },
    "numpy.mean": {
     "line number": [
      143,
      144,
      156,
      157
     ]
    },
    "numpy.minimum": {
     "line number": [
      139,
      141,
      152,
      154
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      145,
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_gibbs.test_non_square_image": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      174,
      188,
      189
     ]
    },
    "dipy.denoise.gibbs.gibbs_removal": {
     "line number": [
      185
     ]
    },
    "numpy.fft.fft2": {
     "line number": [
      171
     ]
    },
    "numpy.fft.fftshift": {
     "line number": [
      172
     ]
    },
    "numpy.fft.ifft2": {
     "line number": [
      174
     ]
    },
    "numpy.mean": {
     "line number": [
      188,
      189
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      190
     ]
    },
    "numpy.zeros": {
     "line number": [
      164,
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_gibbs.test_swapped_gibbs_2d": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "dipy.denoise.gibbs.gibbs_removal": {
     "line number": [
      82,
      85,
      88
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      83,
      86,
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_gibbs.test_swapped_gibbs_3d": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "dipy.denoise.gibbs.gibbs_removal": {
     "line number": [
      97,
      105
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      98,
      99,
      106,
      107
     ]
    },
    "numpy.zeros": {
     "line number": [
      93,
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_gibbs.test_swapped_gibbs_4d": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "dipy.denoise.gibbs.gibbs_removal": {
     "line number": [
      117
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      118,
      119,
      120,
      121
     ]
    },
    "numpy.zeros": {
     "line number": [
      111
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_kernel": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      121
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.denoise.tests.test_kernel.EnhancementKernel": {
  "data": {
   "shadows": "dipy.denoise.enhancement_kernel.EnhancementKernel"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_kernel.Sphere": {
  "data": {
   "shadows": "dipy.core.sphere.Sphere"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_kernel.convolve": {
  "data": {
   "shadows": "dipy.denoise.shift_twist_convolution.convolve"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_kernel.convolve_sf": {
  "data": {
   "shadows": "dipy.denoise.shift_twist_convolution.convolve_sf"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_kernel.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_kernel.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_kernel.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_kernel.sf_to_sh": {
  "data": {
   "shadows": "dipy.reconst.shm.sf_to_sh"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_kernel.sh_to_sf": {
  "data": {
   "shadows": "dipy.reconst.shm.sh_to_sf"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_kernel.test_enhancement_kernel": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "dipy.denoise.enhancement_kernel.EnhancementKernel": {
     "line number": [
      18
     ]
    },
    "len": {
     "line number": [
      47
     ]
    },
    "numpy.array": {
     "line number": [
      20,
      21,
      48,
      49
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      50
     ]
    },
    "range": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_kernel.test_kernel_input": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      107
     ]
    },
    "dipy.denoise.enhancement_kernel.EnhancementKernel": {
     "line number": [
      111,
      115,
      118
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      112,
      116,
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_kernel.test_normalization": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "dipy.denoise.enhancement_kernel.EnhancementKernel": {
     "line number": [
      86
     ]
    },
    "dipy.denoise.shift_twist_convolution.convolve": {
     "line number": [
      96
     ]
    },
    "dipy.reconst.shm.sf_to_sh": {
     "line number": [
      93
     ]
    },
    "dipy.reconst.shm.sh_to_sf": {
     "line number": [
      99
     ]
    },
    "numpy.amax": {
     "line number": [
      102,
      102
     ]
    },
    "numpy.float64": {
     "line number": [
      90
     ]
    },
    "numpy.ones": {
     "line number": [
      90
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_kernel.test_spike": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "dipy.denoise.enhancement_kernel.EnhancementKernel": {
     "line number": [
      62
     ]
    },
    "dipy.denoise.shift_twist_convolution.convolve_sf": {
     "line number": [
      70
     ]
    },
    "numpy.array": {
     "line number": [
      75,
      76
     ]
    },
    "numpy.float64": {
     "line number": [
      66
     ]
    },
    "numpy.sum": {
     "line number": [
      75
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      77
     ]
    },
    "numpy.zeros": {
     "line number": [
      66
     ]
    },
    "range": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      328
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.denoise.tests.test_lpca._pca_classifier": {
  "data": {
   "shadows": "dipy.denoise.localpca._pca_classifier"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.generate_bvecs": {
  "data": {
   "shadows": "dipy.core.gradients.generate_bvecs"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.genpca": {
  "data": {
   "shadows": "dipy.denoise.localpca.genpca"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.localpca": {
  "data": {
   "shadows": "dipy.denoise.localpca.localpca"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.mppca": {
  "data": {
   "shadows": "dipy.denoise.localpca.mppca"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.rfiw_phantom": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      83
     ]
    },
    "numpy.array": {
     "line number": [
      63,
      76
     ]
    },
    "numpy.random.normal": {
     "line number": [
      91,
      92
     ]
    },
    "numpy.sqrt": {
     "line number": [
      93,
      93,
      94
     ]
    },
    "numpy.zeros": {
     "line number": [
      35,
      79
     ]
    },
    "range": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.setup_module": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "dipy.core.gradients.generate_bvecs": {
     "line number": [
      17,
      18,
      19
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      29
     ]
    },
    "numpy.hstack": {
     "line number": [
      23
     ]
    },
    "numpy.ones": {
     "line number": [
      24,
      25,
      26
     ]
    },
    "numpy.vstack": {
     "line number": [
      27
     ]
    },
    "numpy.zeros": {
     "line number": [
      23,
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.sps": {
  "data": {
   "shadows": "scipy.special"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_lpca.test_lpca_boundary_behaviour": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "dipy.denoise.localpca.localpca": {
     "line number": [
      118
     ]
    },
    "numpy.abs": {
     "line number": [
      120,
      127
     ]
    },
    "numpy.ones": {
     "line number": [
      114
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      116
     ]
    },
    "numpy.round": {
     "line number": [
      125,
      132
     ]
    },
    "numpy.std": {
     "line number": [
      118
     ]
    },
    "numpy.sum": {
     "line number": [
      120,
      127
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      124,
      131
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      125,
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_lpca_dtype": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "dipy.denoise.localpca.localpca": {
     "line number": [
      158,
      162,
      167,
      175
     ]
    },
    "numpy.all": {
     "line number": [
      176,
      178
     ]
    },
    "numpy.float32": {
     "line number": [
      168,
      169
     ]
    },
    "numpy.float64": {
     "line number": [
      157
     ]
    },
    "numpy.ones": {
     "line number": [
      157,
      161,
      162,
      166,
      167,
      175
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      176,
      178
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      159,
      163,
      169
     ]
    },
    "numpy.uint16": {
     "line number": [
      161,
      166,
      175
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_lpca_ill_conditioned": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      244
     ]
    },
    "dipy.denoise.localpca.localpca": {
     "line number": [
      244
     ]
    },
    "dipy.denoise.tests.test_lpca.rfiw_phantom": {
     "line number": [
      243
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      244
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_lpca_random_noise": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "dipy.denoise.localpca.localpca": {
     "line number": [
      105
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      104
     ]
    },
    "numpy.round": {
     "line number": [
      109
     ]
    },
    "numpy.std": {
     "line number": [
      105
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      107,
      108
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_lpca_rmse": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "dipy.denoise.localpca.localpca": {
     "line number": [
      138
     ]
    },
    "numpy.mean": {
     "line number": [
      137,
      139
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      136
     ]
    },
    "numpy.sqrt": {
     "line number": [
      137,
      139
     ]
    },
    "numpy.std": {
     "line number": [
      138
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_lpca_sharpness": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "dipy.denoise.localpca.localpca": {
     "line number": [
      149
     ]
    },
    "numpy.abs": {
     "line number": [
      151
     ]
    },
    "numpy.float64": {
     "line number": [
      145
     ]
    },
    "numpy.mean": {
     "line number": [
      151
     ]
    },
    "numpy.ones": {
     "line number": [
      145
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      148
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_lpca_sigma_wrong_shape": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      251
     ]
    },
    "dipy.denoise.localpca.localpca": {
     "line number": [
      251
     ]
    },
    "dipy.denoise.tests.test_lpca.rfiw_phantom": {
     "line number": [
      248
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      251
     ]
    },
    "numpy.zeros": {
     "line number": [
      250
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_lpca_static": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "dipy.denoise.localpca.localpca": {
     "line number": [
      99
     ]
    },
    "numpy.float64": {
     "line number": [
      99
     ]
    },
    "numpy.ones": {
     "line number": [
      98,
      99
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_lpca_wrong": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      183
     ]
    },
    "dipy.denoise.localpca.localpca": {
     "line number": [
      183
     ]
    },
    "numpy.ones": {
     "line number": [
      182
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_mppca_in_phantom": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": {
    "dipy.denoise.localpca.mppca": {
     "line number": [
      296
     ]
    },
    "dipy.denoise.tests.test_lpca.rfiw_phantom": {
     "line number": [
      292
     ]
    },
    "numpy.abs": {
     "line number": [
      299,
      299,
      300,
      300
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      294
     ]
    },
    "numpy.sum": {
     "line number": [
      299,
      299,
      300,
      300
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      301
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_mppca_returned_sigma": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      313
     ]
    },
    "dipy.denoise.localpca.genpca": {
     "line number": [
      318
     ]
    },
    "dipy.denoise.localpca.mppca": {
     "line number": [
      311
     ]
    },
    "dipy.denoise.tests.test_lpca.rfiw_phantom": {
     "line number": [
      305
     ]
    },
    "numpy.abs": {
     "line number": [
      323,
      323,
      324,
      324
     ]
    },
    "numpy.mean": {
     "line number": [
      312
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      307
     ]
    },
    "numpy.sum": {
     "line number": [
      323,
      323,
      324,
      324
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      314,
      325
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      320
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_pca_classifier": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      287
     ]
    },
    "dipy.denoise.localpca._pca_classifier": {
     "line number": [
      276
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      262
     ]
    },
    "numpy.array": {
     "line number": [
      261
     ]
    },
    "numpy.dot": {
     "line number": [
      273
     ]
    },
    "numpy.linalg.eigh": {
     "line number": [
      273
     ]
    },
    "numpy.mean": {
     "line number": [
      271
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      266
     ]
    },
    "numpy.sqrt": {
     "line number": [
      277
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      284,
      288
     ]
    },
    "numpy.zeros": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_lpca.test_phantom": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      213
     ]
    },
    "bool": {
     "line number": [
      217
     ]
    },
    "dipy.denoise.localpca.localpca": {
     "line number": [
      195,
      210,
      213,
      219
     ]
    },
    "dipy.denoise.tests.test_lpca.rfiw_phantom": {
     "line number": [
      187,
      188
     ]
    },
    "numpy.abs": {
     "line number": [
      196,
      196,
      197,
      197,
      199,
      200,
      201,
      202,
      224,
      224,
      226,
      226,
      231,
      232,
      233,
      234
     ]
    },
    "numpy.exp": {
     "line number": [
      191
     ]
    },
    "numpy.max": {
     "line number": [
      204,
      204,
      205,
      205,
      236,
      236,
      237,
      237
     ]
    },
    "numpy.ones": {
     "line number": [
      216
     ]
    },
    "numpy.pi": {
     "line number": [
      191
     ]
    },
    "numpy.sqrt": {
     "line number": [
      191
     ]
    },
    "numpy.sum": {
     "line number": [
      196,
      196,
      197,
      197,
      199,
      200,
      201,
      202,
      224,
      224,
      226,
      226,
      231,
      232,
      233,
      234
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      204,
      205,
      206,
      207,
      236,
      237,
      238,
      239
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      211
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      213
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      217
     ]
    },
    "scipy.special.iv": {
     "line number": [
      192,
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_nlmeans": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      137
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      139
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.denoise.tests.test_nlmeans.add_padding_reflection": {
  "data": {
   "shadows": "dipy.denoise.denspeed.add_padding_reflection"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.cpu_count": {
  "data": {
   "shadows": "dipy.utils.omp.cpu_count"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.have_openmp": {
  "data": {
   "shadows": "dipy.utils.omp.have_openmp"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.nlmeans": {
  "data": {
   "shadows": "dipy.denoise.nlmeans.nlmeans"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.remove_padding": {
  "data": {
   "shadows": "dipy.denoise.denspeed.remove_padding"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_nlmeans.test_nlmeans_4D_and_mask": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "dipy.denoise.nlmeans.nlmeans": {
     "line number": [
      73
     ]
    },
    "numpy.ones": {
     "line number": [
      68
     ]
    },
    "numpy.round": {
     "line number": [
      75
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      74,
      75,
      76
     ]
    },
    "numpy.zeros": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_nlmeans.test_nlmeans_4d_3dsigma_and_threads": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "dipy.denoise.nlmeans.nlmeans": {
     "line number": [
      108,
      114,
      120
     ]
    },
    "dipy.denoise.tests.test_nlmeans.pytest": {
     "line number": [
      93
     ]
    },
    "dipy.utils.omp.cpu_count": {
     "line number": [
      104,
      127,
      132
     ]
    },
    "dipy.utils.omp.have_openmp": {
     "line number": [
      93
     ]
    },
    "numpy.ones": {
     "line number": [
      97,
      98
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      124,
      125
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      129,
      130,
      134
     ]
    },
    "numpy.zeros": {
     "line number": [
      99
     ]
    },
    "print": {
     "line number": [
      104,
      106,
      110,
      112,
      116,
      118,
      122
     ]
    },
    "time.time": {
     "line number": [
      107,
      109,
      113,
      115,
      119,
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_nlmeans.test_nlmeans_boundary": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "dipy.denoise.nlmeans.nlmeans": {
     "line number": [
      57
     ]
    },
    "numpy.ones": {
     "line number": [
      57
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      51
     ]
    },
    "numpy.std": {
     "line number": [
      57
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      63,
      64
     ]
    },
    "numpy.zeros": {
     "line number": [
      49
     ]
    },
    "print": {
     "line number": [
      60,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_nlmeans.test_nlmeans_dtype": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "dipy.denoise.nlmeans.nlmeans": {
     "line number": [
      84,
      90
     ]
    },
    "numpy.ones": {
     "line number": [
      81,
      87,
      90
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      85,
      91
     ]
    },
    "numpy.uint16": {
     "line number": [
      87
     ]
    },
    "numpy.zeros": {
     "line number": [
      82,
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_nlmeans.test_nlmeans_padding": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "dipy.denoise.denspeed.add_padding_reflection": {
     "line number": [
      17
     ]
    },
    "dipy.denoise.denspeed.remove_padding": {
     "line number": [
      18
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      15
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_nlmeans.test_nlmeans_random_noise": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "dipy.denoise.nlmeans.nlmeans": {
     "line number": [
      36
     ]
    },
    "numpy.ones": {
     "line number": [
      36
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      34
     ]
    },
    "numpy.round": {
     "line number": [
      43
     ]
    },
    "numpy.std": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      41,
      42
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      43
     ]
    },
    "print": {
     "line number": [
      38,
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_nlmeans.test_nlmeans_static": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "dipy.denoise.nlmeans.nlmeans": {
     "line number": [
      24
     ]
    },
    "numpy.ones": {
     "line number": [
      23,
      24
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_nlmeans.test_nlmeans_wrong": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      30
     ]
    },
    "dipy.denoise.nlmeans.nlmeans": {
     "line number": [
      30
     ]
    },
    "numpy.ones": {
     "line number": [
      29
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_nlmeans.time": {
  "data": {
   "shadows": "time.time"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate": {
  "data": {},
  "type": "module"
 },
 "dipy.denoise.tests.test_noise_estimate._inv_nchi_cdf": {
  "data": {
   "shadows": "dipy.denoise.noise_estimate._inv_nchi_cdf"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate._piesno_3D": {
  "data": {
   "shadows": "dipy.denoise.noise_estimate._piesno_3D"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.dpd": {
  "data": {
   "shadows": "dipy.data"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.dpg": {
  "data": {
   "shadows": "dipy.core.gradients"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.estimate_sigma": {
  "data": {
   "shadows": "dipy.denoise.noise_estimate.estimate_sigma"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.pca_noise_estimate": {
  "data": {
   "shadows": "dipy.denoise.pca_noise_estimate.pca_noise_estimate"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.piesno": {
  "data": {
   "shadows": "dipy.denoise.noise_estimate.piesno"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_noise_estimate.test_estimate_sigma": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "dipy.denoise.noise_estimate.estimate_sigma": {
     "line number": [
      90,
      93,
      97,
      101,
      107,
      114,
      125,
      130,
      135
     ]
    },
    "numpy.array": {
     "line number": [
      95,
      103,
      116,
      136
     ]
    },
    "numpy.ones": {
     "line number": [
      90,
      93,
      97,
      101
     ]
    },
    "numpy.sqrt": {
     "line number": [
      110,
      117,
      119,
      121,
      126,
      131,
      137,
      139,
      141
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      108,
      115,
      126,
      131,
      136
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      91,
      95,
      99,
      103
     ]
    },
    "numpy.zeros": {
     "line number": [
      105,
      112,
      123,
      128,
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_noise_estimate.test_inv_nchi": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "dipy.denoise.noise_estimate._inv_nchi_cdf": {
     "line number": [
      21,
      22
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      24,
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_noise_estimate.test_pca_noise_estimate": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      149,
      153
     ]
    },
    "dipy.denoise.pca_noise_estimate.pca_noise_estimate": {
     "line number": [
      171,
      177,
      178
     ]
    },
    "numpy.concatenate": {
     "line number": [
      147,
      148,
      151,
      152
     ]
    },
    "numpy.eye": {
     "line number": [
      148,
      152
     ]
    },
    "numpy.float64": {
     "line number": [
      157
     ]
    },
    "numpy.int16": {
     "line number": [
      157
     ]
    },
    "numpy.mean": {
     "line number": [
      174,
      177,
      178
     ]
    },
    "numpy.ones": {
     "line number": [
      147,
      151,
      158
     ]
    },
    "numpy.random.normal": {
     "line number": [
      165,
      166
     ]
    },
    "numpy.random.seed": {
     "line number": [
      145
     ]
    },
    "numpy.sqrt": {
     "line number": [
      169
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      177
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      174
     ]
    },
    "numpy.zeros": {
     "line number": [
      147,
      148,
      151,
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_noise_estimate.test_piesno": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      31
     ]
    },
    "dipy.denoise.noise_estimate._inv_nchi_cdf": {
     "line number": [
      47
     ]
    },
    "dipy.denoise.noise_estimate._piesno_3D": {
     "line number": [
      49,
      55,
      60,
      66,
      74
     ]
    },
    "dipy.denoise.noise_estimate.piesno": {
     "line number": [
      32,
      39
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      31
     ]
    },
    "numpy.abs": {
     "line number": [
      43,
      53,
      58
     ]
    },
    "numpy.all": {
     "line number": [
      64,
      70,
      71,
      76
     ]
    },
    "numpy.median": {
     "line number": [
      46
     ]
    },
    "numpy.ones_like": {
     "line number": [
      74
     ]
    },
    "numpy.random.randn": {
     "line number": [
      36,
      37
     ]
    },
    "numpy.sqrt": {
     "line number": [
      38,
      47
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      43,
      53,
      58,
      64,
      70,
      71,
      76
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      34
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      60,
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_noise_estimate.test_piesno_type": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "dipy.denoise.noise_estimate.piesno": {
     "line number": [
      85
     ]
    },
    "numpy.int16": {
     "line number": [
      81
     ]
    },
    "numpy.ones": {
     "line number": [
      81
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      86
     ]
    },
    "range": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_non_local_means": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      88
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.denoise.tests.test_non_local_means.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_non_local_means.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_non_local_means.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_non_local_means.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_non_local_means.non_local_means": {
  "data": {
   "shadows": "dipy.denoise.non_local_means.non_local_means"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_non_local_means.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_non_local_means.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.denoise.tests.test_non_local_means.test_nlmeans_4D_and_mask": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      68
     ]
    },
    "numpy.ones": {
     "line number": [
      65
     ]
    },
    "numpy.round": {
     "line number": [
      70
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69,
      70,
      71
     ]
    },
    "numpy.zeros": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_non_local_means.test_nlmeans_boundary": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      51
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      48
     ]
    },
    "numpy.std": {
     "line number": [
      51
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      52,
      53
     ]
    },
    "numpy.zeros": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_non_local_means.test_nlmeans_dtype": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      79,
      84
     ]
    },
    "numpy.ones": {
     "line number": [
      76,
      81
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      80,
      85
     ]
    },
    "numpy.uint16": {
     "line number": [
      81
     ]
    },
    "numpy.zeros": {
     "line number": [
      77,
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_non_local_means.test_nlmeans_random_noise": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      19
     ]
    },
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      22,
      28
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      17
     ]
    },
    "numpy.round": {
     "line number": [
      26,
      32
     ]
    },
    "numpy.std": {
     "line number": [
      22,
      28
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      24,
      25,
      30,
      31
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      26,
      32
     ]
    },
    "numpy.zeros": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_non_local_means.test_nlmeans_static": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      12
     ]
    },
    "numpy.ones": {
     "line number": [
      11
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_non_local_means.test_nlmeans_wrong": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      58,
      61
     ]
    },
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      58,
      61
     ]
    },
    "numpy.ones": {
     "line number": [
      60
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      58,
      61
     ]
    },
    "numpy.zeros": {
     "line number": [
      57,
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.denoise.tests.test_non_local_means.test_scalar_sigma": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      42
     ]
    },
    "dipy.denoise.non_local_means.non_local_means": {
     "line number": [
      42
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      37
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      41
     ]
    },
    "numpy.zeros": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction": {
  "data": {},
  "type": "module"
 },
 "dipy.direction.tests": {
  "data": {},
  "type": "module"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      146
     ]
    },
    "numpy.array": {
     "line number": [
      18
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.BootDirectionGetter": {
  "data": {
   "shadows": "dipy.direction.bootstrap_direction_getter.BootDirectionGetter"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.BootPmfGen": {
  "data": {
   "shadows": "dipy.direction.pmf.BootPmfGen"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.ConstrainedSphericalDeconvModel": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.DEFAULT_SH": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.HemiSphere": {
  "data": {
   "shadows": "dipy.core.sphere.HemiSphere"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.SimplePmfGen": {
  "data": {
   "shadows": "dipy.direction.pmf.SimplePmfGen"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.cart2sphere": {
  "data": {
   "shadows": "dipy.core.geometry.cart2sphere"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.dti": {
  "data": {
   "shadows": "dipy.reconst.dti"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.response": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.shm": {
  "data": {
   "shadows": "dipy.reconst.shm"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.single_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.single_tensor"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.test_bdg_get_direction": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      95
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      64
     ]
    },
    "dipy.core.sphere.unit_icosahedron.subdivide": {
     "line number": [
      64
     ]
    },
    "dipy.direction.bootstrap_direction_getter.BootDirectionGetter": {
     "line number": [
      77,
      82,
      88,
      96
     ]
    },
    "dipy.direction.pmf.SimplePmfGen": {
     "line number": [
      74
     ]
    },
    "len": {
     "line number": [
      72
     ]
    },
    "numpy.rad2deg": {
     "line number": [
      68
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      78,
      79,
      84,
      85,
      90,
      91
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      94
     ]
    },
    "numpy.zeros": {
     "line number": [
      69,
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.test_bdg_initial_direction": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      31
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      25,
      34
     ]
    },
    "dipy.core.sphere.unit_icosahedron": {
     "line number": [
      25
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      34
     ]
    },
    "dipy.direction.bootstrap_direction_getter.BootDirectionGetter.from_data": {
     "line number": [
      37,
      52
     ]
    },
    "dipy.direction.tests.test_bootstrap_direction_getter.response": {
     "line number": [
      49,
      50
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      50
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      36
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      46
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      35
     ]
    },
    "len": {
     "line number": [
      28,
      40,
      56
     ]
    },
    "numpy.array": {
     "line number": [
      29,
      44,
      49
     ]
    },
    "numpy.insert": {
     "line number": [
      29,
      30
     ]
    },
    "numpy.ones": {
     "line number": [
      28
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      41,
      57
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      40,
      56
     ]
    },
    "numpy.zeros": {
     "line number": [
      39,
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.test_bdg_residual": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      143
     ]
    },
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      111
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      110,
      141
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      104
     ]
    },
    "dipy.core.sphere.unit_icosahedron": {
     "line number": [
      104
     ]
    },
    "dipy.direction.pmf.BootPmfGen": {
     "line number": [
      123,
      133,
      143
     ]
    },
    "dipy.direction.tests.test_bootstrap_direction_getter.response": {
     "line number": [
      122,
      142
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      122,
      142
     ]
    },
    "dipy.reconst.shm.real_sym_sh_basis": {
     "line number": [
      112
     ]
    },
    "len": {
     "line number": [
      107
     ]
    },
    "numpy.any": {
     "line number": [
      137
     ]
    },
    "numpy.array": {
     "line number": [
      108,
      127,
      128,
      135,
      136
     ]
    },
    "numpy.concatenate": {
     "line number": [
      119
     ]
    },
    "numpy.dot": {
     "line number": [
      117
     ]
    },
    "numpy.insert": {
     "line number": [
      108,
      109
     ]
    },
    "numpy.ones": {
     "line number": [
      107
     ]
    },
    "numpy.random.random": {
     "line number": [
      113
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      137
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      129
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      143
     ]
    },
    "numpy.tile": {
     "line number": [
      120
     ]
    },
    "numpy.zeros": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_bootstrap_direction_getter.unit_icosahedron": {
  "data": {
   "shadows": "dipy.core.sphere.unit_icosahedron"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      660
     ]
    },
    "dipy.core.gradients.GradientTable": {
     "line number": [
      82
     ]
    },
    "dipy.core.subdivide_octahedron.create_unit_hemisphere": {
     "line number": [
      80
     ]
    },
    "dipy.direction.tests.test_peaks._sphere": {
     "line number": [
      81
     ]
    },
    "numpy.ones": {
     "line number": [
      82
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      662
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.direction.tests.test_peaks.BytesIO": {
  "data": {
   "shadows": "io.BytesIO"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.CsaOdfModel": {
  "data": {
   "shadows": "dipy.reconst.shm.CsaOdfModel"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.GradientTable": {
  "data": {
   "shadows": "dipy.core.gradients.GradientTable"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.HemiSphere": {
  "data": {
   "shadows": "dipy.core.sphere.HemiSphere"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.OdfFit": {
  "data": {
   "shadows": "dipy.reconst.odf.OdfFit"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.OdfModel": {
  "data": {
   "shadows": "dipy.reconst.odf.OdfModel"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.SimpleOdfFit": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "dipy.reconst.odf.OdfFit": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.direction.tests.test_peaks.SimpleOdfFit.odf": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "numpy.ascontiguousarray": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.SimpleOdfModel": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "dipy.direction.tests.test_peaks._sphere": {
     "line number": [
      86
     ]
    },
    "dipy.reconst.odf.OdfModel": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.direction.tests.test_peaks.SimpleOdfModel.fit": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "dipy.direction.tests.test_peaks.SimpleOdfFit": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks._create_mt_sim": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      159
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      168
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      155
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      164
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      157
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      161
     ]
    },
    "dipy.sims.voxel.multi_tensor_odf": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks._gtab": {
  "data": {
   "lineno": 82
  },
  "type": "constant"
 },
 "dipy.direction.tests.test_peaks._odf": {
  "data": {
   "lineno": 81
  },
  "type": "constant"
 },
 "dipy.direction.tests.test_peaks._sphere": {
  "data": {
   "lineno": 80
  },
  "type": "constant"
 },
 "dipy.direction.tests.test_peaks.angular_similarity": {
  "data": {
   "shadows": "dipy.core.sphere_stats.angular_similarity"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.create_unit_hemisphere": {
  "data": {
   "shadows": "dipy.core.subdivide_octahedron.create_unit_hemisphere"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.gfa": {
  "data": {
   "shadows": "dipy.reconst.odf.gfa"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.multi_tensor_odf": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_odf"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.peak_directions": {
  "data": {
   "shadows": "dipy.direction.peaks.peak_directions"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.peak_directions_nl": {
  "data": {
   "shadows": "dipy.direction.peaks.peak_directions_nl"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.peaks_from_model": {
  "data": {
   "shadows": "dipy.direction.peaks.peaks_from_model"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.reshape_peaks_for_visualization": {
  "data": {
   "shadows": "dipy.direction.peaks.reshape_peaks_for_visualization"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.test_OdfFit": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "dipy.direction.tests.test_peaks.SimpleOdfModel": {
     "line number": [
      105
     ]
    },
    "dipy.direction.tests.test_peaks._gtab": {
     "line number": [
      105
     ]
    },
    "dipy.direction.tests.test_peaks._sphere": {
     "line number": [
      107,
      108
     ]
    },
    "len": {
     "line number": [
      108,
      108
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.test_degenerative_cases": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": {
    "all": {
     "line number": [
      439
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      402
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      406,
      417,
      423,
      433,
      438,
      444
     ]
    },
    "len": {
     "line number": [
      409,
      410,
      411,
      426,
      447
     ]
    },
    "numpy.finfo": {
     "line number": [
      443
     ]
    },
    "numpy.float": {
     "line number": [
      443
     ]
    },
    "numpy.ones": {
     "line number": [
      422,
      436,
      442
     ]
    },
    "numpy.random.rand": {
     "line number": [
      437,
      443
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      439
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      440
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      409,
      410,
      411,
      420,
      426,
      434,
      446,
      447
     ]
    },
    "numpy.zeros": {
     "line number": [
      405,
      413,
      428
     ]
    },
    "print": {
     "line number": [
      407,
      418,
      424
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.test_difference_with_minmax": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      377,
      381,
      388,
      394
     ]
    },
    "dipy.direction.tests.test_peaks._create_mt_sim": {
     "line number": [
      369
     ]
    },
    "len": {
     "line number": [
      379,
      383,
      390,
      396
     ]
    },
    "numpy.array": {
     "line number": [
      362
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      397
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      379,
      383,
      390,
      396
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.test_peak_directions": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      121,
      129,
      134,
      141,
      146
     ]
    },
    "dipy.direction.tests.test_peaks.SimpleOdfModel": {
     "line number": [
      112
     ]
    },
    "dipy.direction.tests.test_peaks._gtab": {
     "line number": [
      112
     ]
    },
    "dir": {
     "line number": [
      121,
      125,
      129,
      131,
      134,
      136,
      141,
      143,
      146,
      148
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      123,
      124,
      125,
      131,
      132,
      133,
      136,
      137,
      138,
      143,
      144,
      145,
      148,
      149,
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.test_peak_directions_nl": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      32,
      33,
      39,
      40
     ]
    },
    "dipy.core.sphere.unit_icosahedron.subdivide": {
     "line number": [
      36
     ]
    },
    "dipy.direction.peaks.peak_directions_nl": {
     "line number": [
      30,
      37,
      49,
      52,
      55,
      58,
      69,
      72,
      75
     ]
    },
    "numpy.sqrt": {
     "line number": [
      32,
      39,
      60,
      77
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      60,
      77
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      32,
      39
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      33,
      40
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      31,
      38,
      50,
      53,
      56,
      59,
      70,
      73,
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.test_peak_directions_nl.discrete_eval": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.test_peak_directions_thorough": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      227,
      227
     ]
    },
    "dipy.core.sphere_stats.angular_similarity": {
     "line number": [
      187,
      195,
      198,
      209,
      213,
      224,
      242,
      257,
      272,
      288,
      304,
      320,
      326,
      338,
      344
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      186,
      194,
      197,
      208,
      211,
      223,
      241,
      256,
      271,
      287,
      303,
      319,
      325,
      337,
      343,
      353
     ]
    },
    "dipy.direction.tests.test_peaks._create_mt_sim": {
     "line number": [
      183,
      191,
      205,
      220,
      235,
      250,
      265,
      281,
      297,
      313,
      322,
      331,
      340,
      350
     ]
    },
    "len": {
     "line number": [
      354
     ]
    },
    "numpy.arccos": {
     "line number": [
      226
     ]
    },
    "numpy.array": {
     "line number": [
      179,
      201,
      216,
      230,
      245,
      260,
      275,
      291,
      307,
      347
     ]
    },
    "numpy.dot": {
     "line number": [
      226
     ]
    },
    "numpy.rad2deg": {
     "line number": [
      226
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      227
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      187,
      195,
      198,
      209,
      213,
      224,
      242,
      257,
      272,
      288,
      304,
      320
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      326,
      338,
      344,
      354
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.test_peaksFromModel": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": {
    "dipy.data.get_sphere": {
     "line number": [
      453
     ]
    },
    "dipy.direction.peaks.peaks_from_model": {
     "line number": [
      458,
      471,
      480,
      500
     ]
    },
    "dipy.direction.tests.test_peaks.SimpleOdfModel": {
     "line number": [
      455
     ]
    },
    "dipy.direction.tests.test_peaks._gtab": {
     "line number": [
      455
     ]
    },
    "dipy.direction.tests.test_peaks._odf": {
     "line number": [
      456,
      457,
      461,
      464,
      464,
      472,
      474,
      475,
      487,
      490,
      490
     ]
    },
    "dipy.direction.tests.test_peaks._sphere": {
     "line number": [
      453
     ]
    },
    "dipy.direction.tests.test_peaks.pickle": {
     "line number": [
      506,
      508
     ]
    },
    "dipy.reconst.odf.gfa": {
     "line number": [
      461,
      487
     ]
    },
    "getattr": {
     "line number": [
      513,
      514
     ]
    },
    "io.BytesIO": {
     "line number": [
      505
     ]
    },
    "len": {
     "line number": [
      472,
      472
     ]
    },
    "numpy.arange": {
     "line number": [
      478
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      474
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      461,
      462,
      463,
      465,
      466,
      467,
      468,
      475,
      482,
      483,
      484,
      485,
      487,
      488,
      489,
      491,
      492,
      493,
      494,
      513,
      515
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      473
     ]
    },
    "numpy.zeros": {
     "line number": [
      451
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.test_peaksFromModelParallel": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      547,
      560,
      561
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      527
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      534
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      523
     ]
    },
    "dipy.direction.peaks.peaks_from_model": {
     "line number": [
      538,
      542,
      548,
      554
     ]
    },
    "dipy.direction.tests.test_peaks.SimpleOdfModel": {
     "line number": [
      537
     ]
    },
    "dipy.direction.tests.test_peaks._sphere": {
     "line number": [
      534
     ]
    },
    "dipy.direction.tests.test_peaks.warnings": {
     "line number": [
      546,
      547
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      525
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      531
     ]
    },
    "issubclass": {
     "line number": [
      560,
      561
     ]
    },
    "len": {
     "line number": [
      559
     ]
    },
    "numpy.array": {
     "line number": [
      528
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      559,
      560,
      561,
      562,
      563
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      568,
      572,
      578,
      589,
      593,
      597
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      585
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      566,
      567,
      570,
      571,
      574,
      576,
      581,
      583,
      587,
      588,
      591,
      592,
      595,
      596
     ]
    },
    "str": {
     "line number": [
      562,
      563
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.test_peaks_shm_coeff": {
  "data": {
   "lineno": 600,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      611
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      607
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      605
     ]
    },
    "dipy.direction.peaks.peaks_from_model": {
     "line number": [
      622,
      629,
      633
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      609
     ]
    },
    "dipy.reconst.shm.CsaOdfModel": {
     "line number": [
      620
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      615
     ]
    },
    "numpy.array": {
     "line number": [
      612
     ]
    },
    "numpy.dot": {
     "line number": [
      625,
      637
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      626,
      638
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      627,
      631
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.test_reshape_peaks_for_visualization": {
  "data": {
   "lineno": 641,
   "symbols_in_volume": {
    "dipy.direction.peaks.reshape_peaks_for_visualization": {
     "line number": [
      647,
      648,
      649
     ]
    },
    "numpy.random.randn": {
     "line number": [
      643,
      644,
      645
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      651,
      652,
      653,
      655,
      656,
      657
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_peaks.unit_icosahedron": {
  "data": {
   "shadows": "dipy.core.sphere.unit_icosahedron"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_peaks.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      93
     ]
    },
    "numpy.array": {
     "line number": [
      12
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.direction.tests.test_pmf.BootPmfGen": {
  "data": {
   "shadows": "dipy.direction.pmf.BootPmfGen"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf.ConstrainedSphericalDeconvModel": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf.HemiSphere": {
  "data": {
   "shadows": "dipy.core.sphere.HemiSphere"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf.SHCoeffPmfGen": {
  "data": {
   "shadows": "dipy.direction.pmf.SHCoeffPmfGen"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf.SimplePmfGen": {
  "data": {
   "shadows": "dipy.direction.pmf.SimplePmfGen"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf.TensorModel": {
  "data": {
   "shadows": "dipy.reconst.dti.TensorModel"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf.response": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "dipy.direction.tests.test_pmf.single_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.single_tensor"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf.test_boot_pmf": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      73,
      77
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      57
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      51
     ]
    },
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      51
     ]
    },
    "dipy.direction.pmf.BootPmfGen": {
     "line number": [
      63,
      80,
      86
     ]
    },
    "dipy.direction.tests.test_pmf.response": {
     "line number": [
      74
     ]
    },
    "dipy.direction.tests.test_pmf.warnings": {
     "line number": [
      72,
      73
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      74
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      61
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      58
     ]
    },
    "issubclass": {
     "line number": [
      77
     ]
    },
    "len": {
     "line number": [
      54,
      68,
      76,
      83,
      89
     ]
    },
    "numpy.array": {
     "line number": [
      55,
      60
     ]
    },
    "numpy.insert": {
     "line number": [
      55,
      56
     ]
    },
    "numpy.ones": {
     "line number": [
      54
     ]
    },
    "numpy.sum": {
     "line number": [
      84,
      90
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      76,
      77,
      78,
      84,
      90
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      69
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      68,
      83,
      89
     ]
    },
    "numpy.tile": {
     "line number": [
      59
     ]
    },
    "str": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_pmf.test_pmf_from_array": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      45
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      31
     ]
    },
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      31
     ]
    },
    "dipy.direction.pmf.SimplePmfGen": {
     "line number": [
      32,
      46
     ]
    },
    "len": {
     "line number": [
      32,
      40,
      42,
      46
     ]
    },
    "numpy.array": {
     "line number": [
      35,
      39,
      41
     ]
    },
    "numpy.ones": {
     "line number": [
      32,
      46
     ]
    },
    "numpy.sum": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      39,
      41
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      44
     ]
    },
    "numpy.zeros": {
     "line number": [
      40,
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_pmf.test_pmf_from_sh": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      16
     ]
    },
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      16
     ]
    },
    "dipy.direction.pmf.SHCoeffPmfGen": {
     "line number": [
      17
     ]
    },
    "len": {
     "line number": [
      25,
      27
     ]
    },
    "numpy.array": {
     "line number": [
      20,
      24,
      26
     ]
    },
    "numpy.ones": {
     "line number": [
      17
     ]
    },
    "numpy.sum": {
     "line number": [
      21
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      24,
      26
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      21
     ]
    },
    "numpy.zeros": {
     "line number": [
      25,
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_pmf.unit_octahedron": {
  "data": {
   "shadows": "dipy.core.sphere.unit_octahedron"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_pmf.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_prob_direction_getter": {
  "data": {},
  "type": "module"
 },
 "dipy.direction.tests.test_prob_direction_getter.DeterministicMaximumDirectionGetter": {
  "data": {
   "shadows": "dipy.direction.DeterministicMaximumDirectionGetter"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_prob_direction_getter.ProbabilisticDirectionGetter": {
  "data": {
   "shadows": "dipy.direction.ProbabilisticDirectionGetter"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_prob_direction_getter.SphHarmFit": {
  "data": {
   "shadows": "dipy.reconst.shm.SphHarmFit"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_prob_direction_getter.SphHarmModel": {
  "data": {
   "shadows": "dipy.reconst.shm.SphHarmModel"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_prob_direction_getter.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_prob_direction_getter.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.direction.tests.test_prob_direction_getter.test_DeterministicMaximumDirectionGetter": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      80,
      88
     ]
    },
    "dipy.core.sphere.unit_octahedron.theta.shape": {
     "line number": [
      75
     ]
    },
    "dipy.core.sphere.unit_octahedron.vertices.copy": {
     "line number": [
      73
     ]
    },
    "dipy.direction.DeterministicMaximumDirectionGetter.from_pmf": {
     "line number": [
      79,
      87
     ]
    },
    "dir": {
     "line number": [
      73,
      81,
      89
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      82,
      90
     ]
    },
    "numpy.zeros": {
     "line number": [
      74,
      78,
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_prob_direction_getter.test_ProbabilisticDirectionGetter": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "SillyModel": {
     "line number": [
      21
     ]
    },
    "ValueError": {
     "line number": [
      47,
      52,
      56,
      64
     ]
    },
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      34,
      41,
      48,
      53,
      57,
      61,
      66
     ]
    },
    "dipy.core.sphere.unit_octahedron.theta.shape": {
     "line number": [
      39
     ]
    },
    "dipy.core.sphere.unit_octahedron.vertices.copy": {
     "line number": [
      30
     ]
    },
    "dipy.direction.ProbabilisticDirectionGetter.from_pmf": {
     "line number": [
      41,
      47,
      52,
      56
     ]
    },
    "dipy.direction.ProbabilisticDirectionGetter.from_shcoeff": {
     "line number": [
      33,
      60,
      65
     ]
    },
    "dir": {
     "line number": [
      30,
      35,
      42
     ]
    },
    "numpy.float32": {
     "line number": [
      25
     ]
    },
    "numpy.float64": {
     "line number": [
      25
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36,
      43
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      47,
      52,
      56,
      64
     ]
    },
    "numpy.zeros": {
     "line number": [
      22,
      29,
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_prob_direction_getter.test_ProbabilisticDirectionGetter.SillyModel": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "dipy.reconst.shm.SphHarmModel": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.direction.tests.test_prob_direction_getter.test_ProbabilisticDirectionGetter.SillyModel.fit": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "dipy.reconst.shm.SphHarmFit": {
     "line number": [
      19
     ]
    },
    "numpy.zeros": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.direction.tests.test_prob_direction_getter.unit_octahedron": {
  "data": {
   "shadows": "dipy.core.sphere.unit_octahedron"
  },
  "type": "import"
 },
 "dipy.dirname": {
  "data": {
   "shadows": "os.path.dirname"
  },
  "type": "import"
 },
 "dipy.get_info": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "os.path.dirname": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.info": {
  "data": {
   "symbols_in_volume": {
    "dipy.info.H5PY_MIN_VERSION": {
     "line number": [
      108
     ]
    },
    "dipy.info.NIBABEL_MIN_VERSION": {
     "line number": [
      107
     ]
    },
    "dipy.info.NUMPY_MIN_VERSION": {
     "line number": [
      105
     ]
    },
    "dipy.info.SCIPY_MIN_VERSION": {
     "line number": [
      106
     ]
    },
    "dipy.info.__version__": {
     "line number": [
      103
     ]
    },
    "dipy.info._version_extra": {
     "line number": [
      19,
      102
     ]
    },
    "dipy.info._version_major": {
     "line number": [
      16,
      99
     ]
    },
    "dipy.info._version_micro": {
     "line number": [
      18,
      101
     ]
    },
    "dipy.info._version_minor": {
     "line number": [
      17,
      100
     ]
    },
    "dipy.info.description": {
     "line number": [
      90
     ]
    },
    "dipy.info.long_description": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.info.AUTHOR": {
  "data": {
   "lineno": 96
  },
  "type": "constant"
 },
 "dipy.info.AUTHOR_EMAIL": {
  "data": {
   "lineno": 97
  },
  "type": "constant"
 },
 "dipy.info.CLASSIFIERS": {
  "data": {
   "lineno": 95
  },
  "type": "constant"
 },
 "dipy.info.CYTHON_MIN_VERSION": {
  "data": {
   "lineno": 80
  },
  "type": "constant"
 },
 "dipy.info.DESCRIPTION": {
  "data": {
   "lineno": 90
  },
  "type": "constant"
 },
 "dipy.info.DOWNLOAD_URL": {
  "data": {
   "lineno": 93
  },
  "type": "constant"
 },
 "dipy.info.H5PY_MIN_VERSION": {
  "data": {
   "lineno": 84
  },
  "type": "constant"
 },
 "dipy.info.ISRELEASE": {
  "data": {
   "lineno": 102
  },
  "type": "constant"
 },
 "dipy.info.LICENSE": {
  "data": {
   "lineno": 94
  },
  "type": "constant"
 },
 "dipy.info.LONG_DESCRIPTION": {
  "data": {
   "lineno": 91
  },
  "type": "constant"
 },
 "dipy.info.MAINTAINER": {
  "data": {
   "lineno": 88
  },
  "type": "constant"
 },
 "dipy.info.MAINTAINER_EMAIL": {
  "data": {
   "lineno": 89
  },
  "type": "constant"
 },
 "dipy.info.MAJOR": {
  "data": {
   "lineno": 99
  },
  "type": "constant"
 },
 "dipy.info.MICRO": {
  "data": {
   "lineno": 101
  },
  "type": "constant"
 },
 "dipy.info.MINOR": {
  "data": {
   "lineno": 100
  },
  "type": "constant"
 },
 "dipy.info.NAME": {
  "data": {
   "lineno": 87
  },
  "type": "constant"
 },
 "dipy.info.NIBABEL_MIN_VERSION": {
  "data": {
   "lineno": 83
  },
  "type": "constant"
 },
 "dipy.info.NUMPY_MIN_VERSION": {
  "data": {
   "lineno": 81
  },
  "type": "constant"
 },
 "dipy.info.PLATFORMS": {
  "data": {
   "lineno": 98
  },
  "type": "constant"
 },
 "dipy.info.PROVIDES": {
  "data": {
   "lineno": 104
  },
  "type": "constant"
 },
 "dipy.info.REQUIRES": {
  "data": {
   "lineno": 105
  },
  "type": "constant"
 },
 "dipy.info.SCIPY_MIN_VERSION": {
  "data": {
   "lineno": 82
  },
  "type": "constant"
 },
 "dipy.info.URL": {
  "data": {
   "lineno": 92
  },
  "type": "constant"
 },
 "dipy.info.VERSION": {
  "data": {
   "lineno": 103
  },
  "type": "constant"
 },
 "dipy.info.__version__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "dipy.info._version_extra": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "dipy.info._version_major": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "dipy.info._version_micro": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "dipy.info._version_minor": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "dipy.info.description": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "dipy.info.long_description": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "dipy.io": {
  "data": {},
  "type": "module"
 },
 "dipy.io.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.io.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.io.dpy": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.io.dpy.Dpy": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "object": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.io.dpy.Dpy.__init__": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "dipy.io.dpy.h5py": {
     "line number": [
      58
     ]
    },
    "len": {
     "line number": [
      85
     ]
    },
    "numpy.array": {
     "line number": [
      80
     ]
    },
    "numpy.int64": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.dpy.Dpy.close": {
  "data": {
   "lineno": 143
  },
  "type": "function"
 },
 "dipy.io.dpy.Dpy.read_track": {
  "data": {
   "lineno": 116
  },
  "type": "function"
 },
 "dipy.io.dpy.Dpy.read_tracks": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "len": {
     "line number": [
      138
     ]
    },
    "nibabel.streamlines.ArraySequence": {
     "line number": [
      137
     ]
    },
    "range": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.dpy.Dpy.read_tracksi": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "nibabel.streamlines.ArraySequence": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.dpy.Dpy.version": {
  "data": {
   "lineno": 88
  },
  "type": "function"
 },
 "dipy.io.dpy.Dpy.write_track": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.dpy.Dpy.write_tracks": {
  "data": {
   "lineno": 102
  },
  "type": "function"
 },
 "dipy.io.dpy.Streamlines": {
  "data": {
   "shadows": "nibabel.streamlines.ArraySequence"
  },
  "type": "import"
 },
 "dipy.io.dpy.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "dipy.io.dpy.h5py": {
  "data": {
   "shadows": "h5py"
  },
  "type": "import"
 },
 "dipy.io.dpy.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.gradients": {
  "data": {},
  "type": "module"
 },
 "dipy.io.gradients.InTemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.InTemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.io.gradients.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.io.gradients.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.io.gradients.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.gradients.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.io.gradients.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "dipy.io.gradients.read_bvals_bvecs": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      67,
      69,
      78,
      81
     ]
    },
    "ValueError": {
     "line number": [
      55,
      57
     ]
    },
    "dipy.io.gradients.re": {
     "line number": [
      49
     ]
    },
    "isinstance": {
     "line number": [
      40
     ]
    },
    "len": {
     "line number": [
      77
     ]
    },
    "max": {
     "line number": [
      80,
      80
     ]
    },
    "min": {
     "line number": [
      66
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      46
     ]
    },
    "numpy.load": {
     "line number": [
      52
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      50
     ]
    },
    "numpy.squeeze": {
     "line number": [
      50,
      52
     ]
    },
    "open": {
     "line number": [
      43,
      48
     ]
    },
    "os.path.splitext": {
     "line number": [
      41
     ]
    },
    "str": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.gradients.splitext": {
  "data": {
   "shadows": "os.path.splitext"
  },
  "type": "import"
 },
 "dipy.io.image": {
  "data": {},
  "type": "module"
 },
 "dipy.io.image.load_nifti": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "nibabel.aff2axcodes": {
     "line number": [
      24
     ]
    },
    "nibabel.load": {
     "line number": [
      13
     ]
    },
    "numpy.float64": {
     "line number": [
      12
     ]
    },
    "tuple": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.image.load_nifti_data": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "nibabel.load": {
     "line number": [
      7
     ]
    },
    "numpy.float64": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.image.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.io.image.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.image.save_nifti": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "nibabel.Nifti1Image": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.image.save_qa_metric": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "numpy.savetxt": {
     "line number": [
      48
     ]
    },
    "open": {
     "line number": [
      49
     ]
    },
    "str": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.peaks": {
  "data": {},
  "type": "module"
 },
 "dipy.io.peaks.PeaksAndMetrics": {
  "data": {
   "shadows": "dipy.direction.peaks.PeaksAndMetrics"
  },
  "type": "import"
 },
 "dipy.io.peaks.Sphere": {
  "data": {
   "shadows": "dipy.core.sphere.Sphere"
  },
  "type": "import"
 },
 "dipy.io.peaks._safe_save": {
  "data": {
   "lineno": 13
  },
  "type": "function"
 },
 "dipy.io.peaks.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.io.peaks.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.io.peaks.h5py": {
  "data": {
   "shadows": "h5py"
  },
  "type": "import"
 },
 "dipy.io.peaks.load_peaks": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      45,
      56
     ]
    },
    "KeyError": {
     "line number": [
      60,
      69,
      76
     ]
    },
    "dipy.core.sphere.Sphere": {
     "line number": [
      84
     ]
    },
    "dipy.direction.peaks.PeaksAndMetrics": {
     "line number": [
      49
     ]
    },
    "dipy.io.peaks.h5py": {
     "line number": [
      47
     ]
    },
    "dipy.io.peaks.os": {
     "line number": [
      44
     ]
    },
    "print": {
     "line number": [
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      103,
      105,
      106,
      108,
      110,
      111,
      112,
      113,
      114,
      115,
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.peaks.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.peaks.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.io.peaks.peaks_to_niftis": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "dipy.direction.peaks.reshape_peaks_for_visualization": {
     "line number": [
      215
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      212,
      219,
      221,
      224,
      226
     ]
    },
    "numpy.float32": {
     "line number": [
      212,
      217,
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.peaks.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.io.peaks.reshape_peaks_for_visualization": {
  "data": {
   "shadows": "dipy.direction.peaks.reshape_peaks_for_visualization"
  },
  "type": "import"
 },
 "dipy.io.peaks.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.io.peaks.save_peaks": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      140
     ]
    },
    "ValueError": {
     "line number": [
      147
     ]
    },
    "dipy.io.peaks._safe_save": {
     "line number": [
      160,
      161,
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171
     ]
    },
    "dipy.io.peaks.h5py": {
     "line number": [
      149
     ]
    },
    "dipy.io.peaks.os": {
     "line number": [
      139
     ]
    },
    "hasattr": {
     "line number": [
      142,
      142,
      143,
      156,
      157,
      158
     ]
    },
    "numpy.array": {
     "line number": [
      167,
      168
     ]
    },
    "print": {
     "line number": [
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      184,
      186,
      187,
      189,
      191,
      192,
      193,
      194,
      195,
      196,
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.pickles": {
  "data": {},
  "type": "module"
 },
 "dipy.io.pickles.load_pickle": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "dipy.io.pickles.pickle": {
     "line number": [
      58
     ]
    },
    "open": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.pickles.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "dipy.io.pickles.save_pickle": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": {
    "dipy.io.pickles.pickle": {
     "line number": [
      35,
      35
     ]
    },
    "open": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram": {
  "data": {
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.logging": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.io.stateful_tractogram.Origin": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.enum": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.io.stateful_tractogram.PerArrayDict": {
  "data": {
   "shadows": "nibabel.streamlines.tractogram.PerArrayDict"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.PerArraySequenceDict": {
  "data": {
   "shadows": "nibabel.streamlines.tractogram.PerArraySequenceDict"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.Space": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.enum": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "object": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.__init__": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      117,
      123
     ]
    },
    "ValueError": {
     "line number": [
      132,
      136
     ]
    },
    "dipy.io.dpy.Streamlines": {
     "line number": [
      98
     ]
    },
    "dipy.io.stateful_tractogram.Origin": {
     "line number": [
      53,
      135
     ]
    },
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      131
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      139
     ]
    },
    "dipy.io.stateful_tractogram.logging": {
     "line number": [
      105,
      109
     ]
    },
    "dipy.io.utils.get_reference_info": {
     "line number": [
      121
     ]
    },
    "dipy.io.utils.is_reference_info_valid": {
     "line number": [
      114
     ]
    },
    "isinstance": {
     "line number": [
      98,
      104,
      113
     ]
    },
    "len": {
     "line number": [
      113
     ]
    },
    "nibabel.streamlines.tractogram.Tractogram": {
     "line number": [
      100
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      129
     ]
    },
    "tuple": {
     "line number": [
      113
     ]
    },
    "type": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.__len__": {
  "data": {
   "lineno": 193
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.__str__": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": {
    "numpy.array2string": {
     "line number": [
      175,
      178,
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram._get_point_count": {
  "data": {
   "lineno": 459
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram._get_streamline_count": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": {
    "len": {
     "line number": [
      457
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram._rasmm_to_vox": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      500,
      503
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      504,
      506
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram._rasmm_to_voxmm": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      524,
      529
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      530,
      532
     ]
    },
    "numpy.asarray": {
     "line number": [
      527
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram._shift_voxel_origin": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Origin": {
     "line number": [
      548,
      552,
      554,
      557
     ]
    },
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      542,
      544
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      553,
      556
     ]
    },
    "nibabel.affines.apply_affine": {
     "line number": [
      547
     ]
    },
    "numpy.asarray": {
     "line number": [
      541
     ]
    },
    "numpy.eye": {
     "line number": [
      545
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram._vox_to_rasmm": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      489,
      492
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      493,
      495
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram._vox_to_voxmm": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      465,
      469
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      470,
      472
     ]
    },
    "numpy.asarray": {
     "line number": [
      467
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram._voxmm_to_rasmm": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      511,
      516
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      517,
      519
     ]
    },
    "numpy.asarray": {
     "line number": [
      513
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram._voxmm_to_vox": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      477,
      481
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      482,
      484
     ]
    },
    "numpy.asarray": {
     "line number": [
      479
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.affine": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "property": {
     "line number": [
      208
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.compute_bounding_box": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "itertools.product": {
     "line number": [
      363
     ]
    },
    "list": {
     "line number": [
      363
     ]
    },
    "numpy.asarray": {
     "line number": [
      363
     ]
    },
    "numpy.max": {
     "line number": [
      362
     ]
    },
    "numpy.min": {
     "line number": [
      361
     ]
    },
    "numpy.zeros": {
     "line number": [
      365
     ]
    },
    "zip": {
     "line number": [
      363
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.data_per_point": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      275
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.data_per_streamline": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.dimensions": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": {
    "property": {
     "line number": [
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.from_sft": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      164
     ]
    },
    "staticmethod": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.get_streamlines_copy": {
  "data": {
   "lineno": 238
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.is_bbox_in_vox_valid": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": {
    "copy.deepcopy": {
     "line number": [
      380,
      381,
      386
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      390,
      391,
      397,
      398
     ]
    },
    "numpy.any": {
     "line number": [
      389,
      394,
      395,
      396
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.origin": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "property": {
     "line number": [
      228
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.remove_invalid_streamlines": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": {
    "bisect.bisect": {
     "line number": [
      434
     ]
    },
    "copy.deepcopy": {
     "line number": [
      419,
      420
     ]
    },
    "int": {
     "line number": [
      438
     ]
    },
    "len": {
     "line number": [
      437
     ]
    },
    "nibabel.streamlines.tractogram.Tractogram": {
     "line number": [
      445
     ]
    },
    "numpy.any": {
     "line number": [
      427
     ]
    },
    "numpy.arange": {
     "line number": [
      437
     ]
    },
    "numpy.array": {
     "line number": [
      438
     ]
    },
    "numpy.eye": {
     "line number": [
      448
     ]
    },
    "numpy.logical_or": {
     "line number": [
      429
     ]
    },
    "numpy.min": {
     "line number": [
      425
     ]
    },
    "numpy.setdiff1d": {
     "line number": [
      437
     ]
    },
    "numpy.where": {
     "line number": [
      429
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.space": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "property": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.space_attributes": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "property": {
     "line number": [
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.streamlines": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "dipy.io.dpy.Streamlines": {
     "line number": [
      251,
      253
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      256
     ]
    },
    "isinstance": {
     "line number": [
      251
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.to_center": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Origin": {
     "line number": [
      343
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.to_corner": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Origin": {
     "line number": [
      349
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.to_origin": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Origin": {
     "line number": [
      332,
      334
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.to_rasmm": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      311,
      313
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.to_space": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      319,
      321,
      323
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      326
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.to_vox": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      297,
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.to_voxmm": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      304,
      306
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.voxel_order": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "property": {
     "line number": [
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.StatefulTractogram.voxel_sizes": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "property": {
     "line number": [
      218
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.Streamlines": {
  "data": {
   "shadows": "dipy.io.dpy.Streamlines"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.Tractogram": {
  "data": {
   "shadows": "nibabel.streamlines.tractogram.Tractogram"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram._is_data_per_point_valid": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      578
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      579,
      593,
      601
     ]
    },
    "isinstance": {
     "line number": [
      578
     ]
    },
    "len": {
     "line number": [
      588,
      592,
      598
     ]
    },
    "nibabel.streamlines.tractogram.PerArraySequenceDict": {
     "line number": [
      578
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram._is_data_per_streamline_valid": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      624
     ]
    },
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      625,
      636
     ]
    },
    "isinstance": {
     "line number": [
      624
     ]
    },
    "len": {
     "line number": [
      635
     ]
    },
    "nibabel.streamlines.tractogram.PerArrayDict": {
     "line number": [
      624
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.stateful_tractogram.apply_affine": {
  "data": {
   "shadows": "nibabel.affines.apply_affine"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.bisect": {
  "data": {
   "shadows": "bisect.bisect"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.enum": {
  "data": {
   "shadows": "enum"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.get_reference_info": {
  "data": {
   "shadows": "dipy.io.utils.get_reference_info"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.is_reference_info_valid": {
  "data": {
   "shadows": "dipy.io.utils.is_reference_info_valid"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.logger": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "dipy.io.stateful_tractogram.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "dipy.io.stateful_tractogram.set_sft_logger_level": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.logger": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.streamline": {
  "data": {
   "symbols_in_volume": {
    "dipy.io.streamline.load_generator": {
     "line number": [
      237,
      238,
      239,
      240,
      241
     ]
    },
    "dipy.io.streamline.save_generator": {
     "line number": [
      242,
      243,
      244,
      245,
      246
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.io.streamline.Dpy": {
  "data": {
   "shadows": "dipy.io.dpy.Dpy"
  },
  "type": "import"
 },
 "dipy.io.streamline.Origin": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Origin"
  },
  "type": "import"
 },
 "dipy.io.streamline.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.io.streamline.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.io.streamline.Tractogram": {
  "data": {
   "shadows": "nibabel.streamlines.tractogram.Tractogram"
  },
  "type": "import"
 },
 "dipy.io.streamline.create_tractogram_header": {
  "data": {
   "shadows": "dipy.io.utils.create_tractogram_header"
  },
  "type": "import"
 },
 "dipy.io.streamline.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "dipy.io.streamline.detect_format": {
  "data": {
   "shadows": "nibabel.streamlines.detect_format"
  },
  "type": "import"
 },
 "dipy.io.streamline.is_header_compatible": {
  "data": {
   "shadows": "dipy.io.utils.is_header_compatible"
  },
  "type": "import"
 },
 "dipy.io.streamline.load_dpy": {
  "data": {
   "lineno": 241
  },
  "type": "constant"
 },
 "dipy.io.streamline.load_fib": {
  "data": {
   "lineno": 240
  },
  "type": "constant"
 },
 "dipy.io.streamline.load_generator": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.streamline.load_generator.f_gen": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      195
     ]
    },
    "dipy.io.stateful_tractogram.Origin.NIFTI": {
     "line number": [
      191
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      190,
      199
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      198
     ]
    },
    "dipy.io.streamline.os": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.streamline.load_tck": {
  "data": {
   "lineno": 238
  },
  "type": "constant"
 },
 "dipy.io.streamline.load_tractogram": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      168
     ]
    },
    "dipy.io.dpy.Dpy": {
     "line number": [
      153
     ]
    },
    "dipy.io.stateful_tractogram.Origin.NIFTI": {
     "line number": [
      86,
      160
     ]
    },
    "dipy.io.stateful_tractogram.Space": {
     "line number": [
      122
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      85,
      159
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      159
     ]
    },
    "dipy.io.streamline.logging": {
     "line number": [
      119,
      123,
      130,
      136,
      156
     ]
    },
    "dipy.io.streamline.os": {
     "line number": [
      117
     ]
    },
    "dipy.io.streamline.time": {
     "line number": [
      140,
      157
     ]
    },
    "dipy.io.utils.is_header_compatible": {
     "line number": [
      135
     ]
    },
    "dipy.io.vtk.load_vtk_streamlines": {
     "line number": [
      151
     ]
    },
    "len": {
     "line number": [
      157
     ]
    },
    "list": {
     "line number": [
      154
     ]
    },
    "nibabel.streamlines.load": {
     "line number": [
      144
     ]
    },
    "round": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.streamline.load_trk": {
  "data": {
   "lineno": 237
  },
  "type": "constant"
 },
 "dipy.io.streamline.load_vtk": {
  "data": {
   "lineno": 239
  },
  "type": "constant"
 },
 "dipy.io.streamline.load_vtk_streamlines": {
  "data": {
   "shadows": "dipy.io.vtk.load_vtk_streamlines"
  },
  "type": "import"
 },
 "dipy.io.streamline.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.io.streamline.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.io.streamline.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.streamline.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.io.streamline.save_dpy": {
  "data": {
   "lineno": 246
  },
  "type": "constant"
 },
 "dipy.io.streamline.save_fib": {
  "data": {
   "lineno": 245
  },
  "type": "constant"
 },
 "dipy.io.streamline.save_generator": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": {
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.streamline.save_generator.f_gen": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      227
     ]
    },
    "dipy.io.streamline.os": {
     "line number": [
      225
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      229
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.streamline.save_tck": {
  "data": {
   "lineno": 243
  },
  "type": "constant"
 },
 "dipy.io.streamline.save_tractogram": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      39
     ]
    },
    "ValueError": {
     "line number": [
      42
     ]
    },
    "copy.deepcopy": {
     "line number": [
      48,
      49
     ]
    },
    "dipy.io.dpy.Dpy": {
     "line number": [
      72
     ]
    },
    "dipy.io.streamline.logging": {
     "line number": [
      76
     ]
    },
    "dipy.io.streamline.os": {
     "line number": [
      37
     ]
    },
    "dipy.io.streamline.time": {
     "line number": [
      54,
      77
     ]
    },
    "dipy.io.utils.create_tractogram_header": {
     "line number": [
      57
     ]
    },
    "dipy.io.vtk.save_vtk_streamlines": {
     "line number": [
      70
     ]
    },
    "len": {
     "line number": [
      77
     ]
    },
    "nibabel.streamlines.detect_format": {
     "line number": [
      56
     ]
    },
    "nibabel.streamlines.save": {
     "line number": [
      67
     ]
    },
    "nibabel.streamlines.tractogram.Tractogram": {
     "line number": [
      59
     ]
    },
    "numpy.eye": {
     "line number": [
      60
     ]
    },
    "round": {
     "line number": [
      77
     ]
    },
    "tractogram_type": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.streamline.save_trk": {
  "data": {
   "lineno": 242
  },
  "type": "constant"
 },
 "dipy.io.streamline.save_vtk": {
  "data": {
   "lineno": 244
  },
  "type": "constant"
 },
 "dipy.io.streamline.save_vtk_streamlines": {
  "data": {
   "shadows": "dipy.io.vtk.save_vtk_streamlines"
  },
  "type": "import"
 },
 "dipy.io.streamline.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "dipy.io.tests": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.Tester": {
     "line number": [
      4,
      5
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.io.tests.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.io.tests.test": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "dipy.io.tests.test_bvectxt": {
  "data": {},
  "type": "module"
 },
 "dipy.io.tests.test_bvectxt.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.io.tests.test_bvectxt.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.io.tests.test_bvectxt.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.tests.test_bvectxt.orientation_from_string": {
  "data": {
   "shadows": "dipy.io.bvectxt.orientation_from_string"
  },
  "type": "import"
 },
 "dipy.io.tests.test_bvectxt.orientation_to_string": {
  "data": {
   "shadows": "dipy.io.bvectxt.orientation_to_string"
  },
  "type": "import"
 },
 "dipy.io.tests.test_bvectxt.reorient_vectors": {
  "data": {
   "shadows": "dipy.io.bvectxt.reorient_vectors"
  },
  "type": "import"
 },
 "dipy.io.tests.test_bvectxt.test_orientation_from_to_string": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      15
     ]
    },
    "dipy.io.bvectxt.orientation_from_string": {
     "line number": [
      12,
      13,
      14,
      15
     ]
    },
    "dipy.io.bvectxt.orientation_to_string": {
     "line number": [
      17,
      18,
      19
     ]
    },
    "numpy.array": {
     "line number": [
      9,
      10,
      11
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      12,
      13,
      14
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_bvectxt.test_reorient_vectors": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      33
     ]
    },
    "dipy.io.bvectxt.reorient_vectors": {
     "line number": [
      24,
      25,
      27,
      30,
      32,
      33,
      37,
      38,
      40,
      43,
      45
     ]
    },
    "numpy.arange": {
     "line number": [
      23,
      35
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      24,
      25,
      27,
      30,
      32,
      37,
      38,
      40,
      43,
      45
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_dpy": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      36
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.io.tests.test_dpy.Dpy": {
  "data": {
   "shadows": "dipy.io.dpy.Dpy"
  },
  "type": "import"
 },
 "dipy.io.tests.test_dpy.InTemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.InTemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.io.tests.test_dpy.Streamlines": {
  "data": {
   "shadows": "dipy.io.dpy.Streamlines"
  },
  "type": "import"
 },
 "dipy.io.tests.test_dpy.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.tests.test_dpy.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.io.tests.test_dpy.test_dpy": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "dipy.io.dpy.Dpy": {
     "line number": [
      13,
      26
     ]
    },
    "dipy.io.dpy.Streamlines": {
     "line number": [
      20
     ]
    },
    "len": {
     "line number": [
      30
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      12
     ]
    },
    "numpy.ascontiguousarray": {
     "line number": [
      22
     ]
    },
    "numpy.ones": {
     "line number": [
      14
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      23,
      32,
      33
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      27,
      30
     ]
    },
    "numpy.vstack": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_io": {
  "data": {},
  "type": "module"
 },
 "dipy.io.tests.test_io.io": {
  "data": {
   "shadows": "dipy.io"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io.test_imports": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "dipy.io": {
     "line number": [
      8
     ]
    },
    "hasattr": {
     "line number": [
      8
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_io_gradients": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      108
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.io.tests.test_io_gradients.InTemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.InTemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_gradients.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_gradients.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_gradients.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_gradients.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_gradients.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_gradients.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_gradients.osp": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_gradients.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_gradients.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_gradients.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_gradients.test_read_bvals_bvecs": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      42,
      49,
      55,
      58
     ]
    },
    "ValueError": {
     "line number": [
      29
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      17
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      15
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      16,
      22,
      24,
      29,
      42,
      49,
      55,
      58,
      64,
      69,
      74,
      84,
      89,
      94,
      99
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      33
     ]
    },
    "numpy.array": {
     "line number": [
      76,
      101
     ]
    },
    "numpy.ravel": {
     "line number": [
      45
     ]
    },
    "numpy.save": {
     "line number": [
      48
     ]
    },
    "numpy.savetxt": {
     "line number": [
      54
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      18,
      19,
      23,
      25,
      77,
      78,
      79,
      102,
      103,
      104,
      105
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      29,
      42,
      49,
      55,
      58
     ]
    },
    "open": {
     "line number": [
      37,
      46,
      53,
      62,
      67,
      72,
      82,
      87,
      92,
      97
     ]
    },
    "os.path.splitext": {
     "line number": [
      28
     ]
    },
    "print": {
     "line number": [
      47
     ]
    },
    "range": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_io_peaks": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      125
     ]
    },
    "dipy.io.tests.test_io_peaks.test_io_peaks": {
     "line number": [
      127
     ]
    },
    "dipy.io.tests.test_io_peaks.test_io_save_peaks_error": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.io.tests.test_io_peaks.InTemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.InTemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.PeaksAndMetrics": {
  "data": {
   "shadows": "dipy.direction.peaks.PeaksAndMetrics"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.load_peaks": {
  "data": {
   "shadows": "dipy.io.peaks.load_peaks"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.peaks_to_niftis": {
  "data": {
   "shadows": "dipy.io.peaks.peaks_to_niftis"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.save_peaks": {
  "data": {
   "shadows": "dipy.io.peaks.save_peaks"
  },
  "type": "import"
 },
 "dipy.io.tests.test_io_peaks.test_io_peaks": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      64,
      80
     ]
    },
    "ValueError": {
     "line number": [
      57
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      24
     ]
    },
    "dipy.data.default_sphere.vertices.shape": {
     "line number": [
      25,
      30
     ]
    },
    "dipy.direction.peaks.PeaksAndMetrics": {
     "line number": [
      18,
      56
     ]
    },
    "dipy.io.peaks.load_peaks": {
     "line number": [
      33,
      40,
      43,
      76,
      80
     ]
    },
    "dipy.io.peaks.peaks_to_niftis": {
     "line number": [
      92
     ]
    },
    "dipy.io.peaks.save_peaks": {
     "line number": [
      32,
      39,
      57,
      61,
      64,
      68,
      71,
      75,
      83
     ]
    },
    "dipy.io.tests.test_io_peaks.os": {
     "line number": [
      95,
      96,
      97,
      98,
      99
     ]
    },
    "getattr": {
     "line number": [
      47,
      48
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      15
     ]
    },
    "numpy.eye": {
     "line number": [
      19,
      39,
      66
     ]
    },
    "numpy.ones": {
     "line number": [
      91
     ]
    },
    "numpy.random.rand": {
     "line number": [
      20
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      52
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      34,
      41,
      47
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      50,
      51,
      77
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      57,
      64,
      80
     ]
    },
    "numpy.zeros": {
     "line number": [
      21,
      22,
      23,
      25,
      28,
      29,
      30,
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_io_peaks.test_io_save_peaks_error": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      108
     ]
    },
    "ValueError": {
     "line number": [
      109
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      116
     ]
    },
    "dipy.data.default_sphere.vertices.shape": {
     "line number": [
      117,
      122
     ]
    },
    "dipy.direction.peaks.PeaksAndMetrics": {
     "line number": [
      106
     ]
    },
    "dipy.io.peaks.save_peaks": {
     "line number": [
      108,
      109
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      103
     ]
    },
    "numpy.eye": {
     "line number": [
      111
     ]
    },
    "numpy.random.rand": {
     "line number": [
      112
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      108,
      109
     ]
    },
    "numpy.zeros": {
     "line number": [
      113,
      114,
      115,
      117,
      120,
      121,
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      658
     ]
    },
    "dict": {
     "line number": [
      23,
      26
     ]
    },
    "dipy.data.fetch_gold_standard_io": {
     "line number": [
      18
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      20,
      22,
      25
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.json": {
     "line number": [
      23,
      26
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.os": {
     "line number": [
      20
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      15
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      659
     ]
    },
    "open": {
     "line number": [
      22,
      25
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.io.tests.test_stateful_tractogram.InTemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.InTemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.Origin": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Origin"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.bounding_bbox_valid": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": {
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      435
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      435,
      435
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.dpy_equal_in_rasmm_space": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      94
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      93
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      93,
      93,
      95
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      95
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.dpy_equal_in_vox_space": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      59
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      58
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      58,
      58,
      60
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      60
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.dpy_equal_in_voxmm_space": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOXMM": {
     "line number": [
      129
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      128
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      128,
      128,
      130
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      130
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.dpy_iterative_saving_loading": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      284,
      291
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      283,
      290
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      286,
      295
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      283,
      283,
      287,
      290
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      285
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      287
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      292
     ]
    },
    "range": {
     "line number": [
      289
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.empty_remove_invalid": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      336
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      336
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      336
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      338
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.empty_shift_change": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      329
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      329
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      329
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.empty_space_change": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      321
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      321
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      321
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.fetch_gold_standard_io": {
  "data": {
   "shadows": "dipy.data.fetch_gold_standard_io"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.fib_equal_in_rasmm_space": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      86
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      85
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      85,
      85,
      87
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.pytest": {
     "line number": [
      81
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      87
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.fib_equal_in_vox_space": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      51
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      50
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      50,
      50,
      52
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.pytest": {
     "line number": [
      46
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      52
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.fib_equal_in_voxmm_space": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOXMM": {
     "line number": [
      121
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      120
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      120,
      120,
      122
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.pytest": {
     "line number": [
      116
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      122
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.fib_iterative_saving_loading": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      268,
      275
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      267,
      274
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      270,
      279
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      267,
      267,
      271,
      274
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.pytest": {
     "line number": [
      263
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      269
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      271
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      276
     ]
    },
    "range": {
     "line number": [
      273
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "dipy.io.tests.test_stateful_tractogram.iterative_shift_corner": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      373
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      372
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      372,
      372
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      379
     ]
    },
    "range": {
     "line number": [
      376
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.iterative_to_vox_transformation": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      300
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      299
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      299,
      299,
      301
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      301
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      305
     ]
    },
    "range": {
     "line number": [
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.iterative_to_voxmm_transformation": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      311
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      310
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      310,
      310,
      312
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      312
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      316
     ]
    },
    "range": {
     "line number": [
      313
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.out_of_grid": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      523,
      534
     ]
    },
    "ValueError": {
     "line number": [
      523,
      534
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      515,
      526
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      515,
      515,
      526,
      526
     ]
    },
    "list": {
     "line number": [
      517,
      528
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.points_data": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "dipy.io.tests.test_stateful_tractogram.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.random_point_color": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      463
     ]
    },
    "ValueError": {
     "line number": [
      463
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      452
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      461
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      452,
      452
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      460
     ]
    },
    "numpy.random.randint": {
     "line number": [
      454
     ]
    },
    "numpy.random.seed": {
     "line number": [
      451
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.random_point_gray": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      482
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      469
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      480
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      469,
      469
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      479
     ]
    },
    "numpy.random.randint": {
     "line number": [
      471
     ]
    },
    "numpy.random.seed": {
     "line number": [
      468
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.random_streamline_color": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      510
     ]
    },
    "ValueError": {
     "line number": [
      510
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      488
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      508
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      488,
      488
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      507
     ]
    },
    "numpy.expand_dims": {
     "line number": [
      493,
      495,
      497
     ]
    },
    "numpy.random.randint": {
     "line number": [
      490,
      491,
      492
     ]
    },
    "numpy.random.seed": {
     "line number": [
      487
     ]
    },
    "numpy.repeat": {
     "line number": [
      494,
      496,
      498
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.reassign_both_data_sep": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      428
     ]
    },
    "ValueError": {
     "line number": [
      428
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      423
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      422
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      422,
      422
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.points_data": {
     "line number": [
      426
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.streamlines_data": {
     "line number": [
      427
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.reassign_both_data_sep_to_empty": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      414
     ]
    },
    "ValueError": {
     "line number": [
      414
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      409
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      408
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      408,
      408
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.remove_invalid_streamlines": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      442
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      442,
      442
     ]
    },
    "len": {
     "line number": [
      447
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.replace_streamlines": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      391
     ]
    },
    "ValueError": {
     "line number": [
      391
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      385
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      384
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      384,
      384
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.save_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.save_tractogram"
  },
  "type": "import"
 },
 "dipy.io.tests.test_stateful_tractogram.shift_corner_from_rasmm": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      348
     ]
    },
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      343
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      342,
      347
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      342,
      342,
      347,
      347
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.shift_corner_from_voxmm": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      358
     ]
    },
    "dipy.io.stateful_tractogram.Space.VOXMM": {
     "line number": [
      363
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      357,
      362
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      357,
      357,
      362,
      362
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      368
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.streamlines_data": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "dipy.io.tests.test_stateful_tractogram.subsample_streamlines": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      403
     ]
    },
    "ValueError": {
     "line number": [
      403
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      397
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      396
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      396,
      396
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.switch_voxel_sizes_from_rasmm": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      137,
      140
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      138
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      136
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      136,
      136,
      139,
      141,
      142
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      141,
      142
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      145,
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.switch_voxel_sizes_from_voxmm": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOXMM": {
     "line number": [
      155,
      158
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      156
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      154
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      154,
      154,
      157,
      159,
      160
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      159,
      160
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      163,
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.tck_equal_in_rasmm_space": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      75
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      74
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      74,
      74,
      76
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      76
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.tck_equal_in_vox_space": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      40
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      39
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      39,
      39,
      41
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      41
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.tck_equal_in_voxmm_space": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOXMM": {
     "line number": [
      110
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      109
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      109,
      109,
      111
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      111
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.tck_iterative_saving_loading": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      249,
      256
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      248,
      255
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      251,
      260
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      248,
      248,
      252,
      255
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      250
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      252
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      257
     ]
    },
    "range": {
     "line number": [
      254
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_bounding_box": {
  "data": {
   "lineno": 611,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Origin.NIFTI": {
     "line number": [
      612
     ]
    },
    "dipy.io.stateful_tractogram.Origin.TRACKVIS": {
     "line number": [
      614
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.bounding_bbox_valid": {
     "line number": [
      612,
      614
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.out_of_grid": {
     "line number": [
      616,
      618
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      612,
      614,
      616,
      618
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_create_from_sft": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      651,
      655
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram.from_sft": {
     "line number": [
      640
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      639
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      639,
      639
     ]
    },
    "numpy.arange": {
     "line number": [
      653
     ]
    },
    "numpy.array_equal": {
     "line number": [
      645,
      654
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_empty_sft": {
  "data": {
   "lineno": 587,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.empty_remove_invalid": {
     "line number": [
      590
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.empty_shift_change": {
     "line number": [
      589
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.empty_space_change": {
     "line number": [
      588
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_equal_in_rasmm_space": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.dpy_equal_in_rasmm_space": {
     "line number": [
      561
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.fib_equal_in_rasmm_space": {
     "line number": [
      560
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.tck_equal_in_rasmm_space": {
     "line number": [
      559
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.trk_equal_in_rasmm_space": {
     "line number": [
      558
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_equal_in_vox_space": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.dpy_equal_in_vox_space": {
     "line number": [
      554
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.fib_equal_in_vox_space": {
     "line number": [
      553
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.tck_equal_in_vox_space": {
     "line number": [
      552
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.trk_equal_in_vox_space": {
     "line number": [
      551
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_equal_in_voxmm_space": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.dpy_equal_in_voxmm_space": {
     "line number": [
      568
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.fib_equal_in_voxmm_space": {
     "line number": [
      567
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.tck_equal_in_voxmm_space": {
     "line number": [
      566
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.trk_equal_in_voxmm_space": {
     "line number": [
      565
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_invalid_streamlines": {
  "data": {
   "lineno": 622,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.remove_invalid_streamlines": {
     "line number": [
      623,
      625
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      623,
      625
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_iterative_saving_loading": {
  "data": {
   "lineno": 543,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.dpy_iterative_saving_loading": {
     "line number": [
      547
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.fib_iterative_saving_loading": {
     "line number": [
      546
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.tck_iterative_saving_loading": {
     "line number": [
      545
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.trk_iterative_saving_loading": {
     "line number": [
      544
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_iterative_transformation": {
  "data": {
   "lineno": 538,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.iterative_to_vox_transformation": {
     "line number": [
      539
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.iterative_to_voxmm_transformation": {
     "line number": [
      540
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_replace_streamlines": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.reassign_both_data_sep": {
     "line number": [
      605
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.reassign_both_data_sep_to_empty": {
     "line number": [
      607
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.replace_streamlines": {
     "line number": [
      603
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.subsample_streamlines": {
     "line number": [
      601
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      601,
      603,
      605,
      607
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_shifting_corner": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.iterative_shift_corner": {
     "line number": [
      596
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.shift_corner_from_rasmm": {
     "line number": [
      594
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.shift_corner_from_voxmm": {
     "line number": [
      595
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_switch_reference": {
  "data": {
   "lineno": 571,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.switch_voxel_sizes_from_rasmm": {
     "line number": [
      572
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.switch_voxel_sizes_from_voxmm": {
     "line number": [
      573
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_to_origin": {
  "data": {
   "lineno": 582,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.to_center_equivalence": {
     "line number": [
      583
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.to_corner_equivalence": {
     "line number": [
      584
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_to_space": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.to_rasmm_equivalence": {
     "line number": [
      577
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.to_vox_equivalence": {
     "line number": [
      579
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.to_voxmm_equivalence": {
     "line number": [
      578
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.test_trk_coloring": {
  "data": {
   "lineno": 629,
   "symbols_in_volume": {
    "dipy.io.tests.test_stateful_tractogram.random_point_color": {
     "line number": [
      634
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.random_point_gray": {
     "line number": [
      632
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.random_streamline_color": {
     "line number": [
      630
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      630,
      632,
      634
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.to_center_equivalence": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Origin.NIFTI": {
     "line number": [
      226
     ]
    },
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      221,
      223
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      220,
      222
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      220,
      220,
      222,
      222
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      227
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.to_corner_equivalence": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Origin.TRACKVIS": {
     "line number": [
      214
     ]
    },
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      209,
      211
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      208,
      210
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      208,
      208,
      210,
      210
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.to_rasmm_equivalence": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      178
     ]
    },
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      173,
      175
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      172,
      174
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      172,
      172,
      174,
      174
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.to_vox_equivalence": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      197,
      199
     ]
    },
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      202
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      196,
      198
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      196,
      196,
      198,
      198
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.to_voxmm_equivalence": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      185,
      187
     ]
    },
    "dipy.io.stateful_tractogram.Space.VOXMM": {
     "line number": [
      190
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      184,
      186
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      184,
      184,
      186,
      186
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.trk_equal_in_rasmm_space": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      67
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      66
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      66,
      66,
      68
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      68
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.trk_equal_in_vox_space": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOX": {
     "line number": [
      32
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      31
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      31,
      31,
      33
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      33
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.trk_equal_in_voxmm_space": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.VOXMM": {
     "line number": [
      102
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      101
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      101,
      101,
      103
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      103
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_stateful_tractogram.trk_iterative_saving_loading": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      233,
      240
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      232,
      239
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      235,
      244
     ]
    },
    "dipy.io.tests.test_stateful_tractogram.filepath_dix": {
     "line number": [
      232,
      232,
      236,
      239
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      234
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      236
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      241
     ]
    },
    "range": {
     "line number": [
      238
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_streamline": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      260
     ]
    },
    "dict": {
     "line number": [
      26,
      29
     ]
    },
    "dipy.data.fetch_gold_standard_io": {
     "line number": [
      21
     ]
    },
    "dipy.io.tests.test_streamline.filepath_dix": {
     "line number": [
      23,
      25,
      28
     ]
    },
    "dipy.io.tests.test_streamline.json": {
     "line number": [
      26,
      29
     ]
    },
    "dipy.io.tests.test_streamline.os": {
     "line number": [
      23
     ]
    },
    "dipy.io.tests.test_streamline.streamline": {
     "line number": [
      151,
      151,
      152,
      152,
      153,
      153
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      151
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      18
     ]
    },
    "numpy.array": {
     "line number": [
      31
     ]
    },
    "numpy.float32": {
     "line number": [
      149
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      261
     ]
    },
    "open": {
     "line number": [
      25,
      28
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.io.tests.test_streamline.InTemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.InTemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.create_nifti_header": {
  "data": {
   "shadows": "dipy.io.utils.create_nifti_header"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.fetch_gold_standard_io": {
  "data": {
   "shadows": "dipy.data.fetch_gold_standard_io"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.filepath_dix": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "dipy.io.tests.test_streamline.io_tractogram": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      165
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      165
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      174
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      167
     ]
    },
    "dipy.io.tests.test_streamline.streamline": {
     "line number": [
      181
     ]
    },
    "dipy.io.tests.test_streamline.streamlines": {
     "line number": [
      165,
      180
     ]
    },
    "dipy.io.utils.create_nifti_header": {
     "line number": [
      163
     ]
    },
    "len": {
     "line number": [
      180,
      180
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      157
     ]
    },
    "numpy.array": {
     "line number": [
      161,
      162
     ]
    },
    "numpy.eye": {
     "line number": [
      160
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      181
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      177,
      178,
      179
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_streamline.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.load_trk": {
  "data": {
   "shadows": "dipy.io.streamline.load_trk"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.load_vtk_streamlines": {
  "data": {
   "shadows": "dipy.io.vtk.load_vtk_streamlines"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.points_data": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "dipy.io.tests.test_streamline.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.save_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.save_tractogram"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.save_trk": {
  "data": {
   "shadows": "dipy.io.streamline.save_trk"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.save_vtk_streamlines": {
  "data": {
   "shadows": "dipy.io.vtk.save_vtk_streamlines"
  },
  "type": "import"
 },
 "dipy.io.tests.test_streamline.streamline": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "dipy.io.tests.test_streamline.streamlines": {
  "data": {
   "lineno": 151
  },
  "type": "constant"
 },
 "dipy.io.tests.test_streamline.streamlines_data": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "dipy.io.tests.test_streamline.test_io_dpy": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "dipy.io.tests.test_streamline.io_tractogram": {
     "line number": [
      199
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_streamline.test_io_tck": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "dipy.io.tests.test_streamline.io_tractogram": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_streamline.test_io_trk": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "dipy.io.tests.test_streamline.io_tractogram": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_streamline.test_io_trk_load": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "dipy.io.tests.test_streamline.filepath_dix": {
     "line number": [
      235,
      239,
      241,
      243
     ]
    },
    "dipy.io.tests.test_streamline.trk_loader": {
     "line number": [
      235,
      237,
      239,
      241,
      243
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      235,
      237,
      239,
      241,
      243
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_streamline.test_io_trk_save": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "dipy.io.tests.test_streamline.filepath_dix": {
     "line number": [
      248,
      252,
      254,
      256
     ]
    },
    "dipy.io.tests.test_streamline.trk_saver": {
     "line number": [
      248,
      250,
      252,
      254,
      256
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      248,
      250,
      252,
      254,
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_streamline.test_io_vtk": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": {
    "dipy.io.tests.test_streamline.io_tractogram": {
     "line number": [
      195
     ]
    },
    "dipy.io.tests.test_streamline.pytest": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_streamline.test_low_io_vtk": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "dipy.io.tests.test_streamline.pytest": {
     "line number": [
      202
     ]
    },
    "dipy.io.tests.test_streamline.streamline": {
     "line number": [
      211
     ]
    },
    "dipy.io.tests.test_streamline.streamlines": {
     "line number": [
      208,
      210
     ]
    },
    "dipy.io.vtk.load_vtk_streamlines": {
     "line number": [
      209
     ]
    },
    "dipy.io.vtk.save_vtk_streamlines": {
     "line number": [
      208
     ]
    },
    "len": {
     "line number": [
      210,
      210
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      204
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      211
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      210
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_streamline.trk_loader": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      219
     ]
    },
    "dipy.io.streamline.load_trk": {
     "line number": [
      217
     ]
    },
    "dipy.io.tests.test_streamline.filepath_dix": {
     "line number": [
      217
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_streamline.trk_saver": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      230
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      224
     ]
    },
    "dipy.io.streamline.save_trk": {
     "line number": [
      228
     ]
    },
    "dipy.io.tests.test_streamline.filepath_dix": {
     "line number": [
      224,
      224
     ]
    },
    "nibabel.tmpdirs.InTemporaryDirectory": {
     "line number": [
      227
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_utils": {
  "data": {
   "symbols_in_volume": {
    "dipy.data.fetch_gold_standard_io": {
     "line number": [
      13
     ]
    },
    "dipy.io.tests.test_utils.filepath_dix": {
     "line number": [
      15
     ]
    },
    "dipy.io.tests.test_utils.os": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.io.tests.test_utils.Nifti1Image": {
  "data": {
   "shadows": "nibabel.Nifti1Image"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.create_nifti_header": {
  "data": {
   "shadows": "dipy.io.utils.create_nifti_header"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.decfa": {
  "data": {
   "shadows": "dipy.io.utils.decfa"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.decfa_to_float": {
  "data": {
   "shadows": "dipy.io.utils.decfa_to_float"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.fetch_gold_standard_io": {
  "data": {
   "shadows": "dipy.data.fetch_gold_standard_io"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.filepath_dix": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "dipy.io.tests.test_utils.get_reference_info": {
  "data": {
   "shadows": "dipy.io.utils.get_reference_info"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.is_affine_valid": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "dipy.io.utils.is_reference_info_valid": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_utils.is_dimensions_valid": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "dipy.io.utils.is_reference_info_valid": {
     "line number": [
      61
     ]
    },
    "numpy.eye": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_utils.is_reference_info_valid": {
  "data": {
   "shadows": "dipy.io.utils.is_reference_info_valid"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.is_voxel_order_valid": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "dipy.io.utils.is_reference_info_valid": {
     "line number": [
      71
     ]
    },
    "numpy.eye": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_utils.is_voxel_sizes_valid": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "dipy.io.utils.is_reference_info_valid": {
     "line number": [
      66
     ]
    },
    "numpy.eye": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.io.tests.test_utils.reference_info_zero_affine": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      118
     ]
    },
    "dipy.io.utils.create_nifti_header": {
     "line number": [
      114
     ]
    },
    "dipy.io.utils.get_reference_info": {
     "line number": [
      116
     ]
    },
    "numpy.zeros": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_utils.test_all_zeros_affine": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "dipy.io.tests.test_utils.reference_info_zero_affine": {
     "line number": [
      135
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_utils.test_decfa": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "dipy.io.utils.decfa": {
     "line number": [
      22,
      39
     ]
    },
    "dipy.io.utils.decfa_to_float": {
     "line number": [
      32,
      49
     ]
    },
    "nibabel.Nifti1Image": {
     "line number": [
      21,
      38
     ]
    },
    "numpy.all": {
     "line number": [
      34,
      52
     ]
    },
    "numpy.array": {
     "line number": [
      20,
      24,
      37,
      41,
      52
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      23,
      33,
      40,
      50
     ]
    },
    "numpy.dtype": {
     "line number": [
      25,
      28,
      42,
      45
     ]
    },
    "numpy.eye": {
     "line number": [
      21,
      38
     ]
    },
    "numpy.zeros": {
     "line number": [
      19,
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_utils.test_reference_info_identical": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "dipy.io.tests.test_utils.filepath_dix": {
     "line number": [
      123,
      124
     ]
    },
    "dipy.io.utils.get_reference_info": {
     "line number": [
      123,
      124
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      128,
      130
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.tests.test_utils.test_reference_info_validity": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "dipy.io.tests.test_utils.is_affine_valid": {
     "line number": [
      76,
      78,
      80
     ]
    },
    "dipy.io.tests.test_utils.is_dimensions_valid": {
     "line number": [
      83,
      85,
      87,
      89
     ]
    },
    "dipy.io.tests.test_utils.is_voxel_order_valid": {
     "line number": [
      99,
      101,
      103,
      105,
      107,
      109
     ]
    },
    "dipy.io.tests.test_utils.is_voxel_sizes_valid": {
     "line number": [
      92,
      94,
      96
     ]
    },
    "numpy.eye": {
     "line number": [
      76,
      80
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      76,
      78,
      80,
      83,
      85,
      87,
      89,
      92,
      94,
      96,
      99,
      101,
      103,
      105,
      107,
      109
     ]
    },
    "numpy.zeros": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.utils": {
  "data": {},
  "type": "module"
 },
 "dipy.io.utils.Nifti1Image": {
  "data": {
   "shadows": "nibabel.Nifti1Image"
  },
  "type": "import"
 },
 "dipy.io.utils.create_nifti_header": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": {
    "nibabel.Nifti1Header": {
     "line number": [
      360
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.utils.create_tractogram_header": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      346
     ]
    },
    "nibabel.streamlines.Field.DIMENSIONS": {
     "line number": [
      351
     ]
    },
    "nibabel.streamlines.Field.VOXEL_ORDER": {
     "line number": [
      353
     ]
    },
    "nibabel.streamlines.Field.VOXEL_SIZES": {
     "line number": [
      350
     ]
    },
    "nibabel.streamlines.Field.VOXEL_TO_RASMM": {
     "line number": [
      352
     ]
    },
    "nibabel.streamlines.detect_format": {
     "line number": [
      347
     ]
    },
    "str": {
     "line number": [
      346
     ]
    },
    "tuple": {
     "line number": [
      350,
      351
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.utils.decfa": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "nibabel.Nifti1Image": {
     "line number": [
      98
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      84
     ]
    },
    "numpy.dtype": {
     "line number": [
      81
     ]
    },
    "numpy.ndindex": {
     "line number": [
      89
     ]
    },
    "numpy.zeros": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.utils.decfa_to_float": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "nibabel.Nifti1Image": {
     "line number": [
      137
     ]
    },
    "numpy.array": {
     "line number": [
      128
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      123
     ]
    },
    "numpy.float": {
     "line number": [
      135
     ]
    },
    "numpy.ndindex": {
     "line number": [
      126
     ]
    },
    "numpy.uint8": {
     "line number": [
      124
     ]
    },
    "numpy.zeros": {
     "line number": [
      124
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.utils.detect_format": {
  "data": {
   "shadows": "nibabel.streamlines.detect_format"
  },
  "type": "import"
 },
 "dipy.io.utils.dipy": {
  "data": {
   "shadows": "dipy"
  },
  "type": "import"
 },
 "dipy.io.utils.get_reference_info": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      289
     ]
    },
    "ValueError": {
     "line number": [
      252,
      278
     ]
    },
    "dict": {
     "line number": [
      263
     ]
    },
    "dipy.io.utils.dipy": {
     "line number": [
      266
     ]
    },
    "dipy.io.utils.is_reference_info_valid": {
     "line number": [
      295
     ]
    },
    "dipy.io.utils.os": {
     "line number": [
      249
     ]
    },
    "isinstance": {
     "line number": [
      241,
      254,
      257,
      260,
      263,
      266,
      291
     ]
    },
    "nibabel.aff2axcodes": {
     "line number": [
      280
     ]
    },
    "nibabel.filebasedimages.ImageFileError": {
     "line number": [
      245
     ]
    },
    "nibabel.load": {
     "line number": [
      243
     ]
    },
    "nibabel.nifti1.Nifti1Header": {
     "line number": [
      260
     ]
    },
    "nibabel.nifti1.Nifti1Image": {
     "line number": [
      254
     ]
    },
    "nibabel.streamlines.load": {
     "line number": [
      248
     ]
    },
    "nibabel.streamlines.trk.TrkFile": {
     "line number": [
      257
     ]
    },
    "numpy.bytes_": {
     "line number": [
      291
     ]
    },
    "numpy.eye": {
     "line number": [
      270
     ]
    },
    "numpy.float32": {
     "line number": [
      270
     ]
    },
    "str": {
     "line number": [
      241
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.utils.is_header_compatible": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "dipy.io.utils.get_reference_info": {
     "line number": [
      318,
      320
     ]
    },
    "dipy.io.utils.logging": {
     "line number": [
      325,
      329,
      333,
      337
     ]
    },
    "numpy.allclose": {
     "line number": [
      324,
      332
     ]
    },
    "numpy.array_equal": {
     "line number": [
      328
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.utils.is_reference_info_valid": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "dipy.io.utils.logging": {
     "line number": [
      174,
      178,
      187,
      190,
      198,
      201,
      209,
      212,
      215
     ]
    },
    "dipy.io.utils.numbers": {
     "line number": [
      185,
      196
     ]
    },
    "isinstance": {
     "line number": [
      185,
      196,
      207
     ]
    },
    "len": {
     "line number": [
      180,
      192,
      203
     ]
    },
    "str": {
     "line number": [
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.utils.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.io.utils.make5d": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      48
     ]
    },
    "input": {
     "line number": [
      46,
      46
     ]
    },
    "input.ndim": {
     "line number": [
      47
     ]
    },
    "input.reshape": {
     "line number": [
      51
     ]
    },
    "input.shape": {
     "line number": [
      49
     ]
    },
    "len": {
     "line number": [
      50
     ]
    },
    "numpy.asarray": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.utils.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.io.utils.nifti1_symmat": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      34
     ]
    },
    "dipy.io.utils.make5d": {
     "line number": [
      30
     ]
    },
    "nibabel.Nifti1Image": {
     "line number": [
      36
     ]
    },
    "numpy.sqrt": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.utils.numbers": {
  "data": {
   "shadows": "numbers"
  },
  "type": "import"
 },
 "dipy.io.utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.io.vtk": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      8
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.io.vtk.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.io.vtk.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.io.vtk.load_polydata": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      44
     ]
    },
    "dipy.viz.vtk.vtkMNIObjectReader": {
     "line number": [
      45
     ]
    },
    "dipy.viz.vtk.vtkOBJReader": {
     "line number": [
      43
     ]
    },
    "dipy.viz.vtk.vtkPLYReader": {
     "line number": [
      36
     ]
    },
    "dipy.viz.vtk.vtkPolyDataReader": {
     "line number": [
      32,
      34
     ]
    },
    "dipy.viz.vtk.vtkSTLReader": {
     "line number": [
      38
     ]
    },
    "dipy.viz.vtk.vtkXMLPolyDataReader": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.vtk.load_vtk_streamlines": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      201
     ]
    },
    "dipy.viz.vtk.vtkPolyDataReader": {
     "line number": [
      179
     ]
    },
    "len": {
     "line number": [
      189
     ]
    },
    "numpy.eye": {
     "line number": [
      198
     ]
    },
    "vtk.util.numpy_support.vtk_to_numpy": {
     "line number": [
      184,
      185
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.vtk.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.io.vtk.ns": {
  "data": {
   "shadows": "vtk.util.numpy_support"
  },
  "type": "import"
 },
 "dipy.io.vtk.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.io.vtk.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.io.vtk.save_polydata": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      80
     ]
    },
    "dipy.viz.utils.set_input": {
     "line number": [
      84
     ]
    },
    "dipy.viz.vtk.vtkPLYWriter": {
     "line number": [
      74
     ]
    },
    "dipy.viz.vtk.vtkPolyDataWriter": {
     "line number": [
      70,
      72
     ]
    },
    "dipy.viz.vtk.vtkSTLWriter": {
     "line number": [
      76
     ]
    },
    "dipy.viz.vtk.vtkXMLPolyDataWriter": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.vtk.save_vtk_streamlines": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      117
     ]
    },
    "dipy.viz.utils.set_input": {
     "line number": [
      152
     ]
    },
    "dipy.viz.vtk.vtkCellArray": {
     "line number": [
      140
     ]
    },
    "dipy.viz.vtk.vtkPoints": {
     "line number": [
      135
     ]
    },
    "dipy.viz.vtk.vtkPolyData": {
     "line number": [
      146
     ]
    },
    "dipy.viz.vtk.vtkPolyDataWriter": {
     "line number": [
      150
     ]
    },
    "len": {
     "line number": [
      120,
      127
     ]
    },
    "numpy.array": {
     "line number": [
      142
     ]
    },
    "numpy.eye": {
     "line number": [
      114
     ]
    },
    "numpy.float32": {
     "line number": [
      136
     ]
    },
    "numpy.vstack": {
     "line number": [
      121
     ]
    },
    "range": {
     "line number": [
      126,
      131
     ]
    },
    "vtk.util.numpy_support.numpy_to_vtk": {
     "line number": [
      136,
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.io.vtk.transform_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.transform_streamlines"
  },
  "type": "import"
 },
 "dipy.io.vtk.utils": {
  "data": {
   "shadows": "dipy.viz.utils"
  },
  "type": "import"
 },
 "dipy.io.vtk.vtk": {
  "data": {
   "shadows": "dipy.viz.vtk"
  },
  "type": "import"
 },
 "dipy.nn": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.Tester": {
     "line number": [
      5,
      6,
      8
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.nn.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.nn.bench": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "dipy.nn.model": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      9
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      5
     ]
    },
    "distutils.version.LooseVersion": {
     "line number": [
      8,
      8
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.nn.model.LooseVersion": {
  "data": {
   "shadows": "distutils.version.LooseVersion"
  },
  "type": "import"
 },
 "dipy.nn.model.SingleLayerPerceptron": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "object": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.nn.model.SingleLayerPerceptron.__init__": {
  "data": {
   "lineno": 14
  },
  "type": "function"
 },
 "dipy.nn.model.SingleLayerPerceptron.evaluate": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "dipy.nn.model.SingleLayerPerceptron.fit": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "dipy.nn.model.SingleLayerPerceptron.predict": {
  "data": {
   "lineno": 67
  },
  "type": "function"
 },
 "dipy.nn.model.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.nn.test": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "dipy.nn.tests": {
  "data": {},
  "type": "module"
 },
 "dipy.nn.tests.test_tf": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      11
     ]
    },
    "__name__": {
     "line number": [
      64
     ]
    },
    "dipy.nn.tests.test_tf.test_default_mnist_sequential": {
     "line number": [
      65
     ]
    },
    "dipy.nn.tests.test_tf.test_default_mnist_slp": {
     "line number": [
      66
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      7
     ]
    },
    "distutils.version.LooseVersion": {
     "line number": [
      10,
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.nn.tests.test_tf.LooseVersion": {
  "data": {
   "shadows": "distutils.version.LooseVersion"
  },
  "type": "import"
 },
 "dipy.nn.tests.test_tf.SingleLayerPerceptron": {
  "data": {
   "shadows": "dipy.nn.model.SingleLayerPerceptron"
  },
  "type": "import"
 },
 "dipy.nn.tests.test_tf.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.nn.tests.test_tf.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.nn.tests.test_tf.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.nn.tests.test_tf.test_default_mnist_sequential": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "dipy.nn.tests.test_tf.pytest": {
     "line number": [
      16
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.nn.tests.test_tf.test_default_mnist_slp": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "dipy.nn.model.SingleLayerPerceptron": {
     "line number": [
      52
     ]
    },
    "dipy.nn.tests.test_tf.pytest": {
     "line number": [
      43
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      58,
      59,
      60,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.pkg_info": {
  "data": {},
  "type": "module"
 },
 "dipy.pkg_info.COMMIT_INFO_FNAME": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "dipy.pkg_info.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.pkg_info.configparser": {
  "data": {
   "shadows": "configparser"
  },
  "type": "import"
 },
 "dipy.pkg_info.dipy": {
  "data": {
   "shadows": "dipy"
  },
  "type": "import"
 },
 "dipy.pkg_info.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.pkg_info.get_pkg_info": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      82
     ]
    },
    "dipy.pkg_info.dipy": {
     "line number": [
      90
     ]
    },
    "dipy.pkg_info.numpy": {
     "line number": [
      89
     ]
    },
    "dipy.pkg_info.pkg_commit_hash": {
     "line number": [
      79
     ]
    },
    "dipy.pkg_info.sys": {
     "line number": [
      86,
      87,
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.pkg_info.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.pkg_info.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.pkg_info.pkg_commit_hash": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      46
     ]
    },
    "dipy.pkg_info.COMMIT_INFO_FNAME": {
     "line number": [
      44
     ]
    },
    "dipy.pkg_info.configparser": {
     "line number": [
      47
     ]
    },
    "dipy.pkg_info.os": {
     "line number": [
      44,
      45
     ]
    },
    "dipy.pkg_info.subprocess": {
     "line number": [
      56,
      57,
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.pkg_info.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.pkg_info.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "dipy.pkg_info.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.reconst": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.Tester": {
     "line number": [
      5,
      6,
      8
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.reconst.base": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.base.ReconstFit": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "object": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.base.ReconstFit.__init__": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "dipy.reconst.base.ReconstModel": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "object": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.base.ReconstModel.__init__": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "dipy.reconst.base.ReconstModel.fit": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstFit": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.bench": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "dipy.reconst.benchmarks": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.benchmarks.bench_bounding_box": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      32
     ]
    },
    "dipy.reconst.benchmarks.bench_bounding_box.bench_bounding_box": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.benchmarks.bench_bounding_box.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_bounding_box.bench_bounding_box": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "numpy.testing.measure": {
     "line number": [
      24,
      29
     ]
    },
    "numpy.zeros": {
     "line number": [
      20
     ]
    },
    "print": {
     "line number": [
      25,
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.benchmarks.bench_bounding_box.bounding_box": {
  "data": {
   "shadows": "dipy.segment.mask.bounding_box"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_bounding_box.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_bounding_box.measure": {
  "data": {
   "shadows": "numpy.testing.measure"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_bounding_box.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_bounding_box.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_csd": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      55
     ]
    },
    "dipy.reconst.benchmarks.bench_csd.bench_csdeconv": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.benchmarks.bench_csd.ConstrainedSphericalDeconvModel": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_csd.GradientTable": {
  "data": {
   "shadows": "dipy.core.gradients.GradientTable"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_csd.bench_csdeconv": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "dipy.core.gradients.GradientTable": {
     "line number": [
      44
     ]
    },
    "dipy.data.read_stanford_labels": {
     "line number": [
      16
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      17,
      19
     ]
    },
    "dipy.reconst.benchmarks.bench_csd.num_grad": {
     "line number": [
      40,
      47,
      53
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      38,
      45,
      51
     ]
    },
    "numpy.in1d": {
     "line number": [
      21
     ]
    },
    "numpy.testing.measure": {
     "line number": [
      39,
      46,
      52
     ]
    },
    "print": {
     "line number": [
      33,
      40,
      47,
      53
     ]
    },
    "slice": {
     "line number": [
      26,
      26,
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.benchmarks.bench_csd.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_csd.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_csd.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_csd.num_grad": {
  "data": {
   "lineno": 11
  },
  "type": "function"
 },
 "dipy.reconst.benchmarks.bench_csd.read_stanford_labels": {
  "data": {
   "shadows": "dipy.data.read_stanford_labels"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_peaks": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.benchmarks.bench_peaks.bench_local_maxima": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "dipy.data.default_sphere.faces": {
     "line number": [
      23
     ]
    },
    "dipy.data.default_sphere.vertices": {
     "line number": [
      23
     ]
    },
    "len": {
     "line number": [
      28
     ]
    },
    "numpy.testing.measure": {
     "line number": [
      25,
      32
     ]
    },
    "numpy.zeros": {
     "line number": [
      28
     ]
    },
    "print": {
     "line number": [
      24,
      26,
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.benchmarks.bench_peaks.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_peaks.local_maxima": {
  "data": {
   "shadows": "dipy.reconst.recspeed.local_maxima"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_peaks.measure": {
  "data": {
   "shadows": "numpy.testing.measure"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_peaks.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_peaks.unique_edges": {
  "data": {
   "shadows": "dipy.core.sphere.unique_edges"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_squash": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.benchmarks.bench_squash.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_squash.bench_quick_squash": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "dipy.core.ndindex.ndindex": {
     "line number": [
      123
     ]
    },
    "float": {
     "line number": [
      128
     ]
    },
    "int": {
     "line number": [
      129
     ]
    },
    "numpy.float32": {
     "line number": [
      125,
      144
     ]
    },
    "numpy.ones": {
     "line number": [
      124
     ]
    },
    "numpy.testing.measure": {
     "line number": [
      134,
      135,
      138,
      139,
      141,
      142,
      145,
      146
     ]
    },
    "numpy.zeros": {
     "line number": [
      121,
      122,
      128,
      129
     ]
    },
    "object": {
     "line number": [
      121,
      122,
      128,
      129
     ]
    },
    "print": {
     "line number": [
      126,
      133,
      136,
      140,
      143,
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.benchmarks.bench_squash.dec": {
  "data": {
   "shadows": "numpy.testing.dec"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_squash.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_squash.measure": {
  "data": {
   "shadows": "numpy.testing.measure"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_squash.ndindex": {
  "data": {
   "shadows": "dipy.core.ndindex.ndindex"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_squash.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_squash.old_squash": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      82
     ]
    },
    "all": {
     "line number": [
      81,
      103
     ]
    },
    "dipy.core.ndindex.ndindex": {
     "line number": [
      95
     ]
    },
    "functools.reduce": {
     "line number": [
      91
     ]
    },
    "numpy.add": {
     "line number": [
      91
     ]
    },
    "numpy.asarray": {
     "line number": [
      110
     ]
    },
    "numpy.empty": {
     "line number": [
      93
     ]
    },
    "numpy.isscalar": {
     "line number": [
      101,
      103
     ]
    },
    "numpy.ndarray": {
     "line number": [
      77
     ]
    },
    "numpy.vectorize": {
     "line number": [
      70
     ]
    },
    "numpy.zeros": {
     "line number": [
      90
     ]
    },
    "set": {
     "line number": [
      89
     ]
    },
    "sum": {
     "line number": [
      110
     ]
    },
    "type": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.benchmarks.bench_squash.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_squash.quick_squash": {
  "data": {
   "shadows": "dipy.reconst.quick_squash.quick_squash"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_squash.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_vec_val_sum": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.benchmarks.bench_vec_val_sum.bench_vec_val_vect": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.testing.measure": {
     "line number": [
      22,
      24
     ]
    },
    "print": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.benchmarks.bench_vec_val_sum.measure": {
  "data": {
   "shadows": "numpy.testing.measure"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_vec_val_sum.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_vec_val_sum.randn": {
  "data": {
   "shadows": "numpy.random.randn"
  },
  "type": "import"
 },
 "dipy.reconst.benchmarks.bench_vec_val_sum.vec_val_vect": {
  "data": {
   "shadows": "dipy.reconst.vec_val_sum.vec_val_vect"
  },
  "type": "import"
 },
 "dipy.reconst.cache": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.cache.Cache": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.cache.Cache._cache": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "dipy.core.onetime.auto_attr": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.cache.Cache.cache_clear": {
  "data": {
   "lineno": 89
  },
  "type": "function"
 },
 "dipy.reconst.cache.Cache.cache_get": {
  "data": {
   "lineno": 68
  },
  "type": "function"
 },
 "dipy.reconst.cache.Cache.cache_set": {
  "data": {
   "lineno": 35
  },
  "type": "function"
 },
 "dipy.reconst.cache.auto_attr": {
  "data": {
   "shadows": "dipy.core.onetime.auto_attr"
  },
  "type": "import"
 },
 "dipy.reconst.cross_validation": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.cross_validation.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.reconst.cross_validation.coeff_of_determination": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      53
     ]
    },
    "numpy.mean": {
     "line number": [
      49
     ]
    },
    "numpy.nan": {
     "line number": [
      54
     ]
    },
    "numpy.newaxis": {
     "line number": [
      49
     ]
    },
    "numpy.sum": {
     "line number": [
      47,
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.cross_validation.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.reconst.cross_validation.gt": {
  "data": {
   "shadows": "dipy.core.gradients"
  },
  "type": "import"
 },
 "dipy.reconst.cross_validation.kfold_xval": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      112,
      147
     ]
    },
    "bool": {
     "line number": [
      128
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      126
     ]
    },
    "gtgt": {
     "line number": [
      133,
      137
     ]
    },
    "hasattr": {
     "line number": [
      143
     ]
    },
    "int": {
     "line number": [
      129,
      129
     ]
    },
    "numpy.concatenate": {
     "line number": [
      131,
      135,
      139
     ]
    },
    "numpy.hstack": {
     "line number": [
      133,
      137
     ]
    },
    "numpy.mean": {
     "line number": [
      115
     ]
    },
    "numpy.mod": {
     "line number": [
      106
     ]
    },
    "numpy.ones": {
     "line number": [
      128
     ]
    },
    "numpy.random.permutation": {
     "line number": [
      119
     ]
    },
    "numpy.sum": {
     "line number": [
      152
     ]
    },
    "numpy.where": {
     "line number": [
      150
     ]
    },
    "numpy.zeros": {
     "line number": [
      117
     ]
    },
    "range": {
     "line number": [
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.cross_validation.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.cross_validation.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.dki_micro.DiffusionKurtosisFit": {
  "data": {
   "shadows": "dipy.reconst.dki.DiffusionKurtosisFit"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.DiffusionKurtosisModel": {
  "data": {
   "shadows": "dipy.reconst.dki.DiffusionKurtosisModel"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructuralFit": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisFit": {
     "line number": [
      440
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.__init__": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisFit.__init__": {
     "line number": [
      474
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructuralFit._is_awfonly": {
  "data": {
   "lineno": 596,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      599
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.awf": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": {
    "property": {
     "line number": [
      476
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.axonal_diffusivity": {
  "data": {
   "lineno": 530,
   "symbols_in_volume": {
    "dipy.reconst.dti.trace": {
     "line number": [
      541
     ]
    },
    "property": {
     "line number": [
      530
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_ad": {
  "data": {
   "lineno": 543,
   "symbols_in_volume": {
    "dipy.reconst.dti.axial_diffusivity": {
     "line number": [
      558
     ]
    },
    "property": {
     "line number": [
      543
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_evals": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": {
    "dipy.reconst.dki_micro._compartments_eigenvalues": {
     "line number": [
      528
     ]
    },
    "property": {
     "line number": [
      512
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_rd": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": {
    "dipy.reconst.dti.radial_diffusivity": {
     "line number": [
      575
     ]
    },
    "property": {
     "line number": [
      560
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.predict": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": {
    "dipy.reconst.dki_micro.dkimicro_prediction": {
     "line number": [
      625
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.restricted_evals": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": {
    "dipy.reconst.dki_micro._compartments_eigenvalues": {
     "line number": [
      510
     ]
    },
    "property": {
     "line number": [
      494
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.tortuosity": {
  "data": {
   "lineno": 577,
   "symbols_in_volume": {
    "dipy.reconst.dki_micro.tortuosity": {
     "line number": [
      594
     ]
    },
    "property": {
     "line number": [
      577
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructureModel": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      303
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructureModel.__init__": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisModel.__init__": {
     "line number": [
      335
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructureModel.fit": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      369
     ]
    },
    "bool": {
     "line number": [
      370
     ]
    },
    "dipy.reconst.dki_micro.KurtosisMicrostructuralFit": {
     "line number": [
      402
     ]
    },
    "dipy.reconst.dki_micro.axonal_water_fraction": {
     "line number": [
      383
     ]
    },
    "dipy.reconst.dki_micro.diffusion_components": {
     "line number": [
      390
     ]
    },
    "dipy.reconst.dti.MIN_POSITIVE_SIGNAL": {
     "line number": [
      374
     ]
    },
    "numpy.array": {
     "line number": [
      370,
      386,
      392
     ]
    },
    "numpy.concatenate": {
     "line number": [
      386,
      392
     ]
    },
    "numpy.maximum": {
     "line number": [
      376
     ]
    },
    "numpy.reshape": {
     "line number": [
      371
     ]
    },
    "numpy.zeros": {
     "line number": [
      399
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.KurtosisMicrostructureModel.predict": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": {
    "dipy.reconst.dki_micro.dkimicro_prediction": {
     "line number": [
      437
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.MIN_POSITIVE_SIGNAL": {
  "data": {
   "shadows": "dipy.reconst.dti.MIN_POSITIVE_SIGNAL"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro._compartments_eigenvalues": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": {
    "dipy.reconst.dti.decompose_tensor": {
     "line number": [
      299
     ]
    },
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro._positive_evals": {
  "data": {
   "shadows": "dipy.reconst.dki._positive_evals"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.axial_diffusivity": {
  "data": {
   "shadows": "dipy.reconst.dti.axial_diffusivity"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.axonal_water_fraction": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "dipy.reconst.dki.kurtosis_maximum": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.decompose_tensor": {
  "data": {
   "shadows": "dipy.reconst.dti.decompose_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.diffusion_components": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      122,
      131
     ]
    },
    "bool": {
     "line number": [
      124
     ]
    },
    "dipy.core.ndindex.ndindex": {
     "line number": [
      152
     ]
    },
    "dipy.core.sphere.Sphere": {
     "line number": [
      114
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      115
     ]
    },
    "dipy.reconst.dki.directional_diffusion": {
     "line number": [
      157
     ]
    },
    "dipy.reconst.dki.directional_kurtosis": {
     "line number": [
      158
     ]
    },
    "dipy.reconst.dki.split_dki_param": {
     "line number": [
      148
     ]
    },
    "dipy.reconst.dki_micro.axonal_water_fraction": {
     "line number": [
      128
     ]
    },
    "dipy.reconst.dti.lower_triangular": {
     "line number": [
      149
     ]
    },
    "dipy.reconst.dti.mean_diffusivity": {
     "line number": [
      150
     ]
    },
    "dipy.reconst.vec_val_sum.vec_val_vect": {
     "line number": [
      149
     ]
    },
    "isinstance": {
     "line number": [
      114
     ]
    },
    "numpy.array": {
     "line number": [
      124
     ]
    },
    "numpy.dot": {
     "line number": [
      161,
      172
     ]
    },
    "numpy.linalg.pinv": {
     "line number": [
      145
     ]
    },
    "numpy.ones": {
     "line number": [
      119
     ]
    },
    "numpy.sqrt": {
     "line number": [
      160,
      170
     ]
    },
    "numpy.zeros": {
     "line number": [
      134,
      135,
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.directional_diffusion": {
  "data": {
   "shadows": "dipy.reconst.dki.directional_diffusion"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.directional_kurtosis": {
  "data": {
   "shadows": "dipy.reconst.dki.directional_kurtosis"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.dkimicro_prediction": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "dipy.core.ndindex.ndindex": {
     "line number": [
      238
     ]
    },
    "dipy.reconst.dki._positive_evals": {
     "line number": [
      225
     ]
    },
    "dipy.reconst.dti.design_matrix": {
     "line number": [
      223
     ]
    },
    "isinstance": {
     "line number": [
      232
     ]
    },
    "numpy.dot": {
     "line number": [
      241,
      242
     ]
    },
    "numpy.exp": {
     "line number": [
      241,
      242
     ]
    },
    "numpy.ndarray": {
     "line number": [
      232
     ]
    },
    "numpy.ones": {
     "line number": [
      233
     ]
    },
    "numpy.zeros": {
     "line number": [
      220
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.dps": {
  "data": {
   "shadows": "dipy.core.sphere"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.dti_design_matrix": {
  "data": {
   "shadows": "dipy.reconst.dti.design_matrix"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.from_lower_triangular": {
  "data": {
   "shadows": "dipy.reconst.dti.from_lower_triangular"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.kurtosis_maximum": {
  "data": {
   "shadows": "dipy.reconst.dki.kurtosis_maximum"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.lower_triangular": {
  "data": {
   "shadows": "dipy.reconst.dti.lower_triangular"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.mean_diffusivity": {
  "data": {
   "shadows": "dipy.reconst.dti.mean_diffusivity"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.ndindex": {
  "data": {
   "shadows": "dipy.core.ndindex.ndindex"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.radial_diffusivity": {
  "data": {
   "shadows": "dipy.reconst.dti.radial_diffusivity"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.split_dki_param": {
  "data": {
   "shadows": "dipy.reconst.dki.split_dki_param"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.tortuosity": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      262,
      264
     ]
    },
    "numpy.array": {
     "line number": [
      263,
      265
     ]
    },
    "numpy.ndarray": {
     "line number": [
      262,
      264
     ]
    },
    "numpy.zeros": {
     "line number": [
      267
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dki_micro.trace": {
  "data": {
   "shadows": "dipy.reconst.dti.trace"
  },
  "type": "import"
 },
 "dipy.reconst.dki_micro.vec_val_vect": {
  "data": {
   "shadows": "dipy.reconst.vec_val_sum.vec_val_vect"
  },
  "type": "import"
 },
 "dipy.reconst.dsi": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      660
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.dsi.Cache": {
  "data": {
   "shadows": "dipy.reconst.cache.Cache"
  },
  "type": "import"
 },
 "dipy.reconst.dsi.DiffusionSpectrumDeconvFit": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": {
    "dipy.reconst.dsi.DiffusionSpectrumFit": {
     "line number": [
      557
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.dsi.DiffusionSpectrumDeconvFit.pdf": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": {
    "dipy.reconst.dsi.LR_deconv": {
     "line number": [
      584
     ]
    },
    "dipy.reconst.dsi.gen_PSF": {
     "line number": [
      575
     ]
    },
    "dipy.reconst.dsi.threshold_propagator": {
     "line number": [
      582
     ]
    },
    "len": {
     "line number": [
      569
     ]
    },
    "numpy.abs": {
     "line number": [
      579
     ]
    },
    "numpy.real": {
     "line number": [
      579
     ]
    },
    "numpy.zeros": {
     "line number": [
      567
     ]
    },
    "range": {
     "line number": [
      569
     ]
    },
    "scipy.fftpack.fftn": {
     "line number": [
      579
     ]
    },
    "scipy.fftpack.fftshift": {
     "line number": [
      579
     ]
    },
    "scipy.fftpack.ifftshift": {
     "line number": [
      579
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.DiffusionSpectrumDeconvModel": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": {
    "dipy.reconst.dsi.DiffusionSpectrumModel": {
     "line number": [
      496
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.dsi.DiffusionSpectrumDeconvModel.__init__": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": {
    "dipy.reconst.dsi.DiffusionSpectrumModel": {
     "line number": [
      547
     ]
    },
    "numpy.inf": {
     "line number": [
      499
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.DiffusionSpectrumDeconvModel.fit": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": {
    "dipy.reconst.dsi.DiffusionSpectrumDeconvFit": {
     "line number": [
      554
     ]
    },
    "dipy.reconst.multi_voxel.multi_voxel_fit": {
     "line number": [
      552
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.DiffusionSpectrumFit": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "dipy.reconst.odf.OdfFit": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.dsi.DiffusionSpectrumFit.__init__": {
  "data": {
   "lineno": 135
  },
  "type": "function"
 },
 "dipy.reconst.dsi.DiffusionSpectrumFit.msd_discrete": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "float": {
     "line number": [
      280
     ]
    },
    "numpy.arange": {
     "line number": [
      274
     ]
    },
    "numpy.sum": {
     "line number": [
      280
     ]
    },
    "numpy.tile": {
     "line number": [
      275,
      276,
      277
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.DiffusionSpectrumFit.odf": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": {
    "dipy.reconst.dsi.pdf_interp_coords": {
     "line number": [
      298
     ]
    },
    "dipy.reconst.dsi.pdf_odf": {
     "line number": [
      306
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.DiffusionSpectrumFit.pdf": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "len": {
     "line number": [
      163
     ]
    },
    "numpy.clip": {
     "line number": [
      169
     ]
    },
    "numpy.real": {
     "line number": [
      167
     ]
    },
    "numpy.zeros": {
     "line number": [
      160
     ]
    },
    "range": {
     "line number": [
      163
     ]
    },
    "scipy.fftpack.fftn": {
     "line number": [
      167
     ]
    },
    "scipy.fftpack.fftshift": {
     "line number": [
      167
     ]
    },
    "scipy.fftpack.ifftshift": {
     "line number": [
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.DiffusionSpectrumFit.rtop_pdf": {
  "data": {
   "lineno": 201
  },
  "type": "function"
 },
 "dipy.reconst.dsi.DiffusionSpectrumFit.rtop_signal": {
  "data": {
   "lineno": 177
  },
  "type": "function"
 },
 "dipy.reconst.dsi.DiffusionSpectrumModel": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "dipy.reconst.cache.Cache": {
     "line number": [
      9
     ]
    },
    "dipy.reconst.odf.OdfModel": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.dsi.DiffusionSpectrumModel.__init__": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      112
     ]
    },
    "dipy.reconst.dsi.create_qspace": {
     "line number": [
      123
     ]
    },
    "dipy.reconst.dsi.hanning_filter": {
     "line number": [
      118
     ]
    },
    "len": {
     "line number": [
      121
     ]
    },
    "numpy.arange": {
     "line number": [
      120
     ]
    },
    "numpy.min": {
     "line number": [
      124
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.DiffusionSpectrumModel.fit": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "dipy.reconst.dsi.DiffusionSpectrumFit": {
     "line number": [
      130
     ]
    },
    "dipy.reconst.multi_voxel.multi_voxel_fit": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.LR_deconv": {
  "data": {
   "lineno": 612,
   "symbols_in_volume": {
    "numpy.clip": {
     "line number": [
      645,
      656
     ]
    },
    "numpy.fft.fftn": {
     "line number": [
      643,
      649,
      654
     ]
    },
    "numpy.fft.ifftn": {
     "line number": [
      649,
      653
     ]
    },
    "numpy.fft.ifftshift": {
     "line number": [
      643
     ]
    },
    "numpy.inf": {
     "line number": [
      645,
      656
     ]
    },
    "numpy.real": {
     "line number": [
      643,
      649,
      653
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      637
     ]
    },
    "range": {
     "line number": [
      647
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.OdfFit": {
  "data": {
   "shadows": "dipy.reconst.odf.OdfFit"
  },
  "type": "import"
 },
 "dipy.reconst.dsi.OdfModel": {
  "data": {
   "shadows": "dipy.reconst.odf.OdfModel"
  },
  "type": "import"
 },
 "dipy.reconst.dsi.create_qspace": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "dipy.reconst.dsi.create_qtable": {
     "line number": [
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.create_qtable": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "ZeroDivisionError": {
     "line number": [
      354
     ]
    },
    "len": {
     "line number": [
      347
     ]
    },
    "numpy.bitwise_not": {
     "line number": [
      346
     ]
    },
    "numpy.floor": {
     "line number": [
      359
     ]
    },
    "numpy.sort": {
     "line number": [
      346
     ]
    },
    "numpy.sqrt": {
     "line number": [
      350,
      357
     ]
    },
    "numpy.vstack": {
     "line number": [
      358
     ]
    },
    "range": {
     "line number": [
      347
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.fftn": {
  "data": {
   "shadows": "scipy.fftpack.fftn"
  },
  "type": "import"
 },
 "dipy.reconst.dsi.fftshift": {
  "data": {
   "shadows": "scipy.fftpack.fftshift"
  },
  "type": "import"
 },
 "dipy.reconst.dsi.gen_PSF": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": {
    "numpy.fft.fftshift": {
     "line number": [
      609
     ]
    },
    "numpy.fft.ifftn": {
     "line number": [
      609
     ]
    },
    "numpy.fft.ifftshift": {
     "line number": [
      609
     ]
    },
    "numpy.real": {
     "line number": [
      609
     ]
    },
    "numpy.zeros": {
     "line number": [
      604
     ]
    },
    "range": {
     "line number": [
      606
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.half_to_full_qspace": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": {
    "numpy.append": {
     "line number": [
      452,
      453,
      454
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.hanning_filter": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": {
    "dipy.reconst.dsi.create_qtable": {
     "line number": [
      382
     ]
    },
    "numpy.cos": {
     "line number": [
      386
     ]
    },
    "numpy.pi": {
     "line number": [
      386
     ]
    },
    "numpy.sqrt": {
     "line number": [
      384
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.ifftshift": {
  "data": {
   "shadows": "scipy.fftpack.ifftshift"
  },
  "type": "import"
 },
 "dipy.reconst.dsi.map_coordinates": {
  "data": {
   "shadows": "scipy.ndimage.map_coordinates"
  },
  "type": "import"
 },
 "dipy.reconst.dsi.multi_voxel_fit": {
  "data": {
   "shadows": "dipy.reconst.multi_voxel.multi_voxel_fit"
  },
  "type": "import"
 },
 "dipy.reconst.dsi.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.dsi.pdf_interp_coords": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": {
    "numpy.newaxis.T": {
     "line number": [
      402
     ]
    },
    "numpy.reshape": {
     "line number": [
      403
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.pdf_odf": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": {
    "scipy.ndimage.map_coordinates": {
     "line number": [
      420
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.project_hemisph_bvecs": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      479,
      480
     ]
    },
    "len": {
     "line number": [
      477,
      477
     ]
    },
    "numpy.argsort": {
     "line number": [
      482
     ]
    },
    "numpy.sqrt": {
     "line number": [
      481
     ]
    },
    "numpy.sum": {
     "line number": [
      481
     ]
    },
    "numpy.zeros": {
     "line number": [
      477
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.dsi.threshold_propagator": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": {
    "float": {
     "line number": [
      594
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.gqi.Cache": {
  "data": {
   "shadows": "dipy.reconst.cache.Cache"
  },
  "type": "import"
 },
 "dipy.reconst.gqi.GeneralizedQSamplingFit": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "dipy.reconst.odf.OdfFit": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.gqi.GeneralizedQSamplingFit.__init__": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "dipy.reconst.odf.OdfFit.__init__": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.GeneralizedQSamplingFit.odf": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "H": {
     "line number": [
      114
     ]
    },
    "numpy.dot": {
     "line number": [
      114,
      118,
      123
     ]
    },
    "numpy.pi": {
     "line number": [
      120
     ]
    },
    "numpy.real": {
     "line number": [
      114,
      118
     ]
    },
    "numpy.sinc": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.GeneralizedQSamplingModel": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "dipy.reconst.cache.Cache": {
     "line number": [
      10
     ]
    },
    "dipy.reconst.odf.OdfModel": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.gqi.GeneralizedQSamplingModel.__init__": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "dipy.reconst.odf.OdfModel.__init__": {
     "line number": [
      68
     ]
    },
    "numpy.sqrt": {
     "line number": [
      75
     ]
    },
    "numpy.tile": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.GeneralizedQSamplingModel.fit": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "dipy.reconst.gqi.GeneralizedQSamplingFit": {
     "line number": [
      83
     ]
    },
    "dipy.reconst.multi_voxel.multi_voxel_fit": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.OdfFit": {
  "data": {
   "shadows": "dipy.reconst.odf.OdfFit"
  },
  "type": "import"
 },
 "dipy.reconst.gqi.OdfModel": {
  "data": {
   "shadows": "dipy.reconst.odf.OdfModel"
  },
  "type": "import"
 },
 "dipy.reconst.gqi.equatorial_maximum": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": {
    "dipy.reconst.gqi.equatorial_zone_vertices": {
     "line number": [
      215
     ]
    },
    "len": {
     "line number": [
      217
     ]
    },
    "numpy.argmax": {
     "line number": [
      222
     ]
    },
    "numpy.array_str": {
     "line number": [
      219
     ]
    },
    "print": {
     "line number": [
      218
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.equatorial_zone_vertices": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      193
     ]
    },
    "numpy.abs": {
     "line number": [
      194,
      194
     ]
    },
    "numpy.dot": {
     "line number": [
      194
     ]
    },
    "numpy.pi": {
     "line number": [
      194
     ]
    },
    "numpy.sin": {
     "line number": [
      194
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.gfa": {
  "data": {
   "shadows": "dipy.reconst.odf.gfa"
  },
  "type": "import"
 },
 "dipy.reconst.gqi.local_maxima": {
  "data": {
   "shadows": "dipy.reconst.recspeed.local_maxima"
  },
  "type": "import"
 },
 "dipy.reconst.gqi.multi_voxel_fit": {
  "data": {
   "shadows": "dipy.reconst.multi_voxel.multi_voxel_fit"
  },
  "type": "import"
 },
 "dipy.reconst.gqi.normalize_qa": {
  "data": {
   "lineno": 126
  },
  "type": "function"
 },
 "dipy.reconst.gqi.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.gqi.npa": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "dipy.reconst.gqi.triple_odf_maxima": {
     "line number": [
      173
     ]
    },
    "numpy.sqrt": {
     "line number": [
      177,
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.odf_sum": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "numpy.sum": {
     "line number": [
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.patch_maximum": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": {
    "dipy.reconst.gqi.patch_vertices": {
     "line number": [
      239
     ]
    },
    "len": {
     "line number": [
      241
     ]
    },
    "numpy.Null": {
     "line number": [
      244,
      244
     ]
    },
    "numpy.argmax": {
     "line number": [
      246
     ]
    },
    "numpy.array_str": {
     "line number": [
      243
     ]
    },
    "print": {
     "line number": [
      242
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.patch_sum": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": {
    "dipy.reconst.gqi.patch_vertices": {
     "line number": [
      257
     ]
    },
    "len": {
     "line number": [
      259
     ]
    },
    "numpy.Null": {
     "line number": [
      262
     ]
    },
    "numpy.array_str": {
     "line number": [
      261
     ]
    },
    "numpy.sum": {
     "line number": [
      263
     ]
    },
    "print": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.patch_vertices": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      234
     ]
    },
    "numpy.abs": {
     "line number": [
      235,
      235
     ]
    },
    "numpy.cos": {
     "line number": [
      235
     ]
    },
    "numpy.dot": {
     "line number": [
      235
     ]
    },
    "numpy.pi": {
     "line number": [
      235
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.polar_zone_vertices": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      203
     ]
    },
    "numpy.abs": {
     "line number": [
      204,
      204
     ]
    },
    "numpy.cos": {
     "line number": [
      204
     ]
    },
    "numpy.dot": {
     "line number": [
      204
     ]
    },
    "numpy.pi": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.remove_similar_vertices": {
  "data": {
   "shadows": "dipy.reconst.recspeed.remove_similar_vertices"
  },
  "type": "import"
 },
 "dipy.reconst.gqi.squared_radial_component": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "dipy.reconst.gqi.warnings": {
     "line number": [
      160,
      161
     ]
    },
    "numpy.cos": {
     "line number": [
      162
     ]
    },
    "numpy.sin": {
     "line number": [
      162
     ]
    },
    "numpy.where": {
     "line number": [
      164
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.triple_odf_maxima": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": {
    "dipy.reconst.gqi.equatorial_maximum": {
     "line number": [
      272
     ]
    },
    "dipy.reconst.gqi.equatorial_zone_vertices": {
     "line number": [
      271
     ]
    },
    "enumerate": {
     "line number": [
      268
     ]
    },
    "numpy.abs": {
     "line number": [
      273
     ]
    },
    "numpy.argmax": {
     "line number": [
      268
     ]
    },
    "numpy.argmin": {
     "line number": [
      273
     ]
    },
    "numpy.dot": {
     "line number": [
      273
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.upper_hemi_map": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "numpy.sign": {
     "line number": [
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.gqi.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.reconst.mcsd": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      9
     ]
    },
    "numpy.pi": {
     "line number": [
      11
     ]
    },
    "numpy.sqrt": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.mcsd.GradientTable": {
  "data": {
   "shadows": "dipy.core.gradients.GradientTable"
  },
  "type": "import"
 },
 "dipy.reconst.mcsd.MSDeconvFit": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "dipy.reconst.shm.SphHarmFit": {
     "line number": [
      239
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.mcsd.MSDeconvFit.__init__": {
  "data": {
   "lineno": 241
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.MSDeconvFit.shm_coeff": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "property": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.MSDeconvFit.volume_fractions": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": {
    "dipy.reconst.mcsd.SH_CONST": {
     "line number": [
      267
     ]
    },
    "property": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.MultiShellDeconvModel": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "dipy.reconst.shm.SphHarmModel": {
     "line number": [
      132
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.mcsd.MultiShellDeconvModel.__init__": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      180
     ]
    },
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      190
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      133
     ]
    },
    "dipy.reconst.mcsd.MultiShellDeconvModel": {
     "line number": [
      183
     ]
    },
    "dipy.reconst.mcsd.QpFitter": {
     "line number": [
      198
     ]
    },
    "dipy.reconst.mcsd._basic_delta": {
     "line number": [
      186
     ]
    },
    "dipy.reconst.mcsd._inflate_response": {
     "line number": [
      188
     ]
    },
    "dipy.reconst.mcsd.multi_tissue_basis": {
     "line number": [
      184
     ]
    },
    "dipy.reconst.shm.real_sym_sh_basis": {
     "line number": [
      191
     ]
    },
    "numpy.eye": {
     "line number": [
      193
     ]
    },
    "numpy.zeros": {
     "line number": [
      192
     ]
    },
    "super": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.MultiShellDeconvModel.fit": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "dipy.reconst.mcsd.MSDeconvFit": {
     "line number": [
      236
     ]
    },
    "dipy.reconst.multi_voxel.multi_voxel_fit": {
     "line number": [
      233
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.MultiShellDeconvModel.predict": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "dipy.reconst.mcsd._inflate_response": {
     "line number": [
      228
     ]
    },
    "dipy.reconst.mcsd.multi_tissue_basis": {
     "line number": [
      227
     ]
    },
    "numpy.dot": {
     "line number": [
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.MultiShellResponse": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "object": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.mcsd.MultiShellResponse.__init__": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      73
     ]
    },
    "numpy.arange": {
     "line number": [
      69
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.MultiShellResponse.iso": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "property": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.QpFitter": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "object": {
     "line number": [
      307
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.mcsd.QpFitter.__call__": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "dipy.reconst.mcsd.solve_qp": {
     "line number": [
      334
     ]
    },
    "numpy.array": {
     "line number": [
      333
     ]
    },
    "numpy.dot": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.QpFitter.__init__": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      327,
      328,
      329
     ]
    },
    "numpy.dot": {
     "line number": [
      323
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.SH_CONST": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "dipy.reconst.mcsd._basic_delta": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "dipy.reconst.mcsd.SH_CONST": {
     "line number": [
      128
     ]
    },
    "dipy.reconst.shm.gen_dirac": {
     "line number": [
      127
     ]
    },
    "numpy.concatenate": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd._inflate_response": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      97
     ]
    },
    "abs": {
     "line number": [
      103
     ]
    },
    "any": {
     "line number": [
      96
     ]
    },
    "int": {
     "line number": [
      100
     ]
    },
    "len": {
     "line number": [
      100
     ]
    },
    "numpy.arange": {
     "line number": [
      101
     ]
    },
    "numpy.argmin": {
     "line number": [
      104
     ]
    },
    "numpy.empty": {
     "line number": [
      100
     ]
    },
    "numpy.ix_": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.mcsd.geo": {
  "data": {
   "shadows": "dipy.core.geometry"
  },
  "type": "import"
 },
 "dipy.reconst.mcsd.multi_tissue_basis": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      37
     ]
    },
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      38
     ]
    },
    "dipy.reconst.mcsd.SH_CONST": {
     "line number": [
      44
     ]
    },
    "dipy.reconst.shm.real_sph_harm": {
     "line number": [
      40
     ]
    },
    "dipy.reconst.shm.sph_harm_ind_list": {
     "line number": [
      39
     ]
    },
    "numpy.concatenate": {
     "line number": [
      46
     ]
    },
    "numpy.empty": {
     "line number": [
      43
     ]
    },
    "numpy.ix_": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.mcsd.multi_voxel_fit": {
  "data": {
   "shadows": "dipy.reconst.multi_voxel.multi_voxel_fit"
  },
  "type": "import"
 },
 "dipy.reconst.mcsd.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.mcsd.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.reconst.mcsd.shm": {
  "data": {
   "shadows": "dipy.reconst.shm"
  },
  "type": "import"
 },
 "dipy.reconst.mcsd.solve_qp": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      303
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.multi_voxel": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.multi_voxel.CallableArray": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.multi_voxel.CallableArray.__call__": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "dipy.core.ndindex.ndindex": {
     "line number": [
      106
     ]
    },
    "dipy.reconst.quick_squash.quick_squash": {
     "line number": [
      110
     ]
    },
    "item": {
     "line number": [
      109
     ]
    },
    "numpy.empty": {
     "line number": [
      105
     ]
    },
    "object": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.multi_voxel.MultiVoxelFit": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstFit": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.multi_voxel.MultiVoxelFit.__getattr__": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "dipy.core.ndindex.ndindex": {
     "line number": [
      52
     ]
    },
    "dipy.reconst.multi_voxel.CallableArray": {
     "line number": [
      51
     ]
    },
    "dipy.reconst.quick_squash.quick_squash": {
     "line number": [
      55
     ]
    },
    "getattr": {
     "line number": [
      54
     ]
    },
    "object": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.multi_voxel.MultiVoxelFit.__getitem__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "dipy.reconst.multi_voxel.MultiVoxelFit": {
     "line number": [
      60
     ]
    },
    "isinstance": {
     "line number": [
      59
     ]
    },
    "numpy.ndarray": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.multi_voxel.MultiVoxelFit.__init__": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "dipy.reconst.multi_voxel.MultiVoxelFit.predict": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      86
     ]
    },
    "dipy.core.ndindex.ndindex": {
     "line number": [
      70
     ]
    },
    "gimme_S0": {
     "line number": [
      79,
      92
     ]
    },
    "hasattr": {
     "line number": [
      84
     ]
    },
    "next": {
     "line number": [
      71,
      82
     ]
    },
    "numpy.ones": {
     "line number": [
      69
     ]
    },
    "numpy.zeros": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.multi_voxel.MultiVoxelFit.predict.gimme_S0": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      74
     ]
    },
    "numpy.ndarray": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.multi_voxel.MultiVoxelFit.shape": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "property": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.multi_voxel.ReconstFit": {
  "data": {
   "shadows": "dipy.reconst.base.ReconstFit"
  },
  "type": "import"
 },
 "dipy.reconst.multi_voxel._squash": {
  "data": {
   "shadows": "dipy.reconst.quick_squash.quick_squash"
  },
  "type": "import"
 },
 "dipy.reconst.multi_voxel.as_strided": {
  "data": {
   "shadows": "numpy.lib.stride_tricks.as_strided"
  },
  "type": "import"
 },
 "dipy.reconst.multi_voxel.multi_voxel_fit": {
  "data": {
   "lineno": 10
  },
  "type": "function"
 },
 "dipy.reconst.multi_voxel.multi_voxel_fit.new_fit": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      27
     ]
    },
    "dipy.core.ndindex.ndindex": {
     "line number": [
      31
     ]
    },
    "dipy.reconst.multi_voxel.MultiVoxelFit": {
     "line number": [
      34
     ]
    },
    "len": {
     "line number": [
      23
     ]
    },
    "numpy.array": {
     "line number": [
      24
     ]
    },
    "numpy.empty": {
     "line number": [
      30
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      24
     ]
    },
    "object": {
     "line number": [
      30
     ]
    },
    "single_voxel_fit": {
     "line number": [
      18,
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.multi_voxel.ndindex": {
  "data": {
   "shadows": "dipy.core.ndindex.ndindex"
  },
  "type": "import"
 },
 "dipy.reconst.multi_voxel.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.odf": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.odf.OdfFit": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstFit": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.odf.OdfFit.odf": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.odf.OdfModel": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstModel": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.odf.OdfModel.__init__": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstModel.__init__": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.odf.OdfModel.fit": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.odf.ReconstFit": {
  "data": {
   "shadows": "dipy.reconst.base.ReconstFit"
  },
  "type": "import"
 },
 "dipy.reconst.odf.ReconstModel": {
  "data": {
   "shadows": "dipy.reconst.base.ReconstModel"
  },
  "type": "import"
 },
 "dipy.reconst.odf.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.reconst.odf.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.reconst.odf.gfa": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      62,
      63
     ]
    },
    "numpy.nan": {
     "line number": [
      64
     ]
    },
    "numpy.ones_like": {
     "line number": [
      64
     ]
    },
    "numpy.sqrt": {
     "line number": [
      66
     ]
    },
    "numpy.where": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.odf.minmax_normalize": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      92
     ]
    },
    "numpy.common_type": {
     "line number": [
      91
     ]
    },
    "numpy.empty": {
     "line number": [
      91
     ]
    },
    "numpy.max": {
     "line number": [
      97
     ]
    },
    "numpy.min": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.odf.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.odf.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.reconst.sfm": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      24
     ]
    },
    "dipy.reconst.sfm.w": {
     "line number": [
      45,
      46
     ]
    },
    "dipy.reconst.sfm.warnings": {
     "line number": [
      46
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      38,
      39
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.sfm.Cache": {
  "data": {
   "shadows": "dipy.reconst.cache.Cache"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.ExponentialIsotropicFit": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "dipy.reconst.sfm.IsotropicFit": {
     "line number": [
      173
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.sfm.ExponentialIsotropicFit.predict": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "numpy.exp": {
     "line number": [
      191
     ]
    },
    "numpy.newaxis": {
     "line number": [
      194
     ]
    },
    "numpy.sum": {
     "line number": [
      193
     ]
    },
    "numpy.zeros": {
     "line number": [
      192
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm.ExponentialIsotropicModel": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "dipy.reconst.sfm.IsotropicModel": {
     "line number": [
      148
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.sfm.ExponentialIsotropicModel.fit": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "dipy.reconst.sfm.ExponentialIsotropicFit": {
     "line number": [
      170
     ]
    },
    "dipy.reconst.sfm._to_fit_iso": {
     "line number": [
      163
     ]
    },
    "numpy.inf": {
     "line number": [
      167
     ]
    },
    "numpy.log": {
     "line number": [
      166
     ]
    },
    "scipy.stats.nanmean": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm.IsotropicFit": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstFit": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.sfm.IsotropicFit.__init__": {
  "data": {
   "lineno": 112
  },
  "type": "function"
 },
 "dipy.reconst.sfm.IsotropicFit.predict": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "numpy.newaxis": {
     "line number": [
      143
     ]
    },
    "numpy.sum": {
     "line number": [
      144
     ]
    },
    "numpy.zeros": {
     "line number": [
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm.IsotropicModel": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstModel": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.sfm.IsotropicModel.__init__": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstModel.__init__": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm.IsotropicModel.fit": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "dipy.reconst.sfm.IsotropicFit": {
     "line number": [
      104
     ]
    },
    "dipy.reconst.sfm._to_fit_iso": {
     "line number": [
      102
     ]
    },
    "numpy.mean": {
     "line number": [
      103
     ]
    },
    "numpy.reshape": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm.ReconstFit": {
  "data": {
   "shadows": "dipy.reconst.base.ReconstFit"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.ReconstModel": {
  "data": {
   "shadows": "dipy.reconst.base.ReconstModel"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.SparseFascicleFit": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstFit": {
     "line number": [
      450
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.sfm.SparseFascicleFit.__init__": {
  "data": {
   "lineno": 451
  },
  "type": "function"
 },
 "dipy.reconst.sfm.SparseFascicleFit.odf": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": {
    "dipy.reconst.sfm.sfm_design_matrix": {
     "line number": [
      488
     ]
    },
    "numpy.dot": {
     "line number": [
      493
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm.SparseFascicleFit.predict": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": {
    "dipy.reconst.sfm.sfm_design_matrix": {
     "line number": [
      526
     ]
    },
    "isinstance": {
     "line number": [
      534
     ]
    },
    "numpy.dot": {
     "line number": [
      529
     ]
    },
    "numpy.ndarray": {
     "line number": [
      534
     ]
    },
    "numpy.zeros": {
     "line number": [
      541
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm.SparseFascicleModel": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstModel": {
     "line number": [
      295
     ]
    },
    "dipy.reconst.cache.Cache": {
     "line number": [
      295
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.sfm.SparseFascicleModel.__init__": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      372
     ]
    },
    "dipy.core.optimize.NonNegativeLeastSquares": {
     "line number": [
      362
     ]
    },
    "dipy.core.optimize.SKLearnLinearSolver": {
     "line number": [
      364
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      351
     ]
    },
    "dipy.reconst.base.ReconstModel.__init__": {
     "line number": [
      349
     ]
    },
    "dipy.reconst.sfm.IsotropicModel": {
     "line number": [
      355
     ]
    },
    "isinstance": {
     "line number": [
      364,
      365
     ]
    },
    "numpy.asarray": {
     "line number": [
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm.SparseFascicleModel.design_matrix": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": {
    "dipy.core.onetime.auto_attr": {
     "line number": [
      374
     ]
    },
    "dipy.reconst.sfm.sfm_design_matrix": {
     "line number": [
      385
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm.SparseFascicleModel.fit": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      413
     ]
    },
    "bool": {
     "line number": [
      414
     ]
    },
    "dipy.reconst.sfm.SparseFascicleFit": {
     "line number": [
      447
     ]
    },
    "dipy.reconst.sfm.warnings": {
     "line number": [
      431,
      432
     ]
    },
    "enumerate": {
     "line number": [
      426
     ]
    },
    "numpy.all": {
     "line number": [
      429
     ]
    },
    "numpy.any": {
     "line number": [
      429
     ]
    },
    "numpy.array": {
     "line number": [
      414
     ]
    },
    "numpy.isfinite": {
     "line number": [
      429
     ]
    },
    "numpy.mean": {
     "line number": [
      418
     ]
    },
    "numpy.reshape": {
     "line number": [
      409,
      415
     ]
    },
    "numpy.zeros": {
     "line number": [
      422,
      441,
      444
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm._to_fit_iso": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      61
     ]
    },
    "numpy.mean": {
     "line number": [
      60
     ]
    },
    "numpy.sum": {
     "line number": [
      59
     ]
    },
    "numpy.where": {
     "line number": [
      57,
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm.auto_attr": {
  "data": {
   "shadows": "dipy.core.onetime.auto_attr"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.dpd": {
  "data": {
   "shadows": "dipy.data"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.dti": {
  "data": {
   "shadows": "dipy.reconst.dti"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.geo": {
  "data": {
   "shadows": "dipy.core.geometry"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.grad": {
  "data": {
   "shadows": "dipy.core.gradients"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.nanmean": {
  "data": {
   "shadows": "scipy.stats.nanmean"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.opt": {
  "data": {
   "shadows": "dipy.core.optimize"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.sfm_design_matrix": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      265
     ]
    },
    "dipy.sims.voxel.all_tensor_evecs": {
     "line number": [
      277
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      279
     ]
    },
    "dipy.sims.voxel.single_tensor_odf": {
     "line number": [
      289
     ]
    },
    "enumerate": {
     "line number": [
      274
     ]
    },
    "numpy.empty": {
     "line number": [
      268,
      271
     ]
    },
    "numpy.exp": {
     "line number": [
      281
     ]
    },
    "numpy.mean": {
     "line number": [
      281
     ]
    },
    "numpy.sum": {
     "line number": [
      268
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.sfm.sims": {
  "data": {
   "shadows": "dipy.sims.voxel"
  },
  "type": "import"
 },
 "dipy.reconst.sfm.w": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "dipy.reconst.sfm.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.reconst.test": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "dipy.reconst.tests": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.tests.test_cache": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      27
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_cache.Cache": {
  "data": {
   "shadows": "dipy.reconst.cache.Cache"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cache.DummyModel": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "dipy.reconst.cache.Cache": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_cache.DummyModel.__init__": {
  "data": {
   "lineno": 8
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_cache.Sphere": {
  "data": {
   "shadows": "dipy.core.sphere.Sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cache.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cache.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cache.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cache.test_basic_cache": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      14
     ]
    },
    "dipy.reconst.tests.test_cache.DummyModel": {
     "line number": [
      13
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      16,
      24
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_cross_validation": {
  "data": {
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_cross_validation.base": {
  "data": {
   "shadows": "dipy.reconst.base"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cross_validation.csd": {
  "data": {
   "shadows": "dipy.reconst.csdeconv"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cross_validation.dpd": {
  "data": {
   "shadows": "dipy.data"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cross_validation.dti": {
  "data": {
   "shadows": "dipy.reconst.dti"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cross_validation.gt": {
  "data": {
   "shadows": "dipy.core.gradients"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cross_validation.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cross_validation.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cross_validation.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cross_validation.sims": {
  "data": {
   "shadows": "dipy.sims.voxel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_cross_validation.test_coeff_of_determination": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "dipy.reconst.cross_validation.coeff_of_determination": {
     "line number": [
      23
     ]
    },
    "numpy.copy": {
     "line number": [
      21
     ]
    },
    "numpy.random.randn": {
     "line number": [
      20
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_cross_validation.test_csd_xval": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      91
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      62,
      72
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      68
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      61
     ]
    },
    "dipy.reconst.cross_validation.coeff_of_determination": {
     "line number": [
      83,
      96
     ]
    },
    "dipy.reconst.cross_validation.kfold_xval": {
     "line number": [
      81,
      93
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      65,
      78
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      77
     ]
    },
    "len": {
     "line number": [
      70
     ]
    },
    "numpy.array": {
     "line number": [
      73,
      74,
      75,
      90
     ]
    },
    "numpy.concatenate": {
     "line number": [
      69
     ]
    },
    "numpy.mean": {
     "line number": [
      63
     ]
    },
    "numpy.ones": {
     "line number": [
      91
     ]
    },
    "numpy.random.seed": {
     "line number": [
      79
     ]
    },
    "numpy.round": {
     "line number": [
      88,
      97
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      88,
      97
     ]
    },
    "numpy.zeros": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_cross_validation.test_dti_xval": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      32
     ]
    },
    "bool": {
     "line number": [
      52
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      29,
      39
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      35
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      28
     ]
    },
    "dipy.reconst.cross_validation.coeff_of_determination": {
     "line number": [
      47,
      55
     ]
    },
    "dipy.reconst.cross_validation.kfold_xval": {
     "line number": [
      32,
      46,
      54
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      30,
      45
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      43
     ]
    },
    "len": {
     "line number": [
      37
     ]
    },
    "numpy.array": {
     "line number": [
      40,
      41,
      42,
      51
     ]
    },
    "numpy.concatenate": {
     "line number": [
      36
     ]
    },
    "numpy.ones": {
     "line number": [
      48,
      52
     ]
    },
    "numpy.round": {
     "line number": [
      56
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      48,
      56
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      32
     ]
    },
    "numpy.zeros": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_cross_validation.test_no_predict": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "NoPredictModel": {
     "line number": [
      115
     ]
    },
    "ValueError": {
     "line number": [
      118
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      114
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      116
     ]
    },
    "dipy.reconst.cross_validation.kfold_xval": {
     "line number": [
      118
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_cross_validation.test_no_predict.NoPredictFit": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstFit": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_cross_validation.test_no_predict.NoPredictFit.__init__": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstFit.__init__": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_cross_validation.test_no_predict.NoPredictModel": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstModel": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_cross_validation.test_no_predict.NoPredictModel.__init__": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstModel.__init__": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_cross_validation.test_no_predict.NoPredictModel.fit": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "NoPredictFit": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_cross_validation.xval": {
  "data": {
   "shadows": "dipy.reconst.cross_validation"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      621
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      622
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_csdeconv.ConstrainedSDTModel": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.ConstrainedSDTModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.ConstrainedSphericalDeconvModel": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.HemiSphere": {
  "data": {
   "shadows": "dipy.core.sphere.HemiSphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.QballModel": {
  "data": {
   "shadows": "dipy.reconst.shm.QballModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.Sphere": {
  "data": {
   "shadows": "dipy.core.sphere.Sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.TensorModel": {
  "data": {
   "shadows": "dipy.reconst.dti.TensorModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.all_tensor_evecs": {
  "data": {
   "shadows": "dipy.sims.voxel.all_tensor_evecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.angular_similarity": {
  "data": {
   "shadows": "dipy.core.sphere_stats.angular_similarity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.assert_greater": {
  "data": {
   "shadows": "dipy.testing.assert_greater"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.assert_greater_equal": {
  "data": {
   "shadows": "dipy.testing.assert_greater_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.auto_response": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.auto_response"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.dti": {
  "data": {
   "shadows": "dipy.reconst.dti"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.fa_inferior": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.fa_inferior"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.fa_superior": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.fa_superior"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.forward_sdeconv_mat": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.forward_sdeconv_mat"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.fractional_anisotropy": {
  "data": {
   "shadows": "dipy.reconst.dti.fractional_anisotropy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.lazy_index": {
  "data": {
   "shadows": "dipy.reconst.shm.lazy_index"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.multi_tensor_odf": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_odf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.odf_deconv": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.odf_deconv"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.odf_sh_to_sharp": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.odf_sh_to_sharp"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.peak_directions": {
  "data": {
   "shadows": "dipy.direction.peaks.peak_directions"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.real_sym_sh_basis": {
  "data": {
   "shadows": "dipy.reconst.shm.real_sym_sh_basis"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.recursive_response": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.recursive_response"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.response_from_mask": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.response_from_mask"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.sf_to_sh": {
  "data": {
   "shadows": "dipy.reconst.shm.sf_to_sh"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.sh_to_sf": {
  "data": {
   "shadows": "dipy.reconst.shm.sh_to_sf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.single_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.single_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.single_tensor_odf": {
  "data": {
   "shadows": "dipy.sims.voxel.single_tensor_odf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.small_sphere": {
  "data": {
   "shadows": "dipy.data.small_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.sph_harm_ind_list": {
  "data": {
   "shadows": "dipy.reconst.shm.sph_harm_ind_list"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_csdeconv.test_auto_response": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      120
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      116
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      117
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      118
     ]
    },
    "dipy.reconst.csdeconv.auto_response": {
     "line number": [
      136,
      145
     ]
    },
    "dipy.reconst.csdeconv.fa_inferior": {
     "line number": [
      129
     ]
    },
    "dipy.reconst.csdeconv.fa_superior": {
     "line number": [
      129
     ]
    },
    "numpy.arange": {
     "line number": [
      132
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      156,
      157
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      154
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      153
     ]
    },
    "zip": {
     "line number": [
      134
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_auto_response.test_fa_inferior": {
  "data": {
   "lineno": 126
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_auto_response.test_fa_superior": {
  "data": {
   "lineno": 123
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_csd_convergence": {
  "data": {
   "lineno": 604,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      608
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      606
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      607
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      613,
      615
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      611
     ]
    },
    "numpy.array": {
     "line number": [
      610
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      618
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_csd_predict": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      441
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      439
     ]
    },
    "dipy.data.small_sphere": {
     "line number": [
      447
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      440
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      451
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      445
     ]
    },
    "dipy.sims.voxel.multi_tensor_odf": {
     "line number": [
      448
     ]
    },
    "numpy.array": {
     "line number": [
      442,
      449
     ]
    },
    "numpy.random.random": {
     "line number": [
      469
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      473,
      481
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      458,
      459,
      464,
      465
     ]
    },
    "numpy.zeros": {
     "line number": [
      476
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_csd_predict_multi": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      492
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      490
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      491
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      494
     ]
    },
    "numpy.array": {
     "line number": [
      493,
      498
     ]
    },
    "numpy.mean": {
     "line number": [
      500
     ]
    },
    "numpy.random.random": {
     "line number": [
      495
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      502
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_csd_superres": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      582,
      586
     ]
    },
    "abs": {
     "line number": [
      600
     ]
    },
    "all": {
     "line number": [
      601
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      573
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      590
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      571
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      590
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      592
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      572
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      583
     ]
    },
    "dipy.reconst.tests.test_csdeconv.warnings": {
     "line number": [
      579,
      580
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      577
     ]
    },
    "dipy.testing.assert_greater_equal": {
     "line number": [
      585
     ]
    },
    "issubclass": {
     "line number": [
      586
     ]
    },
    "len": {
     "line number": [
      585,
      597
     ]
    },
    "numpy.array": {
     "line number": [
      576
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      586,
      601
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      597
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_csdeconv": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      230,
      233,
      236,
      239,
      267
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      203
     ]
    },
    "dipy.core.sphere_stats.angular_similarity": {
     "line number": [
      223
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      200
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      212
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      220,
      221
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      202
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      215,
      231,
      237
     ]
    },
    "dipy.reconst.csdeconv.auto_response": {
     "line number": [
      249,
      255,
      258,
      263
     ]
    },
    "dipy.reconst.tests.test_csdeconv.warnings": {
     "line number": [
      229,
      230,
      235,
      236,
      262
     ]
    },
    "dipy.sims.voxel.all_tensor_evecs": {
     "line number": [
      243
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      209
     ]
    },
    "dipy.sims.voxel.multi_tensor_odf": {
     "line number": [
      213
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      245
     ]
    },
    "dipy.testing.assert_greater": {
     "line number": [
      232
     ]
    },
    "issubclass": {
     "line number": [
      232,
      238,
      267
     ]
    },
    "len": {
     "line number": [
      232,
      238,
      246,
      266
     ]
    },
    "numpy.array": {
     "line number": [
      204,
      214
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      267,
      268
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      252,
      253
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      251,
      256
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      217,
      225,
      226,
      227,
      238,
      261,
      266,
      271
     ]
    },
    "numpy.zeros": {
     "line number": [
      246
     ]
    },
    "str": {
     "line number": [
      269
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_default_lambda_csdmodel": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      561
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      547
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      542
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      545
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      546
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      556
     ]
    },
    "dipy.reconst.shm.real_sym_sh_basis": {
     "line number": [
      565
     ]
    },
    "dipy.reconst.tests.test_csdeconv.warnings": {
     "line number": [
      555
     ]
    },
    "issubclass": {
     "line number": [
      561
     ]
    },
    "len": {
     "line number": [
      559
     ]
    },
    "numpy.array": {
     "line number": [
      550
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      561,
      562
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      566
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      559
     ]
    },
    "str": {
     "line number": [
      562
     ]
    },
    "zip": {
     "line number": [
      552
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_forward_sdeconv_mat": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      386
     ]
    },
    "dipy.reconst.csdeconv.forward_sdeconv_mat": {
     "line number": [
      372,
      380,
      386
     ]
    },
    "dipy.reconst.shm.sph_harm_ind_list": {
     "line number": [
      371,
      379
     ]
    },
    "numpy.arange": {
     "line number": [
      378
     ]
    },
    "numpy.array": {
     "line number": [
      372
     ]
    },
    "numpy.diag": {
     "line number": [
      373
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      374,
      382
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      381
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      386
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_odf_sh_to_sharp": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      337
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      344
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      335
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      365
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      336
     ]
    },
    "dipy.reconst.csdeconv.odf_sh_to_sharp": {
     "line number": [
      360
     ]
    },
    "dipy.reconst.shm.QballModel": {
     "line number": [
      346
     ]
    },
    "dipy.reconst.shm.sf_to_sh": {
     "line number": [
      356
     ]
    },
    "dipy.reconst.shm.sh_to_sf": {
     "line number": [
      363
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      341
     ]
    },
    "numpy.array": {
     "line number": [
      338
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      351
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      367
     ]
    },
    "numpy.zeros": {
     "line number": [
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_odfdeconv": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      280
     ]
    },
    "dipy.core.sphere_stats.angular_similarity": {
     "line number": [
      304
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      278
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      288
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      301,
      302
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      279
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSDTModel": {
     "line number": [
      296,
      313,
      318
     ]
    },
    "dipy.reconst.csdeconv.odf_deconv": {
     "line number": [
      328
     ]
    },
    "dipy.reconst.tests.test_csdeconv.warnings": {
     "line number": [
      311,
      316
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      285
     ]
    },
    "dipy.sims.voxel.multi_tensor_odf": {
     "line number": [
      290
     ]
    },
    "len": {
     "line number": [
      314,
      319
     ]
    },
    "numpy.array": {
     "line number": [
      281
     ]
    },
    "numpy.nan": {
     "line number": [
      326
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      323,
      329
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      306,
      308,
      309,
      314,
      319
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      321,
      323,
      325,
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_r2_term_odf_sharp": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      399
     ]
    },
    "dipy.core.sphere_stats.angular_similarity": {
     "line number": [
      417,
      428
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      398
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      394
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      414,
      415,
      426,
      427
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      396
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSDTModel": {
     "line number": [
      422
     ]
    },
    "dipy.reconst.csdeconv.odf_sh_to_sharp": {
     "line number": [
      410
     ]
    },
    "dipy.reconst.shm.sf_to_sh": {
     "line number": [
      409
     ]
    },
    "dipy.reconst.shm.sh_to_sf": {
     "line number": [
      412
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      405
     ]
    },
    "dipy.sims.voxel.multi_tensor_odf": {
     "line number": [
      408
     ]
    },
    "numpy.array": {
     "line number": [
      400
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      418,
      419,
      429,
      430
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_recursive_response_calibration": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      102
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      49
     ]
    },
    "dipy.core.sphere.Sphere": {
     "line number": [
      100
     ]
    },
    "dipy.core.sphere_stats.angular_similarity": {
     "line number": [
      89,
      94
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      47
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      44
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      84,
      85,
      86,
      87
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      46
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      76
     ]
    },
    "dipy.reconst.csdeconv.recursive_response": {
     "line number": [
      71
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      107
     ]
    },
    "dipy.reconst.dti.fractional_anisotropy": {
     "line number": [
      110,
      111
     ]
    },
    "dipy.reconst.shm.lazy_index": {
     "line number": [
      56
     ]
    },
    "dipy.reconst.tests.test_csdeconv.warnings": {
     "line number": [
      99
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      58
     ]
    },
    "dipy.sims.voxel.multi_tensor_odf": {
     "line number": [
      67
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      61
     ]
    },
    "dipy.sims.voxel.single_tensor_odf": {
     "line number": [
      69
     ]
    },
    "issubclass": {
     "line number": [
      102
     ]
    },
    "len": {
     "line number": [
      101
     ]
    },
    "numpy.all": {
     "line number": [
      80
     ]
    },
    "numpy.array": {
     "line number": [
      50,
      51,
      52
     ]
    },
    "numpy.concatenate": {
     "line number": [
      63,
      105
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      102,
      103
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      112
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      80,
      90,
      91,
      92,
      95,
      96,
      97,
      101
     ]
    },
    "numpy.tile": {
     "line number": [
      63,
      64
     ]
    },
    "str": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_response_from_mask": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      165
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      161
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      162
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      163
     ]
    },
    "dipy.reconst.csdeconv.auto_response": {
     "line number": [
      173
     ]
    },
    "dipy.reconst.csdeconv.response_from_mask": {
     "line number": [
      188
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      166
     ]
    },
    "dipy.reconst.dti.fractional_anisotropy": {
     "line number": [
      168
     ]
    },
    "int": {
     "line number": [
      190
     ]
    },
    "numpy.arange": {
     "line number": [
      172
     ]
    },
    "numpy.array": {
     "line number": [
      181
     ]
    },
    "numpy.isnan": {
     "line number": [
      169
     ]
    },
    "numpy.sum": {
     "line number": [
      190
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      192,
      193
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      191
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      190
     ]
    },
    "numpy.zeros": {
     "line number": [
      182
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.test_sphere_scaling_csdmodel": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      512
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      508
     ]
    },
    "dipy.data.small_sphere": {
     "line number": [
      521
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      510
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      525,
      527
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      518
     ]
    },
    "numpy.array": {
     "line number": [
      513,
      524
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      532
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_csdeconv.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki": {
  "data": {
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      28,
      33
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      26
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      27
     ]
    },
    "dipy.reconst.dti.decompose_tensor": {
     "line number": [
      47,
      63
     ]
    },
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      47,
      63
     ]
    },
    "dipy.reconst.tests.test_dki.DWI": {
     "line number": [
      78,
      78,
      78,
      78
     ]
    },
    "dipy.reconst.tests.test_dki.De": {
     "line number": [
      58,
      58,
      58,
      69,
      70
     ]
    },
    "dipy.reconst.tests.test_dki.Dg": {
     "line number": [
      70
     ]
    },
    "dipy.reconst.tests.test_dki.Di": {
     "line number": [
      58,
      58,
      58,
      69,
      70
     ]
    },
    "dipy.reconst.tests.test_dki.angles_cross": {
     "line number": [
      44
     ]
    },
    "dipy.reconst.tests.test_dki.bvals_2s": {
     "line number": [
      33
     ]
    },
    "dipy.reconst.tests.test_dki.bvecs_2s": {
     "line number": [
      33
     ]
    },
    "dipy.reconst.tests.test_dki.crossing_ref": {
     "line number": [
      80,
      81
     ]
    },
    "dipy.reconst.tests.test_dki.f": {
     "line number": [
      69,
      69,
      70,
      70
     ]
    },
    "dipy.reconst.tests.test_dki.fie": {
     "line number": [
      40,
      40,
      40,
      40
     ]
    },
    "dipy.reconst.tests.test_dki.frac_cross": {
     "line number": [
      45
     ]
    },
    "dipy.reconst.tests.test_dki.frac_sph": {
     "line number": [
      61
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      42,
      60,
      77
     ]
    },
    "dipy.reconst.tests.test_dki.mevals_cross": {
     "line number": [
      42
     ]
    },
    "dipy.reconst.tests.test_dki.mevals_sph": {
     "line number": [
      60
     ]
    },
    "dipy.reconst.tests.test_dki.multi_params": {
     "line number": [
      80,
      80,
      81,
      81
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      42,
      60
     ]
    },
    "len": {
     "line number": [
      77
     ]
    },
    "numpy.array": {
     "line number": [
      36,
      58
     ]
    },
    "numpy.concatenate": {
     "line number": [
      31,
      32,
      48,
      64
     ]
    },
    "numpy.zeros": {
     "line number": [
      77,
      79
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_dki.DWI": {
  "data": {
   "lineno": 77
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.De": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.Dg": {
  "data": {
   "lineno": 69
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.Di": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.Kref_sphere": {
  "data": {
   "lineno": 70
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.Sphere": {
  "data": {
   "shadows": "dipy.core.sphere.Sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki._positive_evals": {
  "data": {
   "shadows": "dipy.reconst.dki._positive_evals"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.angles_cross": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.axial_kurtosis": {
  "data": {
   "shadows": "dipy.reconst.dki.axial_kurtosis"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.bvals_2s": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.bvecs_2s": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.carlson_rd": {
  "data": {
   "shadows": "dipy.reconst.dki.carlson_rd"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.carlson_rf": {
  "data": {
   "shadows": "dipy.reconst.dki.carlson_rf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.crossing_ref": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.decompose_tensor": {
  "data": {
   "shadows": "dipy.reconst.dti.decompose_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.dki": {
  "data": {
   "shadows": "dipy.reconst.dki"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.dti": {
  "data": {
   "shadows": "dipy.reconst.dti"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.f": {
  "data": {
   "lineno": 68
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.fie": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.frac_cross": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.frac_sph": {
  "data": {
   "lineno": 59
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.from_lower_triangular": {
  "data": {
   "shadows": "dipy.reconst.dti.from_lower_triangular"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.gtab": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.gtab_2s": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.kurtosis_fractional_anisotropy": {
  "data": {
   "shadows": "dipy.reconst.dki.kurtosis_fractional_anisotropy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.lower_triangular": {
  "data": {
   "shadows": "dipy.reconst.dki.lower_triangular"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.mean_kurtosis": {
  "data": {
   "shadows": "dipy.reconst.dki.mean_kurtosis"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.mean_kurtosis_tensor": {
  "data": {
   "shadows": "dipy.reconst.dki.mean_kurtosis_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.mevals_cross": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.mevals_sph": {
  "data": {
   "lineno": 58
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.multi_params": {
  "data": {
   "lineno": 79
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.multi_tensor_dki": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_dki"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.params_sph": {
  "data": {
   "lineno": 64
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.radial_kurtosis": {
  "data": {
   "shadows": "dipy.reconst.dki.radial_kurtosis"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.sphere2cart": {
  "data": {
   "shadows": "dipy.core.geometry.sphere2cart"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki.test_MK_singularities": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      529
     ]
    },
    "dipy.reconst.dki.mean_kurtosis": {
     "line number": [
      563,
      564
     ]
    },
    "dipy.reconst.tests.test_dki.frac_cross": {
     "line number": [
      538
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      529,
      536
     ]
    },
    "dipy.reconst.tests.test_dki.mevals_cross": {
     "line number": [
      536
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      536
     ]
    },
    "numpy.array": {
     "line number": [
      533
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      543,
      566
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_Wcons": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": {
    "dipy.reconst.dki.Wcons": {
     "line number": [
      400
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      405
     ]
    },
    "numpy.zeros": {
     "line number": [
      334
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_Wrotate_crossing_fibers": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": {
    "dipy.reconst.dki.Wrotate": {
     "line number": [
      317
     ]
    },
    "dipy.reconst.dti.decompose_tensor": {
     "line number": [
      315
     ]
    },
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      315
     ]
    },
    "dipy.reconst.tests.test_dki.fie": {
     "line number": [
      307,
      308,
      308,
      308,
      308
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      312,
      323
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      312,
      323
     ]
    },
    "numpy.array": {
     "line number": [
      309
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      327
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_Wrotate_single_fiber": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "dipy.reconst.dki.Wrotate": {
     "line number": [
      283
     ]
    },
    "dipy.reconst.dti.decompose_tensor": {
     "line number": [
      281
     ]
    },
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      281
     ]
    },
    "dipy.reconst.tests.test_dki.fie": {
     "line number": [
      271,
      272,
      272
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      278,
      289
     ]
    },
    "dipy.reconst.tests.test_dki.random": {
     "line number": [
      275,
      276
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      278,
      289
     ]
    },
    "numpy.array": {
     "line number": [
      270
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      292
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_apparent_kurtosis_coef": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      149
     ]
    },
    "dipy.reconst.dki.apparent_kurtosis_coef": {
     "line number": [
      150
     ]
    },
    "dipy.reconst.tests.test_dki.Kref_sphere": {
     "line number": [
      154
     ]
    },
    "dipy.reconst.tests.test_dki.gtab": {
     "line number": [
      149,
      149,
      153,
      153
     ]
    },
    "dipy.reconst.tests.test_dki.params_sph": {
     "line number": [
      150
     ]
    },
    "len": {
     "line number": [
      153
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      154
     ]
    },
    "range": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_carlson_rd": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": {
    "dipy.reconst.dki.carlson_rd": {
     "line number": [
      242,
      257
     ]
    },
    "numpy.array": {
     "line number": [
      234,
      235,
      236,
      239,
      248,
      249,
      250,
      253
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      245,
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_carlson_rf": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "dipy.reconst.dki.carlson_rf": {
     "line number": [
      207,
      221
     ]
    },
    "numpy.array": {
     "line number": [
      198,
      199,
      200,
      203,
      213,
      214,
      215,
      218
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      210,
      224
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_compare_MK_method": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      449
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      449
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      458
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_compare_RK_methods": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      513
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      513
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      522
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_dki_errors": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      572,
      576,
      595,
      598
     ]
    },
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      572,
      576,
      579,
      584,
      598
     ]
    },
    "dipy.reconst.tests.test_dki.DWI": {
     "line number": [
      580,
      587,
      592,
      595
     ]
    },
    "dipy.reconst.tests.test_dki.gtab": {
     "line number": [
      598
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      572,
      576,
      579,
      584
     ]
    },
    "dipy.reconst.tests.test_dki.multi_params": {
     "line number": [
      581,
      590,
      593
     ]
    },
    "numpy.array": {
     "line number": [
      591
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      581,
      593
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      572,
      576,
      595,
      598
     ]
    },
    "numpy.zeros": {
     "line number": [
      590
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_dki_fits": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      111,
      117,
      123,
      129
     ]
    },
    "dipy.reconst.tests.test_dki.DWI": {
     "line number": [
      135,
      138,
      141
     ]
    },
    "dipy.reconst.tests.test_dki.crossing_ref": {
     "line number": [
      114,
      120,
      126,
      132
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      111,
      117,
      123,
      129
     ]
    },
    "dipy.reconst.tests.test_dki.multi_params": {
     "line number": [
      136,
      139,
      142
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      114,
      120,
      126,
      132,
      136,
      139,
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_dki_predict": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      158
     ]
    },
    "dipy.reconst.dki.dki_prediction": {
     "line number": [
      183,
      187
     ]
    },
    "dipy.reconst.tests.test_dki.DWI": {
     "line number": [
      165,
      171,
      174,
      176,
      180,
      189
     ]
    },
    "dipy.reconst.tests.test_dki.crossing_ref": {
     "line number": [
      159,
      183
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      158,
      175,
      183,
      187
     ]
    },
    "dipy.reconst.tests.test_dki.multi_params": {
     "line number": [
      164,
      169,
      187,
      188
     ]
    },
    "numpy.ones": {
     "line number": [
      170,
      188
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      161,
      165,
      171,
      176,
      180,
      184,
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_kurtosis_fa": {
  "data": {
   "lineno": 751,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      760,
      775
     ]
    },
    "dipy.reconst.tests.test_dki.fie": {
     "line number": [
      755,
      756,
      756,
      770,
      771,
      771
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      757,
      760,
      772,
      775
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      757,
      772
     ]
    },
    "numpy.array": {
     "line number": [
      753,
      768
     ]
    },
    "numpy.sqrt": {
     "line number": [
      763,
      778
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      763,
      778
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_kurtosis_maximum": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": {
    "dipy.core.geometry.sphere2cart": {
     "line number": [
      666
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      620
     ]
    },
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      613,
      654
     ]
    },
    "dipy.reconst.dki._voxel_kurtosis_maximum": {
     "line number": [
      623,
      663,
      681,
      687
     ]
    },
    "dipy.reconst.dki.lower_triangular": {
     "line number": [
      619,
      660
     ]
    },
    "dipy.reconst.tests.test_dki.Kref_sphere": {
     "line number": [
      683
     ]
    },
    "dipy.reconst.tests.test_dki.fie": {
     "line number": [
      636,
      641,
      641,
      642,
      642,
      649,
      649
     ]
    },
    "dipy.reconst.tests.test_dki.frac_cross": {
     "line number": [
      611
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      609,
      613,
      650,
      654
     ]
    },
    "dipy.reconst.tests.test_dki.mevals_cross": {
     "line number": [
      609
     ]
    },
    "dipy.reconst.tests.test_dki.random": {
     "line number": [
      645,
      646
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      609,
      650
     ]
    },
    "numpy.abs": {
     "line number": [
      627,
      667
     ]
    },
    "numpy.array": {
     "line number": [
      626,
      648,
      666
     ]
    },
    "numpy.deg2rad": {
     "line number": [
      666,
      666
     ]
    },
    "numpy.diag": {
     "line number": [
      619,
      660
     ]
    },
    "numpy.dot": {
     "line number": [
      619,
      619,
      627,
      660,
      660,
      667
     ]
    },
    "numpy.mean": {
     "line number": [
      681,
      687
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      628,
      668,
      671,
      677,
      683,
      690
     ]
    },
    "numpy.zeros": {
     "line number": [
      688
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_multi_voxel_kurtosis_maximum": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": {
    "dipy.data.default_sphere": {
     "line number": [
      740
     ]
    },
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      732
     ]
    },
    "dipy.reconst.dki.kurtosis_maximum": {
     "line number": [
      736,
      740,
      747
     ]
    },
    "dipy.reconst.tests.test_dki.fie": {
     "line number": [
      716,
      718,
      718
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      707,
      722,
      732
     ]
    },
    "dipy.reconst.tests.test_dki.random": {
     "line number": [
      719,
      720
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      722
     ]
    },
    "numpy.array": {
     "line number": [
      695,
      698,
      700,
      702,
      717
     ]
    },
    "numpy.ones": {
     "line number": [
      744
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      737,
      741,
      748
     ]
    },
    "numpy.zeros": {
     "line number": [
      697,
      707
     ]
    },
    "range": {
     "line number": [
      709,
      710,
      711
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_positive_evals": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      91
     ]
    },
    "dipy.reconst.dki._positive_evals": {
     "line number": [
      93
     ]
    },
    "numpy.array": {
     "line number": [
      86,
      87,
      88,
      90
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_single_voxel_DKI_stats": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      502
     ]
    },
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      495
     ]
    },
    "dipy.reconst.dki.axial_kurtosis": {
     "line number": [
      489
     ]
    },
    "dipy.reconst.dki.radial_kurtosis": {
     "line number": [
      490
     ]
    },
    "dipy.reconst.dti.axial_diffusivity": {
     "line number": [
      487
     ]
    },
    "dipy.reconst.dti.decompose_tensor": {
     "line number": [
      483
     ]
    },
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      483
     ]
    },
    "dipy.reconst.dti.radial_diffusivity": {
     "line number": [
      488
     ]
    },
    "dipy.reconst.tests.test_dki.fie": {
     "line number": [
      469,
      469,
      470,
      470,
      471,
      471,
      472,
      472,
      480,
      480
     ]
    },
    "dipy.reconst.tests.test_dki.gtab": {
     "line number": [
      502,
      502
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      481,
      495
     ]
    },
    "dipy.reconst.tests.test_dki.random": {
     "line number": [
      476,
      477
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      481
     ]
    },
    "numpy.array": {
     "line number": [
      473,
      479,
      491,
      497
     ]
    },
    "numpy.concatenate": {
     "line number": [
      484
     ]
    },
    "numpy.mean": {
     "line number": [
      503
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      492,
      498,
      505
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_spherical_dki_statistics": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": {
    "dipy.reconst.dki.axial_kurtosis": {
     "line number": [
      432
     ]
    },
    "dipy.reconst.dki.kurtosis_fractional_anisotropy": {
     "line number": [
      440
     ]
    },
    "dipy.reconst.dki.mean_kurtosis": {
     "line number": [
      424
     ]
    },
    "dipy.reconst.dki.mean_kurtosis_tensor": {
     "line number": [
      436
     ]
    },
    "dipy.reconst.dki.radial_kurtosis": {
     "line number": [
      428
     ]
    },
    "dipy.reconst.tests.test_dki.Kref_sphere": {
     "line number": [
      419,
      420
     ]
    },
    "dipy.reconst.tests.test_dki.params_sph": {
     "line number": [
      414,
      415
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      425,
      429,
      433,
      437,
      441
     ]
    },
    "numpy.zeros": {
     "line number": [
      413,
      418
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki.test_split_dki_param": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      98
     ]
    },
    "dipy.reconst.dki.split_dki_param": {
     "line number": [
      100
     ]
    },
    "dipy.reconst.tests.test_dki.DWI": {
     "line number": [
      99
     ]
    },
    "dipy.reconst.tests.test_dki.gtab_2s": {
     "line number": [
      98
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      102,
      103,
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki_micro": {
  "data": {
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      20,
      25
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      18
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      19
     ]
    },
    "dipy.reconst.tests.test_dki_micro.ADE": {
     "line number": [
      37,
      62
     ]
    },
    "dipy.reconst.tests.test_dki_micro.ADI": {
     "line number": [
      60
     ]
    },
    "dipy.reconst.tests.test_dki_micro.ADe": {
     "line number": [
      65
     ]
    },
    "dipy.reconst.tests.test_dki_micro.ADi": {
     "line number": [
      65
     ]
    },
    "dipy.reconst.tests.test_dki_micro.DWIsim": {
     "line number": [
      73
     ]
    },
    "dipy.reconst.tests.test_dki_micro.DWIsim_all_taylor": {
     "line number": [
      76
     ]
    },
    "dipy.reconst.tests.test_dki_micro.FIE": {
     "line number": [
      64
     ]
    },
    "dipy.reconst.tests.test_dki_micro.RDE": {
     "line number": [
      63
     ]
    },
    "dipy.reconst.tests.test_dki_micro.RDI": {
     "line number": [
      61
     ]
    },
    "dipy.reconst.tests.test_dki_micro.RDe": {
     "line number": [
      65,
      65
     ]
    },
    "dipy.reconst.tests.test_dki_micro.RDi": {
     "line number": [
      65,
      65
     ]
    },
    "dipy.reconst.tests.test_dki_micro.Tor": {
     "line number": [
      37
     ]
    },
    "dipy.reconst.tests.test_dki_micro.angles": {
     "line number": [
      71,
      74
     ]
    },
    "dipy.reconst.tests.test_dki_micro.bvals_2s": {
     "line number": [
      25
     ]
    },
    "dipy.reconst.tests.test_dki_micro.bvecs_2s": {
     "line number": [
      25
     ]
    },
    "dipy.reconst.tests.test_dki_micro.fie": {
     "line number": [
      66,
      66
     ]
    },
    "dipy.reconst.tests.test_dki_micro.frac": {
     "line number": [
      72,
      75
     ]
    },
    "dipy.reconst.tests.test_dki_micro.gtab_2s": {
     "line number": [
      40,
      50,
      70,
      74
     ]
    },
    "dipy.reconst.tests.test_dki_micro.mevals": {
     "line number": [
      70,
      74
     ]
    },
    "dipy.reconst.tests.test_dki_micro.phi": {
     "line number": [
      69,
      69
     ]
    },
    "dipy.reconst.tests.test_dki_micro.random": {
     "line number": [
      67,
      68
     ]
    },
    "dipy.reconst.tests.test_dki_micro.theta": {
     "line number": [
      69,
      69
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      74
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      70
     ]
    },
    "numpy.array": {
     "line number": [
      28,
      31,
      33,
      35,
      65
     ]
    },
    "numpy.concatenate": {
     "line number": [
      23,
      24
     ]
    },
    "numpy.zeros": {
     "line number": [
      30,
      40,
      50
     ]
    },
    "range": {
     "line number": [
      57,
      58,
      59
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_dki_micro.ADE": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.ADI": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.ADe": {
  "data": {
   "lineno": 62
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.ADi": {
  "data": {
   "lineno": 60
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.DWIsim": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.DWIsim_all_taylor": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.FIE": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.RDE": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.RDI": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.RDe": {
  "data": {
   "lineno": 63
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.RDi": {
  "data": {
   "lineno": 61
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.Tor": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro._check_directions": {
  "data": {
   "shadows": "dipy.sims.voxel._check_directions"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro._help_test_awf_only": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "exec": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki_micro.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.additional_tortuosity_tests": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "dipy.reconst.dki_micro.tortuosity": {
     "line number": [
      317,
      325
     ]
    },
    "dipy.reconst.tests.test_dki_micro.ADE": {
     "line number": [
      325
     ]
    },
    "dipy.reconst.tests.test_dki_micro.RDE": {
     "line number": [
      321
     ]
    },
    "dipy.reconst.tests.test_dki_micro.Tor": {
     "line number": [
      322
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      318,
      326
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki_micro.angles": {
  "data": {
   "lineno": 69
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.bvals_2s": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.bvecs_2s": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.dki_micro": {
  "data": {
   "shadows": "dipy.reconst.dki_micro"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.eig_from_lo_tri": {
  "data": {
   "shadows": "dipy.reconst.dti.eig_from_lo_tri"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.fie": {
  "data": {
   "lineno": 64
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.frac": {
  "data": {
   "lineno": 66
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.gtab": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.gtab_2s": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.mevals": {
  "data": {
   "lineno": 65
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.multi_tensor_dki": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_dki"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.phi": {
  "data": {
   "lineno": 68
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dki_micro.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dki_micro.test_dki_micro_awf_only": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      300,
      302,
      304,
      306,
      308,
      310
     ]
    },
    "dipy.reconst.dki_micro.KurtosisMicrostructureModel": {
     "line number": [
      294
     ]
    },
    "dipy.reconst.tests.test_dki_micro.DWIsim": {
     "line number": [
      295
     ]
    },
    "dipy.reconst.tests.test_dki_micro.FIE": {
     "line number": [
      297
     ]
    },
    "dipy.reconst.tests.test_dki_micro._help_test_awf_only": {
     "line number": [
      300,
      302,
      304,
      306,
      308,
      310
     ]
    },
    "dipy.reconst.tests.test_dki_micro.gtab_2s": {
     "line number": [
      294
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      297
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      300,
      302,
      304,
      306,
      308,
      310
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki_micro.test_dki_micro_predict_multi_voxel": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": {
    "dipy.reconst.dki_micro.KurtosisMicrostructureModel": {
     "line number": [
      274
     ]
    },
    "dipy.reconst.tests.test_dki_micro.DWIsim": {
     "line number": [
      275
     ]
    },
    "dipy.reconst.tests.test_dki_micro.DWIsim_all_taylor": {
     "line number": [
      279,
      282,
      286
     ]
    },
    "dipy.reconst.tests.test_dki_micro.gtab_2s": {
     "line number": [
      274,
      285
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      279,
      282,
      286
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki_micro.test_dki_micro_predict_single_voxel": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "dipy.reconst.dki_micro.KurtosisMicrostructureModel": {
     "line number": [
      256
     ]
    },
    "dipy.reconst.tests.test_dki_micro.ADe": {
     "line number": [
      240,
      248
     ]
    },
    "dipy.reconst.tests.test_dki_micro.ADi": {
     "line number": [
      239,
      248
     ]
    },
    "dipy.reconst.tests.test_dki_micro.RDe": {
     "line number": [
      242,
      248,
      248
     ]
    },
    "dipy.reconst.tests.test_dki_micro.RDi": {
     "line number": [
      241,
      248,
      248
     ]
    },
    "dipy.reconst.tests.test_dki_micro.angles": {
     "line number": [
      247,
      250,
      252
     ]
    },
    "dipy.reconst.tests.test_dki_micro.fie": {
     "line number": [
      238,
      249,
      249
     ]
    },
    "dipy.reconst.tests.test_dki_micro.frac": {
     "line number": [
      249,
      251,
      253
     ]
    },
    "dipy.reconst.tests.test_dki_micro.gtab_2s": {
     "line number": [
      250,
      252,
      256,
      269
     ]
    },
    "dipy.reconst.tests.test_dki_micro.mevals": {
     "line number": [
      248,
      250,
      252
     ]
    },
    "dipy.reconst.tests.test_dki_micro.phi": {
     "line number": [
      246,
      247,
      247
     ]
    },
    "dipy.reconst.tests.test_dki_micro.random": {
     "line number": [
      245,
      246
     ]
    },
    "dipy.reconst.tests.test_dki_micro.theta": {
     "line number": [
      245,
      247,
      247
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      252
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      250
     ]
    },
    "numpy.array": {
     "line number": [
      248
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      263,
      266,
      270
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki_micro.test_single_fiber_model": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      115,
      117
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      100,
      106
     ]
    },
    "dipy.reconst.dki_micro.DiffusionKurtosisModel": {
     "line number": [
      96
     ]
    },
    "dipy.reconst.dki_micro.KurtosisMicrostructureModel": {
     "line number": [
      121
     ]
    },
    "dipy.reconst.dki_micro.axonal_water_fraction": {
     "line number": [
      100
     ]
    },
    "dipy.reconst.dki_micro.diffusion_components": {
     "line number": [
      105,
      144
     ]
    },
    "dipy.reconst.dti.eig_from_lo_tri": {
     "line number": [
      107,
      108
     ]
    },
    "dipy.reconst.tests.test_dki_micro.ADe": {
     "line number": [
      83,
      91,
      111,
      125,
      128,
      131
     ]
    },
    "dipy.reconst.tests.test_dki_micro.ADi": {
     "line number": [
      82,
      91,
      112,
      127,
      130
     ]
    },
    "dipy.reconst.tests.test_dki_micro.RDe": {
     "line number": [
      85,
      91,
      91,
      111,
      111,
      125,
      125,
      129,
      131
     ]
    },
    "dipy.reconst.tests.test_dki_micro.RDi": {
     "line number": [
      84,
      91,
      91,
      112,
      112,
      127,
      127
     ]
    },
    "dipy.reconst.tests.test_dki_micro.angles": {
     "line number": [
      90,
      93
     ]
    },
    "dipy.reconst.tests.test_dki_micro.fie": {
     "line number": [
      81,
      92,
      92,
      102
     ]
    },
    "dipy.reconst.tests.test_dki_micro.frac": {
     "line number": [
      92,
      94
     ]
    },
    "dipy.reconst.tests.test_dki_micro.gtab_2s": {
     "line number": [
      93,
      96,
      121
     ]
    },
    "dipy.reconst.tests.test_dki_micro.mevals": {
     "line number": [
      91,
      93
     ]
    },
    "dipy.reconst.tests.test_dki_micro.phi": {
     "line number": [
      89,
      90,
      90,
      114
     ]
    },
    "dipy.reconst.tests.test_dki_micro.random": {
     "line number": [
      88,
      89
     ]
    },
    "dipy.reconst.tests.test_dki_micro.theta": {
     "line number": [
      88,
      90,
      90,
      114
     ]
    },
    "dipy.sims.voxel._check_directions": {
     "line number": [
      114
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      93
     ]
    },
    "numpy.all": {
     "line number": [
      145
     ]
    },
    "numpy.array": {
     "line number": [
      91,
      111,
      112,
      115,
      117,
      125,
      127,
      135
     ]
    },
    "numpy.dot": {
     "line number": [
      115,
      117
     ]
    },
    "numpy.isfinite": {
     "line number": [
      145
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      145
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      102,
      116,
      118,
      123,
      128,
      129,
      130,
      131
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      111,
      112,
      124,
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki_micro.test_wmti_model_multi_voxel": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "dipy.data.get_sphere": {
     "line number": [
      154
     ]
    },
    "dipy.reconst.dki_micro.DiffusionKurtosisModel": {
     "line number": [
      150
     ]
    },
    "dipy.reconst.dki_micro.KurtosisMicrostructureModel": {
     "line number": [
      227
     ]
    },
    "dipy.reconst.dki_micro.axonal_water_fraction": {
     "line number": [
      155,
      192,
      210
     ]
    },
    "dipy.reconst.dki_micro.diffusion_components": {
     "line number": [
      160,
      197,
      215
     ]
    },
    "dipy.reconst.dti.eig_from_lo_tri": {
     "line number": [
      161,
      162,
      199,
      200,
      217,
      218
     ]
    },
    "dipy.reconst.tests.test_dki_micro.ADE": {
     "line number": [
      165,
      176
     ]
    },
    "dipy.reconst.tests.test_dki_micro.ADI": {
     "line number": [
      168,
      175
     ]
    },
    "dipy.reconst.tests.test_dki_micro.DWIsim": {
     "line number": [
      151,
      179,
      209,
      228
     ]
    },
    "dipy.reconst.tests.test_dki_micro.FIE": {
     "line number": [
      157,
      173
     ]
    },
    "dipy.reconst.tests.test_dki_micro.RDE": {
     "line number": [
      166,
      167,
      178
     ]
    },
    "dipy.reconst.tests.test_dki_micro.RDI": {
     "line number": [
      169,
      170,
      174
     ]
    },
    "dipy.reconst.tests.test_dki_micro.Tor": {
     "line number": [
      177
     ]
    },
    "dipy.reconst.tests.test_dki_micro.gtab_2s": {
     "line number": [
      150,
      227
     ]
    },
    "numpy.ones": {
     "line number": [
      188
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      157,
      194,
      212,
      229,
      230,
      231,
      232,
      233
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      165,
      166,
      167,
      168,
      169,
      170,
      201,
      202,
      203,
      204,
      205,
      206,
      219,
      220,
      221,
      222,
      223,
      224
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dki_micro.theta": {
  "data": {
   "lineno": 67
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_dsi": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      121
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_dsi.DiffusionSpectrumModel": {
  "data": {
   "shadows": "dipy.reconst.dsi.DiffusionSpectrumModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.Sphere": {
  "data": {
   "shadows": "dipy.core.sphere.Sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.angular_similarity": {
  "data": {
   "shadows": "dipy.core.sphere_stats.angular_similarity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.create_unit_sphere": {
  "data": {
   "shadows": "dipy.core.subdivide_octahedron.create_unit_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.dsi_voxels": {
  "data": {
   "shadows": "dipy.data.dsi_voxels"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.gfa": {
  "data": {
   "shadows": "dipy.reconst.odf.gfa"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.peak_directions": {
  "data": {
   "shadows": "dipy.direction.peaks.peak_directions"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.sticks_and_ball": {
  "data": {
   "shadows": "dipy.sims.voxel.sticks_and_ball"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi.sticks_and_ball_dummies": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "dipy.sims.voxel.sticks_and_ball": {
     "line number": [
      102,
      106,
      110,
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dsi.test_dsi": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      60
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      25
     ]
    },
    "dipy.core.sphere_stats.angular_similarity": {
     "line number": [
      38,
      46
     ]
    },
    "dipy.core.subdivide_octahedron.create_unit_sphere": {
     "line number": [
      23
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      20
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      24
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      36,
      44,
      54
     ]
    },
    "dipy.reconst.dsi.DiffusionSpectrumModel": {
     "line number": [
      30,
      60
     ]
    },
    "dipy.reconst.odf.gfa": {
     "line number": [
      58
     ]
    },
    "dipy.reconst.tests.test_dsi.sticks_and_ball_dummies": {
     "line number": [
      50
     ]
    },
    "dipy.sims.voxel.sticks_and_ball": {
     "line number": [
      26
     ]
    },
    "len": {
     "line number": [
      37,
      45,
      55,
      56,
      56,
      57
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      24
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      38,
      46
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      37,
      45,
      49,
      56,
      58
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dsi.test_multib0_dsi": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      79,
      91
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      83,
      95
     ]
    },
    "dipy.data.dsi_voxels": {
     "line number": [
      74
     ]
    },
    "dipy.reconst.dsi.DiffusionSpectrumModel": {
     "line number": [
      80,
      92
     ]
    },
    "numpy.alltrue": {
     "line number": [
      85,
      97
     ]
    },
    "numpy.concatenate": {
     "line number": [
      76,
      77,
      78,
      88,
      89,
      90
     ]
    },
    "numpy.isreal": {
     "line number": [
      85,
      97
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      84,
      85,
      96,
      97
     ]
    },
    "numpy.zeros": {
     "line number": [
      77,
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dsi.test_multivox_dsi": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "dipy.data.dsi_voxels": {
     "line number": [
      64
     ]
    },
    "dipy.reconst.dsi.DiffusionSpectrumModel": {
     "line number": [
      65
     ]
    },
    "numpy.alltrue": {
     "line number": [
      70
     ]
    },
    "numpy.isreal": {
     "line number": [
      70
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69,
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dsi_deconv": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      72
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_dsi_deconv.DiffusionSpectrumDeconvModel": {
  "data": {
   "shadows": "dipy.reconst.dsi.DiffusionSpectrumDeconvModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.Sphere": {
  "data": {
   "shadows": "dipy.core.sphere.Sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.angular_similarity": {
  "data": {
   "shadows": "dipy.core.sphere_stats.angular_similarity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.create_unit_sphere": {
  "data": {
   "shadows": "dipy.core.subdivide_octahedron.create_unit_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.dsi_deconv_voxels": {
  "data": {
   "shadows": "dipy.data.dsi_deconv_voxels"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.gfa": {
  "data": {
   "shadows": "dipy.reconst.odf.gfa"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.peak_directions": {
  "data": {
   "shadows": "dipy.direction.peaks.peak_directions"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.sticks_and_ball": {
  "data": {
   "shadows": "dipy.sims.voxel.sticks_and_ball"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.sticks_and_ball_dummies": {
  "data": {
   "shadows": "dipy.reconst.tests.test_dsi.sticks_and_ball_dummies"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_deconv.test_dsi": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      59
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      25
     ]
    },
    "dipy.core.sphere_stats.angular_similarity": {
     "line number": [
      37,
      45
     ]
    },
    "dipy.core.subdivide_octahedron.create_unit_sphere": {
     "line number": [
      23
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      21
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      24
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      35,
      43,
      53
     ]
    },
    "dipy.reconst.dsi.DiffusionSpectrumDeconvModel": {
     "line number": [
      30,
      59
     ]
    },
    "dipy.reconst.odf.gfa": {
     "line number": [
      57
     ]
    },
    "dipy.reconst.tests.test_dsi.sticks_and_ball_dummies": {
     "line number": [
      49
     ]
    },
    "dipy.sims.voxel.sticks_and_ball": {
     "line number": [
      26
     ]
    },
    "len": {
     "line number": [
      36,
      44,
      54,
      55,
      55,
      56
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      24
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      37,
      45
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36,
      44,
      48,
      55,
      57
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dsi_deconv.test_multivox_dsi": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "dipy.data.dsi_deconv_voxels": {
     "line number": [
      63
     ]
    },
    "dipy.reconst.dsi.DiffusionSpectrumDeconvModel": {
     "line number": [
      64
     ]
    },
    "numpy.alltrue": {
     "line number": [
      69
     ]
    },
    "numpy.isreal": {
     "line number": [
      69
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      68,
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dsi_metrics": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      34
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_dsi_metrics.DiffusionSpectrumModel": {
  "data": {
   "shadows": "dipy.reconst.dsi.DiffusionSpectrumModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_metrics.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_metrics.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_metrics.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_metrics.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_metrics.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_metrics.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_metrics.sticks_and_ball": {
  "data": {
   "shadows": "dipy.sims.voxel.sticks_and_ball"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dsi_metrics.test_dsi_metrics": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      11
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      10
     ]
    },
    "dipy.reconst.dsi.DiffusionSpectrumModel": {
     "line number": [
      16,
      21
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      23,
      26
     ]
    },
    "dipy.sims.voxel.sticks_and_ball": {
     "line number": [
      12
     ]
    },
    "numpy.array": {
     "line number": [
      22
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      10
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      20,
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.tests.test_dti.TensorModel": {
  "data": {
   "shadows": "dipy.reconst.dti.TensorModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti._decompose_tensor_nan": {
  "data": {
   "shadows": "dipy.reconst.dti._decompose_tensor_nan"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.axial_diffusivity": {
  "data": {
   "shadows": "dipy.reconst.dti.axial_diffusivity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.color_fa": {
  "data": {
   "shadows": "dipy.reconst.dti.color_fa"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.create_unit_sphere": {
  "data": {
   "shadows": "dipy.core.subdivide_octahedron.create_unit_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.decompose_tensor": {
  "data": {
   "shadows": "dipy.reconst.dti.decompose_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.dps": {
  "data": {
   "shadows": "dipy.core.sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.dsi_voxels": {
  "data": {
   "shadows": "dipy.data.dsi_voxels"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.dti": {
  "data": {
   "shadows": "dipy.reconst.dti"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.fractional_anisotropy": {
  "data": {
   "shadows": "dipy.reconst.dti.fractional_anisotropy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.from_lower_triangular": {
  "data": {
   "shadows": "dipy.reconst.dti.from_lower_triangular"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.geodesic_anisotropy": {
  "data": {
   "shadows": "dipy.reconst.dti.geodesic_anisotropy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.grad": {
  "data": {
   "shadows": "dipy.core.gradients"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.linearity": {
  "data": {
   "shadows": "dipy.reconst.dti.linearity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.lower_triangular": {
  "data": {
   "shadows": "dipy.reconst.dti.lower_triangular"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.mean_diffusivity": {
  "data": {
   "shadows": "dipy.reconst.dti.mean_diffusivity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.opt": {
  "data": {
   "shadows": "scipy.optimize"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.planarity": {
  "data": {
   "shadows": "dipy.reconst.dti.planarity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.radial_diffusivity": {
  "data": {
   "shadows": "dipy.reconst.dti.radial_diffusivity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.read_bvec_file": {
  "data": {
   "shadows": "dipy.io.bvectxt.read_bvec_file"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.single_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.single_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.sphericity": {
  "data": {
   "shadows": "dipy.reconst.dti.sphericity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_dti.test_adc": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      664
     ]
    },
    "dipy.core.sphere.Sphere": {
     "line number": [
      671,
      677
     ]
    },
    "dipy.data.dsi_voxels": {
     "line number": [
      662
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      663
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      672,
      678
     ]
    },
    "numpy.zeros": {
     "line number": [
      664
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_all_constant": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table_from_bvals_bvecs": {
     "line number": [
      457
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      456
     ]
    },
    "dipy.io.bvectxt.read_bvec_file": {
     "line number": [
      456
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      460
     ]
    },
    "numpy.ones": {
     "line number": [
      461,
      463
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      461,
      463
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_all_zeros": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table_from_bvals_bvecs": {
     "line number": [
      468
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      467
     ]
    },
    "dipy.io.bvectxt.read_bvec_file": {
     "line number": [
      467
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      471
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      472
     ]
    },
    "numpy.zeros": {
     "line number": [
      472
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_color_fa": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      274
     ]
    },
    "dipy.data.dsi_voxels": {
     "line number": [
      266
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      267
     ]
    },
    "dipy.reconst.dti.color_fa": {
     "line number": [
      274,
      286,
      296,
      306
     ]
    },
    "dipy.reconst.dti.fractional_anisotropy": {
     "line number": [
      269
     ]
    },
    "numpy.array": {
     "line number": [
      277,
      285,
      287,
      295,
      297,
      305,
      307
     ]
    },
    "numpy.ones": {
     "line number": [
      271,
      283,
      293,
      303
     ]
    },
    "numpy.reshape": {
     "line number": [
      288,
      298,
      308
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      290,
      300,
      310
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      279,
      280
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      274
     ]
    },
    "numpy.tile": {
     "line number": [
      288,
      298,
      308
     ]
    },
    "numpy.zeros": {
     "line number": [
      273,
      276,
      284,
      294,
      304
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_decompose_tensor_nan": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": {
    "dipy.reconst.dti._decompose_tensor_nan": {
     "line number": [
      786,
      792
     ]
    },
    "dipy.reconst.dti.decompose_tensor": {
     "line number": [
      785,
      791
     ]
    },
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      785,
      786,
      787,
      791,
      792,
      793
     ]
    },
    "numpy.array": {
     "line number": [
      781,
      782,
      788,
      794
     ]
    },
    "numpy.nan": {
     "line number": [
      783
     ]
    },
    "numpy.ones": {
     "line number": [
      783
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      788,
      789,
      794,
      795
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_diffusivities": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      239
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      235
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      245
     ]
    },
    "dipy.reconst.dti.axial_diffusivity": {
     "line number": [
      251
     ]
    },
    "dipy.reconst.dti.linearity": {
     "line number": [
      252
     ]
    },
    "dipy.reconst.dti.mean_diffusivity": {
     "line number": [
      248
     ]
    },
    "dipy.reconst.dti.planarity": {
     "line number": [
      253
     ]
    },
    "dipy.reconst.dti.radial_diffusivity": {
     "line number": [
      250
     ]
    },
    "dipy.reconst.dti.sphericity": {
     "line number": [
      254
     ]
    },
    "dipy.reconst.dti.trace": {
     "line number": [
      249
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      243
     ]
    },
    "len": {
     "line number": [
      237
     ]
    },
    "numpy.array": {
     "line number": [
      240,
      241,
      242
     ]
    },
    "numpy.concatenate": {
     "line number": [
      236
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      256,
      257,
      258,
      259,
      260,
      261,
      262
     ]
    },
    "numpy.zeros": {
     "line number": [
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_eig_from_lo_tri": {
  "data": {
   "lineno": 746,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      751
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      747
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      758
     ]
    },
    "dipy.reconst.dti.eig_from_lo_tri": {
     "line number": [
      762
     ]
    },
    "dipy.reconst.dti.lower_triangular": {
     "line number": [
      761
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      755,
      756
     ]
    },
    "len": {
     "line number": [
      749
     ]
    },
    "numpy.array": {
     "line number": [
      752,
      753,
      754,
      755
     ]
    },
    "numpy.concatenate": {
     "line number": [
      748
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      762
     ]
    },
    "numpy.zeros": {
     "line number": [
      749
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_fa_of_zero": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": {
    "dipy.reconst.dti.fractional_anisotropy": {
     "line number": [
      224
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      225
     ]
    },
    "numpy.zeros": {
     "line number": [
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_fit_method_error": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      418
     ]
    },
    "dipy.core.gradients.gradient_table_from_bvals_bvecs": {
     "line number": [
      412
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      411
     ]
    },
    "dipy.io.bvectxt.read_bvec_file": {
     "line number": [
      411
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      415,
      418
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      418
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_from_lower_triangular": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": {
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      447,
      451
     ]
    },
    "numpy.arange": {
     "line number": [
      446
     ]
    },
    "numpy.array": {
     "line number": [
      443
     ]
    },
    "numpy.ones": {
     "line number": [
      449,
      450
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      448,
      452
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_ga_of_zero": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "dipy.reconst.dti.geodesic_anisotropy": {
     "line number": [
      230
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      231
     ]
    },
    "numpy.zeros": {
     "line number": [
      229
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_indexing_on_tensor_fit": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      219
     ]
    },
    "dipy.reconst.dti.TensorFit": {
     "line number": [
      204,
      210,
      213,
      216
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      207,
      209,
      210,
      212,
      213,
      215,
      216
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      219
     ]
    },
    "numpy.zeros": {
     "line number": [
      203
     ]
    },
    "slice": {
     "line number": [
      214
     ]
    },
    "type": {
     "line number": [
      210,
      213,
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_lower_triangular": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      428
     ]
    },
    "dipy.reconst.dti.lower_triangular": {
     "line number": [
      424,
      426,
      428,
      434,
      436
     ]
    },
    "numpy.arange": {
     "line number": [
      423
     ]
    },
    "numpy.empty": {
     "line number": [
      430,
      432,
      437
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      425,
      427,
      435,
      439
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      428
     ]
    },
    "numpy.zeros": {
     "line number": [
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_mask": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      478,
      493
     ]
    },
    "dipy.data.dsi_voxels": {
     "line number": [
      476
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      477,
      492
     ]
    },
    "numpy.isnan": {
     "line number": [
      483,
      501
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      489,
      508,
      509
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      485,
      486,
      487,
      503,
      504,
      505,
      506
     ]
    },
    "numpy.zeros": {
     "line number": [
      478,
      493
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_masked_array_with_tensor": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table_from_bvals_bvecs": {
     "line number": [
      387
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      386
     ]
    },
    "dipy.io.bvectxt.read_bvec_file": {
     "line number": [
      386
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      389
     ]
    },
    "numpy.array": {
     "line number": [
      383
     ]
    },
    "numpy.ndarray": {
     "line number": [
      407
     ]
    },
    "numpy.ones": {
     "line number": [
      382
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      391,
      392,
      393,
      394,
      397,
      398,
      399,
      400,
      403,
      404,
      405,
      406,
      407
     ]
    },
    "tuple": {
     "line number": [
      403,
      404
     ]
    },
    "type": {
     "line number": [
      407
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_min_signal_alone": {
  "data": {
   "lineno": 767,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      770
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      768
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      769
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      773
     ]
    },
    "numpy.array": {
     "line number": [
      772
     ]
    },
    "numpy.min": {
     "line number": [
      772
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      776
     ]
    },
    "numpy.where": {
     "line number": [
      772
     ]
    },
    "tuple": {
     "line number": [
      772
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_nlls_fit_tensor": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      596
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      553,
      600
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      552,
      599
     ]
    },
    "dipy.io.bvectxt.read_bvec_file": {
     "line number": [
      552
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      602
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      571,
      579,
      587,
      595,
      601,
      604
     ]
    },
    "dipy.reconst.dti.design_matrix": {
     "line number": [
      563
     ]
    },
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      560
     ]
    },
    "numpy.array": {
     "line number": [
      557,
      558
     ]
    },
    "numpy.dot": {
     "line number": [
      566
     ]
    },
    "numpy.exp": {
     "line number": [
      566
     ]
    },
    "numpy.log": {
     "line number": [
      557
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      576,
      584,
      592
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      574,
      575,
      582,
      583,
      590,
      591,
      607
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      573,
      581,
      589
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      596
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_nnls_jacobian_fucn": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      516
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      515
     ]
    },
    "dipy.io.bvectxt.read_bvec_file": {
     "line number": [
      515
     ]
    },
    "dipy.reconst.dti._nlls_err_func": {
     "line number": [
      533,
      542
     ]
    },
    "dipy.reconst.dti._nlls_jacobian_func": {
     "line number": [
      530,
      539
     ]
    },
    "dipy.reconst.dti.design_matrix": {
     "line number": [
      523
     ]
    },
    "len": {
     "line number": [
      531,
      540
     ]
    },
    "numpy.allclose": {
     "line number": [
      534,
      543
     ]
    },
    "numpy.array": {
     "line number": [
      520
     ]
    },
    "numpy.dot": {
     "line number": [
      526
     ]
    },
    "numpy.exp": {
     "line number": [
      526
     ]
    },
    "numpy.log": {
     "line number": [
      520
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      537
     ]
    },
    "range": {
     "line number": [
      531,
      540
     ]
    },
    "scipy.optimize.approx_fprime": {
     "line number": [
      533,
      542
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_odf_with_zeros": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      46
     ]
    },
    "dipy.core.subdivide_octahedron.create_unit_sphere": {
     "line number": [
      51
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      45
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      47
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      48
     ]
    },
    "numpy.array": {
     "line number": [
      50
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      53
     ]
    },
    "numpy.zeros": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_predict": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      690,
      706
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      702
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      686
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      703
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      696,
      707,
      713,
      721,
      729
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      694
     ]
    },
    "len": {
     "line number": [
      688
     ]
    },
    "numpy.array": {
     "line number": [
      691,
      692,
      693
     ]
    },
    "numpy.concatenate": {
     "line number": [
      687
     ]
    },
    "numpy.mean": {
     "line number": [
      709,
      723,
      731
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      698,
      699,
      700
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      711,
      716,
      718,
      725,
      733,
      737,
      740,
      743
     ]
    },
    "numpy.tile": {
     "line number": [
      705
     ]
    },
    "numpy.zeros": {
     "line number": [
      688
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_restore": {
  "data": {
   "lineno": 610,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      616
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      615
     ]
    },
    "dipy.io.bvectxt.read_bvec_file": {
     "line number": [
      615
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      636,
      647,
      651
     ]
    },
    "dipy.reconst.dti.design_matrix": {
     "line number": [
      625
     ]
    },
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      622
     ]
    },
    "numpy.array": {
     "line number": [
      620,
      621
     ]
    },
    "numpy.dot": {
     "line number": [
      628
     ]
    },
    "numpy.exp": {
     "line number": [
      628
     ]
    },
    "numpy.log": {
     "line number": [
      620
     ]
    },
    "numpy.ones": {
     "line number": [
      635
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      654
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      641,
      643
     ]
    },
    "range": {
     "line number": [
      630
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_roll_evals": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      31
     ]
    },
    "dipy.reconst.dti._roll_evals": {
     "line number": [
      31
     ]
    },
    "numpy.array": {
     "line number": [
      30
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_tensor_algebra": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "dipy.reconst.dti.determinant": {
     "line number": [
      37
     ]
    },
    "dipy.reconst.dti.norm": {
     "line number": [
      38
     ]
    },
    "enumerate": {
     "line number": [
      39
     ]
    },
    "numpy.linalg.det": {
     "line number": [
      40
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      41
     ]
    },
    "numpy.random.rand": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      40,
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_tensor_model": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      171
     ]
    },
    "ValueError": {
     "line number": [
      96,
      162
     ]
    },
    "all": {
     "line number": [
      196
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      59
     ]
    },
    "dipy.core.gradients.gradient_table_from_bvals_bvecs": {
     "line number": [
      101
     ]
    },
    "dipy.core.subdivide_octahedron.create_unit_sphere": {
     "line number": [
      69
     ]
    },
    "dipy.data.dsi_voxels": {
     "line number": [
      60
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      57,
      100
     ]
    },
    "dipy.io.bvectxt.read_bvec_file": {
     "line number": [
      100
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      58
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      62,
      65,
      75,
      129,
      163,
      169,
      185,
      190
     ]
    },
    "dipy.reconst.dti.design_matrix": {
     "line number": [
      121
     ]
    },
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      108
     ]
    },
    "len": {
     "line number": [
      70,
      70
     ]
    },
    "numpy.abs": {
     "line number": [
      145,
      147
     ]
    },
    "numpy.all": {
     "line number": [
      145,
      147
     ]
    },
    "numpy.any": {
     "line number": [
      76
     ]
    },
    "numpy.argsort": {
     "line number": [
      114
     ]
    },
    "numpy.array": {
     "line number": [
      105,
      106
     ]
    },
    "numpy.dot": {
     "line number": [
      118,
      123
     ]
    },
    "numpy.exp": {
     "line number": [
      123
     ]
    },
    "numpy.eye": {
     "line number": [
      109
     ]
    },
    "numpy.linalg.det": {
     "line number": [
      110
     ]
    },
    "numpy.linalg.eigh": {
     "line number": [
      112
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      111
     ]
    },
    "numpy.log": {
     "line number": [
      105
     ]
    },
    "numpy.mean": {
     "line number": [
      77
     ]
    },
    "numpy.ones": {
     "line number": [
      96,
      96
     ]
    },
    "numpy.sqrt": {
     "line number": [
      110
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      145
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      81,
      124,
      156
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      118,
      136,
      137,
      153,
      157,
      187,
      192,
      193,
      199
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      64,
      67,
      68,
      70,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      135,
      158,
      159
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      96,
      162
     ]
    },
    "numpy.trace": {
     "line number": [
      109
     ]
    },
    "numpy.zeros": {
     "line number": [
      176
     ]
    },
    "range": {
     "line number": [
      117,
      139
     ]
    },
    "zip": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.test_wls_and_ls_fit": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      345
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      335
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      327
     ]
    },
    "dipy.io.bvectxt.read_bvec_file": {
     "line number": [
      327
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      345,
      349,
      369
     ]
    },
    "dipy.reconst.dti.design_matrix": {
     "line number": [
      336
     ]
    },
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      333
     ]
    },
    "dipy.reconst.dti.linearity": {
     "line number": [
      376
     ]
    },
    "dipy.reconst.dti.planarity": {
     "line number": [
      377
     ]
    },
    "dipy.reconst.dti.sphericity": {
     "line number": [
      378
     ]
    },
    "numpy.array": {
     "line number": [
      330,
      331
     ]
    },
    "numpy.dot": {
     "line number": [
      338
     ]
    },
    "numpy.exp": {
     "line number": [
      338
     ]
    },
    "numpy.log": {
     "line number": [
      330
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      339,
      356,
      365,
      374
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      352,
      353,
      357,
      363,
      364,
      366,
      372,
      373,
      375,
      376,
      377,
      378
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      351,
      362,
      371
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      345
     ]
    },
    "tuple": {
     "line number": [
      362,
      371
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_dti.trace": {
  "data": {
   "shadows": "dipy.reconst.dti.trace"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      214
     ]
    },
    "dipy.reconst.tests.test_forecast._C": {
     "line number": [
      24
     ]
    },
    "dipy.reconst.tests.test_forecast.pytest": {
     "line number": [
      18
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      16
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_forecast.ForecastModel": {
  "data": {
   "shadows": "dipy.reconst.forecast.ForecastModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast._C": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "object": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_forecast.angular_similarity": {
  "data": {
   "shadows": "dipy.core.sphere_stats.angular_similarity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.data": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_forecast.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.get_3shell_gtab": {
  "data": {
   "shadows": "dipy.data.get_3shell_gtab"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.needs_cvxpy": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_forecast.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.peak_directions": {
  "data": {
   "shadows": "dipy.direction.peaks.peak_directions"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_forecast.setup_module": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "dipy.data.get_3shell_gtab": {
     "line number": [
      29
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      39
     ]
    },
    "dipy.reconst.tests.test_forecast.data": {
     "line number": [
      29,
      30,
      32,
      33,
      33,
      33,
      33,
      34,
      36,
      37,
      38,
      40
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      33
     ]
    },
    "int": {
     "line number": [
      40
     ]
    },
    "numpy.array": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_forecast.test_forecast_csd": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "dipy.data.get_sphere": {
     "line number": [
      62
     ]
    },
    "dipy.reconst.forecast.ForecastModel": {
     "line number": [
      63,
      68
     ]
    },
    "dipy.reconst.tests.test_forecast.data": {
     "line number": [
      63,
      64,
      64,
      65,
      68,
      68,
      69,
      70
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_forecast.test_forecast_indices": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "dipy.reconst.forecast.ForecastModel": {
     "line number": [
      129,
      153
     ]
    },
    "dipy.reconst.tests.test_forecast.data": {
     "line number": [
      129,
      130,
      131,
      136,
      137,
      139,
      139,
      140,
      140,
      141,
      141,
      149,
      150,
      150,
      153,
      153,
      154
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      150
     ]
    },
    "numpy.array": {
     "line number": [
      147
     ]
    },
    "numpy.sqrt": {
     "line number": [
      139
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      136,
      137,
      143,
      144,
      160,
      161,
      162,
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_forecast.test_forecast_odf": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "dipy.core.sphere_stats.angular_similarity": {
     "line number": [
      87,
      96,
      105,
      115,
      124
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      82
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      84,
      93,
      102,
      112,
      121
     ]
    },
    "dipy.reconst.forecast.ForecastModel": {
     "line number": [
      79,
      89,
      98,
      108,
      117
     ]
    },
    "dipy.reconst.tests.test_forecast.data": {
     "line number": [
      79,
      80,
      81,
      87,
      89,
      90,
      91,
      96,
      98,
      99,
      100,
      105,
      108,
      110,
      115,
      117,
      119,
      124
     ]
    },
    "len": {
     "line number": [
      85,
      94,
      103,
      113,
      122
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      86,
      95,
      104,
      114,
      123
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      85,
      94,
      103,
      113,
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_forecast.test_forecast_positive_constrain": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "dipy.data.get_sphere": {
     "line number": [
      52
     ]
    },
    "dipy.reconst.forecast.ForecastModel": {
     "line number": [
      45
     ]
    },
    "dipy.reconst.tests.test_forecast.data": {
     "line number": [
      45,
      46,
      47,
      49,
      50
     ]
    },
    "dipy.reconst.tests.test_forecast.needs_cvxpy": {
     "line number": [
      43
     ]
    },
    "numpy.pi": {
     "line number": [
      57
     ]
    },
    "numpy.sqrt": {
     "line number": [
      57
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      54,
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_forecast.test_forecast_predict": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "dipy.reconst.forecast.ForecastModel": {
     "line number": [
      168
     ]
    },
    "dipy.reconst.tests.test_forecast.data": {
     "line number": [
      168,
      169,
      170,
      174
     ]
    },
    "len": {
     "line number": [
      174
     ]
    },
    "numpy.sum": {
     "line number": [
      174
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_forecast.test_multivox_forecast": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "dipy.data.get_3shell_gtab": {
     "line number": [
      180
     ]
    },
    "dipy.reconst.forecast.ForecastModel": {
     "line number": [
      196
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      189,
      191,
      193
     ]
    },
    "len": {
     "line number": [
      188,
      204,
      207,
      210
     ]
    },
    "numpy.array": {
     "line number": [
      181
     ]
    },
    "numpy.sum": {
     "line number": [
      204,
      207,
      210
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      205,
      208,
      211
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      202
     ]
    },
    "numpy.zeros": {
     "line number": [
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.tests.test_fwdti.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.all_tensor_evecs": {
  "data": {
   "shadows": "dipy.sims.voxel.all_tensor_evecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.cholesky_to_lower_triangular": {
  "data": {
   "shadows": "dipy.reconst.fwdti.cholesky_to_lower_triangular"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.decompose_tensor": {
  "data": {
   "shadows": "dipy.reconst.dti.decompose_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.dti": {
  "data": {
   "shadows": "dipy.reconst.dti"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.fractional_anisotropy": {
  "data": {
   "shadows": "dipy.reconst.dti.fractional_anisotropy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.from_lower_triangular": {
  "data": {
   "shadows": "dipy.reconst.dti.from_lower_triangular"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.fwdti": {
  "data": {
   "shadows": "dipy.reconst.fwdti"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.fwdti_prediction": {
  "data": {
   "shadows": "dipy.reconst.fwdti.fwdti_prediction"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.lower_triangular_to_cholesky": {
  "data": {
   "shadows": "dipy.reconst.fwdti.lower_triangular_to_cholesky"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.multi_tensor_dki": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_dki"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.nls_fit_tensor": {
  "data": {
   "shadows": "dipy.reconst.fwdti.nls_fit_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.setup_module": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      29,
      34
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      27
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      28
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      42
     ]
    },
    "dipy.reconst.dti.decompose_tensor": {
     "line number": [
      39
     ]
    },
    "dipy.reconst.dti.from_lower_triangular": {
     "line number": [
      39
     ]
    },
    "dipy.sims.voxel.all_tensor_evecs": {
     "line number": [
      70
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      64
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      40
     ]
    },
    "len": {
     "line number": [
      49
     ]
    },
    "numpy.array": {
     "line number": [
      37,
      38,
      53,
      55
     ]
    },
    "numpy.concatenate": {
     "line number": [
      32,
      33,
      73
     ]
    },
    "numpy.ones": {
     "line number": [
      58
     ]
    },
    "numpy.zeros": {
     "line number": [
      49,
      50,
      51,
      60
     ]
    },
    "range": {
     "line number": [
      61,
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.single_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.single_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_fwdti.test_cholesky_functions": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": {
    "dipy.reconst.fwdti.cholesky_to_lower_triangular": {
     "line number": [
      242
     ]
    },
    "dipy.reconst.fwdti.lower_triangular_to_cholesky": {
     "line number": [
      241
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      238
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      243
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.test_fwdti_errors": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      194,
      199,
      202,
      215
     ]
    },
    "dipy.reconst.fwdti.FreeWaterTensorModel": {
     "line number": [
      194,
      197,
      202,
      205,
      214
     ]
    },
    "numpy.array": {
     "line number": [
      198
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      210,
      211
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      194,
      199,
      202,
      215
     ]
    },
    "numpy.zeros": {
     "line number": [
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.test_fwdti_jac_multi_voxel": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "dipy.reconst.fwdti.FreeWaterTensorModel": {
     "line number": [
      247,
      251,
      258
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      255,
      262
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.test_fwdti_multi_voxel": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "dipy.reconst.fwdti.FreeWaterTensorModel": {
     "line number": [
      135,
      146
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      141,
      142,
      143,
      152,
      153,
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.test_fwdti_precision": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "dipy.reconst.fwdti.FreeWaterTensorModel": {
     "line number": [
      123
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      120
     ]
    },
    "numpy.array": {
     "line number": [
      119
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      129,
      130,
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.test_fwdti_predictions": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "dipy.reconst.fwdti.FreeWaterTensorModel": {
     "line number": [
      173
     ]
    },
    "dipy.reconst.fwdti.fwdti_prediction": {
     "line number": [
      169,
      183
     ]
    },
    "dipy.sims.voxel.all_tensor_evecs": {
     "line number": [
      165
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      162
     ]
    },
    "numpy.array": {
     "line number": [
      161
     ]
    },
    "numpy.concatenate": {
     "line number": [
      167
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      170,
      175,
      180,
      184,
      186,
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.test_fwdti_restore": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "dipy.reconst.fwdti.FreeWaterTensorModel": {
     "line number": [
      226,
      231
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      223
     ]
    },
    "numpy.array": {
     "line number": [
      222
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      229,
      230,
      233,
      234
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.test_fwdti_singlevoxel": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "dipy.reconst.fwdti.FreeWaterTensorModel": {
     "line number": [
      83,
      94,
      105
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      80
     ]
    },
    "numpy.array": {
     "line number": [
      79
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      89,
      90,
      91,
      100,
      101,
      102,
      111,
      112,
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.test_md_regularization": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": {
    "dipy.reconst.fwdti.FreeWaterTensorModel": {
     "line number": [
      286
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      283
     ]
    },
    "numpy.array": {
     "line number": [
      282
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      289,
      290,
      291,
      300,
      301,
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.test_negative_s0": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": {
    "dipy.reconst.fwdti.FreeWaterTensorModel": {
     "line number": [
      313
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      309
     ]
    },
    "numpy.array": {
     "line number": [
      308
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      315,
      316,
      317,
      325,
      326,
      327
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.test_standalone_functions": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "dipy.reconst.dti.fractional_anisotropy": {
     "line number": [
      269,
      275
     ]
    },
    "dipy.reconst.fwdti.nls_fit_tensor": {
     "line number": [
      273
     ]
    },
    "dipy.reconst.fwdti.wls_fit_tensor": {
     "line number": [
      267
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      268,
      270,
      274,
      276
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_fwdti.wls_fit_tensor": {
  "data": {
   "shadows": "dipy.reconst.fwdti.wls_fit_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      79
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_gqi.GeneralizedQSamplingModel": {
  "data": {
   "shadows": "dipy.reconst.gqi.GeneralizedQSamplingModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.Sphere": {
  "data": {
   "shadows": "dipy.core.sphere.Sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.angular_similarity": {
  "data": {
   "shadows": "dipy.core.sphere_stats.angular_similarity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.create_unit_sphere": {
  "data": {
   "shadows": "dipy.core.subdivide_octahedron.create_unit_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.dsi_voxels": {
  "data": {
   "shadows": "dipy.data.dsi_voxels"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.gfa": {
  "data": {
   "shadows": "dipy.reconst.odf.gfa"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.peak_directions": {
  "data": {
   "shadows": "dipy.direction.peaks.peak_directions"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.sticks_and_ball": {
  "data": {
   "shadows": "dipy.sims.voxel.sticks_and_ball"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.sticks_and_ball_dummies": {
  "data": {
   "shadows": "dipy.reconst.tests.test_dsi.sticks_and_ball_dummies"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_gqi.test_gqi": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      29
     ]
    },
    "dipy.core.sphere_stats.angular_similarity": {
     "line number": [
      40,
      48
     ]
    },
    "dipy.core.subdivide_octahedron.create_unit_sphere": {
     "line number": [
      25
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      23
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      26
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      38,
      46,
      55
     ]
    },
    "dipy.reconst.gqi.GeneralizedQSamplingModel": {
     "line number": [
      33
     ]
    },
    "dipy.reconst.odf.gfa": {
     "line number": [
      59
     ]
    },
    "dipy.reconst.tests.test_dsi.sticks_and_ball_dummies": {
     "line number": [
      51
     ]
    },
    "dipy.sims.voxel.sticks_and_ball": {
     "line number": [
      30
     ]
    },
    "len": {
     "line number": [
      39,
      47,
      56,
      57,
      57,
      58
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      26
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      40,
      48
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      39,
      47,
      57,
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_gqi.test_mvoxel_gqi": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "dipy.data.dsi_voxels": {
     "line number": [
      63
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      64
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      72,
      75
     ]
    },
    "dipy.reconst.gqi.GeneralizedQSamplingModel": {
     "line number": [
      66
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      73,
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      509
     ]
    },
    "dipy.reconst.tests.test_ivim.pytest": {
     "line number": [
      29
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      28
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      510
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_ivim.IvimModel": {
  "data": {
   "shadows": "dipy.reconst.ivim.IvimModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.assert_array_less": {
  "data": {
   "shadows": "numpy.testing.assert_array_less"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.assert_greater_equal": {
  "data": {
   "shadows": "dipy.testing.assert_greater_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.generate_bvecs": {
  "data": {
   "shadows": "dipy.core.gradients.generate_bvecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.ivim_prediction": {
  "data": {
   "shadows": "dipy.reconst.ivim.ivim_prediction"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.needs_cvxpy": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_ivim.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_ivim.setup_module": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "dipy.core.gradients.generate_bvecs": {
     "line number": [
      43,
      77,
      85
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      44,
      78,
      86
     ]
    },
    "dipy.reconst.ivim.IvimModel": {
     "line number": [
      65,
      66,
      103
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      52
     ]
    },
    "len": {
     "line number": [
      42,
      57,
      98
     ]
    },
    "numpy.array": {
     "line number": [
      39,
      48,
      50,
      73,
      80,
      90,
      106
     ]
    },
    "numpy.zeros": {
     "line number": [
      57,
      61,
      98,
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.single_exponential": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "numpy.exp": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_D": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      387,
      388
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_D_star": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": {
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      379,
      380
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_D_star_vp": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": {
    "dipy.reconst.tests.test_ivim.needs_cvxpy": {
     "line number": [
      491
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      497
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_D_vp": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": {
    "dipy.reconst.tests.test_ivim.needs_cvxpy": {
     "line number": [
      500
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      506
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_S0": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      361,
      362
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_b0_threshold_greater_than0": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      232
     ]
    },
    "dipy.core.gradients.generate_bvecs": {
     "line number": [
      230
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      231
     ]
    },
    "dipy.reconst.ivim.IvimModel": {
     "line number": [
      233
     ]
    },
    "len": {
     "line number": [
      229
     ]
    },
    "numpy.array": {
     "line number": [
      226
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_bounds_x0": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": {
    "dipy.reconst.ivim.ivim_prediction": {
     "line number": [
      256
     ]
    },
    "numpy.array": {
     "line number": [
      255
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      261
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_estimate_f_D_star": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": {
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      415
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_estimate_linear_fit": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": {
    "dipy.reconst.tests.test_ivim.single_exponential": {
     "line number": [
      395,
      401
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      396,
      402
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_fit_object": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      285,
      294,
      295,
      296,
      297,
      298
     ]
    },
    "TypeError": {
     "line number": [
      292
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      287,
      300
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      285,
      292,
      294,
      295,
      296,
      297,
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_fit_one_stage": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": {
    "dipy.reconst.ivim.IvimModel": {
     "line number": [
      425
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      438,
      439
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_ivim_errors": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": {
    "dipy.reconst.ivim.IvimModel": {
     "line number": [
      173
     ]
    },
    "numpy.inf": {
     "line number": [
      174
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      179,
      180
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_leastsq_error": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      471,
      474
     ]
    },
    "dipy.reconst.tests.test_ivim.warnings": {
     "line number": [
      470,
      471
     ]
    },
    "dipy.testing.assert_greater_equal": {
     "line number": [
      473
     ]
    },
    "issubclass": {
     "line number": [
      474
     ]
    },
    "len": {
     "line number": [
      473
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      474,
      475,
      476
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      478
     ]
    },
    "str": {
     "line number": [
      475,
      476
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_leastsq_failing": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      448,
      451
     ]
    },
    "dipy.reconst.tests.test_ivim.warnings": {
     "line number": [
      447,
      448
     ]
    },
    "dipy.testing.assert_greater_equal": {
     "line number": [
      450,
      452,
      456
     ]
    },
    "issubclass": {
     "line number": [
      451
     ]
    },
    "len": {
     "line number": [
      450,
      452,
      456
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      460,
      461
     ]
    },
    "str": {
     "line number": [
      457
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_mask": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      195
     ]
    },
    "numpy.array": {
     "line number": [
      188
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      193,
      194
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      192
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      195
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_multiple_b0": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "dipy.reconst.ivim.IvimModel": {
     "line number": [
      323
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      318
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_multivoxel": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      161,
      162
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      160
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_no_b0": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      330
     ]
    },
    "dipy.reconst.ivim.IvimModel": {
     "line number": [
      330
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      330
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_noisy_fit": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      347
     ]
    },
    "dipy.reconst.ivim.IvimModel": {
     "line number": [
      342
     ]
    },
    "dipy.reconst.tests.test_ivim.warnings": {
     "line number": [
      343
     ]
    },
    "issubclass": {
     "line number": [
      347
     ]
    },
    "len": {
     "line number": [
      345
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      347,
      348,
      349,
      351,
      352
     ]
    },
    "numpy.testing.assert_array_less": {
     "line number": [
      354
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      345
     ]
    },
    "str": {
     "line number": [
      348,
      350,
      351,
      352
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_perfusion_fraction": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": {
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      370,
      371
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_perfusion_fraction_vp": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": {
    "dipy.reconst.tests.test_ivim.needs_cvxpy": {
     "line number": [
      481
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      487
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_predict": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": {
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      270,
      272,
      277
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_shape": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      309,
      311
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_single_voxel_fit": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "dipy.reconst.ivim.ivim_prediction": {
     "line number": [
      137
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      141,
      142,
      147
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      139,
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.test_with_higher_S0": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      208
     ]
    },
    "numpy.array": {
     "line number": [
      205,
      206
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      217,
      218
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_ivim.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      839
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      840
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_mapmri.MapmriModel": {
  "data": {
   "shadows": "dipy.reconst.mapmri.MapmriModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.add_noise": {
  "data": {
   "shadows": "dipy.sims.voxel.add_noise"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.angular_similarity": {
  "data": {
   "shadows": "dipy.core.sphere_stats.angular_similarity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.create_unit_sphere": {
  "data": {
   "shadows": "dipy.core.subdivide_octahedron.create_unit_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.cylinders_and_ball_soderman": {
  "data": {
   "shadows": "dipy.sims.voxel.cylinders_and_ball_soderman"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.dti": {
  "data": {
   "shadows": "dipy.reconst.dti"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.factorial": {
  "data": {
   "shadows": "math.factorial"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.gamma": {
  "data": {
   "shadows": "scipy.special.gamma"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.generate_signal_crossing": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      38
     ]
    },
    "numpy.array": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.get_gtab_taiwan_dsi": {
  "data": {
   "shadows": "dipy.data.get_gtab_taiwan_dsi"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.gfa": {
  "data": {
   "shadows": "dipy.reconst.odf.gfa"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.int_func": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "float": {
     "line number": [
      29
     ]
    },
    "math.factorial": {
     "line number": [
      29,
      30
     ]
    },
    "numpy.sqrt": {
     "line number": [
      29,
      30
     ]
    },
    "scipy.special.gamma": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.integrate": {
  "data": {
   "shadows": "scipy.integrate"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.mapmri": {
  "data": {
   "shadows": "dipy.reconst.mapmri"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.mapmri_index_matrix": {
  "data": {
   "shadows": "dipy.reconst.mapmri.mapmri_index_matrix"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.multi_tensor_pdf": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_pdf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.peak_directions": {
  "data": {
   "shadows": "dipy.direction.peaks.peak_directions"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.sh_to_sf": {
  "data": {
   "shadows": "dipy.reconst.shm.sh_to_sf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.single_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.single_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.sticks_and_ball_dummies": {
  "data": {
   "shadows": "dipy.reconst.tests.test_dsi.sticks_and_ball_dummies"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.test_estimate_radius_with_rtap": {
  "data": {
   "lineno": 607,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      608
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      616,
      626
     ]
    },
    "dipy.sims.voxel.cylinders_and_ball_soderman": {
     "line number": [
      612
     ]
    },
    "numpy.pi": {
     "line number": [
      609,
      620,
      631
     ]
    },
    "numpy.sqrt": {
     "line number": [
      620,
      631
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      621,
      632
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_laplacian_regularization": {
  "data": {
   "lineno": 692,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      693
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      699,
      702,
      705,
      741,
      745,
      749
     ]
    },
    "dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix": {
     "line number": [
      771
     ]
    },
    "dipy.reconst.mapmri.mapmri_laplacian_reg_matrix": {
     "line number": [
      726
     ]
    },
    "dipy.reconst.tests.test_mapmri.generate_signal_crossing": {
     "line number": [
      695
     ]
    },
    "dipy.sims.voxel.add_noise": {
     "line number": [
      696
     ]
    },
    "numpy.dot": {
     "line number": [
      733,
      734,
      735,
      736,
      777,
      778,
      779,
      780
     ]
    },
    "numpy.linspace": {
     "line number": [
      698
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      722,
      767
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      712,
      717,
      738,
      757,
      762,
      782
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_compare_fitted_pdf_with_multi_tensor": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      365
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      374
     ]
    },
    "dipy.reconst.mapmri.create_rspace": {
     "line number": [
      371
     ]
    },
    "dipy.reconst.tests.test_mapmri.generate_signal_crossing": {
     "line number": [
      367
     ]
    },
    "dipy.sims.voxel.multi_tensor_pdf": {
     "line number": [
      383
     ]
    },
    "numpy.array": {
     "line number": [
      380
     ]
    },
    "numpy.sqrt": {
     "line number": [
      387
     ]
    },
    "numpy.sum": {
     "line number": [
      387
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      388
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_initialize_gcv": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      129
     ]
    },
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      127
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      129
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_initialize_pos_radius": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      138,
      141
     ]
    },
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      136
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      138,
      141
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      138,
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_initialize_radial_error": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      118,
      120
     ]
    },
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      116
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      118,
      120
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      118,
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_isotropic_design_matrix_separability": {
  "data": {
   "lineno": 591,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      592
     ]
    },
    "dipy.reconst.mapmri.mapmri_isotropic_M_mu_dependent": {
     "line number": [
      600
     ]
    },
    "dipy.reconst.mapmri.mapmri_isotropic_M_mu_independent": {
     "line number": [
      599
     ]
    },
    "dipy.reconst.mapmri.mapmri_isotropic_phi_matrix": {
     "line number": [
      598
     ]
    },
    "numpy.pi": {
     "line number": [
      593,
      594
     ]
    },
    "numpy.sqrt": {
     "line number": [
      594
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      604
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_isotropic_static_scale_factor": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      249
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      259,
      266
     ]
    },
    "dipy.reconst.tests.test_mapmri.platform": {
     "line number": [
      286
     ]
    },
    "dipy.reconst.tests.test_mapmri.time": {
     "line number": [
      273,
      275,
      277,
      279
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      255
     ]
    },
    "numpy.all": {
     "line number": [
      282
     ]
    },
    "numpy.pi": {
     "line number": [
      251
     ]
    },
    "numpy.r_": {
     "line number": [
      255
     ]
    },
    "numpy.sqrt": {
     "line number": [
      252
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      295
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      282,
      287
     ]
    },
    "numpy.tile": {
     "line number": [
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_laplacian_anisotropic": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      471
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      475
     ]
    },
    "dipy.reconst.mapmri.mapmri_laplacian_reg_matrix": {
     "line number": [
      488
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      473
     ]
    },
    "numpy.dot": {
     "line number": [
      493,
      493
     ]
    },
    "numpy.pi": {
     "line number": [
      478,
      483
     ]
    },
    "numpy.r_": {
     "line number": [
      473
     ]
    },
    "numpy.sqrt": {
     "line number": [
      484
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      495
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_laplacian_isotropic": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      499
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      503
     ]
    },
    "dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix": {
     "line number": [
      517
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      501
     ]
    },
    "numpy.dot": {
     "line number": [
      521,
      521
     ]
    },
    "numpy.pi": {
     "line number": [
      507,
      512
     ]
    },
    "numpy.r_": {
     "line number": [
      501
     ]
    },
    "numpy.sqrt": {
     "line number": [
      513
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      523
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_metrics_anisotropic": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      425
     ]
    },
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      392
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      398
     ]
    },
    "dipy.reconst.tests.test_mapmri.generate_signal_crossing": {
     "line number": [
      394
     ]
    },
    "dipy.reconst.tests.test_mapmri.warnings": {
     "line number": [
      419
     ]
    },
    "issubclass": {
     "line number": [
      425
     ]
    },
    "len": {
     "line number": [
      423
     ]
    },
    "numpy.pi": {
     "line number": [
      401,
      404,
      406,
      407,
      412
     ]
    },
    "numpy.sqrt": {
     "line number": [
      404,
      406,
      407
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      425,
      426
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      416,
      417,
      418,
      429,
      430,
      431,
      432,
      433
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      423
     ]
    },
    "str": {
     "line number": [
      427
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_metrics_isotropic": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      437
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      443
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      439
     ]
    },
    "numpy.pi": {
     "line number": [
      448,
      451,
      453,
      454,
      459
     ]
    },
    "numpy.r_": {
     "line number": [
      439
     ]
    },
    "numpy.sqrt": {
     "line number": [
      451,
      453,
      454
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      463,
      464,
      465,
      466,
      467
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_number_of_coefficients": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "dipy.reconst.mapmri.mapmri_index_matrix": {
     "line number": [
      105
     ]
    },
    "numpy.round": {
     "line number": [
      108
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_odf": {
  "data": {
   "lineno": 785,
   "symbols_in_volume": {
    "dipy.core.sphere_stats.angular_similarity": {
     "line number": [
      806,
      813
     ]
    },
    "dipy.core.subdivide_octahedron.create_unit_sphere": {
     "line number": [
      799
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      789
     ]
    },
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      786
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      803,
      810,
      820
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      795,
      828
     ]
    },
    "dipy.reconst.odf.gfa": {
     "line number": [
      824
     ]
    },
    "dipy.reconst.shm.sh_to_sf": {
     "line number": [
      835
     ]
    },
    "dipy.reconst.tests.test_dsi.sticks_and_ball_dummies": {
     "line number": [
      815
     ]
    },
    "dipy.reconst.tests.test_mapmri.generate_signal_crossing": {
     "line number": [
      793
     ]
    },
    "len": {
     "line number": [
      804,
      811,
      821,
      822,
      822,
      823
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      805,
      812,
      836
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      804,
      811,
      822,
      824
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_pdf_integral_unity": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": {
    "dipy.data.default_sphere": {
     "line number": [
      322
     ]
    },
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      319
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      325,
      348
     ]
    },
    "dipy.reconst.mapmri.create_rspace": {
     "line number": [
      347
     ]
    },
    "dipy.reconst.mapmri.mapmri_index_matrix": {
     "line number": [
      331
     ]
    },
    "dipy.reconst.tests.test_mapmri.generate_signal_crossing": {
     "line number": [
      321
     ]
    },
    "dipy.reconst.tests.test_mapmri.int_func": {
     "line number": [
      335,
      335,
      335
     ]
    },
    "numpy.pi": {
     "line number": [
      341,
      360
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      337,
      342,
      357,
      361
     ]
    },
    "range": {
     "line number": [
      333
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_signal_fitting": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      146
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      150,
      161,
      175,
      187,
      203,
      218,
      233
     ]
    },
    "dipy.reconst.mapmri.have_cvxpy": {
     "line number": [
      216
     ]
    },
    "dipy.reconst.tests.test_mapmri.generate_signal_crossing": {
     "line number": [
      148
     ]
    },
    "numpy.ones": {
     "line number": [
      164,
      167
     ]
    },
    "numpy.sqrt": {
     "line number": [
      157,
      170,
      183,
      197,
      213,
      229,
      244
     ]
    },
    "numpy.sum": {
     "line number": [
      157,
      170,
      183,
      197,
      213,
      229,
      244
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      158,
      172,
      184,
      198,
      214,
      230,
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_mapmri_signal_fitting_over_radial_order": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      300
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      309
     ]
    },
    "dipy.reconst.tests.test_mapmri.generate_signal_crossing": {
     "line number": [
      302
     ]
    },
    "enumerate": {
     "line number": [
      308
     ]
    },
    "len": {
     "line number": [
      306
     ]
    },
    "numpy.diff": {
     "line number": [
      315
     ]
    },
    "numpy.mean": {
     "line number": [
      313
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      315
     ]
    },
    "numpy.zeros": {
     "line number": [
      306
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_orthogonality_basis_functions": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "dipy.reconst.mapmri.mapmri_isotropic_radial_signal_basis": {
     "line number": [
      77,
      79,
      82,
      84,
      87,
      89,
      92,
      94
     ]
    },
    "dipy.reconst.mapmri.mapmri_phi_1d": {
     "line number": [
      50,
      51,
      54,
      55,
      58,
      59,
      62,
      63
     ]
    },
    "numpy.real": {
     "line number": [
      50,
      51,
      54,
      55,
      58,
      59,
      62,
      63
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      67,
      68,
      69,
      70,
      98,
      99,
      100,
      101
     ]
    },
    "scipy.integrate.quad": {
     "line number": [
      49,
      53,
      57,
      61,
      76,
      81,
      86,
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_positivity_constraint": {
  "data": {
   "lineno": 635,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      637
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      650,
      657,
      670,
      678
     ]
    },
    "dipy.reconst.mapmri.create_rspace": {
     "line number": [
      644
     ]
    },
    "dipy.reconst.mapmri.have_cvxpy": {
     "line number": [
      635
     ]
    },
    "dipy.reconst.tests.test_mapmri.generate_signal_crossing": {
     "line number": [
      639
     ]
    },
    "dipy.reconst.tests.test_mapmri.pytest": {
     "line number": [
      635
     ]
    },
    "dipy.sims.voxel.add_noise": {
     "line number": [
      640
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      666,
      688
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.test_signal_fitting_equality_anisotropic_isotropic": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      527
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      534
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      567
     ]
    },
    "dipy.reconst.mapmri.create_rspace": {
     "line number": [
      532
     ]
    },
    "dipy.reconst.mapmri.isotropic_scale_factor": {
     "line number": [
      539
     ]
    },
    "dipy.reconst.mapmri.mapmri_STU_reg_matrices": {
     "line number": [
      582
     ]
    },
    "dipy.reconst.mapmri.mapmri_index_matrix": {
     "line number": [
      581
     ]
    },
    "dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix": {
     "line number": [
      579
     ]
    },
    "dipy.reconst.mapmri.mapmri_isotropic_phi_matrix": {
     "line number": [
      548
     ]
    },
    "dipy.reconst.mapmri.mapmri_isotropic_psi_matrix": {
     "line number": [
      549
     ]
    },
    "dipy.reconst.mapmri.mapmri_laplacian_reg_matrix": {
     "line number": [
      583
     ]
    },
    "dipy.reconst.mapmri.mapmri_phi_matrix": {
     "line number": [
      545
     ]
    },
    "dipy.reconst.mapmri.mapmri_psi_matrix": {
     "line number": [
      546
     ]
    },
    "dipy.reconst.tests.test_mapmri.generate_signal_crossing": {
     "line number": [
      529
     ]
    },
    "numpy.array": {
     "line number": [
      540
     ]
    },
    "numpy.dot": {
     "line number": [
      551,
      552,
      555,
      556,
      560,
      561,
      586,
      586,
      587,
      587
     ]
    },
    "numpy.linalg.pinv": {
     "line number": [
      551,
      552
     ]
    },
    "numpy.ones_like": {
     "line number": [
      564
     ]
    },
    "numpy.pi": {
     "line number": [
      536,
      542
     ]
    },
    "numpy.sqrt": {
     "line number": [
      542
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      588
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      557,
      563,
      575
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mapmri.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mapmri.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      99
     ]
    },
    "dipy.reconst.tests.test_mcsd.pytest": {
     "line number": [
      15
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      13
     ]
    },
    "numpy.array": {
     "line number": [
      20
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_mcsd.GradientTable": {
  "data": {
   "shadows": "dipy.core.gradients.GradientTable"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd.MultiShellDeconvModel": {
  "data": {
   "shadows": "dipy.reconst.mcsd.MultiShellDeconvModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd._expand": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "len": {
     "line number": [
      24
     ]
    },
    "numpy.concatenate": {
     "line number": [
      26
     ]
    },
    "numpy.zeros": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mcsd.csf_md": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_mcsd.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd.evals_d": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_mcsd.get_3shell_gtab": {
  "data": {
   "shadows": "dipy.data.get_3shell_gtab"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd.gm_md": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_mcsd.mcsd": {
  "data": {
   "shadows": "dipy.reconst.mcsd"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd.multi_shell_fiber_response": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_shell_fiber_response"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd.needs_cvxpy": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_mcsd.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd.shm": {
  "data": {
   "shadows": "dipy.reconst.shm"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_mcsd.test_MultiShellDeconvModel": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "dipy.data.get_3shell_gtab": {
     "line number": [
      73
     ]
    },
    "dipy.reconst.mcsd.MultiShellDeconvModel": {
     "line number": [
      88
     ]
    },
    "dipy.reconst.mcsd.have_cvxpy": {
     "line number": [
      70
     ]
    },
    "dipy.reconst.tests.test_mcsd.csf_md": {
     "line number": [
      83,
      87
     ]
    },
    "dipy.reconst.tests.test_mcsd.evals_d": {
     "line number": [
      87
     ]
    },
    "dipy.reconst.tests.test_mcsd.gm_md": {
     "line number": [
      82,
      87
     ]
    },
    "dipy.reconst.tests.test_mcsd.pytest": {
     "line number": [
      70
     ]
    },
    "dipy.sims.voxel.multi_shell_fiber_response": {
     "line number": [
      86
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      80
     ]
    },
    "numpy.array": {
     "line number": [
      76,
      77
     ]
    },
    "numpy.exp": {
     "line number": [
      82,
      83
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      93,
      96
     ]
    },
    "sum": {
     "line number": [
      90
     ]
    },
    "zip": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mcsd.test_compartments": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      67
     ]
    },
    "dipy.data.get_3shell_gtab": {
     "line number": [
      63
     ]
    },
    "dipy.reconst.mcsd.MultiShellDeconvModel": {
     "line number": [
      67
     ]
    },
    "dipy.reconst.mcsd.have_cvxpy": {
     "line number": [
      60
     ]
    },
    "dipy.reconst.tests.test_mcsd.csf_md": {
     "line number": [
      66
     ]
    },
    "dipy.reconst.tests.test_mcsd.evals_d": {
     "line number": [
      66
     ]
    },
    "dipy.reconst.tests.test_mcsd.gm_md": {
     "line number": [
      66
     ]
    },
    "dipy.reconst.tests.test_mcsd.pytest": {
     "line number": [
      60
     ]
    },
    "dipy.sims.voxel.multi_shell_fiber_response": {
     "line number": [
      65
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_mcsd.test_mcsd_model_delta": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "dipy.core.gradients.GradientTable": {
     "line number": [
      49
     ]
    },
    "dipy.data.default_sphere.phi": {
     "line number": [
      40
     ]
    },
    "dipy.data.default_sphere.theta": {
     "line number": [
      40
     ]
    },
    "dipy.data.default_sphere.vertices": {
     "line number": [
      49
     ]
    },
    "dipy.data.get_3shell_gtab": {
     "line number": [
      33
     ]
    },
    "dipy.reconst.mcsd.MultiShellDeconvModel": {
     "line number": [
      37
     ]
    },
    "dipy.reconst.mcsd.have_cvxpy": {
     "line number": [
      30
     ]
    },
    "dipy.reconst.shm.real_sph_harm": {
     "line number": [
      41
     ]
    },
    "dipy.reconst.tests.test_mcsd._expand": {
     "line number": [
      46
     ]
    },
    "dipy.reconst.tests.test_mcsd.csf_md": {
     "line number": [
      35
     ]
    },
    "dipy.reconst.tests.test_mcsd.evals_d": {
     "line number": [
      35
     ]
    },
    "dipy.reconst.tests.test_mcsd.gm_md": {
     "line number": [
      36
     ]
    },
    "dipy.reconst.tests.test_mcsd.pytest": {
     "line number": [
      30
     ]
    },
    "dipy.sims.voxel.multi_shell_fiber_response": {
     "line number": [
      35
     ]
    },
    "enumerate": {
     "line number": [
      48
     ]
    },
    "numpy.dot": {
     "line number": [
      51
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      52,
      57
     ]
    },
    "numpy.unique": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_msdki": {
  "data": {
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      17,
      22
     ]
    },
    "dipy.core.gradients.round_bvals": {
     "line number": [
      16
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      14
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      15
     ]
    },
    "dipy.reconst.tests.test_msdki.DWI": {
     "line number": [
      61
     ]
    },
    "dipy.reconst.tests.test_msdki.De": {
     "line number": [
      29,
      29,
      29,
      36,
      37,
      62,
      63
     ]
    },
    "dipy.reconst.tests.test_msdki.Di": {
     "line number": [
      29,
      29,
      29,
      36,
      37,
      62,
      63
     ]
    },
    "dipy.reconst.tests.test_msdki.MDWI": {
     "line number": [
      69,
      70,
      71,
      72
     ]
    },
    "dipy.reconst.tests.test_msdki.MDgt": {
     "line number": [
      37,
      38
     ]
    },
    "dipy.reconst.tests.test_msdki.MDgt_multi": {
     "line number": [
      64
     ]
    },
    "dipy.reconst.tests.test_msdki.MKgt": {
     "line number": [
      38
     ]
    },
    "dipy.reconst.tests.test_msdki.MKgt_multi": {
     "line number": [
      65
     ]
    },
    "dipy.reconst.tests.test_msdki.S0gt_multi": {
     "line number": [
      66
     ]
    },
    "dipy.reconst.tests.test_msdki.bvals": {
     "line number": [
      17,
      20,
      20,
      20
     ]
    },
    "dipy.reconst.tests.test_msdki.bvals_3s": {
     "line number": [
      22
     ]
    },
    "dipy.reconst.tests.test_msdki.bvecs_3s": {
     "line number": [
      22
     ]
    },
    "dipy.reconst.tests.test_msdki.f": {
     "line number": [
      31,
      31,
      36,
      36,
      37,
      37,
      57,
      57,
      62,
      62,
      63,
      63
     ]
    },
    "dipy.reconst.tests.test_msdki.frac": {
     "line number": [
      59
     ]
    },
    "dipy.reconst.tests.test_msdki.frac_sph": {
     "line number": [
      33
     ]
    },
    "dipy.reconst.tests.test_msdki.gtab_3s": {
     "line number": [
      32,
      46,
      58
     ]
    },
    "dipy.reconst.tests.test_msdki.md_i": {
     "line number": [
      63,
      64,
      67
     ]
    },
    "dipy.reconst.tests.test_msdki.mevals_sph": {
     "line number": [
      32,
      58
     ]
    },
    "dipy.reconst.tests.test_msdki.mk_i": {
     "line number": [
      65,
      68
     ]
    },
    "dipy.reconst.tests.test_msdki.msignal_sph": {
     "line number": [
      40,
      41,
      42,
      43
     ]
    },
    "dipy.reconst.tests.test_msdki.params_multi": {
     "line number": [
      67,
      68
     ]
    },
    "dipy.reconst.tests.test_msdki.random": {
     "line number": [
      56
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      32,
      58
     ]
    },
    "len": {
     "line number": [
      46
     ]
    },
    "numpy.array": {
     "line number": [
      29,
      38
     ]
    },
    "numpy.concatenate": {
     "line number": [
      20,
      21
     ]
    },
    "numpy.zeros": {
     "line number": [
      39,
      46,
      47,
      48,
      49,
      50,
      51
     ]
    },
    "range": {
     "line number": [
      53,
      54,
      55
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_msdki.DWI": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.De": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.Di": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.MDWI": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.MDgt": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.MDgt_multi": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.MKgt": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.MKgt_multi": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.S0gt_multi": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.bvals": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.bvals_3s": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.bvecs_3s": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.f": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.frac": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.frac_sph": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.gtab": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.gtab_3s": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.md_i": {
  "data": {
   "lineno": 62
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.mevals_sph": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.mk_i": {
  "data": {
   "lineno": 63
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.msdki": {
  "data": {
   "shadows": "dipy.reconst.msdki"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.msignal_sph": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.multi_tensor_dki": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_dki"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.params_multi": {
  "data": {
   "lineno": 51
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.params_single": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_msdki.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.round_bvals": {
  "data": {
   "shadows": "dipy.core.gradients.round_bvals"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_msdki.test_design_matrix": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "dipy.core.gradients.unique_bvals": {
     "line number": [
      139
     ]
    },
    "dipy.reconst.msdki.design_matrix": {
     "line number": [
      140
     ]
    },
    "dipy.reconst.tests.test_msdki.bvals_3s": {
     "line number": [
      139
     ]
    },
    "numpy.ones": {
     "line number": [
      141
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_msdki.test_errors": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      132
     ]
    },
    "ValueError": {
     "line number": [
      111,
      115,
      121
     ]
    },
    "aux_test_fun": {
     "line number": [
      134
     ]
    },
    "dipy.reconst.msdki.MeanDiffusionKurtosisModel": {
     "line number": [
      111,
      115,
      120
     ]
    },
    "dipy.reconst.tests.test_msdki.DWI": {
     "line number": [
      121,
      131
     ]
    },
    "dipy.reconst.tests.test_msdki.MKgt_multi": {
     "line number": [
      135
     ]
    },
    "dipy.reconst.tests.test_msdki.gtab": {
     "line number": [
      111
     ]
    },
    "dipy.reconst.tests.test_msdki.gtab_3s": {
     "line number": [
      115,
      120
     ]
    },
    "numpy.ones": {
     "line number": [
      119
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      135
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      111,
      115,
      121,
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_msdki.test_errors.aux_test_fun": {
  "data": {
   "lineno": 127
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_msdki.test_msdki_predict": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "dipy.reconst.msdki.MeanDiffusionKurtosisModel": {
     "line number": [
      76
     ]
    },
    "dipy.reconst.tests.test_msdki.DWI": {
     "line number": [
      84,
      90,
      92,
      98,
      100,
      103,
      104,
      105
     ]
    },
    "dipy.reconst.tests.test_msdki.gtab_3s": {
     "line number": [
      76,
      88,
      91,
      96,
      99,
      104
     ]
    },
    "dipy.reconst.tests.test_msdki.params_multi": {
     "line number": [
      83
     ]
    },
    "dipy.reconst.tests.test_msdki.params_single": {
     "line number": [
      79
     ]
    },
    "numpy.ones": {
     "line number": [
      104
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      80,
      84,
      89,
      92,
      97,
      100,
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_msdki.test_msdki_statistics": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "dipy.core.gradients.unique_bvals": {
     "line number": [
      164
     ]
    },
    "dipy.reconst.msdki.MeanDiffusionKurtosisModel": {
     "line number": [
      171,
      200
     ]
    },
    "dipy.reconst.msdki.design_matrix": {
     "line number": [
      165
     ]
    },
    "dipy.reconst.msdki.mean_signal_bvalue": {
     "line number": [
      166
     ]
    },
    "dipy.reconst.msdki.wls_fit_msdki": {
     "line number": [
      167
     ]
    },
    "dipy.reconst.tests.test_msdki.DWI": {
     "line number": [
      166,
      172,
      186,
      189,
      201
     ]
    },
    "dipy.reconst.tests.test_msdki.MDgt": {
     "line number": [
      183
     ]
    },
    "dipy.reconst.tests.test_msdki.MDgt_multi": {
     "line number": [
      169,
      176,
      193,
      195,
      197
     ]
    },
    "dipy.reconst.tests.test_msdki.MKgt": {
     "line number": [
      182
     ]
    },
    "dipy.reconst.tests.test_msdki.MKgt_multi": {
     "line number": [
      168,
      175,
      192,
      194,
      196,
      203
     ]
    },
    "dipy.reconst.tests.test_msdki.S0gt_multi": {
     "line number": [
      202
     ]
    },
    "dipy.reconst.tests.test_msdki.bvals_3s": {
     "line number": [
      164
     ]
    },
    "dipy.reconst.tests.test_msdki.gtab_3s": {
     "line number": [
      166,
      171,
      200
     ]
    },
    "numpy.ones": {
     "line number": [
      186
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      168,
      169,
      175,
      176,
      182,
      183,
      192,
      193,
      194,
      195,
      196,
      197,
      202,
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_msdki.test_msignal": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "dipy.reconst.msdki.mean_signal_bvalue": {
     "line number": [
      149,
      154
     ]
    },
    "dipy.reconst.tests.test_msdki.DWI": {
     "line number": [
      149
     ]
    },
    "dipy.reconst.tests.test_msdki.MDWI": {
     "line number": [
      150
     ]
    },
    "dipy.reconst.tests.test_msdki.gtab_3s": {
     "line number": [
      149,
      154
     ]
    },
    "dipy.reconst.tests.test_msdki.msignal_sph": {
     "line number": [
      156
     ]
    },
    "numpy.array": {
     "line number": [
      151,
      155
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      150,
      151,
      155,
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_msdki.unique_bvals": {
  "data": {
   "shadows": "dipy.core.gradients.unique_bvals"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_multi_voxel": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.tests.test_multi_voxel.CallableArray": {
  "data": {
   "shadows": "dipy.reconst.multi_voxel.CallableArray"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_multi_voxel._squash": {
  "data": {
   "shadows": "dipy.reconst.multi_voxel._squash"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_multi_voxel.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_multi_voxel.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_multi_voxel.multi_voxel_fit": {
  "data": {
   "shadows": "dipy.reconst.multi_voxel.multi_voxel_fit"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_multi_voxel.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_multi_voxel.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_multi_voxel.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_multi_voxel.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_multi_voxel.test_CallableArray": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "callarray": {
     "line number": [
      99,
      102,
      104
     ]
    },
    "dipy.reconst.multi_voxel.CallableArray": {
     "line number": [
      93
     ]
    },
    "numpy.arange": {
     "line number": [
      96
     ]
    },
    "numpy.empty": {
     "line number": [
      97
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      99,
      104
     ]
    },
    "object": {
     "line number": [
      93
     ]
    },
    "range": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_multi_voxel.test_multi_voxel_fit": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "SillyFit": {
     "line number": [
      141,
      179
     ]
    },
    "SillyModel": {
     "line number": [
      138
     ]
    },
    "dipy.core.sphere.unit_icosahedron": {
     "line number": [
      150,
      167
     ]
    },
    "numpy.empty": {
     "line number": [
      146
     ]
    },
    "numpy.ones": {
     "line number": [
      149,
      153
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      148,
      150,
      166,
      169,
      170
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      141,
      151,
      153,
      168,
      173,
      176,
      179,
      180
     ]
    },
    "numpy.zeros": {
     "line number": [
      139,
      144,
      156,
      160,
      162,
      171
     ]
    },
    "type": {
     "line number": [
      141,
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_multi_voxel.test_multi_voxel_fit.SillyFit": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "object": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_multi_voxel.test_multi_voxel_fit.SillyFit.__init__": {
  "data": {
   "lineno": 120
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_multi_voxel.test_multi_voxel_fit.SillyFit.directions": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "numpy.random.randint": {
     "line number": [
      131
     ]
    },
    "numpy.zeros": {
     "line number": [
      132
     ]
    },
    "property": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_multi_voxel.test_multi_voxel_fit.SillyFit.odf": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "len": {
     "line number": [
      127
     ]
    },
    "numpy.ones": {
     "line number": [
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_multi_voxel.test_multi_voxel_fit.SillyFit.predict": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_multi_voxel.test_multi_voxel_fit.SillyModel": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "object": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_multi_voxel.test_multi_voxel_fit.SillyModel.fit": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "SillyFit": {
     "line number": [
      113
     ]
    },
    "dipy.reconst.multi_voxel.multi_voxel_fit": {
     "line number": [
      111
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_multi_voxel.test_multi_voxel_fit.SillyModel.predict": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_multi_voxel.test_squash": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "dipy.reconst.multi_voxel._squash": {
     "line number": [
      15,
      16,
      20,
      21,
      26,
      27,
      31,
      32,
      36,
      49,
      52,
      60,
      62,
      64,
      66,
      68,
      76,
      82,
      85,
      88
     ]
    },
    "dt0": {
     "line number": [
      46,
      51
     ]
    },
    "float": {
     "line number": [
      13,
      56
     ]
    },
    "functools.reduce": {
     "line number": [
      50,
      53
     ]
    },
    "numpy.add": {
     "line number": [
      50,
      53
     ]
    },
    "numpy.array": {
     "line number": [
      84
     ]
    },
    "numpy.asarray": {
     "line number": [
      14
     ]
    },
    "numpy.bool_": {
     "line number": [
      43,
      84
     ]
    },
    "numpy.ndindex": {
     "line number": [
      23
     ]
    },
    "numpy.ones": {
     "line number": [
      13,
      24,
      25,
      35,
      56,
      73,
      74
     ]
    },
    "numpy.sctypes": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      15,
      20,
      26,
      31,
      60,
      62,
      64,
      66,
      68,
      76,
      82,
      85,
      88
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      16,
      21,
      27,
      32,
      49,
      52
     ]
    },
    "numpy.zeros": {
     "line number": [
      39,
      40,
      45,
      48,
      71
     ]
    },
    "object": {
     "line number": [
      14,
      39,
      40,
      57,
      71
     ]
    },
    "range": {
     "line number": [
      72
     ]
    },
    "sum": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_multi_voxel.unit_icosahedron": {
  "data": {
   "shadows": "dipy.core.sphere.unit_icosahedron"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      89
     ]
    },
    "dipy.core.gradients.GradientTable": {
     "line number": [
      14
     ]
    },
    "dipy.core.subdivide_octahedron.create_unit_hemisphere": {
     "line number": [
      12
     ]
    },
    "dipy.reconst.tests.test_odf._sphere": {
     "line number": [
      13
     ]
    },
    "numpy.ones": {
     "line number": [
      14
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_odf.GradientTable": {
  "data": {
   "shadows": "dipy.core.gradients.GradientTable"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.OdfFit": {
  "data": {
   "shadows": "dipy.reconst.odf.OdfFit"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.OdfModel": {
  "data": {
   "shadows": "dipy.reconst.odf.OdfModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.SimpleOdfFit": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "dipy.reconst.odf.OdfFit": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_odf.SimpleOdfFit.odf": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "numpy.ascontiguousarray": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_odf.SimpleOdfModel": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "dipy.reconst.odf.OdfModel": {
     "line number": [
      17
     ]
    },
    "dipy.reconst.tests.test_odf._sphere": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_odf.SimpleOdfModel.fit": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "dipy.reconst.tests.test_odf.SimpleOdfFit": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_odf._gtab": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_odf._odf": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_odf._sphere": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_odf.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.create_unit_hemisphere": {
  "data": {
   "shadows": "dipy.core.subdivide_octahedron.create_unit_hemisphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.gfa": {
  "data": {
   "shadows": "dipy.reconst.odf.gfa"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.minmax_normalize": {
  "data": {
   "shadows": "dipy.reconst.odf.minmax_normalize"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.multi_tensor_odf": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_odf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_odf.test_OdfFit": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "dipy.reconst.tests.test_odf.SimpleOdfModel": {
     "line number": [
      36
     ]
    },
    "dipy.reconst.tests.test_odf._gtab": {
     "line number": [
      36
     ]
    },
    "dipy.reconst.tests.test_odf._sphere": {
     "line number": [
      38,
      39
     ]
    },
    "len": {
     "line number": [
      39,
      39
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_odf.test_gfa": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "dipy.reconst.odf.gfa": {
     "line number": [
      72,
      75,
      79,
      81,
      85
     ]
    },
    "numpy.array": {
     "line number": [
      76
     ]
    },
    "numpy.hstack": {
     "line number": [
      79,
      81
     ]
    },
    "numpy.isnan": {
     "line number": [
      86
     ]
    },
    "numpy.ones": {
     "line number": [
      72,
      75,
      79,
      81
     ]
    },
    "numpy.sqrt": {
     "line number": [
      80,
      82
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      86
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      80,
      82
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      73,
      76
     ]
    },
    "numpy.zeros": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_odf.test_minmax_normalize": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      52
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      48
     ]
    },
    "dipy.reconst.odf.minmax_normalize": {
     "line number": [
      61,
      66
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      56
     ]
    },
    "dipy.sims.voxel.multi_tensor_odf": {
     "line number": [
      58
     ]
    },
    "len": {
     "line number": [
      50
     ]
    },
    "numpy.array": {
     "line number": [
      54
     ]
    },
    "numpy.concatenate": {
     "line number": [
      49
     ]
    },
    "numpy.empty": {
     "line number": [
      65
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      62,
      63,
      67,
      68
     ]
    },
    "numpy.zeros": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_peak_dg": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      82
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_peak_dg.default_sphere": {
  "data": {
   "shadows": "dipy.direction.peaks.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_dg.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_dg.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_dg.peaks_from_model": {
  "data": {
   "shadows": "dipy.direction.peaks.peaks_from_model"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_dg.test_EuDXDirectionGetter": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "SillyModel": {
     "line number": [
      30,
      70
     ]
    },
    "dipy.direction.peaks.default_sphere": {
     "line number": [
      30,
      70
     ]
    },
    "dipy.direction.peaks.peaks_from_model": {
     "line number": [
      30,
      70
     ]
    },
    "float": {
     "line number": [
      42,
      75
     ]
    },
    "get_direction": {
     "line number": [
      46,
      52,
      56,
      61
     ]
    },
    "len": {
     "line number": [
      78,
      79
     ]
    },
    "numpy.array": {
     "line number": [
      42,
      75
     ]
    },
    "numpy.random.random": {
     "line number": [
      29,
      60
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      55,
      57,
      68,
      78,
      79
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      47,
      53,
      62
     ]
    },
    "numpy.zeros": {
     "line number": [
      35
     ]
    },
    "range": {
     "line number": [
      39,
      40,
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_peak_dg.test_EuDXDirectionGetter.SillyFit": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "object": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_peak_dg.test_EuDXDirectionGetter.SillyFit.__init__": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_peak_dg.test_EuDXDirectionGetter.SillyFit.odf": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "len": {
     "line number": [
      20
     ]
    },
    "numpy.random.randint": {
     "line number": [
      20
     ]
    },
    "numpy.zeros": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_peak_dg.test_EuDXDirectionGetter.SillyModel": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "object": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_peak_dg.test_EuDXDirectionGetter.SillyModel.fit": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "SillyFit": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_peak_dg.test_EuDXDirectionGetter.get_direction": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "dir.copy": {
     "line number": [
      25
     ]
    },
    "numpy.array": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_peak_finding": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      141
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_peak_finding.HemiSphere": {
  "data": {
   "shadows": "dipy.core.sphere.HemiSphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_finding.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_finding.all_tensor_evecs": {
  "data": {
   "shadows": "dipy.sims.voxel.all_tensor_evecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_finding.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_finding.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_finding.local_maxima": {
  "data": {
   "shadows": "dipy.reconst.recspeed.local_maxima"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_finding.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_finding.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_finding.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_finding.remove_similar_vertices": {
  "data": {
   "shadows": "dipy.reconst.recspeed.remove_similar_vertices"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_finding.search_descending": {
  "data": {
   "shadows": "dipy.reconst.recspeed.search_descending"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_peak_finding.test_local_maxima": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      76
     ]
    },
    "ValueError": {
     "line number": [
      71
     ]
    },
    "abs": {
     "line number": [
      18,
      46
     ]
    },
    "dipy.core.sphere.HemiSphere": {
     "line number": [
      42
     ]
    },
    "dipy.core.sphere.unique_edges": {
     "line number": [
      15
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      13
     ]
    },
    "dipy.reconst.recspeed.local_maxima": {
     "line number": [
      19,
      28,
      36,
      47,
      56,
      64,
      71,
      76
     ]
    },
    "len": {
     "line number": [
      24,
      33,
      52,
      61
     ]
    },
    "max": {
     "line number": [
      20,
      21,
      48,
      49
     ]
    },
    "numpy.nan": {
     "line number": [
      70
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      38,
      39,
      66,
      67
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      29,
      30,
      37,
      57,
      58,
      65
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      20,
      21,
      48,
      49
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      71,
      76
     ]
    },
    "numpy.zeros": {
     "line number": [
      24,
      33,
      52,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_peak_finding.test_remove_similar_peaks": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "dipy.reconst.recspeed.remove_similar_vertices": {
     "line number": [
      91,
      95,
      103,
      106,
      109,
      114,
      117,
      120
     ]
    },
    "list": {
     "line number": [
      99,
      105,
      108,
      111
     ]
    },
    "numpy.array": {
     "line number": [
      80
     ]
    },
    "numpy.sqrt": {
     "line number": [
      87
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      92,
      98,
      99,
      100,
      104,
      105,
      107,
      108,
      110,
      111,
      115,
      116,
      118,
      119,
      121,
      122
     ]
    },
    "range": {
     "line number": [
      99,
      100,
      105,
      108,
      111,
      116,
      119,
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_peak_finding.test_search_descending": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "dipy.reconst.recspeed.search_descending": {
     "line number": [
      128,
      129,
      130,
      133,
      134,
      135,
      138
     ]
    },
    "numpy.linspace": {
     "line number": [
      126
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      128,
      129,
      130,
      133,
      134,
      135,
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_peak_finding.unique_edges": {
  "data": {
   "shadows": "dipy.core.sphere.unique_edges"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      580
     ]
    },
    "dipy.reconst.qtdmri.have_cvxpy": {
     "line number": [
      16
     ]
    },
    "dipy.reconst.tests.test_qtdmri.pytest": {
     "line number": [
      16
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      581
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_qtdmri.add_noise": {
  "data": {
   "shadows": "dipy.sims.voxel.add_noise"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table_from_qvals_bvecs": {
     "line number": [
      30
     ]
    },
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      22
     ]
    },
    "numpy.append": {
     "line number": [
      27
     ]
    },
    "numpy.linspace": {
     "line number": [
      26
     ]
    },
    "numpy.tile": {
     "line number": [
      23,
      24,
      28,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      41
     ]
    },
    "numpy.array": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.get_gtab_taiwan_dsi": {
  "data": {
   "shadows": "dipy.data.get_gtab_taiwan_dsi"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.gradient_table_from_qvals_bvecs": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table_from_qvals_bvecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.integrate": {
  "data": {
   "shadows": "scipy.integrate"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.mapmri": {
  "data": {
   "shadows": "dipy.reconst.mapmri"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.needs_cvxpy": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_qtdmri.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.qtdmri": {
  "data": {
   "shadows": "dipy.reconst.qtdmri"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_qtdmri.test_anisotropic_isotropic_equivalence": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "dipy.data.get_sphere": {
     "line number": [
      210
     ]
    },
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      171,
      175
     ]
    },
    "dipy.reconst.qtdmri.create_rt_space_grid": {
     "line number": [
      189
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      165
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      167
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      198,
      203,
      204,
      205,
      206,
      207
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      185,
      192,
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_anisotropic_reduced_MSE": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      279,
      283
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      276
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      278
     ]
    },
    "numpy.mean": {
     "line number": [
      289,
      290
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      291
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_calling_cartesian_laplacian_with_precomputed_matrices": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": {
    "dipy.reconst.mapmri.mapmri_STU_reg_matrices": {
     "line number": [
      314
     ]
    },
    "dipy.reconst.qtdmri.part1_reg_matrix_tau": {
     "line number": [
      313
     ]
    },
    "dipy.reconst.qtdmri.part23_reg_matrix_tau": {
     "line number": [
      312
     ]
    },
    "dipy.reconst.qtdmri.part4_reg_matrix_tau": {
     "line number": [
      311
     ]
    },
    "dipy.reconst.qtdmri.qtdmri_index_matrix": {
     "line number": [
      310
     ]
    },
    "dipy.reconst.qtdmri.qtdmri_laplacian_reg_matrix": {
     "line number": [
      316,
      320
     ]
    },
    "numpy.r_": {
     "line number": [
      309
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_calling_spherical_laplacian_with_precomputed_matrices": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": {
    "dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix_from_index_matrix": {
     "line number": [
      333
     ]
    },
    "dipy.reconst.qtdmri.part1_reg_matrix_tau": {
     "line number": [
      331
     ]
    },
    "dipy.reconst.qtdmri.part23_reg_matrix_tau": {
     "line number": [
      330
     ]
    },
    "dipy.reconst.qtdmri.part4_reg_matrix_tau": {
     "line number": [
      329
     ]
    },
    "dipy.reconst.qtdmri.qtdmri_isotropic_index_matrix": {
     "line number": [
      328
     ]
    },
    "dipy.reconst.qtdmri.qtdmri_isotropic_laplacian_reg_matrix": {
     "line number": [
      337,
      343
     ]
    },
    "numpy.r_": {
     "line number": [
      327
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      345
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_cartesian_normalization": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      220,
      224
     ]
    },
    "dipy.reconst.qtdmri.create_rt_space_grid": {
     "line number": [
      233
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      216
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      218
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      231,
      236,
      240
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_elastic_GCV_CV": {
  "data": {
   "lineno": 554,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      560
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      556
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      558
     ]
    },
    "dipy.reconst.tests.test_qtdmri.needs_cvxpy": {
     "line number": [
      554
     ]
    },
    "dipy.sims.voxel.add_noise": {
     "line number": [
      559
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      566,
      567
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_input_parameters": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      50,
      53,
      56,
      59,
      63,
      68,
      73,
      77,
      82,
      87,
      91,
      95,
      98,
      101,
      105,
      110
     ]
    },
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      50,
      53,
      56,
      59,
      63,
      68,
      73,
      77,
      82,
      87,
      91,
      95,
      98,
      101,
      105,
      110
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      47
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      50,
      53,
      56,
      59,
      63,
      68,
      73,
      77,
      82,
      87,
      91,
      95,
      98,
      101,
      105,
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_l1_CV": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      546
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      542
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      544
     ]
    },
    "dipy.reconst.tests.test_qtdmri.needs_cvxpy": {
     "line number": [
      540
     ]
    },
    "dipy.sims.voxel.add_noise": {
     "line number": [
      545
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      551
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_l1_increases_sparsity": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      490,
      494
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      486
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      488
     ]
    },
    "dipy.reconst.tests.test_qtdmri.needs_cvxpy": {
     "line number": [
      484
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      504,
      508
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_laplacian_GCV_higher_weight_with_noise": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      473
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      468
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      470
     ]
    },
    "dipy.reconst.tests.test_qtdmri.needs_cvxpy": {
     "line number": [
      466
     ]
    },
    "dipy.sims.voxel.add_noise": {
     "line number": [
      471
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      481
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_laplacian_reduces_laplacian_norm": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      422,
      426
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      418
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      420
     ]
    },
    "dipy.reconst.tests.test_qtdmri.needs_cvxpy": {
     "line number": [
      416
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      437
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_normalization_time": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.qtdmri_temporal_normalization": {
     "line number": [
      146,
      150,
      154
     ]
    },
    "dipy.reconst.qtdmri.temporal_basis": {
     "line number": [
      147,
      148,
      151,
      152,
      155,
      156
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      158,
      159,
      160
     ]
    },
    "scipy.integrate.quad": {
     "line number": [
      145,
      149,
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_number_of_coefficients": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      298
     ]
    },
    "dipy.reconst.qtdmri.qtdmri_number_of_coefficients": {
     "line number": [
      302
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      295
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      297
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      305
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_orthogonality_temporal_basis_functions": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.temporal_basis": {
     "line number": [
      122,
      123,
      125,
      126,
      128,
      129,
      131,
      132
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      134,
      135,
      136,
      137
     ]
    },
    "scipy.integrate.quad": {
     "line number": [
      121,
      124,
      127,
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_q0_constraint_and_unity_of_ODFs": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      388
     ]
    },
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      357,
      369,
      392
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      351
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      355
     ]
    },
    "dipy.reconst.tests.test_qtdmri.needs_cvxpy": {
     "line number": [
      349
     ]
    },
    "float": {
     "line number": [
      366,
      405,
      406
     ]
    },
    "numpy.all": {
     "line number": [
      364,
      376,
      379,
      400,
      403
     ]
    },
    "numpy.pi": {
     "line number": [
      412
     ]
    },
    "numpy.sqrt": {
     "line number": [
      412
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      366,
      381,
      382,
      405,
      406,
      413
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      387
     ]
    },
    "print": {
     "line number": [
      389
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_spherical_l1_increases_sparsity": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      517,
      522
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      513
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      515
     ]
    },
    "dipy.reconst.tests.test_qtdmri.needs_cvxpy": {
     "line number": [
      511
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      537
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      533
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_spherical_laplacian_reduces_laplacian_norm": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      447,
      451
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      443
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      445
     ]
    },
    "dipy.reconst.tests.test_qtdmri.needs_cvxpy": {
     "line number": [
      440
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      463
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_spherical_normalization": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "dipy.reconst.qtdmri.QtdmriModel": {
     "line number": [
      249,
      253
     ]
    },
    "dipy.reconst.qtdmri.create_rt_space_grid": {
     "line number": [
      263
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      245
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_signal_crossing": {
     "line number": [
      247
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      260,
      266,
      271
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_qtdmri.test_visualise_gradient_table_G_Delta_rainbow": {
  "data": {
   "lineno": 570,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      576
     ]
    },
    "dipy.reconst.qtdmri.have_plt": {
     "line number": [
      570
     ]
    },
    "dipy.reconst.qtdmri.visualise_gradient_table_G_Delta_rainbow": {
     "line number": [
      573,
      577
     ]
    },
    "dipy.reconst.tests.test_qtdmri.generate_gtab4D": {
     "line number": [
      572
     ]
    },
    "dipy.reconst.tests.test_qtdmri.pytest": {
     "line number": [
      570
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      576
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_reco_utils": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.tests.test_reco_utils.adj_to_countarrs": {
  "data": {
   "shadows": "dipy.reconst.recspeed.adj_to_countarrs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_reco_utils.argmax_from_countarrs": {
  "data": {
   "shadows": "dipy.reconst.recspeed.argmax_from_countarrs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_reco_utils.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_reco_utils.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_reco_utils.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_reco_utils.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_reco_utils.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_reco_utils.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_reco_utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_reco_utils.test_adj_countarrs": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "dipy.reconst.recspeed.adj_to_countarrs": {
     "line number": [
      17
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      18,
      20
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      19,
      21
     ]
    },
    "numpy.uint32": {
     "line number": [
      19,
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_reco_utils.test_argmax_from_countarrs": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "dipy.reconst.recspeed.argmax_from_countarrs": {
     "line number": [
      32
     ]
    },
    "numpy.arange": {
     "line number": [
      26,
      27,
      29
     ]
    },
    "numpy.float": {
     "line number": [
      26
     ]
    },
    "numpy.ones": {
     "line number": [
      28
     ]
    },
    "numpy.uint32": {
     "line number": [
      27,
      28,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_sfm": {
  "data": {
   "symbols_in_volume": {
    "dipy.reconst.sfm.has_sklearn": {
     "line number": [
      13
     ]
    },
    "dipy.reconst.tests.test_sfm.pytest": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_sfm.dpd": {
  "data": {
   "shadows": "dipy.data"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_sfm.grad": {
  "data": {
   "shadows": "dipy.core.gradients"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_sfm.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_sfm.needs_sklearn": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "dipy.reconst.tests.test_sfm.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_sfm.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_sfm.opt": {
  "data": {
   "shadows": "dipy.core.optimize"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_sfm.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_sfm.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_sfm.sfm": {
  "data": {
   "shadows": "dipy.reconst.sfm"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_sfm.sims": {
  "data": {
   "shadows": "dipy.sims.voxel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_sfm.test_design_matrix": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "dipy.data.dsi_voxels": {
     "line number": [
      17
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      18
     ]
    },
    "dipy.reconst.sfm.SparseFascicleModel": {
     "line number": [
      20
     ]
    },
    "numpy.sum": {
     "line number": [
      23
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_sfm.test_exponential_iso": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      139
     ]
    },
    "dipy.data.dsi_deconv_voxels": {
     "line number": [
      140
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      137
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      147
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      138
     ]
    },
    "dipy.reconst.cross_validation.coeff_of_determination": {
     "line number": [
      160
     ]
    },
    "dipy.reconst.sfm.ExponentialIsotropicModel": {
     "line number": [
      144
     ]
    },
    "dipy.reconst.sfm.SparseFascicleModel": {
     "line number": [
      143
     ]
    },
    "dipy.reconst.tests.test_sfm.needs_sklearn": {
     "line number": [
      135
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      156
     ]
    },
    "numpy.array": {
     "line number": [
      153
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      160
     ]
    },
    "zip": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_sfm.test_predict": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      60,
      73
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      58
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      59
     ]
    },
    "dipy.reconst.cross_validation.coeff_of_determination": {
     "line number": [
      70,
      75
     ]
    },
    "dipy.reconst.sfm.SparseFascicleModel": {
     "line number": [
      67
     ]
    },
    "dipy.reconst.tests.test_sfm.needs_sklearn": {
     "line number": [
      54
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      64
     ]
    },
    "numpy.array": {
     "line number": [
      61
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      70,
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_sfm.test_sfm": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      30
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      28
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      34
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      29
     ]
    },
    "dipy.reconst.sfm.ExponentialIsotropicModel": {
     "line number": [
      31
     ]
    },
    "dipy.reconst.sfm.SparseFascicleModel": {
     "line number": [
      32
     ]
    },
    "dipy.reconst.tests.test_sfm.needs_sklearn": {
     "line number": [
      26
     ]
    },
    "numpy.ones": {
     "line number": [
      37
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      44,
      45,
      46,
      47,
      49
     ]
    },
    "numpy.zeros": {
     "line number": [
      50,
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_sfm.test_sfm_background": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      81
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      79
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      80
     ]
    },
    "dipy.reconst.sfm.SparseFascicleModel": {
     "line number": [
      84
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      86
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_sfm.test_sfm_sklearnlinearsolver": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "EvenSillierSolver": {
     "line number": [
      132
     ]
    },
    "SillySolver": {
     "line number": [
      126,
      128
     ]
    },
    "ValueError": {
     "line number": [
      129
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      125
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      124
     ]
    },
    "dipy.reconst.sfm.SparseFascicleModel": {
     "line number": [
      126,
      130
     ]
    },
    "isinstance": {
     "line number": [
      128
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      128
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_sfm.test_sfm_sklearnlinearsolver.EvenSillierSolver": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "object": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_sfm.test_sfm_sklearnlinearsolver.EvenSillierSolver.fit": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_sfm.test_sfm_sklearnlinearsolver.SillySolver": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "dipy.core.optimize.SKLearnLinearSolver": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_sfm.test_sfm_sklearnlinearsolver.SillySolver.fit": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_sfm.test_sfm_stick": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      92
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      90
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      96
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      91
     ]
    },
    "dipy.reconst.cross_validation.coeff_of_determination": {
     "line number": [
      112
     ]
    },
    "dipy.reconst.sfm.SparseFascicleModel": {
     "line number": [
      93,
      108
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      105
     ]
    },
    "numpy.array": {
     "line number": [
      102
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_sfm.xval": {
  "data": {
   "shadows": "dipy.reconst.cross_validation"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      471
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      472
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_shm.CsaOdfModel": {
  "data": {
   "shadows": "dipy.reconst.shm.CsaOdfModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.NearestNeighborInterpolator": {
  "data": {
   "shadows": "dipy.core.interpolation.NearestNeighborInterpolator"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.OpdtModel": {
  "data": {
   "shadows": "dipy.reconst.shm.OpdtModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.QballModel": {
  "data": {
   "shadows": "dipy.reconst.shm.QballModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.ResidualBootstrapWrapper": {
  "data": {
   "shadows": "dipy.reconst.shm.ResidualBootstrapWrapper"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.SphHarmFit": {
  "data": {
   "shadows": "dipy.reconst.shm.SphHarmFit"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.TestCsaOdfModel": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": {
    "dipy.reconst.shm.CsaOdfModel": {
     "line number": [
      295
     ]
    },
    "dipy.reconst.tests.test_shm.TestQballModel": {
     "line number": [
      294
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_shm.TestOpdtModel": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "dipy.reconst.shm.OpdtModel": {
     "line number": [
      291
     ]
    },
    "dipy.reconst.tests.test_shm.TestQballModel": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_shm.TestQballModel": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "dipy.reconst.shm.QballModel": {
     "line number": [
      199
     ]
    },
    "object": {
     "line number": [
      197
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.reconst.tests.test_shm.TestQballModel.test_gfa": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": {
    "dipy.core.sphere.hemi_icosahedron.subdivide": {
     "line number": [
      256
     ]
    },
    "dipy.reconst.odf.gfa": {
     "line number": [
      260
     ]
    },
    "dipy.reconst.tests.test_shm.make_fake_signal": {
     "line number": [
      254
     ]
    },
    "numpy.ones": {
     "line number": [
      255
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      261
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      266
     ]
    },
    "numpy.zeros": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.TestQballModel.test_min_signal_default": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "dipy.reconst.tests.test_shm.make_fake_signal": {
     "line number": [
      269
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      274
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.TestQballModel.test_mulit_voxel_fit": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "dipy.core.sphere.hemi_icosahedron": {
     "line number": [
      230
     ]
    },
    "dipy.reconst.odf": {
     "line number": [
      236,
      241,
      242
     ]
    },
    "dipy.reconst.odf.shape": {
     "line number": [
      237
     ]
    },
    "dipy.reconst.tests.test_shm.make_fake_signal": {
     "line number": [
      229
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      242
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      237
     ]
    },
    "numpy.vstack": {
     "line number": [
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.TestQballModel.test_sh_order": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "dipy.reconst.tests.test_shm.make_fake_signal": {
     "line number": [
      245
     ]
    },
    "max": {
     "line number": [
      248,
      251
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      247,
      248,
      250,
      251
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.TestQballModel.test_single_voxel_fit": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      219
     ]
    },
    "dipy.core.sphere.hemi_icosahedron.subdivide": {
     "line number": [
      203
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      210
     ]
    },
    "dipy.reconst.odf": {
     "line number": [
      208,
      210,
      226
     ]
    },
    "dipy.reconst.odf.shape": {
     "line number": [
      209
     ]
    },
    "dipy.reconst.tests.test_shm.make_fake_signal": {
     "line number": [
      202
     ]
    },
    "len": {
     "line number": [
      212,
      213
     ]
    },
    "numpy.ones": {
     "line number": [
      216,
      219
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      216,
      219,
      226
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      209,
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.anisotropic_power": {
  "data": {
   "shadows": "dipy.reconst.shm.anisotropic_power"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.bootstrap_data_array": {
  "data": {
   "shadows": "dipy.reconst.shm.bootstrap_data_array"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.bootstrap_data_voxel": {
  "data": {
   "shadows": "dipy.reconst.shm.bootstrap_data_voxel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.calculate_max_order": {
  "data": {
   "shadows": "dipy.reconst.shm.calculate_max_order"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.hat": {
  "data": {
   "shadows": "dipy.reconst.shm.hat"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.hemi_icosahedron": {
  "data": {
   "shadows": "dipy.core.sphere.hemi_icosahedron"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.lcr_matrix": {
  "data": {
   "shadows": "dipy.reconst.shm.lcr_matrix"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.make_fake_signal": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      185
     ]
    },
    "dipy.core.sphere.hemi_icosahedron.subdivide": {
     "line number": [
      181
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      192,
      193
     ]
    },
    "len": {
     "line number": [
      183
     ]
    },
    "numpy.array": {
     "line number": [
      187
     ]
    },
    "numpy.concatenate": {
     "line number": [
      182
     ]
    },
    "numpy.eye": {
     "line number": [
      188
     ]
    },
    "numpy.vstack": {
     "line number": [
      194
     ]
    },
    "numpy.zeros": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.mrtrix_spherical_functions": {
  "data": {
   "shadows": "dipy.data.mrtrix_spherical_functions"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.multi_tensor_odf": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_odf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.normalize_data": {
  "data": {
   "shadows": "dipy.reconst.shm.normalize_data"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.npl": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.odf": {
  "data": {
   "shadows": "dipy.reconst.odf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.order_from_ncoef": {
  "data": {
   "shadows": "dipy.reconst.shm.order_from_ncoef"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.peak_directions": {
  "data": {
   "shadows": "dipy.direction.peaks.peak_directions"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.real_sph_harm": {
  "data": {
   "shadows": "dipy.reconst.shm.real_sph_harm"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.real_sym_sh_basis": {
  "data": {
   "shadows": "dipy.reconst.shm.real_sym_sh_basis"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.real_sym_sh_mrtrix": {
  "data": {
   "shadows": "dipy.reconst.shm.real_sym_sh_mrtrix"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.sf_to_sh": {
  "data": {
   "shadows": "dipy.reconst.shm.sf_to_sh"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.sh_to_sf": {
  "data": {
   "shadows": "dipy.reconst.shm.sh_to_sf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.single_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.single_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.smooth_pinv": {
  "data": {
   "shadows": "dipy.reconst.shm.smooth_pinv"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.sph_harm_ind_list": {
  "data": {
   "shadows": "dipy.reconst.shm.sph_harm_ind_list"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.sph_harm_sp": {
  "data": {
   "shadows": "scipy.special.sph_harm"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.spherical_harmonics": {
  "data": {
   "shadows": "dipy.reconst.shm.spherical_harmonics"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shm.test_ResidualBootstrapWrapper": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      343
     ]
    },
    "dipy.core.interpolation.NearestNeighborInterpolator": {
     "line number": [
      341,
      350
     ]
    },
    "dipy.reconst.shm.ResidualBootstrapWrapper": {
     "line number": [
      345,
      352
     ]
    },
    "dipy.reconst.shm.hat": {
     "line number": [
      337
     ]
    },
    "len": {
     "line number": [
      343
     ]
    },
    "numpy.arange": {
     "line number": [
      338
     ]
    },
    "numpy.array": {
     "line number": [
      334
     ]
    },
    "numpy.column_stack": {
     "line number": [
      349
     ]
    },
    "numpy.concatenate": {
     "line number": [
      351
     ]
    },
    "numpy.dot": {
     "line number": [
      340
     ]
    },
    "numpy.ones": {
     "line number": [
      343
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      346,
      347,
      353,
      354
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_SphHarmFit": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      279
     ]
    },
    "dipy.reconst.shm.SphHarmFit": {
     "line number": [
      281
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      283,
      285,
      287
     ]
    },
    "numpy.zeros": {
     "line number": [
      278,
      279
     ]
    },
    "slice": {
     "line number": [
      284,
      286
     ]
    },
    "slice.shape": {
     "line number": [
      285,
      287
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_anisotropic_power": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": {
    "dipy.reconst.shm.anisotropic_power": {
     "line number": [
      445,
      449,
      456
     ]
    },
    "dipy.reconst.shm.calculate_max_order": {
     "line number": [
      438
     ]
    },
    "dipy.reconst.tests.test_shm.warnings": {
     "line number": [
      455
     ]
    },
    "len": {
     "line number": [
      441,
      457
     ]
    },
    "numpy.log": {
     "line number": [
      441,
      442
     ]
    },
    "numpy.ones": {
     "line number": [
      437
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      446,
      448
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      456
     ]
    },
    "numpy.zeros": {
     "line number": [
      456
     ]
    },
    "range": {
     "line number": [
      441
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_bootstrap_array": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": {
    "dipy.reconst.shm.bootstrap_data_array": {
     "line number": [
      330
     ]
    },
    "dipy.reconst.shm.bootstrap_data_voxel": {
     "line number": [
      329
     ]
    },
    "dipy.reconst.shm.hat": {
     "line number": [
      323
     ]
    },
    "numpy.arange": {
     "line number": [
      326
     ]
    },
    "numpy.array": {
     "line number": [
      321
     ]
    },
    "numpy.dot": {
     "line number": [
      327
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      329,
      330
     ]
    },
    "numpy.zeros": {
     "line number": [
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_calculate_max_order": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      469
     ]
    },
    "dipy.reconst.shm.calculate_max_order": {
     "line number": [
      467,
      469
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      467
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      469
     ]
    },
    "zip": {
     "line number": [
      466
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_faster_sph_harm": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": {
    "dipy.reconst.shm.sph_harm_ind_list": {
     "line number": [
      390
     ]
    },
    "dipy.reconst.shm.spherical_harmonics": {
     "line number": [
      426
     ]
    },
    "numpy.array": {
     "line number": [
      391,
      408
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      429
     ]
    },
    "scipy.special.sph_harm": {
     "line number": [
      427
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_hat_and_lcr": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "dipy.core.sphere.hemi_icosahedron.subdivide": {
     "line number": [
      299
     ]
    },
    "dipy.reconst.shm.hat": {
     "line number": [
      302
     ]
    },
    "dipy.reconst.shm.lcr_matrix": {
     "line number": [
      306
     ]
    },
    "dipy.reconst.shm.real_sph_harm": {
     "line number": [
      301
     ]
    },
    "dipy.reconst.shm.sph_harm_ind_list": {
     "line number": [
      300
     ]
    },
    "len": {
     "line number": [
      307
     ]
    },
    "numpy.arange": {
     "line number": [
      307
     ]
    },
    "numpy.dot": {
     "line number": [
      303,
      308,
      313,
      316
     ]
    },
    "numpy.sqrt": {
     "line number": [
      309
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      304,
      314,
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_normalize_data": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      152
     ]
    },
    "dipy.reconst.shm.normalize_data": {
     "line number": [
      152,
      154,
      156,
      160,
      162,
      168,
      170,
      174,
      176
     ]
    },
    "numpy.arange": {
     "line number": [
      148
     ]
    },
    "numpy.ones": {
     "line number": [
      165
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      155,
      157,
      161,
      163,
      169,
      171,
      175,
      177
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      152
     ]
    },
    "numpy.zeros": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_order_from_ncoeff": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "dipy.reconst.shm.order_from_ncoef": {
     "line number": [
      42
     ]
    },
    "dipy.reconst.shm.sph_harm_ind_list": {
     "line number": [
      40
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_real_sph_harm": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "cos": {
     "line number": [
      71,
      79,
      84,
      87
     ]
    },
    "dipy.reconst.shm.real_sph_harm": {
     "line number": [
      62
     ]
    },
    "numpy.cos": {
     "line number": [
      66
     ]
    },
    "numpy.ones": {
     "line number": [
      94,
      95,
      96,
      97
     ]
    },
    "numpy.pi": {
     "line number": [
      63
     ]
    },
    "numpy.sin": {
     "line number": [
      65
     ]
    },
    "numpy.sqrt": {
     "line number": [
      64
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      67,
      69,
      73,
      77,
      80,
      85,
      89
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      98
     ]
    },
    "rsh": {
     "line number": [
      67,
      69,
      73,
      77,
      80,
      85,
      89,
      98
     ]
    },
    "sin": {
     "line number": [
      71,
      75,
      75,
      79,
      82,
      83,
      87,
      91,
      91
     ]
    },
    "sqrt": {
     "line number": [
      68,
      70,
      72,
      74,
      76,
      78,
      79,
      81,
      84,
      86,
      88,
      90,
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_real_sym_sh_basis": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "dipy.core.sphere.hemi_icosahedron.subdivide": {
     "line number": [
      113
     ]
    },
    "dipy.reconst.shm.real_sym_sh_basis": {
     "line number": [
      118
     ]
    },
    "dipy.reconst.shm.real_sym_sh_mrtrix": {
     "line number": [
      114
     ]
    },
    "numpy.sqrt": {
     "line number": [
      116
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      119
     ]
    },
    "numpy.where": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_real_sym_sh_mrtrix": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "dipy.data.mrtrix_spherical_functions": {
     "line number": [
      102
     ]
    },
    "dipy.reconst.shm.real_sym_sh_mrtrix": {
     "line number": [
      103
     ]
    },
    "numpy.dot": {
     "line number": [
      104
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_sf_to_sh": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "dipy.core.sphere.hemi_icosahedron.subdivide": {
     "line number": [
      360
     ]
    },
    "dipy.reconst.odf": {
     "line number": [
      365,
      368,
      370,
      372,
      374,
      376,
      378,
      381
     ]
    },
    "dipy.reconst.shm.sf_to_sh": {
     "line number": [
      368,
      372,
      376,
      382
     ]
    },
    "dipy.reconst.shm.sh_to_sf": {
     "line number": [
      369,
      373,
      377,
      383
     ]
    },
    "dipy.sims.voxel.multi_tensor_odf": {
     "line number": [
      365
     ]
    },
    "numpy.array": {
     "line number": [
      362
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      370,
      374,
      378,
      384
     ]
    },
    "numpy.vstack": {
     "line number": [
      381
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_smooth_pinv": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "dipy.core.sphere.hemi_icosahedron.subdivide": {
     "line number": [
      123
     ]
    },
    "dipy.reconst.shm.real_sph_harm": {
     "line number": [
      125
     ]
    },
    "dipy.reconst.shm.smooth_pinv": {
     "line number": [
      128,
      133,
      140
     ]
    },
    "dipy.reconst.shm.sph_harm_ind_list": {
     "line number": [
      124
     ]
    },
    "len": {
     "line number": [
      127,
      139
     ]
    },
    "numpy.arange": {
     "line number": [
      139
     ]
    },
    "numpy.diag": {
     "line number": [
      134,
      141
     ]
    },
    "numpy.dot": {
     "line number": [
      129,
      129,
      135,
      135,
      142,
      142
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      129,
      135,
      142
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      130,
      137,
      143
     ]
    },
    "numpy.zeros": {
     "line number": [
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.test_sph_harm_ind_list": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      51
     ]
    },
    "dipy.reconst.shm.sph_harm_ind_list": {
     "line number": [
      46,
      51
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      49
     ]
    },
    "numpy.abs": {
     "line number": [
      49
     ]
    },
    "numpy.all": {
     "line number": [
      49
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      50
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      47,
      48
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shm.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      101
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_shore_metrics.ShoreModel": {
  "data": {
   "shadows": "dipy.reconst.shore.ShoreModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.all_tensor_evecs": {
  "data": {
   "shadows": "dipy.sims.voxel.all_tensor_evecs"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.genlaguerre": {
  "data": {
   "shadows": "scipy.special.genlaguerre"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.get_gtab_taiwan_dsi": {
  "data": {
   "shadows": "dipy.data.get_gtab_taiwan_dsi"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.multi_tensor_msd": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_msd"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.multi_tensor_odf": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_odf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.multi_tensor_pdf": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_pdf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.multi_tensor_rtop": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_rtop"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.shore_indices": {
  "data": {
   "shadows": "dipy.reconst.shore.shore_indices"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.shore_matrix": {
  "data": {
   "shadows": "dipy.reconst.shore.shore_matrix"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.shore_order": {
  "data": {
   "shadows": "dipy.reconst.shore.shore_order"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_metrics.test_shore_metrics": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "dipy.data.get_gtab_taiwan_dsi": {
     "line number": [
      19
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      78
     ]
    },
    "dipy.reconst.shore.ShoreModel": {
     "line number": [
      49
     ]
    },
    "dipy.reconst.shore.shore_indices": {
     "line number": [
      31,
      38
     ]
    },
    "dipy.reconst.shore.shore_matrix": {
     "line number": [
      54
     ]
    },
    "dipy.reconst.shore.shore_order": {
     "line number": [
      30,
      39
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      23
     ]
    },
    "dipy.sims.voxel.multi_tensor_msd": {
     "line number": [
      97
     ]
    },
    "dipy.sims.voxel.multi_tensor_pdf": {
     "line number": [
      82
     ]
    },
    "dipy.sims.voxel.multi_tensor_rtop": {
     "line number": [
      92
     ]
    },
    "int": {
     "line number": [
      64
     ]
    },
    "numpy.array": {
     "line number": [
      20
     ]
    },
    "numpy.dot": {
     "line number": [
      55
     ]
    },
    "numpy.pi": {
     "line number": [
      65
     ]
    },
    "numpy.sqrt": {
     "line number": [
      59,
      85
     ]
    },
    "numpy.sum": {
     "line number": [
      59,
      85
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      60,
      68,
      74,
      86,
      91
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      32,
      33,
      34,
      40,
      41,
      93,
      99
     ]
    },
    "range": {
     "line number": [
      64
     ]
    },
    "scipy.special.genlaguerre": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shore_odf": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      74
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.reconst.tests.test_shore_odf.ShoreModel": {
  "data": {
   "shadows": "dipy.reconst.shore.ShoreModel"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.angular_similarity": {
  "data": {
   "shadows": "dipy.core.sphere_stats.angular_similarity"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.create_unit_sphere": {
  "data": {
   "shadows": "dipy.core.subdivide_octahedron.create_unit_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.get_3shell_gtab": {
  "data": {
   "shadows": "dipy.data.get_3shell_gtab"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.get_isbi2013_2shell_gtab": {
  "data": {
   "shadows": "dipy.data.get_isbi2013_2shell_gtab"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.gfa": {
  "data": {
   "shadows": "dipy.reconst.odf.gfa"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.peak_directions": {
  "data": {
   "shadows": "dipy.direction.peaks.peak_directions"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.sh_to_sf": {
  "data": {
   "shadows": "dipy.reconst.shm.sh_to_sf"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.sticks_and_ball": {
  "data": {
   "shadows": "dipy.sims.voxel.sticks_and_ball"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.sticks_and_ball_dummies": {
  "data": {
   "shadows": "dipy.reconst.tests.test_dsi.sticks_and_ball_dummies"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_shore_odf.test_multivox_shore": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "dipy.data.get_3shell_gtab": {
     "line number": [
      61
     ]
    },
    "dipy.reconst.shore.ShoreModel": {
     "line number": [
      66
     ]
    },
    "numpy.alltrue": {
     "line number": [
      71
     ]
    },
    "numpy.isreal": {
     "line number": [
      71
     ]
    },
    "numpy.random.random": {
     "line number": [
      63
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      70,
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_shore_odf.test_shore_odf": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "dipy.core.sphere_stats.angular_similarity": {
     "line number": [
      39,
      46
     ]
    },
    "dipy.core.subdivide_octahedron.create_unit_sphere": {
     "line number": [
      23
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      20
     ]
    },
    "dipy.data.get_isbi2013_2shell_gtab": {
     "line number": [
      17
     ]
    },
    "dipy.direction.peaks.peak_directions": {
     "line number": [
      36,
      43,
      53
     ]
    },
    "dipy.reconst.odf.gfa": {
     "line number": [
      57
     ]
    },
    "dipy.reconst.shm.sh_to_sf": {
     "line number": [
      33
     ]
    },
    "dipy.reconst.shore.ShoreModel": {
     "line number": [
      27
     ]
    },
    "dipy.reconst.tests.test_dsi.sticks_and_ball_dummies": {
     "line number": [
      48
     ]
    },
    "dipy.sims.voxel.sticks_and_ball": {
     "line number": [
      24
     ]
    },
    "len": {
     "line number": [
      37,
      44,
      54,
      55,
      55,
      56
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      34,
      38,
      45
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      37,
      44,
      55,
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_vec_val_vect": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.tests.test_vec_val_vect.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_vec_val_vect.dec": {
  "data": {
   "shadows": "numpy.testing.dec"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_vec_val_vect.dumb_sum": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "numpy.diag": {
     "line number": [
      27
     ]
    },
    "numpy.dot": {
     "line number": [
      27,
      27
     ]
    },
    "numpy.zeros": {
     "line number": [
      23
     ]
    },
    "range": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_vec_val_vect.make_vecs_vals": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "numpy.random.randn": {
     "line number": [
      9,
      9
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_vec_val_vect.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_vec_val_vect.randn": {
  "data": {
   "shadows": "numpy.random.randn"
  },
  "type": "import"
 },
 "dipy.reconst.tests.test_vec_val_vect.test_vec_val_vect": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "dipy.reconst.tests.test_vec_val_vect.make_vecs_vals": {
     "line number": [
      16
     ]
    },
    "dipy.reconst.vec_val_sum.vec_val_vect": {
     "line number": [
      18
     ]
    },
    "numpy.einsum": {
     "line number": [
      17
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_vec_val_vect.test_vec_val_vect_dumber": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "dipy.reconst.tests.test_vec_val_vect.dumb_sum": {
     "line number": [
      36
     ]
    },
    "dipy.reconst.tests.test_vec_val_vect.make_vecs_vals": {
     "line number": [
      35
     ]
    },
    "dipy.reconst.vec_val_sum.vec_val_vect": {
     "line number": [
      37
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.tests.test_vec_val_vect.vec_val_vect": {
  "data": {
   "shadows": "dipy.reconst.vec_val_sum.vec_val_vect"
  },
  "type": "import"
 },
 "dipy.reconst.utils": {
  "data": {},
  "type": "module"
 },
 "dipy.reconst.utils.dki_design_matrix": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": {
    "len": {
     "line number": [
      26,
      48
     ]
    },
    "numpy.ones": {
     "line number": [
      48
     ]
    },
    "numpy.zeros": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.reconst.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment": {
  "data": {},
  "type": "module"
 },
 "dipy.segment.benchmarks": {
  "data": {},
  "type": "module"
 },
 "dipy.segment.benchmarks.bench_quickbundles": {
  "data": {},
  "type": "module"
 },
 "dipy.segment.benchmarks.bench_quickbundles.MDFpy": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "dipy.segment.metric.Metric": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.benchmarks.bench_quickbundles.MDFpy.are_compatible": {
  "data": {
   "lineno": 27
  },
  "type": "function"
 },
 "dipy.segment.benchmarks.bench_quickbundles.MDFpy.dist": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "len": {
     "line number": [
      32
     ]
    },
    "numpy.sqrt": {
     "line number": [
      31
     ]
    },
    "numpy.sum": {
     "line number": [
      31,
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.benchmarks.bench_quickbundles.Metric": {
  "data": {
   "shadows": "dipy.segment.metric.Metric"
  },
  "type": "import"
 },
 "dipy.segment.benchmarks.bench_quickbundles.QB_New": {
  "data": {
   "shadows": "dipy.segment.clustering.QuickBundles"
  },
  "type": "import"
 },
 "dipy.segment.benchmarks.bench_quickbundles.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.segment.benchmarks.bench_quickbundles.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.segment.benchmarks.bench_quickbundles.assert_arrays_equal": {
  "data": {
   "shadows": "dipy.testing.assert_arrays_equal"
  },
  "type": "import"
 },
 "dipy.segment.benchmarks.bench_quickbundles.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.segment.benchmarks.bench_quickbundles.bench_quickbundles": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      41
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      43
     ]
    },
    "dipy.segment.benchmarks.bench_quickbundles.MDFpy": {
     "line number": [
      85
     ]
    },
    "dipy.segment.clustering.QuickBundles": {
     "line number": [
      74,
      85
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      83,
      94
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      46
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      47
     ]
    },
    "len": {
     "line number": [
      79,
      81,
      90,
      92
     ]
    },
    "list": {
     "line number": [
      82,
      93
     ]
    },
    "map": {
     "line number": [
      79,
      80,
      90,
      91
     ]
    },
    "numpy.array": {
     "line number": [
      51,
      53,
      55,
      57,
      59,
      61,
      63,
      65
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      82,
      93
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      81,
      92
     ]
    },
    "numpy.testing.measure": {
     "line number": [
      75,
      86
     ]
    },
    "print": {
     "line number": [
      72,
      76,
      77,
      87,
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.benchmarks.bench_quickbundles.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.segment.benchmarks.bench_quickbundles.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.segment.benchmarks.bench_quickbundles.measure": {
  "data": {
   "shadows": "numpy.testing.measure"
  },
  "type": "import"
 },
 "dipy.segment.benchmarks.bench_quickbundles.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.benchmarks.bench_quickbundles.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamline.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.segment.bundles": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      28
     ]
    },
    "dipy.segment.bundles.logging": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.bundles.BundleMinDistanceAsymmetricMetric": {
  "data": {
   "shadows": "dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric"
  },
  "type": "import"
 },
 "dipy.segment.bundles.BundleMinDistanceMetric": {
  "data": {
   "shadows": "dipy.align.streamlinear.BundleMinDistanceMetric"
  },
  "type": "import"
 },
 "dipy.segment.bundles.BundleSumDistanceMatrixMetric": {
  "data": {
   "shadows": "dipy.align.streamlinear.BundleSumDistanceMatrixMetric"
  },
  "type": "import"
 },
 "dipy.segment.bundles.RecoBundles": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "object": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.bundles.RecoBundles.__init__": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      119
     ]
    },
    "dipy.segment.bundles.check_range": {
     "line number": [
      118
     ]
    },
    "dipy.segment.bundles.logger": {
     "line number": [
      127,
      128,
      150,
      152
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      123
     ]
    },
    "len": {
     "line number": [
      116,
      117,
      121,
      124,
      127,
      129,
      146
     ]
    },
    "list": {
     "line number": [
      121
     ]
    },
    "numpy.array": {
     "line number": [
      121,
      122
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      133
     ]
    },
    "numpy.zeros": {
     "line number": [
      116
     ]
    },
    "range": {
     "line number": [
      117,
      121
     ]
    },
    "time.time": {
     "line number": [
      141,
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.bundles.RecoBundles._cluster_model_bundle": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": {
    "dipy.segment.bundles.logger": {
     "line number": [
      433,
      434,
      436,
      446,
      448
     ]
    },
    "dipy.segment.clustering.qbx_and_merge": {
     "line number": [
      439
     ]
    },
    "len": {
     "line number": [
      435,
      444
     ]
    },
    "time.time": {
     "line number": [
      432,
      448
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.bundles.RecoBundles._cluster_streamlines": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "dipy.segment.bundles.logger": {
     "line number": [
      159,
      160,
      162,
      163,
      178,
      180
     ]
    },
    "dipy.segment.clustering.qbx_and_merge": {
     "line number": [
      168
     ]
    },
    "dipy.tracking.streamline.nbytes": {
     "line number": [
      162
     ]
    },
    "len": {
     "line number": [
      161,
      174
     ]
    },
    "time.time": {
     "line number": [
      158,
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.bundles.RecoBundles._prune_what_not_in_model": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      593
     ]
    },
    "dipy.segment.bundles.logger": {
     "line number": [
      565,
      567,
      568,
      569,
      578,
      584,
      589,
      599,
      609,
      619,
      621,
      622
     ]
    },
    "dipy.segment.clustering.qbx_and_merge": {
     "line number": [
      573
     ]
    },
    "dipy.tracking.distances.bundles_distances_mam": {
     "line number": [
      590
     ]
    },
    "dipy.tracking.distances.bundles_distances_mdf": {
     "line number": [
      585
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      610
     ]
    },
    "itertools.chain": {
     "line number": [
      605,
      614
     ]
    },
    "len": {
     "line number": [
      607,
      619,
      621
     ]
    },
    "list": {
     "line number": [
      605,
      614
     ]
    },
    "numpy.array": {
     "line number": [
      606
     ]
    },
    "numpy.inf": {
     "line number": [
      594,
      595,
      604
     ]
    },
    "numpy.isnan": {
     "line number": [
      594
     ]
    },
    "numpy.min": {
     "line number": [
      602
     ]
    },
    "numpy.where": {
     "line number": [
      604
     ]
    },
    "time.time": {
     "line number": [
      570,
      578,
      622
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.bundles.RecoBundles._reduce_search_space": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      470
     ]
    },
    "dipy.segment.bundles.logger": {
     "line number": [
      455,
      456,
      457,
      461,
      466,
      487,
      491,
      493
     ]
    },
    "dipy.tracking.distances.bundles_distances_mam": {
     "line number": [
      467
     ]
    },
    "dipy.tracking.distances.bundles_distances_mdf": {
     "line number": [
      462
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      481,
      489
     ]
    },
    "itertools.chain": {
     "line number": [
      481
     ]
    },
    "len": {
     "line number": [
      483
     ]
    },
    "list": {
     "line number": [
      475
     ]
    },
    "numpy.inf": {
     "line number": [
      472,
      475
     ]
    },
    "numpy.min": {
     "line number": [
      474
     ]
    },
    "numpy.where": {
     "line number": [
      475
     ]
    },
    "time.time": {
     "line number": [
      454,
      493
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.bundles.RecoBundles._register_neighb_to_model": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": {
    "dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric": {
     "line number": [
      509
     ]
    },
    "dipy.align.streamlinear.BundleMinDistanceMetric": {
     "line number": [
      507
     ]
    },
    "dipy.align.streamlinear.BundleSumDistanceMatrixMetric": {
     "line number": [
      511
     ]
    },
    "dipy.align.streamlinear.StreamlineLinearRegistration": {
     "line number": [
      529
     ]
    },
    "dipy.segment.bundles.logger": {
     "line number": [
      503,
      543,
      545,
      546,
      549,
      550,
      553
     ]
    },
    "dipy.tracking.streamline.select_random_set_of_streamlines": {
     "line number": [
      521,
      523
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      526,
      527
     ]
    },
    "nibabel.affines.apply_affine": {
     "line number": [
      535
     ]
    },
    "numpy.get_printoptions": {
     "line number": [
      547
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      548,
      551
     ]
    },
    "numpy.sqrt": {
     "line number": [
      543
     ]
    },
    "time.time": {
     "line number": [
      504,
      553
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.bundles.RecoBundles.evaluate_results": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": {
    "dipy.align.streamlinear.BundleMinDistanceMetric": {
     "line number": [
      413
     ]
    },
    "dipy.segment.bundles.bundle_adjacency": {
     "line number": [
      409
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      400,
      407,
      408
     ]
    },
    "dipy.tracking.streamline.select_random_set_of_streamlines": {
     "line number": [
      414,
      416
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      409,
      410,
      419,
      420
     ]
    },
    "numpy.array": {
     "line number": [
      423
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.bundles.RecoBundles.recognize": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "dipy.segment.bundles.logger": {
     "line number": [
      235,
      270
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      247
     ]
    },
    "len": {
     "line number": [
      246
     ]
    },
    "time.time": {
     "line number": [
      234,
      271
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.bundles.RecoBundles.refine": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": {
    "dipy.segment.bundles.logger": {
     "line number": [
      332,
      351,
      364,
      374
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      348
     ]
    },
    "len": {
     "line number": [
      347
     ]
    },
    "time.time": {
     "line number": [
      331,
      375
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.bundles.StreamlineLinearRegistration": {
  "data": {
   "shadows": "dipy.align.streamlinear.StreamlineLinearRegistration"
  },
  "type": "import"
 },
 "dipy.segment.bundles.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.segment.bundles.apply_affine": {
  "data": {
   "shadows": "nibabel.affines.apply_affine"
  },
  "type": "import"
 },
 "dipy.segment.bundles.bundle_adjacency": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "dipy.tracking.distances.bundles_distances_mdf": {
     "line number": [
      45
     ]
    },
    "len": {
     "line number": [
      49,
      58,
      64,
      64,
      65,
      65
     ]
    },
    "numpy.argmin": {
     "line number": [
      51,
      60
     ]
    },
    "numpy.array": {
     "line number": [
      54,
      63
     ]
    },
    "numpy.float": {
     "line number": [
      64,
      65
     ]
    },
    "numpy.min": {
     "line number": [
      50,
      59
     ]
    },
    "range": {
     "line number": [
      49,
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.bundles.bundles_distances_mam": {
  "data": {
   "shadows": "dipy.tracking.distances.bundles_distances_mam"
  },
  "type": "import"
 },
 "dipy.segment.bundles.bundles_distances_mdf": {
  "data": {
   "shadows": "dipy.tracking.distances.bundles_distances_mdf"
  },
  "type": "import"
 },
 "dipy.segment.bundles.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "dipy.segment.bundles.check_range": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "dipy.tracking.streamline.length": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.bundles.length": {
  "data": {
   "shadows": "dipy.tracking.streamline.length"
  },
  "type": "import"
 },
 "dipy.segment.bundles.logger": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "dipy.segment.bundles.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.segment.bundles.nbytes": {
  "data": {
   "shadows": "dipy.tracking.streamline.nbytes"
  },
  "type": "import"
 },
 "dipy.segment.bundles.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.bundles.qbx_and_merge": {
  "data": {
   "shadows": "dipy.segment.clustering.qbx_and_merge"
  },
  "type": "import"
 },
 "dipy.segment.bundles.select_random_set_of_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.select_random_set_of_streamlines"
  },
  "type": "import"
 },
 "dipy.segment.bundles.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamline.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.segment.bundles.time": {
  "data": {
   "shadows": "time.time"
  },
  "type": "import"
 },
 "dipy.segment.clustering": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      14
     ]
    },
    "dipy.segment.clustering.logging": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.clustering.ABCMeta": {
  "data": {
   "shadows": "abc.ABCMeta"
  },
  "type": "import"
 },
 "dipy.segment.clustering.AveragePointwiseEuclideanMetric": {
  "data": {
   "shadows": "dipy.segment.metric.AveragePointwiseEuclideanMetric"
  },
  "type": "import"
 },
 "dipy.segment.clustering.Cluster": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "object": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.clustering.Cluster.__cmp__": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.Cluster.__eq__": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      95
     ]
    },
    "isinstance": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.Cluster.__getitem__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      83
     ]
    },
    "int": {
     "line number": [
      75
     ]
    },
    "isinstance": {
     "line number": [
      75,
      75
     ]
    },
    "list": {
     "line number": [
      79
     ]
    },
    "numpy.integer": {
     "line number": [
      75
     ]
    },
    "slice": {
     "line number": [
      77
     ]
    },
    "type": {
     "line number": [
      77,
      79,
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.Cluster.__init__": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "dipy.segment.clustering.Identity": {
     "line number": [
      49
     ]
    },
    "id": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.Cluster.__iter__": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "len": {
     "line number": [
      86
     ]
    },
    "range": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.Cluster.__len__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "len": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.Cluster.__ne__": {
  "data": {
   "lineno": 97
  },
  "type": "function"
 },
 "dipy.segment.clustering.Cluster.__repr__": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "str": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.Cluster.__str__": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "map": {
     "line number": [
      89
     ]
    },
    "str": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.Cluster.assign": {
  "data": {
   "lineno": 103
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterCentroid": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.clustering.ClusterCentroid.__eq__": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      143,
      145
     ]
    },
    "isinstance": {
     "line number": [
      143
     ]
    },
    "numpy.all": {
     "line number": [
      144
     ]
    },
    "super": {
     "line number": [
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterCentroid.__init__": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      138
     ]
    },
    "dipy.segment.clustering.Identity": {
     "line number": [
      137
     ]
    },
    "id": {
     "line number": [
      138
     ]
    },
    "super": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterCentroid.assign": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      159
     ]
    },
    "len": {
     "line number": [
      157
     ]
    },
    "super": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterCentroid.update": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "numpy.equal": {
     "line number": [
      169
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "object": {
     "line number": [
      174
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.clustering.ClusterMap.__eq__": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": {
    "dipy.segment.clustering.operator": {
     "line number": [
      287
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.__ge__": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": {
    "dipy.segment.clustering.operator": {
     "line number": [
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.__getitem__": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      228
     ]
    },
    "isinstance": {
     "line number": [
      226
     ]
    },
    "len": {
     "line number": [
      230
     ]
    },
    "list": {
     "line number": [
      231
     ]
    },
    "numpy.bool": {
     "line number": [
      226
     ]
    },
    "numpy.ndarray": {
     "line number": [
      226
     ]
    },
    "range": {
     "line number": [
      230
     ]
    },
    "slice": {
     "line number": [
      229
     ]
    },
    "type": {
     "line number": [
      229,
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.__gt__": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "dipy.segment.clustering.operator": {
     "line number": [
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.__init__": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "dipy.segment.clustering.Identity": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.__iter__": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "iter": {
     "line number": [
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.__le__": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": {
    "dipy.segment.clustering.operator": {
     "line number": [
      296
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.__len__": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "len": {
     "line number": [
      208
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.__lt__": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "dipy.segment.clustering.operator": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.__ne__": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "dipy.segment.clustering.operator": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.__repr__": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "str": {
     "line number": [
      243
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.__str__": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "map": {
     "line number": [
      240
     ]
    },
    "str": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap._richcmp": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      276,
      284
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      268,
      270
     ]
    },
    "dipy.segment.clustering.operator": {
     "line number": [
      269,
      273
     ]
    },
    "int": {
     "line number": [
      279
     ]
    },
    "isinstance": {
     "line number": [
      268,
      270,
      279
     ]
    },
    "len": {
     "line number": [
      271,
      271,
      280
     ]
    },
    "numpy.array": {
     "line number": [
      280
     ]
    },
    "op": {
     "line number": [
      280
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.add_cluster": {
  "data": {
   "lineno": 304
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.clear": {
  "data": {
   "lineno": 327
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.clusters": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "property": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.clusters_sizes": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": {
    "len": {
     "line number": [
      343
     ]
    },
    "list": {
     "line number": [
      343
     ]
    },
    "map": {
     "line number": [
      343
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.get_large_clusters": {
  "data": {
   "lineno": 345
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.get_small_clusters": {
  "data": {
   "lineno": 360
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.refdata": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "dipy.segment.clustering.Identity": {
     "line number": [
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.remove_cluster": {
  "data": {
   "lineno": 316
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMap.size": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "len": {
     "line number": [
      333
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ClusterMapCentroid": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": {
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      376
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.clustering.ClusterMapCentroid.centroids": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": {
    "property": {
     "line number": [
      390
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.Clustering": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": {
    "abc.ABCMeta": {
     "line number": [
      396
     ]
    },
    "object": {
     "line number": [
      395
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.clustering.Clustering.cluster": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      417
     ]
    },
    "abc.abstractmethod": {
     "line number": [
      398
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.Identity": {
  "data": {
   "lineno": 17
  },
  "type": "class"
 },
 "dipy.segment.clustering.Identity.__getitem__": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "dipy.segment.clustering.Metric": {
  "data": {
   "shadows": "dipy.segment.metric.Metric"
  },
  "type": "import"
 },
 "dipy.segment.clustering.MinimumAverageDirectFlipMetric": {
  "data": {
   "shadows": "dipy.segment.metric.MinimumAverageDirectFlipMetric"
  },
  "type": "import"
 },
 "dipy.segment.clustering.QuickBundles": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": {
    "dipy.segment.clustering.Clustering": {
     "line number": [
      420
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.clustering.QuickBundles.__init__": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      488,
      496
     ]
    },
    "dipy.segment.metric.AveragePointwiseEuclideanMetric": {
     "line number": [
      494
     ]
    },
    "dipy.segment.metric.Metric": {
     "line number": [
      490
     ]
    },
    "dipy.segment.metric.MinimumAverageDirectFlipMetric": {
     "line number": [
      487
     ]
    },
    "dipy.segment.metric.ResampleFeature": {
     "line number": [
      493
     ]
    },
    "isinstance": {
     "line number": [
      487,
      490
     ]
    },
    "numpy.iinfo": {
     "line number": [
      483
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.QuickBundles.cluster": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": {
    "dipy.segment.clustering_algorithms.quickbundles": {
     "line number": [
      516
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.QuickBundlesX": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": {
    "dipy.segment.clustering.Clustering": {
     "line number": [
      525
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.clustering.QuickBundlesX.__init__": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      556,
      564
     ]
    },
    "dipy.segment.metric.AveragePointwiseEuclideanMetric": {
     "line number": [
      562
     ]
    },
    "dipy.segment.metric.Metric": {
     "line number": [
      558
     ]
    },
    "dipy.segment.metric.MinimumAverageDirectFlipMetric": {
     "line number": [
      555
     ]
    },
    "dipy.segment.metric.ResampleFeature": {
     "line number": [
      561
     ]
    },
    "isinstance": {
     "line number": [
      555,
      558
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.QuickBundlesX.cluster": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": {
    "dipy.segment.clustering_algorithms.quickbundlesx": {
     "line number": [
      584
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.ResampleFeature": {
  "data": {
   "shadows": "dipy.segment.metric.ResampleFeature"
  },
  "type": "import"
 },
 "dipy.segment.clustering.TreeCluster": {
  "data": {
   "lineno": 591,
   "symbols_in_volume": {
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      591
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.clustering.TreeCluster.__init__": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": {
    "dipy.segment.clustering.TreeCluster": {
     "line number": [
      593
     ]
    },
    "super": {
     "line number": [
      593
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.TreeCluster.add": {
  "data": {
   "lineno": 598
  },
  "type": "function"
 },
 "dipy.segment.clustering.TreeCluster.is_leaf": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": {
    "len": {
     "line number": [
      604
     ]
    },
    "property": {
     "line number": [
      602
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.TreeClusterMap": {
  "data": {
   "lineno": 607,
   "symbols_in_volume": {
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      607
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.clustering.TreeClusterMap.__init__": {
  "data": {
   "lineno": 608
  },
  "type": "function"
 },
 "dipy.segment.clustering.TreeClusterMap.__init__._retrieves_leaves": {
  "data": {
   "lineno": 612
  },
  "type": "function"
 },
 "dipy.segment.clustering.TreeClusterMap.__iter__": {
  "data": {
   "lineno": 653
  },
  "type": "function"
 },
 "dipy.segment.clustering.TreeClusterMap.get_clusters": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": {
    "_traverse": {
     "line number": [
      667
     ]
    },
    "dipy.segment.clustering.ClusterMapCentroid": {
     "line number": [
      657
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.TreeClusterMap.get_clusters._traverse": {
  "data": {
   "lineno": 659,
   "symbols_in_volume": {
    "_traverse": {
     "line number": [
      665
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.TreeClusterMap.iter_preorder": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": {
    "len": {
     "line number": [
      642,
      645
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.TreeClusterMap.refdata": {
  "data": {
   "lineno": 622,
   "symbols_in_volume": {
    "dipy.segment.clustering.Identity": {
     "line number": [
      625
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.TreeClusterMap.refdata._set_refdata": {
  "data": {
   "lineno": 629
  },
  "type": "function"
 },
 "dipy.segment.clustering.TreeClusterMap.traverse_postorder": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": {
    "visit": {
     "line number": [
      638
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "dipy.segment.clustering.logger": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "dipy.segment.clustering.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.segment.clustering.nbytes": {
  "data": {
   "shadows": "dipy.tracking.streamline.nbytes"
  },
  "type": "import"
 },
 "dipy.segment.clustering.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.clustering.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "dipy.segment.clustering.qbx_and_merge": {
  "data": {
   "lineno": 671,
   "symbols_in_volume": {
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      753
     ]
    },
    "dipy.segment.clustering.ClusterMapCentroid": {
     "line number": [
      751
     ]
    },
    "dipy.segment.clustering.QuickBundlesX": {
     "line number": [
      729,
      738
     ]
    },
    "dipy.segment.clustering.logger": {
     "line number": [
      724,
      725,
      726,
      727,
      736,
      761,
      764
     ]
    },
    "dipy.segment.metric.AveragePointwiseEuclideanMetric": {
     "line number": [
      730,
      739
     ]
    },
    "dipy.tracking.streamline.nbytes": {
     "line number": [
      725
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      721
     ]
    },
    "len": {
     "line number": [
      713,
      741,
      742
     ]
    },
    "min": {
     "line number": [
      719
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      718
     ]
    },
    "time.time": {
     "line number": [
      712,
      726,
      732,
      764
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.clustering.quickbundles": {
  "data": {
   "shadows": "dipy.segment.clustering_algorithms.quickbundles"
  },
  "type": "import"
 },
 "dipy.segment.clustering.quickbundlesx": {
  "data": {
   "shadows": "dipy.segment.clustering_algorithms.quickbundlesx"
  },
  "type": "import"
 },
 "dipy.segment.clustering.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamline.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.segment.clustering.time": {
  "data": {
   "shadows": "time.time"
  },
  "type": "import"
 },
 "dipy.segment.mask": {
  "data": {
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.mask.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.segment.mask.applymask": {
  "data": {
   "lineno": 44
  },
  "type": "function"
 },
 "dipy.segment.mask.binary_dilation": {
  "data": {
   "shadows": "scipy.ndimage.binary_dilation"
  },
  "type": "import"
 },
 "dipy.segment.mask.bounding_box": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "len": {
     "line number": [
      89
     ]
    },
    "range": {
     "line number": [
      86
     ]
    },
    "warnings.warn": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.mask.clean_cc_mask": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": {
    "len": {
     "line number": [
      293
     ]
    },
    "numpy.arange": {
     "line number": [
      294,
      295
     ]
    },
    "numpy.max": {
     "line number": [
      295
     ]
    },
    "numpy.where": {
     "line number": [
      293,
      295,
      296
     ]
    },
    "numpy.zeros": {
     "line number": [
      288
     ]
    },
    "scipy.ndimage.measurements.label": {
     "line number": [
      291
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.mask.color_fa": {
  "data": {
   "shadows": "dipy.reconst.dti.color_fa"
  },
  "type": "import"
 },
 "dipy.segment.mask.crop": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "slice": {
     "line number": [
      119
     ]
    },
    "tuple": {
     "line number": [
      119
     ]
    },
    "zip": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.mask.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.segment.mask.fractional_anisotropy": {
  "data": {
   "shadows": "dipy.reconst.dti.fractional_anisotropy"
  },
  "type": "import"
 },
 "dipy.segment.mask.generate_binary_structure": {
  "data": {
   "shadows": "scipy.ndimage.generate_binary_structure"
  },
  "type": "import"
 },
 "dipy.segment.mask.label": {
  "data": {
   "shadows": "scipy.ndimage.measurements.label"
  },
  "type": "import"
 },
 "dipy.segment.mask.median_filter": {
  "data": {
   "shadows": "scipy.ndimage.filters.median_filter"
  },
  "type": "import"
 },
 "dipy.segment.mask.median_otsu": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      196
     ]
    },
    "dipy.segment.mask.applymask": {
     "line number": [
      215,
      217
     ]
    },
    "dipy.segment.mask.bounding_box": {
     "line number": [
      212
     ]
    },
    "dipy.segment.mask.crop": {
     "line number": [
      213,
      214
     ]
    },
    "dipy.segment.mask.multi_median": {
     "line number": [
      201
     ]
    },
    "dipy.segment.threshold.otsu": {
     "line number": [
      202
     ]
    },
    "len": {
     "line number": [
      192
     ]
    },
    "numpy.mean": {
     "line number": [
      194
     ]
    },
    "scipy.ndimage.binary_dilation": {
     "line number": [
      207
     ]
    },
    "scipy.ndimage.generate_binary_structure": {
     "line number": [
      206
     ]
    },
    "tuple": {
     "line number": [
      194
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.mask.multi_median": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "input": {
     "line number": [
      40,
      40,
      41
     ]
    },
    "input.shape": {
     "line number": [
      36
     ]
    },
    "numpy.ones_like": {
     "line number": [
      36
     ]
    },
    "range": {
     "line number": [
      39
     ]
    },
    "scipy.ndimage.filters.median_filter": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.mask.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.mask.otsu": {
  "data": {
   "shadows": "dipy.segment.threshold.otsu"
  },
  "type": "import"
 },
 "dipy.segment.mask.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.segment.mask.segment_from_cfa": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      257
     ]
    },
    "dipy.reconst.dti.color_fa": {
     "line number": [
      256
     ]
    },
    "dipy.reconst.dti.fractional_anisotropy": {
     "line number": [
      252
     ]
    },
    "numpy.all": {
     "line number": [
      262
     ]
    },
    "numpy.asarray": {
     "line number": [
      257
     ]
    },
    "numpy.clip": {
     "line number": [
      254
     ]
    },
    "numpy.isnan": {
     "line number": [
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.mask.warn": {
  "data": {
   "shadows": "warnings.warn"
  },
  "type": "import"
 },
 "dipy.segment.metric": {
  "data": {
   "symbols_in_volume": {
    "dipy.segment.metricspeed.SumPointwiseEuclideanMetric": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.metric.ArcLengthFeature": {
  "data": {
   "shadows": "dipy.segment.featurespeed.ArcLengthFeature"
  },
  "type": "import"
 },
 "dipy.segment.metric.AveragePointwiseEuclideanMetric": {
  "data": {
   "shadows": "dipy.segment.metricspeed.AveragePointwiseEuclideanMetric"
  },
  "type": "import"
 },
 "dipy.segment.metric.CenterOfMassFeature": {
  "data": {
   "shadows": "dipy.segment.featurespeed.CenterOfMassFeature"
  },
  "type": "import"
 },
 "dipy.segment.metric.CosineMetric": {
  "data": {
   "shadows": "dipy.segment.metricspeed.CosineMetric"
  },
  "type": "import"
 },
 "dipy.segment.metric.EuclideanMetric": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "dipy.segment.metric.Feature": {
  "data": {
   "shadows": "dipy.segment.featurespeed.Feature"
  },
  "type": "import"
 },
 "dipy.segment.metric.IdentityFeature": {
  "data": {
   "shadows": "dipy.segment.featurespeed.IdentityFeature"
  },
  "type": "import"
 },
 "dipy.segment.metric.Metric": {
  "data": {
   "shadows": "dipy.segment.metricspeed.Metric"
  },
  "type": "import"
 },
 "dipy.segment.metric.MidpointFeature": {
  "data": {
   "shadows": "dipy.segment.featurespeed.MidpointFeature"
  },
  "type": "import"
 },
 "dipy.segment.metric.MinimumAverageDirectFlipMetric": {
  "data": {
   "shadows": "dipy.segment.metricspeed.MinimumAverageDirectFlipMetric"
  },
  "type": "import"
 },
 "dipy.segment.metric.ResampleFeature": {
  "data": {
   "shadows": "dipy.segment.featurespeed.ResampleFeature"
  },
  "type": "import"
 },
 "dipy.segment.metric.SumPointwiseEuclideanMetric": {
  "data": {
   "shadows": "dipy.segment.metricspeed.SumPointwiseEuclideanMetric"
  },
  "type": "import"
 },
 "dipy.segment.metric.VectorOfEndpointsFeature": {
  "data": {
   "shadows": "dipy.segment.featurespeed.VectorOfEndpointsFeature"
  },
  "type": "import"
 },
 "dipy.segment.metric.dist": {
  "data": {
   "shadows": "dipy.segment.metricspeed.dist"
  },
  "type": "import"
 },
 "dipy.segment.metric.distance_matrix": {
  "data": {
   "shadows": "dipy.segment.metricspeed.distance_matrix"
  },
  "type": "import"
 },
 "dipy.segment.metric.mdf": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "dipy.segment.metricspeed.MinimumAverageDirectFlipMetric": {
     "line number": [
      46
     ]
    },
    "dipy.segment.metricspeed.dist": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests": {
  "data": {},
  "type": "module"
 },
 "dipy.segment.tests.test_adjustment": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      60
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.tests.test_adjustment.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_adjustment.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_adjustment.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_adjustment.test_adjustment": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "dipy.segment.threshold.upper_bound_by_percent": {
     "line number": [
      21
     ]
    },
    "dipy.segment.threshold.upper_bound_by_rate": {
     "line number": [
      20
     ]
    },
    "numpy.interp": {
     "line number": [
      22,
      23
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      54,
      55,
      57,
      58
     ]
    },
    "numpy.unique": {
     "line number": [
      36,
      37
     ]
    },
    "numpy.zeros": {
     "line number": [
      9
     ]
    },
    "range": {
     "line number": [
      11,
      12,
      39,
      40,
      46,
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_adjustment.upper_bound_by_percent": {
  "data": {
   "shadows": "dipy.segment.threshold.upper_bound_by_percent"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_adjustment.upper_bound_by_rate": {
  "data": {
   "shadows": "dipy.segment.threshold.upper_bound_by_rate"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_adjustment.zeros": {
  "data": {
   "shadows": "numpy.zeros"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      257
     ]
    },
    "dipy.segment.tests.test_bundles.sys": {
     "line number": [
      15
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      259
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.tests.test_bundles.RecoBundles": {
  "data": {
   "shadows": "dipy.segment.bundles.RecoBundles"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.bundles_distances_mam": {
  "data": {
   "shadows": "dipy.tracking.distances.bundles_distances_mam"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.is_big_endian": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_bundles.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.qbx_and_merge": {
  "data": {
   "shadows": "dipy.segment.clustering.qbx_and_merge"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.setup_module": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      21
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      22
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      25
     ]
    },
    "numpy.array": {
     "line number": [
      29,
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_bundles.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_bundles.test_rb_check_defaults": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "dipy.segment.bundles.RecoBundles": {
     "line number": [
      42
     ]
    },
    "dipy.segment.tests.test_bundles.is_big_endian": {
     "line number": [
      38
     ]
    },
    "dipy.segment.tests.test_bundles.pytest": {
     "line number": [
      38
     ]
    },
    "dipy.tracking.distances.bundles_distances_mam": {
     "line number": [
      48,
      60
     ]
    },
    "len": {
     "line number": [
      51,
      51
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      53,
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_bundles.test_rb_clustermap": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "dipy.segment.bundles.RecoBundles": {
     "line number": [
      163
     ]
    },
    "dipy.segment.clustering.qbx_and_merge": {
     "line number": [
      161
     ]
    },
    "dipy.segment.tests.test_bundles.is_big_endian": {
     "line number": [
      157
     ]
    },
    "dipy.segment.tests.test_bundles.pytest": {
     "line number": [
      157
     ]
    },
    "dipy.tracking.distances.bundles_distances_mam": {
     "line number": [
      169,
      181
     ]
    },
    "len": {
     "line number": [
      172,
      172
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      174,
      185
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_bundles.test_rb_disable_slr": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "dipy.segment.bundles.RecoBundles": {
     "line number": [
      71
     ]
    },
    "dipy.segment.tests.test_bundles.is_big_endian": {
     "line number": [
      67
     ]
    },
    "dipy.segment.tests.test_bundles.pytest": {
     "line number": [
      67
     ]
    },
    "dipy.tracking.distances.bundles_distances_mam": {
     "line number": [
      78,
      90
     ]
    },
    "len": {
     "line number": [
      81,
      81
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      83,
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_bundles.test_rb_no_neighb": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "dipy.segment.bundles.RecoBundles": {
     "line number": [
      204
     ]
    },
    "dipy.segment.tests.test_bundles.is_big_endian": {
     "line number": [
      188
     ]
    },
    "dipy.segment.tests.test_bundles.pytest": {
     "line number": [
      188
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      193
     ]
    },
    "len": {
     "line number": [
      210,
      216,
      217,
      220,
      221
     ]
    },
    "numpy.array": {
     "line number": [
      197,
      200
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      216,
      217,
      220,
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_bundles.test_rb_no_verbose_and_mam": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "dipy.segment.bundles.RecoBundles": {
     "line number": [
      130
     ]
    },
    "dipy.segment.tests.test_bundles.is_big_endian": {
     "line number": [
      126
     ]
    },
    "dipy.segment.tests.test_bundles.pytest": {
     "line number": [
      126
     ]
    },
    "dipy.tracking.distances.bundles_distances_mam": {
     "line number": [
      138,
      150
     ]
    },
    "len": {
     "line number": [
      141,
      141
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      143,
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_bundles.test_rb_reduction_mam": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": {
    "dipy.segment.bundles.RecoBundles": {
     "line number": [
      228
     ]
    },
    "dipy.segment.tests.test_bundles.is_big_endian": {
     "line number": [
      224
     ]
    },
    "dipy.segment.tests.test_bundles.pytest": {
     "line number": [
      224
     ]
    },
    "dipy.tracking.distances.bundles_distances_mam": {
     "line number": [
      238,
      250
     ]
    },
    "len": {
     "line number": [
      241,
      241
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      243,
      254
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_bundles.test_rb_slr_threads": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "dipy.segment.bundles.RecoBundles": {
     "line number": [
      102,
      110
     ]
    },
    "dipy.segment.tests.test_bundles.is_big_endian": {
     "line number": [
      97
     ]
    },
    "dipy.segment.tests.test_bundles.pytest": {
     "line number": [
      97
     ]
    },
    "dipy.tracking.distances.bundles_distances_mam": {
     "line number": [
      118
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      101,
      103,
      111
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      759
     ]
    },
    "dipy.segment.tests.test_clustering.dtype": {
     "line number": [
      17,
      19,
      20,
      21,
      22,
      23
     ]
    },
    "dipy.segment.tests.test_clustering.features_shape": {
     "line number": [
      17
     ]
    },
    "numpy.arange": {
     "line number": [
      19,
      20,
      21,
      22,
      23
     ]
    },
    "numpy.ones": {
     "line number": [
      17
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      760
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.tests.test_clustering.Cluster": {
  "data": {
   "shadows": "dipy.segment.clustering.Cluster"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.ClusterCentroid": {
  "data": {
   "shadows": "dipy.segment.clustering.ClusterCentroid"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.ClusterMap": {
  "data": {
   "shadows": "dipy.segment.clustering.ClusterMap"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.ClusterMapCentroid": {
  "data": {
   "shadows": "dipy.segment.clustering.ClusterMapCentroid"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.Clustering": {
  "data": {
   "shadows": "dipy.segment.clustering.Clustering"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.assert_arrays_equal": {
  "data": {
   "shadows": "dipy.testing.assert_arrays_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.data": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_clustering.dtype": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_clustering.expected_clusters": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_clustering.features": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_clustering.features_shape": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_clustering.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_clustering.test_cluster_assign": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      49,
      60
     ]
    },
    "len": {
     "line number": [
      55
     ]
    },
    "list": {
     "line number": [
      56
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      57,
      62
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      55,
      56
     ]
    },
    "range": {
     "line number": [
      52,
      61
     ]
    },
    "type": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_attributes_and_constructor": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      45
     ]
    },
    "dipy.segment.clustering.Cluster": {
     "line number": [
      29,
      30,
      37,
      40
     ]
    },
    "dipy.testing.assert_false": {
     "line number": [
      40
     ]
    },
    "len": {
     "line number": [
      34
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      33
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      30,
      32,
      34,
      37
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      45
     ]
    },
    "type": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_centroid_assign": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      176
     ]
    },
    "dipy.segment.tests.test_clustering.dtype": {
     "line number": [
      179
     ]
    },
    "dipy.segment.tests.test_clustering.features": {
     "line number": [
      181,
      184
     ]
    },
    "dipy.segment.tests.test_clustering.features_shape": {
     "line number": [
      175,
      179
     ]
    },
    "len": {
     "line number": [
      185
     ]
    },
    "list": {
     "line number": [
      186
     ]
    },
    "numpy.ndarray": {
     "line number": [
      188
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      187,
      189
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      185,
      186,
      188
     ]
    },
    "numpy.zeros": {
     "line number": [
      175,
      179
     ]
    },
    "range": {
     "line number": [
      180
     ]
    },
    "type": {
     "line number": [
      186,
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_centroid_attributes_and_constructor": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      171
     ]
    },
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      157,
      158,
      166,
      167,
      168
     ]
    },
    "dipy.segment.tests.test_clustering.features_shape": {
     "line number": [
      156,
      162
     ]
    },
    "dipy.testing.assert_false": {
     "line number": [
      167,
      168
     ]
    },
    "len": {
     "line number": [
      163
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      161,
      162
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      158,
      160,
      163,
      166
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      171
     ]
    },
    "numpy.zeros": {
     "line number": [
      156,
      162
     ]
    },
    "type": {
     "line number": [
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_centroid_getitem": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      230,
      231,
      252,
      253
     ]
    },
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      217
     ]
    },
    "dipy.segment.tests.test_clustering.data": {
     "line number": [
      211,
      241,
      245,
      249,
      256,
      257,
      258,
      259,
      260
     ]
    },
    "dipy.segment.tests.test_clustering.features": {
     "line number": [
      219
     ]
    },
    "dipy.segment.tests.test_clustering.features_shape": {
     "line number": [
      216
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      236,
      237,
      238,
      248,
      257,
      258,
      259,
      260
     ]
    },
    "len": {
     "line number": [
      211,
      230,
      231,
      252,
      253
     ]
    },
    "list": {
     "line number": [
      211
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      212
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      226,
      235,
      245,
      256
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      223,
      234
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      230,
      231,
      252,
      253
     ]
    },
    "numpy.zeros": {
     "line number": [
      216
     ]
    },
    "range": {
     "line number": [
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_centroid_iter": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      198
     ]
    },
    "dipy.segment.tests.test_clustering.data": {
     "line number": [
      193,
      206,
      207
     ]
    },
    "dipy.segment.tests.test_clustering.features": {
     "line number": [
      200
     ]
    },
    "dipy.segment.tests.test_clustering.features_shape": {
     "line number": [
      197
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      207
     ]
    },
    "len": {
     "line number": [
      193
     ]
    },
    "list": {
     "line number": [
      193,
      203,
      207
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      194
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      202,
      203
     ]
    },
    "numpy.zeros": {
     "line number": [
      197
     ]
    },
    "range": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_getitem": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      98,
      99,
      123,
      124
     ]
    },
    "TypeError": {
     "line number": [
      109,
      134
     ]
    },
    "dipy.segment.clustering.Cluster": {
     "line number": [
      86
     ]
    },
    "dipy.segment.tests.test_clustering.data": {
     "line number": [
      81,
      112,
      116,
      120,
      127,
      128,
      129,
      130,
      131
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      104,
      105,
      106,
      119,
      128,
      129,
      130,
      131
     ]
    },
    "len": {
     "line number": [
      81,
      98,
      99,
      123,
      124
     ]
    },
    "list": {
     "line number": [
      81
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      82
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      94,
      103,
      116,
      127
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      91,
      102
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      98,
      99,
      109,
      123,
      124,
      134
     ]
    },
    "range": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_iter": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      70
     ]
    },
    "dipy.segment.tests.test_clustering.data": {
     "line number": [
      66,
      76,
      77
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      77
     ]
    },
    "len": {
     "line number": [
      66
     ]
    },
    "list": {
     "line number": [
      66,
      73,
      77
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      67
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      72,
      73
     ]
    },
    "range": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_add_cluster": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      278,
      287
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      273,
      295
     ]
    },
    "dipy.segment.tests.test_clustering.itertools": {
     "line number": [
      291,
      292,
      297,
      298
     ]
    },
    "len": {
     "line number": [
      288
     ]
    },
    "list": {
     "line number": [
      291,
      292,
      297,
      298
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      291,
      297
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      287,
      288,
      289
     ]
    },
    "range": {
     "line number": [
      277,
      282
     ]
    },
    "type": {
     "line number": [
      287
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_attributes_and_constructor": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      269
     ]
    },
    "IndexError": {
     "line number": [
      268
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      264
     ]
    },
    "len": {
     "line number": [
      265
     ]
    },
    "list": {
     "line number": [
      267
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      266,
      267
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      265
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      268,
      269
     ]
    },
    "setattr": {
     "line number": [
      269
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_centroid_add_cluster": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      587,
      591
     ]
    },
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      566,
      577
     ]
    },
    "dipy.segment.clustering.ClusterMapCentroid": {
     "line number": [
      562
     ]
    },
    "dipy.segment.tests.test_clustering.dtype": {
     "line number": [
      586,
      590
     ]
    },
    "dipy.segment.tests.test_clustering.features": {
     "line number": [
      566,
      568,
      570,
      572
     ]
    },
    "dipy.segment.tests.test_clustering.features_shape": {
     "line number": [
      585,
      589
     ]
    },
    "dipy.segment.tests.test_clustering.itertools": {
     "line number": [
      581,
      582
     ]
    },
    "list": {
     "line number": [
      580,
      581,
      582
     ]
    },
    "numpy.ones": {
     "line number": [
      586,
      590
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      576,
      581
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      577,
      578,
      580
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      587,
      591
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      566,
      568
     ]
    },
    "range": {
     "line number": [
      565,
      569
     ]
    },
    "type": {
     "line number": [
      577,
      580
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_centroid_attributes_and_constructor": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      558
     ]
    },
    "dipy.segment.clustering.ClusterMapCentroid": {
     "line number": [
      556
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      557
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      558
     ]
    },
    "setattr": {
     "line number": [
      558
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_centroid_comparison_with_int": {
  "data": {
   "lineno": 691,
   "symbols_in_volume": {
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      698,
      702,
      706
     ]
    },
    "dipy.segment.clustering.ClusterMapCentroid": {
     "line number": [
      715
     ]
    },
    "dipy.segment.tests.test_clustering.features": {
     "line number": [
      697,
      700,
      704,
      708
     ]
    },
    "list": {
     "line number": [
      722,
      726,
      727,
      731,
      735,
      736,
      740,
      744,
      745
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      722,
      726,
      727,
      731,
      735,
      736,
      740,
      744,
      745
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      721,
      725,
      730,
      734,
      739,
      743
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      697
     ]
    },
    "range": {
     "line number": [
      692,
      693
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_centroid_getitem": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      680,
      681
     ]
    },
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      667
     ]
    },
    "dipy.segment.clustering.ClusterMapCentroid": {
     "line number": [
      663
     ]
    },
    "dipy.segment.tests.test_clustering.data": {
     "line number": [
      659
     ]
    },
    "dipy.segment.tests.test_clustering.features": {
     "line number": [
      666
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      676,
      686,
      687,
      688
     ]
    },
    "len": {
     "line number": [
      659,
      680,
      681
     ]
    },
    "list": {
     "line number": [
      659
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      660
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      685
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      673,
      684
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      680,
      681
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      666
     ]
    },
    "range": {
     "line number": [
      659,
      665
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_centroid_iter": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": {
    "all": {
     "line number": [
      645
     ]
    },
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      639
     ]
    },
    "dipy.segment.clustering.ClusterMapCentroid": {
     "line number": [
      635
     ]
    },
    "dipy.segment.tests.test_clustering.data": {
     "line number": [
      640,
      652,
      654
     ]
    },
    "dipy.segment.tests.test_clustering.features": {
     "line number": [
      638
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      654
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      645
     ]
    },
    "len": {
     "line number": [
      640
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      632
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      647,
      648,
      649
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      638
     ]
    },
    "range": {
     "line number": [
      637
     ]
    },
    "zip": {
     "line number": [
      646,
      653
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_centroid_remove_cluster": {
  "data": {
   "lineno": 594,
   "symbols_in_volume": {
    "dipy.segment.clustering.ClusterCentroid": {
     "line number": [
      598,
      602,
      606
     ]
    },
    "dipy.segment.clustering.ClusterMapCentroid": {
     "line number": [
      595
     ]
    },
    "dipy.segment.tests.test_clustering.dtype": {
     "line number": [
      597,
      601,
      605
     ]
    },
    "dipy.segment.tests.test_clustering.features_shape": {
     "line number": [
      597,
      601,
      605
     ]
    },
    "dipy.segment.tests.test_clustering.itertools": {
     "line number": [
      613,
      614,
      621,
      627
     ]
    },
    "len": {
     "line number": [
      609,
      612,
      620,
      626
     ]
    },
    "list": {
     "line number": [
      613,
      614,
      621,
      621,
      627
     ]
    },
    "numpy.array": {
     "line number": [
      615,
      622
     ]
    },
    "numpy.random.rand": {
     "line number": [
      597,
      601,
      605
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      613,
      615,
      621,
      622,
      627,
      628
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      609,
      612,
      616,
      617,
      620,
      623,
      626
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_clear": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      352
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      350
     ]
    },
    "dipy.segment.tests.test_clustering.itertools": {
     "line number": [
      357
     ]
    },
    "len": {
     "line number": [
      356
     ]
    },
    "list": {
     "line number": [
      357
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      357
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      356
     ]
    },
    "range": {
     "line number": [
      351,
      352
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_clusters_sizes": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      452
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      451
     ]
    },
    "len": {
     "line number": [
      455
     ]
    },
    "list": {
     "line number": [
      455
     ]
    },
    "map": {
     "line number": [
      455
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      446
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      455
     ]
    },
    "range": {
     "line number": [
      449,
      449,
      452
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_comparison_with_int": {
  "data": {
   "lineno": 485,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      492,
      496,
      500
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      491
     ]
    },
    "list": {
     "line number": [
      506,
      510,
      511,
      515,
      519,
      520,
      524,
      528,
      529
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      506,
      510,
      511,
      515,
      519,
      520,
      524,
      528,
      529
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      505,
      509,
      514,
      518,
      523,
      527
     ]
    },
    "range": {
     "line number": [
      486,
      487
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_comparison_with_object": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      549,
      552
     ]
    },
    "dipy.segment.clustering.Cluster": {
     "line number": [
      537
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      534
     ]
    },
    "dipy.segment.tests.test_clustering.copy": {
     "line number": [
      542,
      545,
      548
     ]
    },
    "dipy.testing.assert_false": {
     "line number": [
      546
     ]
    },
    "float": {
     "line number": [
      552
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      543
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      549,
      552
     ]
    },
    "range": {
     "line number": [
      536,
      537
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_get_small_and_large_clusters": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      465,
      471
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      461
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      477,
      481
     ]
    },
    "len": {
     "line number": [
      474,
      475,
      476,
      479,
      480
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      459
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      474,
      475,
      479
     ]
    },
    "range": {
     "line number": [
      464,
      465,
      470,
      471
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_getitem": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      410,
      411
     ]
    },
    "dipy.segment.clustering.Cluster": {
     "line number": [
      397
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      394
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      406,
      416,
      417,
      418
     ]
    },
    "len": {
     "line number": [
      410,
      411
     ]
    },
    "list": {
     "line number": [
      390
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      391
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      415
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      403,
      414
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      410,
      411
     ]
    },
    "range": {
     "line number": [
      390,
      396,
      397
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_iter": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": {
    "all": {
     "line number": [
      372
     ]
    },
    "dipy.segment.clustering.Cluster": {
     "line number": [
      368
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      365
     ]
    },
    "dipy.segment.tests.test_clustering.data": {
     "line number": [
      368,
      379,
      381
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      381
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      372
     ]
    },
    "len": {
     "line number": [
      368
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      361
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      374,
      375,
      376,
      385
     ]
    },
    "range": {
     "line number": [
      367
     ]
    },
    "zip": {
     "line number": [
      372,
      380
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_remove_cluster": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      304,
      307,
      310
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      302,
      332,
      340
     ]
    },
    "dipy.segment.tests.test_clustering.itertools": {
     "line number": [
      317,
      318,
      324,
      329,
      337,
      345
     ]
    },
    "len": {
     "line number": [
      313,
      316,
      323,
      328,
      336,
      344
     ]
    },
    "list": {
     "line number": [
      317,
      318,
      324,
      324,
      329,
      337,
      337,
      345
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      317,
      324,
      329,
      337,
      345
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      313,
      316,
      319,
      320,
      323,
      325,
      328,
      336,
      338,
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_size": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      438
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      437
     ]
    },
    "len": {
     "line number": [
      441
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      441,
      442
     ]
    },
    "range": {
     "line number": [
      438
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_map_str_and_repr": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      426
     ]
    },
    "dipy.segment.clustering.ClusterMap": {
     "line number": [
      423
     ]
    },
    "map": {
     "line number": [
      430
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      431,
      432
     ]
    },
    "range": {
     "line number": [
      425,
      426
     ]
    },
    "repr": {
     "line number": [
      432
     ]
    },
    "str": {
     "line number": [
      430,
      431
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_cluster_str_and_repr": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "dipy.segment.clustering.Cluster": {
     "line number": [
      142
     ]
    },
    "dipy.segment.tests.test_clustering.data": {
     "line number": [
      138,
      149
     ]
    },
    "len": {
     "line number": [
      138
     ]
    },
    "list": {
     "line number": [
      138
     ]
    },
    "map": {
     "line number": [
      144,
      146,
      150,
      152
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      139
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      144,
      145,
      150,
      151
     ]
    },
    "range": {
     "line number": [
      138
     ]
    },
    "repr": {
     "line number": [
      145,
      151
     ]
    },
    "str": {
     "line number": [
      144,
      144,
      146,
      150,
      150,
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_subclassing_clustering": {
  "data": {
   "lineno": 748,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      754
     ]
    },
    "SubClustering": {
     "line number": [
      753,
      755
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      754
     ]
    },
    "super": {
     "line number": [
      755
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_clustering.test_subclassing_clustering.SubClustering": {
  "data": {
   "lineno": 749,
   "symbols_in_volume": {
    "dipy.segment.clustering.Clustering": {
     "line number": [
      749
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_clustering.test_subclassing_clustering.SubClustering.cluster": {
  "data": {
   "lineno": 750
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      319
     ]
    },
    "dipy.segment.tests.test_feature.dtype": {
     "line number": [
      12,
      13,
      14,
      15
     ]
    },
    "numpy.arange": {
     "line number": [
      12,
      13
     ]
    },
    "numpy.array": {
     "line number": [
      12
     ]
    },
    "numpy.random.rand": {
     "line number": [
      14,
      15
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      320
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.tests.test_feature.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.dipymetric": {
  "data": {
   "shadows": "dipy.segment.metric"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.dtype": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_feature.extract": {
  "data": {
   "shadows": "dipy.segment.featurespeed.extract"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.length": {
  "data": {
   "shadows": "dipy.tracking.streamline.length"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.s1": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_feature.s2": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_feature.s3": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_feature.s4": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_feature.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamline.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_feature.test_feature_arclength": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": {
    "ArcLengthFeature": {
     "line number": [
      172
     ]
    },
    "dipy.segment.metric.ArcLengthFeature": {
     "line number": [
      172
     ]
    },
    "dipy.segment.tests.test_feature.s1": {
     "line number": [
      173,
      184
     ]
    },
    "dipy.segment.tests.test_feature.s2": {
     "line number": [
      173,
      184
     ]
    },
    "dipy.segment.tests.test_feature.s3": {
     "line number": [
      173,
      184
     ]
    },
    "dipy.segment.tests.test_feature.s4": {
     "line number": [
      173,
      184
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      183
     ]
    },
    "dipy.tracking.streamline.length": {
     "line number": [
      180
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      180,
      187
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      175,
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_arclength.ArcLengthFeature": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "dipy.segment.metric.Feature": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_feature.test_feature_arclength.ArcLengthFeature.__init__": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "super": {
     "line number": [
      164
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_arclength.ArcLengthFeature.extract": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": {
    "dipy.tracking.streamline.length": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_arclength.ArcLengthFeature.infer_shape": {
  "data": {
   "lineno": 166
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_center_of_mass": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "CenterOfMassFeature": {
     "line number": [
      107
     ]
    },
    "dipy.segment.metric.CenterOfMassFeature": {
     "line number": [
      107
     ]
    },
    "dipy.segment.tests.test_feature.s1": {
     "line number": [
      108,
      119
     ]
    },
    "dipy.segment.tests.test_feature.s2": {
     "line number": [
      108,
      119
     ]
    },
    "dipy.segment.tests.test_feature.s3": {
     "line number": [
      108,
      119
     ]
    },
    "dipy.segment.tests.test_feature.s4": {
     "line number": [
      108,
      119
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      118
     ]
    },
    "numpy.mean": {
     "line number": [
      115
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      115,
      122
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      110,
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_center_of_mass.CenterOfMassFeature": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "dipy.segment.metric.Feature": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_feature.test_feature_center_of_mass.CenterOfMassFeature.__init__": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "super": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_center_of_mass.CenterOfMassFeature.extract": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "numpy.mean": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_center_of_mass.CenterOfMassFeature.infer_shape": {
  "data": {
   "lineno": 101
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_extract": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "ArcLengthFeature": {
     "line number": [
      256
     ]
    },
    "CenterOfMass64bit": {
     "line number": [
      236
     ]
    },
    "dipy.segment.featurespeed.extract": {
     "line number": [
      241,
      258
     ]
    },
    "len": {
     "line number": [
      243,
      243,
      259,
      259
     ]
    },
    "numpy.arange": {
     "line number": [
      239
     ]
    },
    "numpy.float32": {
     "line number": [
      239
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      233
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      243,
      244,
      259,
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_extract.ArcLengthFeature": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "dipy.segment.metric.Feature": {
     "line number": [
      247
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_feature.test_feature_extract.ArcLengthFeature.extract": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "numpy.sqrt": {
     "line number": [
      253
     ]
    },
    "numpy.sum": {
     "line number": [
      252,
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_extract.ArcLengthFeature.infer_shape": {
  "data": {
   "lineno": 248
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_extract.CenterOfMass64bit": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": {
    "dipy.segment.metric.Feature": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_feature.test_feature_extract.CenterOfMass64bit.extract": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": {
    "numpy.float64": {
     "line number": [
      231
     ]
    },
    "numpy.mean": {
     "line number": [
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_extract.CenterOfMass64bit.infer_shape": {
  "data": {
   "lineno": 227
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_midpoint": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "MidpointFeature": {
     "line number": [
      137
     ]
    },
    "dipy.segment.metric.MidpointFeature": {
     "line number": [
      137
     ]
    },
    "dipy.segment.tests.test_feature.s1": {
     "line number": [
      138,
      149
     ]
    },
    "dipy.segment.tests.test_feature.s2": {
     "line number": [
      138,
      149
     ]
    },
    "dipy.segment.tests.test_feature.s3": {
     "line number": [
      138,
      149
     ]
    },
    "dipy.segment.tests.test_feature.s4": {
     "line number": [
      138,
      149
     ]
    },
    "dipy.testing.assert_false": {
     "line number": [
      148
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      153
     ]
    },
    "len": {
     "line number": [
      145,
      152
     ]
    },
    "numpy.any": {
     "line number": [
      153
     ]
    },
    "numpy.not_equal": {
     "line number": [
      153
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      145
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      155
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      140,
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_midpoint.MidpointFeature": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "dipy.segment.metric.Feature": {
     "line number": [
      127
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_feature.test_feature_midpoint.MidpointFeature.__init__": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "super": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_midpoint.MidpointFeature.extract": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "len": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_midpoint.MidpointFeature.infer_shape": {
  "data": {
   "lineno": 131
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_resample": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "ResampleFeature": {
     "line number": [
      74
     ]
    },
    "ValueError": {
     "line number": [
      68,
      69
     ]
    },
    "dipy.segment.metric.ResampleFeature": {
     "line number": [
      68,
      73
     ]
    },
    "dipy.segment.tests.test_feature.s1": {
     "line number": [
      71,
      75,
      87
     ]
    },
    "dipy.segment.tests.test_feature.s2": {
     "line number": [
      71,
      75,
      87
     ]
    },
    "dipy.segment.tests.test_feature.s3": {
     "line number": [
      71,
      75,
      87
     ]
    },
    "dipy.segment.tests.test_feature.s4": {
     "line number": [
      71,
      75,
      87
     ]
    },
    "dipy.testing.assert_false": {
     "line number": [
      86
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      92
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      83,
      91
     ]
    },
    "len": {
     "line number": [
      71
     ]
    },
    "map": {
     "line number": [
      71
     ]
    },
    "max": {
     "line number": [
      71
     ]
    },
    "numpy.any": {
     "line number": [
      92
     ]
    },
    "numpy.not_equal": {
     "line number": [
      92
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      82
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      90
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      77,
      81
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      68,
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_resample.ResampleFeature": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "dipy.segment.metric.Feature": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_feature.test_feature_resample.ResampleFeature.__init__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      60
     ]
    },
    "super": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_resample.ResampleFeature.extract": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_resample.ResampleFeature.infer_shape": {
  "data": {
   "lineno": 62
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_vector_of_endpoints": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "VectorOfEndpointsFeature": {
     "line number": [
      203
     ]
    },
    "dipy.segment.metric.VectorOfEndpointsFeature": {
     "line number": [
      202
     ]
    },
    "dipy.segment.tests.test_feature.s1": {
     "line number": [
      205,
      216
     ]
    },
    "dipy.segment.tests.test_feature.s2": {
     "line number": [
      205,
      216
     ]
    },
    "dipy.segment.tests.test_feature.s3": {
     "line number": [
      205,
      216
     ]
    },
    "dipy.segment.tests.test_feature.s4": {
     "line number": [
      205,
      216
     ]
    },
    "dipy.testing.assert_false": {
     "line number": [
      215
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      212,
      220
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      207,
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_vector_of_endpoints.VectorOfEndpointsFeature": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "dipy.segment.metric.Feature": {
     "line number": [
      192
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_feature.test_feature_vector_of_endpoints.VectorOfEndpointsFeature.__init__": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": {
    "super": {
     "line number": [
      194
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_vector_of_endpoints.VectorOfEndpointsFeature.extract": {
  "data": {
   "lineno": 199
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_feature_vector_of_endpoints.VectorOfEndpointsFeature.infer_shape": {
  "data": {
   "lineno": 196
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_identity_feature": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "IdentityFeature": {
     "line number": [
      30
     ]
    },
    "dipy.segment.metric.IdentityFeature": {
     "line number": [
      30
     ]
    },
    "dipy.segment.tests.test_feature.s1": {
     "line number": [
      31,
      42
     ]
    },
    "dipy.segment.tests.test_feature.s2": {
     "line number": [
      31,
      42
     ]
    },
    "dipy.segment.tests.test_feature.s3": {
     "line number": [
      31,
      42
     ]
    },
    "dipy.segment.tests.test_feature.s4": {
     "line number": [
      31,
      42
     ]
    },
    "dipy.testing.assert_false": {
     "line number": [
      41
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      46
     ]
    },
    "numpy.any": {
     "line number": [
      46
     ]
    },
    "numpy.not_equal": {
     "line number": [
      46
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      38,
      45
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      33,
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_identity_feature.IdentityFeature": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "dipy.segment.metric.Feature": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_feature.test_identity_feature.IdentityFeature.__init__": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "super": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_identity_feature.IdentityFeature.extract": {
  "data": {
   "lineno": 27
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_identity_feature.IdentityFeature.infer_shape": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_subclassing_feature": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "EmptyFeature": {
     "line number": [
      271
     ]
    },
    "NotImplementedError": {
     "line number": [
      272,
      273
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      272,
      273
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_subclassing_feature.EmptyFeature": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "dipy.segment.metric.Feature": {
     "line number": [
      268
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_feature.test_using_python_feature_with_cython_metric": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": {
    "ArcLengthFeature": {
     "line number": [
      309
     ]
    },
    "Identity": {
     "line number": [
      285
     ]
    },
    "dipy.segment.metric.AveragePointwiseEuclideanMetric": {
     "line number": [
      286
     ]
    },
    "dipy.segment.metric.EuclideanMetric": {
     "line number": [
      310
     ]
    },
    "dipy.segment.metric.dist": {
     "line number": [
      287,
      311
     ]
    },
    "dipy.segment.tests.test_feature.s1": {
     "line number": [
      287,
      289,
      311,
      313
     ]
    },
    "dipy.segment.tests.test_feature.s2": {
     "line number": [
      287,
      290,
      311,
      314
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      292,
      316
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_using_python_feature_with_cython_metric.ArcLengthFeature": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "dipy.segment.metric.Feature": {
     "line number": [
      297
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_feature.test_using_python_feature_with_cython_metric.ArcLengthFeature.extract": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "numpy.sqrt": {
     "line number": [
      306
     ]
    },
    "numpy.sum": {
     "line number": [
      305,
      306
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_using_python_feature_with_cython_metric.ArcLengthFeature.infer_shape": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "dipy.segment.tests.test_feature.sys": {
     "line number": [
      299
     ]
    },
    "long": {
     "line number": [
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_using_python_feature_with_cython_metric.Identity": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": {
    "dipy.segment.metric.Feature": {
     "line number": [
      277
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_feature.test_using_python_feature_with_cython_metric.Identity.extract": {
  "data": {
   "lineno": 281
  },
  "type": "function"
 },
 "dipy.segment.tests.test_feature.test_using_python_feature_with_cython_metric.Identity.infer_shape": {
  "data": {
   "lineno": 278
  },
  "type": "function"
 },
 "dipy.segment.tests.test_mask": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      118
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.tests.test_mask.applymask": {
  "data": {
   "shadows": "dipy.segment.mask.applymask"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.binary_dilation": {
  "data": {
   "shadows": "scipy.ndimage.binary_dilation"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.bounding_box": {
  "data": {
   "shadows": "dipy.segment.mask.bounding_box"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.crop": {
  "data": {
   "shadows": "dipy.segment.mask.crop"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.generate_binary_structure": {
  "data": {
   "shadows": "scipy.ndimage.generate_binary_structure"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.median_filter": {
  "data": {
   "shadows": "scipy.ndimage.filters.median_filter"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.median_otsu": {
  "data": {
   "shadows": "dipy.segment.mask.median_otsu"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.multi_median": {
  "data": {
   "shadows": "dipy.segment.mask.multi_median"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.otsu": {
  "data": {
   "shadows": "dipy.segment.mask.otsu"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mask.test_bounding_box": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "dipy.segment.mask.bounding_box": {
     "line number": [
      57,
      62,
      71,
      80
     ]
    },
    "dipy.segment.tests.test_mask.warnings": {
     "line number": [
      67,
      68
     ]
    },
    "int": {
     "line number": [
      53
     ]
    },
    "len": {
     "line number": [
      70,
      73,
      81
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      58,
      59,
      63,
      64,
      73,
      76,
      77,
      81,
      82,
      83
     ]
    },
    "numpy.zeros": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_mask.test_mask": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "dipy.segment.mask.applymask": {
     "line number": [
      35
     ]
    },
    "dipy.segment.mask.bounding_box": {
     "line number": [
      30
     ]
    },
    "dipy.segment.mask.crop": {
     "line number": [
      31
     ]
    },
    "dipy.segment.mask.multi_median": {
     "line number": [
      43
     ]
    },
    "dipy.segment.mask.otsu": {
     "line number": [
      25
     ]
    },
    "numpy.arange": {
     "line number": [
      40
     ]
    },
    "numpy.ones_like": {
     "line number": [
      45
     ]
    },
    "numpy.sum": {
     "line number": [
      23,
      27,
      32,
      36
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      28,
      33,
      37,
      49
     ]
    },
    "numpy.zeros": {
     "line number": [
      19
     ]
    },
    "scipy.ndimage.binary_dilation": {
     "line number": [
      22
     ]
    },
    "scipy.ndimage.filters.median_filter": {
     "line number": [
      46,
      47,
      48
     ]
    },
    "scipy.ndimage.generate_binary_structure": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_mask.test_median_otsu": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      115
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      87
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      88
     ]
    },
    "dipy.segment.mask.median_otsu": {
     "line number": [
      91,
      99,
      104,
      109,
      115
     ]
    },
    "numpy.squeeze": {
     "line number": [
      89
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      102
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      94,
      107,
      112
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      115
     ]
    },
    "numpy.zeros": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_mask.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      258
     ]
    },
    "dipy.segment.tests.test_metric.dtype": {
     "line number": [
      27,
      30,
      31,
      32,
      33
     ]
    },
    "dipy.segment.tests.test_metric.nb_points": {
     "line number": [
      24,
      25,
      26
     ]
    },
    "dipy.segment.tests.test_metric.rng": {
     "line number": [
      25
     ]
    },
    "dipy.segment.tests.test_metric.s": {
     "line number": [
      34
     ]
    },
    "dipy.segment.tests.test_metric.s1": {
     "line number": [
      34
     ]
    },
    "dipy.segment.tests.test_metric.s2": {
     "line number": [
      34
     ]
    },
    "dipy.segment.tests.test_metric.s3": {
     "line number": [
      34
     ]
    },
    "dipy.segment.tests.test_metric.s4": {
     "line number": [
      34
     ]
    },
    "dipy.segment.tests.test_metric.x": {
     "line number": [
      27
     ]
    },
    "dipy.segment.tests.test_metric.y": {
     "line number": [
      27
     ]
    },
    "dipy.segment.tests.test_metric.z": {
     "line number": [
      27
     ]
    },
    "numpy.arange": {
     "line number": [
      30,
      31,
      32,
      33
     ]
    },
    "numpy.array": {
     "line number": [
      27,
      30,
      32,
      33
     ]
    },
    "numpy.linspace": {
     "line number": [
      24,
      26
     ]
    },
    "numpy.pi": {
     "line number": [
      26
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      23
     ]
    },
    "numpy.sin": {
     "line number": [
      26
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      259
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.tests.test_metric.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.assert_greater_equal": {
  "data": {
   "shadows": "dipy.testing.assert_greater_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.assert_less_equal": {
  "data": {
   "shadows": "dipy.testing.assert_less_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.dipymetric": {
  "data": {
   "shadows": "dipy.segment.metric"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.dtype": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_metric.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.nb_points": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_metric.norm": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "numpy.apply_along_axis": {
     "line number": [
      13
     ]
    },
    "numpy.float64": {
     "line number": [
      14,
      16
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      13,
      16
     ]
    },
    "ord": {
     "line number": [
      14,
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.rng": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_metric.rodrigues_axis_rotation": {
  "data": {
   "shadows": "dipy.core.geometry.rodrigues_axis_rotation"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_metric.s": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_metric.s1": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_metric.s2": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_metric.s3": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_metric.s4": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_metric.streamlines": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_metric.test_distance_matrix": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": {
    "dipy.segment.metric.SumPointwiseEuclideanMetric": {
     "line number": [
      227
     ]
    },
    "dipy.segment.metric.dist": {
     "line number": [
      243,
      254
     ]
    },
    "dipy.segment.metric.distance_matrix": {
     "line number": [
      233,
      249
     ]
    },
    "dipy.segment.tests.test_metric.dtype": {
     "line number": [
      229,
      232,
      248
     ]
    },
    "len": {
     "line number": [
      234,
      234,
      235,
      241,
      242,
      250,
      250,
      252,
      253
     ]
    },
    "numpy.diag": {
     "line number": [
      235
     ]
    },
    "numpy.float32": {
     "line number": [
      229
     ]
    },
    "numpy.float64": {
     "line number": [
      229
     ]
    },
    "numpy.int32": {
     "line number": [
      229
     ]
    },
    "numpy.int64": {
     "line number": [
      229
     ]
    },
    "numpy.random.rand": {
     "line number": [
      232,
      248
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      235,
      239
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      234,
      243,
      250,
      254
     ]
    },
    "numpy.zeros": {
     "line number": [
      235
     ]
    },
    "range": {
     "line number": [
      241,
      242,
      252,
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_metric_cosine": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "CosineMetric": {
     "line number": [
      160
     ]
    },
    "dipy.segment.metric.CosineMetric": {
     "line number": [
      160
     ]
    },
    "dipy.segment.metric.VectorOfEndpointsFeature": {
     "line number": [
      137
     ]
    },
    "dipy.segment.metric.dist": {
     "line number": [
      192
     ]
    },
    "dipy.segment.tests.test_metric.itertools": {
     "line number": [
      174,
      199
     ]
    },
    "dipy.segment.tests.test_metric.s1": {
     "line number": [
      174,
      177,
      192,
      199,
      200,
      206
     ]
    },
    "dipy.segment.tests.test_metric.s2": {
     "line number": [
      174,
      178,
      192,
      199,
      201,
      207
     ]
    },
    "dipy.segment.tests.test_metric.streamlines": {
     "line number": [
      174,
      199
     ]
    },
    "dipy.testing.assert_false": {
     "line number": [
      197,
      213,
      214
     ]
    },
    "dipy.testing.assert_greater_equal": {
     "line number": [
      193
     ]
    },
    "dipy.testing.assert_less_equal": {
     "line number": [
      194
     ]
    },
    "numpy.all": {
     "line number": [
      189,
      212
     ]
    },
    "numpy.array": {
     "line number": [
      162,
      163,
      164,
      165
     ]
    },
    "numpy.float32": {
     "line number": [
      162,
      163,
      164,
      165
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      190,
      192,
      210
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      167,
      168,
      169,
      170,
      171,
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_metric_cosine.CosineMetric": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "dipy.segment.metric.Metric": {
     "line number": [
      139
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_metric.test_metric_cosine.CosineMetric.__init__": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "super": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_metric_cosine.CosineMetric.are_compatible": {
  "data": {
   "lineno": 143
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_metric_cosine.CosineMetric.dist": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "dipy.segment.tests.test_metric.norm": {
     "line number": [
      149,
      150,
      152,
      153
     ]
    },
    "numpy.arccos": {
     "line number": [
      158
     ]
    },
    "numpy.dot": {
     "line number": [
      154
     ]
    },
    "numpy.float64": {
     "line number": [
      152,
      152,
      153,
      153
     ]
    },
    "numpy.maximum": {
     "line number": [
      157
     ]
    },
    "numpy.minimum": {
     "line number": [
      156
     ]
    },
    "numpy.pi": {
     "line number": [
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_metric_minimum_average_direct_flip": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "MinimumAverageDirectFlipMetric": {
     "line number": [
      59
     ]
    },
    "dipy.core.geometry.rodrigues_axis_rotation": {
     "line number": [
      81
     ]
    },
    "dipy.segment.metric.IdentityFeature": {
     "line number": [
      38
     ]
    },
    "dipy.segment.metric.MinimumAverageDirectFlipMetric": {
     "line number": [
      60
     ]
    },
    "dipy.segment.metric.dist": {
     "line number": [
      111
     ]
    },
    "dipy.segment.metric.mdf": {
     "line number": [
      112
     ]
    },
    "dipy.segment.tests.test_metric.dtype": {
     "line number": [
      67,
      71,
      80,
      81,
      89
     ]
    },
    "dipy.segment.tests.test_metric.itertools": {
     "line number": [
      94,
      118
     ]
    },
    "dipy.segment.tests.test_metric.norm": {
     "line number": [
      68,
      75,
      86,
      87
     ]
    },
    "dipy.segment.tests.test_metric.s": {
     "line number": [
      63,
      63,
      64,
      64,
      68,
      68,
      72,
      73,
      76,
      82,
      83,
      91
     ]
    },
    "dipy.segment.tests.test_metric.s1": {
     "line number": [
      94,
      97,
      111,
      112,
      118,
      119,
      125
     ]
    },
    "dipy.segment.tests.test_metric.s2": {
     "line number": [
      94,
      98,
      111,
      112,
      118,
      120,
      126
     ]
    },
    "dipy.segment.tests.test_metric.streamlines": {
     "line number": [
      94,
      118
     ]
    },
    "dipy.testing.assert_greater_equal": {
     "line number": [
      113
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      116,
      132,
      133
     ]
    },
    "numpy.all": {
     "line number": [
      108,
      131
     ]
    },
    "numpy.allclose": {
     "line number": [
      132,
      133
     ]
    },
    "numpy.array": {
     "line number": [
      67,
      80
     ]
    },
    "numpy.cos": {
     "line number": [
      89
     ]
    },
    "numpy.cross": {
     "line number": [
      86
     ]
    },
    "numpy.diag": {
     "line number": [
      71,
      75
     ]
    },
    "numpy.dot": {
     "line number": [
      74,
      84
     ]
    },
    "numpy.mean": {
     "line number": [
      72,
      75,
      82,
      90
     ]
    },
    "numpy.pi": {
     "line number": [
      89
     ]
    },
    "numpy.sqrt": {
     "line number": [
      88
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      68,
      76,
      91,
      111,
      112,
      129
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      63,
      64,
      102,
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_metric_minimum_average_direct_flip.MinimumAverageDirectFlipMetric": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "dipy.segment.metric.Metric": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_metric.test_metric_minimum_average_direct_flip.MinimumAverageDirectFlipMetric.__init__": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "super": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_metric_minimum_average_direct_flip.MinimumAverageDirectFlipMetric.are_compatible": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_metric_minimum_average_direct_flip.MinimumAverageDirectFlipMetric.dist": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "average_euclidean": {
     "line number": [
      55,
      56
     ]
    },
    "min": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_metric_minimum_average_direct_flip.MinimumAverageDirectFlipMetric.dist.average_euclidean": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "dipy.segment.tests.test_metric.norm": {
     "line number": [
      54
     ]
    },
    "dipy.segment.tests.test_metric.x": {
     "line number": [
      54
     ]
    },
    "dipy.segment.tests.test_metric.y": {
     "line number": [
      54
     ]
    },
    "numpy.mean": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_metric_minimum_average_direct_flip.MinimumAverageDirectFlipMetric.is_order_invariant": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "property": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_subclassing_metric": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "EmptyMetric": {
     "line number": [
      221
     ]
    },
    "NotImplementedError": {
     "line number": [
      222,
      223
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      222,
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_metric.test_subclassing_metric.EmptyMetric": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "dipy.segment.metric.Metric": {
     "line number": [
      218
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_metric.x": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_metric.y": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_metric.z": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      419
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      11
     ]
    },
    "dipy.segment.tests.test_mrf.fname": {
     "line number": [
      12
     ]
    },
    "dipy.segment.tests.test_mrf.image": {
     "line number": [
      17
     ]
    },
    "dipy.segment.tests.test_mrf.noise_1": {
     "line number": [
      36
     ]
    },
    "dipy.segment.tests.test_mrf.noise_2": {
     "line number": [
      40
     ]
    },
    "dipy.segment.tests.test_mrf.noise_3": {
     "line number": [
      44
     ]
    },
    "dipy.segment.tests.test_mrf.nslices": {
     "line number": [
      16,
      17
     ]
    },
    "dipy.segment.tests.test_mrf.single_slice": {
     "line number": [
      16,
      17
     ]
    },
    "dipy.segment.tests.test_mrf.square": {
     "line number": [
      27,
      28,
      29
     ]
    },
    "dipy.segment.tests.test_mrf.square_1": {
     "line number": [
      50,
      53,
      56
     ]
    },
    "dipy.segment.tests.test_mrf.square_gauss": {
     "line number": [
      33,
      35,
      36,
      36,
      37,
      39,
      40,
      40,
      41,
      43,
      44,
      44
     ]
    },
    "dipy.segment.tests.test_mrf.temp_1": {
     "line number": [
      50
     ]
    },
    "dipy.segment.tests.test_mrf.temp_2": {
     "line number": [
      53
     ]
    },
    "dipy.segment.tests.test_mrf.temp_3": {
     "line number": [
      56
     ]
    },
    "dipy.sims.voxel.add_noise": {
     "line number": [
      32,
      47
     ]
    },
    "numpy.float64": {
     "line number": [
      21
     ]
    },
    "numpy.int16": {
     "line number": [
      26
     ]
    },
    "numpy.load": {
     "line number": [
      12
     ]
    },
    "numpy.random.normal": {
     "line number": [
      34,
      38,
      42
     ]
    },
    "numpy.random.randint": {
     "line number": [
      48,
      51,
      54
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      421
     ]
    },
    "numpy.where": {
     "line number": [
      49,
      52,
      55
     ]
    },
    "numpy.zeros": {
     "line number": [
      16,
      26,
      31,
      46
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.tests.test_mrf.ConstantObservationModel": {
  "data": {
   "shadows": "dipy.segment.mrf.ConstantObservationModel"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mrf.IteratedConditionalModes": {
  "data": {
   "shadows": "dipy.segment.mrf.IteratedConditionalModes"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mrf.TissueClassifierHMRF": {
  "data": {
   "shadows": "dipy.segment.tissue.TissueClassifierHMRF"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mrf.add_noise": {
  "data": {
   "shadows": "dipy.sims.voxel.add_noise"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mrf.background_noise": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.beta": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.fname": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mrf.image": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.max_iter": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.nclasses": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.noise_1": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.noise_2": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.noise_3": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mrf.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_mrf.nslices": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.single_slice": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.square": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.square_1": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.square_gauss": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.temp_1": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.temp_2": {
  "data": {
   "lineno": 52
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.temp_3": {
  "data": {
   "lineno": 55
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_mrf.test_classify": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": {
    "dipy.segment.tests.test_mrf.beta": {
     "line number": [
      382,
      390,
      396,
      403,
      412
     ]
    },
    "dipy.segment.tests.test_mrf.image": {
     "line number": [
      386,
      387,
      390,
      396,
      403,
      411
     ]
    },
    "dipy.segment.tests.test_mrf.max_iter": {
     "line number": [
      384,
      403
     ]
    },
    "dipy.segment.tests.test_mrf.nclasses": {
     "line number": [
      390,
      392,
      396,
      399,
      403,
      405,
      411,
      414
     ]
    },
    "dipy.segment.tissue.TissueClassifierHMRF": {
     "line number": [
      380,
      409
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      386,
      387,
      392,
      393,
      399,
      400,
      405,
      406,
      414,
      415,
      417
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_mrf.test_grayscale_image": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "dipy.segment.mrf.ConstantObservationModel": {
     "line number": [
      61
     ]
    },
    "dipy.segment.mrf.IteratedConditionalModes": {
     "line number": [
      62
     ]
    },
    "dipy.segment.tests.test_mrf.beta": {
     "line number": [
      80,
      84,
      120
     ]
    },
    "dipy.segment.tests.test_mrf.image": {
     "line number": [
      64,
      70,
      102,
      106
     ]
    },
    "dipy.segment.tests.test_mrf.nclasses": {
     "line number": [
      64,
      70,
      77,
      80,
      102,
      106,
      123
     ]
    },
    "numpy.abs": {
     "line number": [
      122
     ]
    },
    "numpy.all": {
     "line number": [
      82,
      104
     ]
    },
    "numpy.array": {
     "line number": [
      66,
      67,
      68
     ]
    },
    "numpy.sum": {
     "line number": [
      122
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      71,
      72,
      73,
      74,
      77,
      78,
      82,
      104,
      109,
      110,
      111,
      112,
      115,
      116,
      117,
      118,
      122,
      123,
      124
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      66,
      67,
      68
     ]
    },
    "print": {
     "line number": [
      81,
      103,
      107,
      108,
      113,
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_mrf.test_grayscale_iter": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "dipy.segment.mrf.ConstantObservationModel": {
     "line number": [
      132
     ]
    },
    "dipy.segment.mrf.IteratedConditionalModes": {
     "line number": [
      133
     ]
    },
    "dipy.segment.tests.test_mrf.background_noise": {
     "line number": [
      153
     ]
    },
    "dipy.segment.tests.test_mrf.beta": {
     "line number": [
      130,
      166,
      170,
      217
     ]
    },
    "dipy.segment.tests.test_mrf.image": {
     "line number": [
      135,
      137,
      142,
      154,
      156,
      156,
      158,
      160
     ]
    },
    "dipy.segment.tests.test_mrf.max_iter": {
     "line number": [
      129,
      164
     ]
    },
    "dipy.segment.tests.test_mrf.nclasses": {
     "line number": [
      135,
      137,
      139,
      142,
      167,
      189,
      198,
      209
     ]
    },
    "dipy.sims.voxel.add_noise": {
     "line number": [
      155
     ]
    },
    "numpy.abs": {
     "line number": [
      228,
      229
     ]
    },
    "numpy.all": {
     "line number": [
      168,
      190
     ]
    },
    "numpy.empty_like": {
     "line number": [
      160
     ]
    },
    "numpy.float64": {
     "line number": [
      130
     ]
    },
    "numpy.inf.sum": {
     "line number": [
      219,
      220
     ]
    },
    "numpy.sum": {
     "line number": [
      229
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      139,
      140,
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      168,
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      210,
      211,
      212,
      213,
      214,
      215,
      226,
      229
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      172,
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187
     ]
    },
    "numpy.where": {
     "line number": [
      156
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      154
     ]
    },
    "print": {
     "line number": [
      219
     ]
    },
    "range": {
     "line number": [
      164
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_mrf.test_icm_square": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "dipy.segment.mrf.ConstantObservationModel": {
     "line number": [
      327
     ]
    },
    "dipy.segment.mrf.IteratedConditionalModes": {
     "line number": [
      328
     ]
    },
    "dipy.segment.tests.test_mrf.beta": {
     "line number": [
      349,
      357,
      361,
      370
     ]
    },
    "dipy.segment.tests.test_mrf.max_iter": {
     "line number": [
      351,
      364
     ]
    },
    "dipy.segment.tests.test_mrf.nclasses": {
     "line number": [
      333,
      344
     ]
    },
    "dipy.segment.tests.test_mrf.square": {
     "line number": [
      330,
      362
     ]
    },
    "dipy.segment.tests.test_mrf.square_1": {
     "line number": [
      332,
      344,
      346,
      347
     ]
    },
    "numpy.abs": {
     "line number": [
      374,
      375
     ]
    },
    "numpy.empty_like": {
     "line number": [
      346,
      347
     ]
    },
    "numpy.sum": {
     "line number": [
      375
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      375
     ]
    },
    "print": {
     "line number": [
      353,
      354,
      355,
      366,
      367,
      368
     ]
    },
    "range": {
     "line number": [
      351,
      364
     ]
    },
    "str": {
     "line number": [
      354,
      367
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_mrf.test_square_iter": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "dipy.segment.mrf.ConstantObservationModel": {
     "line number": [
      234
     ]
    },
    "dipy.segment.mrf.IteratedConditionalModes": {
     "line number": [
      235
     ]
    },
    "dipy.segment.tests.test_mrf.beta": {
     "line number": [
      261,
      265,
      312
     ]
    },
    "dipy.segment.tests.test_mrf.max_iter": {
     "line number": [
      255
     ]
    },
    "dipy.segment.tests.test_mrf.nclasses": {
     "line number": [
      240,
      262,
      284,
      293,
      304
     ]
    },
    "dipy.segment.tests.test_mrf.square": {
     "line number": [
      237
     ]
    },
    "dipy.segment.tests.test_mrf.square_gauss": {
     "line number": [
      239,
      251,
      284,
      293,
      303
     ]
    },
    "numpy.abs": {
     "line number": [
      321,
      322
     ]
    },
    "numpy.all": {
     "line number": [
      263,
      285
     ]
    },
    "numpy.empty_like": {
     "line number": [
      251
     ]
    },
    "numpy.inf.sum": {
     "line number": [
      315
     ]
    },
    "numpy.sum": {
     "line number": [
      322
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      263,
      267,
      268,
      269,
      270,
      271,
      272,
      273,
      274,
      275,
      276,
      277,
      278,
      279,
      280,
      281,
      282,
      285,
      286,
      287,
      288,
      289,
      290,
      291,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      305,
      306,
      307,
      308,
      309,
      310,
      322
     ]
    },
    "print": {
     "line number": [
      257,
      258,
      259
     ]
    },
    "range": {
     "line number": [
      255
     ]
    },
    "str": {
     "line number": [
      258
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      237
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      238
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.tests.test_qbx.AveragePointwiseEuclideanMetric": {
  "data": {
   "shadows": "dipy.segment.metric.AveragePointwiseEuclideanMetric"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.MinimumAverageDirectFlipMetric": {
  "data": {
   "shadows": "dipy.segment.metric.MinimumAverageDirectFlipMetric"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.QuickBundles": {
  "data": {
   "shadows": "dipy.segment.clustering.QuickBundles"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.QuickBundlesX": {
  "data": {
   "shadows": "dipy.segment.clustering.QuickBundlesX"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.ResampleFeature": {
  "data": {
   "shadows": "dipy.segment.featurespeed.ResampleFeature"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.bearing_bundles": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "dipy.segment.tests.test_qbx.straight_bundle": {
     "line number": [
      41
     ]
    },
    "numpy.array": {
     "line number": [
      41
     ]
    },
    "numpy.cos": {
     "line number": [
      38
     ]
    },
    "numpy.linspace": {
     "line number": [
      37
     ]
    },
    "numpy.pi": {
     "line number": [
      37
     ]
    },
    "numpy.sin": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.qbx_and_merge": {
  "data": {
   "shadows": "dipy.segment.clustering.qbx_and_merge"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamline.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_qbx.simulated_bundle": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      91
     ]
    },
    "numpy.cos": {
     "line number": [
      88
     ]
    },
    "numpy.linspace": {
     "line number": [
      83,
      86
     ]
    },
    "numpy.ones": {
     "line number": [
      88,
      90
     ]
    },
    "numpy.vstack": {
     "line number": [
      88,
      90
     ]
    },
    "numpy.zeros": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx.straight_bundle": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "numpy.c_": {
     "line number": [
      29
     ]
    },
    "numpy.cos": {
     "line number": [
      25
     ]
    },
    "numpy.linspace": {
     "line number": [
      20
     ]
    },
    "numpy.ones": {
     "line number": [
      25,
      26
     ]
    },
    "numpy.pi": {
     "line number": [
      22
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      15
     ]
    },
    "numpy.sin": {
     "line number": [
      26
     ]
    },
    "range": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx.streamlines_in_circle": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "numpy.c_": {
     "line number": [
      60
     ]
    },
    "numpy.cos": {
     "line number": [
      56
     ]
    },
    "numpy.linspace": {
     "line number": [
      54,
      55
     ]
    },
    "numpy.ones": {
     "line number": [
      56,
      57
     ]
    },
    "numpy.pi": {
     "line number": [
      55
     ]
    },
    "numpy.sin": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx.streamlines_parallel": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      72
     ]
    },
    "numpy.c_": {
     "line number": [
      77
     ]
    },
    "numpy.linspace": {
     "line number": [
      71
     ]
    },
    "numpy.ones": {
     "line number": [
      73
     ]
    },
    "numpy.zeros": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx.test_3D_points": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "dipy.segment.clustering.QuickBundlesX": {
     "line number": [
      107
     ]
    },
    "dipy.segment.metric.AveragePointwiseEuclideanMetric": {
     "line number": [
      106
     ]
    },
    "numpy.array": {
     "line number": [
      99
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      110,
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx.test_3D_segments": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "dipy.segment.clustering.QuickBundlesX": {
     "line number": [
      131
     ]
    },
    "dipy.segment.featurespeed.ResampleFeature": {
     "line number": [
      129
     ]
    },
    "dipy.segment.metric.AveragePointwiseEuclideanMetric": {
     "line number": [
      130
     ]
    },
    "len": {
     "line number": [
      137,
      137,
      138,
      138
     ]
    },
    "numpy.array": {
     "line number": [
      116,
      140
     ]
    },
    "numpy.int32": {
     "line number": [
      140
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      140
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      137,
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx.test_circle_parallel_fornix": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "dipy.segment.clustering.QuickBundlesX": {
     "line number": [
      183,
      197
     ]
    },
    "dipy.segment.tests.test_qbx.streamlines_in_circle": {
     "line number": [
      177
     ]
    },
    "dipy.segment.tests.test_qbx.streamlines_parallel": {
     "line number": [
      179
     ]
    },
    "len": {
     "line number": [
      187,
      190,
      193,
      201,
      204
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      187,
      190,
      193,
      201,
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx.test_qbx_and_merge": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "dipy.segment.clustering.QuickBundlesX": {
     "line number": [
      230
     ]
    },
    "dipy.segment.clustering.qbx_and_merge": {
     "line number": [
      228
     ]
    },
    "dipy.segment.tests.test_qbx.bearing_bundles": {
     "line number": [
      220
     ]
    },
    "dipy.segment.tests.test_qbx.itertools": {
     "line number": [
      223
     ]
    },
    "dipy.segment.tests.test_qbx.straight_bundle": {
     "line number": [
      221
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      223
     ]
    },
    "len": {
     "line number": [
      234,
      234
     ]
    },
    "list": {
     "line number": [
      223
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      227
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      234
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx.test_raise_mdf": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      213,
      214
     ]
    },
    "dipy.segment.clustering.QuickBundles": {
     "line number": [
      214
     ]
    },
    "dipy.segment.clustering.QuickBundlesX": {
     "line number": [
      213
     ]
    },
    "dipy.segment.metric.MinimumAverageDirectFlipMetric": {
     "line number": [
      211
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      213,
      214
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx.test_with_simulated_bundles": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "dipy.segment.clustering.QuickBundlesX": {
     "line number": [
      147
     ]
    },
    "dipy.segment.tests.test_qbx.simulated_bundle": {
     "line number": [
      145
     ]
    },
    "len": {
     "line number": [
      149
     ]
    },
    "numpy.array": {
     "line number": [
      157
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      156
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      152,
      153
     ]
    },
    "range": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_qbx.test_with_simulated_bundles2": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "dipy.segment.clustering.QuickBundlesX": {
     "line number": [
      169
     ]
    },
    "dipy.segment.tests.test_qbx.bearing_bundles": {
     "line number": [
      164
     ]
    },
    "dipy.segment.tests.test_qbx.itertools": {
     "line number": [
      166
     ]
    },
    "dipy.segment.tests.test_qbx.straight_bundle": {
     "line number": [
      165
     ]
    },
    "list": {
     "line number": [
      166
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_quickbundles": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      208
     ]
    },
    "dipy.segment.tests.test_quickbundles.dtype": {
     "line number": [
      18,
      19,
      20,
      21,
      22
     ]
    },
    "dipy.segment.tests.test_quickbundles.threshold": {
     "line number": [
      18,
      19,
      20,
      21,
      22
     ]
    },
    "numpy.arange": {
     "line number": [
      18,
      19,
      20,
      21,
      22
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      209
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.segment.tests.test_quickbundles.QuickBundles": {
  "data": {
   "shadows": "dipy.segment.clustering.QuickBundles"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.assert_arrays_equal": {
  "data": {
   "shadows": "dipy.testing.assert_arrays_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.clusters_truth": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_quickbundles.data": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_quickbundles.dipymetric": {
  "data": {
   "shadows": "dipy.segment.metric"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.dtype": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "dipy.segment.tests.test_quickbundles.get_type_refcount": {
  "data": {
   "shadows": "dipy.testing.memory.get_type_refcount"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.quickbundles": {
  "data": {
   "shadows": "dipy.segment.clustering_algorithms.quickbundles"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.streamline_utils": {
  "data": {
   "shadows": "dipy.tracking.streamline"
  },
  "type": "import"
 },
 "dipy.segment.tests.test_quickbundles.test_quickbundles_2D": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "dipy.segment.clustering_algorithms.quickbundles": {
     "line number": [
      96,
      108,
      115,
      121
     ]
    },
    "dipy.segment.metric.SumPointwiseEuclideanMetric": {
     "line number": [
      92
     ]
    },
    "dipy.segment.tests.test_quickbundles.clusters_truth": {
     "line number": [
      77,
      101
     ]
    },
    "dipy.segment.tests.test_quickbundles.data": {
     "line number": [
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      75,
      93,
      96,
      108,
      115,
      117,
      118,
      121,
      122,
      123,
      125
     ]
    },
    "dipy.segment.tests.test_quickbundles.dtype": {
     "line number": [
      75
     ]
    },
    "dipy.segment.tests.test_quickbundles.itertools": {
     "line number": [
      111
     ]
    },
    "dipy.segment.tests.test_quickbundles.threshold": {
     "line number": [
      91,
      96
     ]
    },
    "len": {
     "line number": [
      93,
      110,
      110,
      116,
      117,
      117,
      118,
      122,
      122,
      123,
      123,
      125
     ]
    },
    "list": {
     "line number": [
      123
     ]
    },
    "map": {
     "line number": [
      123
     ]
    },
    "numpy.arange": {
     "line number": [
      93
     ]
    },
    "numpy.array": {
     "line number": [
      70,
      71,
      72,
      73,
      74,
      75
     ]
    },
    "numpy.inf": {
     "line number": [
      115
     ]
    },
    "numpy.ones": {
     "line number": [
      123
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      68
     ]
    },
    "numpy.sqrt": {
     "line number": [
      91,
      91
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      118,
      123,
      124
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      103,
      110,
      111,
      116,
      117,
      122
     ]
    },
    "range": {
     "line number": [
      70,
      71,
      72,
      73,
      74,
      94,
      118,
      125
     ]
    },
    "sorted": {
     "line number": [
      103,
      104,
      111,
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_quickbundles.test_quickbundles_empty_data": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "dipy.segment.clustering_algorithms.quickbundles": {
     "line number": [
      30,
      34
     ]
    },
    "dipy.segment.metric.SumPointwiseEuclideanMetric": {
     "line number": [
      29
     ]
    },
    "dipy.segment.tests.test_quickbundles.threshold": {
     "line number": [
      28,
      30,
      34
     ]
    },
    "len": {
     "line number": [
      31,
      32,
      35,
      36
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      31,
      32,
      35,
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_quickbundles.test_quickbundles_memory_leaks": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "dipy.segment.clustering.QuickBundles": {
     "line number": [
      198
     ]
    },
    "dipy.segment.tests.test_quickbundles.data": {
     "line number": [
      203
     ]
    },
    "dipy.segment.tests.test_quickbundles.threshold": {
     "line number": [
      198
     ]
    },
    "dipy.testing.memory.get_type_refcount": {
     "line number": [
      201,
      205
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_quickbundles.test_quickbundles_shape_uncompatibility": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      49
     ]
    },
    "dipy.segment.clustering.QuickBundles": {
     "line number": [
      48,
      54,
      59
     ]
    },
    "dipy.segment.metric.AveragePointwiseEuclideanMetric": {
     "line number": [
      47,
      58
     ]
    },
    "dipy.segment.metric.ResampleFeature": {
     "line number": [
      57
     ]
    },
    "dipy.segment.tests.test_quickbundles.data": {
     "line number": [
      49,
      55,
      60
     ]
    },
    "dipy.segment.tests.test_quickbundles.itertools": {
     "line number": [
      62,
      63
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      62
     ]
    },
    "list": {
     "line number": [
      62,
      63
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_quickbundles.test_quickbundles_streamlines": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "dipy.segment.clustering.QuickBundles": {
     "line number": [
      130
     ]
    },
    "dipy.segment.tests.test_quickbundles.clusters_truth": {
     "line number": [
      138
     ]
    },
    "dipy.segment.tests.test_quickbundles.data": {
     "line number": [
      129
     ]
    },
    "dipy.segment.tests.test_quickbundles.itertools": {
     "line number": [
      137,
      138
     ]
    },
    "dipy.segment.tests.test_quickbundles.threshold": {
     "line number": [
      130
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      129
     ]
    },
    "list": {
     "line number": [
      137,
      138
     ]
    },
    "numpy.float32": {
     "line number": [
      148
     ]
    },
    "numpy.float64": {
     "line number": [
      145
     ]
    },
    "numpy.int32": {
     "line number": [
      145
     ]
    },
    "numpy.int64": {
     "line number": [
      145
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      137
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      134,
      148
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_quickbundles.test_quickbundles_with_not_order_invariant_metric": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "dipy.segment.clustering.QuickBundles": {
     "line number": [
      187
     ]
    },
    "dipy.segment.metric.AveragePointwiseEuclideanMetric": {
     "line number": [
      186
     ]
    },
    "dipy.segment.tests.test_quickbundles.dtype": {
     "line number": [
      189
     ]
    },
    "len": {
     "line number": [
      193
     ]
    },
    "numpy.arange": {
     "line number": [
      189
     ]
    },
    "numpy.inf": {
     "line number": [
      187
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      194
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_quickbundles.test_quickbundles_with_python_metric": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "MDFpy": {
     "line number": [
      163
     ]
    },
    "dipy.segment.clustering.QuickBundles": {
     "line number": [
      163
     ]
    },
    "dipy.segment.tests.test_quickbundles.clusters_truth": {
     "line number": [
      172
     ]
    },
    "dipy.segment.tests.test_quickbundles.data": {
     "line number": [
      162
     ]
    },
    "dipy.segment.tests.test_quickbundles.itertools": {
     "line number": [
      171,
      172
     ]
    },
    "dipy.segment.tests.test_quickbundles.threshold": {
     "line number": [
      163
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      162
     ]
    },
    "list": {
     "line number": [
      171,
      172
     ]
    },
    "numpy.float32": {
     "line number": [
      182
     ]
    },
    "numpy.float64": {
     "line number": [
      179
     ]
    },
    "numpy.int32": {
     "line number": [
      179
     ]
    },
    "numpy.int64": {
     "line number": [
      179
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      171
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      168,
      182
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_quickbundles.test_quickbundles_with_python_metric.MDFpy": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "dipy.segment.metric.Metric": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tests.test_quickbundles.test_quickbundles_with_python_metric.MDFpy.are_compatible": {
  "data": {
   "lineno": 154
  },
  "type": "function"
 },
 "dipy.segment.tests.test_quickbundles.test_quickbundles_with_python_metric.MDFpy.dist": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "len": {
     "line number": [
      159
     ]
    },
    "numpy.sqrt": {
     "line number": [
      158
     ]
    },
    "numpy.sum": {
     "line number": [
      158,
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_quickbundles.test_quickbundles_wrong_metric": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      40
     ]
    },
    "dipy.segment.clustering.QuickBundles": {
     "line number": [
      40
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tests.test_quickbundles.threshold": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "dipy.segment.threshold": {
  "data": {},
  "type": "module"
 },
 "dipy.segment.threshold.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.segment.threshold.otsu": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": {
    "numpy.argmax": {
     "line number": [
      38
     ]
    },
    "numpy.cumsum": {
     "line number": [
      26,
      27,
      30,
      31
     ]
    },
    "numpy.float": {
     "line number": [
      23
     ]
    },
    "numpy.histogram": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.threshold.upper_bound_by_percent": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "float": {
     "line number": [
      113
     ]
    },
    "len": {
     "line number": [
      111
     ]
    },
    "numpy.histogram": {
     "line number": [
      107
     ]
    },
    "numpy.prod": {
     "line number": [
      108
     ]
    },
    "range": {
     "line number": [
      111
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.threshold.upper_bound_by_rate": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      69,
      79,
      83,
      84
     ]
    },
    "numpy.histogram": {
     "line number": [
      66
     ]
    },
    "numpy.size": {
     "line number": [
      75
     ]
    },
    "numpy.zeros": {
     "line number": [
      67
     ]
    },
    "range": {
     "line number": [
      69,
      79,
      83,
      84
     ]
    },
    "sorted": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tissue": {
  "data": {},
  "type": "module"
 },
 "dipy.segment.tissue.ConstantObservationModel": {
  "data": {
   "shadows": "dipy.segment.mrf.ConstantObservationModel"
  },
  "type": "import"
 },
 "dipy.segment.tissue.IteratedConditionalModes": {
  "data": {
   "shadows": "dipy.segment.mrf.IteratedConditionalModes"
  },
  "type": "import"
 },
 "dipy.segment.tissue.TissueClassifierHMRF": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.segment.tissue.TissueClassifierHMRF.__init__": {
  "data": {
   "lineno": 13
  },
  "type": "function"
 },
 "dipy.segment.tissue.TissueClassifierHMRF.classify": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "dipy.segment.mrf.ConstantObservationModel": {
     "line number": [
      61
     ]
    },
    "dipy.segment.mrf.IteratedConditionalModes": {
     "line number": [
      62
     ]
    },
    "dipy.sims.voxel.add_noise": {
     "line number": [
      80
     ]
    },
    "numpy.absolute": {
     "line number": [
      154
     ]
    },
    "numpy.amax": {
     "line number": [
      151,
      154
     ]
    },
    "numpy.amin": {
     "line number": [
      152,
      156
     ]
    },
    "numpy.argsort": {
     "line number": [
      68,
      98,
      132
     ]
    },
    "numpy.empty_like": {
     "line number": [
      83
     ]
    },
    "numpy.inf.sum": {
     "line number": [
      111,
      140,
      146
     ]
    },
    "numpy.interp": {
     "line number": [
      65
     ]
    },
    "numpy.size": {
     "line number": [
      155,
      156
     ]
    },
    "numpy.where": {
     "line number": [
      81
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      79
     ]
    },
    "print": {
     "line number": [
      91,
      125
     ]
    },
    "range": {
     "line number": [
      88,
      122
     ]
    },
    "str": {
     "line number": [
      91,
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.segment.tissue.add_noise": {
  "data": {
   "shadows": "dipy.sims.voxel.add_noise"
  },
  "type": "import"
 },
 "dipy.segment.tissue.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.sims": {
  "data": {},
  "type": "module"
 },
 "dipy.sims.phantom": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      198
     ]
    },
    "dipy.sims.phantom.f": {
     "line number": [
      210
     ]
    },
    "dipy.sims.phantom.f2": {
     "line number": [
      219
     ]
    },
    "dipy.sims.phantom.f3": {
     "line number": [
      228
     ]
    },
    "dipy.sims.phantom.f4": {
     "line number": [
      240
     ]
    },
    "dipy.sims.phantom.orbital_phantom": {
     "line number": [
      210,
      219,
      228,
      240
     ]
    },
    "dipy.sims.phantom.vol2": {
     "line number": [
      230
     ]
    },
    "dipy.sims.phantom.vol23": {
     "line number": [
      241
     ]
    },
    "dipy.sims.phantom.vol3": {
     "line number": [
      230
     ]
    },
    "dipy.sims.phantom.vol4": {
     "line number": [
      241
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.sims.phantom.add_noise": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "dipy.sims.voxel.add_noise": {
     "line number": [
      59
     ]
    },
    "enumerate": {
     "line number": [
      58
     ]
    },
    "numpy.max": {
     "line number": [
      56
     ]
    },
    "numpy.reshape": {
     "line number": [
      53,
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.phantom.diff2eigenvectors": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "dipy.core.geometry.vec2vec_rotmat": {
     "line number": [
      71
     ]
    },
    "numpy.array": {
     "line number": [
      69
     ]
    },
    "numpy.dot": {
     "line number": [
      73,
      74
     ]
    },
    "numpy.eye": {
     "line number": [
      68
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      70
     ]
    },
    "numpy.zeros": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.phantom.diffusion_evals": {
  "data": {
   "shadows": "dipy.sims.voxel.diffusion_evals"
  },
  "type": "import"
 },
 "dipy.sims.phantom.f": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "len": {
     "line number": [
      206
     ]
    },
    "numpy.cos": {
     "line number": [
      204
     ]
    },
    "numpy.linspace": {
     "line number": [
      206
     ]
    },
    "numpy.sin": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.phantom.f2": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": {
    "len": {
     "line number": [
      213,
      214
     ]
    },
    "numpy.linspace": {
     "line number": [
      213,
      214
     ]
    },
    "numpy.zeros": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.phantom.f3": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "len": {
     "line number": [
      222,
      223
     ]
    },
    "numpy.linspace": {
     "line number": [
      222,
      223
     ]
    },
    "numpy.zeros": {
     "line number": [
      224
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.phantom.f4": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "len": {
     "line number": [
      236
     ]
    },
    "numpy.linspace": {
     "line number": [
      236
     ]
    },
    "numpy.zeros": {
     "line number": [
      234,
      235
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.phantom.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.sims.phantom.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.sims.phantom.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.sims.phantom.orbital_phantom": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      148
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      147
     ]
    },
    "dipy.sims.phantom.add_noise": {
     "line number": [
      193
     ]
    },
    "dipy.sims.phantom.diff2eigenvectors": {
     "line number": [
      175
     ]
    },
    "dipy.sims.voxel.diffusion_evals": {
     "line number": [
      83
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      176
     ]
    },
    "func": {
     "line number": [
      155
     ]
    },
    "int": {
     "line number": [
      178,
      178,
      178,
      184,
      185,
      186
     ]
    },
    "len": {
     "line number": [
      165,
      174,
      181
     ]
    },
    "numpy.array": {
     "line number": [
      182
     ]
    },
    "numpy.cos": {
     "line number": [
      152,
      167
     ]
    },
    "numpy.diff": {
     "line number": [
      157,
      158,
      159
     ]
    },
    "numpy.dot": {
     "line number": [
      182
     ]
    },
    "numpy.linspace": {
     "line number": [
      85,
      89,
      90
     ]
    },
    "numpy.max": {
     "line number": [
      189
     ]
    },
    "numpy.newaxis": {
     "line number": [
      189
     ]
    },
    "numpy.pi": {
     "line number": [
      85,
      89
     ]
    },
    "numpy.sin": {
     "line number": [
      151,
      166
     ]
    },
    "numpy.zeros": {
     "line number": [
      153,
      165,
      172
     ]
    },
    "range": {
     "line number": [
      174,
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.phantom.single_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.single_tensor"
  },
  "type": "import"
 },
 "dipy.sims.phantom.vec2vec_rotmat": {
  "data": {
   "shadows": "dipy.core.geometry.vec2vec_rotmat"
  },
  "type": "import"
 },
 "dipy.sims.phantom.vol": {
  "data": {
   "lineno": 210
  },
  "type": "constant"
 },
 "dipy.sims.phantom.vol2": {
  "data": {
   "lineno": 219
  },
  "type": "constant"
 },
 "dipy.sims.phantom.vol23": {
  "data": {
   "lineno": 230
  },
  "type": "constant"
 },
 "dipy.sims.phantom.vol234": {
  "data": {
   "lineno": 241
  },
  "type": "constant"
 },
 "dipy.sims.phantom.vol3": {
  "data": {
   "lineno": 228
  },
  "type": "constant"
 },
 "dipy.sims.phantom.vol4": {
  "data": {
   "lineno": 240
  },
  "type": "constant"
 },
 "dipy.sims.phantom.vox": {
  "data": {
   "shadows": "dipy.sims.voxel"
  },
  "type": "import"
 },
 "dipy.sims.tests": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.Tester": {
     "line number": [
      3,
      4
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.sims.tests.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.sims.tests.test": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "dipy.sims.tests.test_phantom": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      83
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      18
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      14
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      15
     ]
    },
    "numpy.isnan": {
     "line number": [
      16
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.sims.tests.test_phantom.TensorModel": {
  "data": {
   "shadows": "dipy.reconst.dti.TensorModel"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_phantom.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_phantom.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_phantom.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_phantom.f": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "len": {
     "line number": [
      25,
      26,
      27
     ]
    },
    "numpy.linspace": {
     "line number": [
      25,
      26,
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_phantom.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_phantom.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_phantom.gtab": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "dipy.sims.tests.test_phantom.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_phantom.orbital_phantom": {
  "data": {
   "shadows": "dipy.sims.phantom.orbital_phantom"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_phantom.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_phantom.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_phantom.test_add_noise": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      64
     ]
    },
    "dipy.sims.phantom.orbital_phantom": {
     "line number": [
      73,
      76
     ]
    },
    "dipy.sims.tests.test_phantom.f": {
     "line number": [
      64
     ]
    },
    "dipy.sims.tests.test_phantom.gtab": {
     "line number": [
      73,
      76
     ]
    },
    "len": {
     "line number": [
      66
     ]
    },
    "numpy.abs": {
     "line number": [
      80
     ]
    },
    "numpy.linspace": {
     "line number": [
      65,
      69,
      70
     ]
    },
    "numpy.pi": {
     "line number": [
      65,
      69
     ]
    },
    "numpy.random.seed": {
     "line number": [
      59
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      80
     ]
    },
    "numpy.var": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_phantom.test_phantom": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      44
     ]
    },
    "dipy.sims.phantom.orbital_phantom": {
     "line number": [
      34
     ]
    },
    "dipy.sims.tests.test_phantom.f": {
     "line number": [
      35
     ]
    },
    "dipy.sims.tests.test_phantom.gtab": {
     "line number": [
      34,
      44
     ]
    },
    "len": {
     "line number": [
      37
     ]
    },
    "numpy.isnan": {
     "line number": [
      48
     ]
    },
    "numpy.linspace": {
     "line number": [
      36,
      40,
      41
     ]
    },
    "numpy.pi": {
     "line number": [
      36,
      40
     ]
    },
    "numpy.sqrt": {
     "line number": [
      51,
      52,
      53
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_voxel": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      316
     ]
    },
    "dipy.sims.tests.test_voxel.test_multi_tensor": {
     "line number": [
      318
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.sims.tests.test_voxel.TensorModel": {
  "data": {
   "shadows": "dipy.reconst.dti.TensorModel"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel._check_directions": {
  "data": {
   "shadows": "dipy.sims.voxel._check_directions"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.add_noise": {
  "data": {
   "shadows": "dipy.sims.voxel.add_noise"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.all_tensor_evecs": {
  "data": {
   "shadows": "dipy.sims.voxel.all_tensor_evecs"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.dki_signal": {
  "data": {
   "shadows": "dipy.sims.voxel.dki_signal"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.kurtosis_element": {
  "data": {
   "shadows": "dipy.sims.voxel.kurtosis_element"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.multi_tensor_dki": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor_dki"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.setup_module": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      21,
      26
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      19
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      20
     ]
    },
    "numpy.concatenate": {
     "line number": [
      24,
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_voxel.single_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.single_tensor"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.sticks_and_ball": {
  "data": {
   "shadows": "dipy.sims.voxel.sticks_and_ball"
  },
  "type": "import"
 },
 "dipy.sims.tests.test_voxel.test_DKI_crossing_fibers_simulations": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": {
    "dipy.sims.voxel.dki_signal": {
     "line number": [
      311
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      293
     ]
    },
    "len": {
     "line number": [
      296,
      298
     ]
    },
    "numpy.array": {
     "line number": [
      288
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      308,
      309,
      310
     ]
    },
    "range": {
     "line number": [
      296,
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_voxel.test_DKI_simulations_aligned_fibers": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      261
     ]
    },
    "dipy.sims.voxel.dki_signal": {
     "line number": [
      263,
      266,
      269
     ]
    },
    "dipy.sims.voxel.multi_tensor_dki": {
     "line number": [
      235,
      239,
      243
     ]
    },
    "numpy.array": {
     "line number": [
      230,
      257
     ]
    },
    "numpy.asarray": {
     "line number": [
      258
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      264,
      267,
      270,
      273,
      275,
      278,
      280
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      246,
      248,
      251,
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_voxel.test_all_tensor_evecs": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "dipy.sims.voxel.all_tensor_evecs": {
     "line number": [
      155
     ]
    },
    "numpy.array": {
     "line number": [
      148,
      151
     ]
    },
    "numpy.sqrt": {
     "line number": [
      148,
      148,
      151,
      151,
      152,
      152
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      155
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_voxel.test_check_directions": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "dipy.sims.voxel._check_directions": {
     "line number": [
      49,
      52,
      55,
      59,
      63,
      72
     ]
    },
    "numpy.array": {
     "line number": [
      62,
      71
     ]
    },
    "numpy.cos": {
     "line number": [
      64,
      73,
      75,
      76,
      78
     ]
    },
    "numpy.pi": {
     "line number": [
      64,
      64,
      73,
      73,
      74,
      74,
      75,
      76,
      76,
      77,
      77,
      78
     ]
    },
    "numpy.sin": {
     "line number": [
      64,
      73,
      74,
      74,
      76,
      77,
      77
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      50,
      53,
      56,
      60,
      65,
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_voxel.test_kurtosis_elements": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": {
    "dipy.sims.voxel._check_directions": {
     "line number": [
      171
     ]
    },
    "dipy.sims.voxel.all_tensor_evecs": {
     "line number": [
      174
     ]
    },
    "dipy.sims.voxel.kurtosis_element": {
     "line number": [
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      213,
      216,
      217
     ]
    },
    "len": {
     "line number": [
      172,
      173,
      179
     ]
    },
    "numpy.array": {
     "line number": [
      166
     ]
    },
    "numpy.diag": {
     "line number": [
      175
     ]
    },
    "numpy.dot": {
     "line number": [
      175,
      175
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      213,
      216
     ]
    },
    "numpy.zeros": {
     "line number": [
      172,
      178
     ]
    },
    "range": {
     "line number": [
      173,
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_voxel.test_multi_tensor": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      119
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      117
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      118
     ]
    },
    "dipy.sims.voxel.all_tensor_evecs": {
     "line number": [
      112,
      112
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      126
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      121,
      122
     ]
    },
    "numpy.array": {
     "line number": [
      108,
      110,
      111
     ]
    },
    "numpy.sqrt": {
     "line number": [
      110,
      110,
      111,
      111
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_voxel.test_single_tensor": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      101
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      96
     ]
    },
    "numpy.array": {
     "line number": [
      94
     ]
    },
    "numpy.eye": {
     "line number": [
      95
     ]
    },
    "numpy.mean": {
     "line number": [
      98
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      98
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      97,
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_voxel.test_snr": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "dipy.sims.voxel.add_noise": {
     "line number": [
      142
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      136
     ]
    },
    "numpy.random.seed": {
     "line number": [
      134
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      144
     ]
    },
    "numpy.var": {
     "line number": [
      144
     ]
    },
    "range": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.sims.tests.test_voxel.test_sticks_and_ball": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      87
     ]
    },
    "dipy.sims.voxel.sticks_and_ball": {
     "line number": [
      84
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      90
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.stats": {
  "data": {
   "symbols_in_volume": {
    "dipy.stats.w_string": {
     "line number": [
      5,
      6,
      7
     ]
    },
    "dipy.stats.warnings": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.stats.analysis": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      22,
      23
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.stats.analysis.AveragePointwiseEuclideanMetric": {
  "data": {
   "shadows": "dipy.segment.metric.AveragePointwiseEuclideanMetric"
  },
  "type": "import"
 },
 "dipy.stats.analysis.QuickBundles": {
  "data": {
   "shadows": "dipy.segment.clustering.QuickBundles"
  },
  "type": "import"
 },
 "dipy.stats.analysis.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.stats.analysis._save_hdf5": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "pandas.DataFrame": {
     "line number": [
      45
     ]
    },
    "pandas.HDFStore": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.stats.analysis.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.stats.analysis.afq_profile": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      405,
      420
     ]
    },
    "callable": {
     "line number": [
      415
     ]
    },
    "dipy.tracking.streamline.orient_by_streamline": {
     "line number": [
      401
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      408
     ]
    },
    "dipy.tracking.streamline.values_from_volume": {
     "line number": [
      411
     ]
    },
    "len": {
     "line number": [
      404
     ]
    },
    "numpy.allclose": {
     "line number": [
      419
     ]
    },
    "numpy.array": {
     "line number": [
      411
     ]
    },
    "numpy.eye": {
     "line number": [
      403
     ]
    },
    "numpy.ones": {
     "line number": [
      414,
      419
     ]
    },
    "numpy.sum": {
     "line number": [
      419,
      423
     ]
    },
    "weights": {
     "line number": [
      416,
      419,
      423
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.stats.analysis.bundle_analysis": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      209,
      260
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      249,
      265
     ]
    },
    "dipy.io.peaks.load_peaks": {
     "line number": [
      272
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      220,
      223,
      226
     ]
    },
    "dipy.segment.clustering.QuickBundles": {
     "line number": [
      234
     ]
    },
    "dipy.segment.metric.AveragePointwiseEuclideanMetric": {
     "line number": [
      233
     ]
    },
    "dipy.stats.analysis.dti_measures": {
     "line number": [
      267
     ]
    },
    "dipy.stats.analysis.os": {
     "line number": [
      211,
      213,
      215,
      220,
      223,
      226,
      248,
      249,
      261
     ]
    },
    "dipy.stats.analysis.peak_values": {
     "line number": [
      273
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      236
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      230
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      252
     ]
    },
    "len": {
     "line number": [
      217,
      238,
      241,
      243,
      255
     ]
    },
    "numpy.array": {
     "line number": [
      257
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      251
     ]
    },
    "print": {
     "line number": [
      238,
      239,
      240,
      242
     ]
    },
    "range": {
     "line number": [
      219,
      255
     ]
    },
    "scipy.spatial.cKDTree": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.stats.analysis.cKDTree": {
  "data": {
   "shadows": "scipy.spatial.cKDTree"
  },
  "type": "import"
 },
 "dipy.stats.analysis.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.stats.analysis.dti_measures": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "dipy.stats.analysis._save_hdf5": {
     "line number": [
      166
     ]
    },
    "dipy.stats.analysis.os": {
     "line number": [
      166
     ]
    },
    "dir": {
     "line number": [
      166
     ]
    },
    "len": {
     "line number": [
      160,
      161,
      162,
      163
     ]
    },
    "list": {
     "line number": [
      160
     ]
    },
    "range": {
     "line number": [
      160
     ]
    },
    "scipy.ndimage.interpolation.map_coordinates": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.stats.analysis.gaussian_weights": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": {
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      300
     ]
    },
    "len": {
     "line number": [
      303,
      306,
      327,
      334
     ]
    },
    "numpy.allclose": {
     "line number": [
      333
     ]
    },
    "numpy.array": {
     "line number": [
      308,
      310,
      320
     ]
    },
    "numpy.cov": {
     "line number": [
      317
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      338
     ]
    },
    "numpy.mean": {
     "line number": [
      278
     ]
    },
    "numpy.nan": {
     "line number": [
      308
     ]
    },
    "numpy.sum": {
     "line number": [
      345
     ]
    },
    "numpy.zeros": {
     "line number": [
      303
     ]
    },
    "range": {
     "line number": [
      312,
      327
     ]
    },
    "scipy.spatial.distance.mahalanobis": {
     "line number": [
      338
     ]
    },
    "stat": {
     "line number": [
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.stats.analysis.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.stats.analysis.load_peaks": {
  "data": {
   "shadows": "dipy.io.peaks.load_peaks"
  },
  "type": "import"
 },
 "dipy.stats.analysis.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.stats.analysis.mahalanobis": {
  "data": {
   "shadows": "scipy.spatial.distance.mahalanobis"
  },
  "type": "import"
 },
 "dipy.stats.analysis.map_coordinates": {
  "data": {
   "shadows": "scipy.ndimage.interpolation.map_coordinates"
  },
  "type": "import"
 },
 "dipy.stats.analysis.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.stats.analysis.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.stats.analysis.orient_by_streamline": {
  "data": {
   "shadows": "dipy.tracking.streamline.orient_by_streamline"
  },
  "type": "import"
 },
 "dipy.stats.analysis.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.stats.analysis.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "dipy.stats.analysis.peak_values": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "dipy.stats.analysis._save_hdf5": {
     "line number": [
      122
     ]
    },
    "dipy.stats.analysis.os": {
     "line number": [
      122
     ]
    },
    "dir": {
     "line number": [
      122
     ]
    },
    "int": {
     "line number": [
      97
     ]
    },
    "len": {
     "line number": [
      95,
      107
     ]
    },
    "min": {
     "line number": [
      112
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      92
     ]
    },
    "range": {
     "line number": [
      95,
      107
     ]
    },
    "scipy.spatial.distance.cosine": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.stats.analysis.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.stats.analysis.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamline.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.stats.analysis.spatial": {
  "data": {
   "shadows": "scipy.spatial"
  },
  "type": "import"
 },
 "dipy.stats.analysis.transform_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.transform_streamlines"
  },
  "type": "import"
 },
 "dipy.stats.analysis.values_from_volume": {
  "data": {
   "shadows": "dipy.tracking.streamline.values_from_volume"
  },
  "type": "import"
 },
 "dipy.stats.tests": {
  "data": {},
  "type": "module"
 },
 "dipy.stats.tests.test_analysis": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      194
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      17,
      18,
      19
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      195
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.stats.tests.test_analysis.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.afq_profile": {
  "data": {
   "shadows": "dipy.stats.analysis.afq_profile"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.bundle_analysis": {
  "data": {
   "shadows": "dipy.stats.analysis.bundle_analysis"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.gaussian_weights": {
  "data": {
   "shadows": "dipy.stats.analysis.gaussian_weights"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.save_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.save_tractogram"
  },
  "type": "import"
 },
 "dipy.stats.tests.test_analysis.test_afq_profile": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      172,
      191
     ]
    },
    "dipy.stats.analysis.afq_profile": {
     "line number": [
      146,
      149,
      153,
      158,
      163,
      167,
      172,
      181,
      191
     ]
    },
    "dipy.stats.analysis.gaussian_weights": {
     "line number": [
      154,
      159
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      138,
      190
     ]
    },
    "numpy.array": {
     "line number": [
      139,
      142
     ]
    },
    "numpy.eye": {
     "line number": [
      146,
      149,
      153,
      158,
      163,
      167,
      173,
      177,
      191
     ]
    },
    "numpy.median": {
     "line number": [
      154,
      159
     ]
    },
    "numpy.ones": {
     "line number": [
      137,
      147,
      151,
      156,
      161,
      165,
      168,
      169,
      174,
      187
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      147,
      151,
      156,
      161,
      165,
      169,
      187
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      172,
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.stats.tests.test_analysis.test_ba": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      27
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      60
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      37,
      44,
      51
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      37,
      44,
      51
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      28
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      38,
      45,
      52
     ]
    },
    "dipy.stats.analysis.bundle_analysis": {
     "line number": [
      66
     ]
    },
    "dipy.stats.tests.test_analysis.os": {
     "line number": [
      33,
      35,
      38,
      41,
      42,
      45,
      48,
      49,
      52,
      55,
      56,
      60,
      63,
      64,
      69,
      69
     ]
    },
    "dipy.stats.tests.test_analysis.pytest": {
     "line number": [
      22
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      69
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      31
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      26
     ]
    },
    "numpy.eye": {
     "line number": [
      61
     ]
    },
    "numpy.random.rand": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.stats.tests.test_analysis.test_gaussian_weights": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "dipy.stats.analysis.gaussian_weights": {
     "line number": [
      83,
      87,
      95,
      113,
      121,
      128,
      132
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      80,
      91,
      112,
      113,
      120,
      127,
      131
     ]
    },
    "float": {
     "line number": [
      74,
      75,
      76
     ]
    },
    "len": {
     "line number": [
      84,
      88,
      117,
      117,
      124
     ]
    },
    "numpy.arange": {
     "line number": [
      74,
      75,
      76
     ]
    },
    "numpy.array": {
     "line number": [
      80,
      81,
      91,
      92,
      93,
      94,
      102,
      103,
      104,
      105,
      107,
      108,
      109,
      110
     ]
    },
    "numpy.nan": {
     "line number": [
      133
     ]
    },
    "numpy.ones": {
     "line number": [
      84,
      88,
      117,
      124,
      129,
      133
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      84,
      88,
      98,
      99
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      116,
      123,
      129,
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.stats.w_string": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "dipy.stats.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.test": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "dipy.testing": {
  "data": {
   "symbols_in_volume": {
    "dipy.testing.assert_operator": {
     "line number": [
      26,
      28,
      30,
      32,
      34,
      36,
      38
     ]
    },
    "dipy.testing.operator": {
     "line number": [
      26,
      28,
      30,
      32,
      34,
      36,
      38
     ]
    },
    "functools.partial": {
     "line number": [
      26,
      28,
      30,
      32,
      34,
      36,
      38
     ]
    },
    "os.path.abspath": {
     "line number": [
      12
     ]
    },
    "os.path.dirname": {
     "line number": [
      12
     ]
    },
    "os.path.join": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.testing.IO_DATA_PATH": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "dipy.testing.LooseVersion": {
  "data": {
   "shadows": "distutils.version.LooseVersion"
  },
  "type": "import"
 },
 "dipy.testing.abspath": {
  "data": {
   "shadows": "os.path.abspath"
  },
  "type": "import"
 },
 "dipy.testing.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.testing.assert_arrays_equal": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      43
     ]
    },
    "zip": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.testing.assert_false": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "dipy.testing.assert_greater": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "dipy.testing.assert_greater_equal": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "dipy.testing.assert_less": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "dipy.testing.assert_less_equal": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "dipy.testing.assert_not_equal": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "dipy.testing.assert_operator": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      22,
      23
     ]
    },
    "bool": {
     "line number": [
      20
     ]
    },
    "dipy.testing.operator": {
     "line number": [
      16,
      19
     ]
    },
    "op": {
     "line number": [
      21
     ]
    },
    "str": {
     "line number": [
      23,
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.testing.assert_true": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "dipy.testing.decorators": {
  "data": {
   "symbols_in_volume": {
    "dipy.testing.decorators.os": {
     "line number": [
      56
     ]
    },
    "dipy.testing.decorators.platform": {
     "line number": [
      57
     ]
    },
    "dipy.testing.decorators.re": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.testing.decorators.SKIP_RE": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "dipy.testing.decorators.Xvfb": {
  "data": {
   "shadows": "xvfbwrapper.Xvfb"
  },
  "type": "import"
 },
 "dipy.testing.decorators.doctest_skip_parser": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "dipy.testing.decorators.SKIP_RE": {
     "line number": [
      40
     ]
    },
    "eval": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.testing.decorators.is_windows": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "dipy.testing.decorators.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.testing.decorators.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "dipy.testing.decorators.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "dipy.testing.decorators.use_xvfb": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "dipy.testing.decorators.xvfb_it": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "dipy.testing.decorators.is_windows": {
     "line number": [
      75
     ]
    },
    "my_test": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.testing.decorators.xvfb_it.test_with_xvfb": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "dipy.testing.decorators.use_xvfb": {
     "line number": [
      66,
      71
     ]
    },
    "my_test": {
     "line number": [
      70
     ]
    },
    "xvfbwrapper.Xvfb": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.testing.dirname": {
  "data": {
   "shadows": "os.path.dirname"
  },
  "type": "import"
 },
 "dipy.testing.memory": {
  "data": {},
  "type": "module"
 },
 "dipy.testing.memory.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "dipy.testing.memory.gc": {
  "data": {
   "shadows": "gc"
  },
  "type": "import"
 },
 "dipy.testing.memory.get_type_refcount": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": {
    "collections.defaultdict": {
     "line number": [
      21
     ]
    },
    "dipy.testing.memory.gc": {
     "line number": [
      19,
      22
     ]
    },
    "int": {
     "line number": [
      21
     ]
    },
    "type": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.testing.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.testing.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "dipy.testing.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "dipy.testing.pjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.testing.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "dipy.testing.setup_test": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      66
     ]
    },
    "UserWarning": {
     "line number": [
      68
     ]
    },
    "dipy.testing.scipy": {
     "line number": [
      65
     ]
    },
    "dipy.testing.warnings": {
     "line number": [
      66,
      68
     ]
    },
    "distutils.version.LooseVersion": {
     "line number": [
      57,
      57,
      64,
      64,
      65
     ]
    },
    "numpy.__version__": {
     "line number": [
      57,
      64
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.testing.spherepoints": {
  "data": {
   "symbols_in_volume": {
    "dipy.testing.spherepoints._make_pts": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.testing.spherepoints._make_pts": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      8,
      9
     ]
    },
    "numpy.array": {
     "line number": [
      19
     ]
    },
    "numpy.cos": {
     "line number": [
      15,
      17
     ]
    },
    "numpy.pi": {
     "line number": [
      8,
      9
     ]
    },
    "numpy.sin": {
     "line number": [
      15,
      16,
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.testing.spherepoints.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.testing.spherepoints.sphere_points": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "dipy.testing.tests": {
  "data": {},
  "type": "module"
 },
 "dipy.testing.tests.test_decorators": {
  "data": {},
  "type": "module"
 },
 "dipy.testing.tests.test_decorators.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.testing.tests.test_decorators.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.testing.tests.test_decorators.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.testing.tests.test_decorators.doctest_skip_parser": {
  "data": {
   "shadows": "dipy.testing.decorators.doctest_skip_parser"
  },
  "type": "import"
 },
 "dipy.testing.tests.test_decorators.test_skipper": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "NameError": {
     "line number": [
      48
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      24,
      37
     ]
    },
    "dipy.testing.decorators.doctest_skip_parser": {
     "line number": [
      23,
      36,
      48
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      25,
      38
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.testing.tests.test_decorators.test_skipper.f": {
  "data": {
   "lineno": 9
  },
  "type": "function"
 },
 "dipy.testing.tests.test_memory": {
  "data": {},
  "type": "module"
 },
 "dipy.testing.tests.test_memory.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.testing.tests.test_memory.get_type_refcount": {
  "data": {
   "shadows": "dipy.testing.memory.get_type_refcount"
  },
  "type": "import"
 },
 "dipy.testing.tests.test_memory.test_get_type_refcount": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "dipy.testing.memory.get_type_refcount": {
     "line number": [
      7,
      9,
      11
     ]
    },
    "list": {
     "line number": [
      8
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      9,
      11
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.testing.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.tests": {
  "data": {},
  "type": "module"
 },
 "dipy.tests.scriptrunner": {
  "data": {
   "symbols_in_volume": {
    "NameError": {
     "line number": [
      23
     ]
    },
    "dipy.tests.scriptrunner._get_package": {
     "line number": [
      36
     ]
    },
    "str": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.tests.scriptrunner.MY_PACKAGE": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "dipy.tests.scriptrunner.PIPE": {
  "data": {
   "shadows": "subprocess.PIPE"
  },
  "type": "import"
 },
 "dipy.tests.scriptrunner.Popen": {
  "data": {
   "shadows": "subprocess.Popen"
  },
  "type": "import"
 },
 "dipy.tests.scriptrunner.ScriptRunner": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "object": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.tests.scriptrunner.ScriptRunner.__init__": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "dipy.tests.scriptrunner.MY_PACKAGE": {
     "line number": [
      72
     ]
    },
    "dipy.tests.scriptrunner.local_module_dir": {
     "line number": [
      94
     ]
    },
    "dipy.tests.scriptrunner.local_script_dir": {
     "line number": [
      93
     ]
    },
    "dipy.tests.scriptrunner.os": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tests.scriptrunner.ScriptRunner.run_command": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      158
     ]
    },
    "dipy.tests.scriptrunner.os": {
     "line number": [
      132,
      135,
      142
     ]
    },
    "dipy.tests.scriptrunner.string_types": {
     "line number": [
      119
     ]
    },
    "dipy.tests.scriptrunner.sys": {
     "line number": [
      130
     ]
    },
    "isinstance": {
     "line number": [
      119
     ]
    },
    "list": {
     "line number": [
      122
     ]
    },
    "opp": {
     "line number": [
      168,
      168
     ]
    },
    "os.path.join": {
     "line number": [
      131
     ]
    },
    "os.path.pathsep": {
     "line number": [
      152
     ]
    },
    "print": {
     "line number": [
      141
     ]
    },
    "subprocess.PIPE": {
     "line number": [
      153,
      153
     ]
    },
    "subprocess.Popen": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tests.scriptrunner._get_package": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "__name__.split": {
     "line number": [
      32
     ]
    },
    "__package__": {
     "line number": [
      30,
      31
     ]
    },
    "globals": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tests.scriptrunner.dirname": {
  "data": {
   "shadows": "os.path.dirname"
  },
  "type": "import"
 },
 "dipy.tests.scriptrunner.isdir": {
  "data": {
   "shadows": "os.path.isdir"
  },
  "type": "import"
 },
 "dipy.tests.scriptrunner.isfile": {
  "data": {
   "shadows": "os.path.isfile"
  },
  "type": "import"
 },
 "dipy.tests.scriptrunner.local_module_dir": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "__import__": {
     "line number": [
      56
     ]
    },
    "dipy.tests.scriptrunner.os": {
     "line number": [
      58
     ]
    },
    "os.path.dirname": {
     "line number": [
      57,
      57
     ]
    },
    "os.path.realpath": {
     "line number": [
      57,
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tests.scriptrunner.local_script_dir": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "__import__": {
     "line number": [
      45
     ]
    },
    "dipy.tests.scriptrunner.MY_PACKAGE": {
     "line number": [
      45
     ]
    },
    "os.path.dirname": {
     "line number": [
      45
     ]
    },
    "os.path.isdir": {
     "line number": [
      48
     ]
    },
    "os.path.isfile": {
     "line number": [
      48
     ]
    },
    "os.path.join": {
     "line number": [
      46,
      47,
      48
     ]
    },
    "os.path.realpath": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tests.scriptrunner.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.tests.scriptrunner.pathsep": {
  "data": {
   "shadows": "os.path.pathsep"
  },
  "type": "import"
 },
 "dipy.tests.scriptrunner.pjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.tests.scriptrunner.realpath": {
  "data": {
   "shadows": "os.path.realpath"
  },
  "type": "import"
 },
 "dipy.tests.scriptrunner.string_types": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "dipy.tests.scriptrunner.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.tests.test_scripts": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.Tester": {
     "line number": [
      8,
      9,
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.tracking.Streamlines": {
  "data": {
   "shadows": "nibabel.streamlines.ArraySequence"
  },
  "type": "import"
 },
 "dipy.tracking.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.tracking._utils": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking._utils._mapping_to_voxel": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      36
     ]
    },
    "float": {
     "line number": [
      38
     ]
    },
    "numpy.array": {
     "line number": [
      38
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking._utils._to_voxel_coordinates": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      52
     ]
    },
    "int": {
     "line number": [
      54
     ]
    },
    "numpy.dot": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking._utils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.tracking._utils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.tracking._utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking._utils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.tracking._utils.warn": {
  "data": {
   "shadows": "warnings.warn"
  },
  "type": "import"
 },
 "dipy.tracking.bench": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "dipy.tracking.benchmarks": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking.benchmarks.bench_streamline": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking.benchmarks.bench_streamline.DATA": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "dipy.tracking.benchmarks.bench_streamline.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.Streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.bench_compress_streamlines": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      109
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      110
     ]
    },
    "dipy.tracking.Streamlines": {
     "line number": [
      113,
      121
     ]
    },
    "len": {
     "line number": [
      116
     ]
    },
    "numpy.testing.measure": {
     "line number": [
      117,
      122
     ]
    },
    "print": {
     "line number": [
      115,
      118,
      124,
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.benchmarks.bench_streamline.bench_length": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "dipy.tracking.benchmarks.bench_streamline.DATA": {
     "line number": [
      83,
      95,
      96,
      103,
      104
     ]
    },
    "dipy.tracking.streamline.length": {
     "line number": [
      96,
      103,
      104
     ]
    },
    "dipy.tracking.tests.test_streamline.length_python": {
     "line number": [
      95
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      95
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      103
     ]
    },
    "numpy.testing.measure": {
     "line number": [
      87,
      90,
      98
     ]
    },
    "print": {
     "line number": [
      86,
      88,
      91,
      92,
      99,
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.benchmarks.bench_streamline.bench_set_number_of_points": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "dipy.tracking.benchmarks.bench_streamline.DATA": {
     "line number": [
      55,
      69,
      70,
      77,
      78
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      70,
      77,
      78
     ]
    },
    "dipy.tracking.tests.test_streamline.set_number_of_points_python": {
     "line number": [
      69
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      69
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      77
     ]
    },
    "numpy.testing.measure": {
     "line number": [
      59,
      63,
      72
     ]
    },
    "print": {
     "line number": [
      58,
      61,
      65,
      66,
      73,
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.benchmarks.bench_streamline.compress_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.compress_streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.compress_streamlines_python": {
  "data": {
   "shadows": "dipy.tracking.tests.test_streamline.compress_streamlines_python"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.generate_streamlines": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "range": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.benchmarks.bench_streamline.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.length": {
  "data": {
   "shadows": "dipy.tracking.streamline.length"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.length_python": {
  "data": {
   "shadows": "dipy.tracking.tests.test_streamline.length_python"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.measure": {
  "data": {
   "shadows": "numpy.testing.measure"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamline.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.set_number_of_points_python": {
  "data": {
   "shadows": "dipy.tracking.tests.test_streamline.set_number_of_points_python"
  },
  "type": "import"
 },
 "dipy.tracking.benchmarks.bench_streamline.setup": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "dipy.tracking.Streamlines": {
     "line number": [
      44
     ]
    },
    "dipy.tracking.benchmarks.bench_streamline.DATA": {
     "line number": [
      39,
      40,
      41,
      44,
      44
     ]
    },
    "dipy.tracking.benchmarks.bench_streamline.generate_streamlines": {
     "line number": [
      41
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.learning": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking.learning.detect_corresponding_tracks": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "dipy.tracking.distances.mam_distances": {
     "line number": [
      51
     ]
    },
    "int": {
     "line number": [
      56
     ]
    },
    "len": {
     "line number": [
      46
     ]
    },
    "numpy.array": {
     "line number": [
      52,
      53
     ]
    },
    "numpy.zeros": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.learning.detect_corresponding_tracks_plus": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "dipy.tracking.distances.mam_distances": {
     "line number": [
      110
     ]
    },
    "int": {
     "line number": [
      114
     ]
    },
    "len": {
     "line number": [
      106
     ]
    },
    "numpy.array": {
     "line number": [
      111,
      112
     ]
    },
    "numpy.zeros": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.learning.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.learning.pf": {
  "data": {
   "shadows": "dipy.tracking.distances"
  },
  "type": "import"
 },
 "dipy.tracking.life": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking.life.FiberFit": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstFit": {
     "line number": [
      480
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.tracking.life.FiberFit.__init__": {
  "data": {
   "lineno": 485,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstFit.__init__": {
     "line number": [
      496
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.FiberFit.predict": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": {
    "dipy.core.optimize.spdot": {
     "line number": [
      539
     ]
    },
    "dipy.tracking.life.FiberModel": {
     "line number": [
      534
     ]
    },
    "numpy.empty": {
     "line number": [
      543
     ]
    },
    "numpy.reshape": {
     "line number": [
      539
     ]
    },
    "numpy.sum": {
     "line number": [
      541
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.FiberModel": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstModel": {
     "line number": [
      302
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.tracking.life.FiberModel.__init__": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "dipy.reconst.base.ReconstModel.__init__": {
     "line number": [
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.FiberModel._signals": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": {
    "numpy.mean": {
     "line number": [
      430,
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.FiberModel.fit": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": {
    "dipy.core.optimize.sparse_nnls": {
     "line number": [
      474
     ]
    },
    "dipy.tracking.life.FiberFit": {
     "line number": [
      475
     ]
    },
    "numpy.eye": {
     "line number": [
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.FiberModel.setup": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": {
    "dipy.tracking.life.LifeSignalMaker": {
     "line number": [
      351
     ]
    },
    "dipy.tracking.life.streamline_signal": {
     "line number": [
      378
     ]
    },
    "dipy.tracking.life.voxel2streamline": {
     "line number": [
      362
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      355
     ]
    },
    "dipy.tracking.utils.unique_rows": {
     "line number": [
      358
     ]
    },
    "enumerate": {
     "line number": [
      374
     ]
    },
    "int": {
     "line number": [
      385
     ]
    },
    "len": {
     "line number": [
      366
     ]
    },
    "numpy.arange": {
     "line number": [
      385
     ]
    },
    "numpy.concatenate": {
     "line number": [
      357
     ]
    },
    "numpy.eye": {
     "line number": [
      362
     ]
    },
    "numpy.float": {
     "line number": [
      369
     ]
    },
    "numpy.hstack": {
     "line number": [
      366
     ]
    },
    "numpy.intp": {
     "line number": [
      358,
      370,
      371,
      388
     ]
    },
    "numpy.round": {
     "line number": [
      358
     ]
    },
    "numpy.zeros": {
     "line number": [
      369,
      370,
      371,
      396
     ]
    },
    "range": {
     "line number": [
      387
     ]
    },
    "scipy.sparse.csr_matrix": {
     "line number": [
      407
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.LifeSignalMaker": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "object": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.tracking.life.LifeSignalMaker.__init__": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "dipy.data.default_sphere": {
     "line number": [
      229
     ]
    },
    "numpy.empty": {
     "line number": [
      235
     ]
    },
    "numpy.sum": {
     "line number": [
      236
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.LifeSignalMaker.calc_signal": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "dipy.tracking.life.grad_tensor": {
     "line number": [
      245
     ]
    },
    "numpy.diag": {
     "line number": [
      246
     ]
    },
    "numpy.dot": {
     "line number": [
      246,
      246
     ]
    },
    "numpy.exp": {
     "line number": [
      247
     ]
    },
    "numpy.mean": {
     "line number": [
      248
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.LifeSignalMaker.streamline_signal": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": {
    "dipy.tracking.life.streamline_gradients": {
     "line number": [
      258
     ]
    },
    "enumerate": {
     "line number": [
      260
     ]
    },
    "numpy.zeros": {
     "line number": [
      259
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.ReconstFit": {
  "data": {
   "shadows": "dipy.reconst.base.ReconstFit"
  },
  "type": "import"
 },
 "dipy.tracking.life.ReconstModel": {
  "data": {
   "shadows": "dipy.reconst.base.ReconstModel"
  },
  "type": "import"
 },
 "dipy.tracking.life._voxel2streamline": {
  "data": {
   "shadows": "dipy.tracking.vox2track._voxel2streamline"
  },
  "type": "import"
 },
 "dipy.tracking.life.dpd": {
  "data": {
   "shadows": "dipy.data"
  },
  "type": "import"
 },
 "dipy.tracking.life.grad_tensor": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "numpy.diag": {
     "line number": [
      139
     ]
    },
    "numpy.dot": {
     "line number": [
      139,
      139
     ]
    },
    "scipy.linalg.svd": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.gradient": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "len": {
     "line number": [
      59
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      58
     ]
    },
    "numpy.empty_like": {
     "line number": [
      72
     ]
    },
    "range": {
     "line number": [
      70
     ]
    },
    "slice": {
     "line number": [
      66,
      67,
      68,
      73,
      74,
      75,
      93,
      94,
      95
     ]
    },
    "tuple": {
     "line number": [
      78,
      78,
      78,
      83,
      83,
      83,
      88,
      88,
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.la": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "dipy.tracking.life.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.life.opt": {
  "data": {
   "shadows": "dipy.core.optimize"
  },
  "type": "import"
 },
 "dipy.tracking.life.sps": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "dipy.tracking.life.streamline_gradients": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "dipy.tracking.life.gradient": {
     "line number": [
      118
     ]
    },
    "numpy.array": {
     "line number": [
      118
     ]
    },
    "numpy.asarray": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.streamline_signal": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "dipy.tracking.life.streamline_tensors": {
     "line number": [
      192
     ]
    },
    "enumerate": {
     "line number": [
      197
     ]
    },
    "len": {
     "line number": [
      193
     ]
    },
    "numpy.diag": {
     "line number": [
      198
     ]
    },
    "numpy.dot": {
     "line number": [
      198,
      198
     ]
    },
    "numpy.empty": {
     "line number": [
      193
     ]
    },
    "numpy.exp": {
     "line number": [
      200
     ]
    },
    "numpy.mean": {
     "line number": [
      201
     ]
    },
    "numpy.sum": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.streamline_tensors": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "dipy.tracking.life.grad_tensor": {
     "line number": [
      173
     ]
    },
    "dipy.tracking.life.streamline_gradients": {
     "line number": [
      167
     ]
    },
    "enumerate": {
     "line number": [
      172
     ]
    },
    "numpy.empty": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.life.transform_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.transform_streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.life.unique_rows": {
  "data": {
   "shadows": "dipy.tracking.utils.unique_rows"
  },
  "type": "import"
 },
 "dipy.tracking.life.voxel2streamline": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      292
     ]
    },
    "dipy.tracking.utils.unique_rows": {
     "line number": [
      296
     ]
    },
    "dipy.tracking.vox2track._voxel2streamline": {
     "line number": [
      298
     ]
    },
    "numpy.concatenate": {
     "line number": [
      295
     ]
    },
    "numpy.intp": {
     "line number": [
      299
     ]
    },
    "numpy.round": {
     "line number": [
      296
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.local_tracking": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking.local_tracking.AnatomicalStoppingCriterion": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.AnatomicalStoppingCriterion"
  },
  "type": "import"
 },
 "dipy.tracking.local_tracking.LocalTracking": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "object": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.tracking.local_tracking.LocalTracking.__init__": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      77,
      79,
      81
     ]
    },
    "float": {
     "line number": [
      84
     ]
    },
    "numpy.ascontiguousarray": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.local_tracking.LocalTracking.__iter__": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "dipy.tracking.utils.transform_tracking_output": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.local_tracking.LocalTracking._generate_streamlines": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "dipy.tracking.local_tracking.random": {
     "line number": [
      126
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.ENDPOINT": {
     "line number": [
      139,
      145
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.OUTSIDEIMAGE": {
     "line number": [
      140,
      146
     ]
    },
    "float": {
     "line number": [
      118
     ]
    },
    "hash": {
     "line number": [
      124
     ]
    },
    "len": {
     "line number": [
      156
     ]
    },
    "numpy.abs": {
     "line number": [
      124
     ]
    },
    "numpy.concatenate": {
     "line number": [
      152
     ]
    },
    "numpy.dot": {
     "line number": [
      121
     ]
    },
    "numpy.empty": {
     "line number": [
      118
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      114
     ]
    },
    "numpy.random.seed": {
     "line number": [
      127
     ]
    },
    "numpy.sum": {
     "line number": [
      124
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.local_tracking.LocalTracking._get_voxel_size": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      28
     ]
    },
    "numpy.allclose": {
     "line number": [
      24
     ]
    },
    "numpy.dot": {
     "line number": [
      22
     ]
    },
    "numpy.sqrt": {
     "line number": [
      29
     ]
    },
    "numpy.triu": {
     "line number": [
      24
     ]
    },
    "staticmethod": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.local_tracking.LocalTracking._tracker": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "dipy.tracking.localtrack.local_tracker": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.local_tracking.ParticleFilteringTracking": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "dipy.tracking.local_tracking.LocalTracking": {
     "line number": [
      163
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.tracking.local_tracking.ParticleFilteringTracking.__init__": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      230,
      242,
      245
     ]
    },
    "dipy.tracking.local_tracking.ParticleFilteringTracking": {
     "line number": [
      260
     ]
    },
    "dipy.tracking.stopping_criterion.AnatomicalStoppingCriterion": {
     "line number": [
      229
     ]
    },
    "float": {
     "line number": [
      247,
      253,
      254,
      256
     ]
    },
    "int": {
     "line number": [
      232,
      234,
      257,
      259
     ]
    },
    "isinstance": {
     "line number": [
      229
     ]
    },
    "numpy.ceil": {
     "line number": [
      232,
      234
     ]
    },
    "numpy.empty": {
     "line number": [
      247,
      251,
      254,
      255,
      257,
      258
     ]
    },
    "super": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.local_tracking.ParticleFilteringTracking._tracker": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "dipy.tracking.localtrack.pft_tracker": {
     "line number": [
      273
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.local_tracking.StreamlineStatus": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.StreamlineStatus"
  },
  "type": "import"
 },
 "dipy.tracking.local_tracking.local_tracker": {
  "data": {
   "shadows": "dipy.tracking.localtrack.local_tracker"
  },
  "type": "import"
 },
 "dipy.tracking.local_tracking.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.local_tracking.pft_tracker": {
  "data": {
   "shadows": "dipy.tracking.localtrack.pft_tracker"
  },
  "type": "import"
 },
 "dipy.tracking.local_tracking.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "dipy.tracking.local_tracking.utils": {
  "data": {
   "shadows": "dipy.tracking.utils"
  },
  "type": "import"
 },
 "dipy.tracking.metrics": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      892
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.tracking.metrics._extrap": {
  "data": {
   "lineno": 751,
   "symbols_in_volume": {
    "numpy.where": {
     "line number": [
      754
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.tracking.metrics.arbitrarypoint": {
  "data": {
   "lineno": 703,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      735,
      741
     ]
    },
    "dipy.tracking.metrics.length": {
     "line number": [
      739
     ]
    },
    "numpy.asarray": {
     "line number": [
      732
     ]
    },
    "numpy.where": {
     "line number": [
      743
     ]
    },
    "numpy.zeros": {
     "line number": [
      738
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.bytes": {
  "data": {
   "lineno": 88
  },
  "type": "function"
 },
 "dipy.tracking.metrics.center_of_mass": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      189
     ]
    },
    "numpy.asarray": {
     "line number": [
      187
     ]
    },
    "numpy.mean": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.tracking.metrics.downsample": {
  "data": {
   "lineno": 762,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      807,
      814,
      816
     ]
    },
    "dipy.tracking.metrics._extrap": {
     "line number": [
      823
     ]
    },
    "dipy.tracking.metrics.length": {
     "line number": [
      811
     ]
    },
    "numpy.abs": {
     "line number": [
      820
     ]
    },
    "numpy.arange": {
     "line number": [
      819
     ]
    },
    "numpy.array": {
     "line number": [
      824
     ]
    },
    "numpy.asarray": {
     "line number": [
      804
     ]
    },
    "numpy.finfo": {
     "line number": [
      820
     ]
    },
    "numpy.vstack": {
     "line number": [
      824
     ]
    },
    "numpy.zeros": {
     "line number": [
      810
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.endpoint": {
  "data": {
   "lineno": 674
  },
  "type": "function"
 },
 "dipy.tracking.metrics.frenet_serret": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      266
     ]
    },
    "dipy.tracking.metrics.magn": {
     "line number": [
      271,
      275,
      279,
      279
     ]
    },
    "numpy.asarray": {
     "line number": [
      263
     ]
    },
    "numpy.cross": {
     "line number": [
      277,
      279
     ]
    },
    "numpy.divide": {
     "line number": [
      271,
      275
     ]
    },
    "numpy.gradient": {
     "line number": [
      268,
      269,
      273
     ]
    },
    "numpy.sum": {
     "line number": [
      282
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.generate_combinations": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "len": {
     "line number": [
      382,
      383,
      387
     ]
    },
    "range": {
     "line number": [
      382,
      383,
      387
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.inside_sphere": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": {
    "numpy.sqrt": {
     "line number": [
      537
     ]
    },
    "numpy.sum": {
     "line number": [
      537
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.inside_sphere_points": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": {
    "numpy.sqrt": {
     "line number": [
      570
     ]
    },
    "numpy.sum": {
     "line number": [
      570
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.intersect_sphere": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      486
     ]
    },
    "float": {
     "line number": [
      486
     ]
    },
    "numpy.array": {
     "line number": [
      467
     ]
    },
    "numpy.finfo": {
     "line number": [
      486
     ]
    },
    "numpy.inner": {
     "line number": [
      479,
      481,
      482,
      482,
      482,
      494,
      503,
      503
     ]
    },
    "numpy.sqrt": {
     "line number": [
      497,
      499
     ]
    },
    "range": {
     "line number": [
      472
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.length": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      80
     ]
    },
    "numpy.asarray": {
     "line number": [
      77
     ]
    },
    "numpy.cumsum": {
     "line number": [
      84
     ]
    },
    "numpy.diff": {
     "line number": [
      82
     ]
    },
    "numpy.sqrt": {
     "line number": [
      82
     ]
    },
    "numpy.sum": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.longest_track_bundle": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": {
    "dipy.tracking.metrics.length": {
     "line number": [
      424
     ]
    },
    "numpy.array": {
     "line number": [
      425
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.magn": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": {
    "float": {
     "line number": [
      199
     ]
    },
    "len": {
     "line number": [
      203
     ]
    },
    "numpy.finfo": {
     "line number": [
      199
     ]
    },
    "numpy.sum": {
     "line number": [
      197
     ]
    },
    "numpy.tile": {
     "line number": [
      202
     ]
    },
    "numpy.where": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.mean_curvature": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      321
     ]
    },
    "dipy.tracking.metrics.magn": {
     "line number": [
      327,
      327
     ]
    },
    "numpy.asarray": {
     "line number": [
      318
     ]
    },
    "numpy.cross": {
     "line number": [
      327
     ]
    },
    "numpy.gradient": {
     "line number": [
      323,
      324
     ]
    },
    "numpy.mean": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.mean_orientation": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      349
     ]
    },
    "numpy.asarray": {
     "line number": [
      346
     ]
    },
    "numpy.gradient": {
     "line number": [
      351
     ]
    },
    "numpy.mean": {
     "line number": [
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.midpoint": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      147
     ]
    },
    "dipy.tracking.metrics.length": {
     "line number": [
      151
     ]
    },
    "numpy.asarray": {
     "line number": [
      144
     ]
    },
    "numpy.where": {
     "line number": [
      153
     ]
    },
    "numpy.zeros": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.midpoint2point": {
  "data": {
   "lineno": 860,
   "symbols_in_volume": {
    "dipy.tracking.metrics.midpoint": {
     "line number": [
      888
     ]
    },
    "numpy.sqrt": {
     "line number": [
      889
     ]
    },
    "numpy.sum": {
     "line number": [
      889
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.metrics.principal_components": {
  "data": {
   "lineno": 827,
   "symbols_in_volume": {
    "numpy.cov": {
     "line number": [
      855
     ]
    },
    "numpy.linalg.eig": {
     "line number": [
      856
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.tracking.metrics.splev": {
  "data": {
   "shadows": "scipy.interpolate.splev"
  },
  "type": "import"
 },
 "dipy.tracking.metrics.spline": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      640
     ]
    },
    "numpy.vstack": {
     "line number": [
      641
     ]
    },
    "scipy.interpolate.splev": {
     "line number": [
      640
     ]
    },
    "scipy.interpolate.splprep": {
     "line number": [
      638
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.metrics.splprep": {
  "data": {
   "shadows": "scipy.interpolate.splprep"
  },
  "type": "import"
 },
 "dipy.tracking.metrics.startpoint": {
  "data": {
   "lineno": 644
  },
  "type": "function"
 },
 "dipy.tracking.metrics.winding": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "len": {
     "line number": [
      30
     ]
    },
    "numpy.arccos": {
     "line number": [
      35
     ]
    },
    "numpy.clip": {
     "line number": [
      34
     ]
    },
    "numpy.diag": {
     "line number": [
      27
     ]
    },
    "numpy.dot": {
     "line number": [
      27,
      33
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      33,
      33
     ]
    },
    "numpy.linalg.svd": {
     "line number": [
      26
     ]
    },
    "numpy.mean": {
     "line number": [
      26
     ]
    },
    "numpy.rad2deg": {
     "line number": [
      38
     ]
    },
    "range": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking.streamline.Streamlines": {
  "data": {
   "shadows": "nibabel.streamlines.ArraySequence"
  },
  "type": "import"
 },
 "dipy.tracking.streamline._extract_vals": {
  "data": {
   "lineno": 597,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      661
     ]
    },
    "dipy.core.interpolation.interpolate_scalar_3d": {
     "line number": [
      640,
      656
     ]
    },
    "dipy.core.interpolation.interpolate_vector_3d": {
     "line number": [
      637,
      654
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      632
     ]
    },
    "dipy.tracking.streamline.types": {
     "line number": [
      630
     ]
    },
    "isinstance": {
     "line number": [
      629,
      630,
      631,
      643
     ]
    },
    "list": {
     "line number": [
      629,
      637,
      640
     ]
    },
    "nibabel.streamlines.ArraySequence": {
     "line number": [
      631
     ]
    },
    "numpy.array": {
     "line number": [
      654,
      656
     ]
    },
    "numpy.dot": {
     "line number": [
      649
     ]
    },
    "numpy.float": {
     "line number": [
      628,
      638,
      641,
      646
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      633,
      648
     ]
    },
    "numpy.ndarray": {
     "line number": [
      643
     ]
    },
    "numpy.reshape": {
     "line number": [
      657,
      659
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline._orient_by_roi_generator": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      411
     ]
    },
    "numpy.argmin": {
     "line number": [
      414,
      415
     ]
    },
    "scipy.spatial.distance.cdist": {
     "line number": [
      412,
      413
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline._orient_by_roi_list": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      432
     ]
    },
    "numpy.argmin": {
     "line number": [
      435,
      436
     ]
    },
    "scipy.spatial.distance.cdist": {
     "line number": [
      433,
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline._orient_by_sl_generator": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      524
     ]
    },
    "numpy.sqrt": {
     "line number": [
      525,
      526
     ]
    },
    "numpy.sum": {
     "line number": [
      525,
      525,
      526,
      526
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline._orient_by_sl_list": {
  "data": {
   "lineno": 533,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      535
     ]
    },
    "numpy.sqrt": {
     "line number": [
      536,
      537
     ]
    },
    "numpy.sum": {
     "line number": [
      536,
      536,
      537,
      537
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.apply_affine": {
  "data": {
   "shadows": "nibabel.affines.apply_affine"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.bundles_distances_mdf": {
  "data": {
   "shadows": "dipy.tracking.distances.bundles_distances_mdf"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.cdist": {
  "data": {
   "shadows": "scipy.spatial.distance.cdist"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.center_streamlines": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      87
     ]
    },
    "numpy.mean": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.cluster_confidence": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      383,
      395
     ]
    },
    "dipy.tracking.distances.bundles_distances_mdf": {
     "line number": [
      393
     ]
    },
    "dipy.tracking.streamlinespeed.length": {
     "line number": [
      381
     ]
    },
    "dipy.tracking.streamlinespeed.set_number_of_points": {
     "line number": [
      388
     ]
    },
    "enumerate": {
     "line number": [
      392
     ]
    },
    "len": {
     "line number": [
      390
     ]
    },
    "list": {
     "line number": [
      381
     ]
    },
    "min": {
     "line number": [
      382
     ]
    },
    "numpy.divide": {
     "line number": [
      398
     ]
    },
    "numpy.isnan": {
     "line number": [
      396
     ]
    },
    "numpy.power": {
     "line number": [
      398
     ]
    },
    "numpy.sum": {
     "line number": [
      398
     ]
    },
    "numpy.zeros": {
     "line number": [
      390
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.compress_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamlinespeed.compress_streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.deform_streamlines": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      121
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      123,
      127,
      131,
      133
     ]
    },
    "dipy.tracking.streamline.values_from_volume": {
     "line number": [
      125
     ]
    },
    "numpy.eye": {
     "line number": [
      126
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      132,
      134
     ]
    },
    "sum": {
     "line number": [
      129
     ]
    },
    "zip": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.dist_to_corner": {
  "data": {
   "shadows": "dipy.core.geometry.dist_to_corner"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.interpolate_scalar_3d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_scalar_3d"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.interpolate_vector_3d": {
  "data": {
   "shadows": "dipy.core.interpolation.interpolate_vector_3d"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.length": {
  "data": {
   "shadows": "dipy.tracking.streamlinespeed.length"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.nbytes": {
  "data": {
   "lineno": 727
  },
  "type": "function"
 },
 "dipy.tracking.streamline.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.orient_by_rois": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      505
     ]
    },
    "bool": {
     "line number": [
      495,
      497
     ]
    },
    "copy.deepcopy": {
     "line number": [
      517
     ]
    },
    "dipy.tracking.streamline._orient_by_roi_generator": {
     "line number": [
      506
     ]
    },
    "dipy.tracking.streamline._orient_by_roi_list": {
     "line number": [
      519
     ]
    },
    "dipy.tracking.streamline.types": {
     "line number": [
      510
     ]
    },
    "isinstance": {
     "line number": [
      510
     ]
    },
    "len": {
     "line number": [
      494,
      496
     ]
    },
    "nibabel.affines.apply_affine": {
     "line number": [
      499,
      500
     ]
    },
    "nibabel.streamlines.ArraySequence": {
     "line number": [
      511
     ]
    },
    "numpy.asarray": {
     "line number": [
      495,
      497
     ]
    },
    "numpy.where": {
     "line number": [
      495,
      497
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.orient_by_streamline": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      580
     ]
    },
    "copy.deepcopy": {
     "line number": [
      592
     ]
    },
    "dipy.tracking.streamline._orient_by_sl_generator": {
     "line number": [
      581
     ]
    },
    "dipy.tracking.streamline._orient_by_sl_list": {
     "line number": [
      594
     ]
    },
    "dipy.tracking.streamline.types": {
     "line number": [
      585
     ]
    },
    "dipy.tracking.streamlinespeed.set_number_of_points": {
     "line number": [
      574,
      575
     ]
    },
    "isinstance": {
     "line number": [
      585
     ]
    },
    "nibabel.streamlines.ArraySequence": {
     "line number": [
      586
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.relist_streamlines": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "len": {
     "line number": [
      65
     ]
    },
    "range": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.select_by_rois": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "dipy.core.geometry.dist_to_corner": {
     "line number": [
      302,
      307
     ]
    },
    "dipy.tracking.utils.reduce_rois": {
     "line number": [
      310
     ]
    },
    "dipy.tracking.utils.streamline_near_roi": {
     "line number": [
      319,
      321
     ]
    },
    "nibabel.affines.apply_affine": {
     "line number": [
      312,
      314
     ]
    },
    "numpy.array": {
     "line number": [
      311,
      313
     ]
    },
    "numpy.where": {
     "line number": [
      311,
      313
     ]
    },
    "warnings.warn": {
     "line number": [
      308
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.select_random_set_of_streamlines": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      195
     ]
    },
    "len": {
     "line number": [
      191
     ]
    },
    "min": {
     "line number": [
      194
     ]
    },
    "nibabel.streamlines.ArraySequence": {
     "line number": [
      195
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamlinespeed.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.transform_streamlines": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      157
     ]
    },
    "nibabel.affines.apply_affine": {
     "line number": [
      159,
      162,
      165
     ]
    },
    "nibabel.streamlines.ArraySequence": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.unlist_streamlines": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      37
     ]
    },
    "len": {
     "line number": [
      34
     ]
    },
    "numpy.concatenate": {
     "line number": [
      33
     ]
    },
    "numpy.zeros": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.ut": {
  "data": {
   "shadows": "dipy.tracking.utils"
  },
  "type": "import"
 },
 "dipy.tracking.streamline.values_from_volume": {
  "data": {
   "lineno": 668,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      724
     ]
    },
    "dipy.tracking.streamline._extract_vals": {
     "line number": [
      703,
      708,
      722
     ]
    },
    "dipy.tracking.streamline.types": {
     "line number": [
      704
     ]
    },
    "isinstance": {
     "line number": [
      704,
      710
     ]
    },
    "len": {
     "line number": [
      701,
      714,
      721
     ]
    },
    "nibabel.streamlines.ArraySequence": {
     "line number": [
      705
     ]
    },
    "numpy.array": {
     "line number": [
      711,
      718
     ]
    },
    "numpy.asarray": {
     "line number": [
      700
     ]
    },
    "numpy.ndarray": {
     "line number": [
      710
     ]
    },
    "numpy.swapaxes": {
     "line number": [
      711
     ]
    },
    "range": {
     "line number": [
      707,
      714,
      716
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.streamline.warn": {
  "data": {
   "shadows": "warnings.warn"
  },
  "type": "import"
 },
 "dipy.tracking.test": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "dipy.tracking.tests": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.Tester": {
     "line number": [
      3,
      4
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.tracking.tests.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "dipy.tracking.tests.test_distances": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking.tests.test_distances.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.pf": {
  "data": {
   "shadows": "dipy.tracking.distances"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamline.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_distances.test_LSCv2": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      65
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      66
     ]
    },
    "dipy.tracking.distances.local_skeleton_clustering": {
     "line number": [
      23,
      41,
      60,
      73
     ]
    },
    "dipy.tracking.distances.local_skeleton_clustering_3pts": {
     "line number": [
      28,
      47
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      69
     ]
    },
    "len": {
     "line number": [
      44,
      50,
      63,
      71,
      75
     ]
    },
    "numpy.array": {
     "line number": [
      14,
      15,
      16,
      17,
      19,
      20
     ]
    },
    "numpy.random.rand": {
     "line number": [
      36,
      57
     ]
    },
    "numpy.sum": {
     "line number": [
      53
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      53
     ]
    },
    "print": {
     "line number": [
      43,
      44,
      49,
      50,
      62,
      63,
      71,
      75
     ]
    },
    "range": {
     "line number": [
      35,
      56
     ]
    },
    "time.time": {
     "line number": [
      40,
      42,
      46,
      48,
      59,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_distances.test_approx_ei_traj": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "dipy.tracking.distances.approx_polygon_track": {
     "line number": [
      188
     ]
    },
    "len": {
     "line number": [
      189
     ]
    },
    "numpy.linspace": {
     "line number": [
      183
     ]
    },
    "numpy.pi": {
     "line number": [
      183
     ]
    },
    "numpy.sin": {
     "line number": [
      185
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      189
     ]
    },
    "numpy.vstack": {
     "line number": [
      187
     ]
    },
    "numpy.zeros": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_distances.test_approx_mdl_traj": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "dipy.tracking.distances.approximate_mdl_trajectory": {
     "line number": [
      199,
      200
     ]
    },
    "len": {
     "line number": [
      201,
      202
     ]
    },
    "numpy.array": {
     "line number": [
      205,
      218
     ]
    },
    "numpy.cos": {
     "line number": [
      196
     ]
    },
    "numpy.linspace": {
     "line number": [
      194
     ]
    },
    "numpy.pi": {
     "line number": [
      194
     ]
    },
    "numpy.sin": {
     "line number": [
      195
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      203,
      216
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      201,
      202
     ]
    },
    "numpy.vstack": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_distances.test_bundles_distances_mam": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "dipy.tracking.distances.bundles_distances_mam": {
     "line number": [
      124
     ]
    },
    "numpy.array": {
     "line number": [
      116,
      118,
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_distances.test_bundles_distances_mdf": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "dipy.tracking.distances.bundles_distances_mdf": {
     "line number": [
      135,
      140,
      146
     ]
    },
    "enumerate": {
     "line number": [
      151,
      152
     ]
    },
    "numpy.array": {
     "line number": [
      128,
      129,
      130,
      131
     ]
    },
    "numpy.min": {
     "line number": [
      155
     ]
    },
    "numpy.sqrt": {
     "line number": [
      153,
      154
     ]
    },
    "numpy.sum": {
     "line number": [
      153,
      153,
      154,
      154
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      141,
      165
     ]
    },
    "numpy.zeros": {
     "line number": [
      141,
      150
     ]
    },
    "print": {
     "line number": [
      147,
      156,
      158,
      160,
      161,
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_distances.test_cut_plane": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "dipy.tracking.distances.cut_plane": {
     "line number": [
      288,
      293,
      297
     ]
    },
    "numpy.array": {
     "line number": [
      274,
      275,
      276,
      277,
      278
     ]
    },
    "numpy.asarray": {
     "line number": [
      292,
      296
     ]
    },
    "numpy.dtype": {
     "line number": [
      273
     ]
    },
    "numpy.float32": {
     "line number": [
      273
     ]
    },
    "numpy.float64": {
     "line number": [
      292,
      296
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      289,
      290,
      294,
      295,
      298,
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_distances.test_mam_distances": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "dipy.tracking.distances.mam_distances": {
     "line number": [
      176
     ]
    },
    "numpy.array": {
     "line number": [
      169,
      170
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_distances.test_minimum_distance": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": {
    "dipy.tracking.distances.minimum_closest_distance": {
     "line number": [
      256
     ]
    },
    "numpy.array": {
     "line number": [
      254,
      255
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_distances.test_most_similar_mam": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": {
    "dipy.tracking.distances.most_similar_track_mam": {
     "line number": [
      269
     ]
    },
    "numpy.array": {
     "line number": [
      260,
      262,
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_distances.test_point_track_sq_distance": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "dipy.tracking.distances.point_track_sq_distance_check": {
     "line number": [
      232,
      233,
      236,
      238
     ]
    },
    "numpy.array": {
     "line number": [
      230,
      231,
      234,
      235,
      237
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      232,
      236,
      238
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_distances.test_track_roi_intersection_check": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": {
    "dipy.tracking.distances.track_roi_intersection_check": {
     "line number": [
      244,
      246,
      248,
      250
     ]
    },
    "numpy.array": {
     "line number": [
      242,
      243,
      245,
      247,
      249
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      244,
      246,
      248,
      250
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_distances.time": {
  "data": {
   "shadows": "time.time"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_fbc": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      47
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.tracking.tests.test_fbc.EnhancementKernel": {
  "data": {
   "shadows": "dipy.denoise.enhancement_kernel.EnhancementKernel"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_fbc.FBCMeasures": {
  "data": {
   "shadows": "dipy.tracking.fbcmeasures.FBCMeasures"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_fbc.Sphere": {
  "data": {
   "shadows": "dipy.core.sphere.Sphere"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_fbc.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_fbc.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_fbc.test_fbc": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "dipy.core.sphere.Sphere": {
     "line number": [
      29
     ]
    },
    "dipy.denoise.enhancement_kernel.EnhancementKernel": {
     "line number": [
      34
     ]
    },
    "dipy.tracking.fbcmeasures.FBCMeasures": {
     "line number": [
      38
     ]
    },
    "numpy.array": {
     "line number": [
      29
     ]
    },
    "numpy.mean": {
     "line number": [
      45
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      45
     ]
    },
    "numpy.zeros": {
     "line number": [
      17
     ]
    },
    "range": {
     "line number": [
      16,
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_learning": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking.tests.test_learning.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_learning.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_learning.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_learning.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_learning.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_learning.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_learning.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_learning.td": {
  "data": {
   "shadows": "dipy.tracking.distances"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_learning.test_det_corr_tracks": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "dipy.tracking.learning.detect_corresponding_tracks": {
     "line number": [
      25
     ]
    },
    "dipy.tracking.learning.detect_corresponding_tracks_plus": {
     "line number": [
      30
     ]
    },
    "numpy.array": {
     "line number": [
      14,
      15,
      16,
      27
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      27,
      33
     ]
    },
    "print": {
     "line number": [
      21,
      22,
      23,
      26,
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_learning.tl": {
  "data": {
   "shadows": "dipy.tracking.learning"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_learning.tm": {
  "data": {
   "shadows": "dipy.tracking.metrics"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life": {
  "data": {
   "symbols_in_volume": {
    "os.path.dirname": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.tracking.tests.test_life.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.THIS_DIR": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "dipy.tracking.tests.test_life.dpd": {
  "data": {
   "shadows": "dipy.data"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.grad": {
  "data": {
   "shadows": "dipy.core.gradients"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.la": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.life": {
  "data": {
   "shadows": "dipy.tracking.life"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.op": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.opt": {
  "data": {
   "shadows": "dipy.core.optimize"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_life.test_FiberFit": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      123
     ]
    },
    "dipy.core.optimize.spdot": {
     "line number": [
      133
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      120
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      122
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      121
     ]
    },
    "dipy.tracking.life.FiberModel": {
     "line number": [
      124
     ]
    },
    "numpy.array": {
     "line number": [
      132
     ]
    },
    "numpy.concatenate": {
     "line number": [
      141
     ]
    },
    "numpy.eye": {
     "line number": [
      130,
      143
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      144,
      148,
      151
     ]
    },
    "numpy.zeros": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_life.test_FiberModel_init": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      101
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      99
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      109
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      100
     ]
    },
    "dipy.tracking.life.FiberModel": {
     "line number": [
      102
     ]
    },
    "len": {
     "line number": [
      115,
      116
     ]
    },
    "numpy.array": {
     "line number": [
      111,
      112
     ]
    },
    "numpy.eye": {
     "line number": [
      107
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      111
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_life.test_fit_data": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      159
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      157,
      158
     ]
    },
    "dipy.data.matlab_life_results": {
     "line number": [
      172
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      164
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      164
     ]
    },
    "dipy.tracking.life.FiberModel": {
     "line number": [
      168
     ]
    },
    "nibabel.load": {
     "line number": [
      160
     ]
    },
    "nibabel.streamlines.load": {
     "line number": [
      163
     ]
    },
    "numpy.corrcoef": {
     "line number": [
      176
     ]
    },
    "numpy.eye": {
     "line number": [
      169
     ]
    },
    "numpy.mean": {
     "line number": [
      171
     ]
    },
    "numpy.median": {
     "line number": [
      174,
      174
     ]
    },
    "numpy.sqrt": {
     "line number": [
      171
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      174,
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_life.test_streamline_gradients": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "dipy.tracking.life.streamline_gradients": {
     "line number": [
      21
     ]
    },
    "numpy.array": {
     "line number": [
      20
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_life.test_streamline_signal": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      63
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      62
     ]
    },
    "dipy.tracking.life.streamline_signal": {
     "line number": [
      68,
      72
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_life.test_streamline_tensors": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "dipy.tracking.life.streamline_tensors": {
     "line number": [
      29,
      47
     ]
    },
    "numpy.arccos": {
     "line number": [
      53,
      55,
      57
     ]
    },
    "numpy.argsort": {
     "line number": [
      37,
      38,
      51
     ]
    },
    "numpy.array": {
     "line number": [
      31,
      41,
      44
     ]
    },
    "numpy.dot": {
     "line number": [
      54,
      56,
      58
     ]
    },
    "numpy.rad2deg": {
     "line number": [
      53,
      55,
      57
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      53,
      55,
      57
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      30,
      40,
      43
     ]
    },
    "scipy.linalg.eig": {
     "line number": [
      36,
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_life.test_voxel2streamline": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "dipy.tracking.life.transform_streamlines": {
     "line number": [
      90
     ]
    },
    "dipy.tracking.life.voxel2streamline": {
     "line number": [
      81,
      91
     ]
    },
    "numpy.array": {
     "line number": [
      85
     ]
    },
    "numpy.eye": {
     "line number": [
      80
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      90
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      82,
      83,
      92,
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_metrics": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking.tests.test_metrics.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_metrics.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_metrics.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_metrics.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_metrics.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_metrics.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_metrics.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_metrics.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_metrics.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_metrics.pf": {
  "data": {
   "shadows": "dipy.tracking.distances"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_metrics.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_metrics.test_add_sub_3vecs": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "dipy.tracking.distances.add_3vecs": {
     "line number": [
      199,
      202
     ]
    },
    "dipy.tracking.distances.sub_3vecs": {
     "line number": [
      198,
      201
     ]
    },
    "numpy.array": {
     "line number": [
      196,
      197
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      198,
      199,
      201,
      202
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_metrics.test_downsample": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "dipy.tracking.metrics.downsample": {
     "line number": [
      134,
      141
     ]
    },
    "len": {
     "line number": [
      136,
      142
     ]
    },
    "numpy.array": {
     "line number": [
      14,
      139
     ]
    },
    "numpy.float32": {
     "line number": [
      131
     ]
    },
    "numpy.sum": {
     "line number": [
      143
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      136,
      143
     ]
    },
    "range": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_metrics.test_inner_3vecs": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "dipy.tracking.distances.inner_3vecs": {
     "line number": [
      190,
      192
     ]
    },
    "numpy.inner": {
     "line number": [
      190,
      192
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      190,
      192
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_metrics.test_normalized_3vec": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "dipy.tracking.distances.norm_3vec": {
     "line number": [
      179
     ]
    },
    "dipy.tracking.distances.normalized_3vec": {
     "line number": [
      180,
      184
     ]
    },
    "numpy.array": {
     "line number": [
      181,
      182
     ]
    },
    "numpy.dot": {
     "line number": [
      178
     ]
    },
    "numpy.sqrt": {
     "line number": [
      178
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      179,
      181
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      183,
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_metrics.test_segment_intersection": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "dipy.tracking.metrics.intersect_sphere": {
     "line number": [
      165,
      169,
      173
     ]
    },
    "numpy.array": {
     "line number": [
      162,
      166,
      170
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      165,
      169,
      173
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_metrics.test_splines": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "dipy.tracking.metrics.spline": {
     "line number": [
      158
     ]
    },
    "numpy.cos": {
     "line number": [
      150
     ]
    },
    "numpy.linspace": {
     "line number": [
      148
     ]
    },
    "numpy.pi": {
     "line number": [
      148
     ]
    },
    "numpy.random.normal": {
     "line number": [
      153,
      154,
      155
     ]
    },
    "numpy.sin": {
     "line number": [
      149
     ]
    },
    "numpy.vstack": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_metrics.test_winding": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "dipy.tracking.metrics.winding": {
     "line number": [
      222
     ]
    },
    "numpy.array": {
     "line number": [
      206
     ]
    },
    "numpy.float32": {
     "line number": [
      221
     ]
    },
    "numpy.isnan": {
     "line number": [
      222
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_metrics.tm": {
  "data": {
   "shadows": "dipy.tracking.metrics"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_propagation": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      54
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.tracking.tests.test_propagation.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_propagation.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_propagation.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_propagation.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_propagation.eudx_both_directions": {
  "data": {
   "shadows": "dipy.tracking.propspeed.eudx_both_directions"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_propagation.ndarray_offset": {
  "data": {
   "shadows": "dipy.tracking.propspeed.ndarray_offset"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_propagation.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_propagation.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_propagation.stepped_1d": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "numpy.vstack": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_propagation.test_eudx_both_directions_errors": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      40,
      43,
      46,
      49
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      34
     ]
    },
    "dipy.tracking.propspeed.eudx_both_directions": {
     "line number": [
      40,
      43,
      46,
      49
     ]
    },
    "dipy.tracking.tests.test_propagation.stepped_1d": {
     "line number": [
      41
     ]
    },
    "numpy.float64": {
     "line number": [
      35,
      36
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      40,
      43,
      46,
      49
     ]
    },
    "numpy.zeros": {
     "line number": [
      35,
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_propagation.test_offset": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      26,
      28
     ]
    },
    "dipy.tracking.propspeed.ndarray_offset": {
     "line number": [
      22,
      26,
      28
     ]
    },
    "dipy.tracking.tests.test_propagation.stepped_1d": {
     "line number": [
      27,
      29
     ]
    },
    "numpy.array": {
     "line number": [
      18,
      19,
      20
     ]
    },
    "numpy.float64": {
     "line number": [
      17
     ]
    },
    "numpy.int32": {
     "line number": [
      17
     ]
    },
    "numpy.intp": {
     "line number": [
      18,
      20
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      22,
      23
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      26,
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_stopping_criterion": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      208
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      209
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.tracking.tests.test_stopping_criterion.ActStoppingCriterion": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.ActStoppingCriterion"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_stopping_criterion.BinaryStoppingCriterion": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.BinaryStoppingCriterion"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_stopping_criterion.CmcStoppingCriterion": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.CmcStoppingCriterion"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_stopping_criterion.StreamlineStatus": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.StreamlineStatus"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_stopping_criterion.ThresholdStoppingCriterion": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.ThresholdStoppingCriterion"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_stopping_criterion.ndindex": {
  "data": {
   "shadows": "dipy.core.ndindex.ndindex"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_stopping_criterion.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_stopping_criterion.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_stopping_criterion.scipy.ndimage": {
  "data": {
   "shadows": "scipy.ndimage"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_stopping_criterion.test_act_stopping_criterion": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "dipy.core.ndindex.ndindex": {
     "line number": [
      120
     ]
    },
    "dipy.tracking.stopping_criterion.ActStoppingCriterion": {
     "line number": [
      117
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.ENDPOINT": {
     "line number": [
      126,
      144
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.INVALIDPOINT": {
     "line number": [
      124,
      142
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.OUTSIDEIMAGE": {
     "line number": [
      154
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.TRACKPOINT": {
     "line number": [
      128,
      146
     ]
    },
    "int": {
     "line number": [
      124,
      126,
      128,
      142,
      144,
      146,
      154
     ]
    },
    "numpy.array": {
     "line number": [
      121,
      135,
      152
     ]
    },
    "numpy.random.random": {
     "line number": [
      109,
      110,
      111
     ]
    },
    "numpy.reshape": {
     "line number": [
      138,
      140
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      124,
      126,
      128,
      142,
      144,
      146,
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_stopping_criterion.test_binary_stopping_criterion": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "dipy.core.ndindex.ndindex": {
     "line number": [
      26,
      38
     ]
    },
    "dipy.tracking.stopping_criterion.BinaryStoppingCriterion": {
     "line number": [
      22,
      23
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.ENDPOINT": {
     "line number": [
      34,
      35,
      49,
      50
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.OUTSIDEIMAGE": {
     "line number": [
      59,
      60
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.TRACKPOINT": {
     "line number": [
      31,
      32,
      45,
      47
     ]
    },
    "int": {
     "line number": [
      31,
      32,
      34,
      35,
      45,
      47,
      49,
      50,
      59,
      60
     ]
    },
    "numpy.array": {
     "line number": [
      27,
      40,
      56
     ]
    },
    "numpy.random.random": {
     "line number": [
      19,
      40
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      31,
      32,
      34,
      35,
      44,
      46,
      49,
      50,
      59,
      60
     ]
    },
    "range": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_stopping_criterion.test_cmc_stopping_criterion": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "dipy.core.ndindex.ndindex": {
     "line number": [
      187
     ]
    },
    "dipy.tracking.stopping_criterion.CmcStoppingCriterion": {
     "line number": [
      168
     ]
    },
    "dipy.tracking.stopping_criterion.CmcStoppingCriterion.from_pve": {
     "line number": [
      172
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.ENDPOINT": {
     "line number": [
      193
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.INVALIDPOINT": {
     "line number": [
      191
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.OUTSIDEIMAGE": {
     "line number": [
      203
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.TRACKPOINT": {
     "line number": [
      195
     ]
    },
    "int": {
     "line number": [
      191,
      193,
      195,
      203
     ]
    },
    "numpy.array": {
     "line number": [
      162,
      163,
      164,
      188,
      201
     ]
    },
    "numpy.asarray": {
     "line number": [
      180
     ]
    },
    "numpy.ndindex": {
     "line number": [
      179
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      181,
      183
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      191,
      193,
      195,
      202,
      204,
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_stopping_criterion.test_threshold_stopping_criterion": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "dipy.core.ndindex.ndindex": {
     "line number": [
      73
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.ENDPOINT": {
     "line number": [
      79,
      93
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.OUTSIDEIMAGE": {
     "line number": [
      101
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.TRACKPOINT": {
     "line number": [
      77,
      91
     ]
    },
    "dipy.tracking.stopping_criterion.ThresholdStoppingCriterion": {
     "line number": [
      70
     ]
    },
    "int": {
     "line number": [
      77,
      79,
      91,
      93,
      101
     ]
    },
    "numpy.array": {
     "line number": [
      74,
      86,
      99
     ]
    },
    "numpy.random.random": {
     "line number": [
      68
     ]
    },
    "numpy.reshape": {
     "line number": [
      89
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      77,
      79,
      91,
      93,
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      1255
     ]
    },
    "dipy.tracking.tests.test_streamline.streamline": {
     "line number": [
      154,
      156,
      156,
      157,
      157,
      158,
      158
     ]
    },
    "dipy.tracking.tests.test_streamline.streamline_64bit": {
     "line number": [
      159,
      159,
      160,
      160,
      161,
      161,
      163,
      164,
      165
     ]
    },
    "numpy.array": {
     "line number": [
      34
     ]
    },
    "numpy.float32": {
     "line number": [
      152
     ]
    },
    "numpy.float64": {
     "line number": [
      154
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      1256
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.tracking.tests.test_streamline.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.assert_arrays_equal": {
  "data": {
   "shadows": "dipy.testing.assert_arrays_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.center_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.center_streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.cluster_confidence": {
  "data": {
   "shadows": "dipy.tracking.streamline.cluster_confidence"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.compress_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.compress_streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.compress_streamlines_python": {
  "data": {
   "lineno": 590,
   "symbols_in_volume": {
    "dipy.tracking.tests.test_streamline.streamline": {
     "line number": [
      596,
      597,
      608,
      611,
      613,
      616,
      619,
      621,
      626,
      631,
      633,
      638
     ]
    },
    "dist_to_line": {
     "line number": [
      628
     ]
    },
    "enumerate": {
     "line number": [
      616,
      626
     ]
    },
    "next": {
     "line number": [
      616,
      618,
      628
     ]
    },
    "numpy.isnan": {
     "line number": [
      630
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      608
     ]
    },
    "segment_length": {
     "line number": [
      618
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.compress_streamlines_python.dist_to_line": {
  "data": {
   "lineno": 604,
   "symbols_in_volume": {
    "next": {
     "line number": [
      605,
      605,
      605
     ]
    },
    "numpy.cross": {
     "line number": [
      605
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      605,
      605
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.compress_streamlines_python.segment_length": {
  "data": {
   "lineno": 600,
   "symbols_in_volume": {
    "next.sum": {
     "line number": [
      601
     ]
    },
    "numpy.sqrt": {
     "line number": [
      601
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.deform_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.deform_streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.generate_sl": {
  "data": {
   "lineno": 771,
   "symbols_in_volume": {
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      784
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.get_type_refcount": {
  "data": {
   "shadows": "dipy.testing.memory.get_type_refcount"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.heterogeneous_streamlines": {
  "data": {
   "lineno": 163
  },
  "type": "constant"
 },
 "dipy.tracking.tests.test_streamline.length": {
  "data": {
   "shadows": "dipy.tracking.streamline.length"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.length_python": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      172
     ]
    },
    "numpy.asarray": {
     "line number": [
      169
     ]
    },
    "numpy.cumsum": {
     "line number": [
      176
     ]
    },
    "numpy.diff": {
     "line number": [
      174
     ]
    },
    "numpy.float64": {
     "line number": [
      169
     ]
    },
    "numpy.sqrt": {
     "line number": [
      174
     ]
    },
    "numpy.sum": {
     "line number": [
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.norm": {
  "data": {
   "shadows": "numpy.linalg.norm"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.orient_by_rois": {
  "data": {
   "shadows": "dipy.tracking.streamline.orient_by_rois"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.orient_by_streamline": {
  "data": {
   "shadows": "dipy.tracking.streamline.orient_by_streamline"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.relist_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.relist_streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.select_by_rois": {
  "data": {
   "shadows": "dipy.tracking.streamline.select_by_rois"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.select_random_set_of_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.select_random_set_of_streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamline.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.set_number_of_points_python": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "_extrap": {
     "line number": [
      198
     ]
    },
    "dipy.tracking.tests.test_streamline.length_python": {
     "line number": [
      191
     ]
    },
    "numpy.abs": {
     "line number": [
      195
     ]
    },
    "numpy.arange": {
     "line number": [
      194
     ]
    },
    "numpy.array": {
     "line number": [
      199
     ]
    },
    "numpy.finfo": {
     "line number": [
      195
     ]
    },
    "numpy.vstack": {
     "line number": [
      199
     ]
    },
    "numpy.zeros": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.set_number_of_points_python._extrap": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": {
    "numpy.where": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.streamline": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "dipy.tracking.tests.test_streamline.streamline_64bit": {
  "data": {
   "lineno": 154
  },
  "type": "constant"
 },
 "dipy.tracking.tests.test_streamline.streamlines": {
  "data": {
   "lineno": 156
  },
  "type": "constant"
 },
 "dipy.tracking.tests.test_streamline.streamlines_64bit": {
  "data": {
   "lineno": 159
  },
  "type": "constant"
 },
 "dipy.tracking.tests.test_streamline.test_center_and_transform": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": {
    "dipy.tracking.streamline.center_streamlines": {
     "line number": [
      567
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      575
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      566,
      567,
      575
     ]
    },
    "numpy.array": {
     "line number": [
      565,
      574
     ]
    },
    "numpy.eye": {
     "line number": [
      572
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      569,
      570,
      576
     ]
    },
    "numpy.zeros": {
     "line number": [
      568
     ]
    },
    "range": {
     "line number": [
      566
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_cluster_confidence": {
  "data": {
   "lineno": 1172,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1178,
      1186
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      1196
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      1176,
      1182,
      1189,
      1210,
      1215,
      1220
     ]
    },
    "dipy.tracking.streamline.cluster_confidence": {
     "line number": [
      1178,
      1179,
      1186,
      1194,
      1227,
      1228,
      1240,
      1249
     ]
    },
    "numpy.arange": {
     "line number": [
      1173,
      1200
     ]
    },
    "numpy.array": {
     "line number": [
      1173,
      1234,
      1235,
      1242
     ]
    },
    "numpy.concatenate": {
     "line number": [
      1251
     ]
    },
    "numpy.power": {
     "line number": [
      1242,
      1242,
      1243,
      1243,
      1244,
      1244
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1231,
      1236,
      1237,
      1246,
      1252
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1195
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1178,
      1186
     ]
    },
    "numpy.zeros": {
     "line number": [
      1199,
      1251
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_compress_streamlines": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": {
    "compress_func": {
     "line number": [
      651,
      658,
      668,
      677,
      683,
      695
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      672
     ]
    },
    "dipy.tracking.streamline.compress_streamlines": {
     "line number": [
      646,
      714
     ]
    },
    "dipy.tracking.tests.test_streamline.compress_streamlines_python": {
     "line number": [
      646,
      726
     ]
    },
    "dipy.tracking.tests.test_streamline.streamline": {
     "line number": [
      683
     ]
    },
    "enumerate": {
     "line number": [
      713
     ]
    },
    "len": {
     "line number": [
      652,
      652,
      659,
      673,
      703,
      722,
      723,
      730,
      730
     ]
    },
    "numpy.all": {
     "line number": [
      672
     ]
    },
    "numpy.array": {
     "line number": [
      648,
      649,
      650,
      686,
      701,
      703
     ]
    },
    "numpy.diff": {
     "line number": [
      670
     ]
    },
    "numpy.errstate": {
     "line number": [
      694
     ]
    },
    "numpy.float32": {
     "line number": [
      702,
      704
     ]
    },
    "numpy.inf": {
     "line number": [
      683,
      688,
      716,
      729
     ]
    },
    "numpy.linspace": {
     "line number": [
      657,
      666,
      700
     ]
    },
    "numpy.sqrt": {
     "line number": [
      670,
      701,
      701
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      731
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      653,
      660,
      674,
      679,
      696,
      719,
      720
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      652,
      659,
      673,
      722,
      730
     ]
    },
    "range": {
     "line number": [
      703
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_compress_streamlines_memory_leaks": {
  "data": {
   "lineno": 734,
   "symbols_in_volume": {
    "dipy.testing.memory.get_type_refcount": {
     "line number": [
      743,
      746,
      762,
      764
     ]
    },
    "dipy.tracking.streamline.compress_streamlines": {
     "line number": [
      745,
      763
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      740,
      745,
      757,
      760,
      763
     ]
    },
    "len": {
     "line number": [
      759
     ]
    },
    "numpy.float32": {
     "line number": [
      736
     ]
    },
    "numpy.float64": {
     "line number": [
      736
     ]
    },
    "numpy.int32": {
     "line number": [
      736
     ]
    },
    "numpy.int64": {
     "line number": [
      736
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      738,
      755
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      752,
      768
     ]
    },
    "range": {
     "line number": [
      741,
      758
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_deform_streamlines": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": {
    "dipy.tracking.streamline.deform_streamlines": {
     "line number": [
      537
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      545,
      550,
      557
     ]
    },
    "dipy.tracking.streamline.values_from_volume": {
     "line number": [
      546
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      537,
      545,
      560
     ]
    },
    "list": {
     "line number": [
      554
     ]
    },
    "numpy.array": {
     "line number": [
      526,
      530
     ]
    },
    "numpy.dot": {
     "line number": [
      534
     ]
    },
    "numpy.eye": {
     "line number": [
      547
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      558
     ]
    },
    "numpy.random.randn": {
     "line number": [
      524,
      526,
      527,
      528,
      530,
      531,
      532
     ]
    },
    "numpy.subtract": {
     "line number": [
      554
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      561
     ]
    },
    "zip": {
     "line number": [
      560
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_length": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      451
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      392,
      396,
      401,
      406,
      412,
      416
     ]
    },
    "dipy.tracking.streamline.length": {
     "line number": [
      366,
      370,
      375,
      382,
      391,
      392,
      395,
      396,
      400,
      401,
      405,
      406,
      411,
      412,
      415,
      416,
      425,
      427,
      431,
      440,
      444,
      447,
      451,
      460,
      467
     ]
    },
    "dipy.tracking.tests.test_streamline.heterogeneous_streamlines": {
     "line number": [
      432,
      434
     ]
    },
    "dipy.tracking.tests.test_streamline.length_python": {
     "line number": [
      367,
      371,
      378,
      385,
      435,
      461,
      468
     ]
    },
    "dipy.tracking.tests.test_streamline.streamline": {
     "line number": [
      366,
      367,
      392,
      421,
      422,
      423,
      424,
      440
     ]
    },
    "dipy.tracking.tests.test_streamline.streamline_64bit": {
     "line number": [
      370,
      371,
      391,
      395,
      396
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      375,
      377,
      400,
      401,
      415,
      416,
      456
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines_64bit": {
     "line number": [
      382,
      384,
      405,
      406,
      411,
      412,
      463
     ]
    },
    "enumerate": {
     "line number": [
      377,
      384,
      434
     ]
    },
    "numpy.array": {
     "line number": [
      447
     ]
    },
    "numpy.float64": {
     "line number": [
      422,
      441
     ]
    },
    "numpy.int32": {
     "line number": [
      423
     ]
    },
    "numpy.int64": {
     "line number": [
      424
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      368,
      372,
      393,
      397
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      379,
      386,
      402,
      407,
      413,
      417,
      436,
      460,
      467
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      427
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      441,
      444,
      447
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      451
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_length_memory_leaks": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": {
    "dipy.testing.memory.get_type_refcount": {
     "line number": [
      480,
      483,
      497,
      500
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      477,
      492,
      495
     ]
    },
    "len": {
     "line number": [
      494
     ]
    },
    "numpy.float32": {
     "line number": [
      473
     ]
    },
    "numpy.float64": {
     "line number": [
      473
     ]
    },
    "numpy.int32": {
     "line number": [
      473
     ]
    },
    "numpy.int64": {
     "line number": [
      473
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      475,
      490
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      487,
      504
     ]
    },
    "range": {
     "line number": [
      478,
      493
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_orient_by_rois": {
  "data": {
   "lineno": 885,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      970
     ]
    },
    "bool": {
     "line number": [
      894
     ]
    },
    "dict": {
     "line number": [
      974
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      886,
      905,
      908,
      919,
      944,
      955,
      966
     ]
    },
    "dipy.tracking.streamline.orient_by_rois": {
     "line number": [
      909,
      920,
      929,
      937,
      948,
      959,
      970,
      978,
      988
     ]
    },
    "dipy.tracking.tests.test_streamline.generate_sl": {
     "line number": [
      959,
      970,
      978
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      886,
      905,
      908,
      908,
      909,
      916,
      937,
      959,
      970,
      978,
      988,
      996
     ]
    },
    "dipy.tracking.tests.test_streamline.types": {
     "line number": [
      943,
      954,
      965,
      984
     ]
    },
    "isinstance": {
     "line number": [
      943,
      954,
      965,
      984
     ]
    },
    "numpy.array": {
     "line number": [
      886,
      889,
      898,
      899
     ]
    },
    "numpy.eye": {
     "line number": [
      902,
      909,
      937,
      959,
      971,
      978,
      988
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      916,
      926,
      943,
      954,
      965,
      984,
      996
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      914,
      925,
      934,
      945,
      956,
      967,
      985,
      994
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      970
     ]
    },
    "numpy.where": {
     "line number": [
      898,
      899
     ]
    },
    "numpy.zeros": {
     "line number": [
      894
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      895
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_orient_by_streamline": {
  "data": {
   "lineno": 999,
   "symbols_in_volume": {
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      1000,
      1011,
      1016,
      1027,
      1041,
      1051
     ]
    },
    "dipy.tracking.streamline.orient_by_streamline": {
     "line number": [
      1018,
      1028,
      1035,
      1045,
      1055
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      1000,
      1011,
      1013,
      1016,
      1016,
      1018,
      1024,
      1035,
      1055,
      1061
     ]
    },
    "dipy.tracking.tests.test_streamline.types": {
     "line number": [
      1040,
      1050
     ]
    },
    "isinstance": {
     "line number": [
      1040,
      1050
     ]
    },
    "numpy.array": {
     "line number": [
      1000,
      1003
     ]
    },
    "numpy.eye": {
     "line number": [
      1008
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1024,
      1032,
      1040,
      1050,
      1061
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1023,
      1031,
      1042,
      1052,
      1059
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_select_by_rois": {
  "data": {
   "lineno": 788,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      798
     ]
    },
    "dipy.testing.assert_arrays_equal": {
     "line number": [
      806,
      812,
      818,
      826,
      831,
      838,
      843,
      847,
      855,
      861,
      867,
      875,
      881
     ]
    },
    "dipy.tracking.streamline.select_by_rois": {
     "line number": [
      803,
      809,
      815,
      823,
      828,
      835,
      841,
      845,
      851,
      857,
      863,
      870,
      879
     ]
    },
    "dipy.tracking.tests.test_streamline.generate_sl": {
     "line number": [
      879
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      789,
      803,
      806,
      807,
      809,
      812,
      813,
      815,
      818,
      823,
      826,
      828,
      831,
      835,
      838,
      841,
      843,
      845,
      847,
      848,
      851,
      855,
      857,
      861,
      863,
      867,
      870,
      875,
      876,
      879,
      881,
      882
     ]
    },
    "dipy.tracking.tests.test_streamline.warnings": {
     "line number": [
      821,
      822
     ]
    },
    "list": {
     "line number": [
      806,
      812,
      818,
      826,
      831,
      838,
      843,
      847,
      855,
      861,
      867,
      875,
      881
     ]
    },
    "numpy.array": {
     "line number": [
      789,
      791,
      794
     ]
    },
    "numpy.eye": {
     "line number": [
      803,
      809,
      815,
      823,
      828,
      835,
      841,
      845,
      851,
      857,
      863,
      870,
      879
     ]
    },
    "numpy.zeros": {
     "line number": [
      798
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      799,
      833
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_select_random_streamlines": {
  "data": {
   "lineno": 579,
   "symbols_in_volume": {
    "dipy.tracking.streamline.select_random_set_of_streamlines": {
     "line number": [
      583,
      586
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      580,
      583,
      586
     ]
    },
    "len": {
     "line number": [
      584,
      587
     ]
    },
    "numpy.random.rand": {
     "line number": [
      580,
      581,
      582
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      584,
      587
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_set_number_of_points": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      294
     ]
    },
    "ValueError": {
     "line number": [
      290,
      323
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      242,
      256
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      205,
      214,
      225,
      232,
      243,
      247,
      257,
      266,
      272,
      281,
      283,
      287,
      290,
      295,
      300,
      309,
      318,
      323
     ]
    },
    "dipy.tracking.tests.test_streamline.heterogeneous_streamlines": {
     "line number": [
      273,
      275
     ]
    },
    "dipy.tracking.tests.test_streamline.set_number_of_points_python": {
     "line number": [
      207,
      216,
      236,
      251,
      276
     ]
    },
    "dipy.tracking.tests.test_streamline.streamline": {
     "line number": [
      206,
      208,
      262,
      263,
      264,
      265,
      281,
      283,
      298
     ]
    },
    "dipy.tracking.tests.test_streamline.streamline_64bit": {
     "line number": [
      215,
      217
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      233,
      235,
      242,
      305
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines_64bit": {
     "line number": [
      248,
      250,
      256,
      314
     ]
    },
    "enumerate": {
     "line number": [
      235,
      250,
      275
     ]
    },
    "len": {
     "line number": [
      209,
      218,
      227,
      266,
      269,
      300,
      309,
      311,
      318,
      320
     ]
    },
    "numpy.array": {
     "line number": [
      223,
      290
     ]
    },
    "numpy.float32": {
     "line number": [
      282
     ]
    },
    "numpy.float64": {
     "line number": [
      263,
      284
     ]
    },
    "numpy.int32": {
     "line number": [
      264,
      281
     ]
    },
    "numpy.int64": {
     "line number": [
      265,
      283
     ]
    },
    "numpy.ones": {
     "line number": [
      324,
      324
     ]
    },
    "numpy.sum": {
     "line number": [
      228
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      211,
      219,
      238,
      244,
      252,
      258,
      277
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      268
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      209,
      218,
      228,
      282,
      284,
      287,
      300,
      309,
      318
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      290,
      294,
      323
     ]
    },
    "range": {
     "line number": [
      224
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_set_number_of_points_memory_leaks": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": {
    "dipy.testing.memory.get_type_refcount": {
     "line number": [
      336,
      339,
      355,
      357
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      338,
      356
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      333,
      338,
      350,
      353,
      356
     ]
    },
    "len": {
     "line number": [
      352
     ]
    },
    "numpy.float32": {
     "line number": [
      329
     ]
    },
    "numpy.float64": {
     "line number": [
      329
     ]
    },
    "numpy.int32": {
     "line number": [
      329
     ]
    },
    "numpy.int64": {
     "line number": [
      329
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      331,
      348
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      345,
      361
     ]
    },
    "range": {
     "line number": [
      334,
      351
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_streamlines_generator": {
  "data": {
   "lineno": 1156,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1165
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      1158,
      1168
     ]
    },
    "dipy.tracking.tests.test_streamline.generate_sl": {
     "line number": [
      1158
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      1158,
      1159,
      1162,
      1165
     ]
    },
    "len": {
     "line number": [
      1159,
      1159,
      1162,
      1162,
      1169
     ]
    },
    "numpy.array": {
     "line number": [
      1161,
      1168
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1159,
      1162,
      1169
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1165
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_unlist_relist_streamlines": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": {
    "dipy.tracking.streamline.relist_streamlines": {
     "line number": [
      516
     ]
    },
    "dipy.tracking.streamline.unlist_streamlines": {
     "line number": [
      511
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      508,
      511,
      514,
      517,
      518,
      519
     ]
    },
    "len": {
     "line number": [
      514,
      514,
      517,
      517,
      518
     ]
    },
    "numpy.dtype": {
     "line number": [
      512
     ]
    },
    "numpy.random.rand": {
     "line number": [
      508,
      509,
      510
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      519
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      512,
      513,
      514,
      517
     ]
    },
    "range": {
     "line number": [
      518
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.test_values_from_volume": {
  "data": {
   "lineno": 1064,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      1140
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      1098
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      1103,
      1104,
      1109
     ]
    },
    "dipy.tracking.streamline.values_from_volume": {
     "line number": [
      1092,
      1095,
      1098,
      1106,
      1110,
      1118,
      1125,
      1140,
      1148,
      1152
     ]
    },
    "dipy.tracking.tests.test_streamline.streamlines": {
     "line number": [
      1147,
      1148,
      1151,
      1152
     ]
    },
    "enumerate": {
     "line number": [
      1126
     ]
    },
    "list": {
     "line number": [
      1115
     ]
    },
    "numpy.arange": {
     "line number": [
      1066,
      1069,
      1071
     ]
    },
    "numpy.array": {
     "line number": [
      1074,
      1078,
      1095,
      1118,
      1120,
      1120,
      1131,
      1135
     ]
    },
    "numpy.eye": {
     "line number": [
      1092,
      1095,
      1098,
      1101,
      1125,
      1142,
      1149,
      1153
     ]
    },
    "numpy.float32": {
     "line number": [
      1072
     ]
    },
    "numpy.float64": {
     "line number": [
      1072
     ]
    },
    "numpy.ones": {
     "line number": [
      1146,
      1147,
      1150,
      1151
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1093,
      1096,
      1099,
      1107,
      1112,
      1119,
      1127
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1116,
      1120,
      1148,
      1152
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1140
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_streamline.transform_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.transform_streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.unlist_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.unlist_streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.values_from_volume": {
  "data": {
   "shadows": "dipy.tracking.streamline.values_from_volume"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_streamline.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_track_volumes": {
  "data": {},
  "type": "module"
 },
 "dipy.tracking.tests.test_track_volumes.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_track_volumes.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_track_volumes.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_track_volumes.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_track_volumes.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_track_volumes.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_track_volumes.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_track_volumes.test_track_volumes": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "dipy.tracking.tests.test_track_volumes.tracks_to_expected": {
     "line number": [
      42,
      62
     ]
    },
    "dipy.tracking.vox2track.track_counts": {
     "line number": [
      43,
      47,
      63,
      71
     ]
    },
    "numpy.array": {
     "line number": [
      41,
      61
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      44,
      45,
      48,
      64,
      65,
      72,
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_track_volumes.tracks_to_expected": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      14,
      17
     ]
    },
    "numpy.any": {
     "line number": [
      18,
      21
     ]
    },
    "numpy.array": {
     "line number": [
      11
     ]
    },
    "numpy.int32": {
     "line number": [
      11,
      12,
      16
     ]
    },
    "numpy.round": {
     "line number": [
      16
     ]
    },
    "numpy.zeros": {
     "line number": [
      12
     ]
    },
    "set": {
     "line number": [
      15
     ]
    },
    "tuple": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_track_volumes.tvo": {
  "data": {
   "shadows": "dipy.tracking.vox2track"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      821
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      822
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.tracking.tests.test_tracking.ActStoppingCriterion": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.ActStoppingCriterion"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.BinaryStoppingCriterion": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.BinaryStoppingCriterion"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.BootDirectionGetter": {
  "data": {
   "shadows": "dipy.direction.BootDirectionGetter"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.ClosestPeakDirectionGetter": {
  "data": {
   "shadows": "dipy.direction.ClosestPeakDirectionGetter"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.ConstrainedSphericalDeconvModel": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.DeterministicMaximumDirectionGetter": {
  "data": {
   "shadows": "dipy.direction.DeterministicMaximumDirectionGetter"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.HemiSphere": {
  "data": {
   "shadows": "dipy.core.sphere.HemiSphere"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.LocalTracking": {
  "data": {
   "shadows": "dipy.tracking.local_tracking.LocalTracking"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.ParticleFilteringTracking": {
  "data": {
   "shadows": "dipy.tracking.local_tracking.ParticleFilteringTracking"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.PeaksAndMetrics": {
  "data": {
   "shadows": "dipy.direction.PeaksAndMetrics"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.ProbabilisticDirectionGetter": {
  "data": {
   "shadows": "dipy.direction.ProbabilisticDirectionGetter"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.StreamlineStatus": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.StreamlineStatus"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.ThresholdStoppingCriterion": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.ThresholdStoppingCriterion"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.get_sphere": {
  "data": {
   "shadows": "dipy.data.get_sphere"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.seeds_from_mask": {
  "data": {
   "shadows": "dipy.tracking.utils.seeds_from_mask"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.single_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.single_tensor"
  },
  "type": "import"
 },
 "dipy.tracking.tests.test_tracking.test_affine_transformations": {
  "data": {
   "lineno": 720,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      761,
      766
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      724
     ]
    },
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      724
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      787
     ]
    },
    "dipy.direction.DeterministicMaximumDirectionGetter.from_pmf": {
     "line number": [
      756
     ]
    },
    "dipy.tracking.local_tracking.LocalTracking": {
     "line number": [
      761,
      766,
      798
     ]
    },
    "dipy.tracking.stopping_criterion.BinaryStoppingCriterion": {
     "line number": [
      754
     ]
    },
    "float": {
     "line number": [
      753
     ]
    },
    "len": {
     "line number": [
      815,
      815,
      817,
      817
     ]
    },
    "nibabel.load": {
     "line number": [
      788
     ]
    },
    "numpy.allclose": {
     "line number": [
      816,
      818
     ]
    },
    "numpy.array": {
     "line number": [
      728,
      732,
      742,
      743,
      745,
      748
     ]
    },
    "numpy.dot": {
     "line number": [
      793,
      796,
      813
     ]
    },
    "numpy.eye": {
     "line number": [
      760,
      764,
      769,
      771,
      773,
      776,
      779
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      808
     ]
    },
    "numpy.mean": {
     "line number": [
      796
     ]
    },
    "numpy.sqrt": {
     "line number": [
      796
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      816,
      818
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      815,
      817
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      761,
      766
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_bootstap_peak_tracker": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      602,
      604
     ]
    },
    "allclose": {
     "line number": [
      601,
      603
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      560
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      580
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      544,
      580
     ]
    },
    "dipy.direction.BootDirectionGetter.from_data": {
     "line number": [
      581
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      575
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      568
     ]
    },
    "dipy.sims.voxel.single_tensor": {
     "line number": [
      566,
      567
     ]
    },
    "dipy.tracking.local_tracking.LocalTracking": {
     "line number": [
      584
     ]
    },
    "dipy.tracking.stopping_criterion.BinaryStoppingCriterion": {
     "line number": [
      579
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      585
     ]
    },
    "float": {
     "line number": [
      579
     ]
    },
    "len": {
     "line number": [
      557
     ]
    },
    "numpy.array": {
     "line number": [
      548,
      558,
      563,
      564,
      565,
      574,
      577,
      577,
      586,
      591
     ]
    },
    "numpy.eye": {
     "line number": [
      584
     ]
    },
    "numpy.insert": {
     "line number": [
      558,
      559
     ]
    },
    "numpy.ones": {
     "line number": [
      557
     ]
    },
    "numpy.tile": {
     "line number": [
      570
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_bootstap_peak_tracker.allclose": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      599
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_closest_peak_tracker": {
  "data": {
   "lineno": 607,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      653,
      655
     ]
    },
    "allclose": {
     "line number": [
      652,
      654
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      611
     ]
    },
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      611
     ]
    },
    "dipy.direction.ClosestPeakDirectionGetter.from_pmf": {
     "line number": [
      634
     ]
    },
    "dipy.tracking.local_tracking.LocalTracking": {
     "line number": [
      636
     ]
    },
    "dipy.tracking.stopping_criterion.BinaryStoppingCriterion": {
     "line number": [
      632
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      636
     ]
    },
    "float": {
     "line number": [
      631
     ]
    },
    "numpy.array": {
     "line number": [
      615,
      619,
      629,
      629,
      638,
      643
     ]
    },
    "numpy.eye": {
     "line number": [
      636
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_closest_peak_tracker.allclose": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      650
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_maximum_deterministic_tracker": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      518
     ]
    },
    "allclose": {
     "line number": [
      517
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      471
     ]
    },
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      471
     ]
    },
    "dipy.direction.DeterministicMaximumDirectionGetter.from_pmf": {
     "line number": [
      494,
      521,
      532
     ]
    },
    "dipy.tracking.local_tracking.LocalTracking": {
     "line number": [
      496,
      523,
      534
     ]
    },
    "dipy.tracking.stopping_criterion.ThresholdStoppingCriterion": {
     "line number": [
      492
     ]
    },
    "float": {
     "line number": [
      491
     ]
    },
    "numpy.allclose": {
     "line number": [
      526,
      537
     ]
    },
    "numpy.array": {
     "line number": [
      475,
      479,
      489,
      498,
      504,
      509
     ]
    },
    "numpy.eye": {
     "line number": [
      496,
      523,
      534
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      526,
      537
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_maximum_deterministic_tracker.allclose": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      514
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_particle_filtering_tractography": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      413,
      418,
      423,
      427,
      434,
      439,
      443,
      449,
      453
     ]
    },
    "dipy.data.get_sphere": {
     "line number": [
      328
     ]
    },
    "dipy.direction.ProbabilisticDirectionGetter.from_pmf": {
     "line number": [
      364
     ]
    },
    "dipy.tracking.local_tracking.LocalTracking": {
     "line number": [
      365
     ]
    },
    "dipy.tracking.local_tracking.ParticleFilteringTracking": {
     "line number": [
      370,
      380,
      389,
      403,
      414,
      419,
      424,
      428,
      435,
      440,
      444,
      450,
      454,
      458,
      461
     ]
    },
    "dipy.tracking.stopping_criterion.ActStoppingCriterion.from_pve": {
     "line number": [
      354
     ]
    },
    "dipy.tracking.stopping_criterion.BinaryStoppingCriterion": {
     "line number": [
      412
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      368,
      373,
      391,
      405,
      458,
      461
     ]
    },
    "dipy.tracking.utils.seeds_from_mask": {
     "line number": [
      355,
      388
     ]
    },
    "int": {
     "line number": [
      394,
      395
     ]
    },
    "len": {
     "line number": [
      375,
      376,
      376,
      384,
      399,
      399,
      407,
      408,
      409
     ]
    },
    "list": {
     "line number": [
      358
     ]
    },
    "numpy.all": {
     "line number": [
      394,
      395
     ]
    },
    "numpy.array": {
     "line number": [
      332,
      342,
      375,
      376,
      399
     ]
    },
    "numpy.dstack": {
     "line number": [
      337,
      347
     ]
    },
    "numpy.eye": {
     "line number": [
      355,
      365,
      371,
      380,
      388,
      390,
      404,
      415,
      419,
      424,
      428,
      435,
      440,
      444,
      450,
      454,
      458,
      461
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      385
     ]
    },
    "numpy.ones": {
     "line number": [
      352,
      388
     ]
    },
    "numpy.random.random": {
     "line number": [
      361
     ]
    },
    "numpy.random.seed": {
     "line number": [
      360
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      375,
      376,
      394,
      395,
      399
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      385
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      407,
      408,
      409,
      464
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      413,
      417,
      422,
      426,
      433,
      438,
      442,
      448,
      452
     ]
    },
    "numpy.zeros": {
     "line number": [
      337,
      341,
      347,
      351
     ]
    },
    "range": {
     "line number": [
      384
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_peak_direction_tracker": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": {
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      662
     ]
    },
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      662
     ]
    },
    "dipy.direction.PeaksAndMetrics": {
     "line number": [
      683
     ]
    },
    "dipy.tracking.local_tracking.LocalTracking": {
     "line number": [
      696
     ]
    },
    "dipy.tracking.stopping_criterion.ThresholdStoppingCriterion": {
     "line number": [
      690
     ]
    },
    "enumerate": {
     "line number": [
      716
     ]
    },
    "float": {
     "line number": [
      689
     ]
    },
    "int": {
     "line number": [
      675
     ]
    },
    "numpy.allclose": {
     "line number": [
      717
     ]
    },
    "numpy.array": {
     "line number": [
      666,
      670,
      676,
      691,
      692,
      693,
      694,
      698,
      703,
      709,
      714
     ]
    },
    "numpy.eye": {
     "line number": [
      696
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      717
     ]
    },
    "numpy.zeros": {
     "line number": [
      675
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_probabilistic_odf_weighted_tracker": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      273
     ]
    },
    "all": {
     "line number": [
      274
     ]
    },
    "allclose": {
     "line number": [
      268,
      270
     ]
    },
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      224
     ]
    },
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      224
     ]
    },
    "dipy.direction.ProbabilisticDirectionGetter.from_pmf": {
     "line number": [
      247,
      277,
      286
     ]
    },
    "dipy.tracking.local_tracking.LocalTracking": {
     "line number": [
      249,
      279,
      288,
      295,
      303,
      315,
      318
     ]
    },
    "dipy.tracking.stopping_criterion.ThresholdStoppingCriterion": {
     "line number": [
      245
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      297,
      305,
      315,
      318
     ]
    },
    "dipy.tracking.utils.seeds_from_mask": {
     "line number": [
      302
     ]
    },
    "float": {
     "line number": [
      244
     ]
    },
    "int": {
     "line number": [
      307,
      308
     ]
    },
    "len": {
     "line number": [
      298,
      299,
      312,
      312
     ]
    },
    "numpy.all": {
     "line number": [
      307,
      308
     ]
    },
    "numpy.allclose": {
     "line number": [
      282,
      291
     ]
    },
    "numpy.array": {
     "line number": [
      228,
      232,
      242,
      251,
      257,
      312
     ]
    },
    "numpy.eye": {
     "line number": [
      249,
      279,
      288,
      295,
      302,
      303,
      315,
      318
     ]
    },
    "numpy.ones": {
     "line number": [
      302
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      274,
      282,
      291,
      298,
      299,
      307,
      308,
      312
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_probabilistic_odf_weighted_tracker.allclose": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_save_seeds": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      172
     ]
    },
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      172
     ]
    },
    "dipy.direction.ProbabilisticDirectionGetter.from_pmf": {
     "line number": [
      187
     ]
    },
    "dipy.tracking.local_tracking.LocalTracking": {
     "line number": [
      190
     ]
    },
    "dipy.tracking.local_tracking.ParticleFilteringTracking": {
     "line number": [
      205
     ]
    },
    "dipy.tracking.stopping_criterion.ActStoppingCriterion": {
     "line number": [
      186
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.ENDPOINT": {
     "line number": [
      184
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.INVALIDPOINT": {
     "line number": [
      185
     ]
    },
    "iter": {
     "line number": [
      198,
      213
     ]
    },
    "next": {
     "line number": [
      200,
      202,
      214,
      216
     ]
    },
    "numpy.array": {
     "line number": [
      163,
      173,
      178,
      179,
      180
     ]
    },
    "numpy.column_stack": {
     "line number": [
      181
     ]
    },
    "numpy.eye": {
     "line number": [
      193,
      208
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      201,
      203,
      215,
      217
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.test_stop_conditions": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "dipy.core.sphere.HemiSphere.from_sphere": {
     "line number": [
      43
     ]
    },
    "dipy.core.sphere.unit_octahedron": {
     "line number": [
      43
     ]
    },
    "dipy.direction.ProbabilisticDirectionGetter.from_pmf": {
     "line number": [
      58
     ]
    },
    "dipy.tracking.local_tracking.LocalTracking": {
     "line number": [
      61,
      70
     ]
    },
    "dipy.tracking.stopping_criterion.ActStoppingCriterion": {
     "line number": [
      57
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.ENDPOINT": {
     "line number": [
      55
     ]
    },
    "dipy.tracking.stopping_criterion.StreamlineStatus.INVALIDPOINT": {
     "line number": [
      56
     ]
    },
    "iter": {
     "line number": [
      67,
      76
     ]
    },
    "len": {
     "line number": [
      83,
      88,
      95,
      100,
      109,
      114,
      127,
      136,
      143,
      151,
      159
     ]
    },
    "list": {
     "line number": [
      127
     ]
    },
    "next": {
     "line number": [
      80,
      85,
      92,
      97,
      106,
      111,
      119,
      122,
      133,
      140,
      148,
      156
     ]
    },
    "numpy.array": {
     "line number": [
      33,
      44,
      49,
      50,
      51
     ]
    },
    "numpy.column_stack": {
     "line number": [
      52
     ]
    },
    "numpy.eye": {
     "line number": [
      64,
      73
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      81,
      82,
      83,
      86,
      87,
      88,
      93,
      94,
      95,
      98,
      99,
      100,
      107,
      108,
      109,
      112,
      113,
      114,
      120,
      123,
      127,
      134,
      135,
      136,
      141,
      142,
      143,
      149,
      150,
      151,
      157,
      158,
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.tests.test_tracking.unit_octahedron": {
  "data": {
   "shadows": "dipy.core.sphere.unit_octahedron"
  },
  "type": "import"
 },
 "dipy.tracking.utils": {
  "data": {
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      942
     ]
    },
    "dipy.tracking.utils._min_at": {
     "line number": [
      943
     ]
    },
    "numpy.minimum.at": {
     "line number": [
      941
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.tracking.utils.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "dipy.tracking.utils._as_segments": {
  "data": {
   "lineno": 1008,
   "symbols_in_volume": {
    "dipy.tracking.utils._part_segments": {
     "line number": [
      1009,
      1011
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils._mapping_to_voxel": {
  "data": {
   "shadows": "dipy.tracking._utils._mapping_to_voxel"
  },
  "type": "import"
 },
 "dipy.tracking.utils._min_at": {
  "data": {
   "lineno": 925,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      931
     ]
    },
    "list": {
     "line number": [
      927
     ]
    },
    "numpy.asarray": {
     "line number": [
      926
     ]
    },
    "numpy.lexsort": {
     "line number": [
      928
     ]
    },
    "numpy.minimum": {
     "line number": [
      937
     ]
    },
    "numpy.ones": {
     "line number": [
      931
     ]
    },
    "tuple": {
     "line number": [
      937,
      937
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils._part_segments": {
  "data": {
   "lineno": 998,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1004
     ]
    },
    "numpy.split": {
     "line number": [
      999
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils._streamlines_in_mask": {
  "data": {
   "shadows": "dipy.tracking.vox2track._streamlines_in_mask"
  },
  "type": "import"
 },
 "dipy.tracking.utils._to_voxel_coordinates": {
  "data": {
   "shadows": "dipy.tracking._utils._to_voxel_coordinates"
  },
  "type": "import"
 },
 "dipy.tracking.utils._with_initialize": {
  "data": {
   "lineno": 556
  },
  "type": "function"
 },
 "dipy.tracking.utils._with_initialize.helper": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": {
    "functools.wraps": {
     "line number": [
      562
     ]
    },
    "generator": {
     "line number": [
      564,
      562
     ]
    },
    "next": {
     "line number": [
      565
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.tracking.utils.apply_affine": {
  "data": {
   "shadows": "nibabel.affines.apply_affine"
  },
  "type": "import"
 },
 "dipy.tracking.utils.asarray": {
  "data": {
   "shadows": "numpy.asarray"
  },
  "type": "import"
 },
 "dipy.tracking.utils.cdist": {
  "data": {
   "shadows": "scipy.spatial.distance.cdist"
  },
  "type": "import"
 },
 "dipy.tracking.utils.ceil": {
  "data": {
   "shadows": "numpy.ceil"
  },
  "type": "import"
 },
 "dipy.tracking.utils.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "dipy.tracking.utils.connectivity_matrix": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      162
     ]
    },
    "collections.OrderedDict.fromkeys": {
     "line number": [
      180
     ]
    },
    "collections.defaultdict": {
     "line number": [
      206,
      236
     ]
    },
    "dipy.tracking._utils._mapping_to_voxel": {
     "line number": [
      172,
      222
     ]
    },
    "dipy.tracking._utils._to_voxel_coordinates": {
     "line number": [
      175,
      223
     ]
    },
    "dipy.tracking.utils.ndbincount": {
     "line number": [
      201,
      231
     ]
    },
    "enumerate": {
     "line number": [
      173,
      207,
      237
     ]
    },
    "int": {
     "line number": [
      171
     ]
    },
    "itertools.combinations": {
     "line number": [
      182,
      191
     ]
    },
    "itertools.groupby": {
     "line number": [
      188
     ]
    },
    "len": {
     "line number": [
      219
     ]
    },
    "list": {
     "line number": [
      167,
      180,
      188,
      206,
      236
     ]
    },
    "numpy.append": {
     "line number": [
      183,
      196
     ]
    },
    "numpy.maximum": {
     "line number": [
      204,
      233
     ]
    },
    "numpy.ndarray": {
     "line number": [
      171
     ]
    },
    "set": {
     "line number": [
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "dipy.tracking.utils.density_map": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "dipy.tracking._utils._mapping_to_voxel": {
     "line number": [
      104
     ]
    },
    "dipy.tracking._utils._to_voxel_coordinates": {
     "line number": [
      107
     ]
    },
    "numpy.zeros": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.dist_to_corner": {
  "data": {
   "shadows": "dipy.core.geometry.dist_to_corner"
  },
  "type": "import"
 },
 "dipy.tracking.utils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.tracking.utils.empty": {
  "data": {
   "shadows": "numpy.empty"
  },
  "type": "import"
 },
 "dipy.tracking.utils.groupby": {
  "data": {
   "shadows": "itertools.groupby"
  },
  "type": "import"
 },
 "dipy.tracking.utils.length": {
  "data": {
   "lineno": 795,
   "symbols_in_volume": {
    "dipy.tracking.metrics.length": {
     "line number": [
      810
     ]
    },
    "map": {
     "line number": [
      810
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.metrics": {
  "data": {
   "shadows": "dipy.tracking.metrics"
  },
  "type": "import"
 },
 "dipy.tracking.utils.minimum_at": {
  "data": {
   "lineno": 943
  },
  "type": "constant"
 },
 "dipy.tracking.utils.ndbincount": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      263
     ]
    },
    "numpy.bincount": {
     "line number": [
      268
     ]
    },
    "numpy.prod": {
     "line number": [
      268
     ]
    },
    "numpy.ravel_multi_index": {
     "line number": [
      267
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.near_roi": {
  "data": {
   "lineno": 724,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      780,
      792
     ]
    },
    "dipy.core.geometry.dist_to_corner": {
     "line number": [
      766
     ]
    },
    "dipy.tracking.utils.streamline_near_roi": {
     "line number": [
      782,
      789
     ]
    },
    "enumerate": {
     "line number": [
      781
     ]
    },
    "isinstance": {
     "line number": [
      779
     ]
    },
    "len": {
     "line number": [
      780
     ]
    },
    "list": {
     "line number": [
      779
     ]
    },
    "nibabel.affines.apply_affine": {
     "line number": [
      776
     ]
    },
    "numpy.array": {
     "line number": [
      775,
      792
     ]
    },
    "numpy.where": {
     "line number": [
      775
     ]
    },
    "numpy.zeros": {
     "line number": [
      780
     ]
    },
    "warnings.warn": {
     "line number": [
      772
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.tracking.utils.path_length": {
  "data": {
   "lineno": 946,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      970
     ]
    },
    "dipy.tracking._utils._mapping_to_voxel": {
     "line number": [
      975
     ]
    },
    "dipy.tracking._utils._to_voxel_coordinates": {
     "line number": [
      977,
      987
     ]
    },
    "dipy.tracking.utils._as_segments": {
     "line number": [
      986
     ]
    },
    "dipy.tracking.utils.minimum_at": {
     "line number": [
      992
     ]
    },
    "float": {
     "line number": [
      973
     ]
    },
    "numpy.asarray": {
     "line number": [
      970
     ]
    },
    "numpy.empty": {
     "line number": [
      973
     ]
    },
    "numpy.inf": {
     "line number": [
      974,
      993,
      994
     ]
    },
    "numpy.sqrt": {
     "line number": [
      989
     ]
    },
    "numpy.where": {
     "line number": [
      994
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.tracking.utils.random_seeds_from_mask": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      510
     ]
    },
    "bool": {
     "line number": [
      508
     ]
    },
    "hash": {
     "line number": [
      534
     ]
    },
    "len": {
     "line number": [
      516,
      520
     ]
    },
    "numpy.arange": {
     "line number": [
      516
     ]
    },
    "numpy.array": {
     "line number": [
      508
     ]
    },
    "numpy.asarray": {
     "line number": [
      541
     ]
    },
    "numpy.dot": {
     "line number": [
      550
     ]
    },
    "numpy.random.random": {
     "line number": [
      538
     ]
    },
    "numpy.random.seed": {
     "line number": [
      513,
      536
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      517
     ]
    },
    "numpy.sum": {
     "line number": [
      534
     ]
    },
    "numpy.unravel_index": {
     "line number": [
      519
     ]
    },
    "range": {
     "line number": [
      529
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.ravel_multi_index": {
  "data": {
   "shadows": "numpy.ravel_multi_index"
  },
  "type": "import"
 },
 "dipy.tracking.utils.reduce_labels": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": {
    "numpy.unique": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.reduce_rois": {
  "data": {
   "lineno": 884,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      913,
      914
     ]
    },
    "len": {
     "line number": [
      916
     ]
    },
    "numpy.zeros": {
     "line number": [
      913,
      914
     ]
    },
    "range": {
     "line number": [
      916
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.seeds_from_mask": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      414,
      422
     ]
    },
    "bool": {
     "line number": [
      412
     ]
    },
    "int": {
     "line number": [
      416,
      419
     ]
    },
    "numpy.argwhere": {
     "line number": [
      430
     ]
    },
    "numpy.array": {
     "line number": [
      412
     ]
    },
    "numpy.asarray": {
     "line number": [
      416
     ]
    },
    "numpy.dot": {
     "line number": [
      439
     ]
    },
    "numpy.empty": {
     "line number": [
      419
     ]
    },
    "numpy.mgrid": {
     "line number": [
      425
     ]
    },
    "numpy.newaxis": {
     "line number": [
      433,
      433
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.sqrt": {
  "data": {
   "shadows": "numpy.sqrt"
  },
  "type": "import"
 },
 "dipy.tracking.utils.streamline_near_roi": {
  "data": {
   "lineno": 672,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      714
     ]
    },
    "len": {
     "line number": [
      703
     ]
    },
    "numpy.all": {
     "line number": [
      721
     ]
    },
    "numpy.min": {
     "line number": [
      719,
      721
     ]
    },
    "numpy.vstack": {
     "line number": [
      709
     ]
    },
    "scipy.spatial.distance.cdist": {
     "line number": [
      716
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.subsegment": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "len": {
     "line number": [
      353
     ]
    },
    "numpy.ceil": {
     "line number": [
      347
     ]
    },
    "numpy.empty": {
     "line number": [
      349
     ]
    },
    "numpy.sqrt": {
     "line number": [
      346
     ]
    },
    "range": {
     "line number": [
      353,
      361
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.target": {
  "data": {
   "lineno": 571,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      614
     ]
    },
    "ValueError": {
     "line number": [
      615
     ]
    },
    "bool": {
     "line number": [
      604
     ]
    },
    "dipy.tracking._utils._mapping_to_voxel": {
     "line number": [
      605
     ]
    },
    "dipy.tracking._utils._to_voxel_coordinates": {
     "line number": [
      611
     ]
    },
    "dipy.tracking.utils._with_initialize": {
     "line number": [
      571
     ]
    },
    "numpy.array": {
     "line number": [
      604
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.target_line_based": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": {
    "dipy.tracking._utils._mapping_to_voxel": {
     "line number": [
      662
     ]
    },
    "dipy.tracking.utils._with_initialize": {
     "line number": [
      620
     ]
    },
    "dipy.tracking.vox2track._streamlines_in_mask": {
     "line number": [
      663
     ]
    },
    "numpy.array": {
     "line number": [
      661
     ]
    },
    "numpy.uint8": {
     "line number": [
      661
     ]
    },
    "numpy.where": {
     "line number": [
      668
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.transform_tracking_output": {
  "data": {
   "lineno": 846,
   "symbols_in_volume": {
    "dipy.tracking.utils._with_initialize": {
     "line number": [
      846
     ]
    },
    "numpy.dot": {
     "line number": [
      878,
      878,
      881
     ]
    },
    "zip": {
     "line number": [
      866,
      877
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.unique_rows": {
  "data": {
   "lineno": 813,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      837
     ]
    },
    "len": {
     "line number": [
      837
     ]
    },
    "numpy.lexsort": {
     "line number": [
      833
     ]
    },
    "numpy.ones": {
     "line number": [
      837
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.tracking.utils.warn": {
  "data": {
   "shadows": "warnings.warn"
  },
  "type": "import"
 },
 "dipy.tracking.utils.wraps": {
  "data": {
   "shadows": "functools.wraps"
  },
  "type": "import"
 },
 "dipy.utils": {
  "data": {},
  "type": "module"
 },
 "dipy.utils._importlib": {
  "data": {},
  "type": "module"
 },
 "dipy.utils._importlib._resolve_name": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      10,
      15,
      16
     ]
    },
    "hasattr": {
     "line number": [
      9
     ]
    },
    "len": {
     "line number": [
      11
     ]
    },
    "range": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils._importlib.import_module": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      31
     ]
    },
    "__import__": {
     "line number": [
      38
     ]
    },
    "dipy.utils._importlib._resolve_name": {
     "line number": [
      37
     ]
    },
    "dipy.utils._importlib.sys": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils._importlib.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.utils.arrfuncs": {
  "data": {},
  "type": "module"
 },
 "dipy.utils.arrfuncs.as_native_array": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "nibabel.volumeutils.endian_codes": {
     "line number": [
      24
     ]
    },
    "nibabel.volumeutils.native_code": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.arrfuncs.endian_codes": {
  "data": {
   "shadows": "nibabel.volumeutils.endian_codes"
  },
  "type": "import"
 },
 "dipy.utils.arrfuncs.native_code": {
  "data": {
   "shadows": "nibabel.volumeutils.native_code"
  },
  "type": "import"
 },
 "dipy.utils.arrfuncs.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.utils.arrfuncs.pinv": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      59
     ]
    },
    "numpy.asarray": {
     "line number": [
      57
     ]
    },
    "numpy.einsum": {
     "line number": [
      66
     ]
    },
    "numpy.linalg.svd": {
     "line number": [
      61
     ]
    },
    "numpy.maximum.reduce": {
     "line number": [
      62
     ]
    },
    "numpy.transpose": {
     "line number": [
      67,
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.optpkg": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      5,
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.utils.optpkg.TripWire": {
  "data": {
   "shadows": "dipy.utils.tripwire.TripWire"
  },
  "type": "import"
 },
 "dipy.utils.optpkg.have_pytest": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "dipy.utils.optpkg.importlib": {
  "data": {
   "shadows": "dipy.utils._importlib"
  },
  "type": "import"
 },
 "dipy.utils.optpkg.optional_package": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      76
     ]
    },
    "dipy.utils._importlib.import_module": {
     "line number": [
      75
     ]
    },
    "dipy.utils.tripwire.TripWire": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.optpkg.optional_package.setup_module": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "dipy.utils.optpkg.have_pytest": {
     "line number": [
      88
     ]
    },
    "dipy.utils.optpkg.pytest": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.optpkg.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.utils.tests": {
  "data": {},
  "type": "module"
 },
 "dipy.utils.tests.test_arrfuncs": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.tests.test_arrfuncs.sys": {
     "line number": [
      13,
      14
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.utils.tests.test_arrfuncs.NATIVE_ORDER": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "dipy.utils.tests.test_arrfuncs.SWAPPED_ORDER": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "dipy.utils.tests.test_arrfuncs.as_native_array": {
  "data": {
   "shadows": "dipy.utils.arrfuncs.as_native_array"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_arrfuncs.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_arrfuncs.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_arrfuncs.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_arrfuncs.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_arrfuncs.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_arrfuncs.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_arrfuncs.pinv": {
  "data": {
   "shadows": "dipy.utils.arrfuncs.pinv"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_arrfuncs.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_arrfuncs.test_as_native": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "dipy.testing.assert_false": {
     "line number": [
      26
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      21
     ]
    },
    "dipy.utils.arrfuncs.as_native_array": {
     "line number": [
      20,
      25
     ]
    },
    "dipy.utils.tests.test_arrfuncs.NATIVE_ORDER": {
     "line number": [
      28
     ]
    },
    "dipy.utils.tests.test_arrfuncs.SWAPPED_ORDER": {
     "line number": [
      24
     ]
    },
    "numpy.arange": {
     "line number": [
      18
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      27
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      19,
      24,
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.tests.test_arrfuncs.test_pinv": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "dipy.utils.arrfuncs.pinv": {
     "line number": [
      33
     ]
    },
    "numpy.linalg.pinv": {
     "line number": [
      38
     ]
    },
    "numpy.random.randn": {
     "line number": [
      32
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      37
     ]
    },
    "range": {
     "line number": [
      34,
      35,
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.tests.test_omp": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      43
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.utils.tests.test_omp._restore_omp_threads": {
  "data": {
   "shadows": "dipy.utils.omp._restore_omp_threads"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_omp._set_omp_threads": {
  "data": {
   "shadows": "dipy.utils.omp._set_omp_threads"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_omp.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_omp.cpu_count": {
  "data": {
   "shadows": "dipy.utils.omp.cpu_count"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_omp.default_threads": {
  "data": {
   "shadows": "dipy.utils.omp.default_threads"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_omp.have_openmp": {
  "data": {
   "shadows": "dipy.utils.omp.have_openmp"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_omp.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_omp.run_module_suite": {
  "data": {
   "shadows": "numpy.testing.run_module_suite"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_omp.test_default_threads": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      36
     ]
    },
    "ValueError": {
     "line number": [
      35,
      36
     ]
    },
    "dipy.utils.omp.cpu_count": {
     "line number": [
      37
     ]
    },
    "dipy.utils.omp.default_threads": {
     "line number": [
      40
     ]
    },
    "dipy.utils.omp.have_openmp": {
     "line number": [
      31
     ]
    },
    "dipy.utils.tests.test_omp.os": {
     "line number": [
      33
     ]
    },
    "int": {
     "line number": [
      33
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.tests.test_omp.test_set_omp_threads": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "dipy.utils.omp._restore_omp_threads": {
     "line number": [
      14,
      23
     ]
    },
    "dipy.utils.omp._set_omp_threads": {
     "line number": [
      19
     ]
    },
    "dipy.utils.omp.cpu_count": {
     "line number": [
      27
     ]
    },
    "dipy.utils.omp.default_threads": {
     "line number": [
      15,
      18,
      24
     ]
    },
    "dipy.utils.omp.have_openmp": {
     "line number": [
      12
     ]
    },
    "dipy.utils.omp.thread_count": {
     "line number": [
      15,
      20,
      24,
      26
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      15,
      20,
      24,
      26,
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.tests.test_omp.thread_count": {
  "data": {
   "shadows": "dipy.utils.omp.thread_count"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_tripwire": {
  "data": {},
  "type": "module"
 },
 "dipy.utils.tests.test_tripwire.TripWire": {
  "data": {
   "shadows": "dipy.utils.tripwire.TripWire"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_tripwire.TripWireError": {
  "data": {
   "shadows": "dipy.utils.tripwire.TripWireError"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_tripwire.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_tripwire.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_tripwire.assert_not_equal": {
  "data": {
   "shadows": "dipy.testing.assert_not_equal"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_tripwire.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_tripwire.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_tripwire.is_tripwire": {
  "data": {
   "shadows": "dipy.utils.tripwire.is_tripwire"
  },
  "type": "import"
 },
 "dipy.utils.tests.test_tripwire.test_is_tripwire": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "dipy.testing.assert_false": {
     "line number": [
      11
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      12
     ]
    },
    "dipy.utils.tripwire.TripWire": {
     "line number": [
      12
     ]
    },
    "dipy.utils.tripwire.is_tripwire": {
     "line number": [
      11,
      12
     ]
    },
    "object": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.tests.test_tripwire.test_tripwire": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      28
     ]
    },
    "RuntimeError": {
     "line number": [
      30
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      28
     ]
    },
    "dipy.utils.tripwire.TripWire": {
     "line number": [
      17
     ]
    },
    "dipy.utils.tripwire.TripWireError": {
     "line number": [
      18,
      22,
      27
     ]
    },
    "getattr": {
     "line number": [
      19
     ]
    },
    "isinstance": {
     "line number": [
      28
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      18,
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.tripwire": {
  "data": {},
  "type": "module"
 },
 "dipy.utils.tripwire.TripWire": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "object": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.utils.tripwire.TripWire.__call__": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "dipy.utils.tripwire.TripWireError": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.tripwire.TripWire.__getattr__": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "dipy.utils.tripwire.TripWireError": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.utils.tripwire.TripWire.__init__": {
  "data": {
   "lineno": 45
  },
  "type": "function"
 },
 "dipy.utils.tripwire.TripWireError": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      5
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.utils.tripwire.is_tripwire": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      23
     ]
    },
    "dipy.utils.tripwire.TripWireError": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      7,
      27
     ]
    },
    "dipy.viz.warnings": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.viz.FURY_DATA_DIR": {
  "data": {
   "shadows": "fury.data.DATA_DIR"
  },
  "type": "import"
 },
 "dipy.viz.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.viz.actor": {
  "data": {
   "shadows": "fury.actor"
  },
  "type": "import"
 },
 "dipy.viz.app": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.viz.app.GlobalHorizon": {
  "data": {
   "shadows": "dipy.viz.gmem.GlobalHorizon"
  },
  "type": "import"
 },
 "dipy.viz.app.HELP_MESSAGE": {
  "data": {
   "lineno": 69
  },
  "type": "constant"
 },
 "dipy.viz.app.Horizon": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "object": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.viz.app.Horizon.__init__": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "numpy.random.RandomState": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.add_cluster_actors": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      215
     ]
    },
    "dipy.segment.clustering.qbx_and_merge": {
     "line number": [
      220
     ]
    },
    "dipy.tracking.streamline.length": {
     "line number": [
      228
     ]
    },
    "dipy.viz.actor.line": {
     "line number": [
      245,
      274
     ]
    },
    "dipy.viz.actor.streamtube": {
     "line number": [
      239
     ]
    },
    "dipy.viz.app.apply_shader": {
     "line number": [
      269,
      270
     ]
    },
    "enumerate": {
     "line number": [
      202,
      237
     ]
    },
    "fury.colormap.distinguishable_colormap": {
     "line number": [
      201
     ]
    },
    "len": {
     "line number": [
      224,
      225
     ]
    },
    "next": {
     "line number": [
      206
     ]
    },
    "numpy.array": {
     "line number": [
      225,
      228
     ]
    },
    "numpy.interp": {
     "line number": [
      226
     ]
    },
    "print": {
     "line number": [
      219,
      224,
      230,
      233,
      236
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.add_cluster_actors.left_click_centroid_callback": {
  "data": {
   "lineno": 285
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.add_cluster_actors.left_click_cluster_callback": {
  "data": {
   "lineno": 292
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_scene": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "dipy.viz.gmem.GlobalHorizon": {
     "line number": [
      169
     ]
    },
    "dipy.viz.window.Scene": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "dipy.__version__": {
     "line number": [
      311
     ]
    },
    "dipy.viz.app.HELP_MESSAGE": {
     "line number": [
      436,
      437
     ]
    },
    "dipy.viz.panel._color_slider": {
     "line number": [
      340,
      349,
      358
     ]
    },
    "dipy.viz.panel.build_label": {
     "line number": [
      332,
      342,
      351,
      436
     ]
    },
    "dipy.viz.panel.slicer_panel": {
     "line number": [
      456
     ]
    },
    "dipy.viz.ui.LineSlider2D": {
     "line number": [
      334,
      343,
      352
     ]
    },
    "dipy.viz.ui.ListBox2D": {
     "line number": [
      636
     ]
    },
    "dipy.viz.ui.Panel2D": {
     "line number": [
      326,
      439
     ]
    },
    "dipy.viz.window.ShowManager": {
     "line number": [
      312
     ]
    },
    "dipy.viz.window.record": {
     "line number": [
      743
     ]
    },
    "len": {
     "line number": [
      447,
      452
     ]
    },
    "numpy.array": {
     "line number": [
      320,
      323
     ]
    },
    "numpy.percentile": {
     "line number": [
      345,
      346,
      354,
      355
     ]
    },
    "print": {
     "line number": [
      333
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.change_threshold": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "min": {
     "line number": [
      385,
      386
     ]
    },
    "numpy.array": {
     "line number": [
      370,
      373
     ]
    },
    "numpy.round": {
     "line number": [
      365
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.display_element": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": {
    "expand": {
     "line number": [
      649
     ]
    },
    "hide": {
     "line number": [
      643
     ]
    },
    "invert": {
     "line number": [
      645
     ]
    },
    "new_window": {
     "line number": [
      655
     ]
    },
    "reset": {
     "line number": [
      651
     ]
    },
    "save": {
     "line number": [
      653
     ]
    },
    "show_all": {
     "line number": [
      647
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.expand": {
  "data": {
   "lineno": 573
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.hide": {
  "data": {
   "lineno": 482
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.hide_clusters_length": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": {
    "numpy.round": {
     "line number": [
      394
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.hide_clusters_size": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": {
    "numpy.round": {
     "line number": [
      407
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.invert": {
  "data": {
   "lineno": 498
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.key_press": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": {
    "expand": {
     "line number": [
      627
     ]
    },
    "hide": {
     "line number": [
      605
     ]
    },
    "invert": {
     "line number": [
      609
     ]
    },
    "new_window": {
     "line number": [
      621
     ]
    },
    "reset": {
     "line number": [
      630
     ]
    },
    "save": {
     "line number": [
      618
     ]
    },
    "show_all": {
     "line number": [
      624
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.left_click_centroid_callback": {
  "data": {
   "lineno": 663
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.left_click_cluster_callback": {
  "data": {
   "lineno": 677
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.new_window": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      538
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      536
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      527,
      533
     ]
    },
    "dipy.viz.app.Horizon": {
     "line number": [
      539
     ]
    },
    "numpy.inf": {
     "line number": [
      543,
      544
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.reset": {
  "data": {
   "lineno": 588
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.right_click_centroid_callback": {
  "data": {
   "lineno": 670
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.right_click_cluster_callback": {
  "data": {
   "lineno": 688,
   "symbols_in_volume": {
    "print": {
     "line number": [
      689
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.save": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": {
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      522
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      520
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      523
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      510,
      516
     ]
    },
    "print": {
     "line number": [
      517,
      524
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.show_all": {
  "data": {
   "lineno": 551
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.timer_callback": {
  "data": {
   "lineno": 706
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.build_show.win_callback": {
  "data": {
   "lineno": 466
  },
  "type": "function"
 },
 "dipy.viz.app.Horizon.remove_cluster_actors": {
  "data": {
   "lineno": 176
  },
  "type": "function"
 },
 "dipy.viz.app.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.viz.app.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.viz.app.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.viz.app._color_slider": {
  "data": {
   "shadows": "dipy.viz.panel._color_slider"
  },
  "type": "import"
 },
 "dipy.viz.app.actor": {
  "data": {
   "shadows": "dipy.viz.actor"
  },
  "type": "import"
 },
 "dipy.viz.app.apply_shader": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "dipy.viz.actor.GetMapper": {
     "line number": [
      21
     ]
    },
    "dipy.viz.vtk.vtkShader.Fragment": {
     "line number": [
      31,
      41
     ]
    },
    "dipy.viz.vtk.vtkShader.Vertex": {
     "line number": [
      24
     ]
    },
    "dipy.viz.window.vtk.vtkCommand.UpdateShaderEvent": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.apply_shader.vtk_shader_callback": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      56,
      61
     ]
    },
    "dipy.viz.actor": {
     "line number": [
      55,
      60
     ]
    },
    "dipy.viz.window.vtk.VTK_OBJECT": {
     "line number": [
      49
     ]
    },
    "dipy.viz.window.vtk.calldata_type": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.build_label": {
  "data": {
   "shadows": "dipy.viz.panel.build_label"
  },
  "type": "import"
 },
 "dipy.viz.app.distinguishable_colormap": {
  "data": {
   "shadows": "fury.colormap.distinguishable_colormap"
  },
  "type": "import"
 },
 "dipy.viz.app.horizon": {
  "data": {
   "lineno": 748,
   "symbols_in_volume": {
    "dipy.viz.app.Horizon": {
     "line number": [
      809
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.app.horizon_version": {
  "data": {
   "shadows": "dipy.__version__"
  },
  "type": "import"
 },
 "dipy.viz.app.length": {
  "data": {
   "shadows": "dipy.tracking.streamline.length"
  },
  "type": "import"
 },
 "dipy.viz.app.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.viz.app.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.viz.app.qbx_and_merge": {
  "data": {
   "shadows": "dipy.segment.clustering.qbx_and_merge"
  },
  "type": "import"
 },
 "dipy.viz.app.save_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.save_tractogram"
  },
  "type": "import"
 },
 "dipy.viz.app.slicer_panel": {
  "data": {
   "shadows": "dipy.viz.panel.slicer_panel"
  },
  "type": "import"
 },
 "dipy.viz.app.ui": {
  "data": {
   "shadows": "dipy.viz.ui"
  },
  "type": "import"
 },
 "dipy.viz.app.vtk": {
  "data": {
   "shadows": "dipy.viz.vtk"
  },
  "type": "import"
 },
 "dipy.viz.app.window": {
  "data": {
   "shadows": "dipy.viz.window"
  },
  "type": "import"
 },
 "dipy.viz.colormap": {
  "data": {
   "shadows": "fury.colormap"
  },
  "type": "import"
 },
 "dipy.viz.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.viz.fetch_viz_icons": {
  "data": {
   "shadows": "fury.data.fetch_viz_icons"
  },
  "type": "import"
 },
 "dipy.viz.gmem": {
  "data": {},
  "type": "module"
 },
 "dipy.viz.gmem.GlobalHorizon": {
  "data": {
   "lineno": 3,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.viz.gmem.GlobalHorizon.__init__": {
  "data": {
   "lineno": 4
  },
  "type": "function"
 },
 "dipy.viz.interactor": {
  "data": {
   "shadows": "fury.interactor"
  },
  "type": "import"
 },
 "dipy.viz.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.viz.panel": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.viz.panel.GlobalHorizon": {
  "data": {
   "shadows": "dipy.viz.gmem.GlobalHorizon"
  },
  "type": "import"
 },
 "dipy.viz.panel._color_dslider": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "dipy.viz.panel._color_slider": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "dipy.viz.panel.actor": {
  "data": {
   "shadows": "dipy.viz.actor"
  },
  "type": "import"
 },
 "dipy.viz.panel.build_label": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "dipy.viz.ui.TextBlock2D": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.colormap": {
  "data": {
   "shadows": "dipy.viz.colormap"
  },
  "type": "import"
 },
 "dipy.viz.panel.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "dipy.viz.panel.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.viz.panel.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.viz.panel.slicer_panel": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "apply_colormap": {
     "line number": [
      531
     ]
    },
    "dipy.viz.actor.peak_slicer": {
     "line number": [
      116
     ]
    },
    "dipy.viz.actor.slicer": {
     "line number": [
      99
     ]
    },
    "dipy.viz.gmem.GlobalHorizon": {
     "line number": [
      59
     ]
    },
    "dipy.viz.panel._color_dslider": {
     "line number": [
      202
     ]
    },
    "dipy.viz.panel._color_slider": {
     "line number": [
      153,
      170,
      185,
      252,
      268
     ]
    },
    "dipy.viz.panel.build_label": {
     "line number": [
      393,
      411,
      429,
      448,
      449,
      450,
      451
     ]
    },
    "dipy.viz.panel.itertools": {
     "line number": [
      395,
      413,
      431
     ]
    },
    "dipy.viz.ui.LineDoubleSlider2D": {
     "line number": [
      196
     ]
    },
    "dipy.viz.ui.LineSlider2D": {
     "line number": [
      147,
      164,
      179,
      246,
      261
     ]
    },
    "dipy.viz.ui.Panel2D": {
     "line number": [
      496
     ]
    },
    "int": {
     "line number": [
      124,
      132,
      378,
      379,
      380
     ]
    },
    "len": {
     "line number": [
      104
     ]
    },
    "numpy.eye": {
     "line number": [
      97
     ]
    },
    "numpy.linspace": {
     "line number": [
      502
     ]
    },
    "numpy.percentile": {
     "line number": [
      89,
      94
     ]
    },
    "numpy.round": {
     "line number": [
      124,
      132,
      378,
      379,
      380
     ]
    },
    "print": {
     "line number": [
      82,
      106,
      108,
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.apply_colormap": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "dipy.viz.colormap.create_colormap": {
     "line number": [
      214
     ]
    },
    "dipy.viz.colormap.distinguishable_colormap": {
     "line number": [
      210
     ]
    },
    "dipy.viz.colormap.vtk.vtkLookupTable": {
     "line number": [
      219
     ]
    },
    "numpy.asarray": {
     "line number": [
      211
     ]
    },
    "numpy.linspace": {
     "line number": [
      214
     ]
    },
    "range": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.change_opacity": {
  "data": {
   "lineno": 254
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.change_slice_x": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": {
    "int": {
     "line number": [
      173
     ]
    },
    "numpy.round": {
     "line number": [
      173
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.change_slice_y": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "int": {
     "line number": [
      188
     ]
    },
    "numpy.round": {
     "line number": [
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.change_slice_z": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "int": {
     "line number": [
      156
     ]
    },
    "numpy.round": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.change_volume": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": {
    "apply_colormap": {
     "line number": [
      330
     ]
    },
    "dipy.viz.actor.slicer": {
     "line number": [
      279
     ]
    },
    "int": {
     "line number": [
      271
     ]
    },
    "numpy.round": {
     "line number": [
      271
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.label_callback_x": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": {
    "next": {
     "line number": [
      400
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.label_callback_y": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": {
    "next": {
     "line number": [
      418
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.label_callback_z": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": {
    "next": {
     "line number": [
      436
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.label_colormap_callback": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": {
    "apply_colormap": {
     "line number": [
      465
     ]
    },
    "len": {
     "line number": [
      455
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.label_opacity_callback": {
  "data": {
   "lineno": 473
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.left_click_picker_callback": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      348
     ]
    },
    "str": {
     "line number": [
      350,
      350,
      350
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.slicer_panel.on_change_ds": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "apply_colormap": {
     "line number": [
      235
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.panel.ui": {
  "data": {
   "shadows": "dipy.viz.ui"
  },
  "type": "import"
 },
 "dipy.viz.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.viz.projections": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      14,
      15,
      16,
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.viz.projections.Basemap": {
  "data": {
   "shadows": "mpl_toolkits.basemap.Basemap"
  },
  "type": "import"
 },
 "dipy.viz.projections.doctest_skip_parser": {
  "data": {
   "shadows": "dipy.testing.decorators.doctest_skip_parser"
  },
  "type": "import"
 },
 "dipy.viz.projections.geo": {
  "data": {
   "shadows": "dipy.core.geometry"
  },
  "type": "import"
 },
 "dipy.viz.projections.interp": {
  "data": {
   "shadows": "scipy.interpolate"
  },
  "type": "import"
 },
 "dipy.viz.projections.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.viz.projections.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.viz.projections.sph_project": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "blue_interp": {
     "line number": [
      119
     ]
    },
    "dipy.core.geometry.cart2sphere": {
     "line number": [
      88
     ]
    },
    "dipy.core.geometry.sph2latlon": {
     "line number": [
      89
     ]
    },
    "dipy.testing.decorators.doctest_skip_parser": {
     "line number": [
      20
     ]
    },
    "float": {
     "line number": [
      110
     ]
    },
    "green_interp": {
     "line number": [
      120
     ]
    },
    "m": {
     "line number": [
      90
     ]
    },
    "m.pcolor": {
     "line number": [
      101
     ]
    },
    "m.plot": {
     "line number": [
      121
     ]
    },
    "mpl_toolkits.basemap.Basemap": {
     "line number": [
      73
     ]
    },
    "numpy.array": {
     "line number": [
      78,
      79,
      106,
      107
     ]
    },
    "numpy.dot": {
     "line number": [
      79
     ]
    },
    "numpy.nanmax": {
     "line number": [
      96
     ]
    },
    "numpy.nanmin": {
     "line number": [
      92
     ]
    },
    "numpy.where": {
     "line number": [
      83
     ]
    },
    "red_interp": {
     "line number": [
      118
     ]
    },
    "scipy.interpolate.interp1d": {
     "line number": [
      106
     ]
    },
    "zip": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.read_viz_icons": {
  "data": {
   "shadows": "fury.data.read_viz_icons"
  },
  "type": "import"
 },
 "dipy.viz.regtools": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      3,
      4
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.viz.regtools._tile_plot": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      13
     ]
    },
    "len": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.regtools.draw_lattice_2d": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "numpy.float64": {
     "line number": [
      134
     ]
    },
    "numpy.ndarray": {
     "line number": [
      132
     ]
    },
    "range": {
     "line number": [
      140,
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.regtools.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.viz.regtools.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.viz.regtools.overlay_images": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "dipy.viz.regtools._tile_plot": {
     "line number": [
      97
     ]
    },
    "numpy.uint8": {
     "line number": [
      86,
      87,
      88
     ]
    },
    "numpy.zeros": {
     "line number": [
      86,
      87,
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.regtools.overlay_slices": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "dipy.viz.regtools._tile_plot": {
     "line number": [
      416
     ]
    },
    "numpy.asarray": {
     "line number": [
      380,
      381,
      391,
      392,
      397,
      398,
      403,
      404
     ]
    },
    "numpy.float64": {
     "line number": [
      380,
      381
     ]
    },
    "numpy.uint8": {
     "line number": [
      390,
      391,
      392,
      396,
      397,
      398,
      402,
      403,
      404
     ]
    },
    "numpy.zeros": {
     "line number": [
      390,
      396,
      402
     ]
    },
    "print": {
     "line number": [
      406
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.regtools.plot_2d_diffeomorphic_map": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "dipy.viz.regtools.draw_lattice_2d": {
     "line number": [
      253,
      270
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      250,
      267
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.regtools.plot_slices": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "dipy.viz.regtools._tile_plot": {
     "line number": [
      332
     ]
    },
    "numpy.array": {
     "line number": [
      321
     ]
    },
    "numpy.asarray": {
     "line number": [
      324,
      328,
      329,
      330
     ]
    },
    "numpy.float64": {
     "line number": [
      324
     ]
    },
    "numpy.uint8": {
     "line number": [
      328,
      329,
      330
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.regtools.simple_plot": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "dipy.viz.tests": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.Tester": {
     "line number": [
      4,
      5
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.viz.tests.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.viz.tests.test": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "dipy.viz.tests.test_apps": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      130
     ]
    },
    "dipy.testing.decorators.use_xvfb": {
     "line number": [
      17
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      12
     ]
    },
    "dipy.viz.tests.test_apps.test_horizon": {
     "line number": [
      133
     ]
    },
    "dipy.viz.tests.test_apps.test_horizon_events": {
     "line number": [
      132
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.viz.tests.test_apps.DATA_DIR": {
  "data": {
   "shadows": "dipy.data.DATA_DIR"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.create_nifti_header": {
  "data": {
   "shadows": "dipy.io.utils.create_nifti_header"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.f1": {
  "data": {
   "shadows": "dipy.segment.tests.test_bundles.f1"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.horizon": {
  "data": {
   "shadows": "dipy.viz.app.horizon"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.setup_module": {
  "data": {
   "shadows": "dipy.segment.tests.test_bundles.setup_module"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_apps.skip_it": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "dipy.viz.tests.test_apps.test_horizon": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      107
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      94
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      94
     ]
    },
    "dipy.io.utils.create_nifti_header": {
     "line number": [
      93
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      78
     ]
    },
    "dipy.viz.app.horizon": {
     "line number": [
      99,
      108,
      118,
      124
     ]
    },
    "dipy.viz.tests.test_apps.pytest": {
     "line number": [
      57
     ]
    },
    "dipy.viz.tests.test_apps.skip_it": {
     "line number": [
      57
     ]
    },
    "numpy.array": {
     "line number": [
      60,
      66,
      72,
      83,
      91
     ]
    },
    "numpy.inf": {
     "line number": [
      100,
      101,
      109,
      110,
      119,
      120,
      125,
      126
     ]
    },
    "numpy.random.rand": {
     "line number": [
      88
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      114
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      107
     ]
    },
    "str": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.tests.test_apps.test_horizon_events": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "dipy.data.DATA_DIR": {
     "line number": [
      47
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      40
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      40
     ]
    },
    "dipy.io.utils.create_nifti_header": {
     "line number": [
      39
     ]
    },
    "dipy.segment.tests.test_bundles.f1.copy": {
     "line number": [
      36
     ]
    },
    "dipy.segment.tests.test_bundles.setup_module": {
     "line number": [
      34
     ]
    },
    "dipy.viz.app.horizon": {
     "line number": [
      49
     ]
    },
    "dipy.viz.tests.test_apps.os": {
     "line number": [
      47
     ]
    },
    "dipy.viz.tests.test_apps.pytest": {
     "line number": [
      20
     ]
    },
    "dipy.viz.tests.test_apps.skip_it": {
     "line number": [
      20
     ]
    },
    "numpy.array": {
     "line number": [
      23,
      37
     ]
    },
    "numpy.inf": {
     "line number": [
      51,
      52
     ]
    },
    "numpy.random.rand": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.tests.test_apps.use_xvfb": {
  "data": {
   "shadows": "dipy.testing.decorators.use_xvfb"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_regtools": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.viz.tests.test_regtools.SSDMetric": {
  "data": {
   "shadows": "dipy.align.metrics.SSDMetric"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_regtools.SymmetricDiffeomorphicRegistration": {
  "data": {
   "shadows": "dipy.align.imwarp.SymmetricDiffeomorphicRegistration"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_regtools.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_regtools.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_regtools.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_regtools.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_regtools.regtools": {
  "data": {
   "shadows": "dipy.viz.regtools"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_regtools.test_plot_2d_diffeomorphic_map": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      24
     ]
    },
    "dipy.align.metrics.SSDMetric": {
     "line number": [
      22
     ]
    },
    "dipy.viz.regtools.plot_2d_diffeomorphic_map": {
     "line number": [
      29,
      34
     ]
    },
    "dipy.viz.tests.test_regtools.pytest": {
     "line number": [
      14
     ]
    },
    "numpy.random.rand": {
     "line number": [
      18,
      20
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      31,
      32,
      38,
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.tests.test_viz_import": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      8
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.viz.tests.test_viz_import.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_viz_import.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_viz_import.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_viz_import.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.viz.tests.test_viz_import.test_viz_import_warning": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "dipy.viz.tests.test_viz_import.importlib": {
     "line number": [
      16,
      18
     ]
    },
    "dipy.viz.tests.test_viz_import.pytest": {
     "line number": [
      11
     ]
    },
    "dipy.viz.tests.test_viz_import.sys": {
     "line number": [
      15,
      16
     ]
    },
    "dipy.viz.tests.test_viz_import.warnings": {
     "line number": [
      13
     ]
    },
    "len": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.viz.tests.test_viz_import.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.viz.ui": {
  "data": {
   "shadows": "fury.ui"
  },
  "type": "import"
 },
 "dipy.viz.utils": {
  "data": {
   "shadows": "fury.utils"
  },
  "type": "import"
 },
 "dipy.viz.vtk": {
  "data": {
   "shadows": "fury.window.vtk"
  },
  "type": "import"
 },
 "dipy.viz.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.viz.window": {
  "data": {
   "shadows": "fury.window"
  },
  "type": "import"
 },
 "dipy.workflows": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.align": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.align.AffineMap": {
  "data": {
   "shadows": "dipy.align.imaffine.AffineMap"
  },
  "type": "import"
 },
 "dipy.workflows.align.AffineRegistration": {
  "data": {
   "shadows": "dipy.align.imaffine.AffineRegistration"
  },
  "type": "import"
 },
 "dipy.workflows.align.AffineTransform3D": {
  "data": {
   "shadows": "dipy.align.transforms.AffineTransform3D"
  },
  "type": "import"
 },
 "dipy.workflows.align.ApplyTransformFlow": {
  "data": {
   "lineno": 646,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      646
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.align.ApplyTransformFlow.run": {
  "data": {
   "lineno": 648,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      681
     ]
    },
    "dipy.align.imaffine.AffineMap": {
     "line number": [
      703
     ]
    },
    "dipy.align.imwarp.DiffeomorphicMap": {
     "line number": [
      714
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      691,
      692,
      712
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      729
     ]
    },
    "dipy.workflows.align.check_dimensions": {
     "line number": [
      696
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      716
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      700
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.CCMetric": {
  "data": {
   "shadows": "dipy.align.metrics.CCMetric"
  },
  "type": "import"
 },
 "dipy.workflows.align.DiffeomorphicMap": {
  "data": {
   "shadows": "dipy.align.imwarp.DiffeomorphicMap"
  },
  "type": "import"
 },
 "dipy.workflows.align.EMMetric": {
  "data": {
   "shadows": "dipy.align.metrics.EMMetric"
  },
  "type": "import"
 },
 "dipy.workflows.align.ImageRegistrationFlow": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.align.ImageRegistrationFlow.affine": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": {
    "dipy.align.transforms.AffineTransform3D": {
     "line number": [
      487
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.ImageRegistrationFlow.center_of_mass": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "dipy.align.imaffine.transform_centers_of_mass": {
     "line number": [
      333
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.ImageRegistrationFlow.perform_transformation": {
  "data": {
   "lineno": 256
  },
  "type": "function"
 },
 "dipy.workflows.align.ImageRegistrationFlow.rigid": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": {
    "dipy.align.transforms.RigidTransform3D": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.ImageRegistrationFlow.run": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      586,
      628
     ]
    },
    "dipy.align.imaffine.AffineRegistration": {
     "line number": [
      594
     ]
    },
    "dipy.align.imaffine.MutualInformationMetric": {
     "line number": [
      588
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      572,
      573
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      642
     ]
    },
    "dipy.io.image.save_qa_metric": {
     "line number": [
      640
     ]
    },
    "dipy.workflows.align.check_dimensions": {
     "line number": [
      575
     ]
    },
    "dipy.workflows.align.logging": {
     "line number": [
      636,
      637
     ]
    },
    "numpy.savetxt": {
     "line number": [
      643
     ]
    },
    "str": {
     "line number": [
      636,
      637
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.ImageRegistrationFlow.translate": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "dipy.align.transforms.TranslationTransform3D": {
     "line number": [
      379
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.MutualInformationMetric": {
  "data": {
   "shadows": "dipy.align.imaffine.MutualInformationMetric"
  },
  "type": "import"
 },
 "dipy.workflows.align.ResliceFlow": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.align.ResliceFlow.get_short_name": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.ResliceFlow.run": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "dipy.align.reslice.reslice": {
     "line number": [
      93
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      91
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      96
     ]
    },
    "dipy.workflows.align.logging": {
     "line number": [
      92,
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.RigidTransform3D": {
  "data": {
   "shadows": "dipy.align.transforms.RigidTransform3D"
  },
  "type": "import"
 },
 "dipy.workflows.align.SSDMetric": {
  "data": {
   "shadows": "dipy.align.metrics.SSDMetric"
  },
  "type": "import"
 },
 "dipy.workflows.align.SlrWithQbxFlow": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.align.SlrWithQbxFlow.get_short_name": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.SlrWithQbxFlow.run": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "dipy.align.streamlinear.slr_with_qbx": {
     "line number": [
      201
     ]
    },
    "dipy.tracking.streamline.transform_streamlines": {
     "line number": [
      229
     ]
    },
    "dipy.workflows.align.logging": {
     "line number": [
      184,
      185,
      191,
      192,
      206,
      212,
      215,
      222,
      231
     ]
    },
    "nibabel.streamlines.Tractogram": {
     "line number": [
      207,
      217,
      224,
      234
     ]
    },
    "nibabel.streamlines.load": {
     "line number": [
      194,
      195
     ]
    },
    "nibabel.streamlines.save": {
     "line number": [
      209,
      219,
      226,
      236
     ]
    },
    "numpy.eye": {
     "line number": [
      208,
      218,
      225,
      235
     ]
    },
    "numpy.savetxt": {
     "line number": [
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.SymmetricDiffeomorphicRegistration": {
  "data": {
   "shadows": "dipy.align.imwarp.SymmetricDiffeomorphicRegistration"
  },
  "type": "import"
 },
 "dipy.workflows.align.SynRegistrationFlow": {
  "data": {
   "lineno": 732,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      732
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.align.SynRegistrationFlow.run": {
  "data": {
   "lineno": 734,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      852
     ]
    },
    "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": {
     "line number": [
      908
     ]
    },
    "dipy.align.metrics.CCMetric": {
     "line number": [
      895
     ]
    },
    "dipy.align.metrics.EMMetric": {
     "line number": [
      898
     ]
    },
    "dipy.align.metrics.SSDMetric": {
     "line number": [
      890
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      881,
      882
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      927,
      929
     ]
    },
    "dipy.workflows.align.check_dimensions": {
     "line number": [
      885
     ]
    },
    "dipy.workflows.align.logging": {
     "line number": [
      855,
      856,
      877,
      878,
      926,
      928
     ]
    },
    "numpy.array": {
     "line number": [
      922
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      888
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.TranslationTransform3D": {
  "data": {
   "shadows": "dipy.align.transforms.TranslationTransform3D"
  },
  "type": "import"
 },
 "dipy.workflows.align.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.align.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.workflows.align.check_dimensions": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      39,
      43
     ]
    },
    "len": {
     "line number": [
      38,
      38,
      42,
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.align.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.align.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.align.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.workflows.align.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.workflows.align.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.align.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.workflows.align.reslice": {
  "data": {
   "shadows": "dipy.align.reslice.reslice"
  },
  "type": "import"
 },
 "dipy.workflows.align.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.align.save_qa_metric": {
  "data": {
   "shadows": "dipy.io.image.save_qa_metric"
  },
  "type": "import"
 },
 "dipy.workflows.align.slr_with_qbx": {
  "data": {
   "shadows": "dipy.align.streamlinear.slr_with_qbx"
  },
  "type": "import"
 },
 "dipy.workflows.align.transform_centers_of_mass": {
  "data": {
   "shadows": "dipy.align.imaffine.transform_centers_of_mass"
  },
  "type": "import"
 },
 "dipy.workflows.align.transform_streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.transform_streamlines"
  },
  "type": "import"
 },
 "dipy.workflows.base": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "dipy.workflows.base.argparse": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser.__init__": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "dipy.workflows.base.IntrospectiveArgumentParser": {
     "line number": [
      59
     ]
    },
    "dipy.workflows.base.argparse": {
     "line number": [
      26
     ]
    },
    "super": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser._select_dtype": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      288
     ]
    },
    "float": {
     "line number": [
      286
     ]
    },
    "int": {
     "line number": [
      284
     ]
    },
    "str": {
     "line number": [
      282
     ]
    },
    "tuple": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser.add_description": {
  "data": {
   "lineno": 314
  },
  "type": "function"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue": {
  "data": {
   "lineno": 311
  },
  "type": "function"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      239,
      246
     ]
    },
    "dict": {
     "line number": [
      205,
      241
     ]
    },
    "dipy.workflows.base.get_args_default": {
     "line number": [
      212
     ]
    },
    "dipy.workflows.base.inspect": {
     "line number": [
      208
     ]
    },
    "dipy.workflows.docstring_parser.NumpyDocString": {
     "line number": [
      209
     ]
    },
    "enumerate": {
     "line number": [
      221
     ]
    },
    "int": {
     "line number": [
      247
     ]
    },
    "len": {
     "line number": [
      214,
      215
     ]
    },
    "str": {
     "line number": [
      251
     ]
    },
    "tuple": {
     "line number": [
      250
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser.add_workflow": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      129,
      179
     ]
    },
    "bool": {
     "line number": [
      152,
      159
     ]
    },
    "dict": {
     "line number": [
      154
     ]
    },
    "dipy.workflows.base.get_args_default": {
     "line number": [
      120
     ]
    },
    "dipy.workflows.base.inspect": {
     "line number": [
      97
     ]
    },
    "dipy.workflows.docstring_parser.NumpyDocString": {
     "line number": [
      98
     ]
    },
    "enumerate": {
     "line number": [
      135
     ]
    },
    "int": {
     "line number": [
      160
     ]
    },
    "len": {
     "line number": [
      107,
      124,
      125,
      128
     ]
    },
    "str": {
     "line number": [
      164
     ]
    },
    "tuple": {
     "line number": [
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      301
     ]
    },
    "vars": {
     "line number": [
      300
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser.optional_parameters": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "property": {
     "line number": [
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser.output_parameters": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "property": {
     "line number": [
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser.positional_parameters": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": {
    "property": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser.show_argument": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": {
    "print": {
     "line number": [
      309
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.base.IntrospectiveArgumentParser.update_argument": {
  "data": {
   "lineno": 303
  },
  "type": "function"
 },
 "dipy.workflows.base.NumpyDocString": {
  "data": {
   "shadows": "dipy.workflows.docstring_parser.NumpyDocString"
  },
  "type": "import"
 },
 "dipy.workflows.base.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "dipy.workflows.base.get_args_default": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "dipy.workflows.base.inspect": {
     "line number": [
      10,
      14,
      16
     ]
    },
    "dipy.workflows.base.sys": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.base.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "dipy.workflows.base.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.workflows.combined_workflow": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.combined_workflow.CombinedWorkflow": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.combined_workflow.CombinedWorkflow.__init__": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "dipy.workflows.combined_workflow.CombinedWorkflow": {
     "line number": [
      14
     ]
    },
    "super": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.combined_workflow.CombinedWorkflow._get_sub_flows": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals": {
  "data": {
   "lineno": 44
  },
  "type": "function"
 },
 "dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "type": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.combined_workflow.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.combined_workflow.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.workflows.combined_workflow.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.combined_workflow.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.workflows.denoise": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.denoise.GibbsRingingFlow": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.denoise.GibbsRingingFlow.get_short_name": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      241
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.denoise.GibbsRingingFlow.run": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": {
    "dipy.denoise.gibbs.gibbs_removal": {
     "line number": [
      281
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      279
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      284
     ]
    },
    "dipy.workflows.denoise.logging": {
     "line number": [
      278,
      285
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.denoise.LPCAFlow": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.denoise.LPCAFlow.get_short_name": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.denoise.LPCAFlow.run": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      163
     ]
    },
    "dipy.denoise.localpca.localpca": {
     "line number": [
      169
     ]
    },
    "dipy.denoise.pca_noise_estimate.pca_noise_estimate": {
     "line number": [
      165
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      162
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      158
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      173
     ]
    },
    "dipy.workflows.denoise.logging": {
     "line number": [
      157,
      161,
      167,
      175
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.denoise.MPPCAFlow": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.denoise.MPPCAFlow.get_short_name": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.denoise.MPPCAFlow.run": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "dipy.denoise.localpca.mppca": {
     "line number": [
      229
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      227
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      233,
      236
     ]
    },
    "dipy.workflows.denoise.logging": {
     "line number": [
      226,
      234,
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.denoise.NLMeansFlow": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.denoise.NLMeansFlow.get_short_name": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.denoise.NLMeansFlow.run": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "dipy.denoise.nlmeans.nlmeans": {
     "line number": [
      72
     ]
    },
    "dipy.denoise.noise_estimate.estimate_sigma": {
     "line number": [
      69
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      65
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      76
     ]
    },
    "dipy.workflows.denoise.logging": {
     "line number": [
      62,
      64,
      68,
      70,
      78
     ]
    },
    "dipy.workflows.denoise.shutil": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.denoise.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.estimate_sigma": {
  "data": {
   "shadows": "dipy.denoise.noise_estimate.estimate_sigma"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.gibbs_removal": {
  "data": {
   "shadows": "dipy.denoise.gibbs.gibbs_removal"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.localpca": {
  "data": {
   "shadows": "dipy.denoise.localpca.localpca"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.mppca": {
  "data": {
   "shadows": "dipy.denoise.localpca.mppca"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.nlmeans": {
  "data": {
   "shadows": "dipy.denoise.nlmeans.nlmeans"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.pca_noise_estimate": {
  "data": {
   "shadows": "dipy.denoise.pca_noise_estimate.pca_noise_estimate"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.denoise.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "dipy.workflows.docstring_parser": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.docstring_parser.NumpyDocString": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "dipy.workflows.docstring_parser.re": {
     "line number": [
      223,
      224
     ]
    },
    "object": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.docstring_parser.NumpyDocString.__getitem__": {
  "data": {
   "lineno": 147
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString.__init__": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "dipy.workflows.docstring_parser.Reader": {
     "line number": [
      123
     ]
    },
    "dipy.workflows.docstring_parser.textwrap": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString.__setitem__": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "warnings.warn": {
     "line number": [
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString.__str__": {
  "data": {
   "lineno": 427
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._is_at_section": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "len": {
     "line number": [
      168,
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._parse": {
  "data": {
   "lineno": 322
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._parse_index": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "len": {
     "line number": [
      293,
      297
     ]
    },
    "strip_each_in": {
     "line number": [
      294,
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._parse_index.strip_each_in": {
  "data": {
   "lineno": 288
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._parse_param_list": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": {
    "dipy.workflows.docstring_parser.Reader": {
     "line number": [
      207
     ]
    },
    "dipy.workflows.docstring_parser.dedent_lines": {
     "line number": [
      217
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._parse_see_also": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": {
    "push_item": {
     "line number": [
      263,
      269,
      274,
      279
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._parse_see_also.parse_item_name": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._parse_see_also.push_item": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "list": {
     "line number": [
      251
     ]
    },
    "parse_item_name": {
     "line number": [
      250
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._parse_summary": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": {
    "dipy.workflows.docstring_parser.re": {
     "line number": [
      310
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._read_sections": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": {
    "StopIteration": {
     "line number": [
      202
     ]
    },
    "len": {
     "line number": [
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._read_to_next_section": {
  "data": {
   "lineno": 183
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._str_extended_summary": {
  "data": {
   "lineno": 364
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._str_header": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "len": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._str_indent": {
  "data": {
   "lineno": 346
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._str_index": {
  "data": {
   "lineno": 417
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._str_param_list": {
  "data": {
   "lineno": 370
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._str_section": {
  "data": {
   "lineno": 383
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._str_see_also": {
  "data": {
   "lineno": 391
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._str_signature": {
  "data": {
   "lineno": 352
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._str_summary": {
  "data": {
   "lineno": 358
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.NumpyDocString._strip": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      173,
      177
     ]
    },
    "len": {
     "line number": [
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "object": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.docstring_parser.Reader.__getitem__": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.__init__": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      51
     ]
    },
    "list": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.eof": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "len": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.is_empty": {
  "data": {
   "lineno": 110
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.peek": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "len": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.read": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.read_to_condition": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "condition_func": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.read_to_next_empty_line": {
  "data": {
   "lineno": 92
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.read_to_next_empty_line.is_empty": {
  "data": {
   "lineno": 95
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line": {
  "data": {
   "lineno": 99
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line.is_unindented": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "len": {
     "line number": [
      101,
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.reset": {
  "data": {
   "lineno": 61
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line": {
  "data": {
   "lineno": 72
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.workflows.docstring_parser.dedent_lines": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "dipy.workflows.docstring_parser.textwrap": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.docstring_parser.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.docstring_parser.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.workflows.docstring_parser.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "dipy.workflows.docstring_parser.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "dipy.workflows.docstring_parser.warn": {
  "data": {
   "shadows": "warnings.warn"
  },
  "type": "import"
 },
 "dipy.workflows.flow_runner": {
  "data": {
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      6
     ]
    },
    "dipy.workflows.flow_runner.warnings": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.flow_runner.IntrospectiveArgumentParser": {
  "data": {
   "shadows": "dipy.workflows.base.IntrospectiveArgumentParser"
  },
  "type": "import"
 },
 "dipy.workflows.flow_runner.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.workflows.flow_runner.dipy_version": {
  "data": {
   "shadows": "dipy.__version__"
  },
  "type": "import"
 },
 "dipy.workflows.flow_runner.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.flow_runner.get_level": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      20
     ]
    },
    "dipy.workflows.flow_runner.logging": {
     "line number": [
      19,
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.flow_runner.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.workflows.flow_runner.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.workflows.flow_runner.run_flow": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "dipy.__version__": {
     "line number": [
      39
     ]
    },
    "dipy.workflows.base.IntrospectiveArgumentParser": {
     "line number": [
      30
     ]
    },
    "dipy.workflows.flow_runner.get_level": {
     "line number": [
      64
     ]
    },
    "dipy.workflows.flow_runner.logging": {
     "line number": [
      62
     ]
    },
    "list": {
     "line number": [
      79,
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.flow_runner.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dipy.workflows.io": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.io.FetchFlow": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.io.FetchFlow.get_fetcher_datanames": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      134
     ]
    },
    "dipy.workflows.io.FetchFlow": {
     "line number": [
      132
     ]
    },
    "inspect.getmembers": {
     "line number": [
      135
     ]
    },
    "inspect.isfunction": {
     "line number": [
      136
     ]
    },
    "staticmethod": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.io.FetchFlow.get_short_name": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.io.FetchFlow.load_module": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "dipy.workflows.io.importlib": {
     "line number": [
      157,
      159
     ]
    },
    "dipy.workflows.io.sys": {
     "line number": [
      156,
      157
     ]
    },
    "staticmethod": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.io.FetchFlow.run": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "dipy.workflows.io.FetchFlow": {
     "line number": [
      178
     ]
    },
    "dipy.workflows.io.logging": {
     "line number": [
      184,
      185,
      186,
      190,
      200,
      201,
      202,
      207,
      210,
      212
     ]
    },
    "dipy.workflows.io.os": {
     "line number": [
      175,
      176,
      218,
      220
     ]
    },
    "fetcher_function": {
     "line number": [
      187
     ]
    },
    "len": {
     "line number": [
      205,
      205,
      208
     ]
    },
    "print": {
     "line number": [
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.io.IoInfoFlow": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.io.IoInfoFlow.get_short_name": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.io.IoInfoFlow.run": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "dipy.io.image.load_nifti": {
     "line number": [
      52
     ]
    },
    "dipy.workflows.io.logging": {
     "line number": [
      44,
      45,
      46,
      57,
      58,
      61,
      63,
      67,
      72,
      75,
      77,
      78,
      82,
      86,
      87,
      89,
      90,
      97,
      102,
      107,
      109
     ]
    },
    "dipy.workflows.io.os": {
     "line number": [
      84,
      94
     ]
    },
    "len": {
     "line number": [
      43,
      87,
      108
     ]
    },
    "numpy.abs": {
     "line number": [
      79
     ]
    },
    "numpy.array": {
     "line number": [
      78,
      103
     ]
    },
    "numpy.diff": {
     "line number": [
      79,
      88
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      103
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      85,
      96
     ]
    },
    "numpy.percentile": {
     "line number": [
      64,
      65,
      73,
      74
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      38,
      112
     ]
    },
    "numpy.sort": {
     "line number": [
      88
     ]
    },
    "numpy.sum": {
     "line number": [
      79,
      88,
      91,
      106
     ]
    },
    "numpy.where": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.io.SplitFlow": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      228
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.io.SplitFlow.get_short_name": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      229
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.io.SplitFlow.run": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "dipy.io.image.load_nifti": {
     "line number": [
      252
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      258
     ]
    },
    "dipy.workflows.io.logging": {
     "line number": [
      251,
      255,
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.io.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.io.getfullargspec": {
  "data": {
   "shadows": "inspect.getfullargspec"
  },
  "type": "import"
 },
 "dipy.workflows.io.getmembers": {
  "data": {
   "shadows": "inspect.getmembers"
  },
  "type": "import"
 },
 "dipy.workflows.io.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "dipy.workflows.io.isfunction": {
  "data": {
   "shadows": "inspect.isfunction"
  },
  "type": "import"
 },
 "dipy.workflows.io.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.io.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.workflows.io.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.io.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.workflows.io.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.io.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "dipy.workflows.io.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.workflows.mask": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.mask.MaskFlow": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.mask.MaskFlow.get_short_name": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.mask.MaskFlow.run": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "dipy.io.image.load_nifti": {
     "line number": [
      43
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      45
     ]
    },
    "dipy.workflows.mask.logging": {
     "line number": [
      35,
      42,
      46
     ]
    },
    "numpy.bitwise_and": {
     "line number": [
      44
     ]
    },
    "numpy.inf": {
     "line number": [
      16
     ]
    },
    "numpy.ubyte": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.mask.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.mask.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.mask.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.mask.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.workflows.mask.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.mask.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.multi_io": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.multi_io.IOIterator": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "object": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.multi_io.IOIterator.__init__": {
  "data": {
   "lineno": 209
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.IOIterator.__iter__": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": {
    "len": {
     "line number": [
      260
     ]
    },
    "numpy.array": {
     "line number": [
      256,
      257
     ]
    },
    "numpy.concatenate": {
     "line number": [
      258
     ]
    },
    "str": {
     "line number": [
      261
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.IOIterator.create_directories": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": {
    "dipy.workflows.multi_io.os": {
     "line number": [
      251,
      252,
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.IOIterator.create_outputs": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      246
     ]
    },
    "dipy.workflows.multi_io.connect_output_paths": {
     "line number": [
      236
     ]
    },
    "len": {
     "line number": [
      235
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.IOIterator.file_existence_check": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      269
     ]
    },
    "glob.glob": {
     "line number": [
      268
     ]
    },
    "isinstance": {
     "line number": [
      266
     ]
    },
    "len": {
     "line number": [
      268
     ]
    },
    "list": {
     "line number": [
      266
     ]
    },
    "str": {
     "line number": [
      266
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.IOIterator.set_inputs": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "all": {
     "line number": [
      221
     ]
    },
    "dipy.workflows.multi_io.itertools": {
     "line number": [
      223
     ]
    },
    "glob.glob": {
     "line number": [
      220,
      222
     ]
    },
    "isinstance": {
     "line number": [
      221,
      222
     ]
    },
    "list": {
     "line number": [
      217,
      221,
      223
     ]
    },
    "sorted": {
     "line number": [
      220,
      222
     ]
    },
    "str": {
     "line number": [
      219,
      221,
      222
     ]
    },
    "type": {
     "line number": [
      219,
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.IOIterator.set_out_dir": {
  "data": {
   "lineno": 225
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.IOIterator.set_out_fnames": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "list": {
     "line number": [
      229
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.IOIterator.set_output_keys": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "list": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.basename_without_extension": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "dipy.workflows.multi_io.os": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.common_start": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "_iter": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.common_start._iter": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "zip": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.concatenate_inputs": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "dipy.workflows.multi_io.basename_without_extension": {
     "line number": [
      106
     ]
    },
    "enumerate": {
     "line number": [
      105
     ]
    },
    "zip": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.connect_output_paths": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      63
     ]
    },
    "dipy.workflows.multi_io.concatenate_inputs": {
     "line number": [
      71
     ]
    },
    "dipy.workflows.multi_io.os": {
     "line number": [
      76,
      78,
      80,
      81,
      82,
      85,
      92
     ]
    },
    "enumerate": {
     "line number": [
      66
     ]
    },
    "isinstance": {
     "line number": [
      53,
      55
     ]
    },
    "len": {
     "line number": [
      58,
      73
     ]
    },
    "numpy.max": {
     "line number": [
      60
     ]
    },
    "numpy.min": {
     "line number": [
      61
     ]
    },
    "str": {
     "line number": [
      53,
      55
     ]
    },
    "zip": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.get_args_default": {
  "data": {
   "shadows": "dipy.workflows.base.get_args_default"
  },
  "type": "import"
 },
 "dipy.workflows.multi_io.glob": {
  "data": {
   "shadows": "glob.glob"
  },
  "type": "import"
 },
 "dipy.workflows.multi_io.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "dipy.workflows.multi_io.io_iterator": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "dipy.workflows.multi_io.IOIterator": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.io_iterator_": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "dipy.workflows.base.get_args_default": {
     "line number": [
      173
     ]
    },
    "dipy.workflows.multi_io.inspect": {
     "line number": [
      169
     ]
    },
    "dipy.workflows.multi_io.io_iterator": {
     "line number": [
      196
     ]
    },
    "len": {
     "line number": [
      175,
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.multi_io.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "dipy.workflows.multi_io.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.multi_io.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.workflows.multi_io.slash_to_under": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "dipy.workflows.reconst": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.reconst.ConstrainedSphericalDeconvModel": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.CsaOdfModel": {
  "data": {
   "shadows": "dipy.reconst.shm.CsaOdfModel"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.DiffusionKurtosisModel": {
  "data": {
   "shadows": "dipy.reconst.dki.DiffusionKurtosisModel"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.IvimModel": {
  "data": {
   "shadows": "dipy.reconst.ivim.IvimModel"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.ReconstCSAFlow": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      588
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.reconst.ReconstCSAFlow.get_short_name": {
  "data": {
   "lineno": 589,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      589
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstCSAFlow.run": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      672
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      676
     ]
    },
    "dipy.direction.peaks.peaks_from_model": {
     "line number": [
      682
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      667
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      665
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      674
     ]
    },
    "dipy.io.peaks.peaks_to_niftis": {
     "line number": [
      700
     ]
    },
    "dipy.io.peaks.save_peaks": {
     "line number": [
      695
     ]
    },
    "dipy.reconst.shm.CsaOdfModel": {
     "line number": [
      680
     ]
    },
    "dipy.workflows.reconst.logging": {
     "line number": [
      664,
      678,
      697,
      706,
      708
     ]
    },
    "numpy.bool": {
     "line number": [
      674
     ]
    },
    "warnings.warn": {
     "line number": [
      669
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstCSDFlow": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      408
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.reconst.ReconstCSDFlow.get_short_name": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      409
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstCSDFlow.run": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      514
     ]
    },
    "ast.literal_eval": {
     "line number": [
      537
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      508
     ]
    },
    "dipy.data.default_sphere": {
     "line number": [
      551
     ]
    },
    "dipy.direction.peaks.peaks_from_model": {
     "line number": [
      557
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      502
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      500
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      510
     ]
    },
    "dipy.io.peaks.peaks_to_niftis": {
     "line number": [
      575
     ]
    },
    "dipy.io.peaks.save_peaks": {
     "line number": [
      570
     ]
    },
    "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": {
     "line number": [
      554
     ]
    },
    "dipy.reconst.csdeconv.auto_response": {
     "line number": [
      526
     ]
    },
    "dipy.workflows.reconst.logging": {
     "line number": [
      499,
      520,
      522,
      524,
      535,
      546,
      548,
      553,
      572,
      580,
      582
     ]
    },
    "isinstance": {
     "line number": [
      536
     ]
    },
    "list": {
     "line number": [
      532
     ]
    },
    "numpy.array": {
     "line number": [
      537,
      539,
      542
     ]
    },
    "numpy.bool": {
     "line number": [
      510
     ]
    },
    "numpy.float64": {
     "line number": [
      537,
      539
     ]
    },
    "print": {
     "line number": [
      503
     ]
    },
    "str": {
     "line number": [
      536
     ]
    },
    "warnings.warn": {
     "line number": [
      505
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstDkiFlow": {
  "data": {
   "lineno": 714,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      714
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.reconst.ReconstDkiFlow.get_dki_model": {
  "data": {
   "lineno": 882,
   "symbols_in_volume": {
    "dipy.reconst.dki.DiffusionKurtosisModel": {
     "line number": [
      883
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstDkiFlow.get_fitted_tensor": {
  "data": {
   "lineno": 885,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      893
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      887
     ]
    },
    "dipy.workflows.reconst.logging": {
     "line number": [
      886
     ]
    },
    "warnings.warn": {
     "line number": [
      889
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstDkiFlow.get_short_name": {
  "data": {
   "lineno": 715,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      715
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstDkiFlow.run": {
  "data": {
   "lineno": 719,
   "symbols_in_volume": {
    "dipy.io.image.load_nifti": {
     "line number": [
      809
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      812
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      831,
      835,
      838,
      842,
      846,
      850,
      854,
      858,
      862,
      865,
      868,
      871,
      874,
      877
     ]
    },
    "dipy.reconst.dki.split_dki_param": {
     "line number": [
      822
     ]
    },
    "dipy.reconst.dti.axial_diffusivity": {
     "line number": [
      853
     ]
    },
    "dipy.reconst.dti.color_fa": {
     "line number": [
      845
     ]
    },
    "dipy.reconst.dti.fractional_anisotropy": {
     "line number": [
      823
     ]
    },
    "dipy.reconst.dti.geodesic_anisotropy": {
     "line number": [
      841
     ]
    },
    "dipy.reconst.dti.lower_triangular": {
     "line number": [
      828
     ]
    },
    "dipy.reconst.dti.mean_diffusivity": {
     "line number": [
      849
     ]
    },
    "dipy.reconst.dti.mode": {
     "line number": [
      861
     ]
    },
    "dipy.reconst.dti.radial_diffusivity": {
     "line number": [
      857
     ]
    },
    "dipy.workflows.reconst.logging": {
     "line number": [
      808,
      879
     ]
    },
    "numpy.array": {
     "line number": [
      846
     ]
    },
    "numpy.bool": {
     "line number": [
      812
     ]
    },
    "numpy.clip": {
     "line number": [
      825
     ]
    },
    "numpy.float32": {
     "line number": [
      831,
      835,
      838,
      842,
      850,
      854,
      858,
      862,
      865,
      868,
      871,
      874,
      877
     ]
    },
    "numpy.isnan": {
     "line number": [
      824
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstDtiFlow": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      216
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.reconst.ReconstDtiFlow.get_fitted_tensor": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      399
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      398
     ]
    },
    "dipy.workflows.reconst.logging": {
     "line number": [
      397
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstDtiFlow.get_short_name": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      217
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstDtiFlow.get_tensor_model": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": {
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      392
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstDtiFlow.run": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "dipy.io.image.load_nifti": {
     "line number": [
      322
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      325
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      352,
      356,
      360,
      364,
      368,
      372,
      376,
      379,
      382
     ]
    },
    "dipy.io.utils.nifti1_symmat": {
     "line number": [
      342
     ]
    },
    "dipy.reconst.dti.axial_diffusivity": {
     "line number": [
      367
     ]
    },
    "dipy.reconst.dti.color_fa": {
     "line number": [
      359
     ]
    },
    "dipy.reconst.dti.fractional_anisotropy": {
     "line number": [
      334
     ]
    },
    "dipy.reconst.dti.geodesic_anisotropy": {
     "line number": [
      355
     ]
    },
    "dipy.reconst.dti.lower_triangular": {
     "line number": [
      339
     ]
    },
    "dipy.reconst.dti.mean_diffusivity": {
     "line number": [
      363
     ]
    },
    "dipy.reconst.dti.mode": {
     "line number": [
      375
     ]
    },
    "dipy.reconst.dti.radial_diffusivity": {
     "line number": [
      371
     ]
    },
    "dipy.workflows.reconst.logging": {
     "line number": [
      321,
      386,
      388
     ]
    },
    "nibabel.Nifti1Image": {
     "line number": [
      345
     ]
    },
    "nibabel.save": {
     "line number": [
      349
     ]
    },
    "numpy.array": {
     "line number": [
      360
     ]
    },
    "numpy.bool": {
     "line number": [
      325
     ]
    },
    "numpy.clip": {
     "line number": [
      336
     ]
    },
    "numpy.float32": {
     "line number": [
      346,
      352,
      356,
      364,
      368,
      372,
      376,
      379,
      382
     ]
    },
    "numpy.isnan": {
     "line number": [
      335
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstIvimFlow": {
  "data": {
   "lineno": 900,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      900
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.reconst.ReconstIvimFlow.get_fitted_ivim": {
  "data": {
   "lineno": 1009,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      1017
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      1011
     ]
    },
    "dipy.reconst.ivim.IvimModel": {
     "line number": [
      1018
     ]
    },
    "dipy.workflows.reconst.logging": {
     "line number": [
      1010
     ]
    },
    "warnings.warn": {
     "line number": [
      1013
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstIvimFlow.get_short_name": {
  "data": {
   "lineno": 901,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      901
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstIvimFlow.run": {
  "data": {
   "lineno": 905,
   "symbols_in_volume": {
    "dipy.io.image.load_nifti": {
     "line number": [
      979
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      982
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      992,
      996,
      1001,
      1004
     ]
    },
    "dipy.workflows.reconst.logging": {
     "line number": [
      978,
      1006
     ]
    },
    "numpy.bool": {
     "line number": [
      982
     ]
    },
    "numpy.float32": {
     "line number": [
      993,
      997,
      1001,
      1004
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstMAPMRIFlow": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.ReconstMAPMRIFlow.run": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "dipy.core.gradients.gradient_table": {
     "line number": [
      128
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      123
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      121
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      178,
      182,
      186,
      190,
      194,
      198,
      202,
      206,
      210
     ]
    },
    "dipy.reconst.mapmri.MapmriModel": {
     "line number": [
      139,
      150,
      159,
      168
     ]
    },
    "dipy.workflows.reconst.logging": {
     "line number": [
      120,
      212
     ]
    },
    "numpy.float32": {
     "line number": [
      178,
      182,
      186,
      190,
      194,
      198,
      202,
      206,
      210
     ]
    },
    "warnings.warn": {
     "line number": [
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.reconst.TensorModel": {
  "data": {
   "shadows": "dipy.reconst.dti.TensorModel"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.auto_response": {
  "data": {
   "shadows": "dipy.reconst.csdeconv.auto_response"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.axial_diffusivity": {
  "data": {
   "shadows": "dipy.reconst.dti.axial_diffusivity"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.color_fa": {
  "data": {
   "shadows": "dipy.reconst.dti.color_fa"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.default_sphere": {
  "data": {
   "shadows": "dipy.data.default_sphere"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.fractional_anisotropy": {
  "data": {
   "shadows": "dipy.reconst.dti.fractional_anisotropy"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.geodesic_anisotropy": {
  "data": {
   "shadows": "dipy.reconst.dti.geodesic_anisotropy"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.get_mode": {
  "data": {
   "shadows": "dipy.reconst.dti.mode"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.lower_triangular": {
  "data": {
   "shadows": "dipy.reconst.dti.lower_triangular"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.mapmri": {
  "data": {
   "shadows": "dipy.reconst.mapmri"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.mean_diffusivity": {
  "data": {
   "shadows": "dipy.reconst.dti.mean_diffusivity"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.nifti1_symmat": {
  "data": {
   "shadows": "dipy.io.utils.nifti1_symmat"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.os.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.peaks_from_model": {
  "data": {
   "shadows": "dipy.direction.peaks.peaks_from_model"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.peaks_to_niftis": {
  "data": {
   "shadows": "dipy.io.peaks.peaks_to_niftis"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.radial_diffusivity": {
  "data": {
   "shadows": "dipy.reconst.dti.radial_diffusivity"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.save_peaks": {
  "data": {
   "shadows": "dipy.io.peaks.save_peaks"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.split_dki_param": {
  "data": {
   "shadows": "dipy.reconst.dki.split_dki_param"
  },
  "type": "import"
 },
 "dipy.workflows.reconst.warn": {
  "data": {
   "shadows": "warnings.warn"
  },
  "type": "import"
 },
 "dipy.workflows.segment": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.segment.LabelsBundlesFlow": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      285
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.segment.LabelsBundlesFlow.get_short_name": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      286
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.segment.LabelsBundlesFlow.run": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "dipy.workflows.segment.logging": {
     "line number": [
      314,
      319,
      323,
      325,
      330
     ]
    },
    "nibabel.streamlines.Tractogram": {
     "line number": [
      326
     ]
    },
    "nibabel.streamlines.load": {
     "line number": [
      320
     ]
    },
    "nibabel.streamlines.save": {
     "line number": [
      328
     ]
    },
    "numpy.eye": {
     "line number": [
      327
     ]
    },
    "numpy.load": {
     "line number": [
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.segment.MedianOtsuFlow": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.segment.MedianOtsuFlow.get_short_name": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.segment.MedianOtsuFlow.run": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "dipy.io.image.load_nifti": {
     "line number": [
      66
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      75,
      80
     ]
    },
    "dipy.segment.mask.median_otsu": {
     "line number": [
      68
     ]
    },
    "dipy.workflows.segment.logging": {
     "line number": [
      63,
      77,
      83
     ]
    },
    "int": {
     "line number": [
      60
     ]
    },
    "map": {
     "line number": [
      60
     ]
    },
    "numpy.float64": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.segment.RecoBundles": {
  "data": {
   "shadows": "dipy.segment.bundles.RecoBundles"
  },
  "type": "import"
 },
 "dipy.workflows.segment.RecoBundlesFlow": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.segment.RecoBundlesFlow.get_short_name": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.segment.RecoBundlesFlow.run": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "dipy.segment.bundles.RecoBundles": {
     "line number": [
      214
     ]
    },
    "dipy.workflows.segment.logging": {
     "line number": [
      203,
      208,
      212,
      219,
      221,
      222,
      223,
      272,
      273,
      279,
      281,
      282
     ]
    },
    "len": {
     "line number": [
      242,
      267
     ]
    },
    "nibabel.streamlines.Tractogram": {
     "line number": [
      275
     ]
    },
    "nibabel.streamlines.load": {
     "line number": [
      209,
      220
     ]
    },
    "nibabel.streamlines.save": {
     "line number": [
      277
     ]
    },
    "numpy.array": {
     "line number": [
      245,
      280
     ]
    },
    "numpy.eye": {
     "line number": [
      276
     ]
    },
    "numpy.save": {
     "line number": [
      280
     ]
    },
    "time.time": {
     "line number": [
      207,
      212,
      218,
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.segment.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.segment.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.workflows.segment.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.segment.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.segment.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.workflows.segment.median_otsu": {
  "data": {
   "shadows": "dipy.segment.mask.median_otsu"
  },
  "type": "import"
 },
 "dipy.workflows.segment.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.workflows.segment.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.segment.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.workflows.segment.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.segment.time": {
  "data": {
   "shadows": "time.time"
  },
  "type": "import"
 },
 "dipy.workflows.stats": {
  "data": {
   "symbols_in_volume": {
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      22,
      23,
      24
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.stats.BundleAnalysisPopulationFlow": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      165
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.stats.BundleAnalysisPopulationFlow.get_short_name": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      166
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.stats.BundleAnalysisPopulationFlow.run": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "dipy.stats.analysis.bundle_analysis": {
     "line number": [
      217
     ]
    },
    "dipy.workflows.stats.logging": {
     "line number": [
      207
     ]
    },
    "dipy.workflows.stats.os": {
     "line number": [
      204,
      208,
      208,
      212,
      214,
      215,
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.stats.LinearMixedModelsFlow": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      221
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.stats.LinearMixedModelsFlow.get_short_name": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.stats.LinearMixedModelsFlow.run": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      256
     ]
    },
    "dipy.viz.regtools.simple_plot": {
     "line number": [
      284
     ]
    },
    "dipy.workflows.stats.logging": {
     "line number": [
      251
     ]
    },
    "dipy.workflows.stats.os": {
     "line number": [
      252,
      281
     ]
    },
    "len": {
     "line number": [
      255,
      269,
      277
     ]
    },
    "list": {
     "line number": [
      277
     ]
    },
    "numpy.log10": {
     "line number": [
      278
     ]
    },
    "numpy.zeros": {
     "line number": [
      262
     ]
    },
    "pandas.read_hdf": {
     "line number": [
      253
     ]
    },
    "range": {
     "line number": [
      265,
      277
     ]
    },
    "statsmodels.formula.api.mixedlm": {
     "line number": [
      271
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.stats.SNRinCCFlow": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.stats.SNRinCCFlow.get_short_name": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.stats.SNRinCCFlow.run": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      95,
      109
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      79
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      77,
      81
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      115,
      123
     ]
    },
    "dipy.io.read_bvals_bvecs": {
     "line number": [
      78
     ]
    },
    "dipy.reconst.dti.TensorModel": {
     "line number": [
      84
     ]
    },
    "dipy.segment.mask.bounding_box": {
     "line number": [
      97
     ]
    },
    "dipy.segment.mask.segment_from_cfa": {
     "line number": [
      111
     ]
    },
    "dipy.workflows.stats.json": {
     "line number": [
      162
     ]
    },
    "dipy.workflows.stats.logging": {
     "line number": [
      83,
      87,
      116,
      124,
      127,
      143,
      145
     ]
    },
    "dipy.workflows.stats.os": {
     "line number": [
      161
     ]
    },
    "len": {
     "line number": [
      108
     ]
    },
    "numpy.argmin": {
     "line number": [
      131,
      133,
      135
     ]
    },
    "numpy.array": {
     "line number": [
      98,
      99,
      132,
      134,
      136
     ]
    },
    "numpy.inf": {
     "line number": [
      130
     ]
    },
    "numpy.mean": {
     "line number": [
      118
     ]
    },
    "numpy.ndim": {
     "line number": [
      90,
      92
     ]
    },
    "numpy.std": {
     "line number": [
      126
     ]
    },
    "numpy.sum": {
     "line number": [
      129,
      132,
      134,
      136
     ]
    },
    "numpy.uint8": {
     "line number": [
      115,
      123
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      91,
      93
     ]
    },
    "open": {
     "line number": [
      161
     ]
    },
    "scipy.ndimage.morphology.binary_dilation": {
     "line number": [
      119
     ]
    },
    "str": {
     "line number": [
      127,
      143,
      145,
      146,
      147,
      154,
      154,
      155,
      155,
      156,
      157,
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.stats.TensorModel": {
  "data": {
   "shadows": "dipy.reconst.dti.TensorModel"
  },
  "type": "import"
 },
 "dipy.workflows.stats.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.stats.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.workflows.stats.binary_dilation": {
  "data": {
   "shadows": "scipy.ndimage.morphology.binary_dilation"
  },
  "type": "import"
 },
 "dipy.workflows.stats.bounding_box": {
  "data": {
   "shadows": "dipy.segment.mask.bounding_box"
  },
  "type": "import"
 },
 "dipy.workflows.stats.bundle_analysis": {
  "data": {
   "shadows": "dipy.stats.analysis.bundle_analysis"
  },
  "type": "import"
 },
 "dipy.workflows.stats.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.stats.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.workflows.stats.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "dipy.workflows.stats.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.stats.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.workflows.stats.median_otsu": {
  "data": {
   "shadows": "dipy.segment.mask.median_otsu"
  },
  "type": "import"
 },
 "dipy.workflows.stats.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.stats.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.workflows.stats.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.workflows.stats.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "dipy.workflows.stats.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.workflows.stats.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.workflows.stats.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.stats.segment_from_cfa": {
  "data": {
   "shadows": "dipy.segment.mask.segment_from_cfa"
  },
  "type": "import"
 },
 "dipy.workflows.stats.simple_plot": {
  "data": {
   "shadows": "dipy.viz.regtools.simple_plot"
  },
  "type": "import"
 },
 "dipy.workflows.stats.smf": {
  "data": {
   "shadows": "statsmodels.formula.api"
  },
  "type": "import"
 },
 "dipy.workflows.stats.tables": {
  "data": {
   "shadows": "tables"
  },
  "type": "import"
 },
 "dipy.workflows.tests": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.Tester": {
     "line number": [
      2,
      3
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.Tester": {
  "data": {
   "shadows": "numpy.testing.Tester"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test": {
  "data": {
   "lineno": 2
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_align": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      308
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      309
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.test_align.ApplyTransformFlow": {
  "data": {
   "shadows": "dipy.workflows.align.ApplyTransformFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.ImageRegistrationFlow": {
  "data": {
   "shadows": "dipy.workflows.align.ImageRegistrationFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.ResliceFlow": {
  "data": {
   "shadows": "dipy.workflows.align.ResliceFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.SlrWithQbxFlow": {
  "data": {
   "shadows": "dipy.workflows.align.SlrWithQbxFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.SynRegistrationFlow": {
  "data": {
   "shadows": "dipy.workflows.align.SynRegistrationFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.get_synthetic_warped_circle": {
  "data": {
   "shadows": "dipy.align.tests.test_imwarp.get_synthetic_warped_circle"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.os.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.pjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.regtransforms": {
  "data": {
   "shadows": "dipy.align.transforms.regtransforms"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.save_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.save_tractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.setup_random_transform": {
  "data": {
   "shadows": "dipy.align.tests.test_parzenhist.setup_random_transform"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_align.test_apply_affine_transform": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "dipy.align.tests.test_parzenhist.setup_random_transform": {
     "line number": [
      216
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      216
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      222,
      225
     ]
    },
    "dipy.workflows.align.ApplyTransformFlow": {
     "line number": [
      212
     ]
    },
    "dipy.workflows.align.ImageRegistrationFlow": {
     "line number": [
      211
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      201
     ]
    },
    "numpy.array": {
     "line number": [
      204,
      205,
      207
     ]
    },
    "os.path.join": {
     "line number": [
      222,
      225,
      228,
      230,
      233,
      235,
      255,
      261
     ]
    },
    "str": {
     "line number": [
      219,
      220,
      229,
      231,
      234,
      236,
      238,
      241
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_apply_transform_error": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      195
     ]
    },
    "dipy.workflows.align.ApplyTransformFlow": {
     "line number": [
      194
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      195
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_image_registration": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "dipy.align.tests.test_parzenhist.setup_random_transform": {
     "line number": [
      74
     ]
    },
    "dipy.align.transforms.regtransforms": {
     "line number": [
      74
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      77,
      79
     ]
    },
    "dipy.workflows.align.ImageRegistrationFlow": {
     "line number": [
      85
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      71
     ]
    },
    "os.path.join": {
     "line number": [
      77,
      79,
      82,
      83
     ]
    },
    "test_affine": {
     "line number": [
      189
     ]
    },
    "test_com": {
     "line number": [
      186
     ]
    },
    "test_err": {
     "line number": [
      190
     ]
    },
    "test_rigid": {
     "line number": [
      188
     ]
    },
    "test_translation": {
     "line number": [
      187
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_image_registration.check_existence": {
  "data": {
   "lineno": 181
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_image_registration.read_distance": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "float": {
     "line number": [
      91
     ]
    },
    "open": {
     "line number": [
      89
     ]
    },
    "os.path.join": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_image_registration.test_affine": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "check_existence": {
     "line number": [
      165
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      164
     ]
    },
    "os.path.join": {
     "line number": [
      149,
      150
     ]
    },
    "read_distance": {
     "line number": [
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_image_registration.test_com": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "check_existence": {
     "line number": [
      105
     ]
    },
    "os.path.join": {
     "line number": [
      95,
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_image_registration.test_err": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      170,
      176
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      170,
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_image_registration.test_rigid": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "check_existence": {
     "line number": [
      145
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      144
     ]
    },
    "os.path.join": {
     "line number": [
      129,
      130
     ]
    },
    "read_distance": {
     "line number": [
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_image_registration.test_translation": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "check_existence": {
     "line number": [
      125
     ]
    },
    "float": {
     "line number": [
      124
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      124
     ]
    },
    "os.path.join": {
     "line number": [
      109,
      110
     ]
    },
    "read_distance": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_reslice": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      26
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      27,
      33
     ]
    },
    "dipy.workflows.align.ResliceFlow": {
     "line number": [
      29
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      25
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      35,
      36,
      37,
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_slr_flow": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      43
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      52,
      59
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      52,
      59
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      45
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      53,
      60
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      48
     ]
    },
    "dipy.workflows.align.SlrWithQbxFlow": {
     "line number": [
      62
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      42
     ]
    },
    "numpy.array": {
     "line number": [
      56
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      67
     ]
    },
    "os.path.join": {
     "line number": [
      51,
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_align.test_syn_registration_flow": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      296
     ]
    },
    "dipy.align.tests.test_imwarp.get_synthetic_warped_circle": {
     "line number": [
      265
     ]
    },
    "dipy.workflows.align.SynRegistrationFlow": {
     "line number": [
      271
     ]
    },
    "nibabel.Nifti1Image": {
     "line number": [
      274,
      278
     ]
    },
    "nibabel.save": {
     "line number": [
      276,
      280
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      273
     ]
    },
    "numpy.eye": {
     "line number": [
      274,
      278
     ]
    },
    "numpy.float": {
     "line number": [
      274,
      278
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      303,
      305
     ]
    },
    "os.path.join": {
     "line number": [
      275,
      279
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_denoise": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      106
     ]
    },
    "dipy.workflows.tests.test_denoise.test_gibbs_flow": {
     "line number": [
      107
     ]
    },
    "dipy.workflows.tests.test_denoise.test_lpca_flow": {
     "line number": [
      109
     ]
    },
    "dipy.workflows.tests.test_denoise.test_mppca_flow": {
     "line number": [
      108
     ]
    },
    "dipy.workflows.tests.test_denoise.test_nlmeans_flow": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.test_denoise.GibbsRingingFlow": {
  "data": {
   "shadows": "dipy.workflows.denoise.GibbsRingingFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.LPCAFlow": {
  "data": {
   "shadows": "dipy.workflows.denoise.LPCAFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.MPPCAFlow": {
  "data": {
   "shadows": "dipy.workflows.denoise.MPPCAFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.NLMeansFlow": {
  "data": {
   "shadows": "dipy.workflows.denoise.NLMeansFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.assert_greater": {
  "data": {
   "shadows": "dipy.testing.assert_greater"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.assert_less": {
  "data": {
   "shadows": "dipy.testing.assert_less"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_denoise.test_gibbs_flow": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "dipy.io.image.save_nifti": {
     "line number": [
      98
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      102
     ]
    },
    "dipy.workflows.denoise.GibbsRingingFlow": {
     "line number": [
      100
     ]
    },
    "dipy.workflows.tests.test_denoise.os": {
     "line number": [
      97,
      102
     ]
    },
    "generate_slice": {
     "line number": [
      93,
      94,
      95,
      96
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      91
     ]
    },
    "numpy.eye": {
     "line number": [
      98
     ]
    },
    "numpy.zeros": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_denoise.test_gibbs_flow.generate_slice": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      88
     ]
    },
    "numpy.fft.fft2": {
     "line number": [
      85
     ]
    },
    "numpy.fft.fftshift": {
     "line number": [
      86
     ]
    },
    "numpy.fft.ifft2": {
     "line number": [
      88
     ]
    },
    "numpy.zeros": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_denoise.test_lpca_flow": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      37
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      41
     ]
    },
    "dipy.workflows.denoise.LPCAFlow": {
     "line number": [
      39
     ]
    },
    "dipy.workflows.tests.test_denoise.os": {
     "line number": [
      41
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_denoise.test_mppca_flow": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "dipy.io.image.load_nifti_data": {
     "line number": [
      67
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      49
     ]
    },
    "dipy.testing.assert_false": {
     "line number": [
      55
     ]
    },
    "dipy.testing.assert_greater": {
     "line number": [
      68
     ]
    },
    "dipy.testing.assert_less": {
     "line number": [
      69
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      53,
      61,
      63
     ]
    },
    "dipy.workflows.denoise.MPPCAFlow": {
     "line number": [
      51
     ]
    },
    "dipy.workflows.tests.test_denoise.os": {
     "line number": [
      48,
      53,
      55,
      61,
      63
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      46
     ]
    },
    "numpy.eye": {
     "line number": [
      49
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      47
     ]
    },
    "numpy.round": {
     "line number": [
      70
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_denoise.test_nlmeans_flow": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      17
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      18,
      30
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      23,
      29
     ]
    },
    "dipy.workflows.denoise.NLMeansFlow": {
     "line number": [
      20
     ]
    },
    "dipy.workflows.tests.test_denoise.os": {
     "line number": [
      23,
      29
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      16
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      32
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      515
     ]
    },
    "dipy.workflows.docstring_parser.NumpyDocString": {
     "line number": [
      153,
      167,
      366,
      381,
      387,
      459
     ]
    },
    "dipy.workflows.tests.test_docstring_parser.doc_txt": {
     "line number": [
      153
     ]
    },
    "dipy.workflows.tests.test_docstring_parser.doc_yields_txt": {
     "line number": [
      167
     ]
    },
    "dipy.workflows.tests.test_docstring_parser.sys": {
     "line number": [
      40
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      516
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.test_docstring_parser.NumpyDocString": {
  "data": {
   "shadows": "dipy.workflows.docstring_parser.NumpyDocString"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_docstring_parser.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_docstring_parser.class_doc_txt": {
  "data": {
   "lineno": 485
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_docstring_parser.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_docstring_parser.doc": {
  "data": {
   "lineno": 153
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_docstring_parser.doc2": {
  "data": {
   "lineno": 366
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_docstring_parser.doc3": {
  "data": {
   "lineno": 381
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_docstring_parser.doc5": {
  "data": {
   "lineno": 387
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_docstring_parser.doc7": {
  "data": {
   "lineno": 459
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_docstring_parser.doc_txt": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_docstring_parser.doc_yields": {
  "data": {
   "lineno": 167
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_docstring_parser.doc_yields_txt": {
  "data": {
   "lineno": 155
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_docstring_parser.non_blank_line_by_line_compare": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      248
     ]
    },
    "dipy.workflows.tests.test_docstring_parser.textwrap": {
     "line number": [
      242,
      243
     ]
    },
    "enumerate": {
     "line number": [
      246
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_docstring_parser.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_docstring_parser.sixu": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "unicode": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_docstring_parser.test_duplicate_signature": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": {
    "dipy.workflows.docstring_parser.NumpyDocString": {
     "line number": [
      475
     ]
    },
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      475,
      482
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_empty_first_line": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc7": {
     "line number": [
      467
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_examples": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      231,
      232
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      231,
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_extended_summary": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      181
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_index": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      236,
      237,
      238
     ]
    },
    "len": {
     "line number": [
      237,
      238
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      236,
      237,
      238
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_notes": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      220,
      221,
      222
     ]
    },
    "len": {
     "line number": [
      222
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      220,
      221
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_other_parameters": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      197,
      198,
      199
     ]
    },
    "len": {
     "line number": [
      197
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      201
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      197,
      198,
      200
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_parameters": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      186,
      188,
      190,
      193
     ]
    },
    "len": {
     "line number": [
      186
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      192
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      186,
      187,
      191,
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_parameters_without_extended_description": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc2": {
     "line number": [
      379
     ]
    },
    "len": {
     "line number": [
      379
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      379
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_raises": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc5": {
     "line number": [
      404,
      405
     ]
    },
    "len": {
     "line number": [
      404
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      404,
      406,
      407
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_references": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      226,
      227
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      226,
      227
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_returns": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      205,
      206,
      212
     ]
    },
    "len": {
     "line number": [
      205
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      209,
      210,
      215,
      216
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      205,
      207,
      208,
      213,
      214
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_see_also": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": {
    "dipy.workflows.docstring_parser.NumpyDocString": {
     "line number": [
      418
     ]
    },
    "len": {
     "line number": [
      435
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      435
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_signature": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      171,
      172
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      171,
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_str": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      257
     ]
    },
    "dipy.workflows.tests.test_docstring_parser.non_blank_line_by_line_compare": {
     "line number": [
      257
     ]
    },
    "str": {
     "line number": [
      257
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_summary": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc": {
     "line number": [
      176,
      177
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      176,
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.test_warns": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": {
    "dipy.workflows.tests.test_docstring_parser.doc5": {
     "line number": [
      411,
      412
     ]
    },
    "len": {
     "line number": [
      411
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      411,
      413,
      414
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_docstring_parser.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      91
     ]
    },
    "dipy.workflows.tests.test_io.fname_log": {
     "line number": [
      16
     ]
    },
    "dipy.workflows.tests.test_io.logging": {
     "line number": [
      14,
      14
     ]
    },
    "dipy.workflows.tests.test_io.test_io_fetch": {
     "line number": [
      92
     ]
    },
    "dipy.workflows.tests.test_io.test_io_fetch_fetcher_datanames": {
     "line number": [
      93
     ]
    },
    "dipy.workflows.tests.test_io.test_io_info": {
     "line number": [
      94
     ]
    },
    "dipy.workflows.tests.test_io.test_split_flow": {
     "line number": [
      95
     ]
    },
    "tempfile.mkstemp": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.test_io.FetchFlow": {
  "data": {
   "shadows": "dipy.workflows.io.FetchFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.IoInfoFlow": {
  "data": {
   "shadows": "dipy.workflows.io.IoInfoFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.SplitFlow": {
  "data": {
   "shadows": "dipy.workflows.io.SplitFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.dipy_home": {
  "data": {
   "shadows": "dipy.data.fetcher.dipy_home"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.fname_log": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_io.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.mkstemp": {
  "data": {
   "shadows": "tempfile.mkstemp"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.pjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_io.test_io_fetch": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "dipy.data.fetcher.dipy_home": {
     "line number": [
      46
     ]
    },
    "dipy.workflows.io.FetchFlow": {
     "line number": [
      42
     ]
    },
    "dipy.workflows.tests.test_io.os": {
     "line number": [
      46,
      46,
      51,
      51
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      43
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      46,
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_io.test_io_fetch_fetcher_datanames": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "all": {
     "line number": [
      70
     ]
    },
    "dipy.workflows.io.FetchFlow.get_fetcher_datanames": {
     "line number": [
      57
     ]
    },
    "len": {
     "line number": [
      68,
      69
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69,
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_io.test_io_info": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      36
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      21,
      25
     ]
    },
    "dipy.workflows.io.IoInfoFlow": {
     "line number": [
      22,
      26,
      29
     ]
    },
    "dipy.workflows.tests.test_io.fname_log": {
     "line number": [
      32
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      35
     ]
    },
    "open": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_io.test_split_flow": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      77
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      78,
      86
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      80,
      85
     ]
    },
    "dipy.workflows.io.SplitFlow": {
     "line number": [
      76
     ]
    },
    "dipy.workflows.tests.test_io.os": {
     "line number": [
      80,
      85
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      75
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      88
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_masking": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      28
     ]
    },
    "dipy.workflows.tests.test_masking.test_mask": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.test_masking.MaskFlow": {
  "data": {
   "shadows": "dipy.workflows.mask.MaskFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_masking.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_masking.assert_false": {
  "data": {
   "shadows": "dipy.testing.assert_false"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_masking.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_masking.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_masking.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_masking.test_mask": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      13
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      14,
      23
     ]
    },
    "dipy.testing.assert_false": {
     "line number": [
      19
     ]
    },
    "dipy.workflows.mask.MaskFlow": {
     "line number": [
      16
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      12
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      25
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_reconst_dki": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      106
     ]
    },
    "dipy.workflows.tests.test_reconst_dki.test_reconst_dki": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.test_reconst_dki.ReconstDkiFlow": {
  "data": {
   "shadows": "dipy.workflows.reconst.ReconstDkiFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.generate_bvecs": {
  "data": {
   "shadows": "dipy.core.gradients.generate_bvecs"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.pjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.read_bvals_bvecs": {
  "data": {
   "shadows": "dipy.io.gradients.read_bvals_bvecs"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_dki.test_reconst_dki": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      101
     ]
    },
    "dipy.core.gradients.generate_bvecs": {
     "line number": [
      94
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      19
     ]
    },
    "dipy.io.gradients.read_bvals_bvecs": {
     "line number": [
      92
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      20
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      32,
      36,
      41,
      45,
      50,
      54,
      58,
      62,
      66,
      70,
      74,
      79,
      83,
      88
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      23
     ]
    },
    "dipy.workflows.reconst.ReconstDkiFlow": {
     "line number": [
      25
     ]
    },
    "len": {
     "line number": [
      94
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      18
     ]
    },
    "numpy.ones_like": {
     "line number": [
      21
     ]
    },
    "numpy.savetxt": {
     "line number": [
      98,
      99
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      33,
      37,
      38,
      42,
      46,
      47,
      51,
      55,
      59,
      63,
      67,
      71,
      75,
      76,
      80,
      84,
      85,
      89,
      90
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      101
     ]
    },
    "numpy.uint8": {
     "line number": [
      23
     ]
    },
    "os.path.join": {
     "line number": [
      22,
      96,
      97
     ]
    },
    "tuple": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_reconst_ivim": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      73
     ]
    },
    "dipy.workflows.tests.test_reconst_ivim.test_reconst_ivim": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.test_reconst_ivim.ReconstIvimFlow": {
  "data": {
   "shadows": "dipy.workflows.reconst.ReconstIvimFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_ivim.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_ivim.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_ivim.generate_bvecs": {
  "data": {
   "shadows": "dipy.core.gradients.generate_bvecs"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_ivim.gradient_table": {
  "data": {
   "shadows": "dipy.core.gradients.gradient_table"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_ivim.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_ivim.multi_tensor": {
  "data": {
   "shadows": "dipy.sims.voxel.multi_tensor"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_ivim.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_ivim.pjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_ivim.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_reconst_ivim.test_reconst_ivim": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "dipy.core.gradients.generate_bvecs": {
     "line number": [
      22
     ]
    },
    "dipy.core.gradients.gradient_table": {
     "line number": [
      28
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      57,
      61,
      65,
      69
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      44,
      48
     ]
    },
    "dipy.sims.voxel.multi_tensor": {
     "line number": [
      34
     ]
    },
    "dipy.workflows.reconst.ReconstIvimFlow": {
     "line number": [
      50
     ]
    },
    "int": {
     "line number": [
      40
     ]
    },
    "len": {
     "line number": [
      21,
      40
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      17
     ]
    },
    "numpy.array": {
     "line number": [
      18,
      32
     ]
    },
    "numpy.eye": {
     "line number": [
      38
     ]
    },
    "numpy.ones_like": {
     "line number": [
      46
     ]
    },
    "numpy.savetxt": {
     "line number": [
      24,
      26
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      58,
      62,
      66,
      70
     ]
    },
    "numpy.uint8": {
     "line number": [
      46
     ]
    },
    "numpy.zeros": {
     "line number": [
      40
     ]
    },
    "os.path.join": {
     "line number": [
      23,
      25,
      43,
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_segment": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      106
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.test_segment.BundleMinDistanceMetric": {
  "data": {
   "shadows": "dipy.align.streamlinear.BundleMinDistanceMetric"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.LabelsBundlesFlow": {
  "data": {
   "shadows": "dipy.workflows.segment.LabelsBundlesFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.MedianOtsuFlow": {
  "data": {
   "shadows": "dipy.workflows.segment.MedianOtsuFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.RecoBundlesFlow": {
  "data": {
   "shadows": "dipy.workflows.segment.RecoBundlesFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.join": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.load_nifti_data": {
  "data": {
   "shadows": "dipy.io.image.load_nifti_data"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.median_otsu": {
  "data": {
   "shadows": "dipy.segment.mask.median_otsu"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.nib": {
  "data": {
   "shadows": "nibabel"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.pjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.save_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.save_tractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.set_number_of_points": {
  "data": {
   "shadows": "dipy.tracking.streamline.set_number_of_points"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_segment.test_median_otsu_flow": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      21
     ]
    },
    "dipy.io.image.load_nifti_data": {
     "line number": [
      22,
      44
     ]
    },
    "dipy.segment.mask.median_otsu": {
     "line number": [
      38
     ]
    },
    "dipy.workflows.segment.MedianOtsuFlow": {
     "line number": [
      30
     ]
    },
    "nibabel.load": {
     "line number": [
      47
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      20
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      48
     ]
    },
    "numpy.round": {
     "line number": [
      50
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      45,
      50
     ]
    },
    "numpy.uint8": {
     "line number": [
      45
     ]
    },
    "os.path.join": {
     "line number": [
      44,
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_segment.test_recobundles_flow": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "dipy.align.streamlinear.BundleMinDistanceMetric": {
     "line number": [
      94
     ]
    },
    "dipy.data.get_fnames": {
     "line number": [
      55
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      69,
      73
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      69,
      73
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      57,
      83,
      91
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      70,
      74
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      60
     ]
    },
    "dipy.tracking.streamline.set_number_of_points": {
     "line number": [
      96,
      97
     ]
    },
    "dipy.workflows.segment.LabelsBundlesFlow": {
     "line number": [
      87
     ]
    },
    "dipy.workflows.segment.RecoBundlesFlow": {
     "line number": [
      76
     ]
    },
    "len": {
     "line number": [
      85,
      85
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      54
     ]
    },
    "numpy.array": {
     "line number": [
      64,
      100
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      85,
      103
     ]
    },
    "os.path.join": {
     "line number": [
      68,
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_stats": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      199
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      19,
      20,
      21
     ]
    },
    "numpy.testing.run_module_suite": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.test_stats.BundleAnalysisPopulationFlow": {
  "data": {
   "shadows": "dipy.workflows.stats.BundleAnalysisPopulationFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.LinearMixedModelsFlow": {
  "data": {
   "shadows": "dipy.workflows.stats.LinearMixedModelsFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.SNRinCCFlow": {
  "data": {
   "shadows": "dipy.workflows.stats.SNRinCCFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.assert_true": {
  "data": {
   "shadows": "dipy.testing.assert_true"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.join": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.save_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.save_tractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_stats.test_bundle_analysis_population_flow": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      74
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      116
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      84,
      104,
      109
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      84,
      104,
      109
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      75
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      85,
      105,
      110
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      126,
      130,
      132
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      78
     ]
    },
    "dipy.workflows.stats.BundleAnalysisPopulationFlow": {
     "line number": [
      122
     ]
    },
    "dipy.workflows.tests.test_stats.os": {
     "line number": [
      80,
      81,
      83,
      85,
      88,
      90,
      90,
      92,
      92,
      94,
      95,
      97,
      98,
      102,
      102,
      105,
      107,
      107,
      110,
      112,
      112,
      116,
      119,
      120,
      126,
      126,
      128
     ]
    },
    "dipy.workflows.tests.test_stats.pytest": {
     "line number": [
      69
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      73
     ]
    },
    "numpy.eye": {
     "line number": [
      117
     ]
    },
    "numpy.random.rand": {
     "line number": [
      114
     ]
    },
    "set": {
     "line number": [
      132,
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_stats.test_linear_mixed_models_flow": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      195
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      168
     ]
    },
    "dipy.workflows.stats.LinearMixedModelsFlow": {
     "line number": [
      159
     ]
    },
    "dipy.workflows.tests.test_stats.os": {
     "line number": [
      141,
      142,
      155,
      161,
      162,
      164,
      168,
      168,
      183,
      184,
      186,
      190,
      191,
      193
     ]
    },
    "dipy.workflows.tests.test_stats.pytest": {
     "line number": [
      135
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      139
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      195
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_stats.test_stats": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      26
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      27
     ]
    },
    "dipy.io.image.save_nifti": {
     "line number": [
      30
     ]
    },
    "dipy.testing.assert_true": {
     "line number": [
      36,
      37,
      39,
      40,
      41,
      42,
      47,
      48,
      50,
      51,
      52,
      53,
      59,
      60,
      62,
      63,
      64,
      65
     ]
    },
    "dipy.workflows.stats.SNRinCCFlow": {
     "line number": [
      32
     ]
    },
    "dipy.workflows.tests.test_stats.os": {
     "line number": [
      36,
      36,
      37,
      37,
      39,
      39,
      40,
      40,
      41,
      41,
      42,
      42,
      47,
      47,
      48,
      48,
      50,
      50,
      51,
      51,
      52,
      52,
      53,
      53,
      59,
      59,
      60,
      60,
      62,
      62,
      63,
      63,
      64,
      64,
      65,
      65
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      25
     ]
    },
    "numpy.ones_like": {
     "line number": [
      28
     ]
    },
    "numpy.uint8": {
     "line number": [
      28
     ]
    },
    "os.path.join": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_viz": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      103
     ]
    },
    "dipy.testing.decorators.use_xvfb": {
     "line number": [
      22
     ]
    },
    "dipy.utils.optpkg.optional_package": {
     "line number": [
      15
     ]
    },
    "dipy.workflows.tests.test_viz.test_horizon_flow": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.test_viz.HorizonFlow": {
  "data": {
   "shadows": "dipy.workflows.viz.HorizonFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.Streamlines": {
  "data": {
   "shadows": "dipy.tracking.streamline.Streamlines"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.create_nifti_header": {
  "data": {
   "shadows": "dipy.io.utils.create_nifti_header"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.horizon": {
  "data": {
   "shadows": "dipy.viz.app.horizon"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.optional_package": {
  "data": {
   "shadows": "dipy.utils.optpkg.optional_package"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.save_nifti": {
  "data": {
   "shadows": "dipy.io.image.save_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.save_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.save_tractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_viz.skip_it": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "dipy.workflows.tests.test_viz.test_horizon_flow": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "dipy.io.image.save_nifti": {
     "line number": [
      84
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      60,
      87
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      60,
      87
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      88
     ]
    },
    "dipy.io.utils.create_nifti_header": {
     "line number": [
      59,
      86
     ]
    },
    "dipy.tracking.streamline.Streamlines": {
     "line number": [
      54
     ]
    },
    "dipy.viz.app.horizon": {
     "line number": [
      65,
      74
     ]
    },
    "dipy.workflows.tests.test_viz.os": {
     "line number": [
      81,
      82,
      99,
      99
     ]
    },
    "dipy.workflows.tests.test_viz.pytest": {
     "line number": [
      25
     ]
    },
    "dipy.workflows.tests.test_viz.skip_it": {
     "line number": [
      25
     ]
    },
    "dipy.workflows.viz.HorizonFlow": {
     "line number": [
      94
     ]
    },
    "len": {
     "line number": [
      92
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      79
     ]
    },
    "numpy.array": {
     "line number": [
      28,
      34,
      40,
      46
     ]
    },
    "numpy.inf": {
     "line number": [
      66,
      67,
      75,
      76
     ]
    },
    "numpy.random.rand": {
     "line number": [
      51,
      70
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      92,
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_viz.use_xvfb": {
  "data": {
   "shadows": "dipy.testing.decorators.use_xvfb"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_workflow": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      75
     ]
    },
    "dipy.workflows.tests.test_workflow.test_force_overwrite": {
     "line number": [
      76
     ]
    },
    "dipy.workflows.tests.test_workflow.test_get_sub_runs": {
     "line number": [
      77
     ]
    },
    "dipy.workflows.tests.test_workflow.test_missing_file": {
     "line number": [
      79
     ]
    },
    "dipy.workflows.tests.test_workflow.test_run": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "module"
 },
 "dipy.workflows.tests.test_workflow.MedianOtsuFlow": {
  "data": {
   "shadows": "dipy.workflows.segment.MedianOtsuFlow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_workflow.TemporaryDirectory": {
  "data": {
   "shadows": "nibabel.tmpdirs.TemporaryDirectory"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_workflow.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_workflow.get_fnames": {
  "data": {
   "shadows": "dipy.data.get_fnames"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_workflow.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_workflow.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_workflow.pjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.workflows.tests.test_workflow.test_force_overwrite": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "dipy.data.get_fnames": {
     "line number": [
      15
     ]
    },
    "dipy.workflows.segment.MedianOtsuFlow": {
     "line number": [
      16,
      30
     ]
    },
    "dipy.workflows.tests.test_workflow.os": {
     "line number": [
      21,
      26,
      36
     ]
    },
    "dipy.workflows.tests.test_workflow.time": {
     "line number": [
      33
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_workflow.test_get_sub_runs": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      41
     ]
    },
    "len": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_workflow.test_missing_file": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      71
     ]
    },
    "TestMissingFile": {
     "line number": [
      69
     ]
    },
    "nibabel.tmpdirs.TemporaryDirectory": {
     "line number": [
      70
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      71
     ]
    },
    "os.path.join": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_workflow.test_missing_file.TestMissingFile": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.tests.test_workflow.test_missing_file.TestMissingFile.run": {
  "data": {
   "lineno": 56
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_workflow.test_run": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      47
     ]
    },
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      46
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.test_workflow.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "dipy.workflows.tests.workflow_tests_utils": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.tests.workflow_tests_utils.CombinedWorkflow": {
  "data": {
   "shadows": "dipy.workflows.combined_workflow.CombinedWorkflow"
  },
  "type": "import"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyCombinedWorkflow": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "dipy.workflows.combined_workflow.CombinedWorkflow": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyCombinedWorkflow._get_sub_flows": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "dipy.workflows.tests.workflow_tests_utils.DummyWorkflow1": {
     "line number": [
      57
     ]
    },
    "dipy.workflows.tests.workflow_tests_utils.DummyWorkflow2": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyCombinedWorkflow.run": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "dipy.workflows.tests.workflow_tests_utils.DummyWorkflow1": {
     "line number": [
      74
     ]
    },
    "dipy.workflows.tests.workflow_tests_utils.DummyWorkflow2": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyFlow": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyFlow.run": {
  "data": {
   "lineno": 85
  },
  "type": "function"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyVariableTypeErrorWorkflow": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyVariableTypeErrorWorkflow.get_short_name": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      148
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyVariableTypeErrorWorkflow.run": {
  "data": {
   "lineno": 152
  },
  "type": "function"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyVariableTypeWorkflow": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyVariableTypeWorkflow.get_short_name": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyVariableTypeWorkflow.run": {
  "data": {
   "lineno": 125
  },
  "type": "function"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyWorkflow1": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      5
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyWorkflow1.get_short_name": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyWorkflow1.run": {
  "data": {
   "lineno": 11
  },
  "type": "function"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyWorkflow2": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyWorkflow2.get_short_name": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tests.workflow_tests_utils.DummyWorkflow2.run": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "dipy.workflows.tests.workflow_tests_utils.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.tracking": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.tracking.BinaryStoppingCriterion": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.BinaryStoppingCriterion"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.ClosestPeakDirectionGetter": {
  "data": {
   "shadows": "dipy.direction.ClosestPeakDirectionGetter"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.CmcStoppingCriterion": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.CmcStoppingCriterion"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.DeterministicMaximumDirectionGetter": {
  "data": {
   "shadows": "dipy.direction.DeterministicMaximumDirectionGetter"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.LocalFiberTrackingPAMFlow": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.tracking.LocalFiberTrackingPAMFlow._core_run": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "dipy.io.image.load_nifti": {
     "line number": [
      85,
      91
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      114
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      114
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      116
     ]
    },
    "dipy.tracking.local_tracking.LocalTracking": {
     "line number": [
      98
     ]
    },
    "dipy.tracking.stopping_criterion.BinaryStoppingCriterion": {
     "line number": [
      87
     ]
    },
    "dipy.tracking.stopping_criterion.ThresholdStoppingCriterion": {
     "line number": [
      89
     ]
    },
    "dipy.tracking.utils.seeds_from_mask": {
     "line number": [
      93
     ]
    },
    "dipy.workflows.tracking.logging": {
     "line number": [
      90,
      96,
      105,
      117
     ]
    },
    "list": {
     "line number": [
      111
     ]
    },
    "zip": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tracking.LocalFiberTrackingPAMFlow._get_direction_getter": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "dipy.direction.ClosestPeakDirectionGetter.from_shcoeff": {
     "line number": [
      66
     ]
    },
    "dipy.direction.DeterministicMaximumDirectionGetter.from_shcoeff": {
     "line number": [
      52
     ]
    },
    "dipy.direction.ProbabilisticDirectionGetter.from_shcoeff": {
     "line number": [
      59
     ]
    },
    "dipy.workflows.tracking.logging": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tracking.LocalFiberTrackingPAMFlow.get_short_name": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tracking.LocalFiberTrackingPAMFlow.run": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "dipy.io.peaks.load_peaks": {
     "line number": [
      193
     ]
    },
    "dipy.workflows.tracking.logging": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tracking.LocalTracking": {
  "data": {
   "shadows": "dipy.tracking.local_tracking.LocalTracking"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.PFTrackingPAMFlow": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.tracking.PFTrackingPAMFlow.get_short_name": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tracking.PFTrackingPAMFlow.run": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "dipy.direction.ProbabilisticDirectionGetter": {
     "line number": [
      299
     ]
    },
    "dipy.io.image.load_nifti": {
     "line number": [
      287,
      288,
      289,
      294
     ]
    },
    "dipy.io.peaks.load_peaks": {
     "line number": [
      285
     ]
    },
    "dipy.io.stateful_tractogram.Space.RASMM": {
     "line number": [
      326
     ]
    },
    "dipy.io.stateful_tractogram.StatefulTractogram": {
     "line number": [
      326
     ]
    },
    "dipy.io.streamline.save_tractogram": {
     "line number": [
      328
     ]
    },
    "dipy.tracking.local_tracking.ParticleFilteringTracking": {
     "line number": [
      306
     ]
    },
    "dipy.tracking.stopping_criterion.CmcStoppingCriterion.from_pve": {
     "line number": [
      291
     ]
    },
    "dipy.tracking.utils.seeds_from_mask": {
     "line number": [
      295
     ]
    },
    "dipy.workflows.tracking.logging": {
     "line number": [
      282,
      293,
      298,
      317,
      329
     ]
    },
    "len": {
     "line number": [
      290
     ]
    },
    "list": {
     "line number": [
      323
     ]
    },
    "sum": {
     "line number": [
      290
     ]
    },
    "zip": {
     "line number": [
      320
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.tracking.ParticleFilteringTracking": {
  "data": {
   "shadows": "dipy.tracking.local_tracking.ParticleFilteringTracking"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.ProbabilisticDirectionGetter": {
  "data": {
   "shadows": "dipy.direction.ProbabilisticDirectionGetter"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.Space": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.Space"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.StatefulTractogram": {
  "data": {
   "shadows": "dipy.io.stateful_tractogram.StatefulTractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.ThresholdStoppingCriterion": {
  "data": {
   "shadows": "dipy.tracking.stopping_criterion.ThresholdStoppingCriterion"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.load_peaks": {
  "data": {
   "shadows": "dipy.io.peaks.load_peaks"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.save_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.save_tractogram"
  },
  "type": "import"
 },
 "dipy.workflows.tracking.utils": {
  "data": {
   "shadows": "dipy.tracking.utils"
  },
  "type": "import"
 },
 "dipy.workflows.viz": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.viz.HorizonFlow": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "dipy.workflows.workflow.Workflow": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.viz.HorizonFlow.get_short_name": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.viz.HorizonFlow.run": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "dipy.io.image.load_nifti": {
     "line number": [
      128
     ]
    },
    "dipy.io.peaks.load_peaks": {
     "line number": [
      138
     ]
    },
    "dipy.io.streamline.load_tractogram": {
     "line number": [
      118,
      123
     ]
    },
    "dipy.io.utils.create_nifti_header": {
     "line number": [
      99
     ]
    },
    "dipy.viz.app.horizon": {
     "line number": [
      145
     ]
    },
    "ends": {
     "line number": [
      116,
      122,
      122,
      126,
      126,
      136
     ]
    },
    "numpy.array": {
     "line number": [
      78,
      87
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      132,
      134
     ]
    },
    "os.path.join": {
     "line number": [
      152
     ]
    },
    "print": {
     "line number": [
      109,
      110,
      111,
      131,
      133,
      142,
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.viz.Workflow": {
  "data": {
   "shadows": "dipy.workflows.workflow.Workflow"
  },
  "type": "import"
 },
 "dipy.workflows.viz.create_nifti_header": {
  "data": {
   "shadows": "dipy.io.utils.create_nifti_header"
  },
  "type": "import"
 },
 "dipy.workflows.viz.horizon": {
  "data": {
   "shadows": "dipy.viz.app.horizon"
  },
  "type": "import"
 },
 "dipy.workflows.viz.load_nifti": {
  "data": {
   "shadows": "dipy.io.image.load_nifti"
  },
  "type": "import"
 },
 "dipy.workflows.viz.load_peaks": {
  "data": {
   "shadows": "dipy.io.peaks.load_peaks"
  },
  "type": "import"
 },
 "dipy.workflows.viz.load_tractogram": {
  "data": {
   "shadows": "dipy.io.streamline.load_tractogram"
  },
  "type": "import"
 },
 "dipy.workflows.viz.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "dipy.workflows.viz.pjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "dipy.workflows.workflow": {
  "data": {},
  "type": "module"
 },
 "dipy.workflows.workflow.Workflow": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "object": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "class"
 },
 "dipy.workflows.workflow.Workflow.__init__": {
  "data": {
   "lineno": 11
  },
  "type": "function"
 },
 "dipy.workflows.workflow.Workflow.get_io_iterator": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      47
     ]
    },
    "dipy.workflows.multi_io.io_iterator_": {
     "line number": [
      38
     ]
    },
    "dipy.workflows.workflow.inspect": {
     "line number": [
      32
     ]
    },
    "isinstance": {
     "line number": [
      33
     ]
    },
    "tuple": {
     "line number": [
      33
     ]
    },
    "zip": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.workflow.Workflow.get_short_name": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.workflow.Workflow.get_sub_runs": {
  "data": {
   "lineno": 98
  },
  "type": "function"
 },
 "dipy.workflows.workflow.Workflow.manage_output_overwrite": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "dipy.workflows.workflow.logging": {
     "line number": [
      72,
      76,
      82
     ]
    },
    "dipy.workflows.workflow.os": {
     "line number": [
      67
     ]
    },
    "len": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.workflow.Workflow.run": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "dipy.workflows.workflow.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "dipy.workflows.workflow.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "dipy.workflows.workflow.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "dipy.workflows.workflow.io_iterator_": {
  "data": {
   "shadows": "dipy.workflows.multi_io.io_iterator_"
  },
  "type": "import"
 },
 "dipy.workflows.workflow.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dipy.workflows.workflow.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dipy.workflows.workflow.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 }
}