{
 "graypy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "graypy.handler": {
  "lineno": null,
  "symbols_in_volume": [
   "abc.ABC",
   "abc.ABCMeta",
   "logging.CRITICAL",
   "logging.DEBUG",
   "logging.ERROR",
   "logging.INFO",
   "logging.WARNING",
   "sys.version_info"
  ],
  "type": "module"
 },
 "graypy.handler.BaseGELFHandler": {
  "lineno": 49,
  "symbols_in_volume": [
   "logging.Handler"
  ],
  "type": "class"
 },
 "graypy.handler.BaseGELFHandler.__init__": {
  "lineno": 54,
  "symbols_in_volume": [
   "logging.Handler.__init__"
  ],
  "type": "function"
 },
 "graypy.handler.BaseGELFHandler._add_debugging_fields": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.handler.BaseGELFHandler._add_extra_fields": {
  "lineno": 258,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.handler.BaseGELFHandler._add_full_message": {
  "lineno": 190,
  "symbols_in_volume": [
   "traceback.format_exception"
  ],
  "type": "function"
 },
 "graypy.handler.BaseGELFHandler._add_level_names": {
  "lineno": 154,
  "symbols_in_volume": [
   "logging.getLevelName"
  ],
  "type": "function"
 },
 "graypy.handler.BaseGELFHandler._make_gelf_dict": {
  "lineno": 122,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.handler.BaseGELFHandler._object_to_json": {
  "lineno": 333,
  "symbols_in_volume": [
   "datetime.datetime"
  ],
  "type": "function"
 },
 "graypy.handler.BaseGELFHandler._pack_gelf_dict": {
  "lineno": 293,
  "symbols_in_volume": [
   "json.dumps"
  ],
  "type": "function"
 },
 "graypy.handler.BaseGELFHandler._resolve_host": {
  "lineno": 215,
  "symbols_in_volume": [
   "socket.getfqdn",
   "socket.gethostname"
  ],
  "type": "function"
 },
 "graypy.handler.BaseGELFHandler._sanitize_to_unicode": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.handler.BaseGELFHandler._set_custom_facility": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.handler.BaseGELFHandler.makePickle": {
  "lineno": 107,
  "symbols_in_volume": [
   "zlib.compress"
  ],
  "type": "function"
 },
 "graypy.handler.ChunkedGELF": {
  "lineno": 527,
  "symbols_in_volume": [],
  "type": "class"
 },
 "graypy.handler.ChunkedGELF.__init__": {
  "lineno": 530,
  "symbols_in_volume": [
   "math.ceil",
   "random.randint",
   "struct.pack"
  ],
  "type": "function"
 },
 "graypy.handler.ChunkedGELF.__iter__": {
  "lineno": 558,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.handler.ChunkedGELF.encode": {
  "lineno": 549,
  "symbols_in_volume": [
   "struct.pack"
  ],
  "type": "function"
 },
 "graypy.handler.ChunkedGELF.message_chunks": {
  "lineno": 545,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.handler.GELFHTTPHandler": {
  "lineno": 473,
  "symbols_in_volume": [],
  "type": "class"
 },
 "graypy.handler.GELFHTTPHandler.__init__": {
  "lineno": 476,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.handler.GELFHTTPHandler.emit": {
  "lineno": 510,
  "symbols_in_volume": [
   "http.client.HTTPConnection"
  ],
  "type": "function"
 },
 "graypy.handler.GELFTCPHandler": {
  "lineno": 375,
  "symbols_in_volume": [
   "logging.handlers.SocketHandler"
  ],
  "type": "class"
 },
 "graypy.handler.GELFTCPHandler.__init__": {
  "lineno": 378,
  "symbols_in_volume": [
   "logging.handlers.SocketHandler.__init__"
  ],
  "type": "function"
 },
 "graypy.handler.GELFTCPHandler.makePickle": {
  "lineno": 397,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.handler.GELFTLSHandler": {
  "lineno": 411,
  "symbols_in_volume": [],
  "type": "class"
 },
 "graypy.handler.GELFTLSHandler.__init__": {
  "lineno": 414,
  "symbols_in_volume": [
   "ssl.CERT_NONE",
   "ssl.CERT_REQUIRED"
  ],
  "type": "function"
 },
 "graypy.handler.GELFTLSHandler.makeSocket": {
  "lineno": 453,
  "symbols_in_volume": [
   "socket.AF_INET",
   "socket.SOCK_STREAM",
   "socket.socket",
   "ssl.wrap_socket"
  ],
  "type": "function"
 },
 "graypy.handler.GELFUDPHandler": {
  "lineno": 352,
  "symbols_in_volume": [
   "logging.handlers.DatagramHandler"
  ],
  "type": "class"
 },
 "graypy.handler.GELFUDPHandler.__init__": {
  "lineno": 355,
  "symbols_in_volume": [
   "logging.handlers.DatagramHandler.__init__"
  ],
  "type": "function"
 },
 "graypy.handler.GELFUDPHandler.send": {
  "lineno": 367,
  "symbols_in_volume": [
   "logging.handlers.DatagramHandler.send"
  ],
  "type": "function"
 },
 "graypy.rabbitmq": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "graypy.rabbitmq.ExcludeFilter": {
  "lineno": 120,
  "symbols_in_volume": [
   "logging.Filter"
  ],
  "type": "class"
 },
 "graypy.rabbitmq.ExcludeFilter.__init__": {
  "lineno": 125,
  "symbols_in_volume": [
   "logging.Filter.__init__"
  ],
  "type": "function"
 },
 "graypy.rabbitmq.ExcludeFilter.filter": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.rabbitmq.GELFRabbitHandler": {
  "lineno": 25,
  "symbols_in_volume": [
   "graypy.handler.BaseGELFHandler",
   "logging.handlers.SocketHandler"
  ],
  "type": "class"
 },
 "graypy.rabbitmq.GELFRabbitHandler.__init__": {
  "lineno": 33,
  "symbols_in_volume": [
   "graypy.handler.BaseGELFHandler.__init__",
   "logging.handlers.SocketHandler.__init__",
   "urllib.unquote",
   "urlparse.urlparse"
  ],
  "type": "function"
 },
 "graypy.rabbitmq.GELFRabbitHandler.makePickle": {
  "lineno": 82,
  "symbols_in_volume": [
   "json.dumps"
  ],
  "type": "function"
 },
 "graypy.rabbitmq.GELFRabbitHandler.makeSocket": {
  "lineno": 78,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.rabbitmq.RabbitSocket": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "class"
 },
 "graypy.rabbitmq.RabbitSocket.__init__": {
  "lineno": 88,
  "symbols_in_volume": [
   "amqplib.client_0_8.Connection"
  ],
  "type": "function"
 },
 "graypy.rabbitmq.RabbitSocket.close": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "graypy.rabbitmq.RabbitSocket.sendall": {
  "lineno": 104,
  "symbols_in_volume": [
   "amqplib.client_0_8.Message"
  ],
  "type": "function"
 },
 "tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.helper": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.helper.formatted_logger": {
  "lineno": 53,
  "symbols_in_volume": [
   "logging.Formatter",
   "logging.getLogger",
   "pytest.yield_fixture"
  ],
  "type": "function"
 },
 "tests.helper.handler": {
  "lineno": 24,
  "symbols_in_volume": [
   "graypy.GELFHTTPHandler",
   "graypy.GELFTCPHandler",
   "graypy.GELFTLSHandler",
   "graypy.GELFUDPHandler",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.helper.logger": {
  "lineno": 45,
  "symbols_in_volume": [
   "logging.getLogger",
   "pytest.yield_fixture"
  ],
  "type": "function"
 },
 "tests.integration": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.integration.helper": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.integration.helper._build_api_string": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.integration.helper._get_api_response": {
  "lineno": 36,
  "symbols_in_volume": [
   "requests.get",
   "time.sleep"
  ],
  "type": "function"
 },
 "tests.integration.helper._parse_api_response": {
  "lineno": 47,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.integration.helper.get_graylog_response": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.integration.helper.get_unique_message": {
  "lineno": 12,
  "symbols_in_volume": [
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.integration.test_chunked_logging": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.integration.test_chunked_logging.test_chunked_logging": {
  "lineno": 17,
  "symbols_in_volume": [
   "graypy.handler.GELFUDPHandler",
   "graypy.handler.SYSLOG_LEVELS",
   "logging.ERROR",
   "logging.getLogger",
   "pytest.mark.skipif",
   "tests.helper.TEST_UDP_PORT",
   "tests.integration.LOCAL_GRAYLOG_UP",
   "tests.integration.helper.get_graylog_response",
   "tests.integration.helper.get_unique_message"
  ],
  "type": "function"
 },
 "tests.integration.test_common_logging": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.integration.test_common_logging.test_common_logging": {
  "lineno": 17,
  "symbols_in_volume": [
   "graypy.handler.SYSLOG_LEVELS",
   "logging.ERROR",
   "pytest.mark.skipif",
   "tests.helper.logger.error",
   "tests.integration.LOCAL_GRAYLOG_UP",
   "tests.integration.helper.get_graylog_response",
   "tests.integration.helper.get_unique_message"
  ],
  "type": "function"
 },
 "tests.integration.test_debugging_fields": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.integration.test_debugging_fields.handler": {
  "lineno": 18,
  "symbols_in_volume": [
   "graypy.GELFHTTPHandler",
   "graypy.GELFTCPHandler",
   "graypy.GELFTLSHandler",
   "graypy.GELFUDPHandler",
   "pytest.fixture",
   "tests.helper.TEST_CERT",
   "tests.helper.TEST_HTTP_PORT",
   "tests.helper.TEST_TCP_PORT",
   "tests.helper.TEST_TLS_PORT",
   "tests.helper.TEST_UDP_PORT"
  ],
  "type": "function"
 },
 "tests.integration.test_debugging_fields.test_debug_mode": {
  "lineno": 31,
  "symbols_in_volume": [
   "pytest.mark.skipif",
   "tests.helper.logger.error",
   "tests.integration.LOCAL_GRAYLOG_UP",
   "tests.integration.helper.get_graylog_response",
   "tests.integration.helper.get_unique_message"
  ],
  "type": "function"
 },
 "tests.integration.test_extra_fields": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.integration.test_extra_fields.DummyFilter": {
  "lineno": 17,
  "symbols_in_volume": [
   "logging.Filter"
  ],
  "type": "class"
 },
 "tests.integration.test_extra_fields.DummyFilter.filter": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.integration.test_extra_fields.handler": {
  "lineno": 25,
  "symbols_in_volume": [
   "graypy.GELFHTTPHandler",
   "graypy.GELFTCPHandler",
   "graypy.GELFTLSHandler",
   "graypy.GELFUDPHandler",
   "pytest.fixture",
   "tests.helper.TEST_CERT",
   "tests.helper.TEST_HTTP_PORT",
   "tests.helper.TEST_TCP_PORT",
   "tests.helper.TEST_TLS_PORT",
   "tests.helper.TEST_UDP_PORT"
  ],
  "type": "function"
 },
 "tests.integration.test_extra_fields.logger": {
  "lineno": 38,
  "symbols_in_volume": [
   "logging.getLogger",
   "pytest.yield_fixture"
  ],
  "type": "function"
 },
 "tests.integration.test_extra_fields.test_dynamic_fields": {
  "lineno": 49,
  "symbols_in_volume": [
   "pytest.mark.skipif",
   "tests.integration.LOCAL_GRAYLOG_UP",
   "tests.integration.helper.get_graylog_response",
   "tests.integration.helper.get_unique_message"
  ],
  "type": "function"
 },
 "tests.integration.test_status_issue": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.integration.test_status_issue.test_non_status_field_log": {
  "lineno": 21,
  "symbols_in_volume": [
   "pytest.mark.skipif",
   "tests.helper.logger.error",
   "tests.integration.LOCAL_GRAYLOG_UP",
   "tests.integration.helper.get_graylog_response",
   "tests.integration.helper.get_unique_message"
  ],
  "type": "function"
 },
 "tests.integration.test_status_issue.test_status_field_issue": {
  "lineno": 33,
  "symbols_in_volume": [
   "pytest.mark.skipif",
   "tests.helper.logger.error",
   "tests.integration.LOCAL_GRAYLOG_UP",
   "tests.integration.helper.get_graylog_response",
   "tests.integration.helper.get_unique_message"
  ],
  "type": "function"
 },
 "tests.integration.test_status_issue.test_status_field_issue_multi": {
  "lineno": 45,
  "symbols_in_volume": [
   "pytest.mark.skipif",
   "tests.helper.logger.error",
   "tests.integration.LOCAL_GRAYLOG_UP",
   "tests.integration.helper.get_graylog_response",
   "tests.integration.helper.get_unique_message"
  ],
  "type": "function"
 },
 "tests.integration.validate_local_graylog_up": {
  "lineno": 14,
  "symbols_in_volume": [
   "requests.get"
  ],
  "type": "function"
 },
 "tests.unit": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.helper": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.INFO",
   "logging.LogRecord"
  ],
  "type": "module"
 },
 "tests.unit.test_ExcludeFilter": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.test_ExcludeFilter.test_filtering_record": {
  "lineno": 37,
  "symbols_in_volume": [
   "graypy.ExcludeFilter",
   "tests.unit.helper.MOCK_LOG_RECORD",
   "tests.unit.helper.MOCK_LOG_RECORD.name",
   "tests.unit.helper.MOCK_LOG_RECORD_NAME"
  ],
  "type": "function"
 },
 "tests.unit.test_ExcludeFilter.test_invalid_name": {
  "lineno": 13,
  "symbols_in_volume": [
   "graypy.ExcludeFilter",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.test_ExcludeFilter.test_non_filtering_record": {
  "lineno": 31,
  "symbols_in_volume": [
   "graypy.ExcludeFilter",
   "tests.unit.helper.MOCK_LOG_RECORD",
   "tests.unit.helper.MOCK_LOG_RECORD.name",
   "tests.unit.helper.MOCK_LOG_RECORD_NAME"
  ],
  "type": "function"
 },
 "tests.unit.test_ExcludeFilter.test_valid_name": {
  "lineno": 21,
  "symbols_in_volume": [
   "graypy.ExcludeFilter",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "tests.unit.test_GELFRabbitHandler": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.test_GELFRabbitHandler.test_invalid_url": {
  "lineno": 16,
  "symbols_in_volume": [
   "graypy.rabbitmq.GELFRabbitHandler",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.test_GELFRabbitHandler.test_make_pickle": {
  "lineno": 39,
  "symbols_in_volume": [
   "graypy.handler.SYSLOG_LEVELS",
   "graypy.rabbitmq.GELFRabbitHandler",
   "json.loads",
   "tests.unit.helper.MOCK_LOG_RECORD",
   "tests.unit.helper.MOCK_LOG_RECORD.levelno"
  ],
  "type": "function"
 },
 "tests.unit.test_GELFRabbitHandler.test_socket_creation_failure": {
  "lineno": 31,
  "symbols_in_volume": [
   "graypy.rabbitmq.GELFRabbitHandler",
   "pytest.mark.xfail"
  ],
  "type": "function"
 },
 "tests.unit.test_GELFRabbitHandler.test_valid_url": {
  "lineno": 23,
  "symbols_in_volume": [
   "graypy.rabbitmq.GELFRabbitHandler"
  ],
  "type": "function"
 },
 "tests.unit.test_handler": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.test_handler.TestClass": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tests.unit.test_handler.TestClass.__repr__": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.test_handler.get_mock_send_arg": {
  "lineno": 48,
  "symbols_in_volume": [
   "graypy.handler.BaseGELFHandler",
   "json.loads",
   "logging.LogRecord",
   "zlib.decompress",
   "zlib.error"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.mock_send": {
  "lineno": 38,
  "symbols_in_volume": [
   "mock.patch.object",
   "pytest.yield_fixture",
   "tests.helper.handler"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_add_level_name": {
  "lineno": 167,
  "symbols_in_volume": [
   "graypy.handler.BaseGELFHandler._add_level_names",
   "tests.unit.helper.MOCK_LOG_RECORD"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_arbitrary_object": {
  "lineno": 145,
  "symbols_in_volume": [
   "tests.helper.logger.error"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_broken_unicode_python2": {
  "lineno": 112,
  "symbols_in_volume": [
   "pytest.mark.skipif",
   "sys.version_info",
   "tests.helper.logger.error"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_broken_unicode_python3": {
  "lineno": 122,
  "symbols_in_volume": [
   "pytest.mark.skipif",
   "sys.version_info",
   "tests.helper.logger.error"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_extra_field": {
  "lineno": 131,
  "symbols_in_volume": [
   "tests.helper.logger.error"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_formatted_logger": {
  "lineno": 190,
  "symbols_in_volume": [
   "graypy.handler.GELFHTTPHandler",
   "pytest.skip",
   "tests.helper.formatted_logger.error",
   "tests.helper.formatted_logger.handlers",
   "tests.helper.handler"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_gelf_chunking": {
  "lineno": 224,
  "symbols_in_volume": [
   "graypy.handler.ChunkedGELF",
   "struct.pack"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_invalid_ca_certs": {
  "lineno": 209,
  "symbols_in_volume": [
   "graypy.handler.GELFTLSHandler",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_invalid_client_certs": {
  "lineno": 216,
  "symbols_in_volume": [
   "graypy.handler.GELFTLSHandler",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_invalid_fqdn_localhost": {
  "lineno": 202,
  "symbols_in_volume": [
   "graypy.handler.BaseGELFHandler",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_list": {
  "lineno": 138,
  "symbols_in_volume": [
   "tests.helper.logger.error"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_manual_exc_info_handler": {
  "lineno": 74,
  "symbols_in_volume": [
   "tests.helper.logger.error"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_message_to_pickle_serializes_datetime_objects_instead_of_blindly_repring_them": {
  "lineno": 152,
  "symbols_in_volume": [
   "datetime.datetime",
   "tests.helper.logger.error"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_normal_exception_handler": {
  "lineno": 91,
  "symbols_in_volume": [
   "tests.helper.logger.exception"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_pack": {
  "lineno": 64,
  "symbols_in_volume": [
   "graypy.handler.BaseGELFHandler._pack_gelf_dict",
   "json.loads",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_resolve_host": {
  "lineno": 173,
  "symbols_in_volume": [
   "graypy.handler.BaseGELFHandler._resolve_host",
   "socket.getfqdn",
   "socket.gethostname"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_set_custom_facility": {
  "lineno": 182,
  "symbols_in_volume": [
   "graypy.handler.BaseGELFHandler._set_custom_facility",
   "tests.unit.helper.MOCK_LOG_RECORD",
   "tests.unit.helper.MOCK_LOG_RECORD_NAME"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_status_field_issue": {
  "lineno": 160,
  "symbols_in_volume": [
   "tests.helper.logger.error"
  ],
  "type": "function"
 },
 "tests.unit.test_handler.test_unicode": {
  "lineno": 106,
  "symbols_in_volume": [
   "tests.helper.logger.error"
  ],
  "type": "function"
 }
}