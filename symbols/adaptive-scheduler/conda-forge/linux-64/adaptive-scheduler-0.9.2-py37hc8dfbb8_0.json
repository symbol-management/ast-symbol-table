{
 "adaptive_scheduler": {
  "data": {},
  "type": "module"
 },
 "adaptive_scheduler.PBS": {
  "data": {
   "shadows": "adaptive_scheduler.scheduler.PBS"
  },
  "type": "import"
 },
 "adaptive_scheduler.RunManager": {
  "data": {
   "shadows": "adaptive_scheduler.server_support.RunManager"
  },
  "type": "import"
 },
 "adaptive_scheduler.SLURM": {
  "data": {
   "shadows": "adaptive_scheduler.scheduler.SLURM"
  },
  "type": "import"
 },
 "adaptive_scheduler.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "adaptive_scheduler.__version__": {
  "data": {
   "shadows": "adaptive_scheduler._version.__version__"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
    "adaptive_scheduler._mock_scheduler.argparse",
    "adaptive_scheduler._mock_scheduler.args",
    "adaptive_scheduler._mock_scheduler.cancel",
    "adaptive_scheduler._mock_scheduler.job_id",
    "adaptive_scheduler._mock_scheduler.logger",
    "adaptive_scheduler._mock_scheduler.logging",
    "adaptive_scheduler._mock_scheduler.parser",
    "adaptive_scheduler._mock_scheduler.queue",
    "adaptive_scheduler._mock_scheduler.structlog",
    "adaptive_scheduler._mock_scheduler.submit",
    "adaptive_scheduler._mock_scheduler.zmq",
    "print",
    "str"
   ]
  },
  "type": "module"
 },
 "adaptive_scheduler._mock_scheduler.Coroutine": {
  "data": {
   "shadows": "typing.Coroutine"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.DEFAULT_URL": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
    "adaptive_scheduler._mock_scheduler.asyncio",
    "adaptive_scheduler._mock_scheduler.ctx",
    "adaptive_scheduler._mock_scheduler.log",
    "adaptive_scheduler._mock_scheduler.zmq",
    "print",
    "str",
    "typing.Coroutine"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
    "adaptive_scheduler._mock_scheduler.asyncio"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler._dispatch": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler._mock_scheduler.log",
    "str",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler._get_new_job_id": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler._queue_is_full": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler._refresh": {
  "data": {
   "lineno": 125
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler._submit": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.os",
    "adaptive_scheduler._mock_scheduler.subprocess",
    "dict",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler.cancel": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler.queue": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "bool",
    "toolz.dicttoolz.dissoc"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler.submit": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.datetime",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler._external_command": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "_coro",
    "adaptive_scheduler._mock_scheduler.asyncio",
    "adaptive_scheduler._mock_scheduler.ctx",
    "adaptive_scheduler._mock_scheduler.zmq",
    "str",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.args": {
  "data": {
   "lineno": 200
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.asyncio": {
  "data": {
   "shadows": "asyncio"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.cancel": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
    "adaptive_scheduler._mock_scheduler._external_command",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.ctx": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.dissoc": {
  "data": {
   "shadows": "toolz.dicttoolz.dissoc"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.job_id": {
  "data": {
   "lineno": 208
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.log": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.logger": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.parser": {
  "data": {
   "lineno": 195
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.queue": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
    "adaptive_scheduler._mock_scheduler._external_command",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.structlog": {
  "data": {
   "shadows": "structlog"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.submit": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
    "adaptive_scheduler._mock_scheduler._external_command",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.zmq": {
  "data": {
   "shadows": "zmq"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.zmq.asyncio": {
  "data": {
   "shadows": "zmq.asyncio"
  },
  "type": "import"
 },
 "adaptive_scheduler._static_version": {
  "data": {},
  "type": "module"
 },
 "adaptive_scheduler._static_version.version": {
  "data": {
   "lineno": 2
  },
  "type": "constant"
 },
 "adaptive_scheduler._version": {
  "data": {
   "symbols_in_volume": [
    "adaptive_scheduler._version._build_py",
    "adaptive_scheduler._version._sdist",
    "adaptive_scheduler._version.distr_root",
    "adaptive_scheduler._version.get_version",
    "adaptive_scheduler._version.os",
    "adaptive_scheduler._version.package_root",
    "collections.namedtuple",
    "dict"
   ]
  },
  "type": "module"
 },
 "adaptive_scheduler._version.STATIC_VERSION_FILE": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.Version": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.__version__": {
  "data": {
   "lineno": 168
  },
  "type": "constant"
 },
 "adaptive_scheduler._version._build_py": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "setuptools.command.build_py.build_py"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler._version._build_py.run": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "adaptive_scheduler._version.STATIC_VERSION_FILE",
    "adaptive_scheduler._version._write_version",
    "adaptive_scheduler._version.os",
    "adaptive_scheduler._version.package_name",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version._package_root_inside_src": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "adaptive_scheduler._version._sdist": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "setuptools.command.sdist.sdist"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler._version._sdist.make_release_tree": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "adaptive_scheduler._version.STATIC_VERSION_FILE",
    "adaptive_scheduler._version._package_root_inside_src",
    "adaptive_scheduler._version._write_version",
    "adaptive_scheduler._version.os",
    "adaptive_scheduler._version.package_name",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version._write_version": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "OSError",
    "adaptive_scheduler._version.__version__",
    "adaptive_scheduler._version.os",
    "open"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version.build_py_orig": {
  "data": {
   "shadows": "setuptools.command.build_py.build_py"
  },
  "type": "import"
 },
 "adaptive_scheduler._version.cmdclass": {
  "data": {
   "lineno": 206
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.distr_root": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.get_static_version_info": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "adaptive_scheduler._version.STATIC_VERSION_FILE",
    "adaptive_scheduler._version.os",
    "adaptive_scheduler._version.package_root",
    "exec",
    "open"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version.get_version": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "adaptive_scheduler._version.STATIC_VERSION_FILE",
    "adaptive_scheduler._version.Version",
    "adaptive_scheduler._version.get_static_version_info",
    "adaptive_scheduler._version.get_version_from_git",
    "adaptive_scheduler._version.get_version_from_git_archive",
    "adaptive_scheduler._version.pep440_format"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version.get_version_from_git": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "OSError",
    "ValueError",
    "adaptive_scheduler._version.Version",
    "adaptive_scheduler._version.distr_root",
    "adaptive_scheduler._version.os",
    "adaptive_scheduler._version.subprocess"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version.get_version_from_git_archive": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "KeyError",
    "adaptive_scheduler._version.Version",
    "len",
    "sorted"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "adaptive_scheduler._version.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "adaptive_scheduler._version.package_name": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.package_root": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.pep440_format": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "adaptive_scheduler._version.sdist_orig": {
  "data": {
   "shadows": "setuptools.command.sdist.sdist"
  },
  "type": "import"
 },
 "adaptive_scheduler._version.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "adaptive_scheduler._version.version_is_from_git": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "adaptive_scheduler._version.STATIC_VERSION_FILE",
    "adaptive_scheduler._version.get_static_version_info"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support": {
  "data": {
   "shadows": "adaptive_scheduler.client_support"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.AsyncRunner": {
  "data": {
   "shadows": "adaptive.AsyncRunner"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.BaseLearner": {
  "data": {
   "shadows": "adaptive.BaseLearner"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support._add_log_file_handler": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "adaptive_scheduler.client_support.logger",
    "adaptive_scheduler.client_support.logging"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support._deserialize": {
  "data": {
   "shadows": "adaptive_scheduler.utils._deserialize"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support._get_log_entry": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "AttributeError",
    "Exception",
    "ZeroDivisionError",
    "adaptive.AsyncRunner",
    "adaptive_scheduler.client_support.datetime",
    "adaptive_scheduler.client_support.psutil",
    "adaptive_scheduler.utils._get_npoints",
    "contextlib.suppress",
    "float",
    "int",
    "len",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support._get_npoints": {
  "data": {
   "shadows": "adaptive_scheduler.utils._get_npoints"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support._serialize": {
  "data": {
   "shadows": "adaptive_scheduler.utils._serialize"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.asyncio": {
  "data": {
   "shadows": "asyncio"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.ctx": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "adaptive_scheduler.client_support.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.get_learner": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "Exception",
    "RuntimeError",
    "adaptive.BaseLearner",
    "adaptive_scheduler.client_support._add_log_file_handler",
    "adaptive_scheduler.client_support.ctx",
    "adaptive_scheduler.client_support.log",
    "adaptive_scheduler.client_support.socket",
    "adaptive_scheduler.client_support.zmq",
    "adaptive_scheduler.utils._deserialize",
    "adaptive_scheduler.utils._serialize",
    "adaptive_scheduler.utils.log_exception",
    "adaptive_scheduler.utils.maybe_lst",
    "isinstance",
    "str",
    "typing.List",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support.log": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "adaptive_scheduler.client_support.log_exception": {
  "data": {
   "shadows": "adaptive_scheduler.utils.log_exception"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.log_info": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "adaptive.AsyncRunner",
    "adaptive_scheduler.client_support._get_log_entry",
    "adaptive_scheduler.client_support.asyncio",
    "adaptive_scheduler.client_support.log",
    "adaptive_scheduler.client_support.socket",
    "adaptive_scheduler.utils._get_npoints",
    "coro"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support.logger": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "adaptive_scheduler.client_support.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.maybe_lst": {
  "data": {
   "shadows": "adaptive_scheduler.utils.maybe_lst"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.psutil": {
  "data": {
   "shadows": "psutil"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.structlog": {
  "data": {
   "shadows": "structlog"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.suppress": {
  "data": {
   "shadows": "contextlib.suppress"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.tell_done": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "adaptive_scheduler.client_support.ctx",
    "adaptive_scheduler.client_support.log",
    "adaptive_scheduler.client_support.socket",
    "adaptive_scheduler.client_support.zmq",
    "adaptive_scheduler.utils._deserialize",
    "adaptive_scheduler.utils._serialize",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support.zmq": {
  "data": {
   "shadows": "zmq"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler": {
  "data": {
   "shadows": "adaptive_scheduler.scheduler"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.BaseScheduler": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "adaptive_scheduler.utils._RequireAttrsABCMeta"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.__getstate__": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.__init__": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.sys"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.__setstate__": {
  "data": {
   "lineno": 290
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler._dask_mpi": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler._executor_specific": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler._ipyparallel": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.textwrap",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler._mpi4py": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler._process_pool": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.batch_fname": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.cancel": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.time",
    "bool",
    "cancel_jobs",
    "int",
    "range",
    "set",
    "str",
    "to_cancel",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.cancel.cancel_jobs": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "UserWarning",
    "adaptive_scheduler.scheduler.subprocess",
    "adaptive_scheduler.scheduler.warnings",
    "adaptive_scheduler.utils._progress"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.cancel.to_cancel": {
  "data": {
   "lineno": 162
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.ext": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "property",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.extra_env_vars": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.extra_scheduler": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.extra_script": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "property",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.job_script": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.abc",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.log_fname": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.os",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.output_fnames": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.queue": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.abc",
    "bool",
    "dict",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.sanatize_job_id": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.start_job": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler._run_submit",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.submit_cmd": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "property",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.write_job_script": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "open",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.DefaultScheduler": {
  "data": {
   "lineno": 827
  },
  "type": "constant"
 },
 "adaptive_scheduler.scheduler.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler": {
  "data": {
   "lineno": 674,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.__getstate__": {
  "data": {
   "lineno": 722,
   "symbols_in_volume": [
    "dict",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.__init__": {
  "data": {
   "lineno": 680,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.warnings",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.extra_scheduler": {
  "data": {
   "lineno": 776,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.job_script": {
  "data": {
   "lineno": 728,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.textwrap",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.queue": {
  "data": {
   "lineno": 768,
   "symbols_in_volume": [
    "bool",
    "dict",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.start_job": {
  "data": {
   "lineno": 771,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler._run_submit",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.scheduler.PBS.__getstate__": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "dict",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS.__init__": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.warnings",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS._calculate_nnodes": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "Exception",
    "ValueError",
    "adaptive_scheduler.scheduler.math",
    "adaptive_scheduler.scheduler.warnings",
    "float",
    "int",
    "round"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS._fix_line_cuts": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS._guess_cores_per_node": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.collections",
    "int"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS._qnodes": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": [
    "RuntimeError",
    "adaptive_scheduler.scheduler.subprocess",
    "dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS._split_by_job": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS.job_script": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.textwrap",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS.output_fnames": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.os",
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS.queue": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": [
    "RuntimeError",
    "adaptive_scheduler.scheduler.getpass",
    "adaptive_scheduler.scheduler.os",
    "adaptive_scheduler.scheduler.subprocess",
    "bool",
    "dict",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS.sanatize_job_id": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS.start_job": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler._run_submit",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.SLURM": {
  "data": {
   "lineno": 521,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.scheduler.SLURM.__init__": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.SLURM._ipyparallel": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.textwrap",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.SLURM.job_script": {
  "data": {
   "lineno": 580,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.textwrap",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.SLURM.queue": {
  "data": {
   "lineno": 628,
   "symbols_in_volume": [
    "RuntimeError",
    "adaptive_scheduler.scheduler.getpass",
    "adaptive_scheduler.scheduler.subprocess",
    "bool",
    "line_to_dict",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.SLURM.queue.line_to_dict": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.SLURM.start_job": {
  "data": {
   "lineno": 615,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler._run_submit",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler._RequireAttrsABCMeta": {
  "data": {
   "shadows": "adaptive_scheduler.utils._RequireAttrsABCMeta"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler._get_default_scheduler": {
  "data": {
   "lineno": 781,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.PBS",
    "adaptive_scheduler.scheduler.SLURM",
    "adaptive_scheduler.scheduler.os",
    "adaptive_scheduler.scheduler.warnings",
    "bool",
    "distutils.spawn.find_executable"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler._progress": {
  "data": {
   "shadows": "adaptive_scheduler.utils._progress"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler._run_submit": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.os",
    "adaptive_scheduler.scheduler.subprocess",
    "adaptive_scheduler.scheduler.time"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.adaptive_scheduler._mock_scheduler": {
  "data": {
   "shadows": "adaptive_scheduler._mock_scheduler"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.find_executable": {
  "data": {
   "shadows": "distutils.spawn.find_executable"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.getpass": {
  "data": {
   "shadows": "getpass"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner": {
  "data": {
   "symbols_in_volume": [
    "adaptive_scheduler.sequence_learner.sys"
   ]
  },
  "type": "module"
 },
 "adaptive_scheduler.sequence_learner.BaseLearner": {
  "data": {
   "shadows": "adaptive.learner.base_learner.BaseLearner"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "adaptive.learner.base_learner.BaseLearner"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.__init__": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "adaptive_scheduler.sequence_learner.ensure_hashable",
    "adaptive_scheduler.sequence_learner.time",
    "adaptive_scheduler.sequence_learner.warnings",
    "adaptive_scheduler.utils._print_same_line",
    "copy.copy",
    "len",
    "print",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner._get_data": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner._set_data": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.ask": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "adaptive_scheduler.sequence_learner.inf",
    "len"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.done": {
  "data": {
   "lineno": 86
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.loss": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "adaptive_scheduler.sequence_learner.inf",
    "len"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.npoints": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "len",
    "property"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.remove_unfinished": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.result": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.sequence_learner.ensure_hashable"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.tell": {
  "data": {
   "lineno": 77
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.tell_pending": {
  "data": {
   "lineno": 82
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner._print_same_line": {
  "data": {
   "shadows": "adaptive_scheduler.utils._print_same_line"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner.copy": {
  "data": {
   "shadows": "copy.copy"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner.ensure_hashable": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "TypeError",
    "adaptive_scheduler.sequence_learner.warnings",
    "dict",
    "hash",
    "isinstance",
    "tuple"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.inf": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "adaptive_scheduler.sequence_learner.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support": {
  "data": {
   "shadows": "adaptive_scheduler.server_support"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.BaseScheduler": {
  "data": {
   "shadows": "adaptive_scheduler.scheduler.BaseScheduler"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Coroutine": {
  "data": {
   "shadows": "typing.Coroutine"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.DatabaseManager": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support._BaseManager",
    "adaptive_scheduler.server_support.ctx",
    "adaptive_scheduler.server_support.log",
    "adaptive_scheduler.server_support.socket",
    "adaptive_scheduler.server_support.zmq",
    "adaptive_scheduler.utils._deserialize",
    "adaptive_scheduler.utils._serialize"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.server_support.DatabaseManager.__init__": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support.adaptive",
    "bool",
    "dict",
    "str",
    "super",
    "typing.Any",
    "typing.Dict",
    "typing.List",
    "typing.Optional",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.DatabaseManager._dispatch": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "Exception",
    "RuntimeError",
    "adaptive_scheduler.server_support.log",
    "adaptive_scheduler.utils.maybe_lst",
    "dict",
    "next",
    "str",
    "typing.Tuple",
    "typing.Union",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.DatabaseManager._output_logs": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.DatabaseManager._setup": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.os"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.DatabaseManager._start_request": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support.log",
    "str",
    "tinydb.Query",
    "tinydb.TinyDB",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.DatabaseManager._stop_request": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.maybe_lst",
    "dict",
    "str",
    "tinydb.Query",
    "tinydb.TinyDB",
    "typing.List",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.DatabaseManager._stop_requests": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.maybe_lst",
    "dict",
    "str",
    "tinydb.TinyDB",
    "typing.List",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.DatabaseManager.as_dicts": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "str",
    "tinydb.TinyDB",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.DatabaseManager.create_empty_db": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.os",
    "dict",
    "tinydb.TinyDB"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.DatabaseManager.n_done": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "int",
    "tinydb.Query",
    "tinydb.TinyDB"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.DatabaseManager.update": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "str",
    "tinydb.TinyDB",
    "typing.Dict",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.JobManager": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support.MaxRestartsReached",
    "adaptive_scheduler.server_support._BaseManager",
    "adaptive_scheduler.server_support.asyncio",
    "adaptive_scheduler.server_support.log",
    "len",
    "list",
    "max",
    "set",
    "str"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.server_support.JobManager.__init__": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support.DatabaseManager",
    "int",
    "str",
    "super",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.JobManager._queued": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "str",
    "typing.Set"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.JobManager.max_job_starts": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "int",
    "len",
    "property"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.KillManager": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support._BaseManager",
    "adaptive_scheduler.server_support.asyncio",
    "adaptive_scheduler.server_support.log",
    "adaptive_scheduler.server_support.logs_with_string_or_condition",
    "adaptive_scheduler.utils._remove_or_move_files",
    "str",
    "typing.List"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.server_support.KillManager.__init__": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support.DatabaseManager",
    "bool",
    "int",
    "str",
    "super",
    "typing.Callable",
    "typing.List",
    "typing.Optional",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.MaxRestartsReached": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.server_support.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Query": {
  "data": {
   "shadows": "tinydb.Query"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.RunManager": {
  "data": {
   "lineno": 711,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support._BaseManager",
    "adaptive_scheduler.server_support.time"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.server_support.RunManager.__init__": {
  "data": {
   "lineno": 805,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support.DatabaseManager",
    "adaptive_scheduler.server_support.JobManager",
    "adaptive_scheduler.server_support.KillManager",
    "adaptive_scheduler.server_support.adaptive",
    "adaptive_scheduler.server_support.get_allowed_url",
    "bool",
    "dict",
    "float",
    "int",
    "isinstance",
    "len",
    "list",
    "range",
    "str",
    "super",
    "tuple",
    "typing.Any",
    "typing.Callable",
    "typing.Dict",
    "typing.List",
    "typing.Optional",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager._repr_html_": {
  "data": {
   "lineno": 1020,
   "symbols_in_volume": [
    "adaptive_scheduler.widgets.info"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager._setup": {
  "data": {
   "lineno": 888,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support._make_default_run_script",
    "adaptive_scheduler.server_support.time",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.cancel": {
  "data": {
   "lineno": 917,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.time"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.cleanup": {
  "data": {
   "lineno": 927,
   "symbols_in_volume": [
    "FileNotFoundError",
    "adaptive_scheduler.server_support._delete_old_ipython_profiles",
    "adaptive_scheduler.server_support.cleanup",
    "adaptive_scheduler.server_support.os",
    "adaptive_scheduler.server_support.shutil",
    "contextlib.suppress"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.elapsed_time": {
  "data": {
   "lineno": 985,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.time",
    "float"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.get_database": {
  "data": {
   "lineno": 977,
   "symbols_in_volume": [
    "pandas.DataFrame",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.info": {
  "data": {
   "lineno": 1023,
   "symbols_in_volume": [
    "adaptive_scheduler.widgets.info"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.load_learners": {
  "data": {
   "lineno": 981,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.load_parallel"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.parse_log_files": {
  "data": {
   "lineno": 949,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.parse_log_files",
    "bool",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.status": {
  "data": {
   "lineno": 1000,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support.asyncio",
    "adaptive_scheduler.server_support.time",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.task_status": {
  "data": {
   "lineno": 966
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.ThreadPoolExecutor": {
  "data": {
   "shadows": "concurrent.futures.ThreadPoolExecutor"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.TinyDB": {
  "data": {
   "shadows": "tinydb.TinyDB"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support._BaseManager": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.abc"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.server_support._BaseManager.__init__": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.asyncio",
    "typing.Coroutine",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._BaseManager._setup": {
  "data": {
   "lineno": 73
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._BaseManager.cancel": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "bool",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._BaseManager.is_started": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "bool",
    "property"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._BaseManager.start": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support.asyncio"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._delete_old_ipython_profiles": {
  "data": {
   "lineno": 683,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support.glob",
    "adaptive_scheduler.server_support.os",
    "adaptive_scheduler.server_support.shutil",
    "adaptive_scheduler.utils._progress",
    "bool",
    "concurrent.futures.ThreadPoolExecutor",
    "set"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._deserialize": {
  "data": {
   "shadows": "adaptive_scheduler.utils._deserialize"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support._get_all_files": {
  "data": {
   "lineno": 636,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support.glob",
    "adaptive_scheduler.server_support.os",
    "str",
    "sum",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._get_infos": {
  "data": {
   "lineno": 568,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support.json",
    "adaptive_scheduler.widgets.info",
    "bool",
    "contextlib.suppress",
    "open",
    "reversed",
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._make_default_run_script": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": [
    "Exception",
    "ModuleNotFoundError",
    "NotImplementedError",
    "adaptive_scheduler.server_support.adaptive",
    "adaptive_scheduler.server_support.cloudpickle",
    "adaptive_scheduler.server_support.jinja2",
    "bool",
    "dict",
    "int",
    "open",
    "pathlib.Path",
    "str",
    "typing.Any",
    "typing.Callable",
    "typing.Dict",
    "typing.Optional",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._progress": {
  "data": {
   "shadows": "adaptive_scheduler.utils._progress"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support._remove_or_move_files": {
  "data": {
   "shadows": "adaptive_scheduler.utils._remove_or_move_files"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support._serialize": {
  "data": {
   "shadows": "adaptive_scheduler.utils._serialize"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.adaptive": {
  "data": {
   "shadows": "adaptive"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.asyncio": {
  "data": {
   "shadows": "asyncio"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.cleanup": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support._get_all_files",
    "adaptive_scheduler.utils._remove_or_move_files",
    "bool",
    "str",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.cloudpickle": {
  "data": {
   "shadows": "cloudpickle"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.concurrent.futures": {
  "data": {
   "shadows": "concurrent.futures"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.ctx": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.dask_mpi": {
  "data": {
   "shadows": "dask_mpi"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.get_allowed_url": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.socket",
    "adaptive_scheduler.server_support.zmq",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.glob": {
  "data": {
   "shadows": "glob"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.info": {
  "data": {
   "shadows": "adaptive_scheduler.widgets.info"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.jinja2": {
  "data": {
   "shadows": "jinja2"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.load_parallel": {
  "data": {
   "shadows": "adaptive_scheduler.utils.load_parallel"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.log": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.logger": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.logs_with_string_or_condition": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "ValueError",
    "adaptive_scheduler.server_support.DatabaseManager",
    "any",
    "bool",
    "callable",
    "file_has_error",
    "isinstance",
    "str",
    "typing.Callable",
    "typing.List",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.logs_with_string_or_condition.file_has_error": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.os",
    "has_error",
    "open"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.maybe_lst": {
  "data": {
   "shadows": "adaptive_scheduler.utils.maybe_lst"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.parse_log_files": {
  "data": {
   "lineno": 582,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.DatabaseManager",
    "adaptive_scheduler.server_support._get_infos",
    "adaptive_scheduler.server_support.datetime",
    "adaptive_scheduler.server_support.os",
    "bool",
    "pandas.DataFrame",
    "pandas.to_timedelta",
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.periodically_clean_ipython_profiles": {
  "data": {
   "lineno": 1027,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support._delete_old_ipython_profiles",
    "adaptive_scheduler.server_support.asyncio",
    "clean",
    "contextlib.suppress",
    "int"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.structlog": {
  "data": {
   "shadows": "structlog"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.suppress": {
  "data": {
   "shadows": "contextlib.suppress"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.zmq": {
  "data": {
   "shadows": "zmq"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.zmq.asyncio": {
  "data": {
   "shadows": "zmq.asyncio"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.zmq.ssh": {
  "data": {
   "shadows": "zmq.ssh"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils": {
  "data": {
   "shadows": "adaptive_scheduler.utils"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Client": {
  "data": {
   "shadows": "ipyparallel.Client"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.LRUCachedCallable": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": [
    "typing.Any",
    "typing.Callable"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.utils.LRUCachedCallable.__call__": {
  "data": {
   "lineno": 604,
   "symbols_in_volume": [
    "str",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.LRUCachedCallable.__init__": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": [
    "inspect.signature",
    "int",
    "multiprocessing.Manager",
    "typing.Any",
    "typing.Callable"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.LRUCachedCallable._get_from_cache": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": [
    "adaptive_scheduler.utils._NONE_RETURN_STR",
    "str",
    "typing.Any",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.LRUCachedCallable._insert_into_cache": {
  "data": {
   "lineno": 585,
   "symbols_in_volume": [
    "adaptive_scheduler.utils._NONE_RETURN_STR",
    "len",
    "str",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.LRUCachedCallable.cache_dict": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": [
    "dict",
    "property"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.MAX_LINE_LENGTH": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "adaptive_scheduler.utils.Manager": {
  "data": {
   "shadows": "multiprocessing.Manager"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.NoEnginesRegistered": {
  "data": {
   "shadows": "ipyparallel.error.NoEnginesRegistered"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.ThreadPoolExecutor": {
  "data": {
   "shadows": "concurrent.futures.ThreadPoolExecutor"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils._NONE_RETURN_STR": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "adaptive_scheduler.utils._RequireAttrsABCMeta": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.abc"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.utils._RequireAttrsABCMeta.__call__": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "ValueError",
    "hasattr",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._deserialize": {
  "data": {
   "lineno": 542,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.cloudpickle"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._get_default_args": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.inspect",
    "inspect.signature",
    "inspect.signature.parameters.items",
    "str",
    "typing.Callable",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._get_npoints": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "AttributeError",
    "adaptive_scheduler.utils.adaptive",
    "contextlib.suppress",
    "int",
    "sum",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._print_same_line": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.MAX_LINE_LENGTH",
    "bool",
    "len",
    "max",
    "print",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._progress": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "adaptive.notebook_integration.in_ipynb",
    "bool",
    "list",
    "str",
    "tqdm.tqdm",
    "tqdm.tqdm_notebook"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._remove_or_move_files": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.utils._progress",
    "adaptive_scheduler.utils.os",
    "adaptive_scheduler.utils.shutil",
    "adaptive_scheduler.utils.warnings",
    "bool",
    "len",
    "pathlib.Path",
    "str",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._serialize": {
  "data": {
   "lineno": 538,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.cloudpickle"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._split": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "Exception",
    "int"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._wait_for_successful_ipyparallel_client_start": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.utils._print_same_line",
    "adaptive_scheduler.utils.time",
    "contextlib.suppress",
    "int",
    "ipyparallel.error.NoEnginesRegistered",
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.adaptive": {
  "data": {
   "shadows": "adaptive"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.add_constant_to_fname": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.combo2fname",
    "bool",
    "int",
    "pathlib.Path",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.Optional",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.cloudpickle": {
  "data": {
   "shadows": "cloudpickle"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.collections.abc": {
  "data": {
   "shadows": "collections.abc"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.combine_sequence_learners": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.adaptive",
    "enumerate",
    "list",
    "sum",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.combo2fname": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.maybe_round",
    "int",
    "pathlib.Path",
    "sorted",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.Optional",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.combo_to_fname": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.os",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.connect_to_ipyparallel": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "adaptive_scheduler.utils._wait_for_successful_ipyparallel_client_start",
    "int",
    "ipyparallel.Client",
    "print",
    "str",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.copy_from_sequence_learner": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.adaptive",
    "adaptive_scheduler.utils.hash_anything",
    "enumerate"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.hash_anything": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "TypeError",
    "adaptive_scheduler.utils.hashlib",
    "adaptive_scheduler.utils.pickle"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.in_ipynb": {
  "data": {
   "shadows": "adaptive.notebook_integration.in_ipynb"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.load_parallel": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "adaptive_scheduler.utils._progress",
    "adaptive_scheduler.utils.adaptive",
    "bool",
    "concurrent.futures.ThreadPoolExecutor",
    "int",
    "str",
    "typing.List",
    "typing.Optional",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.load_parallel.load": {
  "data": {
   "lineno": 411
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.log_exception": {
  "data": {
   "lineno": 524,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.maybe_lst": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "str",
    "tuple",
    "typing.List",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.maybe_round": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.functools",
    "complex",
    "float",
    "int",
    "isinstance",
    "numpy.complex",
    "numpy.float",
    "rnd",
    "try_is_nan_inf",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.maybe_round.try_is_nan_inf": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "Exception",
    "numpy.isinf",
    "numpy.isnan"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.round_sigfigs": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "abs",
    "adaptive_scheduler.utils.math",
    "float",
    "int",
    "round"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.save_parallel": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "adaptive_scheduler.utils._progress",
    "adaptive_scheduler.utils.adaptive",
    "bool",
    "concurrent.futures.ThreadPoolExecutor",
    "str",
    "typing.List",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.save_parallel.save": {
  "data": {
   "lineno": 440
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.shared_memory_cache": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.shared_memory_cache.cache_decorator": {
  "data": {
   "lineno": 626,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.LRUCachedCallable",
    "adaptive_scheduler.utils.functools"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.shuffle_list": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.random",
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.signature": {
  "data": {
   "shadows": "inspect.signature"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.split": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.math",
    "adaptive_scheduler.utils.toolz",
    "int",
    "len",
    "list"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.split_in_balancing_learners": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.adaptive",
    "adaptive_scheduler.utils.split",
    "int",
    "str",
    "typing.List",
    "typing.Tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.split_sequence_in_sequence_learners": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.adaptive",
    "adaptive_scheduler.utils.hash_anything",
    "adaptive_scheduler.utils.split",
    "int",
    "len",
    "pathlib.Path",
    "str",
    "typing.Any",
    "typing.Callable",
    "typing.List",
    "typing.Sequence",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.split_sequence_learner": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.adaptive",
    "adaptive_scheduler.utils.split",
    "adaptive_scheduler.utils.split_sequence_in_sequence_learners",
    "enumerate",
    "int",
    "len",
    "pathlib.Path",
    "range",
    "str",
    "typing.List",
    "typing.Tuple",
    "typing.Union",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.suppress": {
  "data": {
   "shadows": "contextlib.suppress"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.toolz": {
  "data": {
   "shadows": "toolz"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.tqdm": {
  "data": {
   "shadows": "tqdm.tqdm"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.tqdm_notebook": {
  "data": {
   "shadows": "tqdm.tqdm_notebook"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets": {
  "data": {},
  "type": "module"
 },
 "adaptive_scheduler.widgets.Button": {
  "data": {
   "shadows": "ipywidgets.Button"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.Checkbox": {
  "data": {
   "shadows": "ipywidgets.Checkbox"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.Dropdown": {
  "data": {
   "shadows": "ipywidgets.Dropdown"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.HBox": {
  "data": {
   "shadows": "ipywidgets.HBox"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.HTML": {
  "data": {
   "shadows": "ipywidgets.HTML"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.Layout": {
  "data": {
   "shadows": "ipywidgets.Layout"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.Text": {
  "data": {
   "shadows": "ipywidgets.Text"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.Textarea": {
  "data": {
   "shadows": "ipywidgets.Textarea"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.VBox": {
  "data": {
   "shadows": "ipywidgets.VBox"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets._failed_job_logs": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "glob.glob",
    "pathlib.Path"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets._files_that_contain": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "contains"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets._files_that_contain.contains": {
  "data": {
   "lineno": 65
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets._get_fnames": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "bool",
    "map",
    "pathlib.Path",
    "set",
    "sorted",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets._info_html": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "Exception",
    "_table_row",
    "contextlib.suppress",
    "datetime.timedelta",
    "enumerate",
    "int",
    "len",
    "max",
    "min",
    "pandas.Timestamp.now",
    "str",
    "sum"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets._info_html._table_row": {
  "data": {
   "lineno": 331
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets._read_file": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "Exception",
    "UnicodeDecodeError",
    "f",
    "f.readlines",
    "pathlib.Path",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets._sort_fnames": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "_try_transform",
    "collections.defaultdict",
    "datetime.datetime.now",
    "extract",
    "list",
    "numpy.datetime64",
    "pathlib.Path",
    "set",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets._sort_fnames._sort_key": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "float",
    "isinstance",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets._sort_fnames._try_transform": {
  "data": {
   "lineno": 76
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets._sort_fnames._try_transform._f": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "Exception",
    "f"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets._sort_fnames.extract": {
  "data": {
   "lineno": 104
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.asyncio": {
  "data": {
   "shadows": "asyncio"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.datetime": {
  "data": {
   "shadows": "datetime.datetime"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.display": {
  "data": {
   "shadows": "IPython.display.display"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.glob": {
  "data": {
   "shadows": "glob.glob"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.info": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "IPython.display.display",
    "adaptive_scheduler.widgets._info_html",
    "cleanup",
    "ipywidgets.Button",
    "ipywidgets.Checkbox",
    "ipywidgets.HBox",
    "ipywidgets.HTML",
    "ipywidgets.Layout",
    "ipywidgets.VBox",
    "switch_to",
    "tuple",
    "update"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.info.cancel": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": [
    "update"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.info.cleanup": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": [
    "_callable"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.info.cleanup._callable": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "update"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.info.load_learners": {
  "data": {
   "lineno": 444
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.info.switch_to": {
  "data": {
   "lineno": 429
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.info.switch_to.on_click": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": [
    "_callable",
    "tuple"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.info.toggle_logs": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "adaptive_scheduler.widgets.log_explorer"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.info.update": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": [
    "adaptive_scheduler.widgets._info_html"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.log_explorer": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "Exception",
    "_click_button_on_change",
    "_last_editted",
    "_on_dropdown_change",
    "_tail",
    "_update_fname_dropdown",
    "adaptive_scheduler.widgets._get_fnames",
    "adaptive_scheduler.widgets._read_file",
    "adaptive_scheduler.widgets.asyncio",
    "dict",
    "ipywidgets.Button",
    "ipywidgets.Checkbox",
    "ipywidgets.Dropdown",
    "ipywidgets.HTML",
    "ipywidgets.Layout",
    "ipywidgets.Text",
    "ipywidgets.Textarea",
    "ipywidgets.VBox",
    "pathlib.Path"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.log_explorer._click_button_on_change": {
  "data": {
   "lineno": 243
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.log_explorer._click_button_on_change.on_change": {
  "data": {
   "lineno": 244
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.log_explorer._last_editted": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "FileNotFoundError",
    "float",
    "pathlib.Path"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.log_explorer._on_dropdown_change": {
  "data": {
   "lineno": 232
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.log_explorer._on_dropdown_change.on_change": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "adaptive_scheduler.widgets._read_file"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.log_explorer._tail": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "adaptive_scheduler.widgets.asyncio"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.log_explorer._tail.on_click": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "_tail_log"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.log_explorer._update_fname_dropdown": {
  "data": {
   "lineno": 151
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.log_explorer._update_fname_dropdown.on_click": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.widgets._failed_job_logs",
    "adaptive_scheduler.widgets._files_that_contain",
    "adaptive_scheduler.widgets._get_fnames",
    "adaptive_scheduler.widgets._sort_fnames",
    "contextlib.suppress"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.widgets.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.suppress": {
  "data": {
   "shadows": "contextlib.suppress"
  },
  "type": "import"
 },
 "adaptive_scheduler.widgets.timedelta": {
  "data": {
   "shadows": "datetime.timedelta"
  },
  "type": "import"
 }
}