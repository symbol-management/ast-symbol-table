{
 "adaptive_scheduler": {
  "data": {},
  "type": "module"
 },
 "adaptive_scheduler.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "adaptive_scheduler.__version__": {
  "data": {
   "shadows": "adaptive_scheduler._version.__version__"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
    "adaptive_scheduler._mock_scheduler.argparse",
    "adaptive_scheduler._mock_scheduler.args",
    "adaptive_scheduler._mock_scheduler.cancel",
    "adaptive_scheduler._mock_scheduler.job_id",
    "adaptive_scheduler._mock_scheduler.logger",
    "adaptive_scheduler._mock_scheduler.logging",
    "adaptive_scheduler._mock_scheduler.parser",
    "adaptive_scheduler._mock_scheduler.queue",
    "adaptive_scheduler._mock_scheduler.structlog",
    "adaptive_scheduler._mock_scheduler.submit",
    "adaptive_scheduler._mock_scheduler.zmq",
    "print",
    "str"
   ]
  },
  "type": "module"
 },
 "adaptive_scheduler._mock_scheduler.Coroutine": {
  "data": {
   "shadows": "typing.Coroutine"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.DEFAULT_URL": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler._mock_scheduler.asyncio",
    "adaptive_scheduler._mock_scheduler.ctx",
    "adaptive_scheduler._mock_scheduler.log",
    "adaptive_scheduler._mock_scheduler.zmq",
    "print",
    "str",
    "typing.Coroutine"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler.__init__": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
    "adaptive_scheduler._mock_scheduler.asyncio"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler._dispatch": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler._mock_scheduler.log",
    "str",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler._get_new_job_id": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler._queue_is_full": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler._submit": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.os",
    "adaptive_scheduler._mock_scheduler.subprocess",
    "dict",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler.cancel": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler.queue": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "bool",
    "toolz.dicttoolz.dissoc"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler.refresh": {
  "data": {
   "lineno": 112
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.MockScheduler.submit": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.datetime",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler._external_command": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "_coro",
    "adaptive_scheduler._mock_scheduler.asyncio",
    "adaptive_scheduler._mock_scheduler.ctx",
    "adaptive_scheduler._mock_scheduler.zmq",
    "str",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.args": {
  "data": {
   "lineno": 187
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.asyncio": {
  "data": {
   "shadows": "asyncio"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.cancel": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
    "adaptive_scheduler._mock_scheduler._external_command",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.ctx": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.dissoc": {
  "data": {
   "shadows": "toolz.dicttoolz.dissoc"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.job_id": {
  "data": {
   "lineno": 195
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.log": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.logger": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.parser": {
  "data": {
   "lineno": 182
  },
  "type": "constant"
 },
 "adaptive_scheduler._mock_scheduler.queue": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
    "adaptive_scheduler._mock_scheduler._external_command",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.structlog": {
  "data": {
   "shadows": "structlog"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.submit": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
    "adaptive_scheduler._mock_scheduler._external_command",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._mock_scheduler.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.zmq": {
  "data": {
   "shadows": "zmq"
  },
  "type": "import"
 },
 "adaptive_scheduler._mock_scheduler.zmq.asyncio": {
  "data": {
   "shadows": "zmq.asyncio"
  },
  "type": "import"
 },
 "adaptive_scheduler._static_version": {
  "data": {},
  "type": "module"
 },
 "adaptive_scheduler._static_version.version": {
  "data": {
   "lineno": 2
  },
  "type": "constant"
 },
 "adaptive_scheduler._version": {
  "data": {
   "symbols_in_volume": [
    "adaptive_scheduler._version._build_py",
    "adaptive_scheduler._version._sdist",
    "adaptive_scheduler._version.get_version",
    "adaptive_scheduler._version.os",
    "adaptive_scheduler._version.package_root",
    "collections.namedtuple",
    "dict",
    "str",
    "typing.List"
   ]
  },
  "type": "module"
 },
 "adaptive_scheduler._version.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "adaptive_scheduler._version.STATIC_VERSION_FILE": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.Version": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.__version__": {
  "data": {
   "lineno": 163
  },
  "type": "constant"
 },
 "adaptive_scheduler._version._build_py": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "distutils.command.build_py.build_py"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler._version._build_py.run": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "adaptive_scheduler._version.STATIC_VERSION_FILE",
    "adaptive_scheduler._version._write_version",
    "adaptive_scheduler._version.os",
    "adaptive_scheduler._version.package_name",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version._sdist": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "setuptools.command.sdist.sdist"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler._version._sdist.make_release_tree": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "adaptive_scheduler._version.STATIC_VERSION_FILE",
    "adaptive_scheduler._version._write_version",
    "adaptive_scheduler._version.os",
    "adaptive_scheduler._version.package_name",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version._write_version": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "OSError",
    "adaptive_scheduler._version.__version__",
    "adaptive_scheduler._version.os",
    "open"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version.build_py_orig": {
  "data": {
   "shadows": "distutils.command.build_py.build_py"
  },
  "type": "import"
 },
 "adaptive_scheduler._version.cmdclass": {
  "data": {
   "lineno": 197
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.distr_root": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.get_static_version_info": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "adaptive_scheduler._version.STATIC_VERSION_FILE",
    "adaptive_scheduler._version.os",
    "adaptive_scheduler._version.package_root",
    "exec",
    "open"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version.get_version": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "adaptive_scheduler._version.STATIC_VERSION_FILE",
    "adaptive_scheduler._version.Version",
    "adaptive_scheduler._version.get_static_version_info",
    "adaptive_scheduler._version.get_version_from_git",
    "adaptive_scheduler._version.get_version_from_git_archive",
    "adaptive_scheduler._version.pep440_format"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version.get_version_from_git": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "OSError",
    "ValueError",
    "adaptive_scheduler._version.Version",
    "adaptive_scheduler._version.distr_root",
    "adaptive_scheduler._version.os",
    "adaptive_scheduler._version.subprocess"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version.get_version_from_git_archive": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "KeyError",
    "adaptive_scheduler._version.Version",
    "len",
    "sorted"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler._version.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "adaptive_scheduler._version.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "adaptive_scheduler._version.package_name": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.package_root": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "adaptive_scheduler._version.pep440_format": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "adaptive_scheduler._version.sdist_orig": {
  "data": {
   "shadows": "setuptools.command.sdist.sdist"
  },
  "type": "import"
 },
 "adaptive_scheduler._version.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "adaptive_scheduler._version.version_is_from_git": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "adaptive_scheduler._version.STATIC_VERSION_FILE",
    "adaptive_scheduler._version.get_static_version_info"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support": {
  "data": {
   "shadows": "adaptive_scheduler.client_support"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.AsyncRunner": {
  "data": {
   "shadows": "adaptive.AsyncRunner"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.BaseLearner": {
  "data": {
   "shadows": "adaptive.BaseLearner"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support._add_log_file_handler": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "adaptive_scheduler.client_support.logger",
    "adaptive_scheduler.client_support.logging"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support._get_log_entry": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "AttributeError",
    "Exception",
    "ZeroDivisionError",
    "adaptive.AsyncRunner",
    "adaptive_scheduler.client_support._get_npoints",
    "adaptive_scheduler.client_support.datetime",
    "adaptive_scheduler.client_support.psutil",
    "contextlib.suppress",
    "int",
    "len",
    "str",
    "typing.Any",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support._get_npoints": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "AttributeError",
    "adaptive.BaseLearner",
    "contextlib.suppress",
    "int",
    "sum"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support.asyncio": {
  "data": {
   "shadows": "asyncio"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.ctx": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "adaptive_scheduler.client_support.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.get_learner": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "Exception",
    "RuntimeError",
    "StopIteration",
    "UserWarning",
    "adaptive.BaseLearner",
    "adaptive_scheduler.client_support._add_log_file_handler",
    "adaptive_scheduler.client_support.ctx",
    "adaptive_scheduler.client_support.log",
    "adaptive_scheduler.client_support.socket",
    "adaptive_scheduler.client_support.zmq",
    "adaptive_scheduler.utils.log_exception",
    "isinstance",
    "maybe_lst",
    "next",
    "str",
    "typing.List",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support.get_learner.maybe_lst": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "str",
    "tuple",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support.log": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "adaptive_scheduler.client_support.log_exception": {
  "data": {
   "shadows": "adaptive_scheduler.utils.log_exception"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.log_info": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "adaptive.AsyncRunner",
    "adaptive_scheduler.client_support._get_log_entry",
    "adaptive_scheduler.client_support._get_npoints",
    "adaptive_scheduler.client_support.asyncio",
    "adaptive_scheduler.client_support.log",
    "adaptive_scheduler.client_support.socket",
    "coro"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support.logger": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "adaptive_scheduler.client_support.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.psutil": {
  "data": {
   "shadows": "psutil"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.structlog": {
  "data": {
   "shadows": "structlog"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.suppress": {
  "data": {
   "shadows": "contextlib.suppress"
  },
  "type": "import"
 },
 "adaptive_scheduler.client_support.tell_done": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "adaptive_scheduler.client_support.ctx",
    "adaptive_scheduler.client_support.log",
    "adaptive_scheduler.client_support.socket",
    "adaptive_scheduler.client_support.zmq",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.client_support.zmq": {
  "data": {
   "shadows": "zmq"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler": {
  "data": {
   "shadows": "adaptive_scheduler.scheduler"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.BaseScheduler": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.abc"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.__getstate__": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.__init__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.sys"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.__setstate__": {
  "data": {
   "lineno": 257
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler._dask_mpi": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler._executor_specific": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler._ipyparallel": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.textwrap",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler._mpi4py": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.batch_fname": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.cancel": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.time",
    "bool",
    "cancel_jobs",
    "int",
    "range",
    "set",
    "str",
    "to_cancel",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.cancel.cancel_jobs": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "UserWarning",
    "adaptive_scheduler.scheduler.subprocess",
    "adaptive_scheduler.scheduler.warnings",
    "adaptive_scheduler.utils._progress"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.cancel.to_cancel": {
  "data": {
   "lineno": 137
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.ext": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "property",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.extra_env_vars": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.extra_scheduler": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.job_script": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.abc",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.log_fname": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.os",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.output_fnames": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.queue": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.abc",
    "bool",
    "dict",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.start_job": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.subprocess",
    "adaptive_scheduler.scheduler.time",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.submit_cmd": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "property",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.BaseScheduler.write_job_script": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "open",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.DefaultScheduler": {
  "data": {
   "lineno": 758
  },
  "type": "constant"
 },
 "adaptive_scheduler.scheduler.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler": {
  "data": {
   "lineno": 606,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.__getstate__": {
  "data": {
   "lineno": 652,
   "symbols_in_volume": [
    "dict",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.__init__": {
  "data": {
   "lineno": 612,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.warnings",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.extra_scheduler": {
  "data": {
   "lineno": 707,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.job_script": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.textwrap",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.queue": {
  "data": {
   "lineno": 694,
   "symbols_in_volume": [
    "bool",
    "dict",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.LocalMockScheduler.start_job": {
  "data": {
   "lineno": 697,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.subprocess",
    "adaptive_scheduler.scheduler.time",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.scheduler.PBS.__getstate__": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "dict",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS.__init__": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.warnings",
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS._calculate_nnodes": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "Exception",
    "ValueError",
    "adaptive_scheduler.scheduler.math",
    "adaptive_scheduler.scheduler.warnings",
    "float",
    "int",
    "round"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS._fix_line_cuts": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS._guess_cores_per_node": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.collections",
    "int"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS._qnodes": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "RuntimeError",
    "adaptive_scheduler.scheduler.subprocess",
    "dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS._split_by_job": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS.job_script": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.textwrap",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS.output_fnames": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.os",
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.PBS.queue": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "RuntimeError",
    "adaptive_scheduler.scheduler.getpass",
    "adaptive_scheduler.scheduler.os",
    "adaptive_scheduler.scheduler.subprocess",
    "bool",
    "dict",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.SLURM": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.scheduler.SLURM.__init__": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.SLURM._ipyparallel": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.textwrap",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.SLURM.job_script": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.textwrap",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.SLURM.queue": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": [
    "RuntimeError",
    "adaptive_scheduler.scheduler.getpass",
    "adaptive_scheduler.scheduler.subprocess",
    "bool",
    "dict",
    "line_to_dict",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler.SLURM.queue.line_to_dict": {
  "data": {
   "lineno": 590,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler._get_default_scheduler": {
  "data": {
   "lineno": 712,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.PBS",
    "adaptive_scheduler.scheduler.SLURM",
    "adaptive_scheduler.scheduler.os",
    "adaptive_scheduler.scheduler.warnings",
    "bool",
    "distutils.spawn.find_executable"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.scheduler._progress": {
  "data": {
   "shadows": "adaptive_scheduler.utils._progress"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.adaptive_scheduler._mock_scheduler": {
  "data": {
   "shadows": "adaptive_scheduler._mock_scheduler"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.find_executable": {
  "data": {
   "shadows": "distutils.spawn.find_executable"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.getpass": {
  "data": {
   "shadows": "getpass"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "adaptive_scheduler.scheduler.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner": {
  "data": {
   "symbols_in_volume": [
    "adaptive_scheduler.sequence_learner.sys"
   ]
  },
  "type": "module"
 },
 "adaptive_scheduler.sequence_learner.BaseLearner": {
  "data": {
   "shadows": "adaptive.learner.base_learner.BaseLearner"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "adaptive.learner.base_learner.BaseLearner"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.__init__": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "adaptive_scheduler.sequence_learner.ensure_hashable",
    "adaptive_scheduler.sequence_learner.time",
    "adaptive_scheduler.sequence_learner.warnings",
    "adaptive_scheduler.utils._print_same_line",
    "copy.copy",
    "len",
    "print",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner._get_data": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner._set_data": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.ask": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "adaptive_scheduler.sequence_learner.inf",
    "len"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.done": {
  "data": {
   "lineno": 86
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.loss": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "adaptive_scheduler.sequence_learner.inf",
    "len"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.npoints": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "len",
    "property"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.remove_unfinished": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.result": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.sequence_learner.ensure_hashable"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.tell": {
  "data": {
   "lineno": 77
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.SequenceLearner.tell_pending": {
  "data": {
   "lineno": 82
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner._print_same_line": {
  "data": {
   "shadows": "adaptive_scheduler.utils._print_same_line"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner.copy": {
  "data": {
   "shadows": "copy.copy"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner.ensure_hashable": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "TypeError",
    "adaptive_scheduler.sequence_learner.warnings",
    "dict",
    "hash",
    "isinstance",
    "tuple"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.sequence_learner.inf": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "adaptive_scheduler.sequence_learner.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "adaptive_scheduler.sequence_learner.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support": {
  "data": {
   "shadows": "adaptive_scheduler.server_support"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.BaseScheduler": {
  "data": {
   "shadows": "adaptive_scheduler.scheduler.BaseScheduler"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Button": {
  "data": {
   "shadows": "ipywidgets.Button"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Coroutine": {
  "data": {
   "shadows": "typing.Coroutine"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.HBox": {
  "data": {
   "shadows": "ipywidgets.HBox"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.HTML": {
  "data": {
   "shadows": "ipywidgets.HTML"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Layout": {
  "data": {
   "shadows": "ipywidgets.Layout"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.MaxRestartsReached": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "adaptive_scheduler.server_support.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Query": {
  "data": {
   "shadows": "tinydb.Query"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.RunManager": {
  "data": {
   "lineno": 700
  },
  "type": "class"
 },
 "adaptive_scheduler.server_support.RunManager.__init__": {
  "data": {
   "lineno": 776,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support.adaptive",
    "adaptive_scheduler.server_support.asyncio",
    "adaptive_scheduler.server_support.get_allowed_url",
    "adaptive_scheduler.server_support.job_name",
    "bool",
    "dict",
    "int",
    "str",
    "typing.Any",
    "typing.Callable",
    "typing.Dict",
    "typing.List",
    "typing.Optional",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager._get_learners_file": {
  "data": {
   "lineno": 843,
   "symbols_in_volume": [
    "importlib.util.module_from_spec",
    "importlib.util.spec_from_file_location"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager._info_html": {
  "data": {
   "lineno": 1039,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support.datetime",
    "adaptive_scheduler.server_support.n_done",
    "contextlib.suppress",
    "str",
    "sum"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager._repr_html_": {
  "data": {
   "lineno": 1090
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager._set_job_names": {
  "data": {
   "lineno": 856,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager._start_database_manager": {
  "data": {
   "lineno": 881,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.start_database_manager"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager._start_job_manager": {
  "data": {
   "lineno": 860,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support._make_default_run_script",
    "adaptive_scheduler.server_support.start_job_manager"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager._start_kill_manager": {
  "data": {
   "lineno": 884,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.start_kill_manager"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager._write_db": {
  "data": {
   "lineno": 851,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.create_empty_db",
    "adaptive_scheduler.server_support.os"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.cancel": {
  "data": {
   "lineno": 897
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.cleanup": {
  "data": {
   "lineno": 906,
   "symbols_in_volume": [
    "FileNotFoundError",
    "adaptive_scheduler.server_support.cleanup",
    "adaptive_scheduler.server_support.os",
    "adaptive_scheduler.utils._delete_old_ipython_profiles",
    "contextlib.suppress",
    "set"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.elapsed_time": {
  "data": {
   "lineno": 959,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.time",
    "float"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.get_database": {
  "data": {
   "lineno": 949,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.get_database",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.info": {
  "data": {
   "lineno": 993,
   "symbols_in_volume": [
    "IPython.display.display",
    "adaptive_scheduler.server_support.cleanup",
    "ipywidgets.Button",
    "ipywidgets.HBox",
    "ipywidgets.HTML",
    "ipywidgets.Layout",
    "ipywidgets.VBox",
    "list",
    "update"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.info.cancel": {
  "data": {
   "lineno": 1019,
   "symbols_in_volume": [
    "update"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.info.cleanup": {
  "data": {
   "lineno": 1023,
   "symbols_in_volume": [
    "update"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.info.update": {
  "data": {
   "lineno": 1016
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.load_learners": {
  "data": {
   "lineno": 953,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.load_parallel"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.parse_log_files": {
  "data": {
   "lineno": 925,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.parse_log_files",
    "bool"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.start": {
  "data": {
   "lineno": 826,
   "symbols_in_volume": [
    "_start",
    "adaptive_scheduler.server_support.time"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.status": {
  "data": {
   "lineno": 974,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support.asyncio",
    "adaptive_scheduler.server_support.time",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.RunManager.task_status": {
  "data": {
   "lineno": 940
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.TinyDB": {
  "data": {
   "shadows": "tinydb.TinyDB"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.VBox": {
  "data": {
   "shadows": "ipywidgets.VBox"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support._DATABASE_MANAGER_DOC": {
  "data": {
   "lineno": 58
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support._JOB_MANAGER_DOC": {
  "data": {
   "lineno": 104
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support._KILL_MANAGER_DOC": {
  "data": {
   "lineno": 428
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support._choose_fname": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support.job_name",
    "adaptive_scheduler.server_support.log",
    "str",
    "tinydb.Query",
    "tinydb.TinyDB"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._delete_old_ipython_profiles": {
  "data": {
   "shadows": "adaptive_scheduler.utils._delete_old_ipython_profiles"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support._dispatch": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support._choose_fname",
    "adaptive_scheduler.server_support._done_with_learner",
    "adaptive_scheduler.server_support.log",
    "dict",
    "str",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._done_with_learner": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "dict",
    "str",
    "tinydb.Query",
    "tinydb.TinyDB"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._get_entry": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.job_name",
    "tinydb.Query",
    "tinydb.TinyDB"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._get_infos": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support.json",
    "bool",
    "contextlib.suppress",
    "open",
    "reversed",
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._get_n_jobs_done": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "int",
    "str",
    "tinydb.Query",
    "tinydb.TinyDB"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._get_output_fnames": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support._get_entry",
    "adaptive_scheduler.server_support.job_name"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._make_default_run_script": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": [
    "Exception",
    "ModuleNotFoundError",
    "NotImplementedError",
    "RuntimeError",
    "adaptive_scheduler.server_support.adaptive",
    "adaptive_scheduler.server_support.dill",
    "adaptive_scheduler.server_support.os",
    "adaptive_scheduler.server_support.textwrap",
    "bool",
    "dict",
    "int",
    "open",
    "str",
    "typing.Any",
    "typing.Callable",
    "typing.Dict",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support._remove_or_move_files": {
  "data": {
   "shadows": "adaptive_scheduler.utils._remove_or_move_files"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support._update_db": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.running",
    "dict",
    "str",
    "tinydb.TinyDB",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.adaptive": {
  "data": {
   "shadows": "adaptive"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.asyncio": {
  "data": {
   "shadows": "asyncio"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.cleanup": {
  "data": {
   "lineno": 664,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support.glob",
    "adaptive_scheduler.utils._remove_or_move_files",
    "bool",
    "str",
    "sum",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.concurrent.futures": {
  "data": {
   "shadows": "concurrent.futures"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.create_empty_db": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.os",
    "dict",
    "str",
    "tinydb.TinyDB",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.ctx": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.dask_mpi": {
  "data": {
   "shadows": "dask_mpi"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.dill": {
  "data": {
   "shadows": "dill"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.display": {
  "data": {
   "shadows": "IPython.display.display"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.failed_jobs": {
  "data": {
   "lineno": 405
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.get_allowed_url": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.socket",
    "adaptive_scheduler.server_support.zmq",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.get_database": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "str",
    "tinydb.TinyDB",
    "typing.Any",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.glob": {
  "data": {
   "shadows": "glob"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.job_name": {
  "data": {
   "lineno": 176
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.load_parallel": {
  "data": {
   "shadows": "adaptive_scheduler.utils.load_parallel"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.log": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.logger": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.logs_with_string_or_condition": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "ValueError",
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support._get_output_fnames",
    "adaptive_scheduler.server_support.get_database",
    "any",
    "bool",
    "callable",
    "file_has_error",
    "isinstance",
    "list",
    "str",
    "typing.Callable",
    "typing.Dict",
    "typing.List",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.logs_with_string_or_condition.file_has_error": {
  "data": {
   "lineno": 373,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.os",
    "has_error",
    "open"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.max_job_starts": {
  "data": {
   "lineno": 147
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.module_from_spec": {
  "data": {
   "shadows": "importlib.util.module_from_spec"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.n_done": {
  "data": {
   "lineno": 160
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.n_started": {
  "data": {
   "lineno": 146
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.not_queued": {
  "data": {
   "lineno": 158
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.parse_log_files": {
  "data": {
   "lineno": 613,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support._get_infos",
    "adaptive_scheduler.server_support.datetime",
    "adaptive_scheduler.server_support.get_database",
    "bool",
    "pandas.DataFrame",
    "pandas.to_timedelta",
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.periodically_clean_ipython_profiles": {
  "data": {
   "lineno": 1094,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.server_support.asyncio",
    "adaptive_scheduler.utils._delete_old_ipython_profiles",
    "clean",
    "contextlib.suppress",
    "int",
    "set"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.queued": {
  "data": {
   "lineno": 153
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.reply": {
  "data": {
   "lineno": 83
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.request": {
  "data": {
   "lineno": 82
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.running": {
  "data": {
   "lineno": 151
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.socket": {
  "data": {
   "lineno": 78
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.spec_from_file_location": {
  "data": {
   "shadows": "importlib.util.spec_from_file_location"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.start_database_manager": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "adaptive_scheduler.server_support.asyncio",
    "manage_database",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.start_job_manager": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support.asyncio",
    "int",
    "manage_jobs",
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.start_kill_manager": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "adaptive_scheduler.scheduler.BaseScheduler",
    "adaptive_scheduler.server_support.asyncio",
    "bool",
    "int",
    "manage_killer",
    "str",
    "typing.Callable",
    "typing.List",
    "typing.Optional",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.server_support.structlog": {
  "data": {
   "shadows": "structlog"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.suppress": {
  "data": {
   "shadows": "contextlib.suppress"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.to_cancel": {
  "data": {
   "lineno": 406
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.to_delete": {
  "data": {
   "lineno": 407
  },
  "type": "constant"
 },
 "adaptive_scheduler.server_support.zmq": {
  "data": {
   "shadows": "zmq"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.zmq.asyncio": {
  "data": {
   "shadows": "zmq.asyncio"
  },
  "type": "import"
 },
 "adaptive_scheduler.server_support.zmq.ssh": {
  "data": {
   "shadows": "zmq.ssh"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils": {
  "data": {
   "shadows": "adaptive_scheduler.utils"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Client": {
  "data": {
   "shadows": "ipyparallel.Client"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.MAX_LINE_LENGTH": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "adaptive_scheduler.utils.NoEnginesRegistered": {
  "data": {
   "shadows": "ipyparallel.error.NoEnginesRegistered"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.ThreadPoolExecutor": {
  "data": {
   "shadows": "concurrent.futures.ThreadPoolExecutor"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils._delete_old_ipython_profiles": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "adaptive_scheduler.utils._progress",
    "adaptive_scheduler.utils.glob",
    "adaptive_scheduler.utils.os",
    "adaptive_scheduler.utils.shutil",
    "bool",
    "concurrent.futures.ThreadPoolExecutor",
    "str",
    "typing.Set"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._get_default_args": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.inspect",
    "str",
    "typing.Callable",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._print_same_line": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.MAX_LINE_LENGTH",
    "bool",
    "len",
    "max",
    "print",
    "str"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._progress": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "adaptive.notebook_integration.in_ipynb",
    "bool",
    "list",
    "str",
    "tqdm.tqdm",
    "tqdm.tqdm_notebook",
    "typing.Any",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._remove_or_move_files": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.utils._progress",
    "adaptive_scheduler.utils.os",
    "adaptive_scheduler.utils.shutil",
    "adaptive_scheduler.utils.warnings",
    "bool",
    "str",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._split": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "Exception",
    "int",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils._wait_for_successful_ipyparallel_client_start": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "Exception",
    "adaptive_scheduler.utils._print_same_line",
    "adaptive_scheduler.utils.time",
    "contextlib.suppress",
    "int",
    "ipyparallel.error.NoEnginesRegistered",
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.adaptive": {
  "data": {
   "shadows": "adaptive"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.combo_to_fname": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.os",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.connect_to_ipyparallel": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "adaptive_scheduler.utils._wait_for_successful_ipyparallel_client_start",
    "int",
    "ipyparallel.Client",
    "print",
    "str",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.glob": {
  "data": {
   "shadows": "glob"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.in_ipynb": {
  "data": {
   "shadows": "adaptive.notebook_integration.in_ipynb"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.load_parallel": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "adaptive_scheduler.utils._progress",
    "adaptive_scheduler.utils.adaptive",
    "bool",
    "concurrent.futures.ThreadPoolExecutor",
    "str",
    "typing.List",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.load_parallel.load": {
  "data": {
   "lineno": 181
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.log_exception": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.save_parallel": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "adaptive_scheduler.utils._progress",
    "adaptive_scheduler.utils.adaptive",
    "bool",
    "concurrent.futures.ThreadPoolExecutor",
    "str",
    "typing.List",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.save_parallel.save": {
  "data": {
   "lineno": 210
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.shuffle_list": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.random",
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.split": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.math",
    "adaptive_scheduler.utils.toolz",
    "int",
    "len",
    "list",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.split_in_balancing_learners": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "adaptive_scheduler.utils.adaptive",
    "adaptive_scheduler.utils.split",
    "int",
    "str",
    "typing.List",
    "typing.Tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "adaptive_scheduler.utils.suppress": {
  "data": {
   "shadows": "contextlib.suppress"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.toolz": {
  "data": {
   "shadows": "toolz"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.tqdm": {
  "data": {
   "shadows": "tqdm.tqdm"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.tqdm_notebook": {
  "data": {
   "shadows": "tqdm.tqdm_notebook"
  },
  "type": "import"
 },
 "adaptive_scheduler.utils.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 }
}