{
 "snorkel": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.analysis": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.analysis.error_analysis": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.analysis.error_analysis.get_label_buckets": {
  "lineno": 9,
  "symbols_in_volume": [
   "collections.defaultdict",
   "numpy.array",
   "numpy.ndarray",
   "snorkel.utils.to_int_label_array",
   "typing.DefaultDict",
   "typing.Dict",
   "typing.List",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "snorkel.analysis.metrics": {
  "lineno": null,
  "symbols_in_volume": [
   "sklearn.metrics.accuracy_score",
   "sklearn.metrics.fbeta_score",
   "sklearn.metrics.matthews_corrcoef",
   "sklearn.metrics.precision_score",
   "sklearn.metrics.recall_score"
  ],
  "type": "module"
 },
 "snorkel.analysis.metrics.Metric": {
  "lineno": 9,
  "symbols_in_volume": [
   "typing.Callable",
   "typing.List",
   "typing.NamedTuple"
  ],
  "type": "class"
 },
 "snorkel.analysis.metrics._coverage_score": {
  "lineno": 79,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.sum"
  ],
  "type": "function"
 },
 "snorkel.analysis.metrics._f1_macro_score": {
  "lineno": 104,
  "symbols_in_volume": [
   "numpy.ndarray",
   "sklearn.metrics.f1_score"
  ],
  "type": "function"
 },
 "snorkel.analysis.metrics._f1_micro_score": {
  "lineno": 100,
  "symbols_in_volume": [
   "numpy.ndarray",
   "sklearn.metrics.f1_score"
  ],
  "type": "function"
 },
 "snorkel.analysis.metrics._f1_score": {
  "lineno": 91,
  "symbols_in_volume": [
   "numpy.ndarray",
   "sklearn.metrics.f1_score"
  ],
  "type": "function"
 },
 "snorkel.analysis.metrics._roc_auc_score": {
  "lineno": 83,
  "symbols_in_volume": [
   "numpy.ndarray",
   "sklearn.metrics.roc_auc_score"
  ],
  "type": "function"
 },
 "snorkel.analysis.metrics.metric_score": {
  "lineno": 16,
  "symbols_in_volume": [
   "numpy.ndarray",
   "snorkel.utils.filter_labels",
   "snorkel.utils.to_int_label_array",
   "typing.Any",
   "typing.Dict",
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.analysis.scorer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.analysis.scorer.Scorer": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.analysis.scorer.Scorer.__init__": {
  "lineno": 39,
  "symbols_in_volume": [
   "functools.partial",
   "snorkel.analysis.metrics.METRICS",
   "snorkel.analysis.metrics.metric_score",
   "typing.Callable",
   "typing.Dict",
   "typing.List",
   "typing.Mapping",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.analysis.scorer.Scorer.score": {
  "lineno": 71,
  "symbols_in_volume": [
   "numpy.ndarray",
   "typing.Dict",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.analysis.scorer.Scorer.score_slices": {
  "lineno": 116,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.recarray",
   "pandas.DataFrame",
   "pandas.DataFrame.from_dict",
   "typing.Dict",
   "typing.Union"
  ],
  "type": "function"
 },
 "snorkel.augmentation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.augmentation.apply": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.augmentation.apply.core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.augmentation.apply.core.BaseTFApplier": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.augmentation.apply.core.BaseTFApplier.__init__": {
  "lineno": 32,
  "symbols_in_volume": [
   "snorkel.augmentation.policy.core.Policy",
   "snorkel.augmentation.tf.BaseTransformationFunction",
   "snorkel.utils.data_operators.check_unique_names",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.augmentation.apply.core.BaseTFApplier.__repr__": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.augmentation.apply.core.BaseTFApplier._apply_policy_to_data_point": {
  "lineno": 38,
  "symbols_in_volume": [
   "snorkel.types.DataPoint",
   "snorkel.types.DataPoints"
  ],
  "type": "function"
 },
 "snorkel.augmentation.apply.core.TFApplier": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.augmentation.apply.core.TFApplier.apply": {
  "lineno": 98,
  "symbols_in_volume": [
   "snorkel.types.DataPoint",
   "snorkel.types.DataPoints",
   "tqdm.tqdm",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.augmentation.apply.core.TFApplier.apply_generator": {
  "lineno": 69,
  "symbols_in_volume": [
   "snorkel.types.DataPoint",
   "snorkel.types.DataPoints",
   "typing.Iterator",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.augmentation.apply.pandas": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.augmentation.apply.pandas.PandasTFApplier": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.augmentation.apply.pandas.PandasTFApplier.apply": {
  "lineno": 47,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.concat",
   "tqdm.tqdm",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.augmentation.apply.pandas.PandasTFApplier.apply_generator": {
  "lineno": 18,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.concat",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.augmentation.policy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.augmentation.policy.core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.augmentation.policy.core.ApplyAllPolicy": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.augmentation.policy.core.ApplyAllPolicy.generate": {
  "lineno": 113,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.augmentation.policy.core.ApplyEachPolicy": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.augmentation.policy.core.ApplyEachPolicy.__init__": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.augmentation.policy.core.ApplyEachPolicy.generate_for_example": {
  "lineno": 168,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.augmentation.policy.core.ApplyOnePolicy": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.augmentation.policy.core.ApplyOnePolicy.__init__": {
  "lineno": 127,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.augmentation.policy.core.Policy": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.augmentation.policy.core.Policy.__init__": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.augmentation.policy.core.Policy.generate": {
  "lineno": 63,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.augmentation.policy.core.Policy.generate_for_example": {
  "lineno": 44,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.augmentation.policy.sampling": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.augmentation.policy.sampling.MeanFieldPolicy": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.augmentation.policy.sampling.MeanFieldPolicy.__init__": {
  "lineno": 45,
  "symbols_in_volume": [
   "typing.Optional",
   "typing.Sequence"
  ],
  "type": "function"
 },
 "snorkel.augmentation.policy.sampling.MeanFieldPolicy.generate": {
  "lineno": 59,
  "symbols_in_volume": [
   "numpy.random.choice",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.augmentation.policy.sampling.RandomPolicy": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.augmentation.policy.sampling.RandomPolicy.__init__": {
  "lineno": 103,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.augmentation.tf": {
  "lineno": null,
  "symbols_in_volume": [
   "snorkel.map.BaseMapper"
  ],
  "type": "module"
 },
 "snorkel.augmentation.tf.LambdaTransformationFunction": {
  "lineno": 25,
  "symbols_in_volume": [
   "snorkel.map.LambdaMapper"
  ],
  "type": "class"
 },
 "snorkel.augmentation.tf.TransformationFunction": {
  "lineno": 16,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "snorkel.augmentation.tf.transformation_function": {
  "lineno": 34,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper"
  ],
  "type": "class"
 },
 "snorkel.classification": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.classification.data": {
  "lineno": null,
  "symbols_in_volume": [
   "torch.Tensor",
   "typing.Any",
   "typing.Dict",
   "typing.Tuple"
  ],
  "type": "module"
 },
 "snorkel.classification.data.DictDataLoader": {
  "lineno": 155,
  "symbols_in_volume": [
   "torch.utils.data.DataLoader"
  ],
  "type": "class"
 },
 "snorkel.classification.data.DictDataLoader.__init__": {
  "lineno": 170,
  "symbols_in_volume": [
   "typing.Any",
   "typing.Callable"
  ],
  "type": "function"
 },
 "snorkel.classification.data.DictDataset": {
  "lineno": 19,
  "symbols_in_volume": [
   "torch.utils.data.Dataset"
  ],
  "type": "class"
 },
 "snorkel.classification.data.DictDataset.__getitem__": {
  "lineno": 63,
  "symbols_in_volume": [
   "typing.Tuple"
  ],
  "type": "function"
 },
 "snorkel.classification.data.DictDataset.__init__": {
  "lineno": 51,
  "symbols_in_volume": [
   "torch.Tensor"
  ],
  "type": "function"
 },
 "snorkel.classification.data.DictDataset.__len__": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.data.DictDataset.__repr__": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.data.DictDataset.from_tensors": {
  "lineno": 82,
  "symbols_in_volume": [
   "torch.Tensor"
  ],
  "type": "function"
 },
 "snorkel.classification.data.collate_dicts": {
  "lineno": 122,
  "symbols_in_volume": [
   "collections.defaultdict",
   "torch.Tensor",
   "typing.Any",
   "typing.Dict",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.classification.loss": {
  "lineno": null,
  "symbols_in_volume": [
   "torch.Tensor",
   "typing.List",
   "typing.Mapping"
  ],
  "type": "module"
 },
 "snorkel.classification.loss.cross_entropy_with_probs": {
  "lineno": 9,
  "symbols_in_volume": [
   "torch.Tensor",
   "torch.long",
   "torch.nn.functional.cross_entropy",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier": {
  "lineno": null,
  "symbols_in_volume": [
   "typing.Any",
   "typing.Dict",
   "typing.Mapping",
   "typing.Union"
  ],
  "type": "module"
 },
 "snorkel.classification.multitask_classifier.ClassifierConfig": {
  "lineno": 34,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "class"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier": {
  "lineno": 51,
  "symbols_in_volume": [
   "torch.nn.Module"
  ],
  "type": "class"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.__init__": {
  "lineno": 81,
  "symbols_in_volume": [
   "logging.info",
   "snorkel.analysis.Scorer",
   "torch.Tensor",
   "torch.nn.ModuleDict",
   "typing.Any",
   "typing.Callable",
   "typing.Dict",
   "typing.List",
   "typing.Optional",
   "typing.Sequence",
   "typing.Set"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.__repr__": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier._build_network": {
  "lineno": 118,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier._calculate_probs": {
  "lineno": 282,
  "symbols_in_volume": [
   "torch.Tensor",
   "torch.no_grad",
   "typing.Any",
   "typing.Dict",
   "typing.Iterable"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier._get_labels_to_tasks": {
  "lineno": 455,
  "symbols_in_volume": [
   "typing.Dict",
   "typing.Iterable",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier._move_to_device": {
  "lineno": 478,
  "symbols_in_volume": [
   "logging.info",
   "torch.cuda.is_available",
   "torch.device"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.add_task": {
  "lineno": 136,
  "symbols_in_volume": [
   "torch.nn.DataParallel"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.calculate_loss": {
  "lineno": 229,
  "symbols_in_volume": [
   "snorkel.classification.utils.move_to_device",
   "torch.Tensor",
   "torch.any",
   "typing.Any",
   "typing.Dict",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.forward": {
  "lineno": 165,
  "symbols_in_volume": [
   "snorkel.classification.utils.move_to_device",
   "typing.Any",
   "typing.Dict",
   "typing.Iterable"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.load": {
  "lineno": 511,
  "symbols_in_volume": [
   "logging.error",
   "logging.info",
   "os.path.exists",
   "torch.device",
   "torch.load"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.predict": {
  "lineno": 314,
  "symbols_in_volume": [
   "collections.defaultdict",
   "numpy.array",
   "numpy.ndarray",
   "snorkel.classification.data.DictDataLoader",
   "snorkel.utils.probs_to_preds",
   "torch.Tensor",
   "torch.no_grad",
   "typing.Dict",
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.save": {
  "lineno": 488,
  "symbols_in_volume": [
   "logging.info",
   "logging.warning",
   "os.makedirs",
   "os.path.dirname",
   "os.path.exists",
   "torch.save"
  ],
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.score": {
  "lineno": 379,
  "symbols_in_volume": [
   "logging.info",
   "pandas.DataFrame",
   "snorkel.classification.data.DictDataLoader",
   "snorkel.classification.utils.metrics_dict_to_dataframe",
   "torch.no_grad",
   "typing.Dict",
   "typing.List",
   "typing.Optional",
   "typing.Union"
  ],
  "type": "function"
 },
 "snorkel.classification.task": {
  "lineno": null,
  "symbols_in_volume": [
   "torch.FloatTensor",
   "typing.List",
   "typing.Mapping"
  ],
  "type": "module"
 },
 "snorkel.classification.task.Operation": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.classification.task.Operation.__init__": {
  "lineno": 48,
  "symbols_in_volume": [
   "typing.Optional",
   "typing.Sequence",
   "typing.Tuple",
   "typing.Union"
  ],
  "type": "function"
 },
 "snorkel.classification.task.Operation.__repr__": {
  "lineno": 58,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.task.Task": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.classification.task.Task.__init__": {
  "lineno": 105,
  "symbols_in_volume": [
   "functools.partial",
   "logging.info",
   "snorkel.analysis.Scorer",
   "torch.Tensor",
   "torch.nn.ModuleDict",
   "torch.nn.functional.cross_entropy",
   "torch.nn.functional.softmax",
   "typing.Callable",
   "typing.Optional",
   "typing.Sequence"
  ],
  "type": "function"
 },
 "snorkel.classification.task.Task.__repr__": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.classification.training.loggers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.classification.training.loggers.checkpointer": {
  "lineno": null,
  "symbols_in_volume": [
   "typing.Dict"
  ],
  "type": "module"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer.__init__": {
  "lineno": 61,
  "symbols_in_volume": [
   "logging.info",
   "os.makedirs",
   "os.path.exists",
   "typing.Any",
   "typing.Dict"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer._is_new_best": {
  "lineno": 153,
  "symbols_in_volume": [
   "typing.Set"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer._make_metric_map": {
  "lineno": 214,
  "symbols_in_volume": [
   "typing.Dict",
   "typing.Iterable",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer._validate_config": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer.checkpoint": {
  "lineno": 107,
  "symbols_in_volume": [
   "logging.info",
   "shutil.copyfile",
   "snorkel.classification.multitask_classifier.MultitaskClassifier"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer.clear": {
  "lineno": 178,
  "symbols_in_volume": [
   "glob.glob",
   "logging.info",
   "os.remove"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer.load_best_model": {
  "lineno": 186,
  "symbols_in_volume": [
   "logging.info",
   "snorkel.classification.multitask_classifier.MultitaskClassifier"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.CheckpointerConfig": {
  "lineno": 13,
  "symbols_in_volume": [
   "snorkel.types.Config",
   "typing.List",
   "typing.Optional"
  ],
  "type": "class"
 },
 "snorkel.classification.training.loggers.log_manager": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager": {
  "lineno": 27,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.__init__": {
  "lineno": 42,
  "symbols_in_volume": [
   "logging.info",
   "typing.Any",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.cleanup": {
  "lineno": 130,
  "symbols_in_volume": [
   "snorkel.classification.multitask_classifier.MultitaskClassifier"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.reset": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.trigger_checkpointing": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.trigger_evaluation": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.update": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManagerConfig": {
  "lineno": 11,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "class"
 },
 "snorkel.classification.training.loggers.log_writer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.__init__": {
  "lineno": 46,
  "symbols_in_volume": [
   "collections.defaultdict",
   "datetime.datetime.now",
   "os.makedirs",
   "os.path.exists",
   "os.path.join",
   "typing.Any",
   "typing.DefaultDict",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.add_scalar": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.cleanup": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.write_config": {
  "lineno": 76,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.write_json": {
  "lineno": 114,
  "symbols_in_volume": [
   "json.dump",
   "logging.warning",
   "os.path.join",
   "typing.Any",
   "typing.Mapping"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.write_log": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.write_text": {
  "lineno": 100,
  "symbols_in_volume": [
   "os.path.join"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriterConfig": {
  "lineno": 11,
  "symbols_in_volume": [
   "snorkel.types.Config",
   "typing.Optional"
  ],
  "type": "class"
 },
 "snorkel.classification.training.loggers.tensorboard_writer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.TensorBoardWriter": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.TensorBoardWriter.__init__": {
  "lineno": 26,
  "symbols_in_volume": [
   "tensorboardX.SummaryWriter",
   "typing.Any"
  ],
  "type": "function"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.TensorBoardWriter.add_scalar": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.TensorBoardWriter.cleanup": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.TensorBoardWriter.write_config": {
  "lineno": 44,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "function"
 },
 "snorkel.classification.training.schedulers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.classification.training.schedulers.scheduler": {
  "lineno": null,
  "symbols_in_volume": [
   "torch.Tensor",
   "typing.Any",
   "typing.Dict",
   "typing.Iterator",
   "typing.Tuple"
  ],
  "type": "module"
 },
 "snorkel.classification.training.schedulers.scheduler.Scheduler": {
  "lineno": 13,
  "symbols_in_volume": [
   "abc.ABC"
  ],
  "type": "class"
 },
 "snorkel.classification.training.schedulers.scheduler.Scheduler.__init__": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.schedulers.scheduler.Scheduler.get_batches": {
  "lineno": 19,
  "symbols_in_volume": [
   "abc.abstractmethod",
   "typing.Sequence"
  ],
  "type": "function"
 },
 "snorkel.classification.training.schedulers.sequential_scheduler": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.classification.training.schedulers.sequential_scheduler.SequentialScheduler": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.classification.training.schedulers.sequential_scheduler.SequentialScheduler.__init__": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.schedulers.sequential_scheduler.SequentialScheduler.get_batches": {
  "lineno": 14,
  "symbols_in_volume": [
   "snorkel.classification.data.DictDataLoader",
   "typing.Sequence"
  ],
  "type": "function"
 },
 "snorkel.classification.training.schedulers.shuffled_scheduler": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.classification.training.schedulers.shuffled_scheduler.ShuffledScheduler": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.classification.training.schedulers.shuffled_scheduler.ShuffledScheduler.__init__": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.schedulers.shuffled_scheduler.ShuffledScheduler.get_batches": {
  "lineno": 15,
  "symbols_in_volume": [
   "random.shuffle",
   "snorkel.classification.data.DictDataLoader",
   "typing.Sequence"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer": {
  "lineno": null,
  "symbols_in_volume": [
   "typing.Dict"
  ],
  "type": "module"
 },
 "snorkel.classification.training.trainer.Trainer": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.classification.training.trainer.Trainer.__init__": {
  "lineno": 137,
  "symbols_in_volume": [
   "snorkel.utils.config_utils.merge_config",
   "typing.Any",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._aggregate_losses": {
  "lineno": 483,
  "symbols_in_volume": [
   "typing.DefaultDict"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._check_dataloaders": {
  "lineno": 249,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._checkpoint_model": {
  "lineno": 474,
  "symbols_in_volume": [
   "snorkel.classification.multitask_classifier.MultitaskClassifier"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._evaluate": {
  "lineno": 421,
  "symbols_in_volume": [
   "snorkel.classification.multitask_classifier.MultitaskClassifier",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._log_metrics": {
  "lineno": 467,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._logging": {
  "lineno": 431,
  "symbols_in_volume": [
   "snorkel.classification.multitask_classifier.MultitaskClassifier",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._reset_losses": {
  "lineno": 508,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_batch_scheduler": {
  "lineno": 414,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_checkpointer": {
  "lineno": 279,
  "symbols_in_volume": [
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_log_manager": {
  "lineno": 292,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_log_writer": {
  "lineno": 265,
  "symbols_in_volume": [
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_lr_scheduler": {
  "lineno": 336,
  "symbols_in_volume": [
   "torch.optim.lr_scheduler.ExponentialLR",
   "torch.optim.lr_scheduler.LambdaLR",
   "torch.optim.lr_scheduler.StepLR",
   "torch.optim.lr_scheduler._LRScheduler",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_optimizer": {
  "lineno": 300,
  "symbols_in_volume": [
   "logging.info",
   "torch.nn.Module",
   "torch.optim.Adam",
   "torch.optim.Adamax",
   "torch.optim.Optimizer",
   "torch.optim.SGD"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_warmup_scheduler": {
  "lineno": 368,
  "symbols_in_volume": [
   "logging.info",
   "torch.optim.lr_scheduler.LambdaLR",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._update_lr_scheduler": {
  "lineno": 405,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer.fit": {
  "lineno": 143,
  "symbols_in_volume": [
   "logging.info",
   "snorkel.classification.multitask_classifier.MultitaskClassifier",
   "torch.nn.utils.clip_grad_norm_",
   "torch.stack",
   "tqdm.tqdm",
   "typing.Dict",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.classification.training.trainer.TrainerConfig": {
  "lineno": 34,
  "symbols_in_volume": [
   "logging",
   "snorkel.classification.multitask_classifier.ClassifierConfig",
   "snorkel.types.Config",
   "snorkel.utils.lr_schedulers.LRSchedulerConfig",
   "snorkel.utils.optimizers.OptimizerConfig",
   "typing.Optional"
  ],
  "type": "class"
 },
 "snorkel.classification.utils": {
  "lineno": null,
  "symbols_in_volume": [
   "torch.Tensor",
   "typing.Union"
  ],
  "type": "module"
 },
 "snorkel.classification.utils.collect_flow_outputs_by_suffix": {
  "lineno": 111,
  "symbols_in_volume": [
   "torch.Tensor",
   "typing.Dict",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.classification.utils.list_to_tensor": {
  "lineno": 10,
  "symbols_in_volume": [
   "torch.Tensor",
   "torch.stack",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.classification.utils.metrics_dict_to_dataframe": {
  "lineno": 122,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "typing.Dict"
  ],
  "type": "function"
 },
 "snorkel.classification.utils.move_to_device": {
  "lineno": 76,
  "symbols_in_volume": [
   "torch.Tensor",
   "torch.cuda.is_available"
  ],
  "type": "function"
 },
 "snorkel.classification.utils.pad_batch": {
  "lineno": 29,
  "symbols_in_volume": [
   "numpy.max",
   "torch.Tensor",
   "torch.eq",
   "typing.List",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "snorkel.contrib": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.analysis": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.analysis.LFAnalysis": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.analysis.LFAnalysis.__init__": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.ndarray",
   "scipy.sparse.csr_matrix",
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis._conflicted_data_points": {
  "lineno": 59,
  "symbols_in_volume": [
   "numpy.max",
   "numpy.ndarray",
   "numpy.ravel",
   "scipy.sparse.diags"
  ],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis._covered_data_points": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.ravel",
   "numpy.where"
  ],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis._overlapped_data_points": {
  "lineno": 55,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.ravel",
   "numpy.where"
  ],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.label_conflict": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.label_coverage": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.label_overlap": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_conflicts": {
  "lineno": 224,
  "symbols_in_volume": [
   "numpy.nan_to_num",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_coverages": {
  "lineno": 159,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.ravel"
  ],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_empirical_accuracies": {
  "lineno": 267,
  "symbols_in_volume": [
   "numpy.errstate",
   "numpy.nan_to_num",
   "numpy.ndarray",
   "numpy.vstack",
   "numpy.where",
   "snorkel.utils.to_int_label_array"
  ],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_empirical_probs": {
  "lineno": 291,
  "symbols_in_volume": [
   "itertools.product",
   "numpy.ndarray",
   "numpy.where",
   "numpy.zeros",
   "snorkel.utils.to_int_label_array"
  ],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_overlaps": {
  "lineno": 181,
  "symbols_in_volume": [
   "numpy.nan_to_num",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_polarities": {
  "lineno": 134,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_summary": {
  "lineno": 323,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "numpy.array",
   "numpy.concatenate",
   "numpy.diagonal",
   "numpy.ndarray",
   "numpy.unique",
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.metrics.confusion_matrix",
   "typing.List",
   "typing.Optional",
   "typing.Union"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.apply.core": {
  "lineno": null,
  "symbols_in_volume": [
   "typing.List",
   "typing.Tuple"
  ],
  "type": "module"
 },
 "snorkel.labeling.apply.core.ApplierMetadata": {
  "lineno": 14,
  "symbols_in_volume": [
   "typing.Dict",
   "typing.NamedTuple"
  ],
  "type": "class"
 },
 "snorkel.labeling.apply.core.BaseLFApplier": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.apply.core.BaseLFApplier.__init__": {
  "lineno": 57,
  "symbols_in_volume": [
   "snorkel.labeling.lf.LabelingFunction",
   "snorkel.utils.data_operators.check_unique_names",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.core.BaseLFApplier.__repr__": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.labeling.apply.core.BaseLFApplier._numpy_from_row_data": {
  "lineno": 62,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "numpy.int64",
   "numpy.ndarray",
   "numpy.recarray",
   "numpy.zeros",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.core.LFApplier": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.apply.core.LFApplier.apply": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.ndarray",
   "snorkel.types.DataPoints",
   "tqdm.tqdm",
   "typing.Tuple",
   "typing.Union"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.core._FunctionCaller": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.apply.core._FunctionCaller.__call__": {
  "lineno": 26,
  "symbols_in_volume": [
   "snorkel.labeling.lf.LabelingFunction",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.core._FunctionCaller.__init__": {
  "lineno": 22,
  "symbols_in_volume": [
   "typing.DefaultDict"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.core.apply_lfs_to_data_point": {
  "lineno": 84,
  "symbols_in_volume": [
   "snorkel.labeling.lf.LabelingFunction",
   "snorkel.types.DataPoint",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.dask": {
  "lineno": null,
  "symbols_in_volume": [
   "dask.distributed.Client",
   "typing.Union"
  ],
  "type": "module"
 },
 "snorkel.labeling.apply.dask.DaskLFApplier": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.apply.dask.DaskLFApplier.apply": {
  "lineno": 23,
  "symbols_in_volume": [
   "dask.dataframe.DataFrame",
   "functools.partial",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.dask.PandasParallelLFApplier": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.apply.dask.PandasParallelLFApplier.apply": {
  "lineno": 62,
  "symbols_in_volume": [
   "dask.dataframe.from_pandas",
   "numpy.ndarray",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.pandas": {
  "lineno": null,
  "symbols_in_volume": [
   "typing.List",
   "typing.Tuple"
  ],
  "type": "module"
 },
 "snorkel.labeling.apply.pandas.PandasLFApplier": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.apply.pandas.PandasLFApplier.apply": {
  "lineno": 75,
  "symbols_in_volume": [
   "functools.partial",
   "numpy.ndarray",
   "pandas.DataFrame",
   "tqdm.tqdm.pandas",
   "typing.Tuple",
   "typing.Union"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.pandas.apply_lfs_to_data_point": {
  "lineno": 16,
  "symbols_in_volume": [
   "snorkel.labeling.lf.LabelingFunction",
   "snorkel.types.DataPoint",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.pandas.rows_to_triplets": {
  "lineno": 43,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.spark": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.apply.spark.SparkLFApplier": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.apply.spark.SparkLFApplier.apply": {
  "lineno": 21,
  "symbols_in_volume": [
   "numpy.ndarray",
   "pyspark.RDD"
  ],
  "type": "function"
 },
 "snorkel.labeling.apply.spark.SparkLFApplier.apply.map_fn": {
  "lineno": 38,
  "symbols_in_volume": [
   "snorkel.types.DataPoint",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.lf.core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.lf.core.LabelingFunction": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.lf.core.LabelingFunction.__call__": {
  "lineno": 61,
  "symbols_in_volume": [
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.core.LabelingFunction.__init__": {
  "lineno": 42,
  "symbols_in_volume": [
   "snorkel.preprocess.BasePreprocessor",
   "typing.Any",
   "typing.Callable",
   "typing.List",
   "typing.Mapping",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.core.LabelingFunction.__repr__": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.labeling.lf.core.LabelingFunction._preprocess_data_point": {
  "lineno": 54,
  "symbols_in_volume": [
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.core.labeling_function": {
  "lineno": 84,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.lf.core.labeling_function.__call__": {
  "lineno": 127,
  "symbols_in_volume": [
   "typing.Callable"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.core.labeling_function.__init__": {
  "lineno": 115,
  "symbols_in_volume": [
   "snorkel.preprocess.BasePreprocessor",
   "typing.Any",
   "typing.List",
   "typing.Mapping",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.nlp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction.__init__": {
  "lineno": 70,
  "symbols_in_volume": [
   "snorkel.preprocess.BasePreprocessor",
   "snorkel.preprocess.nlp.EN_CORE_WEB_SM",
   "typing.Any",
   "typing.Callable",
   "typing.List",
   "typing.Mapping",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction._create_or_check_preprocessor": {
  "lineno": 41,
  "symbols_in_volume": [
   "snorkel.preprocess.BasePreprocessor",
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction._create_preprocessor": {
  "lineno": 35,
  "symbols_in_volume": [
   "snorkel.preprocess.nlp.SpacyPreprocessor"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.NLPLabelingFunction": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.lf.nlp.NLPLabelingFunction._create_preprocessor": {
  "lineno": 157,
  "symbols_in_volume": [
   "snorkel.preprocess.nlp.SpacyPreprocessor"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.SpacyPreprocessorConfig": {
  "lineno": 23,
  "symbols_in_volume": [
   "snorkel.preprocess.nlp.SpacyPreprocessor",
   "typing.NamedTuple"
  ],
  "type": "class"
 },
 "snorkel.labeling.lf.nlp.SpacyPreprocessorParameters": {
  "lineno": 9,
  "symbols_in_volume": [
   "snorkel.preprocess.BasePreprocessor",
   "typing.List",
   "typing.NamedTuple",
   "typing.Optional"
  ],
  "type": "class"
 },
 "snorkel.labeling.lf.nlp.base_nlp_labeling_function": {
  "lineno": 164,
  "symbols_in_volume": [
   "typing.Optional"
  ],
  "type": "class"
 },
 "snorkel.labeling.lf.nlp.base_nlp_labeling_function.__call__": {
  "lineno": 187,
  "symbols_in_volume": [
   "typing.Callable"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.base_nlp_labeling_function.__init__": {
  "lineno": 169,
  "symbols_in_volume": [
   "snorkel.preprocess.BasePreprocessor",
   "snorkel.preprocess.nlp.EN_CORE_WEB_SM",
   "typing.Any",
   "typing.List",
   "typing.Mapping",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.nlp_labeling_function": {
  "lineno": 216,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.lf.nlp_spark": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.lf.nlp_spark.SparkNLPLabelingFunction": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.lf.nlp_spark.SparkNLPLabelingFunction._create_preprocessor": {
  "lineno": 51,
  "symbols_in_volume": [
   "snorkel.preprocess.nlp.SpacyPreprocessor",
   "snorkel.preprocess.spark.make_spark_preprocessor"
  ],
  "type": "function"
 },
 "snorkel.labeling.lf.nlp_spark.spark_nlp_labeling_function": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.model": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.model.baselines": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.model.baselines.BaselineVoter": {
  "lineno": 8,
  "symbols_in_volume": [
   "snorkel.labeling.model.label_model.LabelModel"
  ],
  "type": "class"
 },
 "snorkel.labeling.model.baselines.BaselineVoter.fit": {
  "lineno": 11,
  "symbols_in_volume": [
   "typing.Any"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.baselines.MajorityClassVoter": {
  "lineno": 60,
  "symbols_in_volume": [
   "snorkel.labeling.model.label_model.LabelModel"
  ],
  "type": "class"
 },
 "snorkel.labeling.model.baselines.MajorityClassVoter.fit": {
  "lineno": 63,
  "symbols_in_volume": [
   "numpy.ndarray",
   "typing.Any"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.baselines.MajorityClassVoter.predict_proba": {
  "lineno": 77,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.where",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.baselines.MajorityLabelVoter": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.model.baselines.MajorityLabelVoter.predict_proba": {
  "lineno": 116,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.where",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.baselines.RandomVoter": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.model.baselines.RandomVoter.predict_proba": {
  "lineno": 34,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.random.rand"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.graph_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.model.graph_utils.get_clique_tree": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.chordal_graph_cliques",
   "networkx.is_chordal",
   "networkx.minimum_spanning_tree",
   "typing.Iterable",
   "typing.List",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model": {
  "lineno": null,
  "symbols_in_volume": [
   "typing.Dict"
  ],
  "type": "module"
 },
 "snorkel.labeling.model.label_model.LabelModel": {
  "lineno": 89,
  "symbols_in_volume": [
   "torch.nn.Module"
  ],
  "type": "class"
 },
 "snorkel.labeling.model.label_model.LabelModel.__init__": {
  "lineno": 136,
  "symbols_in_volume": [
   "torch.cuda.is_available",
   "typing.Any"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._break_col_permutation_symmetry": {
  "lineno": 785,
  "symbols_in_volume": [
   "itertools.permutations",
   "numpy.allclose",
   "numpy.argmax",
   "numpy.eye",
   "torch.Tensor",
   "torch.nn.Parameter"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._build_mask": {
  "lineno": 229,
  "symbols_in_volume": [
   "torch.ones"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._clamp_params": {
  "lineno": 737,
  "symbols_in_volume": [
   "numpy.ceil",
   "numpy.log10"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._count_accurate_lfs": {
  "lineno": 758,
  "symbols_in_volume": [
   "numpy.diagonal",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._create_L_ind": {
  "lineno": 148,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.where",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._create_tree": {
  "lineno": 597,
  "symbols_in_volume": [
   "snorkel.labeling.model.graph_utils.get_clique_tree"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._execute_logging": {
  "lineno": 601,
  "symbols_in_volume": [
   "torch.Tensor"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._generate_O": {
  "lineno": 244,
  "symbols_in_volume": [
   "numpy.ndarray",
   "torch.from_numpy"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._get_augmented_label_matrix": {
  "lineno": 168,
  "symbols_in_volume": [
   "itertools.chain",
   "numpy.copy",
   "numpy.ndarray",
   "typing.Dict"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._get_conditional_probs": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._init_params": {
  "lineno": 260,
  "symbols_in_volume": [
   "numpy.random.random",
   "torch.clamp",
   "torch.diag",
   "torch.nn.Parameter",
   "torch.ones",
   "torch.zeros"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._loss_l2": {
  "lineno": 514,
  "symbols_in_volume": [
   "torch.Tensor",
   "torch.diag",
   "torch.eye",
   "torch.float32",
   "torch.from_numpy",
   "torch.norm"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._loss_mu": {
  "lineno": 540,
  "symbols_in_volume": [
   "torch.Tensor",
   "torch.diag",
   "torch.norm",
   "torch.sum"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_class_balance": {
  "lineno": 558,
  "symbols_in_volume": [
   "collections.Counter",
   "numpy.any",
   "numpy.array",
   "numpy.ndarray",
   "numpy.ones",
   "numpy.where",
   "torch.diag",
   "torch.from_numpy",
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_constants": {
  "lineno": 591,
  "symbols_in_volume": [
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_logger": {
  "lineno": 622,
  "symbols_in_volume": [
   "snorkel.labeling.model.logger.Logger"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_lr_scheduler": {
  "lineno": 658,
  "symbols_in_volume": [
   "torch.optim.lr_scheduler.ExponentialLR",
   "torch.optim.lr_scheduler.LambdaLR",
   "torch.optim.lr_scheduler.StepLR",
   "torch.optim.lr_scheduler._LRScheduler",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_optimizer": {
  "lineno": 625,
  "symbols_in_volume": [
   "torch.optim.Adam",
   "torch.optim.Adamax",
   "torch.optim.Optimizer",
   "torch.optim.SGD"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_warmup_scheduler": {
  "lineno": 690,
  "symbols_in_volume": [
   "logging.info",
   "torch.optim.lr_scheduler.LambdaLR",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._update_lr_scheduler": {
  "lineno": 728,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.fit": {
  "lineno": 831,
  "symbols_in_volume": [
   "logging.info",
   "numpy.ndarray",
   "numpy.random.seed",
   "random.seed",
   "snorkel.labeling.analysis.LFAnalysis",
   "snorkel.utils.config_utils.merge_config",
   "torch.isnan",
   "torch.manual_seed",
   "typing.Any",
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.get_conditional_probs": {
  "lineno": 339,
  "symbols_in_volume": [
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.get_weights": {
  "lineno": 357,
  "symbols_in_volume": [
   "numpy.clip",
   "numpy.diag",
   "numpy.ndarray",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.load": {
  "lineno": 971,
  "symbols_in_volume": [
   "pickle.load"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.predict": {
  "lineno": 413,
  "symbols_in_volume": [
   "numpy.ndarray",
   "snorkel.utils.probs_to_preds",
   "typing.Optional",
   "typing.Tuple",
   "typing.Union"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.predict_proba": {
  "lineno": 379,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.exp",
   "numpy.log",
   "numpy.ndarray",
   "numpy.ones",
   "numpy.tile"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.save": {
  "lineno": 955,
  "symbols_in_volume": [
   "pickle.dump"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.score": {
  "lineno": 462,
  "symbols_in_volume": [
   "logging.warning",
   "numpy.ndarray",
   "snorkel.analysis.Scorer",
   "typing.Dict",
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModelConfig": {
  "lineno": 68,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "class"
 },
 "snorkel.labeling.model.label_model.TrainConfig": {
  "lineno": 26,
  "symbols_in_volume": [
   "numpy.random.randint",
   "snorkel.types.Config",
   "snorkel.utils.lr_schedulers.LRSchedulerConfig",
   "snorkel.utils.optimizers.OptimizerConfig",
   "typing.Optional"
  ],
  "type": "class"
 },
 "snorkel.labeling.model.label_model._CliqueData": {
  "lineno": 83,
  "symbols_in_volume": [
   "typing.NamedTuple",
   "typing.Set"
  ],
  "type": "class"
 },
 "snorkel.labeling.model.logger": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.model.logger.Logger": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.labeling.model.logger.Logger.__init__": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.labeling.model.logger.Logger.check": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.labeling.model.logger.Logger.log": {
  "lineno": 37,
  "symbols_in_volume": [
   "collections.defaultdict",
   "logging.info",
   "typing.DefaultDict",
   "typing.Dict",
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.labeling.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.labeling.utils.filter_unlabeled_dataframe": {
  "lineno": 7,
  "symbols_in_volume": [
   "numpy.ndarray",
   "pandas.DataFrame",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "snorkel.map": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.map.core": {
  "lineno": null,
  "symbols_in_volume": [
   "snorkel.types.DataPoint",
   "typing.Callable",
   "typing.Optional"
  ],
  "type": "module"
 },
 "snorkel.map.core.BaseMapper": {
  "lineno": 83,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.map.core.BaseMapper.__call__": {
  "lineno": 122,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads",
   "snorkel.types.DataPoint",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.map.core.BaseMapper.__init__": {
  "lineno": 109,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.map.core.BaseMapper.__repr__": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.map.core.BaseMapper._generate_mapped_data_point": {
  "lineno": 119,
  "symbols_in_volume": [
   "snorkel.types.DataPoint",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.map.core.BaseMapper.reset_cache": {
  "lineno": 115,
  "symbols_in_volume": [
   "snorkel.types.DataPoint",
   "typing.Dict"
  ],
  "type": "function"
 },
 "snorkel.map.core.LambdaMapper": {
  "lineno": 272,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.map.core.LambdaMapper.__init__": {
  "lineno": 293,
  "symbols_in_volume": [
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.map.core.LambdaMapper._generate_mapped_data_point": {
  "lineno": 303,
  "symbols_in_volume": [
   "snorkel.types.DataPoint",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.map.core.Mapper": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.map.core.Mapper.__init__": {
  "lineno": 218,
  "symbols_in_volume": [
   "typing.List",
   "typing.Mapping",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.map.core.Mapper._generate_mapped_data_point": {
  "lineno": 260,
  "symbols_in_volume": [
   "snorkel.types.DataPoint",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.map.core.Mapper._update_fields": {
  "lineno": 253,
  "symbols_in_volume": [
   "snorkel.types.DataPoint",
   "snorkel.types.FieldMap"
  ],
  "type": "function"
 },
 "snorkel.map.core.Mapper.run": {
  "lineno": 233,
  "symbols_in_volume": [
   "snorkel.types.FieldMap",
   "typing.Any",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.map.core.get_hashable": {
  "lineno": 41,
  "symbols_in_volume": [
   "collections.Hashable",
   "numpy.ndarray",
   "pandas.Series",
   "types.SimpleNamespace",
   "typing.Any"
  ],
  "type": "function"
 },
 "snorkel.map.core.get_parameters": {
  "lineno": 15,
  "symbols_in_volume": [
   "inspect.getfullargspec",
   "typing.Any",
   "typing.Callable",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.map.core.is_hashable": {
  "lineno": 27,
  "symbols_in_volume": [
   "typing.Any"
  ],
  "type": "function"
 },
 "snorkel.map.core.lambda_mapper": {
  "lineno": 307,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.map.core.lambda_mapper.__call__": {
  "lineno": 350,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.map.core.lambda_mapper.__init__": {
  "lineno": 338,
  "symbols_in_volume": [
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.map.spark": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.map.spark._update_fields": {
  "lineno": 8,
  "symbols_in_volume": [
   "pyspark.sql.Row",
   "snorkel.types.FieldMap"
  ],
  "type": "function"
 },
 "snorkel.map.spark.make_spark_mapper": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.preprocess": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.preprocess.core": {
  "lineno": null,
  "symbols_in_volume": [
   "snorkel.map.BaseMapper"
  ],
  "type": "module"
 },
 "snorkel.preprocess.core.LambdaPreprocessor": {
  "lineno": 27,
  "symbols_in_volume": [
   "snorkel.map.LambdaMapper"
  ],
  "type": "class"
 },
 "snorkel.preprocess.core.Preprocessor": {
  "lineno": 18,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "snorkel.preprocess.core.preprocessor": {
  "lineno": 36,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper"
  ],
  "type": "class"
 },
 "snorkel.preprocess.nlp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.preprocess.nlp.SpacyPreprocessor": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.preprocess.nlp.SpacyPreprocessor.__init__": {
  "lineno": 45,
  "symbols_in_volume": [
   "spacy.load",
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.preprocess.nlp.SpacyPreprocessor.run": {
  "lineno": 64,
  "symbols_in_volume": [
   "snorkel.types.FieldMap"
  ],
  "type": "function"
 },
 "snorkel.preprocess.spark": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.apply": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.apply.core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.apply.core.PandasSFApplier": {
  "lineno": 13,
  "symbols_in_volume": [
   "snorkel.labeling.PandasLFApplier"
  ],
  "type": "class"
 },
 "snorkel.slicing.apply.core.SFApplier": {
  "lineno": 4,
  "symbols_in_volume": [
   "snorkel.labeling.LFApplier"
  ],
  "type": "class"
 },
 "snorkel.slicing.apply.dask": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.apply.dask.DaskSFApplier": {
  "lineno": 7,
  "symbols_in_volume": [
   "snorkel.labeling.apply.dask.DaskLFApplier"
  ],
  "type": "class"
 },
 "snorkel.slicing.apply.dask.PandasParallelSFApplier": {
  "lineno": 16,
  "symbols_in_volume": [
   "snorkel.labeling.apply.dask.PandasParallelLFApplier"
  ],
  "type": "class"
 },
 "snorkel.slicing.apply.spark": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.modules": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.modules.slice_combiner": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.modules.slice_combiner.SliceCombinerModule": {
  "lineno": 10,
  "symbols_in_volume": [
   "torch.nn.Module"
  ],
  "type": "class"
 },
 "snorkel.slicing.modules.slice_combiner.SliceCombinerModule.__init__": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "snorkel.slicing.modules.slice_combiner.SliceCombinerModule.forward": {
  "lineno": 56,
  "symbols_in_volume": [
   "snorkel.classification.utils.collect_flow_outputs_by_suffix",
   "torch.Tensor",
   "torch.cat",
   "torch.nn.functional.softmax",
   "torch.stack",
   "torch.sum",
   "typing.Dict"
  ],
  "type": "function"
 },
 "snorkel.slicing.monitor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.monitor.slice_dataframe": {
  "lineno": 8,
  "symbols_in_volume": [
   "numpy.where",
   "pandas.DataFrame",
   "snorkel.slicing.PandasSFApplier",
   "snorkel.slicing.sf.SlicingFunction"
  ],
  "type": "function"
 },
 "snorkel.slicing.sf": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.sf.core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.sf.core.SlicingFunction": {
  "lineno": 7,
  "symbols_in_volume": [
   "snorkel.labeling.lf.LabelingFunction"
  ],
  "type": "class"
 },
 "snorkel.slicing.sf.core.slicing_function": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "class"
 },
 "snorkel.slicing.sf.core.slicing_function.__call__": {
  "lineno": 59,
  "symbols_in_volume": [
   "typing.Callable"
  ],
  "type": "function"
 },
 "snorkel.slicing.sf.core.slicing_function.__init__": {
  "lineno": 47,
  "symbols_in_volume": [
   "snorkel.preprocess.BasePreprocessor",
   "typing.Any",
   "typing.List",
   "typing.Mapping",
   "typing.Optional"
  ],
  "type": "function"
 },
 "snorkel.slicing.sf.nlp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.sf.nlp.NLPSlicingFunction": {
  "lineno": 9,
  "symbols_in_volume": [
   "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction"
  ],
  "type": "class"
 },
 "snorkel.slicing.sf.nlp.NLPSlicingFunction._create_preprocessor": {
  "lineno": 78,
  "symbols_in_volume": [
   "snorkel.labeling.lf.nlp.SpacyPreprocessorParameters",
   "snorkel.preprocess.nlp.SpacyPreprocessor"
  ],
  "type": "function"
 },
 "snorkel.slicing.sf.nlp.nlp_slicing_function": {
  "lineno": 85,
  "symbols_in_volume": [
   "snorkel.labeling.lf.nlp.base_nlp_labeling_function"
  ],
  "type": "class"
 },
 "snorkel.slicing.sliceaware_classifier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.sliceaware_classifier.SliceAwareClassifier": {
  "lineno": 16,
  "symbols_in_volume": [
   "snorkel.classification.multitask_classifier.MultitaskClassifier"
  ],
  "type": "class"
 },
 "snorkel.slicing.sliceaware_classifier.SliceAwareClassifier.__init__": {
  "lineno": 46,
  "symbols_in_volume": [
   "snorkel.analysis.Scorer",
   "snorkel.classification.Operation",
   "snorkel.classification.Task",
   "snorkel.classification.data.DEFAULT_INPUT_DATA_KEY",
   "snorkel.classification.data.DEFAULT_TASK_NAME",
   "torch.nn.Linear",
   "torch.nn.Module",
   "torch.nn.ModuleDict",
   "typing.Any",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.slicing.sliceaware_classifier.SliceAwareClassifier.make_slice_dataloader": {
  "lineno": 94,
  "symbols_in_volume": [
   "numpy.recarray",
   "snorkel.classification.DictDataLoader",
   "snorkel.classification.DictDataset",
   "typing.Any"
  ],
  "type": "function"
 },
 "snorkel.slicing.sliceaware_classifier.SliceAwareClassifier.score_slices": {
  "lineno": 128,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "snorkel.classification.DictDataLoader",
   "torch.no_grad",
   "typing.Dict",
   "typing.List",
   "typing.Optional",
   "typing.Set",
   "typing.Union"
  ],
  "type": "function"
 },
 "snorkel.slicing.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.slicing.utils.add_slice_labels": {
  "lineno": 15,
  "symbols_in_volume": [
   "numpy.lib.recfunctions.append_fields",
   "numpy.ndarray",
   "numpy.ones",
   "numpy.recarray",
   "snorkel.classification.data.DictDataLoader",
   "snorkel.classification.multitask_classifier.Task",
   "torch.LongTensor",
   "typing.Dict"
  ],
  "type": "function"
 },
 "snorkel.slicing.utils.convert_to_slice_tasks": {
  "lineno": 58,
  "symbols_in_volume": [
   "snorkel.analysis.Scorer",
   "snorkel.classification.multitask_classifier.Operation",
   "snorkel.classification.multitask_classifier.Task",
   "torch.nn.DataParallel",
   "torch.nn.Linear",
   "torch.nn.ModuleDict",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.synthetic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.synthetic.synthetic_data": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.synthetic.synthetic_data.generate_simple_label_matrix": {
  "lineno": 6,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.empty",
   "numpy.eye",
   "numpy.ndarray",
   "numpy.random.choice",
   "numpy.random.rand",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "snorkel.types": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.types.classifier": {
  "lineno": null,
  "symbols_in_volume": [
   "typing.NamedTuple"
  ],
  "type": "module"
 },
 "snorkel.types.data": {
  "lineno": null,
  "symbols_in_volume": [
   "typing.Any",
   "typing.Mapping",
   "typing.Sequence"
  ],
  "type": "module"
 },
 "snorkel.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.utils.config_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.utils.config_utils.merge_config": {
  "lineno": 6,
  "symbols_in_volume": [
   "snorkel.types.Config",
   "typing.Any",
   "typing.Dict"
  ],
  "type": "function"
 },
 "snorkel.utils.core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.utils.core._get_mask": {
  "lineno": 181,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.ones_like",
   "numpy.where",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.utils.core._hash": {
  "lineno": 7,
  "symbols_in_volume": [
   "hashlib.sha1"
  ],
  "type": "function"
 },
 "snorkel.utils.core.filter_labels": {
  "lineno": 129,
  "symbols_in_volume": [
   "numpy.multiply",
   "numpy.ndarray",
   "typing.Dict",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.utils.core.preds_to_probs": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.eye",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "snorkel.utils.core.probs_to_preds": {
  "lineno": 13,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.empty",
   "numpy.int",
   "numpy.ndarray",
   "numpy.random.choice",
   "numpy.where"
  ],
  "type": "function"
 },
 "snorkel.utils.core.to_int_label_array": {
  "lineno": 94,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.dtype",
   "numpy.mod",
   "numpy.ndarray",
   "numpy.not_equal"
  ],
  "type": "function"
 },
 "snorkel.utils.data_operators": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.utils.data_operators.check_unique_names": {
  "lineno": 5,
  "symbols_in_volume": [
   "collections.Counter",
   "typing.List"
  ],
  "type": "function"
 },
 "snorkel.utils.lr_schedulers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.utils.lr_schedulers.ExponentialLRSchedulerConfig": {
  "lineno": 4,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "class"
 },
 "snorkel.utils.lr_schedulers.LRSchedulerConfig": {
  "lineno": 17,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "class"
 },
 "snorkel.utils.lr_schedulers.StepLRSchedulerConfig": {
  "lineno": 10,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "class"
 },
 "snorkel.utils.optimizers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "snorkel.utils.optimizers.AdamOptimizerConfig": {
  "lineno": 12,
  "symbols_in_volume": [
   "snorkel.types.Config",
   "typing.Tuple"
  ],
  "type": "class"
 },
 "snorkel.utils.optimizers.AdamaxOptimizerConfig": {
  "lineno": 19,
  "symbols_in_volume": [
   "snorkel.types.Config",
   "typing.Tuple"
  ],
  "type": "class"
 },
 "snorkel.utils.optimizers.OptimizerConfig": {
  "lineno": 26,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "class"
 },
 "snorkel.utils.optimizers.SGDOptimizerConfig": {
  "lineno": 6,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "class"
 },
 "snorkel.version": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.augmentation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.augmentation.apply": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.augmentation.apply.test_tf_applier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier": {
  "lineno": 151,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier._get_x_df": {
  "lineno": 152,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier._get_x_df_dict": {
  "lineno": 158,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier._get_x_df_with_str": {
  "lineno": 155,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas": {
  "lineno": 161,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal",
   "snorkel.augmentation.PandasTFApplier",
   "snorkel.augmentation.RandomPolicy"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas_generator": {
  "lineno": 222,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal",
   "snorkel.augmentation.PandasTFApplier",
   "snorkel.augmentation.RandomPolicy"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas_keep_original": {
  "lineno": 182,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal",
   "snorkel.augmentation.PandasTFApplier",
   "snorkel.augmentation.RandomPolicy"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas_keep_original_generator": {
  "lineno": 241,
  "symbols_in_volume": [
   "pandas.testing.assert_frame_equal",
   "snorkel.augmentation.PandasTFApplier",
   "snorkel.augmentation.RandomPolicy"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas_modify_in_place": {
  "lineno": 210,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal",
   "snorkel.augmentation.ApplyOnePolicy",
   "snorkel.augmentation.PandasTFApplier"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas_modify_in_place_generator": {
  "lineno": 271,
  "symbols_in_volume": [
   "pandas.testing.assert_frame_equal",
   "snorkel.augmentation.ApplyOnePolicy",
   "snorkel.augmentation.PandasTFApplier"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_returns_none": {
  "lineno": 196,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal",
   "snorkel.augmentation.PandasTFApplier",
   "snorkel.augmentation.RandomPolicy"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_returns_none_generator": {
  "lineno": 256,
  "symbols_in_volume": [
   "pandas.testing.assert_frame_equal",
   "snorkel.augmentation.PandasTFApplier",
   "snorkel.augmentation.RandomPolicy"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier": {
  "lineno": 51,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier._get_x_namespace": {
  "lineno": 52,
  "symbols_in_volume": [
   "types.SimpleNamespace",
   "typing.List"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier._get_x_namespace_dict": {
  "lineno": 55,
  "symbols_in_volume": [
   "types.SimpleNamespace",
   "typing.List"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier": {
  "lineno": 58,
  "symbols_in_volume": [
   "snorkel.augmentation.RandomPolicy",
   "snorkel.augmentation.TFApplier"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_generator": {
  "lineno": 104,
  "symbols_in_volume": [
   "snorkel.augmentation.RandomPolicy",
   "snorkel.augmentation.TFApplier"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_keep_original": {
  "lineno": 72,
  "symbols_in_volume": [
   "snorkel.augmentation.RandomPolicy",
   "snorkel.augmentation.TFApplier"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_keep_original_generator": {
  "lineno": 116,
  "symbols_in_volume": [
   "snorkel.augmentation.RandomPolicy",
   "snorkel.augmentation.TFApplier"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_keep_original_modify_in_place": {
  "lineno": 94,
  "symbols_in_volume": [
   "snorkel.augmentation.ApplyOnePolicy",
   "snorkel.augmentation.TFApplier"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_keep_original_modify_in_place_generator": {
  "lineno": 140,
  "symbols_in_volume": [
   "snorkel.augmentation.ApplyOnePolicy",
   "snorkel.augmentation.TFApplier"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_returns_none": {
  "lineno": 83,
  "symbols_in_volume": [
   "snorkel.augmentation.RandomPolicy",
   "snorkel.augmentation.TFApplier"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_returns_none_generator": {
  "lineno": 128,
  "symbols_in_volume": [
   "snorkel.augmentation.RandomPolicy",
   "snorkel.augmentation.TFApplier"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.get_data_dict": {
  "lineno": 47,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.make_df": {
  "lineno": 42,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.modify_in_place": {
  "lineno": 31,
  "symbols_in_volume": [
   "snorkel.augmentation.transformation_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.square": {
  "lineno": 17,
  "symbols_in_volume": [
   "snorkel.augmentation.transformation_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.square_returns_none": {
  "lineno": 23,
  "symbols_in_volume": [
   "snorkel.augmentation.transformation_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.augmentation.policy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.augmentation.policy.test_core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.augmentation.policy.test_core.TestPolicy": {
  "lineno": 6,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.augmentation.policy.test_core.TestPolicy.test_apply_all_policy": {
  "lineno": 16,
  "symbols_in_volume": [
   "snorkel.augmentation.ApplyAllPolicy"
  ],
  "type": "function"
 },
 "test.augmentation.policy.test_core.TestPolicy.test_apply_each_policy": {
  "lineno": 7,
  "symbols_in_volume": [
   "snorkel.augmentation.ApplyEachPolicy"
  ],
  "type": "function"
 },
 "test.augmentation.policy.test_sampling": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.augmentation.policy.test_sampling.TestSamplingPolicy": {
  "lineno": 6,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.augmentation.policy.test_sampling.TestSamplingPolicy.test_mean_field_policy": {
  "lineno": 21,
  "symbols_in_volume": [
   "snorkel.augmentation.MeanFieldPolicy"
  ],
  "type": "function"
 },
 "test.augmentation.policy.test_sampling.TestSamplingPolicy.test_random_policy": {
  "lineno": 7,
  "symbols_in_volume": [
   "snorkel.augmentation.RandomPolicy"
  ],
  "type": "function"
 },
 "test.classification": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.classification.test_classifier_convergence": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.classification.test_classifier_convergence.ClassifierConvergenceTest": {
  "lineno": 25,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.classification.test_classifier_convergence.ClassifierConvergenceTest.setUpClass": {
  "lineno": 26,
  "symbols_in_volume": [
   "numpy.random.seed",
   "random.seed",
   "torch.manual_seed"
  ],
  "type": "function"
 },
 "test.classification.test_classifier_convergence.ClassifierConvergenceTest.test_convergence": {
  "lineno": 33,
  "symbols_in_volume": [
   "pytest.mark.complex",
   "snorkel.classification.MultitaskClassifier",
   "snorkel.classification.Trainer"
  ],
  "type": "function"
 },
 "test.classification.test_classifier_convergence.create_data": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.random.random",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "test.classification.test_classifier_convergence.create_dataloader": {
  "lineno": 90,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "snorkel.classification.DictDataLoader",
   "snorkel.classification.DictDataset",
   "torch.long",
   "torch.stack",
   "torch.tensor"
  ],
  "type": "function"
 },
 "test.classification.test_classifier_convergence.create_task": {
  "lineno": 108,
  "symbols_in_volume": [
   "snorkel.analysis.Scorer",
   "snorkel.classification.Operation",
   "snorkel.classification.Task",
   "torch.nn.Linear",
   "torch.nn.ModuleDict",
   "torch.nn.ReLU",
   "torch.nn.Sequential",
   "typing.List"
  ],
  "type": "function"
 },
 "test.classification.test_data": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.classification.test_data.DatasetTest": {
  "lineno": 13,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.classification.test_data.DatasetTest.test_classifier_dataloader": {
  "lineno": 47,
  "symbols_in_volume": [
   "snorkel.classification.DictDataLoader",
   "snorkel.classification.DictDataset",
   "torch.Tensor",
   "torch.equal"
  ],
  "type": "function"
 },
 "test.classification.test_data.DatasetTest.test_classifier_dataset": {
  "lineno": 14,
  "symbols_in_volume": [
   "snorkel.classification.DictDataset",
   "snorkel.classification.DictDataset.from_tensors",
   "snorkel.classification.data.DEFAULT_DATASET_NAME",
   "snorkel.classification.data.DEFAULT_INPUT_DATA_KEY",
   "snorkel.classification.data.DEFAULT_TASK_NAME",
   "torch.Tensor",
   "torch.equal"
  ],
  "type": "function"
 },
 "test.classification.test_loss": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.classification.test_loss.SoftCrossEntropyTest": {
  "lineno": 11,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_equal_loss": {
  "lineno": 53,
  "symbols_in_volume": [
   "snorkel.classification.cross_entropy_with_probs",
   "torch.tensor"
  ],
  "type": "function"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_invalid_reduction": {
  "lineno": 62,
  "symbols_in_volume": [
   "snorkel.classification.cross_entropy_with_probs",
   "snorkel.utils.preds_to_probs",
   "torch.LongTensor",
   "torch.Tensor",
   "torch.rand_like"
  ],
  "type": "function"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_loss_weights": {
  "lineno": 72,
  "symbols_in_volume": [
   "snorkel.classification.cross_entropy_with_probs",
   "snorkel.utils.preds_to_probs",
   "torch.FloatTensor",
   "torch.LongTensor",
   "torch.Tensor",
   "torch.nn.functional.cross_entropy",
   "torch.tensor"
  ],
  "type": "function"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_lower_loss": {
  "lineno": 44,
  "symbols_in_volume": [
   "snorkel.classification.cross_entropy_with_probs",
   "torch.tensor"
  ],
  "type": "function"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_perfect_predictions": {
  "lineno": 32,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "snorkel.classification.cross_entropy_with_probs",
   "snorkel.utils.preds_to_probs",
   "torch.LongTensor",
   "torch.Tensor"
  ],
  "type": "function"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_sce_equals_ce": {
  "lineno": 12,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "snorkel.classification.cross_entropy_with_probs",
   "snorkel.utils.preds_to_probs",
   "torch.LongTensor",
   "torch.Tensor",
   "torch.nn.functional.cross_entropy",
   "torch.rand_like"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.classification.test_multitask_classifier.ClassifierTest": {
  "lineno": 23,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.setUp": {
  "lineno": 30,
  "symbols_in_volume": [
   "numpy.random.seed",
   "random.seed",
   "torch.manual_seed"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.setUpClass": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_bad_tasks": {
  "lineno": 66,
  "symbols_in_volume": [
   "snorkel.classification.MultitaskClassifier"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_empty_batch": {
  "lineno": 114,
  "symbols_in_volume": [
   "snorkel.classification.MultitaskClassifier",
   "torch.full_like"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_no_data_parallel": {
  "lineno": 78,
  "symbols_in_volume": [
   "snorkel.classification.MultitaskClassifier",
   "torch.nn.Module"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_no_input_spec": {
  "lineno": 83,
  "symbols_in_volume": [
   "snorkel.classification.MultitaskClassifier",
   "snorkel.classification.Operation",
   "snorkel.classification.Task",
   "torch.nn.Identity",
   "torch.nn.ModuleDict"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_onetask_model": {
  "lineno": 35,
  "symbols_in_volume": [
   "snorkel.classification.MultitaskClassifier"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_partially_empty_batch": {
  "lineno": 122,
  "symbols_in_volume": [
   "snorkel.classification.MultitaskClassifier"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_predict": {
  "lineno": 95,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ones",
   "numpy.testing.assert_array_equal",
   "snorkel.classification.MultitaskClassifier"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_remapped_labels": {
  "lineno": 129,
  "symbols_in_volume": [
   "snorkel.classification.DictDataLoader",
   "snorkel.classification.DictDataset",
   "snorkel.classification.MultitaskClassifier",
   "torch.FloatTensor",
   "torch.ones"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_save_load": {
  "lineno": 215,
  "symbols_in_volume": [
   "os.close",
   "snorkel.classification.MultitaskClassifier",
   "tempfile.mkstemp",
   "torch.eq",
   "torch.nn.Linear"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_score": {
  "lineno": 162,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "snorkel.classification.MultitaskClassifier"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_score_shuffled": {
  "lineno": 173,
  "symbols_in_volume": [
   "snorkel.classification.DictDataLoader",
   "snorkel.classification.DictDataset",
   "snorkel.classification.MultitaskClassifier",
   "snorkel.classification.Operation",
   "snorkel.classification.Task",
   "torch.FloatTensor",
   "torch.LongTensor",
   "torch.nn.ModuleDict"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_score_shuffled.SimpleVoter": {
  "lineno": 176,
  "symbols_in_volume": [
   "torch.nn.Module"
  ],
  "type": "class"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_score_shuffled.SimpleVoter.forward": {
  "lineno": 177,
  "symbols_in_volume": [
   "torch.zeros"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_twotask_all_overlap_model": {
  "lineno": 48,
  "symbols_in_volume": [
   "snorkel.classification.MultitaskClassifier"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_twotask_none_overlap_model": {
  "lineno": 41,
  "symbols_in_volume": [
   "snorkel.classification.MultitaskClassifier"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_twotask_partial_overlap_model": {
  "lineno": 57,
  "symbols_in_volume": [
   "snorkel.classification.MultitaskClassifier"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.create_dataloader": {
  "lineno": 249,
  "symbols_in_volume": [
   "snorkel.classification.DictDataLoader",
   "snorkel.classification.DictDataset",
   "torch.FloatTensor",
   "torch.ones"
  ],
  "type": "function"
 },
 "test.classification.test_multitask_classifier.create_task": {
  "lineno": 261,
  "symbols_in_volume": [
   "snorkel.classification.Operation",
   "snorkel.classification.Task",
   "torch.eye",
   "torch.nn.Linear",
   "torch.nn.ModuleDict",
   "torch.nn.ReLU",
   "torch.nn.Sequential",
   "torch.zeros"
  ],
  "type": "function"
 },
 "test.classification.test_task": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.classification.test_task.TaskTest": {
  "lineno": 10,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.classification.test_task.TaskTest.test_task_creation": {
  "lineno": 11,
  "symbols_in_volume": [
   "snorkel.classification.Operation",
   "snorkel.classification.Task",
   "torch.nn.Linear",
   "torch.nn.ModuleDict",
   "torch.nn.ReLU",
   "torch.nn.Sequential"
  ],
  "type": "function"
 },
 "test.classification.test_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.classification.test_utils.UtilsTest": {
  "lineno": 12,
  "symbols_in_volume": [
   "unittest.TestCase",
   "unittest.main"
  ],
  "type": "class"
 },
 "test.classification.test_utils.UtilsTest.test_collect_flow_outputs_by_suffix": {
  "lineno": 118,
  "symbols_in_volume": [
   "snorkel.classification.utils.collect_flow_outputs_by_suffix",
   "torch.Tensor"
  ],
  "type": "function"
 },
 "test.classification.test_utils.UtilsTest.test_list_to_tensor": {
  "lineno": 58,
  "symbols_in_volume": [
   "snorkel.classification.utils.list_to_tensor",
   "torch.Tensor",
   "torch.equal"
  ],
  "type": "function"
 },
 "test.classification.test_utils.UtilsTest.test_pad_batch": {
  "lineno": 13,
  "symbols_in_volume": [
   "snorkel.classification.utils.pad_batch",
   "torch.Tensor",
   "torch.equal"
  ],
  "type": "function"
 },
 "test.labeling": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.labeling.apply": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.labeling.apply.lf_applier_spark_test_script": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.INFO",
   "logging.basicConfig",
   "numpy.array"
  ],
  "type": "module"
 },
 "test.labeling.apply.lf_applier_spark_test_script.build_lf_matrix": {
  "lineno": 58,
  "symbols_in_volume": [
   "logging.info",
   "numpy.testing.assert_equal",
   "pyspark.SparkContext",
   "snorkel.labeling.apply.spark.SparkLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.lf_applier_spark_test_script.f": {
  "lineno": 44,
  "symbols_in_volume": [
   "snorkel.labeling.lf.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.lf_applier_spark_test_script.g": {
  "lineno": 49,
  "symbols_in_volume": [
   "snorkel.labeling.lf.labeling_function",
   "snorkel.types.DataPoint",
   "typing.List"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "module"
 },
 "test.labeling.apply.test_lf_applier.SquareHitTracker": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "class"
 },
 "test.labeling.apply.test_lf_applier.SquareHitTracker.__call__": {
  "lineno": 28,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.SquareHitTracker.__init__": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier": {
  "lineno": 223,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_dask": {
  "lineno": 224,
  "symbols_in_volume": [
   "dask.dataframe.from_pandas",
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "snorkel.labeling.apply.dask.DaskLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_dask_fault": {
  "lineno": 231,
  "symbols_in_volume": [
   "dask.dataframe.from_pandas",
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "snorkel.labeling.apply.dask.DaskLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_dask_preprocessor": {
  "lineno": 240,
  "symbols_in_volume": [
   "dask.dataframe.from_pandas",
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "snorkel.labeling.apply.dask.DaskLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_dask_spacy_preprocessor": {
  "lineno": 263,
  "symbols_in_volume": [
   "dask.dataframe.from_pandas",
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "pytest.mark.complex",
   "snorkel.labeling.apply.dask.DaskLFApplier",
   "snorkel.preprocess.nlp.SpacyPreprocessor"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_dask_spacy_preprocessor.first_is_name": {
  "lineno": 267,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_dask_spacy_preprocessor.has_verb": {
  "lineno": 271,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_parallel": {
  "lineno": 300,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "snorkel.labeling.apply.dask.PandasParallelLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_parallel_raises": {
  "lineno": 306,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "snorkel.labeling.apply.dask.PandasParallelLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_preprocessor_memoized": {
  "lineno": 247,
  "symbols_in_volume": [
   "dask.dataframe.from_pandas",
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "snorkel.labeling.apply.dask.DaskLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_preprocessor_memoized.fp_memoized": {
  "lineno": 253,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_preprocessor_memoized.square_memoize": {
  "lineno": 248,
  "symbols_in_volume": [
   "snorkel.preprocess.preprocessor",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_spacy_preprocessor_memoized": {
  "lineno": 281,
  "symbols_in_volume": [
   "dask.dataframe.from_pandas",
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "pytest.mark.complex",
   "snorkel.labeling.apply.dask.DaskLFApplier",
   "snorkel.preprocess.nlp.SpacyPreprocessor"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.first_is_name": {
  "lineno": 286,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.has_verb": {
  "lineno": 290,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier": {
  "lineno": 77,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "snorkel.labeling.LFApplier",
   "snorkel.labeling.apply.core.ApplierMetadata",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_fault": {
  "lineno": 89,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "snorkel.labeling.LFApplier",
   "snorkel.labeling.apply.core.ApplierMetadata",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_no_labels": {
  "lineno": 126,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "snorkel.labeling.LFApplier",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_numpy": {
  "lineno": 132,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "numpy.vstack",
   "snorkel.labeling.LFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_preprocessor": {
  "lineno": 102,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "snorkel.labeling.LFApplier",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_preprocessor_memoized": {
  "lineno": 108,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "snorkel.labeling.LFApplier",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_preprocessor_memoized.fp_memoized": {
  "lineno": 117,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_preprocessor_memoized.square_memoize": {
  "lineno": 112,
  "symbols_in_volume": [
   "snorkel.preprocess.preprocessor",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier": {
  "lineno": 139,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "snorkel.labeling.PandasLFApplier",
   "snorkel.labeling.apply.core.ApplierMetadata"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_fault": {
  "lineno": 151,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "snorkel.labeling.PandasLFApplier",
   "snorkel.labeling.apply.core.ApplierMetadata"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_preprocessor": {
  "lineno": 164,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "snorkel.labeling.PandasLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_preprocessor_memoized": {
  "lineno": 170,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "snorkel.labeling.PandasLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_preprocessor_memoized.fp_memoized": {
  "lineno": 178,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_preprocessor_memoized.square_memoize": {
  "lineno": 173,
  "symbols_in_volume": [
   "snorkel.preprocess.preprocessor",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "snorkel.labeling.PandasLFApplier",
   "snorkel.preprocess.nlp.SpacyPreprocessor"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor.first_is_name": {
  "lineno": 191,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor.has_verb": {
  "lineno": 195,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor_memoized": {
  "lineno": 204,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "snorkel.labeling.PandasLFApplier",
   "snorkel.preprocess.nlp.SpacyPreprocessor"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.first_is_name": {
  "lineno": 208,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.has_verb": {
  "lineno": 212,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.f": {
  "lineno": 33,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.f_bad": {
  "lineno": 63,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.f_np": {
  "lineno": 53,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.fp": {
  "lineno": 38,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.g": {
  "lineno": 43,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint",
   "typing.List"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.g_np": {
  "lineno": 58,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint",
   "typing.List"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.h": {
  "lineno": 48,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.square": {
  "lineno": 18,
  "symbols_in_volume": [
   "snorkel.preprocess.preprocessor",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_spark": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "module"
 },
 "test.labeling.apply.test_spark.TestSparkApplier": {
  "lineno": 50,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.apply.test_spark.TestSparkApplier.test_lf_applier_spark": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "pyspark.SparkContext.getOrCreate",
   "pyspark.sql.SQLContext",
   "pytest.mark.complex",
   "pytest.mark.spark",
   "snorkel.labeling.apply.spark.SparkLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_spark.TestSparkApplier.test_lf_applier_spark_fault": {
  "lineno": 62,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "pyspark.SparkContext.getOrCreate",
   "pyspark.sql.SQLContext",
   "pytest.mark.complex",
   "pytest.mark.spark",
   "snorkel.labeling.apply.spark.SparkLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_spark.TestSparkApplier.test_lf_applier_spark_preprocessor": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "pyspark.SparkContext.getOrCreate",
   "pyspark.sql.SQLContext",
   "pytest.mark.complex",
   "pytest.mark.spark",
   "snorkel.labeling.apply.spark.SparkLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_spark.TestSparkApplier.test_lf_applier_spark_preprocessor_memoized": {
  "lineno": 86,
  "symbols_in_volume": [
   "numpy.testing.assert_equal",
   "pandas.DataFrame",
   "pyspark.SparkContext.getOrCreate",
   "pyspark.sql.SQLContext",
   "pytest.mark.complex",
   "pytest.mark.spark",
   "snorkel.labeling.apply.spark.SparkLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_spark.TestSparkApplier.test_lf_applier_spark_preprocessor_memoized.fp_memoized": {
  "lineno": 96,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_spark.TestSparkApplier.test_lf_applier_spark_preprocessor_memoized.square_memoize": {
  "lineno": 92,
  "symbols_in_volume": [
   "pyspark.sql.Row",
   "snorkel.preprocess.preprocessor",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_spark.f": {
  "lineno": 21,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_spark.f_bad": {
  "lineno": 36,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_spark.fp": {
  "lineno": 26,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_spark.g": {
  "lineno": 31,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint",
   "typing.List"
  ],
  "type": "function"
 },
 "test.labeling.apply.test_spark.square": {
  "lineno": 16,
  "symbols_in_volume": [
   "pyspark.sql.Row",
   "snorkel.preprocess.preprocessor"
  ],
  "type": "function"
 },
 "test.labeling.model": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.labeling.model.test_baseline": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.labeling.model.test_baseline.BaselineModelTest": {
  "lineno": 8,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.model.test_baseline.BaselineModelTest.test_majority_class_vote": {
  "lineno": 19,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal",
   "snorkel.labeling.MajorityClassVoter"
  ],
  "type": "function"
 },
 "test.labeling.model.test_baseline.BaselineModelTest.test_majority_label_vote": {
  "lineno": 28,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal",
   "snorkel.labeling.MajorityLabelVoter"
  ],
  "type": "function"
 },
 "test.labeling.model.test_baseline.BaselineModelTest.test_random_vote": {
  "lineno": 9,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ones",
   "numpy.shape",
   "numpy.sum",
   "numpy.testing.assert_array_almost_equal",
   "snorkel.labeling.RandomVoter"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.labeling.model.test_label_model.LabelModelTest": {
  "lineno": 17,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.model.test_label_model.LabelModelTest._set_up_model": {
  "lineno": 18,
  "symbols_in_volume": [
   "numpy.ndarray",
   "snorkel.labeling.LabelModel",
   "snorkel.labeling.model.label_model.TrainConfig",
   "typing.List"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_L_form": {
  "lineno": 31,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LabelModel"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_augmented_L_construction": {
  "lineno": 125,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LabelModel"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_build_mask": {
  "lineno": 191,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_equal"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_class_balance": {
  "lineno": 62,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal",
   "snorkel.labeling.LabelModel"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_conditional_probs": {
  "lineno": 161,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_count_accurate_lfs": {
  "lineno": 420,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LabelModel"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_generate_O": {
  "lineno": 83,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_get_weight": {
  "lineno": 168,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.ones",
   "numpy.random.rand",
   "numpy.zeros",
   "snorkel.labeling.LabelModel"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_init_params": {
  "lineno": 212,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_equal"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_loss": {
  "lineno": 295,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ones",
   "snorkel.labeling.LabelModel",
   "torch.nn.Parameter"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_lr_scheduler": {
  "lineno": 332,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LabelModel"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_model_loss": {
  "lineno": 308,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LabelModel"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_mv_default": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal",
   "snorkel.labeling.LabelModel"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_optimizer": {
  "lineno": 323,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LabelModel"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_optimizer_init": {
  "lineno": 360,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LabelModel",
   "torch.optim.Adam",
   "torch.optim.Adamax",
   "torch.optim.SGD"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_predict": {
  "lineno": 248,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal",
   "numpy.testing.assert_array_equal",
   "snorkel.labeling.LabelModel",
   "torch.nn.Parameter"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_predict_proba": {
  "lineno": 237,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal",
   "torch.nn.Parameter"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_save_and_load": {
  "lineno": 343,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_equal",
   "shutil.rmtree",
   "snorkel.labeling.LabelModel",
   "tempfile.mkdtemp"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_scheduler_init": {
  "lineno": 376,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LabelModel",
   "torch.optim.lr_scheduler.ExponentialLR",
   "torch.optim.lr_scheduler.LambdaLR",
   "torch.optim.lr_scheduler.StepLR"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_score": {
  "lineno": 270,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal",
   "snorkel.labeling.LabelModel",
   "torch.nn.Parameter"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_set_mu_eps": {
  "lineno": 410,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LabelModel"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_symmetry_breaking": {
  "lineno": 448,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LabelModel",
   "torch.from_numpy",
   "torch.nn.Parameter"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_warmup": {
  "lineno": 394,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LabelModel"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.TestLabelModelAdvanced": {
  "lineno": 482,
  "symbols_in_volume": [
   "pytest.mark.complex",
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.model.test_label_model.TestLabelModelAdvanced.setUp": {
  "lineno": 486,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.labeling.model.test_label_model.TestLabelModelAdvanced.test_label_model_basic": {
  "lineno": 492,
  "symbols_in_volume": [
   "numpy.random.seed",
   "numpy.testing.assert_array_almost_equal",
   "snorkel.labeling.LabelModel",
   "snorkel.synthetic.synthetic_data.generate_simple_label_matrix"
  ],
  "type": "function"
 },
 "test.labeling.model.test_label_model.TestLabelModelAdvanced.test_label_model_sparse": {
  "lineno": 509,
  "symbols_in_volume": [
   "numpy.random.seed",
   "numpy.testing.assert_array_almost_equal",
   "numpy.where",
   "snorkel.labeling.LabelModel",
   "snorkel.synthetic.synthetic_data.generate_simple_label_matrix"
  ],
  "type": "function"
 },
 "test.labeling.model.test_logger": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.labeling.model.test_logger.LoggerTest": {
  "lineno": 6,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.model.test_logger.LoggerTest.test_bad_metrics_dict": {
  "lineno": 16,
  "symbols_in_volume": [
   "snorkel.labeling.model.logger.Logger"
  ],
  "type": "function"
 },
 "test.labeling.model.test_logger.LoggerTest.test_basic": {
  "lineno": 7,
  "symbols_in_volume": [
   "snorkel.labeling.model.logger.Logger"
  ],
  "type": "function"
 },
 "test.labeling.model.test_logger.LoggerTest.test_valid_metrics_dict": {
  "lineno": 21,
  "symbols_in_volume": [
   "snorkel.labeling.model.logger.Logger"
  ],
  "type": "function"
 },
 "test.labeling.preprocess": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.labeling.preprocess.test_nlp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.labeling.preprocess.test_nlp.TestSpacyPreprocessor": {
  "lineno": 7,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.preprocess.test_nlp.TestSpacyPreprocessor.test_spacy_preprocessor": {
  "lineno": 8,
  "symbols_in_volume": [
   "snorkel.preprocess.nlp.SpacyPreprocessor",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.labeling.test_analysis": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.labeling.test_analysis.TestAnalysis": {
  "lineno": 33,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.test_analysis.TestAnalysis.setUp": {
  "lineno": 34,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LFAnalysis"
  ],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_label_conflict": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_label_coverage": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_label_overlap": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_conflicts": {
  "lineno": 66,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal"
  ],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_coverages": {
  "lineno": 52,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal"
  ],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_empirical_accuracies": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal"
  ],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_empirical_probs": {
  "lineno": 80,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal"
  ],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_overlaps": {
  "lineno": 57,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_almost_equal"
  ],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_polarities": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_summary": {
  "lineno": 94,
  "symbols_in_volume": [
   "numpy.array",
   "pandas.DataFrame",
   "pandas.Index",
   "pandas.testing.assert_frame_equal",
   "snorkel.labeling.LFAnalysis",
   "snorkel.labeling.LabelingFunction"
  ],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_summary_without_abstain": {
  "lineno": 144,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_wrong_number_of_lfs": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.labeling.LFAnalysis",
   "snorkel.labeling.LabelingFunction"
  ],
  "type": "function"
 },
 "test.labeling.test_analysis.f": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.labeling.test_convergence": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.labeling.test_convergence.LabelingConvergenceTest": {
  "lineno": 61,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.test_convergence.LabelingConvergenceTest.setUpClass": {
  "lineno": 62,
  "symbols_in_volume": [
   "numpy.random.seed",
   "random.seed",
   "torch.manual_seed"
  ],
  "type": "function"
 },
 "test.labeling.test_convergence.LabelingConvergenceTest.test_labeling_convergence": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.where",
   "pytest.mark.complex",
   "snorkel.labeling.LabelModel",
   "snorkel.labeling.PandasLFApplier"
  ],
  "type": "function"
 },
 "test.labeling.test_convergence.copy_features": {
  "lineno": 48,
  "symbols_in_volume": [
   "snorkel.preprocess.preprocessor",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.test_convergence.create_data": {
  "lineno": 19,
  "symbols_in_volume": [
   "numpy.random.randint",
   "numpy.random.random",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "test.labeling.test_convergence.f": {
  "lineno": 55,
  "symbols_in_volume": [
   "snorkel.labeling.labeling_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.labeling.test_convergence.get_negative_labeling_function": {
  "lineno": 39,
  "symbols_in_volume": [
   "snorkel.labeling.LabelingFunction"
  ],
  "type": "function"
 },
 "test.labeling.test_convergence.get_negative_labeling_function.f": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.labeling.test_convergence.get_positive_labeling_function": {
  "lineno": 30,
  "symbols_in_volume": [
   "snorkel.labeling.LabelingFunction"
  ],
  "type": "function"
 },
 "test.labeling.test_convergence.get_positive_labeling_function.f": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.labeling.test_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.labeling.test_utils.TestAnalysis": {
  "lineno": 9,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.labeling.test_utils.TestAnalysis.test_filter_unlabeled_dataframe": {
  "lineno": 10,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.array_equal",
   "numpy.testing.assert_array_almost_equal",
   "pandas.DataFrame",
   "snorkel.labeling.filter_unlabeled_dataframe"
  ],
  "type": "function"
 },
 "test.map": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.map.test_core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.map.test_core.MapperReturnsNone": {
  "lineno": 31,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "test.map.test_core.MapperReturnsNone.run": {
  "lineno": 32,
  "symbols_in_volume": [
   "snorkel.types.FieldMap",
   "typing.Optional"
  ],
  "type": "function"
 },
 "test.map.test_core.MapperWithArgs": {
  "lineno": 36,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "test.map.test_core.MapperWithArgs.run": {
  "lineno": 37,
  "symbols_in_volume": [
   "snorkel.types.FieldMap",
   "typing.Any",
   "typing.Optional"
  ],
  "type": "function"
 },
 "test.map.test_core.MapperWithKwargs": {
  "lineno": 41,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "test.map.test_core.MapperWithKwargs.run": {
  "lineno": 42,
  "symbols_in_volume": [
   "snorkel.types.FieldMap",
   "typing.Any",
   "typing.Optional"
  ],
  "type": "function"
 },
 "test.map.test_core.MapperWithPre": {
  "lineno": 46,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "test.map.test_core.MapperWithPre.run": {
  "lineno": 47,
  "symbols_in_volume": [
   "snorkel.types.FieldMap",
   "typing.Optional"
  ],
  "type": "function"
 },
 "test.map.test_core.MapperWithPre2": {
  "lineno": 51,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "test.map.test_core.MapperWithPre2.run": {
  "lineno": 52,
  "symbols_in_volume": [
   "snorkel.types.FieldMap",
   "typing.Optional"
  ],
  "type": "function"
 },
 "test.map.test_core.SplitWordsMapper": {
  "lineno": 14,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "test.map.test_core.SplitWordsMapper.__init__": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_core.SplitWordsMapper.run": {
  "lineno": 22,
  "symbols_in_volume": [
   "snorkel.types.FieldMap"
  ],
  "type": "function"
 },
 "test.map.test_core.SplitWordsMapperDefaultArgs": {
  "lineno": 26,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "test.map.test_core.SplitWordsMapperDefaultArgs.run": {
  "lineno": 27,
  "symbols_in_volume": [
   "snorkel.types.FieldMap"
  ],
  "type": "function"
 },
 "test.map.test_core.SquareHitTracker": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "class"
 },
 "test.map.test_core.SquareHitTracker.__call__": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_core.SquareHitTracker.__init__": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_core.TestGetHashable": {
  "lineno": 347,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_dict": {
  "lineno": 353,
  "symbols_in_volume": [
   "snorkel.map.core.get_hashable"
  ],
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_hashable": {
  "lineno": 348,
  "symbols_in_volume": [
   "snorkel.map.core.get_hashable"
  ],
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_list": {
  "lineno": 361,
  "symbols_in_volume": [
   "snorkel.map.core.get_hashable"
  ],
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_ndarray": {
  "lineno": 385,
  "symbols_in_volume": [
   "numpy.array",
   "snorkel.map.core.get_hashable"
  ],
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_series": {
  "lineno": 368,
  "symbols_in_volume": [
   "pandas.Series",
   "snorkel.map.core.get_hashable"
  ],
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_series_with_doc": {
  "lineno": 376,
  "symbols_in_volume": [
   "pandas.Series",
   "snorkel.map.core.get_hashable",
   "spacy.load"
  ],
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_unhashable": {
  "lineno": 392,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "snorkel.map.core.get_hashable"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore": {
  "lineno": 78,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.map.test_core.TestMapperCore._get_x": {
  "lineno": 79,
  "symbols_in_volume": [
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore._get_x_dict": {
  "lineno": 82,
  "symbols_in_volume": [
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_memoized": {
  "lineno": 215,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_memoized.square": {
  "lineno": 218,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_memoized_none": {
  "lineno": 248,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_memoized_none.square": {
  "lineno": 251,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_not_memoized": {
  "lineno": 266,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_not_memoized.square": {
  "lineno": 269,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_decorator_no_parens": {
  "lineno": 331,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_decorator_no_parens.square": {
  "lineno": 334,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_default_args": {
  "lineno": 118,
  "symbols_in_volume": [
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_in_place": {
  "lineno": 130,
  "symbols_in_volume": [
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre": {
  "lineno": 143,
  "symbols_in_volume": [
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_decorator": {
  "lineno": 173,
  "symbols_in_volume": [
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_decorator.mapper_no_pre": {
  "lineno": 174,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_decorator.mapper_pre": {
  "lineno": 183,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_decorator.mapper_pre_2": {
  "lineno": 197,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_memoized": {
  "lineno": 293,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_memoized.mapper_pre": {
  "lineno": 301,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_memoized.square": {
  "lineno": 296,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_returns_none": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_same_field": {
  "lineno": 107,
  "symbols_in_volume": [
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_with_args_kwargs": {
  "lineno": 339,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_numeric_mapper": {
  "lineno": 85,
  "symbols_in_volume": [
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_text_mapper": {
  "lineno": 93,
  "symbols_in_volume": [
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.map.test_core.modify_in_place": {
  "lineno": 71,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_core.square": {
  "lineno": 65,
  "symbols_in_volume": [
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_spark": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.map.test_spark.MapperReturnsNone": {
  "lineno": 29,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "test.map.test_spark.MapperReturnsNone.run": {
  "lineno": 30,
  "symbols_in_volume": [
   "snorkel.types.FieldMap",
   "typing.Optional"
  ],
  "type": "function"
 },
 "test.map.test_spark.SplitWordsMapper": {
  "lineno": 12,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "test.map.test_spark.SplitWordsMapper.__init__": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_spark.SplitWordsMapper.run": {
  "lineno": 20,
  "symbols_in_volume": [
   "snorkel.types.FieldMap"
  ],
  "type": "function"
 },
 "test.map.test_spark.SplitWordsMapperDefaultArgs": {
  "lineno": 24,
  "symbols_in_volume": [
   "snorkel.map.Mapper"
  ],
  "type": "class"
 },
 "test.map.test_spark.SplitWordsMapperDefaultArgs.run": {
  "lineno": 25,
  "symbols_in_volume": [
   "snorkel.types.FieldMap"
  ],
  "type": "function"
 },
 "test.map.test_spark.SquareHitTracker": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "class"
 },
 "test.map.test_spark.SquareHitTracker.__call__": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_spark.SquareHitTracker.__init__": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore": {
  "lineno": 56,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.map.test_spark.TestMapperCore._get_x": {
  "lineno": 57,
  "symbols_in_volume": [
   "pyspark.sql.Row"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore._get_x_dict": {
  "lineno": 60,
  "symbols_in_volume": [
   "pyspark.sql.Row"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_memoized": {
  "lineno": 130,
  "symbols_in_volume": [
   "pytest.mark.spark"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_memoized.square": {
  "lineno": 134,
  "symbols_in_volume": [
   "pyspark.sql.Row",
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_memoized_none": {
  "lineno": 165,
  "symbols_in_volume": [
   "pytest.mark.spark"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_memoized_none.square": {
  "lineno": 169,
  "symbols_in_volume": [
   "pyspark.sql.Row",
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_not_memoized": {
  "lineno": 185,
  "symbols_in_volume": [
   "pytest.mark.spark"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_not_memoized.square": {
  "lineno": 189,
  "symbols_in_volume": [
   "pyspark.sql.Row",
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_mapper_default_args": {
  "lineno": 100,
  "symbols_in_volume": [
   "pytest.mark.spark",
   "snorkel.map.spark.make_spark_mapper"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_mapper_in_place": {
  "lineno": 111,
  "symbols_in_volume": [
   "pytest.mark.spark"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_mapper_returns_none": {
  "lineno": 123,
  "symbols_in_volume": [
   "pytest.mark.spark",
   "snorkel.map.spark.make_spark_mapper"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_mapper_same_field": {
  "lineno": 86,
  "symbols_in_volume": [
   "pytest.mark.spark",
   "snorkel.map.spark.make_spark_mapper"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_numeric_mapper": {
  "lineno": 63,
  "symbols_in_volume": [
   "pytest.mark.spark"
  ],
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_text_mapper": {
  "lineno": 73,
  "symbols_in_volume": [
   "pytest.mark.spark",
   "snorkel.map.spark.make_spark_mapper"
  ],
  "type": "function"
 },
 "test.map.test_spark.modify_in_place": {
  "lineno": 50,
  "symbols_in_volume": [
   "pyspark.sql.Row",
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.map.test_spark.square": {
  "lineno": 43,
  "symbols_in_volume": [
   "pyspark.sql.Row",
   "snorkel.map.lambda_mapper",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.slicing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.slicing.apply": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.slicing.apply.test_sf_applier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.slicing.apply.test_sf_applier.SquareHitTracker": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "class"
 },
 "test.slicing.apply.test_sf_applier.SquareHitTracker.__call__": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.SquareHitTracker.__init__": {
  "lineno": 17,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.TestSFApplier": {
  "lineno": 45,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.slicing.apply.test_sf_applier.TestSFApplier.test_sf_applier": {
  "lineno": 46,
  "symbols_in_volume": [
   "snorkel.slicing.SFApplier",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.TestSFApplier.test_sf_applier_preprocessor": {
  "lineno": 56,
  "symbols_in_volume": [
   "snorkel.slicing.SFApplier",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.f": {
  "lineno": 25,
  "symbols_in_volume": [
   "snorkel.slicing.slicing_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.fp": {
  "lineno": 30,
  "symbols_in_volume": [
   "snorkel.slicing.slicing_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.g": {
  "lineno": 35,
  "symbols_in_volume": [
   "snorkel.slicing.slicing_function",
   "snorkel.types.DataPoint",
   "typing.List"
  ],
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.square": {
  "lineno": 10,
  "symbols_in_volume": [
   "snorkel.preprocess.preprocessor",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.slicing.sf": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.slicing.sf.test_core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.slicing.sf.test_core.TestSlicingFunction": {
  "lineno": 7,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.slicing.sf.test_core.TestSlicingFunction._run_sf": {
  "lineno": 8,
  "symbols_in_volume": [
   "snorkel.slicing.SlicingFunction",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.slicing.sf.test_core.TestSlicingFunction._run_sf_raise": {
  "lineno": 14,
  "symbols_in_volume": [
   "snorkel.slicing.SlicingFunction",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.slicing.sf.test_core.TestSlicingFunction.test_slicing_function_decorator": {
  "lineno": 19,
  "symbols_in_volume": [
   "snorkel.slicing.SlicingFunction"
  ],
  "type": "function"
 },
 "test.slicing.sf.test_core.TestSlicingFunction.test_slicing_function_decorator.sf": {
  "lineno": 20,
  "symbols_in_volume": [
   "snorkel.slicing.slicing_function"
  ],
  "type": "function"
 },
 "test.slicing.sf.test_core.TestSlicingFunction.test_slicing_function_decorator_no_parens": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.slicing.sf.test_core.TestSlicingFunction.test_slicing_function_decorator_no_parens.sf": {
  "lineno": 32,
  "symbols_in_volume": [
   "snorkel.slicing.slicing_function"
  ],
  "type": "function"
 },
 "test.slicing.sf.test_nlp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.slicing.sf.test_nlp.TestNLPSlicingFunction": {
  "lineno": 20,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.slicing.sf.test_nlp.TestNLPSlicingFunction._run_sf": {
  "lineno": 21,
  "symbols_in_volume": [
   "snorkel.slicing.sf.nlp.NLPSlicingFunction",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.slicing.sf.test_nlp.TestNLPSlicingFunction.test_nlp_slicing_function": {
  "lineno": 29,
  "symbols_in_volume": [
   "snorkel.slicing.sf.nlp.NLPSlicingFunction"
  ],
  "type": "function"
 },
 "test.slicing.sf.test_nlp.TestNLPSlicingFunction.test_nlp_slicing_function_decorator": {
  "lineno": 33,
  "symbols_in_volume": [
   "snorkel.slicing.sf.nlp.NLPSlicingFunction"
  ],
  "type": "function"
 },
 "test.slicing.sf.test_nlp.TestNLPSlicingFunction.test_nlp_slicing_function_decorator.has_person_mention": {
  "lineno": 34,
  "symbols_in_volume": [
   "snorkel.slicing.sf.nlp.nlp_slicing_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.slicing.sf.test_nlp.combine_text": {
  "lineno": 9,
  "symbols_in_volume": [
   "snorkel.preprocess.preprocessor",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.slicing.sf.test_nlp.has_person_mention": {
  "lineno": 15,
  "symbols_in_volume": [
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.slicing.test_convergence": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.slicing.test_convergence.SlicingConvergenceTest": {
  "lineno": 54,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.slicing.test_convergence.SlicingConvergenceTest.setUpClass": {
  "lineno": 55,
  "symbols_in_volume": [
   "numpy.random.seed",
   "random.seed",
   "torch.manual_seed"
  ],
  "type": "function"
 },
 "test.slicing.test_convergence.SlicingConvergenceTest.test_convergence": {
  "lineno": 69,
  "symbols_in_volume": [
   "pytest.mark.complex",
   "snorkel.classification.MultitaskClassifier",
   "snorkel.classification.Trainer",
   "snorkel.slicing.PandasSFApplier",
   "snorkel.slicing.add_slice_labels",
   "snorkel.slicing.convert_to_slice_tasks"
  ],
  "type": "function"
 },
 "test.slicing.test_convergence.SlicingConvergenceTest.test_performance": {
  "lineno": 123,
  "symbols_in_volume": [
   "pytest.mark.complex",
   "snorkel.classification.MultitaskClassifier",
   "snorkel.classification.Trainer",
   "snorkel.slicing.PandasSFApplier",
   "snorkel.slicing.add_slice_labels",
   "snorkel.slicing.convert_to_slice_tasks"
  ],
  "type": "function"
 },
 "test.slicing.test_convergence.create_data": {
  "lineno": 177,
  "symbols_in_volume": [
   "numpy.random.random",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "test.slicing.test_convergence.create_dataloader": {
  "lineno": 185,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "snorkel.classification.DictDataLoader",
   "snorkel.classification.DictDataset",
   "torch.long",
   "torch.stack",
   "torch.tensor"
  ],
  "type": "function"
 },
 "test.slicing.test_convergence.create_task": {
  "lineno": 203,
  "symbols_in_volume": [
   "snorkel.analysis.Scorer",
   "snorkel.classification.Operation",
   "snorkel.classification.Task",
   "torch.nn.Linear",
   "torch.nn.ModuleDict",
   "torch.nn.ReLU",
   "torch.nn.Sequential",
   "typing.List"
  ],
  "type": "function"
 },
 "test.slicing.test_convergence.f": {
  "lineno": 30,
  "symbols_in_volume": [
   "numpy.sqrt",
   "snorkel.slicing.slicing_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.slicing.test_convergence.g": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.sqrt",
   "snorkel.slicing.slicing_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.slicing.test_convergence.h": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.sqrt",
   "snorkel.slicing.slicing_function",
   "snorkel.types.DataPoint"
  ],
  "type": "function"
 },
 "test.slicing.test_monitor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.slicing.test_monitor.PandasSlicerTest": {
  "lineno": 16,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.slicing.test_monitor.PandasSlicerTest.setUpClass": {
  "lineno": 17,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "test.slicing.test_monitor.PandasSlicerTest.test_slice": {
  "lineno": 21,
  "symbols_in_volume": [
   "snorkel.slicing.monitor.slice_dataframe"
  ],
  "type": "function"
 },
 "test.slicing.test_monitor.sf": {
  "lineno": 11,
  "symbols_in_volume": [
   "snorkel.slicing.slicing_function"
  ],
  "type": "function"
 },
 "test.slicing.test_slice_combiner": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest": {
  "lineno": 10,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.setUpClass": {
  "lineno": 11,
  "symbols_in_volume": [
   "numpy.random.seed",
   "random.seed",
   "torch.manual_seed"
  ],
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_average_reweighting": {
  "lineno": 77,
  "symbols_in_volume": [
   "snorkel.slicing.SliceCombinerModule",
   "torch.allclose",
   "torch.ones"
  ],
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_average_reweighting_by_ind": {
  "lineno": 95,
  "symbols_in_volume": [
   "snorkel.slicing.SliceCombinerModule",
   "torch.allclose",
   "torch.ones",
   "torch.zeros"
  ],
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_average_reweighting_by_pred_confidence": {
  "lineno": 113,
  "symbols_in_volume": [
   "snorkel.slicing.SliceCombinerModule",
   "torch.all",
   "torch.allclose",
   "torch.ones",
   "torch.zeros"
  ],
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_combiner_multiclass": {
  "lineno": 176,
  "symbols_in_volume": [
   "random.randint",
   "snorkel.slicing.SliceCombinerModule",
   "torch.FloatTensor",
   "torch.ones",
   "torch.tensor"
  ],
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_forward_shape": {
  "lineno": 17,
  "symbols_in_volume": [
   "snorkel.slicing.SliceCombinerModule",
   "torch.FloatTensor"
  ],
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_many_slices": {
  "lineno": 144,
  "symbols_in_volume": [
   "snorkel.slicing.SliceCombinerModule",
   "torch.allclose",
   "torch.ones"
  ],
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_temperature": {
  "lineno": 220,
  "symbols_in_volume": [
   "snorkel.slicing.SliceCombinerModule",
   "torch.FloatTensor",
   "torch.allclose",
   "torch.isclose",
   "torch.ones",
   "torch.sum"
  ],
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.slicing.test_sliceaware_classifier.SliceCombinerTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.slicing.test_sliceaware_classifier.SliceCombinerTest.setUp": {
  "lineno": 33,
  "symbols_in_volume": [
   "snorkel.analysis.Scorer",
   "snorkel.slicing.SFApplier",
   "snorkel.slicing.SliceAwareClassifier",
   "torch.FloatTensor",
   "torch.LongTensor",
   "torch.nn.Linear",
   "torch.nn.ReLU",
   "torch.nn.Sequential",
   "types.SimpleNamespace"
  ],
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.SliceCombinerTest.test_make_slice_dataloader": {
  "lineno": 92,
  "symbols_in_volume": [
   "snorkel.classification.DictDataset"
  ],
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.SliceCombinerTest.test_scores_pipeline": {
  "lineno": 117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.SliceCombinerTest.test_slice_tasks": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.create_dataset": {
  "lineno": 26,
  "symbols_in_volume": [
   "snorkel.classification.DictDataset"
  ],
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.f": {
  "lineno": 12,
  "symbols_in_volume": [
   "snorkel.slicing.slicing_function"
  ],
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.g": {
  "lineno": 17,
  "symbols_in_volume": [
   "snorkel.slicing.slicing_function"
  ],
  "type": "function"
 },
 "test.slicing.test_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.slicing.test_utils.UtilsTest": {
  "lineno": 21,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.slicing.test_utils.UtilsTest.test_add_slice_labels": {
  "lineno": 22,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "snorkel.classification.DictDataLoader",
   "snorkel.classification.DictDataset",
   "snorkel.slicing.PandasSFApplier",
   "snorkel.slicing.add_slice_labels",
   "torch.Tensor"
  ],
  "type": "function"
 },
 "test.slicing.test_utils.UtilsTest.test_convert_to_slice_tasks": {
  "lineno": 71,
  "symbols_in_volume": [
   "snorkel.slicing.convert_to_slice_tasks"
  ],
  "type": "function"
 },
 "test.slicing.test_utils.create_dummy_task": {
  "lineno": 112,
  "symbols_in_volume": [
   "snorkel.classification.Operation",
   "snorkel.classification.Task",
   "torch.nn.Linear",
   "torch.nn.ModuleDict"
  ],
  "type": "function"
 },
 "test.slicing.test_utils.f": {
  "lineno": 16,
  "symbols_in_volume": [
   "snorkel.slicing.slicing_function"
  ],
  "type": "function"
 },
 "test.synthetic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.synthetic.test_synthetic_data": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "test.synthetic.test_synthetic_data.TestGenerateSimpleLabelMatrix": {
  "lineno": 10,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.synthetic.test_synthetic_data.TestGenerateSimpleLabelMatrix._test_generate_L": {
  "lineno": 18,
  "symbols_in_volume": [
   "numpy.random.seed",
   "numpy.testing.assert_array_almost_equal",
   "snorkel.labeling.LFAnalysis",
   "snorkel.synthetic.synthetic_data.generate_simple_label_matrix",
   "typing.Optional"
  ],
  "type": "function"
 },
 "test.synthetic.test_synthetic_data.TestGenerateSimpleLabelMatrix.setUp": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.synthetic.test_synthetic_data.TestGenerateSimpleLabelMatrix.test_generate_L": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.synthetic.test_synthetic_data.TestGenerateSimpleLabelMatrix.test_generate_L_multiclass": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.utils.test_config_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.utils.test_config_utils.BarConfig": {
  "lineno": 11,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "class"
 },
 "test.utils.test_config_utils.FooConfig": {
  "lineno": 7,
  "symbols_in_volume": [
   "snorkel.types.Config"
  ],
  "type": "class"
 },
 "test.utils.test_config_utils.UtilsTest": {
  "lineno": 16,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.utils.test_config_utils.UtilsTest.test_merge_config": {
  "lineno": 17,
  "symbols_in_volume": [
   "snorkel.utils.config_utils.merge_config"
  ],
  "type": "function"
 },
 "test.utils.test_core": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.array",
   "unittest.main"
  ],
  "type": "module"
 },
 "test.utils.test_core.UtilsTest": {
  "lineno": 17,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.utils.test_core.UtilsTest.test_filter_labels": {
  "lineno": 84,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_equal",
   "snorkel.utils.filter_labels"
  ],
  "type": "function"
 },
 "test.utils.test_core.UtilsTest.test_filter_labels_probs": {
  "lineno": 94,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_equal",
   "snorkel.utils.filter_labels"
  ],
  "type": "function"
 },
 "test.utils.test_core.UtilsTest.test_preds_to_probs": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.testing.assert_array_equal",
   "snorkel.utils.preds_to_probs"
  ],
  "type": "function"
 },
 "test.utils.test_core.UtilsTest.test_probs_to_preds": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_equal",
   "snorkel.utils.probs_to_preds"
  ],
  "type": "function"
 },
 "test.utils.test_core.UtilsTest.test_to_int_label_array": {
  "lineno": 18,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.testing.assert_array_equal",
   "snorkel.utils.to_int_label_array"
  ],
  "type": "function"
 },
 "test.utils.test_data_operators": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "test.utils.test_data_operators.DataOperatorsTest": {
  "lineno": 6,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test.utils.test_data_operators.DataOperatorsTest.test_check_unique_names": {
  "lineno": 7,
  "symbols_in_volume": [
   "snorkel.utils.data_operators.check_unique_names"
  ],
  "type": "function"
 }
}