{
 "snorkel": {
  "data": {},
  "type": "module"
 },
 "snorkel.__version__": {
  "data": {
   "shadows": "VERSION"
  },
  "type": "import"
 },
 "snorkel.analysis": {
  "data": {},
  "type": "module"
 },
 "snorkel.analysis.error_analysis": {
  "data": {},
  "type": "module"
 },
 "snorkel.analysis.error_analysis.DefaultDict": {
  "data": {
   "shadows": "typing.DefaultDict"
  },
  "type": "import"
 },
 "snorkel.analysis.error_analysis.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.analysis.error_analysis.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.analysis.error_analysis.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.analysis.error_analysis.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "snorkel.analysis.error_analysis.get_label_buckets": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "collections.defaultdict",
    "enumerate",
    "int",
    "len",
    "list",
    "map",
    "numpy.array",
    "numpy.ndarray",
    "set",
    "snorkel.utils.to_int_label_array",
    "typing.DefaultDict",
    "typing.Dict",
    "typing.List",
    "typing.Tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "snorkel.analysis.error_analysis.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.analysis.error_analysis.to_int_label_array": {
  "data": {
   "shadows": "snorkel.utils.to_int_label_array"
  },
  "type": "import"
 },
 "snorkel.analysis.metrics": {
  "data": {
   "symbols_in_volume": [
    "sklearn.metrics.accuracy_score",
    "sklearn.metrics.fbeta_score",
    "sklearn.metrics.matthews_corrcoef",
    "sklearn.metrics.precision_score",
    "sklearn.metrics.recall_score",
    "snorkel.analysis.metrics.Metric",
    "snorkel.analysis.metrics._coverage_score",
    "snorkel.analysis.metrics._f1_macro_score",
    "snorkel.analysis.metrics._f1_micro_score",
    "snorkel.analysis.metrics._f1_score",
    "snorkel.analysis.metrics._roc_auc_score"
   ]
  },
  "type": "module"
 },
 "snorkel.analysis.metrics.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.analysis.metrics.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "snorkel.analysis.metrics.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.analysis.metrics.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.analysis.metrics.METRICS": {
  "data": {
   "lineno": 110
  },
  "type": "constant"
 },
 "snorkel.analysis.metrics.Metric": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "float",
    "str",
    "typing.Callable",
    "typing.List",
    "typing.NamedTuple"
   ]
  },
  "type": "class"
 },
 "snorkel.analysis.metrics.NamedTuple": {
  "data": {
   "shadows": "typing.NamedTuple"
  },
  "type": "import"
 },
 "snorkel.analysis.metrics.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.analysis.metrics._coverage_score": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "float",
    "len",
    "numpy.ndarray",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "snorkel.analysis.metrics._f1_macro_score": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "float",
    "numpy.ndarray",
    "sklearn.metrics.f1_score"
   ]
  },
  "type": "function"
 },
 "snorkel.analysis.metrics._f1_micro_score": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "float",
    "numpy.ndarray",
    "sklearn.metrics.f1_score"
   ]
  },
  "type": "function"
 },
 "snorkel.analysis.metrics._f1_score": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "numpy.ndarray",
    "sklearn.metrics.f1_score"
   ]
  },
  "type": "function"
 },
 "snorkel.analysis.metrics._roc_auc_score": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "numpy.ndarray",
    "sklearn.metrics.roc_auc_score"
   ]
  },
  "type": "function"
 },
 "snorkel.analysis.metrics.filter_labels": {
  "data": {
   "shadows": "snorkel.utils.filter_labels"
  },
  "type": "import"
 },
 "snorkel.analysis.metrics.metric_score": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "func",
    "int",
    "numpy.ndarray",
    "set",
    "snorkel.utils.filter_labels",
    "snorkel.utils.to_int_label_array",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.analysis.metrics.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.analysis.metrics.skmetrics": {
  "data": {
   "shadows": "sklearn.metrics"
  },
  "type": "import"
 },
 "snorkel.analysis.metrics.to_int_label_array": {
  "data": {
   "shadows": "snorkel.utils.to_int_label_array"
  },
  "type": "import"
 },
 "snorkel.analysis.scorer": {
  "data": {},
  "type": "module"
 },
 "snorkel.analysis.scorer.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "snorkel.analysis.scorer.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.analysis.scorer.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.analysis.scorer.METRICS": {
  "data": {
   "shadows": "snorkel.analysis.metrics.METRICS"
  },
  "type": "import"
 },
 "snorkel.analysis.scorer.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "snorkel.analysis.scorer.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.analysis.scorer.Scorer": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "snorkel.analysis.scorer.Scorer.__init__": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "functools.partial",
    "int",
    "snorkel.analysis.metrics.METRICS",
    "snorkel.analysis.metrics.metric_score",
    "str",
    "typing.Callable",
    "typing.Dict",
    "typing.List",
    "typing.Mapping",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.analysis.scorer.Scorer.score": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "float",
    "isinstance",
    "len",
    "metric",
    "numpy.ndarray",
    "str",
    "typing.Dict",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.analysis.scorer.Scorer.score_slices": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "float",
    "len",
    "numpy.ndarray",
    "numpy.recarray",
    "pandas.DataFrame",
    "pandas.DataFrame.from_dict",
    "str",
    "typing.Dict",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "snorkel.analysis.scorer.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "snorkel.analysis.scorer.metric_score": {
  "data": {
   "shadows": "snorkel.analysis.metrics.metric_score"
  },
  "type": "import"
 },
 "snorkel.analysis.scorer.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.analysis.scorer.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "snorkel.analysis.scorer.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "snorkel.augmentation": {
  "data": {},
  "type": "module"
 },
 "snorkel.augmentation.apply": {
  "data": {},
  "type": "module"
 },
 "snorkel.augmentation.apply.core": {
  "data": {},
  "type": "module"
 },
 "snorkel.augmentation.apply.core.BaseTFApplier": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "snorkel.augmentation.apply.core.BaseTFApplier.__init__": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "snorkel.augmentation.policy.core.Policy",
    "snorkel.augmentation.tf.BaseTransformationFunction",
    "snorkel.utils.data_operators.check_unique_names",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.apply.core.BaseTFApplier.__repr__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.apply.core.BaseTFApplier._apply_policy_to_data_point": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "len",
    "snorkel.types.DataPoint",
    "snorkel.types.DataPoints",
    "tf"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.apply.core.BaseTransformationFunction": {
  "data": {
   "shadows": "snorkel.augmentation.tf.BaseTransformationFunction"
  },
  "type": "import"
 },
 "snorkel.augmentation.apply.core.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "snorkel.augmentation.apply.core.DataPoints": {
  "data": {
   "shadows": "snorkel.types.DataPoints"
  },
  "type": "import"
 },
 "snorkel.augmentation.apply.core.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "snorkel.augmentation.apply.core.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.augmentation.apply.core.Policy": {
  "data": {
   "shadows": "snorkel.augmentation.policy.core.Policy"
  },
  "type": "import"
 },
 "snorkel.augmentation.apply.core.TFApplier": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "snorkel.augmentation.apply.core.BaseTFApplier"
   ]
  },
  "type": "class"
 },
 "snorkel.augmentation.apply.core.TFApplier.apply": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "bool",
    "snorkel.types.DataPoint",
    "snorkel.types.DataPoints",
    "tqdm.tqdm",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.apply.core.TFApplier.apply_generator": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "int",
    "len",
    "range",
    "snorkel.types.DataPoint",
    "snorkel.types.DataPoints",
    "typing.Iterator",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.apply.core.check_unique_names": {
  "data": {
   "shadows": "snorkel.utils.data_operators.check_unique_names"
  },
  "type": "import"
 },
 "snorkel.augmentation.apply.core.tqdm": {
  "data": {
   "shadows": "tqdm.tqdm"
  },
  "type": "import"
 },
 "snorkel.augmentation.apply.pandas": {
  "data": {},
  "type": "module"
 },
 "snorkel.augmentation.apply.pandas.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.augmentation.apply.pandas.PandasTFApplier": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "snorkel.augmentation.apply.pandas.PandasTFApplier.apply": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "bool",
    "len",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.concat",
    "tqdm.tqdm",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.apply.pandas.PandasTFApplier.apply_generator": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "pandas.DataFrame",
    "pandas.Series",
    "pandas.concat",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.apply.pandas.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "snorkel.augmentation.apply.pandas.tqdm": {
  "data": {
   "shadows": "tqdm.tqdm"
  },
  "type": "import"
 },
 "snorkel.augmentation.policy": {
  "data": {},
  "type": "module"
 },
 "snorkel.augmentation.policy.core": {
  "data": {},
  "type": "module"
 },
 "snorkel.augmentation.policy.core.ApplyAllPolicy": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "snorkel.augmentation.policy.core.Policy"
   ]
  },
  "type": "class"
 },
 "snorkel.augmentation.policy.core.ApplyAllPolicy.generate": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "int",
    "list",
    "range",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.policy.core.ApplyEachPolicy": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "snorkel.augmentation.policy.core.Policy"
   ]
  },
  "type": "class"
 },
 "snorkel.augmentation.policy.core.ApplyEachPolicy.__init__": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "bool",
    "int",
    "super"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.policy.core.ApplyEachPolicy.generate_for_example": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "int",
    "range",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.policy.core.ApplyOnePolicy": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "snorkel.augmentation.policy.core.ApplyAllPolicy"
   ]
  },
  "type": "class"
 },
 "snorkel.augmentation.policy.core.ApplyOnePolicy.__init__": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "bool",
    "int",
    "super"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.policy.core.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.augmentation.policy.core.Policy": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "snorkel.augmentation.policy.core.Policy.__init__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "bool",
    "int"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.policy.core.Policy.generate": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "NotImplementedError",
    "int",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.policy.core.Policy.generate_for_example": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "int",
    "range",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.policy.sampling": {
  "data": {},
  "type": "module"
 },
 "snorkel.augmentation.policy.sampling.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.augmentation.policy.sampling.MeanFieldPolicy": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "snorkel.augmentation.policy.sampling.MeanFieldPolicy.__init__": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "bool",
    "float",
    "int",
    "super",
    "typing.Optional",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.policy.sampling.MeanFieldPolicy.generate": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "int",
    "numpy.random.choice",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.policy.sampling.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.augmentation.policy.sampling.RandomPolicy": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "snorkel.augmentation.policy.sampling.MeanFieldPolicy"
   ]
  },
  "type": "class"
 },
 "snorkel.augmentation.policy.sampling.RandomPolicy.__init__": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "bool",
    "int",
    "super"
   ]
  },
  "type": "function"
 },
 "snorkel.augmentation.policy.sampling.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "snorkel.augmentation.policy.sampling.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.augmentation.tf": {
  "data": {
   "symbols_in_volume": [
    "snorkel.map.BaseMapper"
   ]
  },
  "type": "module"
 },
 "snorkel.augmentation.tf.BaseMapper": {
  "data": {
   "shadows": "snorkel.map.BaseMapper"
  },
  "type": "import"
 },
 "snorkel.augmentation.tf.BaseTransformationFunction": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "snorkel.augmentation.tf.LambdaMapper": {
  "data": {
   "shadows": "snorkel.map.LambdaMapper"
  },
  "type": "import"
 },
 "snorkel.augmentation.tf.LambdaTransformationFunction": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "snorkel.map.LambdaMapper"
   ]
  },
  "type": "class"
 },
 "snorkel.augmentation.tf.Mapper": {
  "data": {
   "shadows": "snorkel.map.Mapper"
  },
  "type": "import"
 },
 "snorkel.augmentation.tf.TransformationFunction": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "snorkel.augmentation.tf.lambda_mapper": {
  "data": {
   "shadows": "snorkel.map.lambda_mapper"
  },
  "type": "import"
 },
 "snorkel.augmentation.tf.transformation_function": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper"
   ]
  },
  "type": "class"
 },
 "snorkel.classification": {
  "data": {},
  "type": "module"
 },
 "snorkel.classification.data": {
  "data": {
   "symbols_in_volume": [
    "snorkel.classification.data.XDict",
    "snorkel.classification.data.YDict",
    "str",
    "torch.Tensor",
    "typing.Any",
    "typing.Dict",
    "typing.Tuple"
   ]
  },
  "type": "module"
 },
 "snorkel.classification.data.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.classification.data.Batch": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "snorkel.classification.data.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "snorkel.classification.data.DEFAULT_DATASET_NAME": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "snorkel.classification.data.DEFAULT_INPUT_DATA_KEY": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "snorkel.classification.data.DEFAULT_TASK_NAME": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "snorkel.classification.data.DataLoader": {
  "data": {
   "shadows": "torch.utils.data.DataLoader"
  },
  "type": "import"
 },
 "snorkel.classification.data.Dataset": {
  "data": {
   "shadows": "torch.utils.data.Dataset"
  },
  "type": "import"
 },
 "snorkel.classification.data.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.classification.data.DictDataLoader": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "torch.utils.data.DataLoader"
   ]
  },
  "type": "class"
 },
 "snorkel.classification.data.DictDataLoader.__init__": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "isinstance",
    "snorkel.classification.data.DictDataset",
    "snorkel.classification.data.collate_dicts",
    "super",
    "typing.Any",
    "typing.Callable"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.data.DictDataset": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "torch.utils.data.Dataset"
   ]
  },
  "type": "class"
 },
 "snorkel.classification.data.DictDataset.__getitem__": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "int",
    "snorkel.classification.data.XDict",
    "snorkel.classification.data.YDict",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.data.DictDataset.__init__": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "snorkel.classification.data.XDict",
    "snorkel.classification.data.YDict",
    "str",
    "torch.Tensor",
    "type"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.data.DictDataset.__len__": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "StopIteration",
    "int",
    "iter",
    "len",
    "next"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.data.DictDataset.__repr__": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "list",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.data.DictDataset.from_tensors": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "snorkel.classification.data.DEFAULT_DATASET_NAME",
    "snorkel.classification.data.DEFAULT_INPUT_DATA_KEY",
    "snorkel.classification.data.DEFAULT_TASK_NAME",
    "str",
    "torch.Tensor"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.data.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.classification.data.Tensor": {
  "data": {
   "shadows": "torch.Tensor"
  },
  "type": "import"
 },
 "snorkel.classification.data.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.classification.data.XDict": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "snorkel.classification.data.YDict": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "snorkel.classification.data.collate_dicts": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "isinstance",
    "list",
    "list_to_tensor",
    "snorkel.classification.data.Batch",
    "str",
    "torch.Tensor",
    "typing.Any",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.data.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "snorkel.classification.loss": {
  "data": {
   "symbols_in_volume": [
    "snorkel.classification.loss.torch",
    "str",
    "typing.List",
    "typing.Mapping"
   ]
  },
  "type": "module"
 },
 "snorkel.classification.loss.F": {
  "data": {
   "shadows": "torch.nn.functional"
  },
  "type": "import"
 },
 "snorkel.classification.loss.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.classification.loss.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "snorkel.classification.loss.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.classification.loss.Outputs": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "snorkel.classification.loss.cross_entropy_with_probs": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "input",
    "input.new_full",
    "input.new_zeros",
    "input.shape",
    "range",
    "snorkel.classification.loss.torch",
    "str",
    "torch.nn.functional.cross_entropy",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.loss.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier": {
  "data": {
   "symbols_in_volume": [
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.Mapping",
    "typing.Union"
   ]
  },
  "type": "module"
 },
 "snorkel.classification.multitask_classifier.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.ClassifierConfig": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "bool",
    "int",
    "snorkel.types.Config"
   ]
  },
  "type": "class"
 },
 "snorkel.classification.multitask_classifier.Config": {
  "data": {
   "shadows": "snorkel.types.Config"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.data.DictDataLoader"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "torch.nn.Module"
   ]
  },
  "type": "class"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.__init__": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "dict",
    "len",
    "set",
    "snorkel.analysis.Scorer",
    "snorkel.classification.multitask_classifier.ClassifierConfig",
    "snorkel.classification.multitask_classifier.logging",
    "snorkel.classification.multitask_classifier.torch",
    "str",
    "super",
    "torch.nn.ModuleDict",
    "type",
    "typing.Any",
    "typing.Callable",
    "typing.Dict",
    "typing.List",
    "typing.Optional",
    "typing.Sequence",
    "typing.Set"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.__repr__": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier._build_network": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier._calculate_probs": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "dict",
    "snorkel.classification.multitask_classifier.torch",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.Iterable"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier._get_labels_to_tasks": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "str",
    "typing.Dict",
    "typing.Iterable",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier._move_to_device": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "snorkel.classification.multitask_classifier.logging",
    "snorkel.classification.multitask_classifier.torch"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.add_task": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "torch.nn.DataParallel"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.calculate_loss": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "dict",
    "float",
    "isinstance",
    "len",
    "snorkel.classification.multitask_classifier.torch",
    "snorkel.classification.utils.move_to_device",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.forward": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "Exception",
    "ValueError",
    "isinstance",
    "snorkel.classification.multitask_classifier.OutputDict",
    "snorkel.classification.utils.move_to_device",
    "str",
    "tuple",
    "typing.Any",
    "typing.Dict",
    "typing.Iterable"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.load": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": [
    "BaseException",
    "snorkel.classification.multitask_classifier.logging",
    "snorkel.classification.multitask_classifier.os",
    "snorkel.classification.multitask_classifier.torch",
    "str"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.predict": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "bool",
    "collections.defaultdict",
    "enumerate",
    "list",
    "numpy.array",
    "numpy.ndarray",
    "snorkel.classification.data.DictDataLoader",
    "snorkel.classification.multitask_classifier.torch",
    "snorkel.utils.probs_to_preds",
    "str",
    "typing.Dict",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.save": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "BaseException",
    "snorkel.classification.multitask_classifier.logging",
    "snorkel.classification.multitask_classifier.os",
    "snorkel.classification.multitask_classifier.torch",
    "str"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.MultitaskClassifier.score": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "bool",
    "dict",
    "float",
    "pandas.DataFrame",
    "set",
    "snorkel.classification.data.DictDataLoader",
    "snorkel.classification.multitask_classifier.logging",
    "snorkel.classification.multitask_classifier.torch",
    "snorkel.classification.utils.metrics_dict_to_dataframe",
    "str",
    "typing.Dict",
    "typing.List",
    "typing.Optional",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.multitask_classifier.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.OutputDict": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "snorkel.classification.multitask_classifier.Scorer": {
  "data": {
   "shadows": "snorkel.analysis.Scorer"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.metrics_dict_to_dataframe": {
  "data": {
   "shadows": "snorkel.classification.utils.metrics_dict_to_dataframe"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.move_to_device": {
  "data": {
   "shadows": "snorkel.classification.utils.move_to_device"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.probs_to_preds": {
  "data": {
   "shadows": "snorkel.utils.probs_to_preds"
  },
  "type": "import"
 },
 "snorkel.classification.multitask_classifier.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "snorkel.classification.task": {
  "data": {
   "symbols_in_volume": [
    "snorkel.classification.task.torch",
    "str",
    "typing.List",
    "typing.Mapping"
   ]
  },
  "type": "module"
 },
 "snorkel.classification.task.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "snorkel.classification.task.F": {
  "data": {
   "shadows": "torch.nn.functional"
  },
  "type": "import"
 },
 "snorkel.classification.task.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.classification.task.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "snorkel.classification.task.Operation": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "snorkel.classification.task.Operation.__init__": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "str",
    "typing.Optional",
    "typing.Sequence",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.task.Operation.__repr__": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.task.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.classification.task.Outputs": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "snorkel.classification.task.Scorer": {
  "data": {
   "shadows": "snorkel.analysis.Scorer"
  },
  "type": "import"
 },
 "snorkel.classification.task.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "snorkel.classification.task.Task": {
  "data": {
   "lineno": 66
  },
  "type": "class"
 },
 "snorkel.classification.task.Task.__init__": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "functools.partial",
    "snorkel.analysis.Scorer",
    "snorkel.classification.task.Operation",
    "snorkel.classification.task.logging",
    "snorkel.classification.task.torch",
    "str",
    "torch.nn.ModuleDict",
    "torch.nn.functional.cross_entropy",
    "torch.nn.functional.softmax",
    "typing.Callable",
    "typing.Optional",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.task.Task.__repr__": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.task.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.classification.task.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "snorkel.classification.task.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "snorkel.classification.task.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "snorkel.classification.task.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "snorkel.classification.task.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "snorkel.classification.training": {
  "data": {},
  "type": "module"
 },
 "snorkel.classification.training.loggers": {
  "data": {},
  "type": "module"
 },
 "snorkel.classification.training.loggers.checkpointer": {
  "data": {
   "symbols_in_volume": [
    "float",
    "str",
    "typing.Dict"
   ]
  },
  "type": "module"
 },
 "snorkel.classification.training.loggers.checkpointer.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer": {
  "data": {
   "lineno": 46
  },
  "type": "class"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer.__init__": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "snorkel.classification.training.loggers.checkpointer.CheckpointerConfig",
    "snorkel.classification.training.loggers.checkpointer.logging",
    "snorkel.classification.training.loggers.checkpointer.os",
    "str",
    "typing.Any",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer._is_new_best": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "set",
    "snorkel.classification.training.loggers.checkpointer.Metrics",
    "str",
    "typing.Set"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer._make_metric_map": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "str",
    "typing.Dict",
    "typing.Iterable",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer._validate_config": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "ValueError",
    "len"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer.checkpoint": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "float",
    "set",
    "shutil.copyfile",
    "snorkel.classification.multitask_classifier.MultitaskClassifier",
    "snorkel.classification.training.loggers.checkpointer.Metrics",
    "snorkel.classification.training.loggers.checkpointer.logging"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer.clear": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "snorkel.classification.training.loggers.checkpointer.glob",
    "snorkel.classification.training.loggers.checkpointer.logging",
    "snorkel.classification.training.loggers.checkpointer.os"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.Checkpointer.load_best_model": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "list",
    "snorkel.classification.multitask_classifier.MultitaskClassifier",
    "snorkel.classification.training.loggers.checkpointer.logging"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.checkpointer.CheckpointerConfig": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "bool",
    "int",
    "snorkel.types.Config",
    "str",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "class"
 },
 "snorkel.classification.training.loggers.checkpointer.Config": {
  "data": {
   "shadows": "snorkel.types.Config"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.checkpointer.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.checkpointer.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.checkpointer.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.checkpointer.Metrics": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "snorkel.classification.training.loggers.checkpointer.MultitaskClassifier": {
  "data": {
   "shadows": "snorkel.classification.multitask_classifier.MultitaskClassifier"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.checkpointer.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.checkpointer.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.checkpointer.copyfile": {
  "data": {
   "shadows": "shutil.copyfile"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.checkpointer.glob": {
  "data": {
   "shadows": "glob"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.checkpointer.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.checkpointer.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_manager": {
  "data": {},
  "type": "module"
 },
 "snorkel.classification.training.loggers.log_manager.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_manager.Config": {
  "data": {
   "shadows": "snorkel.types.Config"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager": {
  "data": {
   "lineno": 27
  },
  "type": "class"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.__init__": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "snorkel.classification.training.loggers.log_manager.LogManagerConfig",
    "snorkel.classification.training.loggers.log_manager.logging",
    "typing.Any",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.cleanup": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "snorkel.classification.multitask_classifier.MultitaskClassifier"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.reset": {
  "data": {
   "lineno": 123
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.trigger_checkpointing": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "bool"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.trigger_evaluation": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "bool"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManager.update": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_manager.LogManagerConfig": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "float",
    "snorkel.types.Config",
    "str"
   ]
  },
  "type": "class"
 },
 "snorkel.classification.training.loggers.log_manager.MultitaskClassifier": {
  "data": {
   "shadows": "snorkel.classification.multitask_classifier.MultitaskClassifier"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_manager.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_manager.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_writer": {
  "data": {},
  "type": "module"
 },
 "snorkel.classification.training.loggers.log_writer.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_writer.Config": {
  "data": {
   "shadows": "snorkel.types.Config"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_writer.DefaultDict": {
  "data": {
   "shadows": "typing.DefaultDict"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_writer.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter": {
  "data": {
   "lineno": 26
  },
  "type": "class"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "collections.defaultdict",
    "datetime.datetime.now",
    "float",
    "list",
    "snorkel.classification.training.loggers.log_writer.LogWriterConfig",
    "snorkel.classification.training.loggers.log_writer.os",
    "str",
    "typing.Any",
    "typing.DefaultDict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.add_scalar": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "float",
    "str"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.cleanup": {
  "data": {
   "lineno": 132
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.write_config": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "snorkel.types.Config",
    "str"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.write_json": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "open",
    "snorkel.classification.training.loggers.log_writer.json",
    "snorkel.classification.training.loggers.log_writer.logging",
    "snorkel.classification.training.loggers.log_writer.os",
    "str",
    "typing.Any",
    "typing.Mapping"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.write_log": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriter.write_text": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "open",
    "snorkel.classification.training.loggers.log_writer.os",
    "str"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.log_writer.LogWriterConfig": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "snorkel.types.Config",
    "str",
    "typing.Optional"
   ]
  },
  "type": "class"
 },
 "snorkel.classification.training.loggers.log_writer.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_writer.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_writer.datetime": {
  "data": {
   "shadows": "datetime.datetime"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_writer.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_writer.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_writer.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.log_writer.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.tensorboard_writer": {
  "data": {},
  "type": "module"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.Config": {
  "data": {
   "shadows": "snorkel.types.Config"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.SummaryWriter": {
  "data": {
   "shadows": "tensorboardX.SummaryWriter"
  },
  "type": "import"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.TensorBoardWriter": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.TensorBoardWriter.__init__": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "super",
    "tensorboardX.SummaryWriter",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.TensorBoardWriter.add_scalar": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "float",
    "str"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.TensorBoardWriter.cleanup": {
  "data": {
   "lineno": 59
  },
  "type": "function"
 },
 "snorkel.classification.training.loggers.tensorboard_writer.TensorBoardWriter.write_config": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "snorkel.types.Config",
    "str",
    "super"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.schedulers": {
  "data": {},
  "type": "module"
 },
 "snorkel.classification.training.schedulers.batch_schedulers": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "snorkel.classification.training.schedulers.scheduler": {
  "data": {
   "symbols_in_volume": [
    "str",
    "torch.Tensor",
    "typing.Any",
    "typing.Dict",
    "typing.Iterator",
    "typing.Tuple"
   ]
  },
  "type": "module"
 },
 "snorkel.classification.training.schedulers.scheduler.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.scheduler.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.scheduler.BatchIterator": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "snorkel.classification.training.schedulers.scheduler.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.scheduler.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.data.DictDataLoader"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.scheduler.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.scheduler.Scheduler": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "abc.ABC"
   ]
  },
  "type": "class"
 },
 "snorkel.classification.training.schedulers.scheduler.Scheduler.__init__": {
  "data": {
   "lineno": 16
  },
  "type": "function"
 },
 "snorkel.classification.training.schedulers.scheduler.Scheduler.get_batches": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "abc.abstractmethod",
    "snorkel.classification.training.schedulers.scheduler.BatchIterator",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.schedulers.scheduler.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.scheduler.Tensor": {
  "data": {
   "shadows": "torch.Tensor"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.scheduler.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.scheduler.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.sequential_scheduler": {
  "data": {},
  "type": "module"
 },
 "snorkel.classification.training.schedulers.sequential_scheduler.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.data.DictDataLoader"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.sequential_scheduler.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.sequential_scheduler.SequentialScheduler": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "snorkel.classification.training.schedulers.sequential_scheduler.SequentialScheduler.__init__": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.schedulers.sequential_scheduler.SequentialScheduler.get_batches": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "snorkel.classification.data.DictDataLoader",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.schedulers.shuffled_scheduler": {
  "data": {},
  "type": "module"
 },
 "snorkel.classification.training.schedulers.shuffled_scheduler.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.data.DictDataLoader"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.shuffled_scheduler.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "snorkel.classification.training.schedulers.shuffled_scheduler.ShuffledScheduler": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "snorkel.classification.training.schedulers.shuffled_scheduler.ShuffledScheduler.__init__": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.schedulers.shuffled_scheduler.ShuffledScheduler.get_batches": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "enumerate",
    "iter",
    "len",
    "next",
    "snorkel.classification.data.DictDataLoader",
    "snorkel.classification.training.schedulers.shuffled_scheduler.random",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.schedulers.shuffled_scheduler.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer": {
  "data": {
   "symbols_in_volume": [
    "float",
    "str",
    "typing.Dict"
   ]
  },
  "type": "module"
 },
 "snorkel.classification.training.trainer.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.ClassifierConfig": {
  "data": {
   "shadows": "snorkel.classification.multitask_classifier.ClassifierConfig"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.Config": {
  "data": {
   "shadows": "snorkel.types.Config"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.DefaultDict": {
  "data": {
   "shadows": "typing.DefaultDict"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.data.DictDataLoader"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.LRSchedulerConfig": {
  "data": {
   "shadows": "snorkel.utils.lr_schedulers.LRSchedulerConfig"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.Metrics": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "snorkel.classification.training.trainer.MultitaskClassifier": {
  "data": {
   "shadows": "snorkel.classification.multitask_classifier.MultitaskClassifier"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.OptimizerConfig": {
  "data": {
   "shadows": "snorkel.utils.optimizers.OptimizerConfig"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.Trainer": {
  "data": {
   "lineno": 107
  },
  "type": "class"
 },
 "snorkel.classification.training.trainer.Trainer.__init__": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "snorkel.classification.training.trainer.TrainerConfig",
    "snorkel.utils.config_utils.merge_config",
    "str",
    "type",
    "typing.Any",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._aggregate_losses": {
  "data": {
   "lineno": 483,
   "symbols_in_volume": [
    "dict",
    "float",
    "snorkel.classification.training.trainer.Metrics",
    "str",
    "sum",
    "typing.DefaultDict"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._check_dataloaders": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "ValueError",
    "all",
    "any",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._checkpoint_model": {
  "data": {
   "lineno": 474,
   "symbols_in_volume": [
    "snorkel.classification.multitask_classifier.MultitaskClassifier",
    "snorkel.classification.training.trainer.Metrics"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._evaluate": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": [
    "snorkel.classification.multitask_classifier.MultitaskClassifier",
    "snorkel.classification.training.trainer.Metrics",
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._log_metrics": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": [
    "snorkel.classification.training.trainer.Metrics"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._logging": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": [
    "dict",
    "int",
    "snorkel.classification.multitask_classifier.MultitaskClassifier",
    "snorkel.classification.training.trainer.Metrics",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._reset_losses": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": [
    "collections.defaultdict",
    "float",
    "int"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_batch_scheduler": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": [
    "ValueError",
    "scheduler_class"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_checkpointer": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "Checkpointer",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_log_manager": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "LogManager"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_log_writer": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "LogWriter",
    "TensorBoardWriter",
    "ValueError",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_lr_scheduler": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "ValueError",
    "torch.optim.lr_scheduler.ExponentialLR",
    "torch.optim.lr_scheduler.LambdaLR",
    "torch.optim.lr_scheduler.StepLR",
    "torch.optim.lr_scheduler._LRScheduler",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_optimizer": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "ValueError",
    "filter",
    "snorkel.classification.training.trainer.logging",
    "torch.nn.Module",
    "torch.optim.Adam",
    "torch.optim.Adamax",
    "torch.optim.Optimizer",
    "torch.optim.SGD"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._set_warmup_scheduler": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "snorkel.classification.training.trainer.logging",
    "torch.optim.lr_scheduler.LambdaLR",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer._update_lr_scheduler": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.Trainer.fit": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "float",
    "iter",
    "len",
    "list",
    "next",
    "range",
    "snorkel.classification.multitask_classifier.MultitaskClassifier",
    "snorkel.classification.training.trainer.logging",
    "snorkel.classification.training.trainer.torch",
    "str",
    "sum",
    "tqdm.tqdm",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.training.trainer.TrainerConfig": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "CheckpointerConfig",
    "LogManagerConfig",
    "LogWriterConfig",
    "bool",
    "float",
    "int",
    "snorkel.classification.multitask_classifier.ClassifierConfig",
    "snorkel.classification.training.trainer.logging",
    "snorkel.types.Config",
    "snorkel.utils.lr_schedulers.LRSchedulerConfig",
    "snorkel.utils.optimizers.OptimizerConfig",
    "str",
    "typing.Optional"
   ]
  },
  "type": "class"
 },
 "snorkel.classification.training.trainer.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.merge_config": {
  "data": {
   "shadows": "snorkel.utils.config_utils.merge_config"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.optim": {
  "data": {
   "shadows": "torch.optim"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "snorkel.classification.training.trainer.tqdm": {
  "data": {
   "shadows": "tqdm.tqdm"
  },
  "type": "import"
 },
 "snorkel.classification.utils": {
  "data": {
   "symbols_in_volume": [
    "dict",
    "list",
    "snorkel.classification.utils.torch",
    "tuple",
    "typing.Union"
   ]
  },
  "type": "module"
 },
 "snorkel.classification.utils.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.classification.utils.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.classification.utils.TensorCollection": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "snorkel.classification.utils.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.classification.utils.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "snorkel.classification.utils.collect_flow_outputs_by_suffix": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "snorkel.classification.utils.torch",
    "sorted",
    "str",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.utils.list_to_tensor": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "all",
    "len",
    "pad_batch",
    "range",
    "snorkel.classification.utils.torch",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.utils.metrics_dict_to_dataframe": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "float",
    "pandas.DataFrame",
    "str",
    "tuple",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.utils.move_to_device": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "dict",
    "int",
    "isinstance",
    "list",
    "snorkel.classification.utils.TensorCollection",
    "snorkel.classification.utils.torch",
    "tuple"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.classification.utils.pad_batch": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "bool",
    "enumerate",
    "int",
    "len",
    "min",
    "numpy.max",
    "snorkel.classification.utils.torch",
    "typing.List",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "snorkel.classification.utils.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "snorkel.classification.utils.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "snorkel.contrib": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.analysis": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.analysis.DataFrame": {
  "data": {
   "shadows": "pandas.DataFrame"
  },
  "type": "import"
 },
 "snorkel.labeling.analysis.LFAnalysis": {
  "data": {
   "lineno": 15
  },
  "type": "class"
 },
 "snorkel.labeling.analysis.LFAnalysis.__init__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "numpy.ndarray",
    "scipy.sparse.csr_matrix",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis._conflicted_data_points": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "int",
    "numpy.max",
    "numpy.ndarray",
    "numpy.ravel",
    "scipy.sparse.diags"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis._covered_data_points": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "numpy.ndarray",
    "numpy.ravel",
    "numpy.where"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis._overlapped_data_points": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "numpy.ndarray",
    "numpy.ravel",
    "numpy.where"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.label_conflict": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.label_coverage": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.label_overlap": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_conflicts": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "bool",
    "numpy.nan_to_num",
    "numpy.ndarray"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_coverages": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "numpy.ndarray",
    "numpy.ravel"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_empirical_accuracies": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "numpy.errstate",
    "numpy.nan_to_num",
    "numpy.ndarray",
    "numpy.vstack",
    "numpy.where",
    "snorkel.utils.to_int_label_array"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_empirical_probs": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "int",
    "itertools.product",
    "numpy.ndarray",
    "numpy.where",
    "numpy.zeros",
    "range",
    "snorkel.utils.to_int_label_array"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_overlaps": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "bool",
    "numpy.nan_to_num",
    "numpy.ndarray"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_polarities": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "int",
    "list",
    "range",
    "set",
    "sorted",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.LFAnalysis.lf_summary": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "collections.OrderedDict",
    "int",
    "list",
    "numpy.array",
    "numpy.concatenate",
    "numpy.diagonal",
    "numpy.ndarray",
    "numpy.unique",
    "pandas.DataFrame",
    "pandas.Series",
    "range",
    "sklearn.metrics.confusion_matrix",
    "str",
    "typing.List",
    "typing.Optional",
    "typing.Union",
    "zip"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.analysis.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.labeling.analysis.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.labeling.analysis.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "snorkel.labeling.analysis.Series": {
  "data": {
   "shadows": "pandas.Series"
  },
  "type": "import"
 },
 "snorkel.labeling.analysis.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "snorkel.labeling.analysis.confusion_matrix": {
  "data": {
   "shadows": "sklearn.metrics.confusion_matrix"
  },
  "type": "import"
 },
 "snorkel.labeling.analysis.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.labeling.analysis.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "snorkel.labeling.analysis.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "snorkel.labeling.analysis.to_int_label_array": {
  "data": {
   "shadows": "snorkel.utils.to_int_label_array"
  },
  "type": "import"
 },
 "snorkel.labeling.apply": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.apply.core": {
  "data": {
   "symbols_in_volume": [
    "int",
    "typing.List",
    "typing.Tuple"
   ]
  },
  "type": "module"
 },
 "snorkel.labeling.apply.core.BaseLFApplier": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "snorkel.labeling.apply.core.BaseLFApplier.__init__": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "snorkel.labeling.lf.LabelingFunction",
    "snorkel.utils.data_operators.check_unique_names",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.core.BaseLFApplier.__repr__": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.core.BaseLFApplier._numpy_from_row_data": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "any",
    "enumerate",
    "int",
    "itertools.chain.from_iterable",
    "len",
    "map",
    "numpy.int64",
    "numpy.ndarray",
    "numpy.recarray",
    "numpy.zeros",
    "snorkel.labeling.apply.core.RowData",
    "typing.List",
    "zip"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.core.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.core.DataPoints": {
  "data": {
   "shadows": "snorkel.types.DataPoints"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.core.LFApplier": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "snorkel.labeling.apply.core.BaseLFApplier"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.apply.core.LFApplier.apply": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "bool",
    "enumerate",
    "numpy.ndarray",
    "snorkel.labeling.apply.core.apply_lfs_to_data_point",
    "snorkel.types.DataPoints",
    "tqdm.tqdm",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.core.LabelingFunction": {
  "data": {
   "shadows": "snorkel.labeling.lf.LabelingFunction"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.core.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.core.RowData": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "snorkel.labeling.apply.core.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.core.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.core.apply_lfs_to_data_point": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "lf",
    "snorkel.labeling.apply.core.RowData",
    "snorkel.labeling.lf.LabelingFunction",
    "snorkel.types.DataPoint",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.core.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.core.check_unique_names": {
  "data": {
   "shadows": "snorkel.utils.data_operators.check_unique_names"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.core.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.core.tqdm": {
  "data": {
   "shadows": "tqdm.tqdm"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.dask": {
  "data": {
   "symbols_in_volume": [
    "dask.distributed.Client",
    "str",
    "typing.Union"
   ]
  },
  "type": "module"
 },
 "snorkel.labeling.apply.dask.Client": {
  "data": {
   "shadows": "dask.distributed.Client"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.dask.DaskLFApplier": {
  "data": {
   "lineno": 15
  },
  "type": "class"
 },
 "snorkel.labeling.apply.dask.DaskLFApplier.apply": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "dask.dataframe",
    "functools.partial",
    "numpy.ndarray",
    "rows_to_triplets",
    "snorkel.labeling.apply.dask.Scheduler"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.dask.PandasParallelLFApplier": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "snorkel.labeling.apply.dask.DaskLFApplier"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.apply.dask.PandasParallelLFApplier.apply": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "ValueError",
    "dask.dataframe.from_pandas",
    "int",
    "numpy.ndarray",
    "pandas.DataFrame",
    "snorkel.labeling.apply.dask.Scheduler",
    "super"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.dask.Scheduler": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "snorkel.labeling.apply.dask.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.dask.dd": {
  "data": {
   "shadows": "dask.dataframe"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.dask.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.dask.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.dask.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.pandas": {
  "data": {
   "symbols_in_volume": [
    "int",
    "typing.List",
    "typing.Tuple"
   ]
  },
  "type": "module"
 },
 "snorkel.labeling.apply.pandas.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.pandas.LabelingFunction": {
  "data": {
   "shadows": "snorkel.labeling.lf.LabelingFunction"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.pandas.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.pandas.PandasLFApplier": {
  "data": {
   "lineno": 47
  },
  "type": "class"
 },
 "snorkel.labeling.apply.pandas.PandasLFApplier.apply": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "bool",
    "call_fn",
    "functools.partial",
    "numpy.ndarray",
    "pandas.DataFrame",
    "snorkel.labeling.apply.pandas.apply_lfs_to_data_point",
    "snorkel.labeling.apply.pandas.rows_to_triplets",
    "tqdm.tqdm.pandas"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.pandas.PandasRowData": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "snorkel.labeling.apply.pandas.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.pandas.apply_lfs_to_data_point": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "enumerate",
    "lf",
    "snorkel.labeling.apply.pandas.PandasRowData",
    "snorkel.labeling.lf.LabelingFunction",
    "snorkel.types.DataPoint",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.pandas.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.pandas.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.pandas.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.pandas.rows_to_triplets": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "enumerate",
    "snorkel.labeling.apply.pandas.PandasRowData",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.pandas.tqdm": {
  "data": {
   "shadows": "tqdm.tqdm"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.spark": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.apply.spark.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.spark.RDD": {
  "data": {
   "shadows": "pyspark.RDD"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.spark.SparkLFApplier": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "snorkel.labeling.apply.spark.SparkLFApplier.apply": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "numpy.ndarray",
    "pyspark.RDD"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.spark.SparkLFApplier.apply.map_fn": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "apply_lfs_to_data_point",
    "int",
    "snorkel.types.DataPoint",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.apply.spark.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.labeling.apply.spark.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.labeling.lf": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.lf.core": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.lf.core.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.core.BasePreprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.BasePreprocessor"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.core.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.core.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.core.LabelingFunction": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "snorkel.labeling.lf.core.LabelingFunction.__call__": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "Exception",
    "int",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.core.LabelingFunction.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "bool",
    "int",
    "snorkel.preprocess.BasePreprocessor",
    "str",
    "typing.Any",
    "typing.Callable",
    "typing.List",
    "typing.Mapping",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.core.LabelingFunction.__repr__": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.core.LabelingFunction._preprocess_data_point": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "ValueError",
    "preprocessor",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.core.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.core.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.core.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.core.labeling_function": {
  "data": {
   "lineno": 97
  },
  "type": "class"
 },
 "snorkel.labeling.lf.core.labeling_function.__call__": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.lf.core.LabelingFunction",
    "typing.Callable"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.core.labeling_function.__init__": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "callable",
    "snorkel.preprocess.BasePreprocessor",
    "str",
    "typing.Any",
    "typing.List",
    "typing.Mapping",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.nlp": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.lf.nlp.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "snorkel.labeling.lf.nlp.SpacyPreprocessorConfig"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction.__init__": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "bool",
    "int",
    "snorkel.preprocess.BasePreprocessor",
    "snorkel.preprocess.nlp.EN_CORE_WEB_SM",
    "str",
    "super",
    "typing.Any",
    "typing.Callable",
    "typing.List",
    "typing.Mapping",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction._create_or_check_preprocessor": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "classmethod",
    "hasattr",
    "snorkel.labeling.lf.nlp.SpacyPreprocessorConfig",
    "snorkel.labeling.lf.nlp.SpacyPreprocessorParameters",
    "snorkel.preprocess.BasePreprocessor",
    "str",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction._create_preprocessor": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "NotImplementedError",
    "classmethod",
    "snorkel.labeling.lf.nlp.SpacyPreprocessorParameters",
    "snorkel.preprocess.nlp.SpacyPreprocessor"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.BasePreprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.BasePreprocessor"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.nlp.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.nlp.EN_CORE_WEB_SM": {
  "data": {
   "shadows": "snorkel.preprocess.nlp.EN_CORE_WEB_SM"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.nlp.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.nlp.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.nlp.NLPLabelingFunction": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.lf.nlp.NLPLabelingFunction._create_preprocessor": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "classmethod",
    "snorkel.labeling.lf.nlp.SpacyPreprocessorParameters",
    "snorkel.preprocess.nlp.SpacyPreprocessor"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.NamedTuple": {
  "data": {
   "shadows": "typing.NamedTuple"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.nlp.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.nlp.SpacyPreprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.nlp.SpacyPreprocessor"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.nlp.SpacyPreprocessorConfig": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "snorkel.labeling.lf.nlp.SpacyPreprocessorParameters",
    "snorkel.preprocess.nlp.SpacyPreprocessor",
    "typing.NamedTuple"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.lf.nlp.SpacyPreprocessorParameters": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "bool",
    "snorkel.preprocess.BasePreprocessor",
    "str",
    "typing.List",
    "typing.NamedTuple",
    "typing.Optional"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.lf.nlp.base_nlp_labeling_function": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "type",
    "typing.Optional"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.lf.nlp.base_nlp_labeling_function.__call__": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "NotImplementedError",
    "int",
    "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction",
    "typing.Callable"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.base_nlp_labeling_function.__init__": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "bool",
    "snorkel.preprocess.BasePreprocessor",
    "snorkel.preprocess.nlp.EN_CORE_WEB_SM",
    "str",
    "super",
    "typing.Any",
    "typing.List",
    "typing.Mapping",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.nlp.nlp_labeling_function": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "snorkel.labeling.lf.nlp.NLPLabelingFunction",
    "snorkel.labeling.lf.nlp.base_nlp_labeling_function"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.lf.nlp_spark": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.lf.nlp_spark.SpacyPreprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.nlp.SpacyPreprocessor"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.nlp_spark.SparkNLPLabelingFunction": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "snorkel.labeling.lf.nlp_spark.SparkNLPLabelingFunction._create_preprocessor": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "classmethod",
    "snorkel.preprocess.nlp.SpacyPreprocessor",
    "snorkel.preprocess.spark.make_spark_preprocessor"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.lf.nlp_spark.make_spark_preprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.spark.make_spark_preprocessor"
  },
  "type": "import"
 },
 "snorkel.labeling.lf.nlp_spark.spark_nlp_labeling_function": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "snorkel.labeling.lf.nlp_spark.SparkNLPLabelingFunction"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.model": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.model.baselines": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.model.baselines.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.labeling.model.baselines.BaselineVoter": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "snorkel.labeling.model.label_model.LabelModel"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.model.baselines.BaselineVoter.fit": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.baselines.LabelModel": {
  "data": {
   "shadows": "snorkel.labeling.model.label_model.LabelModel"
  },
  "type": "import"
 },
 "snorkel.labeling.model.baselines.MajorityClassVoter": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "snorkel.labeling.model.label_model.LabelModel"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.model.baselines.MajorityClassVoter.fit": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "numpy.ndarray",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.baselines.MajorityClassVoter.predict_proba": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "max",
    "numpy.ndarray",
    "numpy.where",
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.baselines.MajorityLabelVoter": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "snorkel.labeling.model.baselines.BaselineVoter"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.model.baselines.MajorityLabelVoter.predict_proba": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "max",
    "numpy.ndarray",
    "numpy.where",
    "numpy.zeros",
    "range"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.baselines.RandomVoter": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "snorkel.labeling.model.baselines.BaselineVoter"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.model.baselines.RandomVoter.predict_proba": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.ndarray",
    "numpy.random.rand"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.baselines.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.labeling.model.graph_utils": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.model.graph_utils.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "snorkel.labeling.model.graph_utils.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.labeling.model.graph_utils.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.labeling.model.graph_utils.get_clique_tree": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "NotImplementedError",
    "enumerate",
    "int",
    "len",
    "networkx.Graph",
    "networkx.chordal_graph_cliques",
    "networkx.is_chordal",
    "networkx.minimum_spanning_tree",
    "typing.Iterable",
    "typing.List",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.graph_utils.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model": {
  "data": {
   "symbols_in_volume": [
    "float",
    "str",
    "typing.Dict"
   ]
  },
  "type": "module"
 },
 "snorkel.labeling.model.label_model.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.Config": {
  "data": {
   "shadows": "snorkel.types.Config"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.LFAnalysis": {
  "data": {
   "shadows": "snorkel.labeling.analysis.LFAnalysis"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.LRSchedulerConfig": {
  "data": {
   "shadows": "snorkel.utils.lr_schedulers.LRSchedulerConfig"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.LabelModel": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "torch.nn.Module"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.model.label_model.LabelModel.__init__": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "snorkel.labeling.model.label_model.LabelModelConfig",
    "snorkel.labeling.model.label_model.torch",
    "super",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._break_col_permutation_symmetry": {
  "data": {
   "lineno": 761,
   "symbols_in_volume": [
    "itertools.permutations",
    "numpy.allclose",
    "numpy.argmax",
    "numpy.eye",
    "range",
    "snorkel.labeling.model.label_model.torch"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._build_mask": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "len",
    "snorkel.labeling.model.label_model.torch"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._clamp_params": {
  "data": {
   "lineno": 713,
   "symbols_in_volume": [
    "min",
    "numpy.ceil",
    "numpy.log10"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._count_accurate_lfs": {
  "data": {
   "lineno": 734,
   "symbols_in_volume": [
    "int",
    "numpy.diagonal",
    "numpy.ndarray",
    "range"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._create_L_ind": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "numpy.ndarray",
    "numpy.where",
    "numpy.zeros",
    "range"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._create_tree": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": [
    "range",
    "snorkel.labeling.model.graph_utils.get_clique_tree"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._execute_logging": {
  "data": {
   "lineno": 577,
   "symbols_in_volume": [
    "float",
    "int",
    "snorkel.labeling.model.label_model.Metrics",
    "snorkel.labeling.model.label_model.torch"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._generate_O": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "bool",
    "numpy.ndarray",
    "snorkel.labeling.model.label_model.torch"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._get_augmented_label_matrix": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "int",
    "isinstance",
    "itertools.chain",
    "list",
    "numpy.copy",
    "numpy.ndarray",
    "range",
    "set",
    "snorkel.labeling.model.label_model._CliqueData",
    "tuple",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._get_conditional_probs": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "numpy.ndarray",
    "numpy.zeros",
    "range"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._init_params": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "int",
    "isinstance",
    "numpy.random.random",
    "range",
    "snorkel.labeling.model.label_model.torch",
    "torch.nn.Parameter"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._loss_l2": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "float",
    "int",
    "isinstance",
    "snorkel.labeling.model.label_model.torch"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._loss_mu": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": [
    "float",
    "snorkel.labeling.model.label_model.torch"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_class_balance": {
  "data": {
   "lineno": 534,
   "symbols_in_volume": [
    "ValueError",
    "collections.Counter",
    "float",
    "len",
    "numpy.any",
    "numpy.array",
    "numpy.ndarray",
    "numpy.ones",
    "numpy.where",
    "snorkel.labeling.model.label_model.torch",
    "sorted",
    "sum",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_constants": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": [
    "ValueError",
    "numpy.ndarray"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_logger": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": [
    "snorkel.labeling.model.logger.Logger"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_lr_scheduler": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": [
    "ValueError",
    "torch.optim.lr_scheduler.ExponentialLR",
    "torch.optim.lr_scheduler.LambdaLR",
    "torch.optim.lr_scheduler.StepLR",
    "torch.optim.lr_scheduler._LRScheduler",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_optimizer": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": [
    "ValueError",
    "filter",
    "torch.optim.Adam",
    "torch.optim.Adamax",
    "torch.optim.Optimizer",
    "torch.optim.SGD"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._set_warmup_scheduler": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "snorkel.labeling.model.label_model.logging",
    "torch.optim.lr_scheduler.LambdaLR",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel._update_lr_scheduler": {
  "data": {
   "lineno": 704,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.fit": {
  "data": {
   "lineno": 803,
   "symbols_in_volume": [
    "Exception",
    "ValueError",
    "float",
    "numpy.ndarray",
    "range",
    "snorkel.labeling.analysis.LFAnalysis",
    "snorkel.labeling.model.label_model.TrainConfig",
    "snorkel.labeling.model.label_model.logging",
    "snorkel.labeling.model.label_model.torch",
    "snorkel.utils.config_utils.merge_config",
    "snorkel.utils.set_seed",
    "typing.Any",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.get_conditional_probs": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "numpy.ndarray"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.get_weights": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "numpy.clip",
    "numpy.diag",
    "numpy.ndarray",
    "numpy.zeros",
    "range"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.load": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": [
    "open",
    "snorkel.labeling.model.label_model.torch",
    "staticmethod",
    "str",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.predict": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "bool",
    "numpy.ndarray",
    "snorkel.utils.probs_to_preds",
    "str",
    "typing.Optional",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.predict_proba": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "numpy.diag",
    "numpy.exp",
    "numpy.log",
    "numpy.ndarray",
    "numpy.ones",
    "numpy.tile"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.save": {
  "data": {
   "lineno": 924,
   "symbols_in_volume": [
    "open",
    "snorkel.labeling.model.label_model.torch",
    "str",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModel.score": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": [
    "float",
    "numpy.ndarray",
    "snorkel.analysis.Scorer",
    "str",
    "typing.Dict",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.label_model.LabelModelConfig": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "bool",
    "snorkel.types.Config",
    "str"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.model.label_model.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.Logger": {
  "data": {
   "shadows": "snorkel.labeling.model.logger.Logger"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.Metrics": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "snorkel.labeling.model.label_model.NamedTuple": {
  "data": {
   "shadows": "typing.NamedTuple"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.OptimizerConfig": {
  "data": {
   "shadows": "snorkel.utils.optimizers.OptimizerConfig"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.Scorer": {
  "data": {
   "shadows": "snorkel.analysis.Scorer"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.TrainConfig": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "float",
    "int",
    "numpy.random.randint",
    "snorkel.types.Config",
    "snorkel.utils.lr_schedulers.LRSchedulerConfig",
    "snorkel.utils.optimizers.OptimizerConfig",
    "str",
    "typing.Optional"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.model.label_model.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model._CliqueData": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "int",
    "typing.NamedTuple",
    "typing.Set"
   ]
  },
  "type": "class"
 },
 "snorkel.labeling.model.label_model.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.get_clique_tree": {
  "data": {
   "shadows": "snorkel.labeling.model.graph_utils.get_clique_tree"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.merge_config": {
  "data": {
   "shadows": "snorkel.utils.config_utils.merge_config"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.optim": {
  "data": {
   "shadows": "torch.optim"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.probs_to_preds": {
  "data": {
   "shadows": "snorkel.utils.probs_to_preds"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.set_seed": {
  "data": {
   "shadows": "snorkel.utils.set_seed"
  },
  "type": "import"
 },
 "snorkel.labeling.model.label_model.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "snorkel.labeling.model.logger": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.model.logger.DefaultDict": {
  "data": {
   "shadows": "typing.DefaultDict"
  },
  "type": "import"
 },
 "snorkel.labeling.model.logger.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.labeling.model.logger.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.labeling.model.logger.Logger": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "snorkel.labeling.model.logger.Logger.__init__": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.logger.Logger.check": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "bool"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.logger.Logger.log": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "Exception",
    "collections.defaultdict",
    "float",
    "isinstance",
    "list",
    "snorkel.labeling.model.logger.logging",
    "str",
    "typing.DefaultDict",
    "typing.Dict",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.model.logger.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.labeling.model.logger.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "snorkel.labeling.model.logger.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "snorkel.labeling.utils": {
  "data": {},
  "type": "module"
 },
 "snorkel.labeling.utils.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.labeling.utils.filter_unlabeled_dataframe": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "numpy.ndarray",
    "pandas.DataFrame",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "snorkel.labeling.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.labeling.utils.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "snorkel.map": {
  "data": {},
  "type": "module"
 },
 "snorkel.map.core": {
  "data": {
   "symbols_in_volume": [
    "snorkel.types.DataPoint",
    "typing.Callable",
    "typing.Optional"
   ]
  },
  "type": "module"
 },
 "snorkel.map.core.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.map.core.BaseMapper": {
  "data": {
   "lineno": 83
  },
  "type": "class"
 },
 "snorkel.map.core.BaseMapper.__call__": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "mapper",
    "snorkel.map.core.get_hashable",
    "snorkel.map.core.pickle",
    "snorkel.types.DataPoint",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.BaseMapper.__init__": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "bool",
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.BaseMapper.__repr__": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.BaseMapper._generate_mapped_data_point": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "NotImplementedError",
    "snorkel.types.DataPoint",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.BaseMapper.reset_cache": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "snorkel.types.DataPoint",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "snorkel.map.core.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "snorkel.map.core.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.map.core.FieldMap": {
  "data": {
   "shadows": "snorkel.types.FieldMap"
  },
  "type": "import"
 },
 "snorkel.map.core.Hashable": {
  "data": {
   "shadows": "collections.Hashable"
  },
  "type": "import"
 },
 "snorkel.map.core.LambdaMapper": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "snorkel.map.core.BaseMapper"
   ]
  },
  "type": "class"
 },
 "snorkel.map.core.LambdaMapper.__init__": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "bool",
    "snorkel.map.core.BaseMapper",
    "snorkel.map.core.MapFunction",
    "str",
    "super",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.LambdaMapper._generate_mapped_data_point": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "snorkel.types.DataPoint",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.map.core.MapFunction": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "snorkel.map.core.Mapper": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "snorkel.map.core.BaseMapper"
   ]
  },
  "type": "class"
 },
 "snorkel.map.core.Mapper.__init__": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "bool",
    "snorkel.map.core.BaseMapper",
    "snorkel.map.core.get_parameters",
    "str",
    "super",
    "typing.List",
    "typing.Mapping",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.Mapper._generate_mapped_data_point": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "getattr",
    "snorkel.types.DataPoint",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.Mapper._update_fields": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "setattr",
    "snorkel.types.DataPoint",
    "snorkel.types.FieldMap"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.Mapper.run": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "NotImplementedError",
    "snorkel.types.FieldMap",
    "typing.Any",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "snorkel.map.core.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.map.core.SimpleNamespace": {
  "data": {
   "shadows": "types.SimpleNamespace"
  },
  "type": "import"
 },
 "snorkel.map.core.get_hashable": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "ValueError",
    "collections.Hashable",
    "dict",
    "frozenset",
    "isinstance",
    "list",
    "numpy.ndarray",
    "pandas.Series",
    "snorkel.map.core.is_hashable",
    "tuple",
    "types.SimpleNamespace",
    "typing.Any",
    "vars"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.get_parameters": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "snorkel.map.core.inspect",
    "str",
    "typing.Any",
    "typing.Callable",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "snorkel.map.core.is_hashable": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "Exception",
    "bool",
    "hash",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.lambda_mapper": {
  "data": {
   "lineno": 307
  },
  "type": "class"
 },
 "snorkel.map.core.lambda_mapper.__call__": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "snorkel.map.core.LambdaMapper",
    "snorkel.map.core.MapFunction"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.lambda_mapper.__init__": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "callable",
    "snorkel.map.core.BaseMapper",
    "str",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.map.core.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.map.core.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "snorkel.map.core.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "snorkel.map.spark": {
  "data": {},
  "type": "module"
 },
 "snorkel.map.spark.FieldMap": {
  "data": {
   "shadows": "snorkel.types.FieldMap"
  },
  "type": "import"
 },
 "snorkel.map.spark.Row": {
  "data": {
   "shadows": "pyspark.sql.Row"
  },
  "type": "import"
 },
 "snorkel.map.spark._update_fields": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "pyspark.sql.Row",
    "snorkel.types.FieldMap"
   ]
  },
  "type": "function"
 },
 "snorkel.map.spark.make_spark_mapper": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "snorkel.map.spark._update_fields"
   ]
  },
  "type": "function"
 },
 "snorkel.preprocess": {
  "data": {},
  "type": "module"
 },
 "snorkel.preprocess.core": {
  "data": {
   "symbols_in_volume": [
    "snorkel.map.BaseMapper"
   ]
  },
  "type": "module"
 },
 "snorkel.preprocess.core.BaseMapper": {
  "data": {
   "shadows": "snorkel.map.BaseMapper"
  },
  "type": "import"
 },
 "snorkel.preprocess.core.BasePreprocessor": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "snorkel.preprocess.core.LambdaMapper": {
  "data": {
   "shadows": "snorkel.map.LambdaMapper"
  },
  "type": "import"
 },
 "snorkel.preprocess.core.LambdaPreprocessor": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "snorkel.map.LambdaMapper"
   ]
  },
  "type": "class"
 },
 "snorkel.preprocess.core.Mapper": {
  "data": {
   "shadows": "snorkel.map.Mapper"
  },
  "type": "import"
 },
 "snorkel.preprocess.core.Preprocessor": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "snorkel.preprocess.core.lambda_mapper": {
  "data": {
   "shadows": "snorkel.map.lambda_mapper"
  },
  "type": "import"
 },
 "snorkel.preprocess.core.preprocessor": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper"
   ]
  },
  "type": "class"
 },
 "snorkel.preprocess.nlp": {
  "data": {},
  "type": "module"
 },
 "snorkel.preprocess.nlp.EN_CORE_WEB_SM": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "snorkel.preprocess.nlp.FieldMap": {
  "data": {
   "shadows": "snorkel.types.FieldMap"
  },
  "type": "import"
 },
 "snorkel.preprocess.nlp.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.preprocess.nlp.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.preprocess.nlp.SpacyPreprocessor": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "snorkel.preprocess.nlp.SpacyPreprocessor.__init__": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "bool",
    "dict",
    "snorkel.preprocess.nlp.EN_CORE_WEB_SM",
    "snorkel.preprocess.nlp.spacy",
    "str",
    "super",
    "type",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.preprocess.nlp.SpacyPreprocessor.run": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "dict",
    "snorkel.types.FieldMap",
    "str"
   ]
  },
  "type": "function"
 },
 "snorkel.preprocess.nlp.spacy": {
  "data": {
   "shadows": "spacy"
  },
  "type": "import"
 },
 "snorkel.preprocess.spark": {
  "data": {},
  "type": "module"
 },
 "snorkel.preprocess.spark.make_spark_preprocessor": {
  "data": {
   "shadows": "snorkel.map.spark.make_spark_mapper"
  },
  "type": "import"
 },
 "snorkel.slicing": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.apply": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.apply.core": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.apply.core.LFApplier": {
  "data": {
   "shadows": "snorkel.labeling.LFApplier"
  },
  "type": "import"
 },
 "snorkel.slicing.apply.core.PandasLFApplier": {
  "data": {
   "shadows": "snorkel.labeling.PandasLFApplier"
  },
  "type": "import"
 },
 "snorkel.slicing.apply.core.PandasSFApplier": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "snorkel.labeling.PandasLFApplier"
   ]
  },
  "type": "class"
 },
 "snorkel.slicing.apply.core.SFApplier": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "snorkel.labeling.LFApplier"
   ]
  },
  "type": "class"
 },
 "snorkel.slicing.apply.dask": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.apply.dask.DaskLFApplier": {
  "data": {
   "shadows": "snorkel.labeling.apply.dask.DaskLFApplier"
  },
  "type": "import"
 },
 "snorkel.slicing.apply.dask.DaskSFApplier": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "snorkel.labeling.apply.dask.DaskLFApplier"
   ]
  },
  "type": "class"
 },
 "snorkel.slicing.apply.dask.PandasParallelLFApplier": {
  "data": {
   "shadows": "snorkel.labeling.apply.dask.PandasParallelLFApplier"
  },
  "type": "import"
 },
 "snorkel.slicing.apply.dask.PandasParallelSFApplier": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "snorkel.labeling.apply.dask.PandasParallelLFApplier"
   ]
  },
  "type": "class"
 },
 "snorkel.slicing.apply.spark": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.apply.spark.SparkSFApplier": {
  "data": {
   "shadows": "snorkel.labeling.apply.spark.SparkLFApplier"
  },
  "type": "import"
 },
 "snorkel.slicing.modules": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.modules.slice_combiner": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.modules.slice_combiner.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.slicing.modules.slice_combiner.F": {
  "data": {
   "shadows": "torch.nn.functional"
  },
  "type": "import"
 },
 "snorkel.slicing.modules.slice_combiner.SliceCombinerModule": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "torch.nn.Module"
   ]
  },
  "type": "class"
 },
 "snorkel.slicing.modules.slice_combiner.SliceCombinerModule.__init__": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "float",
    "str",
    "super"
   ]
  },
  "type": "function"
 },
 "snorkel.slicing.modules.slice_combiner.SliceCombinerModule.forward": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "NotImplementedError",
    "snorkel.classification.utils.collect_flow_outputs_by_suffix",
    "snorkel.slicing.modules.slice_combiner.torch",
    "str",
    "torch.nn.functional.softmax",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "snorkel.slicing.modules.slice_combiner.collect_flow_outputs_by_suffix": {
  "data": {
   "shadows": "snorkel.classification.utils.collect_flow_outputs_by_suffix"
  },
  "type": "import"
 },
 "snorkel.slicing.modules.slice_combiner.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "snorkel.slicing.modules.slice_combiner.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "snorkel.slicing.monitor": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.monitor.PandasSFApplier": {
  "data": {
   "shadows": "snorkel.slicing.PandasSFApplier"
  },
  "type": "import"
 },
 "snorkel.slicing.monitor.SlicingFunction": {
  "data": {
   "shadows": "snorkel.slicing.sf.SlicingFunction"
  },
  "type": "import"
 },
 "snorkel.slicing.monitor.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.slicing.monitor.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "snorkel.slicing.monitor.slice_dataframe": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "numpy.where",
    "pandas.DataFrame",
    "snorkel.slicing.PandasSFApplier",
    "snorkel.slicing.sf.SlicingFunction"
   ]
  },
  "type": "function"
 },
 "snorkel.slicing.sf": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.sf.core": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.sf.core.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.slicing.sf.core.BasePreprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.BasePreprocessor"
  },
  "type": "import"
 },
 "snorkel.slicing.sf.core.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "snorkel.slicing.sf.core.LabelingFunction": {
  "data": {
   "shadows": "snorkel.labeling.lf.LabelingFunction"
  },
  "type": "import"
 },
 "snorkel.slicing.sf.core.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.slicing.sf.core.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "snorkel.slicing.sf.core.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.slicing.sf.core.SlicingFunction": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "snorkel.labeling.lf.LabelingFunction"
   ]
  },
  "type": "class"
 },
 "snorkel.slicing.sf.core.slicing_function": {
  "data": {
   "lineno": 16
  },
  "type": "class"
 },
 "snorkel.slicing.sf.core.slicing_function.__call__": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "int",
    "snorkel.slicing.sf.core.SlicingFunction",
    "typing.Callable"
   ]
  },
  "type": "function"
 },
 "snorkel.slicing.sf.core.slicing_function.__init__": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "callable",
    "snorkel.preprocess.BasePreprocessor",
    "str",
    "typing.Any",
    "typing.List",
    "typing.Mapping",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "snorkel.slicing.sf.nlp": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.sf.nlp.BaseNLPLabelingFunction": {
  "data": {
   "shadows": "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction"
  },
  "type": "import"
 },
 "snorkel.slicing.sf.nlp.NLPSlicingFunction": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "snorkel.labeling.lf.nlp.BaseNLPLabelingFunction"
   ]
  },
  "type": "class"
 },
 "snorkel.slicing.sf.nlp.NLPSlicingFunction._create_preprocessor": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "classmethod",
    "snorkel.labeling.lf.nlp.SpacyPreprocessorParameters",
    "snorkel.preprocess.nlp.SpacyPreprocessor"
   ]
  },
  "type": "function"
 },
 "snorkel.slicing.sf.nlp.SpacyPreprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.nlp.SpacyPreprocessor"
  },
  "type": "import"
 },
 "snorkel.slicing.sf.nlp.SpacyPreprocessorParameters": {
  "data": {
   "shadows": "snorkel.labeling.lf.nlp.SpacyPreprocessorParameters"
  },
  "type": "import"
 },
 "snorkel.slicing.sf.nlp.base_nlp_labeling_function": {
  "data": {
   "shadows": "snorkel.labeling.lf.nlp.base_nlp_labeling_function"
  },
  "type": "import"
 },
 "snorkel.slicing.sf.nlp.nlp_slicing_function": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "snorkel.labeling.lf.nlp.base_nlp_labeling_function",
    "snorkel.slicing.sf.nlp.NLPSlicingFunction"
   ]
  },
  "type": "class"
 },
 "snorkel.slicing.sliceaware_classifier": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.sliceaware_classifier.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.DEFAULT_INPUT_DATA_KEY": {
  "data": {
   "shadows": "snorkel.classification.data.DEFAULT_INPUT_DATA_KEY"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.DEFAULT_TASK_NAME": {
  "data": {
   "shadows": "snorkel.classification.data.DEFAULT_TASK_NAME"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.DictDataLoader"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.DictDataset": {
  "data": {
   "shadows": "snorkel.classification.DictDataset"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.MultitaskClassifier": {
  "data": {
   "shadows": "snorkel.classification.multitask_classifier.MultitaskClassifier"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.Operation": {
  "data": {
   "shadows": "snorkel.classification.Operation"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.Scorer": {
  "data": {
   "shadows": "snorkel.analysis.Scorer"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.SliceAwareClassifier": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "snorkel.classification.multitask_classifier.MultitaskClassifier"
   ]
  },
  "type": "class"
 },
 "snorkel.slicing.sliceaware_classifier.SliceAwareClassifier.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "convert_to_slice_tasks",
    "int",
    "snorkel.analysis.Scorer",
    "snorkel.classification.Operation",
    "snorkel.classification.Task",
    "snorkel.classification.data.DEFAULT_INPUT_DATA_KEY",
    "snorkel.classification.data.DEFAULT_TASK_NAME",
    "str",
    "super",
    "torch.nn.Linear",
    "torch.nn.Module",
    "torch.nn.ModuleDict",
    "typing.Any",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.slicing.sliceaware_classifier.SliceAwareClassifier.make_slice_dataloader": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "ValueError",
    "add_slice_labels",
    "numpy.recarray",
    "snorkel.classification.DictDataLoader",
    "snorkel.classification.DictDataset",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "snorkel.slicing.sliceaware_classifier.SliceAwareClassifier.score_slices": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "bool",
    "float",
    "pandas.DataFrame",
    "set",
    "snorkel.classification.DictDataLoader",
    "snorkel.slicing.sliceaware_classifier.torch",
    "str",
    "super",
    "typing.Dict",
    "typing.List",
    "typing.Optional",
    "typing.Set",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "snorkel.slicing.sliceaware_classifier.Task": {
  "data": {
   "shadows": "snorkel.classification.Task"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "snorkel.slicing.sliceaware_classifier.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "snorkel.slicing.utils": {
  "data": {},
  "type": "module"
 },
 "snorkel.slicing.utils.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.slicing.utils.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.data.DictDataLoader"
  },
  "type": "import"
 },
 "snorkel.slicing.utils.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.slicing.utils.Operation": {
  "data": {
   "shadows": "snorkel.classification.multitask_classifier.Operation"
  },
  "type": "import"
 },
 "snorkel.slicing.utils.Scorer": {
  "data": {
   "shadows": "snorkel.analysis.Scorer"
  },
  "type": "import"
 },
 "snorkel.slicing.utils.Task": {
  "data": {
   "shadows": "snorkel.classification.multitask_classifier.Task"
  },
  "type": "import"
 },
 "snorkel.slicing.utils.add_slice_labels": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "numpy.lib.recfunctions.append_fields",
    "numpy.ndarray",
    "numpy.ones",
    "numpy.recarray",
    "snorkel.classification.data.DictDataLoader",
    "snorkel.classification.multitask_classifier.Task",
    "snorkel.slicing.utils.torch",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "snorkel.slicing.utils.convert_to_slice_tasks": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "SliceCombinerModule",
    "isinstance",
    "list",
    "snorkel.analysis.Scorer",
    "snorkel.classification.multitask_classifier.Operation",
    "snorkel.classification.multitask_classifier.Task",
    "str",
    "torch.nn.DataParallel",
    "torch.nn.Linear",
    "torch.nn.ModuleDict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.slicing.utils.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "snorkel.slicing.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.slicing.utils.rfn": {
  "data": {
   "shadows": "numpy.lib.recfunctions"
  },
  "type": "import"
 },
 "snorkel.slicing.utils.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "snorkel.synthetic": {
  "data": {},
  "type": "module"
 },
 "snorkel.synthetic.synthetic_data": {
  "data": {},
  "type": "module"
 },
 "snorkel.synthetic.synthetic_data.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.synthetic.synthetic_data.generate_simple_label_matrix": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "float",
    "int",
    "numpy.diag",
    "numpy.empty",
    "numpy.eye",
    "numpy.ndarray",
    "numpy.random.choice",
    "numpy.random.rand",
    "range",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "snorkel.synthetic.synthetic_data.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.types": {
  "data": {},
  "type": "module"
 },
 "snorkel.types.classifier": {
  "data": {
   "symbols_in_volume": [
    "typing.NamedTuple"
   ]
  },
  "type": "module"
 },
 "snorkel.types.classifier.Config": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "snorkel.types.classifier.NamedTuple": {
  "data": {
   "shadows": "typing.NamedTuple"
  },
  "type": "import"
 },
 "snorkel.types.data": {
  "data": {
   "symbols_in_volume": [
    "snorkel.types.data.DataPoint",
    "snorkel.types.data.Field",
    "str",
    "typing.Any",
    "typing.Mapping",
    "typing.Sequence"
   ]
  },
  "type": "module"
 },
 "snorkel.types.data.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.types.data.DataPoint": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "snorkel.types.data.DataPoints": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "snorkel.types.data.Field": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "snorkel.types.data.FieldMap": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "snorkel.types.data.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "snorkel.types.data.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "snorkel.utils": {
  "data": {},
  "type": "module"
 },
 "snorkel.utils.config_utils": {
  "data": {},
  "type": "module"
 },
 "snorkel.utils.config_utils.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "snorkel.utils.config_utils.Config": {
  "data": {
   "shadows": "snorkel.types.Config"
  },
  "type": "import"
 },
 "snorkel.utils.config_utils.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.utils.config_utils.merge_config": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "dict",
    "getattr",
    "isinstance",
    "snorkel.types.Config",
    "str",
    "typing.Any",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "snorkel.utils.core": {
  "data": {},
  "type": "module"
 },
 "snorkel.utils.core.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "snorkel.utils.core.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.utils.core._get_mask": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "bool",
    "int",
    "numpy.ndarray",
    "numpy.ones_like",
    "numpy.where",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.utils.core._hash": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "int",
    "snorkel.utils.core.hashlib",
    "str"
   ]
  },
  "type": "function"
 },
 "snorkel.utils.core.filter_labels": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "_get_mask",
    "int",
    "len",
    "numpy.multiply",
    "numpy.ndarray",
    "str",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.utils.core.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "snorkel.utils.core.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "snorkel.utils.core.preds_to_probs": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "numpy.any",
    "numpy.eye",
    "numpy.ndarray"
   ]
  },
  "type": "function"
 },
 "snorkel.utils.core.probs_to_preds": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "len",
    "numpy.abs",
    "numpy.empty",
    "numpy.int",
    "numpy.ndarray",
    "numpy.random.choice",
    "numpy.where",
    "range",
    "snorkel.utils.core._hash",
    "str"
   ]
  },
  "type": "function"
 },
 "snorkel.utils.core.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "snorkel.utils.core.set_seed": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "int",
    "numpy.random.seed",
    "snorkel.utils.core.random",
    "snorkel.utils.core.torch"
   ]
  },
  "type": "function"
 },
 "snorkel.utils.core.to_int_label_array": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "int",
    "numpy.any",
    "numpy.dtype",
    "numpy.mod",
    "numpy.ndarray",
    "numpy.not_equal"
   ]
  },
  "type": "function"
 },
 "snorkel.utils.core.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "snorkel.utils.data_operators": {
  "data": {},
  "type": "module"
 },
 "snorkel.utils.data_operators.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "snorkel.utils.data_operators.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "snorkel.utils.data_operators.check_unique_names": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "ValueError",
    "collections.Counter",
    "str",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "snorkel.utils.lr_schedulers": {
  "data": {},
  "type": "module"
 },
 "snorkel.utils.lr_schedulers.Config": {
  "data": {
   "shadows": "snorkel.types.Config"
  },
  "type": "import"
 },
 "snorkel.utils.lr_schedulers.ExponentialLRSchedulerConfig": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "float",
    "snorkel.types.Config"
   ]
  },
  "type": "class"
 },
 "snorkel.utils.lr_schedulers.LRSchedulerConfig": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "float",
    "snorkel.types.Config",
    "snorkel.utils.lr_schedulers.ExponentialLRSchedulerConfig",
    "snorkel.utils.lr_schedulers.StepLRSchedulerConfig",
    "str"
   ]
  },
  "type": "class"
 },
 "snorkel.utils.lr_schedulers.StepLRSchedulerConfig": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "float",
    "int",
    "snorkel.types.Config"
   ]
  },
  "type": "class"
 },
 "snorkel.utils.optimizers": {
  "data": {},
  "type": "module"
 },
 "snorkel.utils.optimizers.AdamOptimizerConfig": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "bool",
    "float",
    "snorkel.types.Config",
    "typing.Tuple"
   ]
  },
  "type": "class"
 },
 "snorkel.utils.optimizers.AdamaxOptimizerConfig": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "float",
    "snorkel.types.Config",
    "typing.Tuple"
   ]
  },
  "type": "class"
 },
 "snorkel.utils.optimizers.Config": {
  "data": {
   "shadows": "snorkel.types.Config"
  },
  "type": "import"
 },
 "snorkel.utils.optimizers.OptimizerConfig": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "snorkel.types.Config",
    "snorkel.utils.optimizers.AdamOptimizerConfig",
    "snorkel.utils.optimizers.AdamaxOptimizerConfig",
    "snorkel.utils.optimizers.SGDOptimizerConfig"
   ]
  },
  "type": "class"
 },
 "snorkel.utils.optimizers.SGDOptimizerConfig": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "float",
    "snorkel.types.Config"
   ]
  },
  "type": "class"
 },
 "snorkel.utils.optimizers.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "snorkel.version": {
  "data": {
   "symbols_in_volume": [
    "snorkel.version._MAJOR",
    "snorkel.version._MINOR",
    "snorkel.version._REVISION"
   ]
  },
  "type": "module"
 },
 "snorkel.version.VERSION": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "snorkel.version.VERSION_SHORT": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "snorkel.version._MAJOR": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "snorkel.version._MINOR": {
  "data": {
   "lineno": 2
  },
  "type": "constant"
 },
 "snorkel.version._REVISION": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "test": {
  "data": {},
  "type": "module"
 },
 "test.augmentation": {
  "data": {},
  "type": "module"
 },
 "test.augmentation.apply": {
  "data": {},
  "type": "module"
 },
 "test.augmentation.apply.test_tf_applier": {
  "data": {
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "module"
 },
 "test.augmentation.apply.test_tf_applier.ApplyOnePolicy": {
  "data": {
   "shadows": "snorkel.augmentation.ApplyOnePolicy"
  },
  "type": "import"
 },
 "test.augmentation.apply.test_tf_applier.DATA": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "test.augmentation.apply.test_tf_applier.DATA_IN_PLACE_EXPECTED": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "test.augmentation.apply.test_tf_applier.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "test.augmentation.apply.test_tf_applier.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "test.augmentation.apply.test_tf_applier.PandasTFApplier": {
  "data": {
   "shadows": "snorkel.augmentation.PandasTFApplier"
  },
  "type": "import"
 },
 "test.augmentation.apply.test_tf_applier.RandomPolicy": {
  "data": {
   "shadows": "snorkel.augmentation.RandomPolicy"
  },
  "type": "import"
 },
 "test.augmentation.apply.test_tf_applier.STR_DATA": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "test.augmentation.apply.test_tf_applier.SimpleNamespace": {
  "data": {
   "shadows": "types.SimpleNamespace"
  },
  "type": "import"
 },
 "test.augmentation.apply.test_tf_applier.TFApplier": {
  "data": {
   "shadows": "snorkel.augmentation.TFApplier"
  },
  "type": "import"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "test.augmentation.apply.test_tf_applier.unittest"
   ]
  },
  "type": "class"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier._get_x_df": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "dict",
    "pandas.DataFrame",
    "test.augmentation.apply.test_tf_applier.DATA"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier._get_x_df_dict": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "dict",
    "pandas.DataFrame",
    "test.augmentation.apply.test_tf_applier.get_data_dict"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier._get_x_df_with_str": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "dict",
    "pandas.DataFrame",
    "test.augmentation.apply.test_tf_applier.DATA",
    "test.augmentation.apply.test_tf_applier.STR_DATA"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "dict",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal",
    "snorkel.augmentation.PandasTFApplier",
    "snorkel.augmentation.RandomPolicy",
    "test.augmentation.apply.test_tf_applier.STR_DATA",
    "test.augmentation.apply.test_tf_applier.square"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas_generator": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal",
    "snorkel.augmentation.PandasTFApplier",
    "snorkel.augmentation.RandomPolicy",
    "test.augmentation.apply.test_tf_applier.square",
    "zip"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas_keep_original": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "dict",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal",
    "snorkel.augmentation.PandasTFApplier",
    "snorkel.augmentation.RandomPolicy",
    "test.augmentation.apply.test_tf_applier.square"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas_keep_original_generator": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "pandas.testing.assert_frame_equal",
    "snorkel.augmentation.PandasTFApplier",
    "snorkel.augmentation.RandomPolicy",
    "test.augmentation.apply.test_tf_applier.make_df",
    "test.augmentation.apply.test_tf_applier.square",
    "zip"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas_modify_in_place": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "dict",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal",
    "snorkel.augmentation.ApplyOnePolicy",
    "snorkel.augmentation.PandasTFApplier",
    "test.augmentation.apply.test_tf_applier.DATA_IN_PLACE_EXPECTED",
    "test.augmentation.apply.test_tf_applier.get_data_dict",
    "test.augmentation.apply.test_tf_applier.modify_in_place"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_pandas_modify_in_place_generator": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "pandas.testing.assert_frame_equal",
    "snorkel.augmentation.ApplyOnePolicy",
    "snorkel.augmentation.PandasTFApplier",
    "test.augmentation.apply.test_tf_applier.DATA_IN_PLACE_EXPECTED",
    "test.augmentation.apply.test_tf_applier.get_data_dict",
    "test.augmentation.apply.test_tf_applier.make_df",
    "test.augmentation.apply.test_tf_applier.modify_in_place",
    "zip"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_returns_none": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "dict",
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal",
    "snorkel.augmentation.PandasTFApplier",
    "snorkel.augmentation.RandomPolicy",
    "test.augmentation.apply.test_tf_applier.square_returns_none"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestPandasTFApplier.test_tf_applier_returns_none_generator": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "pandas.testing.assert_frame_equal",
    "snorkel.augmentation.PandasTFApplier",
    "snorkel.augmentation.RandomPolicy",
    "test.augmentation.apply.test_tf_applier.make_df",
    "test.augmentation.apply.test_tf_applier.square_returns_none",
    "zip"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "test.augmentation.apply.test_tf_applier.unittest"
   ]
  },
  "type": "class"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier._get_x_namespace": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "int",
    "test.augmentation.apply.test_tf_applier.DATA",
    "types.SimpleNamespace",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier._get_x_namespace_dict": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "int",
    "test.augmentation.apply.test_tf_applier.DATA",
    "test.augmentation.apply.test_tf_applier.get_data_dict",
    "types.SimpleNamespace",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "snorkel.augmentation.RandomPolicy",
    "snorkel.augmentation.TFApplier",
    "test.augmentation.apply.test_tf_applier.square"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_generator": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "snorkel.augmentation.RandomPolicy",
    "snorkel.augmentation.TFApplier",
    "test.augmentation.apply.test_tf_applier.square",
    "zip"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_keep_original": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "snorkel.augmentation.RandomPolicy",
    "snorkel.augmentation.TFApplier",
    "test.augmentation.apply.test_tf_applier.square"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_keep_original_generator": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "snorkel.augmentation.RandomPolicy",
    "snorkel.augmentation.TFApplier",
    "test.augmentation.apply.test_tf_applier.square",
    "zip"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_keep_original_modify_in_place": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "snorkel.augmentation.ApplyOnePolicy",
    "snorkel.augmentation.TFApplier",
    "test.augmentation.apply.test_tf_applier.DATA_IN_PLACE_EXPECTED",
    "test.augmentation.apply.test_tf_applier.modify_in_place"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_keep_original_modify_in_place_generator": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "snorkel.augmentation.ApplyOnePolicy",
    "snorkel.augmentation.TFApplier",
    "test.augmentation.apply.test_tf_applier.DATA_IN_PLACE_EXPECTED",
    "test.augmentation.apply.test_tf_applier.modify_in_place",
    "zip"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_returns_none": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "snorkel.augmentation.RandomPolicy",
    "snorkel.augmentation.TFApplier",
    "test.augmentation.apply.test_tf_applier.square_returns_none"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.TestTFApplier.test_tf_applier_returns_none_generator": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "snorkel.augmentation.RandomPolicy",
    "snorkel.augmentation.TFApplier",
    "test.augmentation.apply.test_tf_applier.square_returns_none",
    "zip"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.get_data_dict": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "dict",
    "int",
    "test.augmentation.apply.test_tf_applier.DATA",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.make_df": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "list",
    "pandas.DataFrame",
    "str"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.modify_in_place": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "snorkel.augmentation.transformation_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.augmentation.apply.test_tf_applier.square": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "snorkel.augmentation.transformation_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.square_returns_none": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "snorkel.augmentation.transformation_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.augmentation.apply.test_tf_applier.transformation_function": {
  "data": {
   "shadows": "snorkel.augmentation.transformation_function"
  },
  "type": "import"
 },
 "test.augmentation.apply.test_tf_applier.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.augmentation.policy": {
  "data": {},
  "type": "module"
 },
 "test.augmentation.policy.test_core": {
  "data": {},
  "type": "module"
 },
 "test.augmentation.policy.test_core.ApplyAllPolicy": {
  "data": {
   "shadows": "snorkel.augmentation.ApplyAllPolicy"
  },
  "type": "import"
 },
 "test.augmentation.policy.test_core.ApplyEachPolicy": {
  "data": {
   "shadows": "snorkel.augmentation.ApplyEachPolicy"
  },
  "type": "import"
 },
 "test.augmentation.policy.test_core.TestPolicy": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "test.augmentation.policy.test_core.unittest"
   ]
  },
  "type": "class"
 },
 "test.augmentation.policy.test_core.TestPolicy.test_apply_all_policy": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "snorkel.augmentation.ApplyAllPolicy"
   ]
  },
  "type": "function"
 },
 "test.augmentation.policy.test_core.TestPolicy.test_apply_each_policy": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "snorkel.augmentation.ApplyEachPolicy"
   ]
  },
  "type": "function"
 },
 "test.augmentation.policy.test_core.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.augmentation.policy.test_sampling": {
  "data": {},
  "type": "module"
 },
 "test.augmentation.policy.test_sampling.MeanFieldPolicy": {
  "data": {
   "shadows": "snorkel.augmentation.MeanFieldPolicy"
  },
  "type": "import"
 },
 "test.augmentation.policy.test_sampling.RandomPolicy": {
  "data": {
   "shadows": "snorkel.augmentation.RandomPolicy"
  },
  "type": "import"
 },
 "test.augmentation.policy.test_sampling.TestSamplingPolicy": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "test.augmentation.policy.test_sampling.unittest"
   ]
  },
  "type": "class"
 },
 "test.augmentation.policy.test_sampling.TestSamplingPolicy.test_mean_field_policy": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "range",
    "snorkel.augmentation.MeanFieldPolicy"
   ]
  },
  "type": "function"
 },
 "test.augmentation.policy.test_sampling.TestSamplingPolicy.test_random_policy": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "range",
    "snorkel.augmentation.RandomPolicy"
   ]
  },
  "type": "function"
 },
 "test.augmentation.policy.test_sampling.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.classification": {
  "data": {},
  "type": "module"
 },
 "test.classification.test_classifier_convergence": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.classification.test_classifier_convergence.unittest"
   ]
  },
  "type": "module"
 },
 "test.classification.test_classifier_convergence.ClassifierConvergenceTest": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "test.classification.test_classifier_convergence.unittest"
   ]
  },
  "type": "class"
 },
 "test.classification.test_classifier_convergence.ClassifierConvergenceTest.setUpClass": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "classmethod",
    "snorkel.utils.set_seed"
   ]
  },
  "type": "function"
 },
 "test.classification.test_classifier_convergence.ClassifierConvergenceTest.test_convergence": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "create_data",
    "create_dataloader",
    "create_task",
    "enumerate",
    "snorkel.classification.MultitaskClassifier",
    "snorkel.classification.Trainer",
    "test.classification.test_classifier_convergence.N_TRAIN",
    "test.classification.test_classifier_convergence.N_VALID",
    "test.classification.test_classifier_convergence.pytest",
    "zip"
   ]
  },
  "type": "function"
 },
 "test.classification.test_classifier_convergence.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.DictDataLoader"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.DictDataset": {
  "data": {
   "shadows": "snorkel.classification.DictDataset"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.MultitaskClassifier": {
  "data": {
   "shadows": "snorkel.classification.MultitaskClassifier"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.N_TRAIN": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "test.classification.test_classifier_convergence.N_VALID": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "test.classification.test_classifier_convergence.Operation": {
  "data": {
   "shadows": "snorkel.classification.Operation"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.Scorer": {
  "data": {
   "shadows": "snorkel.analysis.Scorer"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.Task": {
  "data": {
   "shadows": "snorkel.classification.Task"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.Trainer": {
  "data": {
   "shadows": "snorkel.classification.Trainer"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.create_data": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "int",
    "numpy.random.random",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "test.classification.test_classifier_convergence.create_dataloader": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "pandas.DataFrame",
    "snorkel.classification.DictDataLoader",
    "snorkel.classification.DictDataset",
    "str",
    "test.classification.test_classifier_convergence.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_classifier_convergence.create_task": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "snorkel.analysis.Scorer",
    "snorkel.classification.Operation",
    "snorkel.classification.Task",
    "str",
    "torch.nn.Linear",
    "torch.nn.ModuleDict",
    "torch.nn.ReLU",
    "torch.nn.Sequential",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "test.classification.test_classifier_convergence.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.set_seed": {
  "data": {
   "shadows": "snorkel.utils.set_seed"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "test.classification.test_classifier_convergence.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.classification.test_data": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.classification.test_data.unittest"
   ]
  },
  "type": "module"
 },
 "test.classification.test_data.DEFAULT_DATASET_NAME": {
  "data": {
   "shadows": "snorkel.classification.data.DEFAULT_DATASET_NAME"
  },
  "type": "import"
 },
 "test.classification.test_data.DEFAULT_INPUT_DATA_KEY": {
  "data": {
   "shadows": "snorkel.classification.data.DEFAULT_INPUT_DATA_KEY"
  },
  "type": "import"
 },
 "test.classification.test_data.DEFAULT_TASK_NAME": {
  "data": {
   "shadows": "snorkel.classification.data.DEFAULT_TASK_NAME"
  },
  "type": "import"
 },
 "test.classification.test_data.DatasetTest": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "test.classification.test_data.unittest"
   ]
  },
  "type": "class"
 },
 "test.classification.test_data.DatasetTest.test_classifier_dataloader": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "iter",
    "next",
    "snorkel.classification.DictDataLoader",
    "snorkel.classification.DictDataset",
    "test.classification.test_data.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_data.DatasetTest.test_classifier_dataset": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "repr",
    "snorkel.classification.DictDataset",
    "snorkel.classification.DictDataset.from_tensors",
    "snorkel.classification.data.DEFAULT_DATASET_NAME",
    "snorkel.classification.data.DEFAULT_INPUT_DATA_KEY",
    "snorkel.classification.data.DEFAULT_TASK_NAME",
    "test.classification.test_data.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_data.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.DictDataLoader"
  },
  "type": "import"
 },
 "test.classification.test_data.DictDataset": {
  "data": {
   "shadows": "snorkel.classification.DictDataset"
  },
  "type": "import"
 },
 "test.classification.test_data.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "test.classification.test_data.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.classification.test_loss": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.classification.test_loss.unittest"
   ]
  },
  "type": "module"
 },
 "test.classification.test_loss.F": {
  "data": {
   "shadows": "torch.nn.functional"
  },
  "type": "import"
 },
 "test.classification.test_loss.SoftCrossEntropyTest": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "test.classification.test_loss.unittest"
   ]
  },
  "type": "class"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_equal_loss": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "snorkel.classification.cross_entropy_with_probs",
    "test.classification.test_loss.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_invalid_reduction": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "ValueError",
    "snorkel.classification.cross_entropy_with_probs",
    "snorkel.utils.preds_to_probs",
    "test.classification.test_loss.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_loss_weights": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "snorkel.classification.cross_entropy_with_probs",
    "snorkel.utils.preds_to_probs",
    "test.classification.test_loss.torch",
    "torch.nn.functional.cross_entropy"
   ]
  },
  "type": "function"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_lower_loss": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "snorkel.classification.cross_entropy_with_probs",
    "test.classification.test_loss.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_perfect_predictions": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "numpy.testing.assert_equal",
    "snorkel.classification.cross_entropy_with_probs",
    "snorkel.utils.preds_to_probs",
    "test.classification.test_loss.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_loss.SoftCrossEntropyTest.test_sce_equals_ce": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "numpy.testing.assert_equal",
    "snorkel.classification.cross_entropy_with_probs",
    "snorkel.utils.preds_to_probs",
    "test.classification.test_loss.torch",
    "torch.nn.functional.cross_entropy"
   ]
  },
  "type": "function"
 },
 "test.classification.test_loss.cross_entropy_with_probs": {
  "data": {
   "shadows": "snorkel.classification.cross_entropy_with_probs"
  },
  "type": "import"
 },
 "test.classification.test_loss.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.classification.test_loss.preds_to_probs": {
  "data": {
   "shadows": "snorkel.utils.preds_to_probs"
  },
  "type": "import"
 },
 "test.classification.test_loss.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "test.classification.test_loss.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.classification.test_multitask_classifier.unittest"
   ]
  },
  "type": "module"
 },
 "test.classification.test_multitask_classifier.BATCH_SIZE": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "test.classification.test_multitask_classifier.ClassifierTest": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "test.classification.test_multitask_classifier.unittest"
   ]
  },
  "type": "class"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.setUp": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "snorkel.utils.set_seed"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.setUpClass": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "classmethod",
    "create_dataloader",
    "create_task"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_bad_tasks": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "ValueError",
    "create_task",
    "snorkel.classification.MultitaskClassifier"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_empty_batch": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "create_dataloader",
    "snorkel.classification.MultitaskClassifier",
    "test.classification.test_multitask_classifier.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_no_data_parallel": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "len",
    "snorkel.classification.MultitaskClassifier",
    "torch.nn.Module"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_no_input_spec": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "create_dataloader",
    "snorkel.classification.MultitaskClassifier",
    "snorkel.classification.Operation",
    "snorkel.classification.Task",
    "torch.nn.Identity",
    "torch.nn.ModuleDict"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_onetask_model": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "len",
    "snorkel.classification.MultitaskClassifier"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_partially_empty_batch": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "create_dataloader",
    "snorkel.classification.MultitaskClassifier"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_predict": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "list",
    "numpy.array",
    "numpy.ones",
    "numpy.testing.assert_array_equal",
    "snorkel.classification.MultitaskClassifier",
    "sorted",
    "test.classification.test_multitask_classifier.NUM_EXAMPLES"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_remapped_labels": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "range",
    "snorkel.classification.DictDataLoader",
    "snorkel.classification.DictDataset",
    "snorkel.classification.MultitaskClassifier",
    "test.classification.test_multitask_classifier.BATCH_SIZE",
    "test.classification.test_multitask_classifier.NUM_EXAMPLES",
    "test.classification.test_multitask_classifier.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_save_load": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "create_task",
    "snorkel.classification.MultitaskClassifier",
    "test.classification.test_multitask_classifier.os",
    "test.classification.test_multitask_classifier.tempfile",
    "test.classification.test_multitask_classifier.torch",
    "torch.nn.Linear"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_score": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "isinstance",
    "pandas.DataFrame",
    "snorkel.classification.MultitaskClassifier"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_score_shuffled": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "SimpleVoter",
    "len",
    "range",
    "snorkel.classification.DictDataLoader",
    "snorkel.classification.DictDataset",
    "snorkel.classification.MultitaskClassifier",
    "snorkel.classification.Operation",
    "snorkel.classification.Task",
    "test.classification.test_multitask_classifier.torch",
    "torch.nn.ModuleDict"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_score_shuffled.SimpleVoter": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "torch.nn.Module"
   ]
  },
  "type": "class"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_score_shuffled.SimpleVoter.forward": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "test.classification.test_multitask_classifier.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_twotask_all_overlap_model": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "create_task",
    "len",
    "snorkel.classification.MultitaskClassifier"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_twotask_none_overlap_model": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "len",
    "snorkel.classification.MultitaskClassifier"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.ClassifierTest.test_twotask_partial_overlap_model": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "create_task",
    "len",
    "snorkel.classification.MultitaskClassifier"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.DictDataLoader"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.DictDataset": {
  "data": {
   "shadows": "snorkel.classification.DictDataset"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.MultitaskClassifier": {
  "data": {
   "shadows": "snorkel.classification.MultitaskClassifier"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.NUM_EXAMPLES": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "test.classification.test_multitask_classifier.Operation": {
  "data": {
   "shadows": "snorkel.classification.Operation"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.Task": {
  "data": {
   "shadows": "snorkel.classification.Task"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.create_dataloader": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "range",
    "snorkel.classification.DictDataLoader",
    "snorkel.classification.DictDataset",
    "test.classification.test_multitask_classifier.BATCH_SIZE",
    "test.classification.test_multitask_classifier.NUM_EXAMPLES",
    "test.classification.test_multitask_classifier.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.create_task": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "snorkel.classification.Operation",
    "snorkel.classification.Task",
    "test.classification.test_multitask_classifier.torch",
    "torch.nn.Linear",
    "torch.nn.ModuleDict",
    "torch.nn.ReLU",
    "torch.nn.Sequential"
   ]
  },
  "type": "function"
 },
 "test.classification.test_multitask_classifier.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.set_seed": {
  "data": {
   "shadows": "snorkel.utils.set_seed"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "test.classification.test_multitask_classifier.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.classification.test_task": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.classification.test_task.unittest"
   ]
  },
  "type": "module"
 },
 "test.classification.test_task.Operation": {
  "data": {
   "shadows": "snorkel.classification.Operation"
  },
  "type": "import"
 },
 "test.classification.test_task.TASK_NAME": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "test.classification.test_task.Task": {
  "data": {
   "shadows": "snorkel.classification.Task"
  },
  "type": "import"
 },
 "test.classification.test_task.TaskTest": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "test.classification.test_task.unittest"
   ]
  },
  "type": "class"
 },
 "test.classification.test_task.TaskTest.test_task_creation": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "snorkel.classification.Operation",
    "snorkel.classification.Task",
    "test.classification.test_task.TASK_NAME",
    "torch.nn.Linear",
    "torch.nn.ModuleDict",
    "torch.nn.ReLU",
    "torch.nn.Sequential"
   ]
  },
  "type": "function"
 },
 "test.classification.test_task.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "test.classification.test_task.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.classification.test_utils": {
  "data": {},
  "type": "module"
 },
 "test.classification.test_utils.UtilsTest": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "__name__",
    "test.classification.test_utils.unittest"
   ]
  },
  "type": "class"
 },
 "test.classification.test_utils.UtilsTest.test_collect_flow_outputs_by_suffix": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "snorkel.classification.utils.collect_flow_outputs_by_suffix",
    "test.classification.test_utils.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_utils.UtilsTest.test_list_to_tensor": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "snorkel.classification.utils.list_to_tensor",
    "test.classification.test_utils.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_utils.UtilsTest.test_pad_batch": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "snorkel.classification.utils.pad_batch",
    "test.classification.test_utils.torch"
   ]
  },
  "type": "function"
 },
 "test.classification.test_utils.collect_flow_outputs_by_suffix": {
  "data": {
   "shadows": "snorkel.classification.utils.collect_flow_outputs_by_suffix"
  },
  "type": "import"
 },
 "test.classification.test_utils.list_to_tensor": {
  "data": {
   "shadows": "snorkel.classification.utils.list_to_tensor"
  },
  "type": "import"
 },
 "test.classification.test_utils.pad_batch": {
  "data": {
   "shadows": "snorkel.classification.utils.pad_batch"
  },
  "type": "import"
 },
 "test.classification.test_utils.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "test.classification.test_utils.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.labeling": {
  "data": {},
  "type": "module"
 },
 "test.labeling.apply": {
  "data": {},
  "type": "module"
 },
 "test.labeling.apply.lf_applier_spark_test_script": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.array",
    "test.labeling.apply.lf_applier_spark_test_script.build_lf_matrix",
    "test.labeling.apply.lf_applier_spark_test_script.logging"
   ]
  },
  "type": "module"
 },
 "test.labeling.apply.lf_applier_spark_test_script.DATA": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "test.labeling.apply.lf_applier_spark_test_script.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "test.labeling.apply.lf_applier_spark_test_script.L_EXPECTED": {
  "data": {
   "lineno": 55
  },
  "type": "constant"
 },
 "test.labeling.apply.lf_applier_spark_test_script.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "test.labeling.apply.lf_applier_spark_test_script.SparkContext": {
  "data": {
   "shadows": "pyspark.SparkContext"
  },
  "type": "import"
 },
 "test.labeling.apply.lf_applier_spark_test_script.SparkLFApplier": {
  "data": {
   "shadows": "snorkel.labeling.apply.spark.SparkLFApplier"
  },
  "type": "import"
 },
 "test.labeling.apply.lf_applier_spark_test_script.build_lf_matrix": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "numpy.testing.assert_equal",
    "pyspark.SparkContext",
    "snorkel.labeling.apply.spark.SparkLFApplier",
    "test.labeling.apply.lf_applier_spark_test_script.DATA",
    "test.labeling.apply.lf_applier_spark_test_script.L_EXPECTED",
    "test.labeling.apply.lf_applier_spark_test_script.f",
    "test.labeling.apply.lf_applier_spark_test_script.g",
    "test.labeling.apply.lf_applier_spark_test_script.logging"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.lf_applier_spark_test_script.f": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.lf.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.lf_applier_spark_test_script.g": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "dict",
    "int",
    "snorkel.labeling.lf.labeling_function",
    "snorkel.types.DataPoint",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.lf_applier_spark_test_script.labeling_function": {
  "data": {
   "shadows": "snorkel.labeling.lf.labeling_function"
  },
  "type": "import"
 },
 "test.labeling.apply.lf_applier_spark_test_script.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "test.labeling.apply.lf_applier_spark_test_script.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier": {
  "data": {
   "symbols_in_volume": [
    "numpy.array"
   ]
  },
  "type": "module"
 },
 "test.labeling.apply.test_lf_applier.DATA": {
  "data": {
   "lineno": 62
  },
  "type": "constant"
 },
 "test.labeling.apply.test_lf_applier.DaskLFApplier": {
  "data": {
   "shadows": "snorkel.labeling.apply.dask.DaskLFApplier"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.LFApplier": {
  "data": {
   "shadows": "snorkel.labeling.LFApplier"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.L_EXPECTED": {
  "data": {
   "lineno": 63
  },
  "type": "constant"
 },
 "test.labeling.apply.test_lf_applier.L_PREPROCESS_EXPECTED": {
  "data": {
   "lineno": 64
  },
  "type": "constant"
 },
 "test.labeling.apply.test_lf_applier.L_TEXT_EXPECTED": {
  "data": {
   "lineno": 67
  },
  "type": "constant"
 },
 "test.labeling.apply.test_lf_applier.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.PandasLFApplier": {
  "data": {
   "shadows": "snorkel.labeling.PandasLFApplier"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.PandasParallelLFApplier": {
  "data": {
   "shadows": "snorkel.labeling.apply.dask.PandasParallelLFApplier"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.SimpleNamespace": {
  "data": {
   "shadows": "types.SimpleNamespace"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.SpacyPreprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.nlp.SpacyPreprocessor"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.SquareHitTracker": {
  "data": {
   "lineno": 23
  },
  "type": "class"
 },
 "test.labeling.apply.test_lf_applier.SquareHitTracker.__call__": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.SquareHitTracker.__init__": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TEXT_DATA": {
  "data": {
   "lineno": 66
  },
  "type": "constant"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "test.labeling.apply.test_lf_applier.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_dask": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "dask.dataframe.from_pandas",
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "snorkel.labeling.apply.dask.DaskLFApplier",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.L_EXPECTED",
    "test.labeling.apply.test_lf_applier.f",
    "test.labeling.apply.test_lf_applier.g"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_dask_preprocessor": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "dask.dataframe.from_pandas",
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "snorkel.labeling.apply.dask.DaskLFApplier",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.L_PREPROCESS_EXPECTED",
    "test.labeling.apply.test_lf_applier.f",
    "test.labeling.apply.test_lf_applier.fp"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_dask_spacy_preprocessor": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "dask.dataframe.from_pandas",
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "snorkel.labeling.apply.dask.DaskLFApplier",
    "snorkel.preprocess.nlp.SpacyPreprocessor",
    "test.labeling.apply.test_lf_applier.L_TEXT_EXPECTED",
    "test.labeling.apply.test_lf_applier.TEXT_DATA",
    "test.labeling.apply.test_lf_applier.pytest"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_dask_spacy_preprocessor.first_is_name": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_dask_spacy_preprocessor.has_verb": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint",
    "sum"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_parallel": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "snorkel.labeling.apply.dask.PandasParallelLFApplier",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.L_EXPECTED",
    "test.labeling.apply.test_lf_applier.f",
    "test.labeling.apply.test_lf_applier.g"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_parallel_raises": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "pandas.DataFrame",
    "snorkel.labeling.apply.dask.PandasParallelLFApplier",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.f",
    "test.labeling.apply.test_lf_applier.g"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_preprocessor_memoized": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "dask.dataframe.from_pandas",
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "snorkel.labeling.apply.dask.DaskLFApplier",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.L_PREPROCESS_EXPECTED",
    "test.labeling.apply.test_lf_applier.f"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_preprocessor_memoized.fp_memoized": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_preprocessor_memoized.square_memoize": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "snorkel.preprocess.preprocessor",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_spacy_preprocessor_memoized": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "dask.dataframe.from_pandas",
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "snorkel.labeling.apply.dask.DaskLFApplier",
    "snorkel.preprocess.nlp.SpacyPreprocessor",
    "test.labeling.apply.test_lf_applier.L_TEXT_EXPECTED",
    "test.labeling.apply.test_lf_applier.TEXT_DATA",
    "test.labeling.apply.test_lf_applier.pytest"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.first_is_name": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestDaskApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.has_verb": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint",
    "sum"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "test.labeling.apply.test_lf_applier.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "numpy.testing.assert_equal",
    "snorkel.labeling.LFApplier",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.L_EXPECTED",
    "test.labeling.apply.test_lf_applier.f",
    "test.labeling.apply.test_lf_applier.g",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_no_labels": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "numpy.testing.assert_equal",
    "snorkel.labeling.LFApplier",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.h",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_numpy": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "numpy.testing.assert_equal",
    "numpy.vstack",
    "snorkel.labeling.LFApplier",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.L_EXPECTED",
    "test.labeling.apply.test_lf_applier.f_np",
    "test.labeling.apply.test_lf_applier.g_np"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_preprocessor": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "numpy.testing.assert_equal",
    "snorkel.labeling.LFApplier",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.L_PREPROCESS_EXPECTED",
    "test.labeling.apply.test_lf_applier.f",
    "test.labeling.apply.test_lf_applier.fp",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_preprocessor_memoized": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "numpy.testing.assert_equal",
    "snorkel.labeling.LFApplier",
    "square_hit_tracker.n_hits",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.L_PREPROCESS_EXPECTED",
    "test.labeling.apply.test_lf_applier.SquareHitTracker",
    "test.labeling.apply.test_lf_applier.f",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_preprocessor_memoized.fp_memoized": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestLFApplier.test_lf_applier_preprocessor_memoized.square_memoize": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "snorkel.preprocess.preprocessor",
    "snorkel.types.DataPoint",
    "square_hit_tracker"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "test.labeling.apply.test_lf_applier.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "snorkel.labeling.PandasLFApplier",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.L_EXPECTED",
    "test.labeling.apply.test_lf_applier.f",
    "test.labeling.apply.test_lf_applier.g"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_preprocessor": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "snorkel.labeling.PandasLFApplier",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.L_PREPROCESS_EXPECTED",
    "test.labeling.apply.test_lf_applier.f",
    "test.labeling.apply.test_lf_applier.fp"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_preprocessor_memoized": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "snorkel.labeling.PandasLFApplier",
    "square_hit_tracker",
    "square_hit_tracker.n_hits",
    "test.labeling.apply.test_lf_applier.DATA",
    "test.labeling.apply.test_lf_applier.L_PREPROCESS_EXPECTED",
    "test.labeling.apply.test_lf_applier.SquareHitTracker",
    "test.labeling.apply.test_lf_applier.f"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_preprocessor_memoized.fp_memoized": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_preprocessor_memoized.square_memoize": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "snorkel.preprocess.preprocessor",
    "snorkel.types.DataPoint",
    "square_hit_tracker"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "snorkel.labeling.PandasLFApplier",
    "snorkel.preprocess.nlp.SpacyPreprocessor",
    "test.labeling.apply.test_lf_applier.L_TEXT_EXPECTED",
    "test.labeling.apply.test_lf_applier.TEXT_DATA"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor.first_is_name": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor.has_verb": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint",
    "sum"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor_memoized": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "dict",
    "len",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "snorkel.labeling.PandasLFApplier",
    "snorkel.preprocess.nlp.SpacyPreprocessor",
    "test.labeling.apply.test_lf_applier.L_TEXT_EXPECTED",
    "test.labeling.apply.test_lf_applier.TEXT_DATA"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.first_is_name": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.has_verb": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint",
    "sum"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.dd": {
  "data": {
   "shadows": "dask.dataframe"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.f": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.f_np": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.fp": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint",
    "test.labeling.apply.test_lf_applier.square"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.g": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "dict",
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.g_np": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "dict",
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.h": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.labeling_function": {
  "data": {
   "shadows": "snorkel.labeling.labeling_function"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.preprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.preprocessor"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "test.labeling.apply.test_lf_applier.square": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "snorkel.preprocess.preprocessor",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_lf_applier.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark": {
  "data": {
   "symbols_in_volume": [
    "numpy.array"
   ]
  },
  "type": "module"
 },
 "test.labeling.apply.test_spark.DATA": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "test.labeling.apply.test_spark.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark.L_EXPECTED": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "test.labeling.apply.test_spark.L_PREPROCESS_EXPECTED": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "test.labeling.apply.test_spark.L_TEXT_EXPECTED": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "test.labeling.apply.test_spark.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark.Row": {
  "data": {
   "shadows": "pyspark.sql.Row"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark.SQLContext": {
  "data": {
   "shadows": "pyspark.sql.SQLContext"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark.SparkContext": {
  "data": {
   "shadows": "pyspark.SparkContext"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark.SparkLFApplier": {
  "data": {
   "shadows": "snorkel.labeling.apply.spark.SparkLFApplier"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark.TEXT_DATA": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "test.labeling.apply.test_spark.TestSparkApplier": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "test.labeling.apply.test_spark.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.apply.test_spark.TestSparkApplier.test_lf_applier_spark": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "pyspark.SparkContext.getOrCreate",
    "pyspark.sql.SQLContext",
    "snorkel.labeling.apply.spark.SparkLFApplier",
    "test.labeling.apply.test_spark.DATA",
    "test.labeling.apply.test_spark.L_EXPECTED",
    "test.labeling.apply.test_spark.f",
    "test.labeling.apply.test_spark.g",
    "test.labeling.apply.test_spark.pytest"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_spark.TestSparkApplier.test_lf_applier_spark_preprocessor": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "pyspark.SparkContext.getOrCreate",
    "pyspark.sql.SQLContext",
    "snorkel.labeling.apply.spark.SparkLFApplier",
    "test.labeling.apply.test_spark.DATA",
    "test.labeling.apply.test_spark.L_PREPROCESS_EXPECTED",
    "test.labeling.apply.test_spark.f",
    "test.labeling.apply.test_spark.fp",
    "test.labeling.apply.test_spark.pytest"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_spark.TestSparkApplier.test_lf_applier_spark_preprocessor_memoized": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "dict",
    "numpy.testing.assert_equal",
    "pandas.DataFrame",
    "pyspark.SparkContext.getOrCreate",
    "pyspark.sql.SQLContext",
    "snorkel.labeling.apply.spark.SparkLFApplier",
    "test.labeling.apply.test_spark.DATA",
    "test.labeling.apply.test_spark.L_PREPROCESS_EXPECTED",
    "test.labeling.apply.test_spark.f",
    "test.labeling.apply.test_spark.pytest"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_spark.TestSparkApplier.test_lf_applier_spark_preprocessor_memoized.fp_memoized": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_spark.TestSparkApplier.test_lf_applier_spark_preprocessor_memoized.square_memoize": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "pyspark.sql.Row",
    "snorkel.preprocess.preprocessor",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_spark.f": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_spark.fp": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint",
    "test.labeling.apply.test_spark.square"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_spark.g": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "dict",
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_spark.labeling_function": {
  "data": {
   "shadows": "snorkel.labeling.labeling_function"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark.preprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.preprocessor"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "test.labeling.apply.test_spark.square": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "pyspark.sql.Row",
    "snorkel.preprocess.preprocessor"
   ]
  },
  "type": "function"
 },
 "test.labeling.apply.test_spark.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.labeling.model": {
  "data": {},
  "type": "module"
 },
 "test.labeling.model.test_baseline": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.labeling.model.test_baseline.unittest"
   ]
  },
  "type": "module"
 },
 "test.labeling.model.test_baseline.BaselineModelTest": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "test.labeling.model.test_baseline.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.model.test_baseline.BaselineModelTest.test_majority_class_vote": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_almost_equal",
    "snorkel.labeling.MajorityClassVoter"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_baseline.BaselineModelTest.test_majority_label_vote": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_almost_equal",
    "snorkel.labeling.MajorityLabelVoter"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_baseline.BaselineModelTest.test_random_vote": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.ones",
    "numpy.shape",
    "numpy.sum",
    "numpy.testing.assert_array_almost_equal",
    "snorkel.labeling.RandomVoter"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_baseline.MajorityClassVoter": {
  "data": {
   "shadows": "snorkel.labeling.MajorityClassVoter"
  },
  "type": "import"
 },
 "test.labeling.model.test_baseline.MajorityLabelVoter": {
  "data": {
   "shadows": "snorkel.labeling.MajorityLabelVoter"
  },
  "type": "import"
 },
 "test.labeling.model.test_baseline.RandomVoter": {
  "data": {
   "shadows": "snorkel.labeling.RandomVoter"
  },
  "type": "import"
 },
 "test.labeling.model.test_baseline.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.labeling.model.test_baseline.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.labeling.model.test_label_model.unittest"
   ]
  },
  "type": "module"
 },
 "test.labeling.model.test_label_model.LabelModel": {
  "data": {
   "shadows": "snorkel.labeling.LabelModel"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model.LabelModelTest": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "test.labeling.model.test_label_model.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.model.test_label_model.LabelModelTest._set_up_model": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "float",
    "numpy.ndarray",
    "snorkel.labeling.LabelModel",
    "snorkel.labeling.model.label_model.TrainConfig",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_L_form": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "snorkel.labeling.LabelModel"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_augmented_L_construction": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "len",
    "numpy.array",
    "range",
    "snorkel.labeling.LabelModel"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_build_mask": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_equal"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_class_balance": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "numpy.testing.assert_array_almost_equal",
    "snorkel.labeling.LabelModel"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_conditional_probs": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_count_accurate_lfs": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "numpy.array",
    "snorkel.labeling.LabelModel"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_generate_O": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_almost_equal"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_get_weight": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "len",
    "numpy.abs",
    "numpy.ones",
    "numpy.random.rand",
    "numpy.zeros",
    "range",
    "snorkel.labeling.LabelModel"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_init_params": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_equal"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_loss": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.ones",
    "torch.nn.Parameter"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_lr_scheduler": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "snorkel.labeling.LabelModel"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_model_loss": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "Exception",
    "numpy.array",
    "snorkel.labeling.LabelModel"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_mv_default": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_almost_equal",
    "snorkel.labeling.LabelModel"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_optimizer": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "snorkel.labeling.LabelModel"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_optimizer_init": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "snorkel.labeling.LabelModel",
    "torch.optim.Adam",
    "torch.optim.Adamax",
    "torch.optim.SGD"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_predict": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_almost_equal",
    "numpy.testing.assert_array_equal",
    "torch.nn.Parameter"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_predict_proba": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_almost_equal",
    "torch.nn.Parameter"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_save_and_load": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "numpy.array",
    "snorkel.labeling.LabelModel",
    "test.labeling.model.test_label_model.shutil",
    "test.labeling.model.test_label_model.tempfile"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_scheduler_init": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "numpy.array",
    "snorkel.labeling.LabelModel",
    "torch.optim.lr_scheduler.ExponentialLR",
    "torch.optim.lr_scheduler.LambdaLR",
    "torch.optim.lr_scheduler.StepLR"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_score": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "dict",
    "numpy.array",
    "torch.nn.Parameter"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_set_mu_eps": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "numpy.array",
    "snorkel.labeling.LabelModel"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_symmetry_breaking": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "numpy.array",
    "snorkel.labeling.LabelModel",
    "test.labeling.model.test_label_model.torch",
    "torch.nn.Parameter"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.LabelModelTest.test_warmup": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "snorkel.labeling.LabelModel"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model.TestLabelModelAdvanced": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": [
    "test.labeling.model.test_label_model.pytest",
    "test.labeling.model.test_label_model.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.model.test_label_model.TestLabelModelAdvanced.setUp": {
  "data": {
   "lineno": 454
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.TestLabelModelAdvanced.test_label_model_basic": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": [
    "numpy.random.seed",
    "numpy.testing.assert_array_almost_equal",
    "snorkel.labeling.LabelModel",
    "snorkel.synthetic.synthetic_data.generate_simple_label_matrix"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.TestLabelModelAdvanced.test_label_model_sparse": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": [
    "len",
    "numpy.random.seed",
    "numpy.testing.assert_array_almost_equal",
    "numpy.where",
    "snorkel.labeling.LabelModel",
    "snorkel.synthetic.synthetic_data.generate_simple_label_matrix"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_label_model.TrainConfig": {
  "data": {
   "shadows": "snorkel.labeling.model.label_model.TrainConfig"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model.generate_simple_label_matrix": {
  "data": {
   "shadows": "snorkel.synthetic.synthetic_data.generate_simple_label_matrix"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model.optim": {
  "data": {
   "shadows": "torch.optim"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "test.labeling.model.test_label_model.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.labeling.model.test_logger": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.labeling.model.test_logger.unittest"
   ]
  },
  "type": "module"
 },
 "test.labeling.model.test_logger.Logger": {
  "data": {
   "shadows": "snorkel.labeling.model.logger.Logger"
  },
  "type": "import"
 },
 "test.labeling.model.test_logger.LoggerTest": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "test.labeling.model.test_logger.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.model.test_logger.LoggerTest.test_bad_metrics_dict": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "Exception",
    "snorkel.labeling.model.logger.Logger"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_logger.LoggerTest.test_basic": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "snorkel.labeling.model.logger.Logger"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_logger.LoggerTest.test_valid_metrics_dict": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "snorkel.labeling.model.logger.Logger"
   ]
  },
  "type": "function"
 },
 "test.labeling.model.test_logger.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.labeling.preprocess": {
  "data": {},
  "type": "module"
 },
 "test.labeling.preprocess.test_nlp": {
  "data": {},
  "type": "module"
 },
 "test.labeling.preprocess.test_nlp.SimpleNamespace": {
  "data": {
   "shadows": "types.SimpleNamespace"
  },
  "type": "import"
 },
 "test.labeling.preprocess.test_nlp.SpacyPreprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.nlp.SpacyPreprocessor"
  },
  "type": "import"
 },
 "test.labeling.preprocess.test_nlp.TestSpacyPreprocessor": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "test.labeling.preprocess.test_nlp.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.preprocess.test_nlp.TestSpacyPreprocessor.test_spacy_preprocessor": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "len",
    "preprocessor",
    "snorkel.preprocess.nlp.SpacyPreprocessor",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.labeling.preprocess.test_nlp.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.labeling.test_analysis": {
  "data": {},
  "type": "module"
 },
 "test.labeling.test_analysis.L": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "test.labeling.test_analysis.LFAnalysis": {
  "data": {
   "shadows": "snorkel.labeling.LFAnalysis"
  },
  "type": "import"
 },
 "test.labeling.test_analysis.L_wo_abstain": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "test.labeling.test_analysis.LabelingFunction": {
  "data": {
   "shadows": "snorkel.labeling.LabelingFunction"
  },
  "type": "import"
 },
 "test.labeling.test_analysis.TestAnalysis": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "test.labeling.test_analysis.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.test_analysis.TestAnalysis.setUp": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.array",
    "snorkel.labeling.LFAnalysis",
    "test.labeling.test_analysis.L",
    "test.labeling.test_analysis.L_wo_abstain",
    "test.labeling.test_analysis.Y"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_label_conflict": {
  "data": {
   "lineno": 45
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_label_coverage": {
  "data": {
   "lineno": 39
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_label_overlap": {
  "data": {
   "lineno": 42
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_conflicts": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_almost_equal"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_coverages": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_almost_equal"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_empirical_accuracies": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_almost_equal"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_empirical_probs": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_almost_equal"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_overlaps": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_almost_equal"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_polarities": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_summary": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "list",
    "numpy.array",
    "pandas.DataFrame",
    "pandas.Index",
    "pandas.testing.assert_frame_equal",
    "snorkel.labeling.LFAnalysis",
    "snorkel.labeling.LabelingFunction",
    "test.labeling.test_analysis.L",
    "test.labeling.test_analysis.f"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_lf_summary_without_abstain": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "pandas.DataFrame",
    "pandas.testing.assert_frame_equal"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_analysis.TestAnalysis.test_wrong_number_of_lfs": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "snorkel.labeling.LFAnalysis",
    "snorkel.labeling.LabelingFunction",
    "test.labeling.test_analysis.L",
    "test.labeling.test_analysis.f"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_analysis.Y": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "test.labeling.test_analysis.f": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "test.labeling.test_analysis.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.labeling.test_analysis.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.labeling.test_analysis.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.labeling.test_convergence": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.labeling.test_convergence.unittest"
   ]
  },
  "type": "module"
 },
 "test.labeling.test_convergence.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "test.labeling.test_convergence.LabelModel": {
  "data": {
   "shadows": "snorkel.labeling.LabelModel"
  },
  "type": "import"
 },
 "test.labeling.test_convergence.LabelingConvergenceTest": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "test.labeling.test_convergence.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.test_convergence.LabelingConvergenceTest.setUpClass": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "classmethod",
    "snorkel.utils.set_seed",
    "test.labeling.test_convergence.create_data"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_convergence.LabelingConvergenceTest.test_labeling_convergence": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "len",
    "numpy.where",
    "range",
    "snorkel.labeling.LabelModel",
    "snorkel.labeling.PandasLFApplier",
    "test.labeling.test_convergence.f",
    "test.labeling.test_convergence.get_negative_labeling_function",
    "test.labeling.test_convergence.get_positive_labeling_function",
    "test.labeling.test_convergence.pytest"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_convergence.LabelingFunction": {
  "data": {
   "shadows": "snorkel.labeling.LabelingFunction"
  },
  "type": "import"
 },
 "test.labeling.test_convergence.PandasLFApplier": {
  "data": {
   "shadows": "snorkel.labeling.PandasLFApplier"
  },
  "type": "import"
 },
 "test.labeling.test_convergence.copy_features": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "snorkel.preprocess.preprocessor",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_convergence.create_data": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "int",
    "numpy.random.randint",
    "numpy.random.random",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_convergence.f": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "dict",
    "int",
    "snorkel.labeling.labeling_function",
    "snorkel.types.DataPoint",
    "test.labeling.test_convergence.copy_features"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_convergence.get_negative_labeling_function": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.LabelingFunction"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_convergence.get_negative_labeling_function.f": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "test.labeling.test_convergence.get_positive_labeling_function": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "int",
    "snorkel.labeling.LabelingFunction"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_convergence.get_positive_labeling_function.f": {
  "data": {
   "lineno": 32
  },
  "type": "function"
 },
 "test.labeling.test_convergence.labeling_function": {
  "data": {
   "shadows": "snorkel.labeling.labeling_function"
  },
  "type": "import"
 },
 "test.labeling.test_convergence.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.labeling.test_convergence.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.labeling.test_convergence.preprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.preprocessor"
  },
  "type": "import"
 },
 "test.labeling.test_convergence.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "test.labeling.test_convergence.set_seed": {
  "data": {
   "shadows": "snorkel.utils.set_seed"
  },
  "type": "import"
 },
 "test.labeling.test_convergence.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.labeling.test_utils": {
  "data": {},
  "type": "module"
 },
 "test.labeling.test_utils.TestAnalysis": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "test.labeling.test_utils.unittest"
   ]
  },
  "type": "class"
 },
 "test.labeling.test_utils.TestAnalysis.test_filter_unlabeled_dataframe": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "dict",
    "numpy.array",
    "numpy.array_equal",
    "numpy.testing.assert_array_almost_equal",
    "pandas.DataFrame",
    "snorkel.labeling.filter_unlabeled_dataframe"
   ]
  },
  "type": "function"
 },
 "test.labeling.test_utils.filter_unlabeled_dataframe": {
  "data": {
   "shadows": "snorkel.labeling.filter_unlabeled_dataframe"
  },
  "type": "import"
 },
 "test.labeling.test_utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.labeling.test_utils.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.labeling.test_utils.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.map": {
  "data": {},
  "type": "module"
 },
 "test.map.test_core": {
  "data": {},
  "type": "module"
 },
 "test.map.test_core.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "test.map.test_core.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "test.map.test_core.FieldMap": {
  "data": {
   "shadows": "snorkel.types.FieldMap"
  },
  "type": "import"
 },
 "test.map.test_core.Mapper": {
  "data": {
   "shadows": "snorkel.map.Mapper"
  },
  "type": "import"
 },
 "test.map.test_core.MapperReturnsNone": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "test.map.test_core.MapperReturnsNone.run": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "snorkel.types.FieldMap",
    "str",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.MapperWithArgs": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "test.map.test_core.MapperWithArgs.run": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "snorkel.types.FieldMap",
    "str",
    "typing.Any",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.MapperWithKwargs": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "test.map.test_core.MapperWithKwargs.run": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "snorkel.types.FieldMap",
    "str",
    "typing.Any",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.MapperWithPre": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "test.map.test_core.MapperWithPre.run": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "dict",
    "float",
    "snorkel.types.FieldMap",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.MapperWithPre2": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "test.map.test_core.MapperWithPre2.run": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "dict",
    "float",
    "snorkel.types.FieldMap",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "test.map.test_core.SimpleNamespace": {
  "data": {
   "shadows": "types.SimpleNamespace"
  },
  "type": "import"
 },
 "test.map.test_core.SplitWordsMapper": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "test.map.test_core.SplitWordsMapper.__init__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "dict",
    "str",
    "super"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.SplitWordsMapper.run": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "dict",
    "snorkel.types.FieldMap",
    "str"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.SplitWordsMapperDefaultArgs": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "test.map.test_core.SplitWordsMapperDefaultArgs.run": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "dict",
    "snorkel.types.FieldMap",
    "str"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.SquareHitTracker": {
  "data": {
   "lineno": 56
  },
  "type": "class"
 },
 "test.map.test_core.SquareHitTracker.__call__": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.SquareHitTracker.__init__": {
  "data": {
   "lineno": 57
  },
  "type": "function"
 },
 "test.map.test_core.TestGetHashable": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "test.map.test_core.unittest"
   ]
  },
  "type": "class"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_dict": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": [
    "dict",
    "frozenset",
    "hash",
    "snorkel.map.core.get_hashable"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_hashable": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "snorkel.map.core.get_hashable"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_list": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "dict",
    "frozenset",
    "hash",
    "snorkel.map.core.get_hashable"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_ndarray": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": [
    "dict",
    "frozenset",
    "numpy.array",
    "snorkel.map.core.get_hashable"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_series": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "dict",
    "frozenset",
    "hash",
    "pandas.Series",
    "snorkel.map.core.get_hashable"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_series_with_doc": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "dict",
    "frozenset",
    "hash",
    "nlp",
    "pandas.Series",
    "snorkel.map.core.get_hashable",
    "test.map.test_core.spacy"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestGetHashable.test_get_hashable_unhashable": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "pandas.DataFrame",
    "snorkel.map.core.get_hashable"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "test.map.test_core.unittest"
   ]
  },
  "type": "class"
 },
 "test.map.test_core.TestMapperCore._get_x": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore._get_x_dict": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "dict",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_memoized": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "square_hit_tracker.n_hits",
    "test.map.test_core.SquareHitTracker",
    "test.map.test_core.square"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_memoized.square": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint",
    "square_hit_tracker"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_memoized_none": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "square_hit_tracker",
    "square_hit_tracker.n_hits",
    "test.map.test_core.SquareHitTracker",
    "test.map.test_core.square"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_memoized_none.square": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint",
    "square_hit_tracker"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_not_memoized": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "square_hit_tracker",
    "square_hit_tracker.n_hits",
    "test.map.test_core.SquareHitTracker",
    "test.map.test_core.square"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_decorator_mapper_not_memoized.square": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint",
    "square_hit_tracker"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_decorator_no_parens": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_decorator_no_parens.square": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_default_args": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "split_words",
    "test.map.test_core.SplitWordsMapperDefaultArgs",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_in_place": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "dict",
    "test.map.test_core.modify_in_place",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "AttributeError",
    "mapper_no_pre",
    "mapper_pre",
    "mapper_pre_2",
    "test.map.test_core.MapperWithPre",
    "test.map.test_core.MapperWithPre2",
    "test.map.test_core.square",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_decorator": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "AttributeError",
    "mapper_no_pre",
    "mapper_pre",
    "mapper_pre_2",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_decorator.mapper_no_pre": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_decorator.mapper_pre": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint",
    "test.map.test_core.square"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_decorator.mapper_pre_2": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "mapper_pre",
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_memoized": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "mapper_pre",
    "mapper_pre.reset_cache",
    "square_hit_tracker",
    "square_hit_tracker.n_hits",
    "test.map.test_core.SquareHitTracker"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_memoized.mapper_pre": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint",
    "test.map.test_core.square"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_pre_memoized.square": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint",
    "square_hit_tracker"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_returns_none": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "mapper",
    "test.map.test_core.MapperReturnsNone"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_same_field": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "split_words",
    "test.map.test_core.SplitWordsMapper",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_mapper_with_args_kwargs": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "ValueError",
    "test.map.test_core.MapperWithArgs",
    "test.map.test_core.MapperWithKwargs"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_numeric_mapper": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "test.map.test_core.square",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.TestMapperCore.test_text_mapper": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "split_words",
    "test.map.test_core.SplitWordsMapper",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.get_hashable": {
  "data": {
   "shadows": "snorkel.map.core.get_hashable"
  },
  "type": "import"
 },
 "test.map.test_core.lambda_mapper": {
  "data": {
   "shadows": "snorkel.map.lambda_mapper"
  },
  "type": "import"
 },
 "test.map.test_core.modify_in_place": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.map.test_core.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.map.test_core.spacy": {
  "data": {
   "shadows": "spacy"
  },
  "type": "import"
 },
 "test.map.test_core.square": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.map.test_core.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.map.test_spark": {
  "data": {},
  "type": "module"
 },
 "test.map.test_spark.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "test.map.test_spark.FieldMap": {
  "data": {
   "shadows": "snorkel.types.FieldMap"
  },
  "type": "import"
 },
 "test.map.test_spark.Mapper": {
  "data": {
   "shadows": "snorkel.map.Mapper"
  },
  "type": "import"
 },
 "test.map.test_spark.MapperReturnsNone": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "test.map.test_spark.MapperReturnsNone.run": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "snorkel.types.FieldMap",
    "str",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "test.map.test_spark.Row": {
  "data": {
   "shadows": "pyspark.sql.Row"
  },
  "type": "import"
 },
 "test.map.test_spark.SplitWordsMapper": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "test.map.test_spark.SplitWordsMapper.__init__": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "dict",
    "str",
    "super"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.SplitWordsMapper.run": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "dict",
    "snorkel.types.FieldMap",
    "str"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.SplitWordsMapperDefaultArgs": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "snorkel.map.Mapper"
   ]
  },
  "type": "class"
 },
 "test.map.test_spark.SplitWordsMapperDefaultArgs.run": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "dict",
    "snorkel.types.FieldMap",
    "str"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.SquareHitTracker": {
  "data": {
   "lineno": 34
  },
  "type": "class"
 },
 "test.map.test_spark.SquareHitTracker.__call__": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.SquareHitTracker.__init__": {
  "data": {
   "lineno": 35
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "test.map.test_spark.unittest"
   ]
  },
  "type": "class"
 },
 "test.map.test_spark.TestMapperCore._get_x": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "pyspark.sql.Row"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore._get_x_dict": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "dict",
    "pyspark.sql.Row"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_memoized": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "square_hit_tracker.n_hits",
    "test.map.test_spark.SquareHitTracker",
    "test.map.test_spark.pytest",
    "test.map.test_spark.square"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_memoized.square": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "pyspark.sql.Row",
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint",
    "square_hit_tracker"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_memoized_none": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "square_hit_tracker",
    "square_hit_tracker.n_hits",
    "test.map.test_spark.SquareHitTracker",
    "test.map.test_spark.pytest",
    "test.map.test_spark.square"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_memoized_none.square": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "pyspark.sql.Row",
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint",
    "square_hit_tracker"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_not_memoized": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "square_hit_tracker",
    "square_hit_tracker.n_hits",
    "test.map.test_spark.SquareHitTracker",
    "test.map.test_spark.pytest",
    "test.map.test_spark.square"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_decorator_mapper_not_memoized.square": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "pyspark.sql.Row",
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint",
    "square_hit_tracker"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_mapper_default_args": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "snorkel.map.spark.make_spark_mapper",
    "split_words_spark",
    "test.map.test_spark.SplitWordsMapperDefaultArgs",
    "test.map.test_spark.pytest"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_mapper_in_place": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "dict",
    "hasattr",
    "test.map.test_spark.modify_in_place",
    "test.map.test_spark.pytest"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_mapper_returns_none": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "mapper_spark",
    "snorkel.map.spark.make_spark_mapper",
    "test.map.test_spark.MapperReturnsNone",
    "test.map.test_spark.pytest"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_mapper_same_field": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "hasattr",
    "snorkel.map.spark.make_spark_mapper",
    "split_words_spark",
    "test.map.test_spark.SplitWordsMapper",
    "test.map.test_spark.pytest"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_numeric_mapper": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "test.map.test_spark.pytest",
    "test.map.test_spark.square"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.TestMapperCore.test_text_mapper": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "snorkel.map.spark.make_spark_mapper",
    "split_words_spark",
    "test.map.test_spark.SplitWordsMapper",
    "test.map.test_spark.pytest"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.lambda_mapper": {
  "data": {
   "shadows": "snorkel.map.lambda_mapper"
  },
  "type": "import"
 },
 "test.map.test_spark.make_spark_mapper": {
  "data": {
   "shadows": "snorkel.map.spark.make_spark_mapper"
  },
  "type": "import"
 },
 "test.map.test_spark.modify_in_place": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "pyspark.sql.Row",
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "test.map.test_spark.square": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "pyspark.sql.Row",
    "snorkel.map.lambda_mapper",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.map.test_spark.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.slicing": {
  "data": {},
  "type": "module"
 },
 "test.slicing.apply": {
  "data": {},
  "type": "module"
 },
 "test.slicing.apply.test_sf_applier": {
  "data": {},
  "type": "module"
 },
 "test.slicing.apply.test_sf_applier.DATA": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "test.slicing.apply.test_sf_applier.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "test.slicing.apply.test_sf_applier.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "test.slicing.apply.test_sf_applier.SFApplier": {
  "data": {
   "shadows": "snorkel.slicing.SFApplier"
  },
  "type": "import"
 },
 "test.slicing.apply.test_sf_applier.S_EXPECTED": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "test.slicing.apply.test_sf_applier.S_PREPROCESS_EXPECTED": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "test.slicing.apply.test_sf_applier.SimpleNamespace": {
  "data": {
   "shadows": "types.SimpleNamespace"
  },
  "type": "import"
 },
 "test.slicing.apply.test_sf_applier.SquareHitTracker": {
  "data": {
   "lineno": 16
  },
  "type": "class"
 },
 "test.slicing.apply.test_sf_applier.SquareHitTracker.__call__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.SquareHitTracker.__init__": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.TestSFApplier": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "test.slicing.apply.test_sf_applier.unittest"
   ]
  },
  "type": "class"
 },
 "test.slicing.apply.test_sf_applier.TestSFApplier.test_sf_applier": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "snorkel.slicing.SFApplier",
    "test.slicing.apply.test_sf_applier.DATA",
    "test.slicing.apply.test_sf_applier.S_EXPECTED",
    "test.slicing.apply.test_sf_applier.f",
    "test.slicing.apply.test_sf_applier.g",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.TestSFApplier.test_sf_applier_preprocessor": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "snorkel.slicing.SFApplier",
    "test.slicing.apply.test_sf_applier.DATA",
    "test.slicing.apply.test_sf_applier.S_PREPROCESS_EXPECTED",
    "test.slicing.apply.test_sf_applier.f",
    "test.slicing.apply.test_sf_applier.fp",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.f": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "int",
    "snorkel.slicing.slicing_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.fp": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "int",
    "snorkel.slicing.slicing_function",
    "snorkel.types.DataPoint",
    "test.slicing.apply.test_sf_applier.square"
   ]
  },
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.g": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "dict",
    "int",
    "snorkel.slicing.slicing_function",
    "snorkel.types.DataPoint",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.preprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.preprocessor"
  },
  "type": "import"
 },
 "test.slicing.apply.test_sf_applier.slicing_function": {
  "data": {
   "shadows": "snorkel.slicing.slicing_function"
  },
  "type": "import"
 },
 "test.slicing.apply.test_sf_applier.square": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "snorkel.preprocess.preprocessor",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.slicing.apply.test_sf_applier.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.slicing.sf": {
  "data": {},
  "type": "module"
 },
 "test.slicing.sf.test_core": {
  "data": {},
  "type": "module"
 },
 "test.slicing.sf.test_core.SimpleNamespace": {
  "data": {
   "shadows": "types.SimpleNamespace"
  },
  "type": "import"
 },
 "test.slicing.sf.test_core.SlicingFunction": {
  "data": {
   "shadows": "snorkel.slicing.SlicingFunction"
  },
  "type": "import"
 },
 "test.slicing.sf.test_core.TestSlicingFunction": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "test.slicing.sf.test_core.unittest"
   ]
  },
  "type": "class"
 },
 "test.slicing.sf.test_core.TestSlicingFunction._run_sf": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "sf",
    "snorkel.slicing.SlicingFunction",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_core.TestSlicingFunction._run_sf_raise": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "TypeError",
    "sf",
    "snorkel.slicing.SlicingFunction",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_core.TestSlicingFunction.test_slicing_function_decorator": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "sf",
    "sf.name",
    "snorkel.slicing.SlicingFunction"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_core.TestSlicingFunction.test_slicing_function_decorator.sf": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "int",
    "snorkel.slicing.slicing_function"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_core.TestSlicingFunction.test_slicing_function_decorator_no_parens": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_core.TestSlicingFunction.test_slicing_function_decorator_no_parens.sf": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "int",
    "snorkel.slicing.slicing_function"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_core.slicing_function": {
  "data": {
   "shadows": "snorkel.slicing.slicing_function"
  },
  "type": "import"
 },
 "test.slicing.sf.test_core.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.slicing.sf.test_nlp": {
  "data": {},
  "type": "module"
 },
 "test.slicing.sf.test_nlp.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "test.slicing.sf.test_nlp.NLPSlicingFunction": {
  "data": {
   "shadows": "snorkel.slicing.sf.nlp.NLPSlicingFunction"
  },
  "type": "import"
 },
 "test.slicing.sf.test_nlp.SimpleNamespace": {
  "data": {
   "shadows": "types.SimpleNamespace"
  },
  "type": "import"
 },
 "test.slicing.sf.test_nlp.TestNLPSlicingFunction": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "test.slicing.sf.test_nlp.unittest"
   ]
  },
  "type": "class"
 },
 "test.slicing.sf.test_nlp.TestNLPSlicingFunction._run_sf": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "sf",
    "snorkel.slicing.sf.nlp.NLPSlicingFunction",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_nlp.TestNLPSlicingFunction.test_nlp_slicing_function": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "sf",
    "snorkel.slicing.sf.nlp.NLPSlicingFunction",
    "test.slicing.sf.test_nlp.combine_text",
    "test.slicing.sf.test_nlp.has_person_mention"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_nlp.TestNLPSlicingFunction.test_nlp_slicing_function_decorator": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "snorkel.slicing.sf.nlp.NLPSlicingFunction",
    "test.slicing.sf.test_nlp.has_person_mention"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_nlp.TestNLPSlicingFunction.test_nlp_slicing_function_decorator.has_person_mention": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "int",
    "len",
    "snorkel.slicing.sf.nlp.nlp_slicing_function",
    "snorkel.types.DataPoint",
    "test.slicing.sf.test_nlp.combine_text"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_nlp.combine_text": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "snorkel.preprocess.preprocessor",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_nlp.has_person_mention": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "int",
    "len",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.slicing.sf.test_nlp.nlp_slicing_function": {
  "data": {
   "shadows": "snorkel.slicing.sf.nlp.nlp_slicing_function"
  },
  "type": "import"
 },
 "test.slicing.sf.test_nlp.preprocessor": {
  "data": {
   "shadows": "snorkel.preprocess.preprocessor"
  },
  "type": "import"
 },
 "test.slicing.sf.test_nlp.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.slicing.test_convergence": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.slicing.test_convergence.unittest"
   ]
  },
  "type": "module"
 },
 "test.slicing.test_convergence.DataPoint": {
  "data": {
   "shadows": "snorkel.types.DataPoint"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.DictDataLoader"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.DictDataset": {
  "data": {
   "shadows": "snorkel.classification.DictDataset"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.MultitaskClassifier": {
  "data": {
   "shadows": "snorkel.classification.MultitaskClassifier"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.Operation": {
  "data": {
   "shadows": "snorkel.classification.Operation"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.PandasSFApplier": {
  "data": {
   "shadows": "snorkel.slicing.PandasSFApplier"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.Scorer": {
  "data": {
   "shadows": "snorkel.analysis.Scorer"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.SlicingConvergenceTest": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "test.slicing.test_convergence.unittest"
   ]
  },
  "type": "class"
 },
 "test.slicing.test_convergence.SlicingConvergenceTest.setUpClass": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "classmethod",
    "create_data",
    "snorkel.utils.set_seed"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_convergence.SlicingConvergenceTest.test_convergence": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "create_dataloader",
    "create_task",
    "snorkel.classification.MultitaskClassifier",
    "snorkel.classification.Trainer",
    "snorkel.slicing.PandasSFApplier",
    "snorkel.slicing.add_slice_labels",
    "snorkel.slicing.convert_to_slice_tasks",
    "test.slicing.test_convergence.h",
    "test.slicing.test_convergence.pytest"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_convergence.SlicingConvergenceTest.test_performance": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "create_dataloader",
    "create_task",
    "snorkel.classification.MultitaskClassifier",
    "snorkel.classification.Trainer",
    "snorkel.slicing.PandasSFApplier",
    "snorkel.slicing.add_slice_labels",
    "snorkel.slicing.convert_to_slice_tasks",
    "test.slicing.test_convergence.f",
    "test.slicing.test_convergence.g",
    "test.slicing.test_convergence.pytest"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_convergence.Task": {
  "data": {
   "shadows": "snorkel.classification.Task"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.Trainer": {
  "data": {
   "shadows": "snorkel.classification.Trainer"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.add_slice_labels": {
  "data": {
   "shadows": "snorkel.slicing.add_slice_labels"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.convert_to_slice_tasks": {
  "data": {
   "shadows": "snorkel.slicing.convert_to_slice_tasks"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.create_data": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "int",
    "numpy.random.random",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_convergence.create_dataloader": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "pandas.DataFrame",
    "snorkel.classification.DictDataLoader",
    "snorkel.classification.DictDataset",
    "str",
    "test.slicing.test_convergence.torch"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_convergence.create_task": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "snorkel.analysis.Scorer",
    "snorkel.classification.Operation",
    "snorkel.classification.Task",
    "str",
    "torch.nn.Linear",
    "torch.nn.ModuleDict",
    "torch.nn.ReLU",
    "torch.nn.Sequential",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_convergence.f": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "int",
    "numpy.sqrt",
    "snorkel.slicing.slicing_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_convergence.g": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "int",
    "numpy.sqrt",
    "snorkel.slicing.slicing_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_convergence.h": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "int",
    "numpy.sqrt",
    "snorkel.slicing.slicing_function",
    "snorkel.types.DataPoint"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_convergence.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.set_seed": {
  "data": {
   "shadows": "snorkel.utils.set_seed"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.slicing_function": {
  "data": {
   "shadows": "snorkel.slicing.slicing_function"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "test.slicing.test_convergence.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.slicing.test_monitor": {
  "data": {},
  "type": "module"
 },
 "test.slicing.test_monitor.DATA": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "test.slicing.test_monitor.PandasSlicerTest": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "test.slicing.test_monitor.unittest"
   ]
  },
  "type": "class"
 },
 "test.slicing.test_monitor.PandasSlicerTest.setUpClass": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "classmethod",
    "dict",
    "pandas.DataFrame",
    "test.slicing.test_monitor.DATA"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_monitor.PandasSlicerTest.test_slice": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "len",
    "snorkel.slicing.monitor.slice_dataframe",
    "test.slicing.test_monitor.sf"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_monitor.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.slicing.test_monitor.sf": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "snorkel.slicing.slicing_function"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_monitor.slice_dataframe": {
  "data": {
   "shadows": "snorkel.slicing.monitor.slice_dataframe"
  },
  "type": "import"
 },
 "test.slicing.test_monitor.slicing_function": {
  "data": {
   "shadows": "snorkel.slicing.slicing_function"
  },
  "type": "import"
 },
 "test.slicing.test_monitor.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.slicing.test_slice_combiner": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.slicing.test_slice_combiner.unittest"
   ]
  },
  "type": "module"
 },
 "test.slicing.test_slice_combiner.SliceCombinerModule": {
  "data": {
   "shadows": "snorkel.slicing.SliceCombinerModule"
  },
  "type": "import"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "test.slicing.test_slice_combiner.unittest"
   ]
  },
  "type": "class"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.setUpClass": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "classmethod",
    "snorkel.utils.set_seed"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_average_reweighting": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "combiner_module",
    "snorkel.slicing.SliceCombinerModule",
    "test.slicing.test_slice_combiner.torch"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_average_reweighting_by_ind": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "combiner_module",
    "snorkel.slicing.SliceCombinerModule",
    "test.slicing.test_slice_combiner.torch"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_average_reweighting_by_pred_confidence": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "combiner_module",
    "snorkel.slicing.SliceCombinerModule",
    "test.slicing.test_slice_combiner.torch"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_combiner_multiclass": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "NotImplementedError",
    "combiner_module",
    "range",
    "snorkel.slicing.SliceCombinerModule",
    "test.slicing.test_slice_combiner.random",
    "test.slicing.test_slice_combiner.torch"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_forward_shape": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "NotImplementedError",
    "combiner_module",
    "snorkel.slicing.SliceCombinerModule",
    "test.slicing.test_slice_combiner.torch",
    "tuple"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_many_slices": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "combiner_module",
    "range",
    "snorkel.slicing.SliceCombinerModule",
    "test.slicing.test_slice_combiner.torch"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_slice_combiner.SliceCombinerTest.test_temperature": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "combiner_module",
    "snorkel.slicing.SliceCombinerModule",
    "test.slicing.test_slice_combiner.torch"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_slice_combiner.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "test.slicing.test_slice_combiner.set_seed": {
  "data": {
   "shadows": "snorkel.utils.set_seed"
  },
  "type": "import"
 },
 "test.slicing.test_slice_combiner.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "test.slicing.test_slice_combiner.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.slicing.test_sliceaware_classifier": {
  "data": {
   "symbols_in_volume": [
    "test.slicing.test_sliceaware_classifier.f",
    "test.slicing.test_sliceaware_classifier.g"
   ]
  },
  "type": "module"
 },
 "test.slicing.test_sliceaware_classifier.DATA": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "test.slicing.test_sliceaware_classifier.DictDataset": {
  "data": {
   "shadows": "snorkel.classification.DictDataset"
  },
  "type": "import"
 },
 "test.slicing.test_sliceaware_classifier.SFApplier": {
  "data": {
   "shadows": "snorkel.slicing.SFApplier"
  },
  "type": "import"
 },
 "test.slicing.test_sliceaware_classifier.Scorer": {
  "data": {
   "shadows": "snorkel.analysis.Scorer"
  },
  "type": "import"
 },
 "test.slicing.test_sliceaware_classifier.SimpleNamespace": {
  "data": {
   "shadows": "types.SimpleNamespace"
  },
  "type": "import"
 },
 "test.slicing.test_sliceaware_classifier.SliceAwareClassifier": {
  "data": {
   "shadows": "snorkel.slicing.SliceAwareClassifier"
  },
  "type": "import"
 },
 "test.slicing.test_sliceaware_classifier.SliceCombinerTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "test.slicing.test_sliceaware_classifier.unittest"
   ]
  },
  "type": "class"
 },
 "test.slicing.test_sliceaware_classifier.SliceCombinerTest.setUp": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "int",
    "len",
    "range",
    "snorkel.analysis.Scorer",
    "snorkel.slicing.SFApplier",
    "snorkel.slicing.SliceAwareClassifier",
    "test.slicing.test_sliceaware_classifier.DATA",
    "test.slicing.test_sliceaware_classifier.create_dataset",
    "test.slicing.test_sliceaware_classifier.f",
    "test.slicing.test_sliceaware_classifier.g",
    "test.slicing.test_sliceaware_classifier.sfs",
    "test.slicing.test_sliceaware_classifier.torch",
    "torch.nn.Linear",
    "torch.nn.ReLU",
    "torch.nn.Sequential",
    "types.SimpleNamespace"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.SliceCombinerTest.test_make_slice_dataloader": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "snorkel.classification.DictDataset"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.SliceCombinerTest.test_scores_pipeline": {
  "data": {
   "lineno": 117
  },
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.SliceCombinerTest.test_slice_tasks": {
  "data": {
   "lineno": 75
  },
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.create_dataset": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "snorkel.classification.DictDataset"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.f": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "int",
    "snorkel.slicing.slicing_function"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.g": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "int",
    "snorkel.slicing.slicing_function"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_sliceaware_classifier.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "test.slicing.test_sliceaware_classifier.sfs": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "test.slicing.test_sliceaware_classifier.slicing_function": {
  "data": {
   "shadows": "snorkel.slicing.slicing_function"
  },
  "type": "import"
 },
 "test.slicing.test_sliceaware_classifier.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "test.slicing.test_sliceaware_classifier.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.slicing.test_utils": {
  "data": {},
  "type": "module"
 },
 "test.slicing.test_utils.DictDataLoader": {
  "data": {
   "shadows": "snorkel.classification.DictDataLoader"
  },
  "type": "import"
 },
 "test.slicing.test_utils.DictDataset": {
  "data": {
   "shadows": "snorkel.classification.DictDataset"
  },
  "type": "import"
 },
 "test.slicing.test_utils.Operation": {
  "data": {
   "shadows": "snorkel.classification.Operation"
  },
  "type": "import"
 },
 "test.slicing.test_utils.PandasSFApplier": {
  "data": {
   "shadows": "snorkel.slicing.PandasSFApplier"
  },
  "type": "import"
 },
 "test.slicing.test_utils.Task": {
  "data": {
   "shadows": "snorkel.classification.Task"
  },
  "type": "import"
 },
 "test.slicing.test_utils.UtilsTest": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "test.slicing.test_utils.unittest"
   ]
  },
  "type": "class"
 },
 "test.slicing.test_utils.UtilsTest.test_add_slice_labels": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "create_dummy_task",
    "len",
    "pandas.DataFrame",
    "snorkel.classification.DictDataLoader",
    "snorkel.classification.DictDataset",
    "snorkel.slicing.PandasSFApplier",
    "snorkel.slicing.add_slice_labels",
    "test.slicing.test_utils.f",
    "test.slicing.test_utils.torch"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_utils.UtilsTest.test_convert_to_slice_tasks": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "create_dummy_task",
    "len",
    "snorkel.slicing.convert_to_slice_tasks"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_utils.add_slice_labels": {
  "data": {
   "shadows": "snorkel.slicing.add_slice_labels"
  },
  "type": "import"
 },
 "test.slicing.test_utils.convert_to_slice_tasks": {
  "data": {
   "shadows": "snorkel.slicing.convert_to_slice_tasks"
  },
  "type": "import"
 },
 "test.slicing.test_utils.create_dummy_task": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "snorkel.classification.Operation",
    "snorkel.classification.Task",
    "torch.nn.Linear",
    "torch.nn.ModuleDict"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_utils.f": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "snorkel.slicing.slicing_function"
   ]
  },
  "type": "function"
 },
 "test.slicing.test_utils.nn": {
  "data": {
   "shadows": "torch.nn"
  },
  "type": "import"
 },
 "test.slicing.test_utils.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "test.slicing.test_utils.slicing_function": {
  "data": {
   "shadows": "snorkel.slicing.slicing_function"
  },
  "type": "import"
 },
 "test.slicing.test_utils.torch": {
  "data": {
   "shadows": "torch"
  },
  "type": "import"
 },
 "test.slicing.test_utils.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.synthetic": {
  "data": {},
  "type": "module"
 },
 "test.synthetic.test_synthetic_data": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "test.synthetic.test_synthetic_data.unittest"
   ]
  },
  "type": "module"
 },
 "test.synthetic.test_synthetic_data.LFAnalysis": {
  "data": {
   "shadows": "snorkel.labeling.LFAnalysis"
  },
  "type": "import"
 },
 "test.synthetic.test_synthetic_data.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "test.synthetic.test_synthetic_data.TestGenerateSimpleLabelMatrix": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "test.synthetic.test_synthetic_data.unittest"
   ]
  },
  "type": "class"
 },
 "test.synthetic.test_synthetic_data.TestGenerateSimpleLabelMatrix._test_generate_L": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "int",
    "numpy.random.seed",
    "numpy.testing.assert_array_almost_equal",
    "snorkel.labeling.LFAnalysis",
    "snorkel.synthetic.synthetic_data.generate_simple_label_matrix",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "test.synthetic.test_synthetic_data.TestGenerateSimpleLabelMatrix.setUp": {
  "data": {
   "lineno": 13
  },
  "type": "function"
 },
 "test.synthetic.test_synthetic_data.TestGenerateSimpleLabelMatrix.test_generate_L": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "test.synthetic.test_synthetic_data.TestGenerateSimpleLabelMatrix.test_generate_L_multiclass": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "test.synthetic.test_synthetic_data.generate_simple_label_matrix": {
  "data": {
   "shadows": "snorkel.synthetic.synthetic_data.generate_simple_label_matrix"
  },
  "type": "import"
 },
 "test.synthetic.test_synthetic_data.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.synthetic.test_synthetic_data.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.utils": {
  "data": {},
  "type": "module"
 },
 "test.utils.test_config_utils": {
  "data": {},
  "type": "module"
 },
 "test.utils.test_config_utils.BarConfig": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "int",
    "snorkel.types.Config",
    "test.utils.test_config_utils.FooConfig"
   ]
  },
  "type": "class"
 },
 "test.utils.test_config_utils.Config": {
  "data": {
   "shadows": "snorkel.types.Config"
  },
  "type": "import"
 },
 "test.utils.test_config_utils.FooConfig": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "float",
    "snorkel.types.Config"
   ]
  },
  "type": "class"
 },
 "test.utils.test_config_utils.UtilsTest": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "test.utils.test_config_utils.unittest"
   ]
  },
  "type": "class"
 },
 "test.utils.test_config_utils.UtilsTest.test_merge_config": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "snorkel.utils.config_utils.merge_config",
    "test.utils.test_config_utils.BarConfig"
   ]
  },
  "type": "function"
 },
 "test.utils.test_config_utils.merge_config": {
  "data": {
   "shadows": "snorkel.utils.config_utils.merge_config"
  },
  "type": "import"
 },
 "test.utils.test_config_utils.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.utils.test_core": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.array",
    "test.utils.test_core.unittest"
   ]
  },
  "type": "module"
 },
 "test.utils.test_core.PREDS": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "test.utils.test_core.PREDS_ROUND": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "test.utils.test_core.PROBS": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "test.utils.test_core.UtilsTest": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "test.utils.test_core.unittest"
   ]
  },
  "type": "class"
 },
 "test.utils.test_core.UtilsTest.test_filter_labels": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_equal",
    "snorkel.utils.filter_labels"
   ]
  },
  "type": "function"
 },
 "test.utils.test_core.UtilsTest.test_filter_labels_probs": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.testing.assert_array_equal",
    "snorkel.utils.filter_labels"
   ]
  },
  "type": "function"
 },
 "test.utils.test_core.UtilsTest.test_preds_to_probs": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.testing.assert_array_equal",
    "snorkel.utils.preds_to_probs",
    "test.utils.test_core.PREDS",
    "test.utils.test_core.PREDS_ROUND"
   ]
  },
  "type": "function"
 },
 "test.utils.test_core.UtilsTest.test_probs_to_preds": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "max",
    "min",
    "numpy.array",
    "numpy.testing.assert_array_equal",
    "range",
    "snorkel.utils.probs_to_preds",
    "test.utils.test_core.PREDS",
    "test.utils.test_core.PROBS"
   ]
  },
  "type": "function"
 },
 "test.utils.test_core.UtilsTest.test_to_int_label_array": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "numpy.testing.assert_array_equal",
    "snorkel.utils.to_int_label_array"
   ]
  },
  "type": "function"
 },
 "test.utils.test_core.filter_labels": {
  "data": {
   "shadows": "snorkel.utils.filter_labels"
  },
  "type": "import"
 },
 "test.utils.test_core.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "test.utils.test_core.preds_to_probs": {
  "data": {
   "shadows": "snorkel.utils.preds_to_probs"
  },
  "type": "import"
 },
 "test.utils.test_core.probs_to_preds": {
  "data": {
   "shadows": "snorkel.utils.probs_to_preds"
  },
  "type": "import"
 },
 "test.utils.test_core.to_int_label_array": {
  "data": {
   "shadows": "snorkel.utils.to_int_label_array"
  },
  "type": "import"
 },
 "test.utils.test_core.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "test.utils.test_data_operators": {
  "data": {},
  "type": "module"
 },
 "test.utils.test_data_operators.DataOperatorsTest": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "test.utils.test_data_operators.unittest"
   ]
  },
  "type": "class"
 },
 "test.utils.test_data_operators.DataOperatorsTest.test_check_unique_names": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "ValueError",
    "snorkel.utils.data_operators.check_unique_names"
   ]
  },
  "type": "function"
 },
 "test.utils.test_data_operators.check_unique_names": {
  "data": {
   "shadows": "snorkel.utils.data_operators.check_unique_names"
  },
  "type": "import"
 },
 "test.utils.test_data_operators.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 }
}