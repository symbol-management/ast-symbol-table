{
 "pyproprop": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pyproprop.format_str_case": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pyproprop.format_str_case.format_str_case": {
  "lineno": 56,
  "symbols_in_volume": [
   "re.sub"
  ],
  "type": "function"
 },
 "pyproprop.format_str_case.format_str_hyphen_case": {
  "lineno": 328,
  "symbols_in_volume": [
   "re.sub"
  ],
  "type": "function"
 },
 "pyproprop.format_str_case.format_str_lower_case": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.format_str_case.format_str_pascal_case": {
  "lineno": 280,
  "symbols_in_volume": [
   "re.sub",
   "titlecase.titlecase"
  ],
  "type": "function"
 },
 "pyproprop.format_str_case.format_str_snake_case": {
  "lineno": 237,
  "symbols_in_volume": [
   "re.sub"
  ],
  "type": "function"
 },
 "pyproprop.format_str_case.format_str_start_case": {
  "lineno": 192,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.format_str_case.format_str_title_case": {
  "lineno": 158,
  "symbols_in_volume": [
   "titlecase.titlecase"
  ],
  "type": "function"
 },
 "pyproprop.format_str_case.format_str_upper_case": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.named_iterable": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pyproprop.named_iterable.make_iterable": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.named_iterable.named_iterable": {
  "lineno": 21,
  "symbols_in_volume": [
   "collections.namedtuple",
   "sympy.sympify"
  ],
  "type": "function"
 },
 "pyproprop.processed_property": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pyproprop.processed_property.processed_property": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.apply_method": {
  "lineno": 423,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.cast_type": {
  "lineno": 207,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_at_least": {
  "lineno": 363,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_at_least.at_least_lambda": {
  "lineno": 364,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_at_most": {
  "lineno": 369,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_at_most.at_most_lambda": {
  "lineno": 370,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_bounds": {
  "lineno": 482,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.int64",
   "numpy.isclose"
  ],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_comparison": {
  "lineno": 381,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_equal_to": {
  "lineno": 375,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_equal_to.equal_to_lambda": {
  "lineno": 376,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_greater_than": {
  "lineno": 357,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_greater_than.greater_than_lambda": {
  "lineno": 358,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_len": {
  "lineno": 403,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_less_than": {
  "lineno": 351,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_less_than.less_than_lambda": {
  "lineno": 352,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_max": {
  "lineno": 316,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_min": {
  "lineno": 281,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_options": {
  "lineno": 237,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.check_type": {
  "lineno": 170,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.error_check_option_kwarg": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.parse_kwarg": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.process_optimisable": {
  "lineno": 440,
  "symbols_in_volume": [
   "numbers.Real",
   "typing.Iterable"
  ],
  "type": "function"
 },
 "pyproprop.processed_property.processed_property.prop": {
  "lineno": 122,
  "symbols_in_volume": [
   "typing.Iterable"
  ],
  "type": "function"
 },
 "pyproprop.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pyproprop.utils.format_as_iterable": {
  "lineno": 119,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.utils.format_for_output": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.utils.format_multiple_items_for_output": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pyproprop.utils.generate_name_description_error_message": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.conftest": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.conftest.TestProcessedProperties": {
  "lineno": 10,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.conftest.TestProcessedProperties.TestProcessedProperties": {
  "lineno": 14,
  "symbols_in_volume": [
   "pyproprop.processed_property",
   "typing.Iterable"
  ],
  "type": "class"
 },
 "tests.conftest.TestProcessedProperties.TestProcessedProperties.__init__": {
  "lineno": 117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property.test_cast": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property.test_compare": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property.test_compare.compare_equal_float_fixture": {
  "lineno": 113,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.compare_equal_int_fixture": {
  "lineno": 140,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.compare_exclusive_float_fixture": {
  "lineno": 95,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.compare_exclusive_int_fixture": {
  "lineno": 122,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.compare_fixture": {
  "lineno": 149,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.compare_inclusive_float_fixture": {
  "lineno": 104,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.compare_inclusive_int_fixture": {
  "lineno": 131,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.make_fixture": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.make_fixture.ClassWithComparisonProcessedProperties": {
  "lineno": 62,
  "symbols_in_volume": [
   "pyproprop.processed_property"
  ],
  "type": "class"
 },
 "tests.unit.processed_property.test_compare.make_fixture.ClassWithComparisonProcessedProperties.__init__": {
  "lineno": 78,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.test_invalid_equal_float_comparison_raises_error": {
  "lineno": 260,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.test_invalid_equal_int_comparison_raises_error": {
  "lineno": 284,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.test_invalid_exclusive_float_comparison_raises_error": {
  "lineno": 178,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.test_invalid_exclusive_int_comparison_raises_error": {
  "lineno": 196,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.test_invalid_inclusive_float_comparison_raises_error": {
  "lineno": 213,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.test_invalid_inclusive_int_comparison_raises_error": {
  "lineno": 237,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.test_valid_init_values_do_not_raise_error": {
  "lineno": 155,
  "symbols_in_volume": [
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_compare.test_valid_setter_values_do_not_raise_error": {
  "lineno": 167,
  "symbols_in_volume": [
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property.test_general.test_boolean_type_checking": {
  "lineno": 77,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.iterables",
   "hypothesis.strategies.lists",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.text",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_bound_checking": {
  "lineno": 160,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.floats",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_cast_to_string": {
  "lineno": 201,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_error_message_for_options": {
  "lineno": 290,
  "symbols_in_volume": [
   "hypothesis.assume",
   "hypothesis.given",
   "hypothesis.strategies.integers",
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_float_type_checking": {
  "lineno": 51,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.iterables",
   "hypothesis.strategies.lists",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.text",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_integer_type_checking": {
  "lineno": 14,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.iterables",
   "hypothesis.strategies.lists",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.text",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_iterable_allowed_checking": {
  "lineno": 175,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.iterables"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_iterable_type_checking": {
  "lineno": 64,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.iterables",
   "hypothesis.strategies.lists",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.text",
   "pytest.raises",
   "typing.Iterable"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_length_checking": {
  "lineno": 89,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.lists",
   "numpy.isclose",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_max_value_checking": {
  "lineno": 102,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.floats",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_max_value_excl_checking": {
  "lineno": 130,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.floats",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_min_value_checking": {
  "lineno": 116,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.floats",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_min_value_excl_checking": {
  "lineno": 145,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.floats",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_optimisable_arg_passing": {
  "lineno": 214,
  "symbols_in_volume": [
   "hypothesis.example",
   "hypothesis.given",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.tuples",
   "numpy.isclose",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_optimisable_error_handling": {
  "lineno": 253,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.lists",
   "hypothesis.strategies.text",
   "hypothesis.strategies.tuples",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_optimisable_error_messaging_for_non_64_bit_bounds": {
  "lineno": 235,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.tuples",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_optional_default_object_return": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_optional_return": {
  "lineno": 184,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.integers"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_options_settable": {
  "lineno": 282,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.just",
   "hypothesis.strategies.one_of"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_string_type_checking": {
  "lineno": 39,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.iterables",
   "hypothesis.strategies.lists",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.text",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_general.test_type_checking_correct_when_property_updated": {
  "lineno": 26,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_iterable": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property.test_optimisable": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property.test_option": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property.test_option.ClassWithOptionProperties": {
  "lineno": 32,
  "symbols_in_volume": [
   "pyproprop.processed_property"
  ],
  "type": "class"
 },
 "tests.unit.processed_property.test_option.ClassWithOptionProperties.__init__": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.processed_property.test_option.test_correct_initialisation_class_with_option_properties": {
  "lineno": 192,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.processed_property.test_option.test_fixture": {
  "lineno": 104,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_option.test_instantiation_class_with_option_properties": {
  "lineno": 110,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.processed_property.test_option.test_missing_option_kwarg_with_unsupported_option": {
  "lineno": 131,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_option.test_missing_option_kwarg_with_unsupported_option.ClassWithSingleOptionAllUnsupportedOptionProperties": {
  "lineno": 138,
  "symbols_in_volume": [
   "pyproprop.processed_property"
  ],
  "type": "class"
 },
 "tests.unit.processed_property.test_option.test_multiple_option_all_are_unsupported_option": {
  "lineno": 164,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_option.test_multiple_option_all_are_unsupported_option.ClassWithMultipleOptionAllUnsupportedOptionProperties": {
  "lineno": 172,
  "symbols_in_volume": [
   "pyproprop.processed_property"
  ],
  "type": "class"
 },
 "tests.unit.processed_property.test_option.test_no_option_with_unsupported_option": {
  "lineno": 147,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_option.test_no_option_with_unsupported_option.ClassWithSingleOptionAllUnsupportedOptionProperties": {
  "lineno": 154,
  "symbols_in_volume": [
   "pyproprop.processed_property"
  ],
  "type": "class"
 },
 "tests.unit.processed_property.test_option.test_option_creation_from_dict_keys": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.processed_property.test_option.test_option_creation_from_dict_keys.ClassWithMultipleOptionAllUnsupportedOptionProperties": {
  "lineno": 208,
  "symbols_in_volume": [
   "pyproprop.processed_property"
  ],
  "type": "class"
 },
 "tests.unit.processed_property.test_option.test_option_creation_from_dict_keys.__init__": {
  "lineno": 222,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.processed_property.test_option.test_raises_value_error_with_invalid_option": {
  "lineno": 199,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_option.test_single_option_all_unsupported_option": {
  "lineno": 114,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_option.test_single_option_all_unsupported_option.ClassWithSingleOptionAllUnsupportedOptionProperties": {
  "lineno": 121,
  "symbols_in_volume": [
   "pyproprop.processed_property"
  ],
  "type": "class"
 },
 "tests.unit.processed_property.test_parse_kwargs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property.test_post_method": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property.test_str_format": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property.test_str_format.test_fixture": {
  "lineno": 112,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_str_format.test_fixture.ClassWithStringFormatProperties": {
  "lineno": 116,
  "symbols_in_volume": [
   "pyproprop.processed_property"
  ],
  "type": "class"
 },
 "tests.unit.processed_property.test_str_format.test_fixture.ClassWithStringFormatProperties.__init__": {
  "lineno": 149,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.processed_property.test_str_format.test_formatted_string_expected_result": {
  "lineno": 181,
  "symbols_in_volume": [
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_type_repr_error_msg": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.processed_property.test_type_repr_error_msg.ClassWithOptionsProperty": {
  "lineno": 46,
  "symbols_in_volume": [
   "pyproprop.processed_property"
  ],
  "type": "class"
 },
 "tests.unit.processed_property.test_type_repr_error_msg.ClassWithOptionsProperty.__init__": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.processed_property.test_type_repr_error_msg.test_fixture": {
  "lineno": 73,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_type_repr_error_msg.test_invalid_options_raise_error": {
  "lineno": 94,
  "symbols_in_volume": [
   "hypothesis.assume",
   "hypothesis.given",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.text",
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_type_repr_error_msg.test_unsupported_options_raise_error": {
  "lineno": 85,
  "symbols_in_volume": [
   "pytest.mark.parametrize",
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.processed_property.test_type_repr_error_msg.test_valid_options_set_correctly": {
  "lineno": 79,
  "symbols_in_volume": [
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "tests.unit.test_named_iterable": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.test_named_iterable.TestNamedIterable": {
  "lineno": 13,
  "symbols_in_volume": [
   "pytest.mark.usefixtures"
  ],
  "type": "class"
 },
 "tests.unit.test_named_iterable.TestNamedIterable._named_iterable_fixture": {
  "lineno": 16,
  "symbols_in_volume": [
   "pyproprop.named_iterable",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.test_named_iterable.TestNamedIterable.test_dot_indexing": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.test_named_iterable.TestNamedIterable.test_not_named_dot_indexing_raises_error": {
  "lineno": 33,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.test_named_iterable.test_invalid_identifiers": {
  "lineno": 78,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.iterables",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.text",
   "pyproprop.named_iterable",
   "pytest.raises",
   "string.digits",
   "string.punctuation",
   "string.whitespace"
  ],
  "type": "function"
 },
 "tests.unit.test_named_iterable.test_make_named_iterable_not_iterable": {
  "lineno": 40,
  "symbols_in_volume": [
   "pyproprop.named_iterable"
  ],
  "type": "function"
 },
 "tests.unit.test_named_iterable.test_named_iterable_creation_as_mapping": {
  "lineno": 44,
  "symbols_in_volume": [
   "hypothesis.assume",
   "hypothesis.given",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.iterables",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.text",
   "keyword.iskeyword",
   "pyproprop.named_iterable",
   "string.ascii_letters"
  ],
  "type": "function"
 },
 "tests.unit.test_named_iterable.test_named_iterable_creation_data_object": {
  "lineno": 58,
  "symbols_in_volume": [
   "hypothesis.assume",
   "hypothesis.given",
   "hypothesis.strategies.iterables",
   "hypothesis.strategies.text",
   "keyword.iskeyword",
   "pyproprop.named_iterable",
   "string.ascii_letters"
  ],
  "type": "function"
 },
 "tests.unit.test_named_iterable.test_named_iterable_creation_keyword_raises_error": {
  "lineno": 67,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.iterables",
   "hypothesis.strategies.just",
   "hypothesis.strategies.one_of",
   "keyword.kwlist",
   "pyproprop.named_iterable",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.unit.test_str_format_function": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.test_str_format_function.test_formatted_string_method_expected_result_with_processing": {
  "lineno": 112,
  "symbols_in_volume": [
   "pyproprop.format_str_case",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "tests.unit.test_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.unit.test_utils.ClassWithProcessedProperties": {
  "lineno": 10,
  "symbols_in_volume": [
   "pyproprop.processed_property"
  ],
  "type": "class"
 },
 "tests.unit.test_utils.ClassWithProcessedProperties.__init__": {
  "lineno": 23,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.unit.test_utils.test_fixture": {
  "lineno": 31,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "tests.unit.test_utils.test_generate_name_description_error_message_min_max_prop": {
  "lineno": 56,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 },
 "tests.unit.test_utils.test_generate_name_description_error_message_options_prop": {
  "lineno": 36,
  "symbols_in_volume": [
   "pytest.raises",
   "re.escape"
  ],
  "type": "function"
 }
}