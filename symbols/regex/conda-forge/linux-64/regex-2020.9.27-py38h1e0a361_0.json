{
 "*": {
  "data": {
   "imports": [
    "regex._regex_core"
   ]
  },
  "type": "star-import"
 },
 "regex": {
  "data": {},
  "type": "module"
 },
 "regex.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "regex._regex_core": {
  "data": {
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "frozenset",
    "len",
    "max",
    "regex._regex.get_code_size",
    "regex._regex.get_properties",
    "regex._regex_core.ALNUM",
    "regex._regex_core.ALPHA",
    "regex._regex_core.BITS_PER_CODE",
    "regex._regex_core.BYTES_PER_CODE",
    "regex._regex_core.Boundary",
    "regex._regex_core.DIGITS",
    "regex._regex_core.DefaultBoundary",
    "regex._regex_core.DefaultEndOfWord",
    "regex._regex_core.DefaultStartOfWord",
    "regex._regex_core.EndOfString",
    "regex._regex_core.EndOfWord",
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.Failure",
    "regex._regex_core.Keep",
    "regex._regex_core.NOCASE",
    "regex._regex_core.Namespace",
    "regex._regex_core.OP",
    "regex._regex_core.OPCODES",
    "regex._regex_core.POSITION_ESCAPES",
    "regex._regex_core.PROPERTIES",
    "regex._regex_core.PROPERTY_NAMES",
    "regex._regex_core.Prune",
    "regex._regex_core.Skip",
    "regex._regex_core.StartOfString",
    "regex._regex_core.StartOfWord",
    "regex._regex_core.WORD_POSITION_ESCAPES",
    "regex._regex_core._ALL_ENCODINGS",
    "regex._regex_core._ALL_VERSIONS",
    "regex._regex_core.lookup_property",
    "regex._regex_core.name",
    "regex._regex_core.string",
    "set",
    "setattr"
   ]
  },
  "type": "module"
 },
 "regex._regex_core.ALNUM": {
  "data": {
   "lineno": 107
  },
  "type": "constant"
 },
 "regex._regex_core.ALPHA": {
  "data": {
   "lineno": 105
  },
  "type": "constant"
 },
 "regex._regex_core.Any": {
  "data": {
   "lineno": 1915,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Any._compile": {
  "data": {
   "lineno": 1922,
   "symbols_in_volume": [
    "regex._regex_core.FUZZY_OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Any.dump": {
  "data": {
   "lineno": 1928,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Any.has_simple_start": {
  "data": {
   "lineno": 1919
  },
  "type": "function"
 },
 "regex._regex_core.Any.max_width": {
  "data": {
   "lineno": 1931
  },
  "type": "function"
 },
 "regex._regex_core.AnyAll": {
  "data": {
   "lineno": 1934,
   "symbols_in_volume": [
    "regex._regex_core.Any",
    "regex._regex_core.OP"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.AnyU": {
  "data": {
   "lineno": 1938,
   "symbols_in_volume": [
    "regex._regex_core.Any",
    "regex._regex_core.OP"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Atomic": {
  "data": {
   "lineno": 1942,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Atomic.__eq__": {
  "data": {
   "lineno": 1988,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.__init__": {
  "data": {
   "lineno": 1943,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Atomic._compile": {
  "data": {
   "lineno": 1977,
   "symbols_in_volume": [
    "regex._regex_core.OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.can_be_affix": {
  "data": {
   "lineno": 1965
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.contains_group": {
  "data": {
   "lineno": 1968
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.dump": {
  "data": {
   "lineno": 1981,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.fix_groups": {
  "data": {
   "lineno": 1947
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.get_firstset": {
  "data": {
   "lineno": 1971
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.get_required_string": {
  "data": {
   "lineno": 1995
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.has_simple_start": {
  "data": {
   "lineno": 1974
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.is_empty": {
  "data": {
   "lineno": 1985
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.max_width": {
  "data": {
   "lineno": 1992
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.optimise": {
  "data": {
   "lineno": 1950
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.pack_characters": {
  "data": {
   "lineno": 1957
  },
  "type": "function"
 },
 "regex._regex_core.Atomic.remove_captures": {
  "data": {
   "lineno": 1961
  },
  "type": "function"
 },
 "regex._regex_core.BITS_PER_CODE": {
  "data": {
   "lineno": 117
  },
  "type": "constant"
 },
 "regex._regex_core.BYTES_PER_CODE": {
  "data": {
   "lineno": 116
  },
  "type": "constant"
 },
 "regex._regex_core.Boundary": {
  "data": {
   "lineno": 1998,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Branch": {
  "data": {
   "lineno": 2002,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Branch.__eq__": {
  "data": {
   "lineno": 2385,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch.__init__": {
  "data": {
   "lineno": 2003,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._add_precheck": {
  "data": {
   "lineno": 2046,
   "symbols_in_volume": [
    "Character",
    "regex._regex_core.NOCASE",
    "regex._regex_core._check_firstset",
    "set",
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._can_split": {
  "data": {
   "lineno": 2198,
   "symbols_in_volume": [
    "regex._regex_core.Branch",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._can_split_rev": {
  "data": {
   "lineno": 2223,
   "symbols_in_volume": [
    "len",
    "regex._regex_core.Branch",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._compile": {
  "data": {
   "lineno": 2085,
   "symbols_in_volume": [
    "regex._regex_core.OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._flatten_branches": {
  "data": {
   "lineno": 2102,
   "symbols_in_volume": [
    "isinstance",
    "regex._regex_core.Branch",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._flush_char_prefix": {
  "data": {
   "lineno": 2310,
   "symbols_in_volume": [
    "Character",
    "Sequence",
    "len",
    "regex._regex_core.Branch",
    "regex._regex_core.make_sequence",
    "sorted",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._flush_set_members": {
  "data": {
   "lineno": 2336,
   "symbols_in_volume": [
    "SetUnion",
    "len",
    "list",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._is_folded": {
  "data": {
   "lineno": 2360,
   "symbols_in_volume": [
    "Character",
    "chr",
    "isinstance",
    "len",
    "regex._regex.fold_case",
    "regex._regex.get_expand_on_folding",
    "regex._regex_core.FULL_CASE_FOLDING",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._is_full_case": {
  "data": {
   "lineno": 2351,
   "symbols_in_volume": [
    "Character",
    "isinstance",
    "len",
    "regex._regex_core.FULLIGNORECASE",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._is_simple_character": {
  "data": {
   "lineno": 2278,
   "symbols_in_volume": [
    "Character",
    "isinstance",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._merge_common_prefixes": {
  "data": {
   "lineno": 2250,
   "symbols_in_volume": [
    "Sequence",
    "collections.defaultdict",
    "isinstance",
    "len",
    "list",
    "regex._regex_core.Branch",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._reduce_to_set": {
  "data": {
   "lineno": 2282,
   "symbols_in_volume": [
    "Character",
    "Property",
    "isinstance",
    "regex._regex_core.Branch",
    "regex._regex_core.NOCASE",
    "set",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._split_common_prefix": {
  "data": {
   "lineno": 2115,
   "symbols_in_volume": [
    "Sequence",
    "all",
    "isinstance",
    "len",
    "min",
    "regex._regex_core.Branch",
    "regex._regex_core.make_sequence",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch._split_common_suffix": {
  "data": {
   "lineno": 2157,
   "symbols_in_volume": [
    "Sequence",
    "all",
    "isinstance",
    "len",
    "min",
    "regex._regex_core.Branch",
    "regex._regex_core.make_sequence",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch.can_be_affix": {
  "data": {
   "lineno": 2072,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch.contains_group": {
  "data": {
   "lineno": 2075,
   "symbols_in_volume": [
    "any"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch.dump": {
  "data": {
   "lineno": 2095,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch.fix_groups": {
  "data": {
   "lineno": 2007
  },
  "type": "function"
 },
 "regex._regex_core.Branch.get_firstset": {
  "data": {
   "lineno": 2078,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch.is_atomic": {
  "data": {
   "lineno": 2069,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch.is_empty": {
  "data": {
   "lineno": 2382,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch.max_width": {
  "data": {
   "lineno": 2388,
   "symbols_in_volume": [
    "max"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch.optimise": {
  "data": {
   "lineno": 2011,
   "symbols_in_volume": [
    "Sequence",
    "len",
    "regex._regex_core.Branch",
    "regex._regex_core.make_sequence"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Branch.pack_characters": {
  "data": {
   "lineno": 2061
  },
  "type": "function"
 },
 "regex._regex_core.Branch.remove_captures": {
  "data": {
   "lineno": 2065
  },
  "type": "function"
 },
 "regex._regex_core.CASE_FLAGS": {
  "data": {
   "lineno": 129
  },
  "type": "constant"
 },
 "regex._regex_core.CASE_FLAGS_COMBINATIONS": {
  "data": {
   "lineno": 135
  },
  "type": "constant"
 },
 "regex._regex_core.CASE_TEXT": {
  "data": {
   "lineno": 1809
  },
  "type": "constant"
 },
 "regex._regex_core.CHARACTER_ESCAPES": {
  "data": {
   "lineno": 4416
  },
  "type": "constant"
 },
 "regex._regex_core.CHARSET_ESCAPES": {
  "data": {
   "lineno": 4427
  },
  "type": "constant"
 },
 "regex._regex_core.CallGroup": {
  "data": {
   "lineno": 2391,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.CallGroup.__del__": {
  "data": {
   "lineno": 2434
  },
  "type": "function"
 },
 "regex._regex_core.CallGroup.__eq__": {
  "data": {
   "lineno": 2428,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.CallGroup.__init__": {
  "data": {
   "lineno": 2392,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.CallGroup._compile": {
  "data": {
   "lineno": 2422,
   "symbols_in_volume": [
    "regex._regex_core.OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.CallGroup.dump": {
  "data": {
   "lineno": 2425,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.CallGroup.fix_groups": {
  "data": {
   "lineno": 2400,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "int",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.CallGroup.max_width": {
  "data": {
   "lineno": 2431,
   "symbols_in_volume": [
    "regex._regex_core.UNLIMITED"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.CallGroup.remove_captures": {
  "data": {
   "lineno": 2419,
   "symbols_in_volume": [
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.CallRef": {
  "data": {
   "lineno": 2437,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.CallRef.__init__": {
  "data": {
   "lineno": 2438
  },
  "type": "function"
 },
 "regex._regex_core.CallRef._compile": {
  "data": {
   "lineno": 2442,
   "symbols_in_volume": [
    "regex._regex_core.OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Character": {
  "data": {
   "lineno": 2446,
   "symbols_in_volume": [
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.NOCASE",
    "regex._regex_core.OP",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Character.__init__": {
  "data": {
   "lineno": 2453,
   "symbols_in_volume": [
    "bool",
    "chr",
    "regex._regex.fold_case",
    "regex._regex_core.CASE_FLAGS_COMBINATIONS",
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.FULL_CASE_FOLDING",
    "regex._regex_core.NOCASE",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Character._compile": {
  "data": {
   "lineno": 2482,
   "symbols_in_volume": [
    "PrecompiledCode",
    "String",
    "len",
    "ord",
    "regex._regex_core.Branch",
    "regex._regex_core.FUZZY_OP",
    "regex._regex_core.POSITIVE_OP",
    "regex._regex_core.ZEROWIDTH_OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Character.dump": {
  "data": {
   "lineno": 2501,
   "symbols_in_volume": [
    "ascii",
    "chr",
    "print",
    "regex._regex_core.CASE_TEXT",
    "regex._regex_core.INDENT",
    "regex._regex_core.POS_TEXT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Character.get_firstset": {
  "data": {
   "lineno": 2476,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Character.get_required_string": {
  "data": {
   "lineno": 2512,
   "symbols_in_volume": [
    "ord",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Character.has_simple_start": {
  "data": {
   "lineno": 2479
  },
  "type": "function"
 },
 "regex._regex_core.Character.matches": {
  "data": {
   "lineno": 2506
  },
  "type": "function"
 },
 "regex._regex_core.Character.max_width": {
  "data": {
   "lineno": 2509,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Character.optimise": {
  "data": {
   "lineno": 2473
  },
  "type": "function"
 },
 "regex._regex_core.Character.rebuild": {
  "data": {
   "lineno": 2470,
   "symbols_in_volume": [
    "regex._regex_core.Character"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Conditional": {
  "data": {
   "lineno": 2520,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Conditional.__del__": {
  "data": {
   "lineno": 2606
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.__eq__": {
  "data": {
   "lineno": 2599,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.__init__": {
  "data": {
   "lineno": 2521,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Conditional._compile": {
  "data": {
   "lineno": 2577,
   "symbols_in_volume": [
    "regex._regex_core.OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.can_be_affix": {
  "data": {
   "lineno": 2567
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.contains_group": {
  "data": {
   "lineno": 2570
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.dump": {
  "data": {
   "lineno": 2589,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.fix_groups": {
  "data": {
   "lineno": 2529,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "int",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.get_firstset": {
  "data": {
   "lineno": 2573
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.is_atomic": {
  "data": {
   "lineno": 2564
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.is_empty": {
  "data": {
   "lineno": 2596
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.max_width": {
  "data": {
   "lineno": 2603,
   "symbols_in_volume": [
    "max"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.optimise": {
  "data": {
   "lineno": 2549,
   "symbols_in_volume": [
    "regex._regex_core.Conditional"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.pack_characters": {
  "data": {
   "lineno": 2555
  },
  "type": "function"
 },
 "regex._regex_core.Conditional.remove_captures": {
  "data": {
   "lineno": 2560
  },
  "type": "function"
 },
 "regex._regex_core.DEFAULT_FLAGS": {
  "data": {
   "lineno": 98
  },
  "type": "constant"
 },
 "regex._regex_core.DEFAULT_VERSION": {
  "data": {
   "lineno": 92
  },
  "type": "constant"
 },
 "regex._regex_core.DIGITS": {
  "data": {
   "lineno": 106
  },
  "type": "constant"
 },
 "regex._regex_core.DefaultBoundary": {
  "data": {
   "lineno": 2609,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.DefaultEndOfWord": {
  "data": {
   "lineno": 2613,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.DefaultStartOfWord": {
  "data": {
   "lineno": 2617,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.EndOfLine": {
  "data": {
   "lineno": 2621,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.EndOfLineU": {
  "data": {
   "lineno": 2625,
   "symbols_in_volume": [
    "regex._regex_core.EndOfLine",
    "regex._regex_core.OP"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.EndOfString": {
  "data": {
   "lineno": 2629,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.EndOfStringLine": {
  "data": {
   "lineno": 2633,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.EndOfStringLineU": {
  "data": {
   "lineno": 2637,
   "symbols_in_volume": [
    "regex._regex_core.EndOfStringLine",
    "regex._regex_core.OP"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.EndOfWord": {
  "data": {
   "lineno": 2641,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.FULLIGNORECASE": {
  "data": {
   "lineno": 131
  },
  "type": "constant"
 },
 "regex._regex_core.FULL_CASE_FOLDING": {
  "data": {
   "lineno": 133
  },
  "type": "constant"
 },
 "regex._regex_core.FUZZY_OP": {
  "data": {
   "lineno": 1804
  },
  "type": "constant"
 },
 "regex._regex_core.Failure": {
  "data": {
   "lineno": 2645,
   "symbols_in_volume": [
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Failure._compile": {
  "data": {
   "lineno": 2648,
   "symbols_in_volume": [
    "regex._regex_core.OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy": {
  "data": {
   "lineno": 2651,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Fuzzy.__eq__": {
  "data": {
   "lineno": 2744,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy.__init__": {
  "data": {
   "lineno": 2652,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase",
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy._compile": {
  "data": {
   "lineno": 2704,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.REVERSE_OP",
    "regex._regex_core.UNLIMITED",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy._constraints_to_string": {
  "data": {
   "lineno": 2751,
   "symbols_in_volume": [
    "max",
    "min"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy.contains_group": {
  "data": {
   "lineno": 2701
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy.dump": {
  "data": {
   "lineno": 2734,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy.fix_groups": {
  "data": {
   "lineno": 2687
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy.is_atomic": {
  "data": {
   "lineno": 2698
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy.is_empty": {
  "data": {
   "lineno": 2741
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy.max_width": {
  "data": {
   "lineno": 2748,
   "symbols_in_volume": [
    "regex._regex_core.UNLIMITED"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy.pack_characters": {
  "data": {
   "lineno": 2690
  },
  "type": "function"
 },
 "regex._regex_core.Fuzzy.remove_captures": {
  "data": {
   "lineno": 2694
  },
  "type": "function"
 },
 "regex._regex_core.GLOBAL_FLAGS": {
  "data": {
   "lineno": 101
  },
  "type": "constant"
 },
 "regex._regex_core.Grapheme": {
  "data": {
   "lineno": 2784,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Grapheme._compile": {
  "data": {
   "lineno": 2785,
   "symbols_in_volume": [
    "GraphemeBoundary",
    "LazyRepeat",
    "Sequence",
    "regex._regex_core.AnyAll",
    "regex._regex_core.Atomic"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Grapheme.dump": {
  "data": {
   "lineno": 2793,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Grapheme.max_width": {
  "data": {
   "lineno": 2796,
   "symbols_in_volume": [
    "regex._regex_core.UNLIMITED"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.GraphemeBoundary": {
  "data": {
   "lineno": 2799
  },
  "type": "class"
 },
 "regex._regex_core.GraphemeBoundary.compile": {
  "data": {
   "lineno": 2800,
   "symbols_in_volume": [
    "regex._regex_core.OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat": {
  "data": {
   "lineno": 2803,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.GreedyRepeat.__eq__": {
  "data": {
   "lineno": 2871,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.__init__": {
  "data": {
   "lineno": 2807,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat._compile": {
  "data": {
   "lineno": 2845,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.UNLIMITED",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.can_be_affix": {
  "data": {
   "lineno": 2832
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.contains_group": {
  "data": {
   "lineno": 2835
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.dump": {
  "data": {
   "lineno": 2858,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.fix_groups": {
  "data": {
   "lineno": 2813
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.get_firstset": {
  "data": {
   "lineno": 2838
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.get_required_string": {
  "data": {
   "lineno": 2882,
   "symbols_in_volume": [
    "min",
    "regex._regex_core.UNLIMITED"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.is_atomic": {
  "data": {
   "lineno": 2829
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.is_empty": {
  "data": {
   "lineno": 2868
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.max_width": {
  "data": {
   "lineno": 2876,
   "symbols_in_volume": [
    "regex._regex_core.UNLIMITED"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.optimise": {
  "data": {
   "lineno": 2816,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.pack_characters": {
  "data": {
   "lineno": 2821
  },
  "type": "function"
 },
 "regex._regex_core.GreedyRepeat.remove_captures": {
  "data": {
   "lineno": 2825
  },
  "type": "function"
 },
 "regex._regex_core.Group": {
  "data": {
   "lineno": 2925,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Group.__del__": {
  "data": {
   "lineno": 3003
  },
  "type": "function"
 },
 "regex._regex_core.Group.__eq__": {
  "data": {
   "lineno": 2993,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Group.__init__": {
  "data": {
   "lineno": 2926,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Group._compile": {
  "data": {
   "lineno": 2965,
   "symbols_in_volume": [
    "int",
    "regex._regex_core.OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Group.can_be_affix": {
  "data": {
   "lineno": 2953
  },
  "type": "function"
 },
 "regex._regex_core.Group.contains_group": {
  "data": {
   "lineno": 2956
  },
  "type": "function"
 },
 "regex._regex_core.Group.dump": {
  "data": {
   "lineno": 2986,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Group.fix_groups": {
  "data": {
   "lineno": 2934
  },
  "type": "function"
 },
 "regex._regex_core.Group.get_firstset": {
  "data": {
   "lineno": 2959
  },
  "type": "function"
 },
 "regex._regex_core.Group.get_required_string": {
  "data": {
   "lineno": 3000
  },
  "type": "function"
 },
 "regex._regex_core.Group.has_simple_start": {
  "data": {
   "lineno": 2962
  },
  "type": "function"
 },
 "regex._regex_core.Group.is_atomic": {
  "data": {
   "lineno": 2950
  },
  "type": "function"
 },
 "regex._regex_core.Group.max_width": {
  "data": {
   "lineno": 2997
  },
  "type": "function"
 },
 "regex._regex_core.Group.optimise": {
  "data": {
   "lineno": 2938,
   "symbols_in_volume": [
    "regex._regex_core.Group"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Group.pack_characters": {
  "data": {
   "lineno": 2943
  },
  "type": "function"
 },
 "regex._regex_core.Group.remove_captures": {
  "data": {
   "lineno": 2947
  },
  "type": "function"
 },
 "regex._regex_core.HEX_DIGITS": {
  "data": {
   "lineno": 109
  },
  "type": "constant"
 },
 "regex._regex_core.HEX_ESCAPES": {
  "data": {
   "lineno": 139
  },
  "type": "constant"
 },
 "regex._regex_core.INDENT": {
  "data": {
   "lineno": 1801
  },
  "type": "constant"
 },
 "regex._regex_core.Info": {
  "data": {
   "lineno": 4180
  },
  "type": "class"
 },
 "regex._regex_core.Info.__init__": {
  "data": {
   "lineno": 4183,
   "symbols_in_volume": [
    "regex._regex_core.DEFAULT_FLAGS",
    "regex._regex_core.DEFAULT_VERSION",
    "regex._regex_core._ALL_VERSIONS"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Info.close_group": {
  "data": {
   "lineno": 4228
  },
  "type": "function"
 },
 "regex._regex_core.Info.is_open_group": {
  "data": {
   "lineno": 4231,
   "symbols_in_volume": [
    "int",
    "regex._regex_core.DEFAULT_VERSION",
    "regex._regex_core._ALL_VERSIONS"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Info.open_group": {
  "data": {
   "lineno": 4202,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Keep": {
  "data": {
   "lineno": 3006,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.LazyRepeat": {
  "data": {
   "lineno": 3010,
   "symbols_in_volume": [
    "regex._regex_core.GreedyRepeat",
    "regex._regex_core.OP"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Literal": {
  "data": {
   "lineno": 3910,
   "symbols_in_volume": [
    "regex._regex_core.String"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Literal.dump": {
  "data": {
   "lineno": 3911,
   "symbols_in_volume": [
    "ascii",
    "chr",
    "print",
    "regex._regex_core.CASE_TEXT",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAround": {
  "data": {
   "lineno": 3014,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.LookAround.__eq__": {
  "data": {
   "lineno": 3075,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.__init__": {
  "data": {
   "lineno": 3017,
   "symbols_in_volume": [
    "bool",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAround._compile": {
  "data": {
   "lineno": 3055,
   "symbols_in_volume": [
    "int",
    "regex._regex_core.FUZZY_OP",
    "regex._regex_core.OP",
    "regex._regex_core.POSITIVE_OP",
    "regex._regex_core.REVERSE_OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.can_be_affix": {
  "data": {
   "lineno": 3043
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.contains_group": {
  "data": {
   "lineno": 3046
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.dump": {
  "data": {
   "lineno": 3067,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT",
    "regex._regex_core.POS_TEXT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.fix_groups": {
  "data": {
   "lineno": 3023
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.get_firstset": {
  "data": {
   "lineno": 3049,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.is_atomic": {
  "data": {
   "lineno": 3040
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.is_empty": {
  "data": {
   "lineno": 3072
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.max_width": {
  "data": {
   "lineno": 3079
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.optimise": {
  "data": {
   "lineno": 3026,
   "symbols_in_volume": [
    "regex._regex_core.LookAround"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.pack_characters": {
  "data": {
   "lineno": 3033
  },
  "type": "function"
 },
 "regex._regex_core.LookAround.remove_captures": {
  "data": {
   "lineno": 3037
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional": {
  "data": {
   "lineno": 3082,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.LookAroundConditional.__eq__": {
  "data": {
   "lineno": 3157,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.__init__": {
  "data": {
   "lineno": 3085,
   "symbols_in_volume": [
    "bool",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional._compile": {
  "data": {
   "lineno": 3129,
   "symbols_in_volume": [
    "int",
    "regex._regex_core.OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.can_be_affix": {
  "data": {
   "lineno": 3121
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.contains_group": {
  "data": {
   "lineno": 3125
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.dump": {
  "data": {
   "lineno": 3143,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT",
    "regex._regex_core.POS_TEXT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.fix_groups": {
  "data": {
   "lineno": 3093
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.get_required_string": {
  "data": {
   "lineno": 3164
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.is_atomic": {
  "data": {
   "lineno": 3117
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.is_empty": {
  "data": {
   "lineno": 3153
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.max_width": {
  "data": {
   "lineno": 3161,
   "symbols_in_volume": [
    "max"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.optimise": {
  "data": {
   "lineno": 3098,
   "symbols_in_volume": [
    "regex._regex_core.LookAroundConditional"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.pack_characters": {
  "data": {
   "lineno": 3106
  },
  "type": "function"
 },
 "regex._regex_core.LookAroundConditional.remove_captures": {
  "data": {
   "lineno": 3112
  },
  "type": "function"
 },
 "regex._regex_core.NAMED_CHAR_PART": {
  "data": {
   "lineno": 111
  },
  "type": "constant"
 },
 "regex._regex_core.NOCASE": {
  "data": {
   "lineno": 130
  },
  "type": "constant"
 },
 "regex._regex_core.Namespace": {
  "data": {
   "lineno": 227
  },
  "type": "class"
 },
 "regex._regex_core.OCT_DIGITS": {
  "data": {
   "lineno": 108
  },
  "type": "constant"
 },
 "regex._regex_core.OP": {
  "data": {
   "lineno": 230
  },
  "type": "constant"
 },
 "regex._regex_core.OPCODES": {
  "data": {
   "lineno": 142
  },
  "type": "constant"
 },
 "regex._regex_core.POSITION_ESCAPES": {
  "data": {
   "lineno": 4438
  },
  "type": "constant"
 },
 "regex._regex_core.POSITIVE_OP": {
  "data": {
   "lineno": 1802
  },
  "type": "constant"
 },
 "regex._regex_core.POS_TEXT": {
  "data": {
   "lineno": 1808
  },
  "type": "constant"
 },
 "regex._regex_core.PROPERTIES": {
  "data": {
   "lineno": 4402
  },
  "type": "constant"
 },
 "regex._regex_core.PROPERTY_NAMES": {
  "data": {
   "lineno": 4405
  },
  "type": "constant"
 },
 "regex._regex_core.PROPERTY_NAME_PART": {
  "data": {
   "lineno": 112
  },
  "type": "constant"
 },
 "regex._regex_core.ParseError": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.PossessiveRepeat": {
  "data": {
   "lineno": 2895,
   "symbols_in_volume": [
    "regex._regex_core.GreedyRepeat"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.PossessiveRepeat._compile": {
  "data": {
   "lineno": 2899,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.UNLIMITED",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.PossessiveRepeat.dump": {
  "data": {
   "lineno": 2913,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.PossessiveRepeat.is_atomic": {
  "data": {
   "lineno": 2896
  },
  "type": "function"
 },
 "regex._regex_core.PrecompiledCode": {
  "data": {
   "lineno": 3167,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.PrecompiledCode.__init__": {
  "data": {
   "lineno": 3168
  },
  "type": "function"
 },
 "regex._regex_core.PrecompiledCode._compile": {
  "data": {
   "lineno": 3171,
   "symbols_in_volume": [
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Property": {
  "data": {
   "lineno": 3174,
   "symbols_in_volume": [
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.NOCASE",
    "regex._regex_core.OP",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Property.__init__": {
  "data": {
   "lineno": 3181,
   "symbols_in_volume": [
    "bool",
    "regex._regex_core.CASE_FLAGS_COMBINATIONS",
    "regex._regex_core.NOCASE",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Property._compile": {
  "data": {
   "lineno": 3204,
   "symbols_in_volume": [
    "regex._regex_core.FUZZY_OP",
    "regex._regex_core.POSITIVE_OP",
    "regex._regex_core.ZEROWIDTH_OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Property.dump": {
  "data": {
   "lineno": 3214,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.CASE_TEXT",
    "regex._regex_core.INDENT",
    "regex._regex_core.POS_TEXT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Property.get_firstset": {
  "data": {
   "lineno": 3198,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Property.has_simple_start": {
  "data": {
   "lineno": 3201
  },
  "type": "function"
 },
 "regex._regex_core.Property.matches": {
  "data": {
   "lineno": 3220,
   "symbols_in_volume": [
    "regex._regex.has_property_value"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Property.max_width": {
  "data": {
   "lineno": 3223
  },
  "type": "function"
 },
 "regex._regex_core.Property.optimise": {
  "data": {
   "lineno": 3195
  },
  "type": "function"
 },
 "regex._regex_core.Property.rebuild": {
  "data": {
   "lineno": 3192,
   "symbols_in_volume": [
    "regex._regex_core.Property"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Prune": {
  "data": {
   "lineno": 3226,
   "symbols_in_volume": [
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Prune._compile": {
  "data": {
   "lineno": 3229,
   "symbols_in_volume": [
    "regex._regex_core.OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.REGEX_FLAGS": {
  "data": {
   "lineno": 123
  },
  "type": "constant"
 },
 "regex._regex_core.REQUIRED_OP": {
  "data": {
   "lineno": 1806
  },
  "type": "constant"
 },
 "regex._regex_core.REVERSE_OP": {
  "data": {
   "lineno": 1805
  },
  "type": "constant"
 },
 "regex._regex_core.Range": {
  "data": {
   "lineno": 3232,
   "symbols_in_volume": [
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.NOCASE",
    "regex._regex_core.OP",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Range.__init__": {
  "data": {
   "lineno": 3239,
   "symbols_in_volume": [
    "bool",
    "regex._regex_core.CASE_FLAGS_COMBINATIONS",
    "regex._regex_core.NOCASE",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Range._compile": {
  "data": {
   "lineno": 3285,
   "symbols_in_volume": [
    "regex._regex_core.FUZZY_OP",
    "regex._regex_core.POSITIVE_OP",
    "regex._regex_core.ZEROWIDTH_OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Range.dump": {
  "data": {
   "lineno": 3296,
   "symbols_in_volume": [
    "ascii",
    "chr",
    "print",
    "regex._regex_core.CASE_TEXT",
    "regex._regex_core.INDENT",
    "regex._regex_core.POS_TEXT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Range.matches": {
  "data": {
   "lineno": 3303
  },
  "type": "function"
 },
 "regex._regex_core.Range.max_width": {
  "data": {
   "lineno": 3306
  },
  "type": "function"
 },
 "regex._regex_core.Range.optimise": {
  "data": {
   "lineno": 3254,
   "symbols_in_volume": [
    "String",
    "len",
    "ord",
    "regex._regex.fold_case",
    "regex._regex.get_expand_on_folding",
    "regex._regex_core.Branch",
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.FULL_CASE_FOLDING"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Range.rebuild": {
  "data": {
   "lineno": 3251,
   "symbols_in_volume": [
    "regex._regex_core.Range"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.RefGroup": {
  "data": {
   "lineno": 3309,
   "symbols_in_volume": [
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.NOCASE",
    "regex._regex_core.OP",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.RefGroup.__del__": {
  "data": {
   "lineno": 3355
  },
  "type": "function"
 },
 "regex._regex_core.RefGroup.__init__": {
  "data": {
   "lineno": 3316,
   "symbols_in_volume": [
    "regex._regex_core.CASE_FLAGS_COMBINATIONS",
    "regex._regex_core.NOCASE",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.RefGroup._compile": {
  "data": {
   "lineno": 3342,
   "symbols_in_volume": [
    "regex._regex_core.FUZZY_OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.RefGroup.dump": {
  "data": {
   "lineno": 3348,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.CASE_TEXT",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.RefGroup.fix_groups": {
  "data": {
   "lineno": 3325,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "int",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.RefGroup.max_width": {
  "data": {
   "lineno": 3352,
   "symbols_in_volume": [
    "regex._regex_core.UNLIMITED"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.RefGroup.remove_captures": {
  "data": {
   "lineno": 3339,
   "symbols_in_volume": [
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase": {
  "data": {
   "lineno": 1818
  },
  "type": "class"
 },
 "regex._regex_core.RegexBase.__eq__": {
  "data": {
   "lineno": 1878,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.__hash__": {
  "data": {
   "lineno": 1875,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.__init__": {
  "data": {
   "lineno": 1819
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.__ne__": {
  "data": {
   "lineno": 1881
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.can_be_affix": {
  "data": {
   "lineno": 1857
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.compile": {
  "data": {
   "lineno": 1869
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.contains_group": {
  "data": {
   "lineno": 1860
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.fix_groups": {
  "data": {
   "lineno": 1842
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.get_firstset": {
  "data": {
   "lineno": 1863,
   "symbols_in_volume": [
    "regex._regex_core._FirstSetError"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.get_required_string": {
  "data": {
   "lineno": 1884
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.has_simple_start": {
  "data": {
   "lineno": 1866
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.is_atomic": {
  "data": {
   "lineno": 1854
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.is_empty": {
  "data": {
   "lineno": 1872
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.optimise": {
  "data": {
   "lineno": 1845
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.pack_characters": {
  "data": {
   "lineno": 1848
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.remove_captures": {
  "data": {
   "lineno": 1851
  },
  "type": "function"
 },
 "regex._regex_core.RegexBase.with_flags": {
  "data": {
   "lineno": 1822,
   "symbols_in_volume": [
    "bool",
    "regex._regex_core.CASE_FLAGS",
    "regex._regex_core.CASE_FLAGS_COMBINATIONS"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SCOPED_FLAGS": {
  "data": {
   "lineno": 103
  },
  "type": "constant"
 },
 "regex._regex_core.SET_OPS": {
  "data": {
   "lineno": 113
  },
  "type": "constant"
 },
 "regex._regex_core.SPECIAL_CHARS": {
  "data": {
   "lineno": 110
  },
  "type": "constant"
 },
 "regex._regex_core.Scanner": {
  "data": {
   "lineno": 4305
  },
  "type": "class"
 },
 "regex._regex_core.Scanner.__init__": {
  "data": {
   "lineno": 4306,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "enumerate",
    "len",
    "regex._regex.compile",
    "regex._regex_core.Branch",
    "regex._regex_core.DEFAULT_VERSION",
    "regex._regex_core.GLOBAL_FLAGS",
    "regex._regex_core.Group",
    "regex._regex_core.Info",
    "regex._regex_core.OP",
    "regex._regex_core.Source",
    "regex._regex_core._ALL_VERSIONS",
    "regex._regex_core._FirstSetError",
    "regex._regex_core._check_group_features",
    "regex._regex_core._compile_firstset",
    "regex._regex_core._flatten_code",
    "regex._regex_core._get_required_string",
    "regex._regex_core._parse_pattern",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Scanner.scan": {
  "data": {
   "lineno": 4379,
   "symbols_in_volume": [
    "action",
    "append",
    "hasattr",
    "match",
    "regex._regex_core.string"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SearchAnchor": {
  "data": {
   "lineno": 3358,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Sequence": {
  "data": {
   "lineno": 3362,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Sequence.__eq__": {
  "data": {
   "lineno": 3554,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.__init__": {
  "data": {
   "lineno": 3363,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence._compile": {
  "data": {
   "lineno": 3453
  },
  "type": "function"
 },
 "regex._regex_core.Sequence._fix_full_casefold": {
  "data": {
   "lineno": 3496,
   "symbols_in_volume": [
    "Literal",
    "chr",
    "len",
    "regex._regex.fold_case",
    "regex._regex.get_expand_on_folding",
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.FULL_CASE_FOLDING",
    "regex._regex_core.Sequence",
    "regex._regex_core.string",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence._flush_characters": {
  "data": {
   "lineno": 3468,
   "symbols_in_volume": [
    "String",
    "any",
    "len",
    "regex._regex_core.Character",
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.NOCASE",
    "regex._regex_core.Sequence",
    "regex._regex_core.is_cased_i",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence._merge_chunks": {
  "data": {
   "lineno": 3530,
   "symbols_in_volume": [
    "len",
    "max",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.can_be_affix": {
  "data": {
   "lineno": 3431
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.contains_group": {
  "data": {
   "lineno": 3434,
   "symbols_in_volume": [
    "any"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.dump": {
  "data": {
   "lineno": 3464
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.fix_groups": {
  "data": {
   "lineno": 3370
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.get_firstset": {
  "data": {
   "lineno": 3437,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.get_required_string": {
  "data": {
   "lineno": 3560
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.has_simple_start": {
  "data": {
   "lineno": 3450,
   "symbols_in_volume": [
    "bool"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.is_atomic": {
  "data": {
   "lineno": 3428,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.is_empty": {
  "data": {
   "lineno": 3551,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.max_width": {
  "data": {
   "lineno": 3557,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.optimise": {
  "data": {
   "lineno": 3374,
   "symbols_in_volume": [
    "isinstance",
    "regex._regex_core.Sequence",
    "regex._regex_core.make_sequence"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.pack_characters": {
  "data": {
   "lineno": 3386,
   "symbols_in_volume": [
    "String",
    "any",
    "regex._regex_core.Character",
    "regex._regex_core.NOCASE",
    "regex._regex_core.Sequence",
    "regex._regex_core.is_cased_i",
    "regex._regex_core.make_sequence",
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Sequence.remove_captures": {
  "data": {
   "lineno": 3424
  },
  "type": "function"
 },
 "regex._regex_core.SetBase": {
  "data": {
   "lineno": 3575,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.SetBase.__del__": {
  "data": {
   "lineno": 3677
  },
  "type": "function"
 },
 "regex._regex_core.SetBase.__init__": {
  "data": {
   "lineno": 3576,
   "symbols_in_volume": [
    "bool",
    "regex._regex_core.CASE_FLAGS_COMBINATIONS",
    "regex._regex_core.NOCASE",
    "regex._regex_core.RegexBase",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetBase._compile": {
  "data": {
   "lineno": 3600,
   "symbols_in_volume": [
    "regex._regex_core.FUZZY_OP",
    "regex._regex_core.OP",
    "regex._regex_core.POSITIVE_OP",
    "regex._regex_core.ZEROWIDTH_OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetBase._handle_case_folding": {
  "data": {
   "lineno": 3622,
   "symbols_in_volume": [
    "String",
    "ord",
    "regex._regex.fold_case",
    "regex._regex.get_expand_on_folding",
    "regex._regex_core.Branch",
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.FULL_CASE_FOLDING",
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetBase.dump": {
  "data": {
   "lineno": 3616,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.CASE_TEXT",
    "regex._regex_core.INDENT",
    "regex._regex_core.POS_TEXT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetBase.get_firstset": {
  "data": {
   "lineno": 3594,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetBase.has_simple_start": {
  "data": {
   "lineno": 3597
  },
  "type": "function"
 },
 "regex._regex_core.SetBase.max_width": {
  "data": {
   "lineno": 3652,
   "symbols_in_volume": [
    "len",
    "max",
    "ord",
    "regex._regex.fold_case",
    "regex._regex.get_expand_on_folding",
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.FULL_CASE_FOLDING",
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetBase.rebuild": {
  "data": {
   "lineno": 3590,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetDiff": {
  "data": {
   "lineno": 3680,
   "symbols_in_volume": [
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.NOCASE",
    "regex._regex_core.OP",
    "regex._regex_core.SetBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.SetDiff.matches": {
  "data": {
   "lineno": 3702
  },
  "type": "function"
 },
 "regex._regex_core.SetDiff.optimise": {
  "data": {
   "lineno": 3688,
   "symbols_in_volume": [
    "SetUnion",
    "len",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetInter": {
  "data": {
   "lineno": 3706,
   "symbols_in_volume": [
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.NOCASE",
    "regex._regex_core.OP",
    "regex._regex_core.SetBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.SetInter.matches": {
  "data": {
   "lineno": 3732,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetInter.optimise": {
  "data": {
   "lineno": 3714,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "regex._regex_core.SetInter",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetSymDiff": {
  "data": {
   "lineno": 3736,
   "symbols_in_volume": [
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.NOCASE",
    "regex._regex_core.OP",
    "regex._regex_core.SetBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.SetSymDiff.matches": {
  "data": {
   "lineno": 3762
  },
  "type": "function"
 },
 "regex._regex_core.SetSymDiff.optimise": {
  "data": {
   "lineno": 3744,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "regex._regex_core.SetSymDiff",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetUnion": {
  "data": {
   "lineno": 3769,
   "symbols_in_volume": [
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.NOCASE",
    "regex._regex_core.OP",
    "regex._regex_core.SetBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.SetUnion._compile": {
  "data": {
   "lineno": 3797,
   "symbols_in_volume": [
    "collections.defaultdict",
    "isinstance",
    "len",
    "list",
    "regex._regex_core.Character",
    "regex._regex_core.FUZZY_OP",
    "regex._regex_core.OP",
    "regex._regex_core.POSITIVE_OP",
    "regex._regex_core.ZEROWIDTH_OP",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetUnion.matches": {
  "data": {
   "lineno": 3831,
   "symbols_in_volume": [
    "any"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.SetUnion.optimise": {
  "data": {
   "lineno": 3777,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "regex._regex_core.SetUnion",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Skip": {
  "data": {
   "lineno": 3835,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.Source": {
  "data": {
   "lineno": 3958
  },
  "type": "class"
 },
 "regex._regex_core.Source.__init__": {
  "data": {
   "lineno": 3960,
   "symbols_in_volume": [
    "bytes",
    "chr",
    "isinstance",
    "regex._regex_core.string",
    "str"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Source.at_end": {
  "data": {
   "lineno": 4158,
   "symbols_in_volume": [
    "IndexError",
    "ValueError",
    "len",
    "regex._regex_core.string"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Source.expect": {
  "data": {
   "lineno": 4154,
   "symbols_in_volume": [
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Source.get": {
  "data": {
   "lineno": 3972,
   "symbols_in_volume": [
    "IndexError",
    "ValueError",
    "len",
    "regex._regex_core.string"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Source.get_many": {
  "data": {
   "lineno": 4000,
   "symbols_in_volume": [
    "IndexError",
    "ValueError",
    "len",
    "regex._regex_core.string"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Source.get_while": {
  "data": {
   "lineno": 4038,
   "symbols_in_volume": [
    "IndexError",
    "ValueError",
    "len",
    "regex._regex_core.string"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Source.match": {
  "data": {
   "lineno": 4115,
   "symbols_in_volume": [
    "IndexError",
    "ValueError",
    "len",
    "regex._regex_core.string"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.Source.skip_while": {
  "data": {
   "lineno": 4086,
   "symbols_in_volume": [
    "IndexError",
    "ValueError",
    "len",
    "regex._regex_core.string"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.StartOfLine": {
  "data": {
   "lineno": 3839,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.StartOfLineU": {
  "data": {
   "lineno": 3843,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.StartOfLine"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.StartOfString": {
  "data": {
   "lineno": 3847,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.StartOfWord": {
  "data": {
   "lineno": 3851,
   "symbols_in_volume": [
    "regex._regex_core.OP",
    "regex._regex_core.ZeroWidthBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.String": {
  "data": {
   "lineno": 3855,
   "symbols_in_volume": [
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.NOCASE",
    "regex._regex_core.OP",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.String.__init__": {
  "data": {
   "lineno": 3862,
   "symbols_in_volume": [
    "chr",
    "ord",
    "regex._regex.fold_case",
    "regex._regex_core.CASE_FLAGS_COMBINATIONS",
    "regex._regex_core.FULLIGNORECASE",
    "regex._regex_core.FULL_CASE_FOLDING",
    "regex._regex_core.NOCASE",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.String._compile": {
  "data": {
   "lineno": 3890,
   "symbols_in_volume": [
    "len",
    "regex._regex_core.FUZZY_OP",
    "regex._regex_core.REQUIRED_OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.String.dump": {
  "data": {
   "lineno": 3899,
   "symbols_in_volume": [
    "ascii",
    "chr",
    "print",
    "regex._regex_core.CASE_TEXT",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.String.get_firstset": {
  "data": {
   "lineno": 3879,
   "symbols_in_volume": [
    "regex._regex_core.Character",
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.String.get_required_string": {
  "data": {
   "lineno": 3907
  },
  "type": "function"
 },
 "regex._regex_core.String.has_simple_start": {
  "data": {
   "lineno": 3887
  },
  "type": "function"
 },
 "regex._regex_core.String.max_width": {
  "data": {
   "lineno": 3904,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.StringSet": {
  "data": {
   "lineno": 3917,
   "symbols_in_volume": [
    "regex._regex_core.Branch"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.StringSet.__del__": {
  "data": {
   "lineno": 3955
  },
  "type": "function"
 },
 "regex._regex_core.StringSet.__init__": {
  "data": {
   "lineno": 3918,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "ord",
    "regex._regex_core.CASE_FLAGS_COMBINATIONS",
    "regex._regex_core.Character",
    "regex._regex_core.NOCASE",
    "regex._regex_core.Sequence",
    "regex._regex_core._ALL_ENCODINGS",
    "regex._regex_core.string",
    "str"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.StringSet.dump": {
  "data": {
   "lineno": 3951,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.CASE_TEXT",
    "regex._regex_core.INDENT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.UNLIMITED": {
  "data": {
   "lineno": 120
  },
  "type": "constant"
 },
 "regex._regex_core.VERBS": {
  "data": {
   "lineno": 4458
  },
  "type": "constant"
 },
 "regex._regex_core.WORD_POSITION_ESCAPES": {
  "data": {
   "lineno": 4449
  },
  "type": "constant"
 },
 "regex._regex_core.ZEROWIDTH_OP": {
  "data": {
   "lineno": 1803
  },
  "type": "constant"
 },
 "regex._regex_core.ZeroWidthBase": {
  "data": {
   "lineno": 1888,
   "symbols_in_volume": [
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.ZeroWidthBase.__init__": {
  "data": {
   "lineno": 1889,
   "symbols_in_volume": [
    "bool",
    "regex._regex_core.RegexBase"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.ZeroWidthBase._compile": {
  "data": {
   "lineno": 1898,
   "symbols_in_volume": [
    "regex._regex_core.FUZZY_OP",
    "regex._regex_core.POSITIVE_OP",
    "regex._regex_core.REVERSE_OP"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.ZeroWidthBase.dump": {
  "data": {
   "lineno": 1908,
   "symbols_in_volume": [
    "print",
    "regex._regex_core.INDENT",
    "regex._regex_core.POS_TEXT"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.ZeroWidthBase.get_firstset": {
  "data": {
   "lineno": 1895,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.ZeroWidthBase.max_width": {
  "data": {
   "lineno": 1912
  },
  "type": "function"
 },
 "regex._regex_core._ALL_ENCODINGS": {
  "data": {
   "lineno": 95
  },
  "type": "constant"
 },
 "regex._regex_core._ALL_VERSIONS": {
  "data": {
   "lineno": 94
  },
  "type": "constant"
 },
 "regex._regex_core._BINARY_VALUES": {
  "data": {
   "lineno": 1607
  },
  "type": "constant"
 },
 "regex._regex_core._FirstSetError": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "regex._regex_core._POSIX_CLASSES": {
  "data": {
   "lineno": 1605
  },
  "type": "constant"
 },
 "regex._regex_core._QUANTIFIERS": {
  "data": {
   "lineno": 522
  },
  "type": "constant"
 },
 "regex._regex_core._UnscopedFlagSet": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.__all__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "regex._regex_core._check_firstset": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "SetUnion",
    "isinstance",
    "list",
    "regex._regex_core.NOCASE",
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core._check_group_features": {
  "data": {
   "lineno": 4245,
   "symbols_in_volume": [
    "bool",
    "isinstance",
    "len",
    "regex._regex_core.CallRef",
    "regex._regex_core.Fuzzy"
   ]
  },
  "type": "function"
 },
 "regex._regex_core._compile_firstset": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "_check_firstset",
    "bool"
   ]
  },
  "type": "function"
 },
 "regex._regex_core._compile_replacement": {
  "data": {
   "lineno": 1679,
   "symbols_in_volume": [
    "bytes",
    "compile_repl_group",
    "int",
    "isinstance",
    "len",
    "ord",
    "parse_repl_hex_escape",
    "parse_repl_named_char",
    "regex._regex_core.ALPHA",
    "regex._regex_core.DIGITS",
    "regex._regex_core.HEX_ESCAPES",
    "regex._regex_core.OCT_DIGITS",
    "regex._regex_core.error",
    "regex._regex_core.is_octal"
   ]
  },
  "type": "function"
 },
 "regex._regex_core._flatten_code": {
  "data": {
   "lineno": 341
  },
  "type": "function"
 },
 "regex._regex_core._fold_case": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "regex._regex.fold_case",
    "regex._regex_core._ALL_ENCODINGS",
    "regex._regex_core.string"
   ]
  },
  "type": "function"
 },
 "regex._regex_core._get_required_string": {
  "data": {
   "lineno": 4284,
   "symbols_in_volume": [
    "bool",
    "regex._regex_core.UNLIMITED"
   ]
  },
  "type": "function"
 },
 "regex._regex_core._parse_pattern": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "Branch",
    "len",
    "parse_sequence"
   ]
  },
  "type": "function"
 },
 "regex._regex_core._regex": {
  "data": {
   "shadows": "regex._regex"
  },
  "type": "import"
 },
 "regex._regex_core._shrink_cache": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "KeyError",
    "hasattr",
    "len",
    "regex._regex_core.random",
    "tuple"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.apply_constraint": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": [
    "Fuzzy",
    "isinstance",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.apply_quantifier": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": [
    "isinstance",
    "regex._regex_core.error",
    "repeated"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.compile_repl_group": {
  "data": {
   "lineno": 1780,
   "symbols_in_volume": [
    "IndexError",
    "KeyError",
    "int",
    "regex._regex_core.error",
    "regex._regex_core.parse_name"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "regex._regex_core.error": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "regex._regex_core.error.__init__": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "Exception.__init__",
    "isinstance",
    "str"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.float_to_rational": {
  "data": {
   "lineno": 1566,
   "symbols_in_volume": [
    "abs",
    "int",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.is_above_limit": {
  "data": {
   "lineno": 539,
   "symbols_in_volume": [
    "regex._regex_core.UNLIMITED"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.is_cased_f": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "len",
    "regex._regex.get_all_cases"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.is_cased_i": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "len",
    "regex._regex.get_all_cases"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.is_decimal": {
  "data": {
   "lineno": 1159,
   "symbols_in_volume": [
    "all",
    "regex._regex_core.DIGITS",
    "regex._regex_core.string"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.is_hexadecimal": {
  "data": {
   "lineno": 1163,
   "symbols_in_volume": [
    "all",
    "regex._regex_core.HEX_DIGITS",
    "regex._regex_core.string"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.is_octal": {
  "data": {
   "lineno": 1155,
   "symbols_in_volume": [
    "all",
    "regex._regex_core.OCT_DIGITS",
    "regex._regex_core.string"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.lookup_property": {
  "data": {
   "lineno": 1609,
   "symbols_in_volume": [
    "Property",
    "property",
    "regex._regex_core._BINARY_VALUES",
    "regex._regex_core._POSIX_CLASSES",
    "regex._regex_core.error",
    "regex._regex_core.standardise_name",
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.make_case_flags": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "regex._regex_core.CASE_FLAGS"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.make_character": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "Character",
    "regex._regex_core.make_case_flags"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.make_property": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "regex._regex_core.make_case_flags"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.make_ref_group": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "RefGroup",
    "regex._regex_core.make_case_flags"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.make_sequence": {
  "data": {
   "lineno": 1812,
   "symbols_in_volume": [
    "Sequence",
    "len"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.make_string_set": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "StringSet",
    "regex._regex_core.make_case_flags"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.name": {
  "data": {
   "lineno": 4408
  },
  "type": "constant"
 },
 "regex._regex_core.numeric_to_rational": {
  "data": {
   "lineno": 1577,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "len",
    "regex._regex_core.float_to_rational"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_atomic": {
  "data": {
   "lineno": 986,
   "symbols_in_volume": [
    "Atomic",
    "bool",
    "regex._regex_core._parse_pattern"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_call_group": {
  "data": {
   "lineno": 1016,
   "symbols_in_volume": [
    "CallGroup",
    "regex._regex_core.DIGITS"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_call_named_group": {
  "data": {
   "lineno": 1027,
   "symbols_in_volume": [
    "CallGroup",
    "parse_name"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_comment": {
  "data": {
   "lineno": 894
  },
  "type": "function"
 },
 "regex._regex_core.parse_common": {
  "data": {
   "lineno": 998,
   "symbols_in_volume": [
    "Branch",
    "len",
    "max",
    "regex._regex_core.parse_sequence"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_conditional": {
  "data": {
   "lineno": 923,
   "symbols_in_volume": [
    "Conditional",
    "Sequence",
    "bool",
    "parse_lookaround_conditional",
    "parse_name",
    "regex._regex_core.error",
    "regex._regex_core.parse_sequence"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_constraint": {
  "data": {
   "lineno": 680,
   "symbols_in_volume": [
    "regex._regex_core.ParseError"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_cost_constraint": {
  "data": {
   "lineno": 607,
   "symbols_in_volume": [
    "parse_constraint",
    "parse_cost_limit",
    "parse_fuzzy_compare",
    "regex._regex_core.ALPHA",
    "regex._regex_core.DIGITS",
    "regex._regex_core.ParseError",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_cost_equation": {
  "data": {
   "lineno": 699,
   "symbols_in_volume": [
    "int",
    "parse_cost_term",
    "parse_count",
    "regex._regex_core.ParseError",
    "regex._regex_core.error",
    "regex._regex_core.parse_fuzzy_compare"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_cost_limit": {
  "data": {
   "lineno": 668,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "parse_count",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_cost_term": {
  "data": {
   "lineno": 726,
   "symbols_in_volume": [
    "int",
    "parse_count",
    "regex._regex_core.ParseError",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_count": {
  "data": {
   "lineno": 764,
   "symbols_in_volume": [
    "regex._regex_core.DIGITS"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_escape": {
  "data": {
   "lineno": 1167,
   "symbols_in_volume": [
    "Character",
    "Grapheme",
    "SearchAnchor",
    "ord",
    "parse_group_ref",
    "parse_hex_escape",
    "parse_named_char",
    "parse_numeric_escape",
    "parse_property",
    "parse_string_set",
    "regex._regex_core.ALPHA",
    "regex._regex_core.DIGITS",
    "regex._regex_core.HEX_ESCAPES",
    "regex._regex_core.error",
    "regex._regex_core.make_character"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_extension": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": [
    "Group",
    "bool",
    "parse_call_named_group",
    "parse_name",
    "regex._regex_core._parse_pattern",
    "regex._regex_core.error",
    "regex._regex_core.make_ref_group"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_flag_set": {
  "data": {
   "lineno": 1034,
   "symbols_in_volume": [
    "KeyError",
    "regex._regex_core.REGEX_FLAGS"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_flags": {
  "data": {
   "lineno": 1050,
   "symbols_in_volume": [
    "regex._regex_core.error",
    "regex._regex_core.parse_flag_set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_flags_subpattern": {
  "data": {
   "lineno": 1081,
   "symbols_in_volume": [
    "parse_positional_flags",
    "regex._regex_core.GLOBAL_FLAGS",
    "regex._regex_core._UnscopedFlagSet",
    "regex._regex_core.error",
    "regex._regex_core.parse_flags",
    "regex._regex_core.parse_subpattern"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_fuzzy": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": [
    "parse_fuzzy_item",
    "parse_fuzzy_test",
    "regex._regex_core.ParseError",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_fuzzy_compare": {
  "data": {
   "lineno": 690
  },
  "type": "function"
 },
 "regex._regex_core.parse_fuzzy_item": {
  "data": {
   "lineno": 597,
   "symbols_in_volume": [
    "parse_cost_constraint",
    "parse_cost_equation",
    "regex._regex_core.ParseError"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_fuzzy_test": {
  "data": {
   "lineno": 738,
   "symbols_in_volume": [
    "Any",
    "AnyAll",
    "AnyU",
    "Character",
    "ord",
    "parse_escape",
    "parse_set",
    "regex._regex_core.SPECIAL_CHARS",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_group_ref": {
  "data": {
   "lineno": 1309,
   "symbols_in_volume": [
    "regex._regex_core.error",
    "regex._regex_core.make_ref_group",
    "regex._regex_core.parse_name"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_hex_escape": {
  "data": {
   "lineno": 1286,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "range",
    "regex._regex_core.HEX_DIGITS",
    "regex._regex_core.error",
    "regex._regex_core.make_character",
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_limited_quantifier": {
  "data": {
   "lineno": 543,
   "symbols_in_volume": [
    "int",
    "parse_count",
    "regex._regex_core.error",
    "regex._regex_core.is_above_limit"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_lookaround": {
  "data": {
   "lineno": 911,
   "symbols_in_volume": [
    "LookAround",
    "bool",
    "regex._regex_core._parse_pattern"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_lookaround_conditional": {
  "data": {
   "lineno": 966,
   "symbols_in_volume": [
    "LookAroundConditional",
    "Sequence",
    "bool",
    "regex._regex_core._parse_pattern",
    "regex._regex_core.parse_sequence"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_name": {
  "data": {
   "lineno": 1136,
   "symbols_in_volume": [
    "int",
    "regex._regex_core.error",
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_named_char": {
  "data": {
   "lineno": 1330,
   "symbols_in_volume": [
    "KeyError",
    "ord",
    "regex._regex_core.NAMED_CHAR_PART",
    "regex._regex_core.error",
    "regex._regex_core.make_character",
    "regex._regex_core.unicodedata"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_numeric_escape": {
  "data": {
   "lineno": 1232,
   "symbols_in_volume": [
    "int",
    "parse_octal_escape",
    "regex._regex_core.DIGITS",
    "regex._regex_core.OCT_DIGITS",
    "regex._regex_core._ALL_ENCODINGS",
    "regex._regex_core.error",
    "regex._regex_core.is_octal",
    "regex._regex_core.make_character",
    "regex._regex_core.make_ref_group"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_octal_escape": {
  "data": {
   "lineno": 1265,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "len",
    "regex._regex_core.OCT_DIGITS",
    "regex._regex_core.error",
    "regex._regex_core.make_character"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_paren": {
  "data": {
   "lineno": 768,
   "symbols_in_volume": [
    "Group",
    "bool",
    "parse_atomic",
    "parse_call_group",
    "parse_call_named_group",
    "parse_comment",
    "parse_common",
    "parse_conditional",
    "parse_extension",
    "parse_flags_subpattern",
    "parse_lookaround",
    "parse_name",
    "regex._regex_core._parse_pattern",
    "regex._regex_core.error",
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_positional_flags": {
  "data": {
   "lineno": 1116,
   "symbols_in_volume": [
    "bool",
    "regex._regex_core.DEFAULT_VERSION",
    "regex._regex_core._ALL_VERSIONS",
    "regex._regex_core._UnscopedFlagSet",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_posix_class": {
  "data": {
   "lineno": 1557,
   "symbols_in_volume": [
    "lookup_property",
    "regex._regex_core.ParseError",
    "regex._regex_core.parse_property_name"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_property": {
  "data": {
   "lineno": 1346,
   "symbols_in_volume": [
    "lookup_property",
    "ord",
    "parse_property_name",
    "regex._regex_core.make_character",
    "regex._regex_core.make_property"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_property_name": {
  "data": {
   "lineno": 1367,
   "symbols_in_volume": [
    "regex._regex_core.ALNUM",
    "regex._regex_core.PROPERTY_NAME_PART",
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_quantifier": {
  "data": {
   "lineno": 524,
   "symbols_in_volume": [
    "parse_limited_quantifier",
    "regex._regex_core._QUANTIFIERS"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_repl_hex_escape": {
  "data": {
   "lineno": 1751,
   "symbols_in_volume": [
    "int",
    "range",
    "regex._regex_core.HEX_DIGITS",
    "regex._regex_core.error",
    "type"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_repl_named_char": {
  "data": {
   "lineno": 1763,
   "symbols_in_volume": [
    "KeyError",
    "ord",
    "regex._regex_core.ALPHA",
    "regex._regex_core.error",
    "regex._regex_core.unicodedata",
    "set"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_sequence": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "Any",
    "AnyAll",
    "AnyU",
    "Character",
    "EndOfLine",
    "EndOfLineU",
    "EndOfStringLine",
    "EndOfStringLineU",
    "Sequence",
    "StartOfLine",
    "StartOfLineU",
    "StartOfString",
    "apply_constraint",
    "apply_quantifier",
    "ord",
    "parse_escape",
    "parse_fuzzy",
    "parse_paren",
    "parse_quantifier",
    "parse_set",
    "regex._regex_core.SPECIAL_CHARS",
    "regex._regex_core.make_case_flags"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_set": {
  "data": {
   "lineno": 1389,
   "symbols_in_volume": [
    "parse_set_imp_union",
    "parse_set_union",
    "regex._regex_core.DEFAULT_VERSION",
    "regex._regex_core._ALL_VERSIONS",
    "regex._regex_core.error",
    "regex._regex_core.make_case_flags"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_set_diff": {
  "data": {
   "lineno": 1445,
   "symbols_in_volume": [
    "SetDiff",
    "len",
    "parse_set_imp_union"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_set_imp_union": {
  "data": {
   "lineno": 1455,
   "symbols_in_volume": [
    "SetUnion",
    "any",
    "len",
    "parse_set_member",
    "regex._regex_core.DEFAULT_VERSION",
    "regex._regex_core.SET_OPS",
    "regex._regex_core._ALL_VERSIONS"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_set_inter": {
  "data": {
   "lineno": 1435,
   "symbols_in_volume": [
    "SetInter",
    "len",
    "parse_set_diff"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_set_item": {
  "data": {
   "lineno": 1519,
   "symbols_in_volume": [
    "Character",
    "ord",
    "parse_posix_class",
    "regex._regex_core.DEFAULT_VERSION",
    "regex._regex_core.ParseError",
    "regex._regex_core._ALL_VERSIONS",
    "regex._regex_core.error",
    "regex._regex_core.parse_escape",
    "regex._regex_core.parse_set_union"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_set_member": {
  "data": {
   "lineno": 1478,
   "symbols_in_volume": [
    "Character",
    "Range",
    "SetUnion",
    "isinstance",
    "ord",
    "parse_set_item",
    "regex._regex_core.DEFAULT_VERSION",
    "regex._regex_core._ALL_VERSIONS",
    "regex._regex_core.error"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_set_symm_diff": {
  "data": {
   "lineno": 1425,
   "symbols_in_volume": [
    "SetSymDiff",
    "len",
    "parse_set_inter"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_set_union": {
  "data": {
   "lineno": 1415,
   "symbols_in_volume": [
    "SetUnion",
    "len",
    "parse_set_symm_diff"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_string_set": {
  "data": {
   "lineno": 1320,
   "symbols_in_volume": [
    "regex._regex_core.error",
    "regex._regex_core.make_string_set",
    "regex._regex_core.parse_name"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.parse_subpattern": {
  "data": {
   "lineno": 1067,
   "symbols_in_volume": [
    "bool",
    "regex._regex_core._parse_pattern"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "regex._regex_core.standardise_name": {
  "data": {
   "lineno": 1598,
   "symbols_in_volume": [
    "ValueError",
    "ZeroDivisionError",
    "regex._regex_core.numeric_to_rational"
   ]
  },
  "type": "function"
 },
 "regex._regex_core.string": {
  "data": {
   "shadows": "string"
  },
  "type": "import"
 },
 "regex._regex_core.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "regex._regex_core.unicodedata": {
  "data": {
   "shadows": "unicodedata"
  },
  "type": "import"
 },
 "regex.regex": {
  "data": {
   "symbols_in_volume": [
    "copyreg.pickle",
    "frozenset",
    "regex._regex_core.DEFAULT_VERSION",
    "regex.regex.DEFAULT_VERSION",
    "regex.regex.Pattern",
    "regex.regex._compile",
    "regex.regex._pickle",
    "regex.regex.compile",
    "threading.RLock",
    "type"
   ]
  },
  "type": "module"
 },
 "regex.regex.DEFAULT_VERSION": {
  "data": {
   "shadows": "regex.DEFAULT_VERSION"
  },
  "type": "import"
 },
 "regex.regex.Match": {
  "data": {
   "lineno": 706
  },
  "type": "constant"
 },
 "regex.regex.Pattern": {
  "data": {
   "lineno": 705
  },
  "type": "constant"
 },
 "regex.regex.Regex": {
  "data": {
   "lineno": 710
  },
  "type": "constant"
 },
 "regex.regex._ALL_ENCODINGS": {
  "data": {
   "shadows": "regex._regex_core._ALL_ENCODINGS"
  },
  "type": "import"
 },
 "regex.regex._ALL_VERSIONS": {
  "data": {
   "shadows": "regex._regex_core._ALL_VERSIONS"
  },
  "type": "import"
 },
 "regex.regex._ALNUM": {
  "data": {
   "shadows": "regex._regex_core.ALNUM"
  },
  "type": "import"
 },
 "regex.regex._FirstSetError": {
  "data": {
   "shadows": "regex._regex_core._FirstSetError"
  },
  "type": "import"
 },
 "regex.regex._Fuzzy": {
  "data": {
   "shadows": "regex._regex_core.Fuzzy"
  },
  "type": "import"
 },
 "regex.regex._Info": {
  "data": {
   "shadows": "regex._regex_core.Info"
  },
  "type": "import"
 },
 "regex.regex._MAXCACHE": {
  "data": {
   "lineno": 433
  },
  "type": "constant"
 },
 "regex.regex._MAXREPCACHE": {
  "data": {
   "lineno": 434
  },
  "type": "constant"
 },
 "regex.regex._METACHARS": {
  "data": {
   "lineno": 421
  },
  "type": "constant"
 },
 "regex.regex._OP": {
  "data": {
   "shadows": "regex._regex_core.OP"
  },
  "type": "import"
 },
 "regex.regex._RLock": {
  "data": {
   "shadows": "threading.RLock"
  },
  "type": "import"
 },
 "regex.regex._Source": {
  "data": {
   "shadows": "regex._regex_core.Source"
  },
  "type": "import"
 },
 "regex.regex._UnscopedFlagSet": {
  "data": {
   "shadows": "regex._regex_core._UnscopedFlagSet"
  },
  "type": "import"
 },
 "regex.regex.__all__": {
  "data": {
   "lineno": 235
  },
  "type": "constant"
 },
 "regex.regex.__version__": {
  "data": {
   "lineno": 243
  },
  "type": "constant"
 },
 "regex.regex._cache": {
  "data": {
   "lineno": 426
  },
  "type": "constant"
 },
 "regex.regex._cache_lock": {
  "data": {
   "lineno": 427
  },
  "type": "constant"
 },
 "regex.regex._check_group_features": {
  "data": {
   "shadows": "regex._regex_core._check_group_features"
  },
  "type": "import"
 },
 "regex.regex._compile": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": [
    "ImportError",
    "KeyError",
    "TypeError",
    "ValueError",
    "bool",
    "bytes",
    "dict",
    "error",
    "frozenset",
    "isinstance",
    "iter",
    "len",
    "locale.getpreferredencoding",
    "next",
    "regex.DEFAULT_VERSION",
    "regex._regex.compile",
    "regex._regex_core.DEFAULT_VERSION",
    "regex._regex_core.Fuzzy",
    "regex._regex_core.Info",
    "regex._regex_core.OP.CALL_REF",
    "regex._regex_core.OP.END",
    "regex._regex_core.OP.SUCCESS",
    "regex._regex_core.Source",
    "regex._regex_core._ALL_ENCODINGS",
    "regex._regex_core._ALL_VERSIONS",
    "regex._regex_core._FirstSetError",
    "regex._regex_core._UnscopedFlagSet",
    "regex._regex_core._check_group_features",
    "regex._regex_core._compile_firstset",
    "regex._regex_core._flatten_code",
    "regex._regex_core._fold_case",
    "regex._regex_core._get_required_string",
    "regex._regex_core._parse_pattern",
    "regex._regex_core._shrink_cache",
    "regex.regex._MAXCACHE",
    "regex.regex._cache",
    "regex.regex._cache_lock",
    "regex.regex._locale_sensitive",
    "regex.regex._named_args",
    "set",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "regex.regex._compile_firstset": {
  "data": {
   "shadows": "regex._regex_core._compile_firstset"
  },
  "type": "import"
 },
 "regex.regex._compile_replacement": {
  "data": {
   "shadows": "regex._regex_core._compile_replacement"
  },
  "type": "import"
 },
 "regex.regex._compile_replacement_helper": {
  "data": {
   "lineno": 652,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "make_string",
    "ord",
    "regex._regex_core.Source",
    "regex._regex_core._compile_replacement",
    "regex.regex._MAXREPCACHE",
    "regex.regex._replacement_cache",
    "regex.regex.template",
    "str"
   ]
  },
  "type": "function"
 },
 "regex.regex._compile_replacement_helper.make_string": {
  "data": {
   "lineno": 671,
   "symbols_in_volume": [
    "bytes"
   ]
  },
  "type": "function"
 },
 "regex.regex._copy_reg": {
  "data": {
   "shadows": "copyreg"
  },
  "type": "import"
 },
 "regex.regex._flatten_code": {
  "data": {
   "shadows": "regex._regex_core._flatten_code"
  },
  "type": "import"
 },
 "regex.regex._fold_case": {
  "data": {
   "shadows": "regex._regex_core._fold_case"
  },
  "type": "import"
 },
 "regex.regex._get_required_string": {
  "data": {
   "shadows": "regex._regex_core._get_required_string"
  },
  "type": "import"
 },
 "regex.regex._getpreferredencoding": {
  "data": {
   "shadows": "locale.getpreferredencoding"
  },
  "type": "import"
 },
 "regex.regex._locale_sensitive": {
  "data": {
   "lineno": 430
  },
  "type": "constant"
 },
 "regex.regex._named_args": {
  "data": {
   "lineno": 428
  },
  "type": "constant"
 },
 "regex.regex._parse_pattern": {
  "data": {
   "shadows": "regex._regex_core._parse_pattern"
  },
  "type": "import"
 },
 "regex.regex._pickle": {
  "data": {
   "lineno": 715,
   "symbols_in_volume": [
    "regex._regex.compile"
   ]
  },
  "type": "function"
 },
 "regex.regex._regex": {
  "data": {
   "shadows": "regex._regex"
  },
  "type": "import"
 },
 "regex.regex._regex_core": {
  "data": {
   "shadows": "regex._regex_core"
  },
  "type": "import"
 },
 "regex.regex._replacement_cache": {
  "data": {
   "lineno": 429
  },
  "type": "constant"
 },
 "regex.regex._shrink_cache": {
  "data": {
   "shadows": "regex._regex_core._shrink_cache"
  },
  "type": "import"
 },
 "regex.regex.compile": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "_compile"
   ]
  },
  "type": "function"
 },
 "regex.regex.escape": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "bytes",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "regex.regex.findall": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "_compile"
   ]
  },
  "type": "function"
 },
 "regex.regex.finditer": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "_compile"
   ]
  },
  "type": "function"
 },
 "regex.regex.fullmatch": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "_compile"
   ]
  },
  "type": "function"
 },
 "regex.regex.match": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "_compile"
   ]
  },
  "type": "function"
 },
 "regex.regex.purge": {
  "data": {
   "lineno": 351
  },
  "type": "function"
 },
 "regex.regex.search": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "_compile"
   ]
  },
  "type": "function"
 },
 "regex.regex.split": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "_compile"
   ]
  },
  "type": "function"
 },
 "regex.regex.splititer": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "_compile"
   ]
  },
  "type": "function"
 },
 "regex.regex.sub": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "_compile"
   ]
  },
  "type": "function"
 },
 "regex.regex.subf": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "_compile",
    "format"
   ]
  },
  "type": "function"
 },
 "regex.regex.subfn": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "_compile",
    "format"
   ]
  },
  "type": "function"
 },
 "regex.regex.subn": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "_compile"
   ]
  },
  "type": "function"
 },
 "regex.regex.template": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "_compile"
   ]
  },
  "type": "function"
 },
 "regex.test_regex": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "regex.test_regex.RegexTests",
    "regex.test_regex.sys",
    "regex.test_regex.test_main"
   ]
  },
  "type": "module"
 },
 "regex.test_regex.BytesSubclass": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "bytes"
   ]
  },
  "type": "class"
 },
 "regex.test_regex.BytesSubclass.__getitem__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "regex.test_regex.BytesSubclass",
    "super"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "regex.test_regex.unittest"
   ]
  },
  "type": "class"
 },
 "regex.test_regex.RegexTests.assertTypedEqual": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "recurse"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.assertTypedEqual.recurse": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "recurse",
    "tuple",
    "type",
    "zip"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.bump_num": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "int",
    "str"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_anyall": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_ascii_and_unicode_flag": {
  "data": {
   "lineno": 971,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_atomic": {
  "data": {
   "lineno": 1313,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_basic_regex_sub": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "chr",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bigcharset": {
  "data": {
   "lineno": 530,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_branch_reset": {
  "data": {
   "lineno": 1620,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_10328": {
  "data": {
   "lineno": 1496,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "regex.test_regex.sys"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_113254": {
  "data": {
   "lineno": 759,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_114660": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_117612": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_14462": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_1661": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "ValueError",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_3629": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "repr",
    "type"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_418626": {
  "data": {
   "lineno": 779,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_448951": {
  "data": {
   "lineno": 821,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_449000": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_449964": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_462270": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "regex.test_regex.sys"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_527371": {
  "data": {
   "lineno": 764,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_545855": {
  "data": {
   "lineno": 773,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_581080": {
  "data": {
   "lineno": 874,
   "symbols_in_volume": [
    "StopIteration",
    "next",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_612074": {
  "data": {
   "lineno": 794,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_725106": {
  "data": {
   "lineno": 830,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_725149": {
  "data": {
   "lineno": 848,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_764548": {
  "data": {
   "lineno": 855,
   "symbols_in_volume": [
    "my_unicode",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_764548.my_unicode": {
  "data": {
   "lineno": 857,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "class"
 },
 "regex.test_regex.RegexTests.test_bug_817234": {
  "data": {
   "lineno": 883,
   "symbols_in_volume": [
    "StopIteration",
    "next",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_926075": {
  "data": {
   "lineno": 865,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bug_931848": {
  "data": {
   "lineno": 869,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_bytes_str_mixing": {
  "data": {
   "lineno": 937,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_captures": {
  "data": {
   "lineno": 2514,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_case_folding": {
  "data": {
   "lineno": 590,
   "symbols_in_volume": [
    "bool",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_category": {
  "data": {
   "lineno": 678,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_common_prefix": {
  "data": {
   "lineno": 2507,
   "symbols_in_volume": [
    "all",
    "regex.test_regex.regex",
    "regex.test_regex.string",
    "repr",
    "type"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_constants": {
  "data": {
   "lineno": 714,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_copy": {
  "data": {
   "lineno": 2898,
   "symbols_in_volume": [
    "next",
    "regex.test_regex.copy",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_dollar_matches_twice": {
  "data": {
   "lineno": 925,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_empty_array": {
  "data": {
   "lineno": 889,
   "symbols_in_volume": [
    "regex.test_regex.array",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_expand": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_finditer": {
  "data": {
   "lineno": 861,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_flags": {
  "data": {
   "lineno": 726,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "repr",
    "type"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_format": {
  "data": {
   "lineno": 2941,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_fullmatch": {
  "data": {
   "lineno": 2955,
   "symbols_in_volume": [
    "bool",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_fuzzy": {
  "data": {
   "lineno": 2634,
   "symbols_in_volume": [
    "bool",
    "regex.test_regex.regex",
    "repr",
    "type"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_fuzzy_ext": {
  "data": {
   "lineno": 4240,
   "symbols_in_volume": [
    "bool",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_getattr": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "repr",
    "type"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_grapheme": {
  "data": {
   "lineno": 1542,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_groupdict": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_guards": {
  "data": {
   "lineno": 2534,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_hg_bugs": {
  "data": {
   "lineno": 3110,
   "symbols_in_volume": [
    "ascii",
    "bool",
    "bytes",
    "chr",
    "len",
    "range",
    "regex.test_regex.pickle",
    "regex.test_regex.regex",
    "regex.test_regex.sys"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_ignore_case": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": [
    "bool",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_inline_flags": {
  "data": {
   "lineno": 897,
   "symbols_in_volume": [
    "bool",
    "chr",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_issue_18468": {
  "data": {
   "lineno": 2977,
   "symbols_in_volume": [
    "bytearray",
    "memoryview",
    "regex.test_regex.BytesSubclass",
    "regex.test_regex.StrSubclass",
    "regex.test_regex.regex",
    "regex.test_regex.string",
    "regex.test_regex.sys"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_line_boundary": {
  "data": {
   "lineno": 1578,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_lookbehind": {
  "data": {
   "lineno": 1427,
   "symbols_in_volume": [
    "bool",
    "regex.test_regex.regex",
    "repr",
    "type"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_more_zerowidth": {
  "data": {
   "lineno": 4347,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "regex.test_regex.sys"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_named_lists": {
  "data": {
   "lineno": 2580,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "repr",
    "set",
    "type"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_new_named_groups": {
  "data": {
   "lineno": 1009,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_non_consuming": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_not_literal": {
  "data": {
   "lineno": 681,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_overlapped": {
  "data": {
   "lineno": 1513,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_partial": {
  "data": {
   "lineno": 3057,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_possessive": {
  "data": {
   "lineno": 1317,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_properties": {
  "data": {
   "lineno": 1015,
   "symbols_in_volume": [
    "Exception",
    "ascii",
    "bool",
    "regex.test_regex.regex",
    "set"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_qualified_re_split": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "regex.test_regex.sys"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_qualified_re_sub": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_re_escape": {
  "data": {
   "lineno": 689,
   "symbols_in_volume": [
    "bool",
    "chr",
    "range",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_re_escape_byte": {
  "data": {
   "lineno": 702,
   "symbols_in_volume": [
    "bool",
    "bytes",
    "range",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_re_findall": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_re_groupref": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_re_groupref_exists": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_re_match": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_re_split": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "regex.test_regex.sys"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_re_subn": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_recursive": {
  "data": {
   "lineno": 2827,
   "symbols_in_volume": [
    "bool",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_repeat_minmax": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": [
    "bool",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_repeated_repeats": {
  "data": {
   "lineno": 1418,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_replacement": {
  "data": {
   "lineno": 2498,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_scanner": {
  "data": {
   "lineno": 805,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "repr",
    "type"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_scanner.s_float": {
  "data": {
   "lineno": 808,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_scanner.s_ident": {
  "data": {
   "lineno": 806
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_scanner.s_int": {
  "data": {
   "lineno": 809,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_scanner.s_operator": {
  "data": {
   "lineno": 807
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_scoped_and_inline_flags": {
  "data": {
   "lineno": 1401,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_search_anchor": {
  "data": {
   "lineno": 1212,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_search_coverage": {
  "data": {
   "lineno": 685,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_search_reverse": {
  "data": {
   "lineno": 1215,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_search_star_plus": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_set": {
  "data": {
   "lineno": 1674,
   "symbols_in_volume": [
    "chr",
    "len",
    "range",
    "regex.test_regex.regex",
    "repr",
    "type"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_special_escapes": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_splititer": {
  "data": {
   "lineno": 1537,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_sre_character_class_literals": {
  "data": {
   "lineno": 747,
   "symbols_in_volume": [
    "bool",
    "chr",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_sre_character_literals": {
  "data": {
   "lineno": 731,
   "symbols_in_volume": [
    "bool",
    "chr",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_stack_overflow": {
  "data": {
   "lineno": 798,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_sub_template_numeric_escape": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_subscripted_captures": {
  "data": {
   "lineno": 4328,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_subscripting_match": {
  "data": {
   "lineno": 998,
   "symbols_in_volume": [
    "ascii",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_symbolic_refs": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "IndexError",
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_turkic": {
  "data": {
   "lineno": 2554,
   "symbols_in_volume": [
    "ascii",
    "regex.test_regex.regex",
    "set"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_unmatched_in_sub": {
  "data": {
   "lineno": 1475,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "regex.test_regex.sys"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_various": {
  "data": {
   "lineno": 1751,
   "symbols_in_volume": [
    "ValueError",
    "ascii",
    "chr",
    "int",
    "len",
    "regex.test_regex.regex",
    "regex.test_regex.string",
    "regex.test_regex.sys"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_weakref": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "weakref.proxy"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_word_boundary": {
  "data": {
   "lineno": 1554,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_word_class": {
  "data": {
   "lineno": 1199,
   "symbols_in_volume": [
    "regex.test_regex.regex"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.RegexTests.test_zerowidth": {
  "data": {
   "lineno": 1343,
   "symbols_in_volume": [
    "regex.test_regex.regex",
    "regex.test_regex.sys"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.StrSubclass": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "class"
 },
 "regex.test_regex.StrSubclass.__getitem__": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "regex.test_regex.StrSubclass",
    "super"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.array": {
  "data": {
   "shadows": "array"
  },
  "type": "import"
 },
 "regex.test_regex.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "regex.test_regex.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "regex.test_regex.proxy": {
  "data": {
   "shadows": "weakref.proxy"
  },
  "type": "import"
 },
 "regex.test_regex.regex": {
  "data": {
   "shadows": "regex"
  },
  "type": "import"
 },
 "regex.test_regex.string": {
  "data": {
   "shadows": "string"
  },
  "type": "import"
 },
 "regex.test_regex.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "regex.test_regex.test_main": {
  "data": {
   "lineno": 4363,
   "symbols_in_volume": [
    "regex.test_regex.unittest"
   ]
  },
  "type": "function"
 },
 "regex.test_regex.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 }
}