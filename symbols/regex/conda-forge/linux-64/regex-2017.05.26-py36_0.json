{
 "_regex_core": {
  "lineno": null,
  "symbols_in_volume": [
   "Boundary",
   "DefaultBoundary",
   "DefaultEndOfWord",
   "DefaultStartOfWord",
   "EndOfString",
   "EndOfWord",
   "Failure",
   "Keep",
   "Namespace",
   "Prune",
   "Skip",
   "StartOfString",
   "StartOfWord",
   "_regex.get_code_size",
   "_regex.get_properties",
   "dict",
   "enumerate",
   "frozenset",
   "len",
   "lookup_property",
   "max",
   "object",
   "set",
   "setattr",
   "string.ascii_letters",
   "string.digits",
   "string.hexdigits",
   "string.octdigits"
  ],
  "type": "module"
 },
 "_regex_core.Any": {
  "lineno": 1942,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Any._compile": {
  "lineno": 1949,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Any.dump": {
  "lineno": 1955,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.Any.has_simple_start": {
  "lineno": 1946,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Any.max_width": {
  "lineno": 1958,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.AnyAll": {
  "lineno": 1961,
  "symbols_in_volume": [
   "Any"
  ],
  "type": "class"
 },
 "_regex_core.AnyU": {
  "lineno": 1965,
  "symbols_in_volume": [
   "Any"
  ],
  "type": "class"
 },
 "_regex_core.Atomic": {
  "lineno": 1969,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Atomic.__eq__": {
  "lineno": 2015,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.Atomic.__init__": {
  "lineno": 1970,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic._compile": {
  "lineno": 2004,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic.can_be_affix": {
  "lineno": 1992,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic.contains_group": {
  "lineno": 1995,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic.dump": {
  "lineno": 2008,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.Atomic.fix_groups": {
  "lineno": 1974,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic.get_firstset": {
  "lineno": 1998,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic.get_required_string": {
  "lineno": 2022,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic.has_simple_start": {
  "lineno": 2001,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic.is_empty": {
  "lineno": 2012,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic.max_width": {
  "lineno": 2019,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic.optimise": {
  "lineno": 1977,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic.pack_characters": {
  "lineno": 1984,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Atomic.remove_captures": {
  "lineno": 1988,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Boundary": {
  "lineno": 2025,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Branch": {
  "lineno": 2029,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Branch.__eq__": {
  "lineno": 2409,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.Branch.__init__": {
  "lineno": 2030,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Branch._add_precheck": {
  "lineno": 2070,
  "symbols_in_volume": [
   "Character",
   "Literal",
   "_check_firstset",
   "set",
   "type"
  ],
  "type": "function"
 },
 "_regex_core.Branch._can_split": {
  "lineno": 2222,
  "symbols_in_volume": [
   "Branch._is_folded",
   "Branch._is_full_case",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch._can_split_rev": {
  "lineno": 2247,
  "symbols_in_volume": [
   "Branch._is_folded",
   "Branch._is_full_case",
   "len",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch._compile": {
  "lineno": 2109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Branch._flatten_branches": {
  "lineno": 2126,
  "symbols_in_volume": [
   "Branch",
   "isinstance",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch._flush_char_prefix": {
  "lineno": 2334,
  "symbols_in_volume": [
   "Branch",
   "Character",
   "Sequence",
   "len",
   "make_sequence",
   "sorted",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch._flush_set_members": {
  "lineno": 2360,
  "symbols_in_volume": [
   "SetUnion",
   "len",
   "list",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch._is_folded": {
  "lineno": 2384,
  "symbols_in_volume": [
   "Character",
   "_regex.fold_case",
   "_regex.get_expand_on_folding",
   "chr",
   "isinstance",
   "len",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch._is_full_case": {
  "lineno": 2375,
  "symbols_in_volume": [
   "Character",
   "isinstance",
   "len",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch._is_simple_character": {
  "lineno": 2302,
  "symbols_in_volume": [
   "Character",
   "isinstance",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch._merge_common_prefixes": {
  "lineno": 2274,
  "symbols_in_volume": [
   "Branch._flush_char_prefix",
   "Branch._is_simple_character",
   "Sequence",
   "collections.defaultdict",
   "isinstance",
   "len",
   "list",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch._reduce_to_set": {
  "lineno": 2306,
  "symbols_in_volume": [
   "Branch._flush_set_members",
   "Character",
   "Property",
   "isinstance",
   "set",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch._split_common_prefix": {
  "lineno": 2139,
  "symbols_in_volume": [
   "Branch._can_split",
   "Sequence",
   "all",
   "isinstance",
   "len",
   "make_sequence",
   "min",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch._split_common_suffix": {
  "lineno": 2181,
  "symbols_in_volume": [
   "Branch._can_split_rev",
   "Sequence",
   "all",
   "isinstance",
   "len",
   "make_sequence",
   "min",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Branch.can_be_affix": {
  "lineno": 2096,
  "symbols_in_volume": [
   "all"
  ],
  "type": "function"
 },
 "_regex_core.Branch.contains_group": {
  "lineno": 2099,
  "symbols_in_volume": [
   "any"
  ],
  "type": "function"
 },
 "_regex_core.Branch.dump": {
  "lineno": 2119,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.Branch.fix_groups": {
  "lineno": 2034,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Branch.get_firstset": {
  "lineno": 2102,
  "symbols_in_volume": [
   "set"
  ],
  "type": "function"
 },
 "_regex_core.Branch.is_atomic": {
  "lineno": 2093,
  "symbols_in_volume": [
   "all"
  ],
  "type": "function"
 },
 "_regex_core.Branch.is_empty": {
  "lineno": 2406,
  "symbols_in_volume": [
   "all"
  ],
  "type": "function"
 },
 "_regex_core.Branch.max_width": {
  "lineno": 2412,
  "symbols_in_volume": [
   "max"
  ],
  "type": "function"
 },
 "_regex_core.Branch.optimise": {
  "lineno": 2038,
  "symbols_in_volume": [
   "Branch",
   "Branch._flatten_branches",
   "Branch._reduce_to_set",
   "Branch._split_common_prefix",
   "Branch._split_common_suffix",
   "len",
   "make_sequence"
  ],
  "type": "function"
 },
 "_regex_core.Branch.pack_characters": {
  "lineno": 2085,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Branch.remove_captures": {
  "lineno": 2089,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.CallGroup": {
  "lineno": 2415,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.CallGroup.__eq__": {
  "lineno": 2452,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.CallGroup.__init__": {
  "lineno": 2416,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.CallGroup._compile": {
  "lineno": 2446,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.CallGroup.dump": {
  "lineno": 2449,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.CallGroup.fix_groups": {
  "lineno": 2424,
  "symbols_in_volume": [
   "KeyError",
   "ValueError",
   "error",
   "int"
  ],
  "type": "function"
 },
 "_regex_core.CallGroup.max_width": {
  "lineno": 2455,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.CallGroup.remove_captures": {
  "lineno": 2443,
  "symbols_in_volume": [
   "error"
  ],
  "type": "function"
 },
 "_regex_core.CallRef": {
  "lineno": 2458,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.CallRef.__init__": {
  "lineno": 2459,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.CallRef._compile": {
  "lineno": 2463,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Character": {
  "lineno": 2467,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Character.__init__": {
  "lineno": 2474,
  "symbols_in_volume": [
   "_regex.fold_case",
   "bool",
   "chr"
  ],
  "type": "function"
 },
 "_regex_core.Character._compile": {
  "lineno": 2503,
  "symbols_in_volume": [
   "Branch",
   "PrecompiledCode",
   "String",
   "len",
   "ord"
  ],
  "type": "function"
 },
 "_regex_core.Character.dump": {
  "lineno": 2522,
  "symbols_in_volume": [
   "ascii",
   "chr",
   "print"
  ],
  "type": "function"
 },
 "_regex_core.Character.get_firstset": {
  "lineno": 2497,
  "symbols_in_volume": [
   "set"
  ],
  "type": "function"
 },
 "_regex_core.Character.get_required_string": {
  "lineno": 2533,
  "symbols_in_volume": [
   "ord",
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.Character.has_simple_start": {
  "lineno": 2500,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Character.matches": {
  "lineno": 2527,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Character.max_width": {
  "lineno": 2530,
  "symbols_in_volume": [
   "len"
  ],
  "type": "function"
 },
 "_regex_core.Character.optimise": {
  "lineno": 2494,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Character.rebuild": {
  "lineno": 2491,
  "symbols_in_volume": [
   "Character"
  ],
  "type": "function"
 },
 "_regex_core.Conditional": {
  "lineno": 2541,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Conditional.__eq__": {
  "lineno": 2620,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.Conditional.__init__": {
  "lineno": 2542,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Conditional._compile": {
  "lineno": 2598,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Conditional.can_be_affix": {
  "lineno": 2588,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Conditional.contains_group": {
  "lineno": 2591,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Conditional.dump": {
  "lineno": 2610,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.Conditional.fix_groups": {
  "lineno": 2550,
  "symbols_in_volume": [
   "KeyError",
   "ValueError",
   "error",
   "int"
  ],
  "type": "function"
 },
 "_regex_core.Conditional.get_firstset": {
  "lineno": 2594,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Conditional.is_atomic": {
  "lineno": 2585,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Conditional.is_empty": {
  "lineno": 2617,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Conditional.max_width": {
  "lineno": 2624,
  "symbols_in_volume": [
   "max"
  ],
  "type": "function"
 },
 "_regex_core.Conditional.optimise": {
  "lineno": 2570,
  "symbols_in_volume": [
   "Conditional"
  ],
  "type": "function"
 },
 "_regex_core.Conditional.pack_characters": {
  "lineno": 2576,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Conditional.remove_captures": {
  "lineno": 2581,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.DefaultBoundary": {
  "lineno": 2627,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.DefaultEndOfWord": {
  "lineno": 2631,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.DefaultStartOfWord": {
  "lineno": 2635,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.EndOfLine": {
  "lineno": 2639,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.EndOfLineU": {
  "lineno": 2643,
  "symbols_in_volume": [
   "EndOfLine"
  ],
  "type": "class"
 },
 "_regex_core.EndOfString": {
  "lineno": 2647,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.EndOfStringLine": {
  "lineno": 2651,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.EndOfStringLineU": {
  "lineno": 2655,
  "symbols_in_volume": [
   "EndOfStringLine"
  ],
  "type": "class"
 },
 "_regex_core.EndOfWord": {
  "lineno": 2659,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Failure": {
  "lineno": 2663,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Failure._compile": {
  "lineno": 2666,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Fuzzy": {
  "lineno": 2669,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Fuzzy.__eq__": {
  "lineno": 2755,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.Fuzzy.__init__": {
  "lineno": 2670,
  "symbols_in_volume": [
   "set"
  ],
  "type": "function"
 },
 "_regex_core.Fuzzy._compile": {
  "lineno": 2722,
  "symbols_in_volume": [
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.Fuzzy._constraints_to_string": {
  "lineno": 2762,
  "symbols_in_volume": [
   "max",
   "min"
  ],
  "type": "function"
 },
 "_regex_core.Fuzzy.contains_group": {
  "lineno": 2719,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Fuzzy.dump": {
  "lineno": 2745,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.Fuzzy.fix_groups": {
  "lineno": 2705,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Fuzzy.is_atomic": {
  "lineno": 2716,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Fuzzy.is_empty": {
  "lineno": 2752,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Fuzzy.max_width": {
  "lineno": 2759,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Fuzzy.pack_characters": {
  "lineno": 2708,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Fuzzy.remove_captures": {
  "lineno": 2712,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Grapheme": {
  "lineno": 2795,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Grapheme._compile": {
  "lineno": 2796,
  "symbols_in_volume": [
   "AnyAll",
   "Atomic",
   "GraphemeBoundary",
   "LazyRepeat",
   "Sequence"
  ],
  "type": "function"
 },
 "_regex_core.Grapheme.dump": {
  "lineno": 2804,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.Grapheme.max_width": {
  "lineno": 2807,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.GraphemeBoundary": {
  "lineno": 2810,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.GraphemeBoundary.compile": {
  "lineno": 2811,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.GreedyRepeat": {
  "lineno": 2814,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.GreedyRepeat.__eq__": {
  "lineno": 2882,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.__init__": {
  "lineno": 2818,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.GreedyRepeat._compile": {
  "lineno": 2856,
  "symbols_in_volume": [
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.can_be_affix": {
  "lineno": 2843,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.contains_group": {
  "lineno": 2846,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.dump": {
  "lineno": 2869,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.fix_groups": {
  "lineno": 2824,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.get_firstset": {
  "lineno": 2849,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.get_required_string": {
  "lineno": 2893,
  "symbols_in_volume": [
   "min"
  ],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.is_atomic": {
  "lineno": 2840,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.is_empty": {
  "lineno": 2879,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.max_width": {
  "lineno": 2887,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.optimise": {
  "lineno": 2827,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.pack_characters": {
  "lineno": 2832,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.GreedyRepeat.remove_captures": {
  "lineno": 2836,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group": {
  "lineno": 2906,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Group.__eq__": {
  "lineno": 2974,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.Group.__init__": {
  "lineno": 2907,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group._compile": {
  "lineno": 2946,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group.can_be_affix": {
  "lineno": 2934,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group.contains_group": {
  "lineno": 2937,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group.dump": {
  "lineno": 2967,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.Group.fix_groups": {
  "lineno": 2915,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group.get_firstset": {
  "lineno": 2940,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group.get_required_string": {
  "lineno": 2981,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group.has_simple_start": {
  "lineno": 2943,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group.is_atomic": {
  "lineno": 2931,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group.max_width": {
  "lineno": 2978,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group.optimise": {
  "lineno": 2919,
  "symbols_in_volume": [
   "Group"
  ],
  "type": "function"
 },
 "_regex_core.Group.pack_characters": {
  "lineno": 2924,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Group.remove_captures": {
  "lineno": 2928,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Info": {
  "lineno": 4198,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Info.__init__": {
  "lineno": 4201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Info.close_group": {
  "lineno": 4246,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Info.is_open_group": {
  "lineno": 4249,
  "symbols_in_volume": [
   "int"
  ],
  "type": "function"
 },
 "_regex_core.Info.open_group": {
  "lineno": 4220,
  "symbols_in_volume": [
   "len"
  ],
  "type": "function"
 },
 "_regex_core.Keep": {
  "lineno": 2984,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.LazyRepeat": {
  "lineno": 2988,
  "symbols_in_volume": [
   "GreedyRepeat"
  ],
  "type": "class"
 },
 "_regex_core.Literal": {
  "lineno": 3872,
  "symbols_in_volume": [
   "String"
  ],
  "type": "class"
 },
 "_regex_core.Literal.dump": {
  "lineno": 3873,
  "symbols_in_volume": [
   "ascii",
   "chr",
   "print"
  ],
  "type": "function"
 },
 "_regex_core.LookAround": {
  "lineno": 2992,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.LookAround.__eq__": {
  "lineno": 3039,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.LookAround.__init__": {
  "lineno": 2995,
  "symbols_in_volume": [
   "bool"
  ],
  "type": "function"
 },
 "_regex_core.LookAround._compile": {
  "lineno": 3027,
  "symbols_in_volume": [
   "int"
  ],
  "type": "function"
 },
 "_regex_core.LookAround.can_be_affix": {
  "lineno": 3021,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAround.contains_group": {
  "lineno": 3024,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAround.dump": {
  "lineno": 3031,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.LookAround.fix_groups": {
  "lineno": 3001,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAround.is_atomic": {
  "lineno": 3018,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAround.is_empty": {
  "lineno": 3036,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAround.max_width": {
  "lineno": 3043,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAround.optimise": {
  "lineno": 3004,
  "symbols_in_volume": [
   "LookAround"
  ],
  "type": "function"
 },
 "_regex_core.LookAround.pack_characters": {
  "lineno": 3011,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAround.remove_captures": {
  "lineno": 3015,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAroundConditional": {
  "lineno": 3046,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.LookAroundConditional.__eq__": {
  "lineno": 3125,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.__init__": {
  "lineno": 3049,
  "symbols_in_volume": [
   "bool"
  ],
  "type": "function"
 },
 "_regex_core.LookAroundConditional._compile": {
  "lineno": 3097,
  "symbols_in_volume": [
   "int"
  ],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.can_be_affix": {
  "lineno": 3085,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.contains_group": {
  "lineno": 3089,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.dump": {
  "lineno": 3111,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.fix_groups": {
  "lineno": 3057,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.get_firstset": {
  "lineno": 3093,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.get_required_string": {
  "lineno": 3132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.is_atomic": {
  "lineno": 3081,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.is_empty": {
  "lineno": 3121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.max_width": {
  "lineno": 3129,
  "symbols_in_volume": [
   "max"
  ],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.optimise": {
  "lineno": 3062,
  "symbols_in_volume": [
   "LookAroundConditional"
  ],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.pack_characters": {
  "lineno": 3070,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.LookAroundConditional.remove_captures": {
  "lineno": 3076,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Namespace": {
  "lineno": 236,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.ParseError": {
  "lineno": 65,
  "symbols_in_volume": [
   "Exception"
  ],
  "type": "class"
 },
 "_regex_core.PossessiveRepeat": {
  "lineno": 512,
  "symbols_in_volume": [
   "Atomic",
   "GreedyRepeat"
  ],
  "type": "function"
 },
 "_regex_core.PrecompiledCode": {
  "lineno": 3135,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.PrecompiledCode.__init__": {
  "lineno": 3136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.PrecompiledCode._compile": {
  "lineno": 3139,
  "symbols_in_volume": [
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.Property": {
  "lineno": 3142,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Property.__init__": {
  "lineno": 3149,
  "symbols_in_volume": [
   "bool"
  ],
  "type": "function"
 },
 "_regex_core.Property._compile": {
  "lineno": 3172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Property.dump": {
  "lineno": 3182,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.Property.get_firstset": {
  "lineno": 3166,
  "symbols_in_volume": [
   "set"
  ],
  "type": "function"
 },
 "_regex_core.Property.has_simple_start": {
  "lineno": 3169,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Property.matches": {
  "lineno": 3188,
  "symbols_in_volume": [
   "_regex.has_property_value"
  ],
  "type": "function"
 },
 "_regex_core.Property.max_width": {
  "lineno": 3191,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Property.optimise": {
  "lineno": 3163,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Property.rebuild": {
  "lineno": 3160,
  "symbols_in_volume": [
   "Property"
  ],
  "type": "function"
 },
 "_regex_core.Prune": {
  "lineno": 3194,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Prune._compile": {
  "lineno": 3197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Range": {
  "lineno": 3200,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Range.__init__": {
  "lineno": 3207,
  "symbols_in_volume": [
   "bool"
  ],
  "type": "function"
 },
 "_regex_core.Range._compile": {
  "lineno": 3253,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Range.dump": {
  "lineno": 3264,
  "symbols_in_volume": [
   "ascii",
   "chr",
   "print"
  ],
  "type": "function"
 },
 "_regex_core.Range.matches": {
  "lineno": 3271,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Range.max_width": {
  "lineno": 3274,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Range.optimise": {
  "lineno": 3222,
  "symbols_in_volume": [
   "Branch",
   "String",
   "_regex.fold_case",
   "_regex.get_expand_on_folding",
   "len",
   "ord"
  ],
  "type": "function"
 },
 "_regex_core.Range.rebuild": {
  "lineno": 3219,
  "symbols_in_volume": [
   "Range"
  ],
  "type": "function"
 },
 "_regex_core.RefGroup": {
  "lineno": 3277,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.RefGroup.__init__": {
  "lineno": 3284,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RefGroup._compile": {
  "lineno": 3310,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RefGroup.dump": {
  "lineno": 3316,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.RefGroup.fix_groups": {
  "lineno": 3293,
  "symbols_in_volume": [
   "KeyError",
   "ValueError",
   "error",
   "int"
  ],
  "type": "function"
 },
 "_regex_core.RefGroup.max_width": {
  "lineno": 3320,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RefGroup.remove_captures": {
  "lineno": 3307,
  "symbols_in_volume": [
   "error"
  ],
  "type": "function"
 },
 "_regex_core.RegexBase": {
  "lineno": 1845,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.RegexBase.__eq__": {
  "lineno": 1905,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.RegexBase.__hash__": {
  "lineno": 1902,
  "symbols_in_volume": [
   "hash"
  ],
  "type": "function"
 },
 "_regex_core.RegexBase.__init__": {
  "lineno": 1846,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.__ne__": {
  "lineno": 1908,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.can_be_affix": {
  "lineno": 1884,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.compile": {
  "lineno": 1896,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.contains_group": {
  "lineno": 1887,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.fix_groups": {
  "lineno": 1869,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.get_firstset": {
  "lineno": 1890,
  "symbols_in_volume": [
   "_FirstSetError"
  ],
  "type": "function"
 },
 "_regex_core.RegexBase.get_required_string": {
  "lineno": 1911,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.has_simple_start": {
  "lineno": 1893,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.is_atomic": {
  "lineno": 1881,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.is_empty": {
  "lineno": 1899,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.optimise": {
  "lineno": 1872,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.pack_characters": {
  "lineno": 1875,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.remove_captures": {
  "lineno": 1878,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.RegexBase.with_flags": {
  "lineno": 1849,
  "symbols_in_volume": [
   "bool"
  ],
  "type": "function"
 },
 "_regex_core.Scanner": {
  "lineno": 4323,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Scanner.__init__": {
  "lineno": 4324,
  "symbols_in_volume": [
   "Branch",
   "Group",
   "Info",
   "Source",
   "ValueError",
   "_FirstSetError",
   "_check_group_features",
   "_compile_firstset",
   "_flatten_code",
   "_get_required_string",
   "_parse_pattern",
   "_regex.compile",
   "bool",
   "enumerate",
   "error",
   "len"
  ],
  "type": "function"
 },
 "_regex_core.Scanner.scan": {
  "lineno": 4397,
  "symbols_in_volume": [
   "action",
   "append",
   "hasattr",
   "match",
   "string"
  ],
  "type": "function"
 },
 "_regex_core.SearchAnchor": {
  "lineno": 3323,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Sequence": {
  "lineno": 3327,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Sequence.__eq__": {
  "lineno": 3519,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.Sequence.__init__": {
  "lineno": 3328,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Sequence._compile": {
  "lineno": 3418,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Sequence._fix_full_casefold": {
  "lineno": 3461,
  "symbols_in_volume": [
   "Literal",
   "Sequence._merge_chunks",
   "_regex.fold_case",
   "_regex.get_expand_on_folding",
   "chr",
   "len",
   "staticmethod",
   "string",
   "string.find"
  ],
  "type": "function"
 },
 "_regex_core.Sequence._flush_characters": {
  "lineno": 3433,
  "symbols_in_volume": [
   "Character",
   "Sequence._fix_full_casefold",
   "String",
   "any",
   "is_cased_i",
   "len",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Sequence._merge_chunks": {
  "lineno": 3495,
  "symbols_in_volume": [
   "len",
   "max",
   "staticmethod"
  ],
  "type": "function"
 },
 "_regex_core.Sequence.can_be_affix": {
  "lineno": 3396,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Sequence.contains_group": {
  "lineno": 3399,
  "symbols_in_volume": [
   "any"
  ],
  "type": "function"
 },
 "_regex_core.Sequence.dump": {
  "lineno": 3429,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Sequence.fix_groups": {
  "lineno": 3335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Sequence.get_firstset": {
  "lineno": 3402,
  "symbols_in_volume": [
   "set"
  ],
  "type": "function"
 },
 "_regex_core.Sequence.get_required_string": {
  "lineno": 3525,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.Sequence.has_simple_start": {
  "lineno": 3415,
  "symbols_in_volume": [
   "bool"
  ],
  "type": "function"
 },
 "_regex_core.Sequence.is_atomic": {
  "lineno": 3393,
  "symbols_in_volume": [
   "all"
  ],
  "type": "function"
 },
 "_regex_core.Sequence.is_empty": {
  "lineno": 3516,
  "symbols_in_volume": [
   "all"
  ],
  "type": "function"
 },
 "_regex_core.Sequence.max_width": {
  "lineno": 3522,
  "symbols_in_volume": [
   "sum"
  ],
  "type": "function"
 },
 "_regex_core.Sequence.optimise": {
  "lineno": 3339,
  "symbols_in_volume": [
   "Sequence",
   "isinstance",
   "make_sequence"
  ],
  "type": "function"
 },
 "_regex_core.Sequence.pack_characters": {
  "lineno": 3351,
  "symbols_in_volume": [
   "Character",
   "Literal",
   "Sequence._flush_characters",
   "String",
   "any",
   "is_cased_i",
   "make_sequence",
   "type"
  ],
  "type": "function"
 },
 "_regex_core.Sequence.remove_captures": {
  "lineno": 3389,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.SetBase": {
  "lineno": 3540,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.SetBase.__init__": {
  "lineno": 3541,
  "symbols_in_volume": [
   "bool",
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.SetBase._compile": {
  "lineno": 3565,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.SetBase._handle_case_folding": {
  "lineno": 3587,
  "symbols_in_volume": [
   "Branch",
   "String",
   "_regex.fold_case",
   "_regex.get_expand_on_folding",
   "ord",
   "set"
  ],
  "type": "function"
 },
 "_regex_core.SetBase.dump": {
  "lineno": 3581,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.SetBase.get_firstset": {
  "lineno": 3559,
  "symbols_in_volume": [
   "set"
  ],
  "type": "function"
 },
 "_regex_core.SetBase.has_simple_start": {
  "lineno": 3562,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.SetBase.max_width": {
  "lineno": 3617,
  "symbols_in_volume": [
   "_regex.fold_case",
   "_regex.get_expand_on_folding",
   "len",
   "max",
   "ord",
   "set"
  ],
  "type": "function"
 },
 "_regex_core.SetBase.rebuild": {
  "lineno": 3555,
  "symbols_in_volume": [
   "type"
  ],
  "type": "function"
 },
 "_regex_core.SetDiff": {
  "lineno": 3642,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.SetDiff.matches": {
  "lineno": 3664,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.SetDiff.optimise": {
  "lineno": 3650,
  "symbols_in_volume": [
   "SetUnion",
   "len",
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.SetInter": {
  "lineno": 3668,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.SetInter.matches": {
  "lineno": 3694,
  "symbols_in_volume": [
   "all"
  ],
  "type": "function"
 },
 "_regex_core.SetInter.optimise": {
  "lineno": 3676,
  "symbols_in_volume": [
   "SetInter",
   "isinstance",
   "len",
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.SetSymDiff": {
  "lineno": 3698,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.SetSymDiff.matches": {
  "lineno": 3724,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.SetSymDiff.optimise": {
  "lineno": 3706,
  "symbols_in_volume": [
   "SetSymDiff",
   "isinstance",
   "len",
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.SetUnion": {
  "lineno": 3731,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.SetUnion._compile": {
  "lineno": 3759,
  "symbols_in_volume": [
   "Character",
   "collections.defaultdict",
   "isinstance",
   "len",
   "list",
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.SetUnion.matches": {
  "lineno": 3793,
  "symbols_in_volume": [
   "any"
  ],
  "type": "function"
 },
 "_regex_core.SetUnion.optimise": {
  "lineno": 3739,
  "symbols_in_volume": [
   "SetUnion",
   "isinstance",
   "len",
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.Skip": {
  "lineno": 3797,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Source": {
  "lineno": 3976,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.Source.__init__": {
  "lineno": 3978,
  "symbols_in_volume": [
   "bytes",
   "chr",
   "isinstance",
   "str",
   "string",
   "string.decode"
  ],
  "type": "function"
 },
 "_regex_core.Source.at_end": {
  "lineno": 4176,
  "symbols_in_volume": [
   "IndexError",
   "ValueError",
   "len",
   "string",
   "string.index",
   "string.isspace"
  ],
  "type": "function"
 },
 "_regex_core.Source.expect": {
  "lineno": 4172,
  "symbols_in_volume": [
   "error"
  ],
  "type": "function"
 },
 "_regex_core.Source.get": {
  "lineno": 3990,
  "symbols_in_volume": [
   "IndexError",
   "ValueError",
   "len",
   "string",
   "string.index",
   "string.isspace"
  ],
  "type": "function"
 },
 "_regex_core.Source.get_many": {
  "lineno": 4018,
  "symbols_in_volume": [
   "IndexError",
   "ValueError",
   "len",
   "string",
   "string.index",
   "string.isspace"
  ],
  "type": "function"
 },
 "_regex_core.Source.get_while": {
  "lineno": 4056,
  "symbols_in_volume": [
   "IndexError",
   "ValueError",
   "len",
   "string",
   "string.index",
   "string.isspace"
  ],
  "type": "function"
 },
 "_regex_core.Source.match": {
  "lineno": 4133,
  "symbols_in_volume": [
   "IndexError",
   "ValueError",
   "len",
   "string",
   "string.index",
   "string.isspace",
   "string.startswith"
  ],
  "type": "function"
 },
 "_regex_core.Source.skip_while": {
  "lineno": 4104,
  "symbols_in_volume": [
   "IndexError",
   "ValueError",
   "len",
   "string",
   "string.index",
   "string.isspace"
  ],
  "type": "function"
 },
 "_regex_core.StartOfLine": {
  "lineno": 3801,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.StartOfLineU": {
  "lineno": 3805,
  "symbols_in_volume": [
   "StartOfLine"
  ],
  "type": "class"
 },
 "_regex_core.StartOfString": {
  "lineno": 3809,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.StartOfWord": {
  "lineno": 3813,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.String": {
  "lineno": 3817,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.String.__init__": {
  "lineno": 3824,
  "symbols_in_volume": [
   "_regex.fold_case",
   "chr",
   "ord",
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.String._compile": {
  "lineno": 3852,
  "symbols_in_volume": [
   "len"
  ],
  "type": "function"
 },
 "_regex_core.String.dump": {
  "lineno": 3861,
  "symbols_in_volume": [
   "ascii",
   "chr",
   "print"
  ],
  "type": "function"
 },
 "_regex_core.String.get_firstset": {
  "lineno": 3841,
  "symbols_in_volume": [
   "Character",
   "set"
  ],
  "type": "function"
 },
 "_regex_core.String.get_required_string": {
  "lineno": 3869,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.String.has_simple_start": {
  "lineno": 3849,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.String.max_width": {
  "lineno": 3866,
  "symbols_in_volume": [
   "len"
  ],
  "type": "function"
 },
 "_regex_core.StringSet": {
  "lineno": 3879,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.StringSet.__init__": {
  "lineno": 3886,
  "symbols_in_volume": [
   "len"
  ],
  "type": "function"
 },
 "_regex_core.StringSet._compile": {
  "lineno": 3897,
  "symbols_in_volume": [
   "Branch",
   "Character",
   "Sequence",
   "len",
   "max",
   "min",
   "string"
  ],
  "type": "function"
 },
 "_regex_core.StringSet._flatten": {
  "lineno": 3944,
  "symbols_in_volume": [
   "Branch",
   "Character",
   "Sequence",
   "String",
   "isinstance",
   "len"
  ],
  "type": "function"
 },
 "_regex_core.StringSet._folded": {
  "lineno": 3938,
  "symbols_in_volume": [
   "_regex.fold_case",
   "isinstance",
   "list",
   "ord",
   "str"
  ],
  "type": "function"
 },
 "_regex_core.StringSet.dump": {
  "lineno": 3934,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.StringSet.max_width": {
  "lineno": 3965,
  "symbols_in_volume": [
   "_regex.fold_case",
   "len",
   "max"
  ],
  "type": "function"
 },
 "_regex_core.ZeroWidthBase": {
  "lineno": 1915,
  "symbols_in_volume": [],
  "type": "class"
 },
 "_regex_core.ZeroWidthBase.__init__": {
  "lineno": 1916,
  "symbols_in_volume": [
   "bool"
  ],
  "type": "function"
 },
 "_regex_core.ZeroWidthBase._compile": {
  "lineno": 1925,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.ZeroWidthBase.dump": {
  "lineno": 1935,
  "symbols_in_volume": [
   "print"
  ],
  "type": "function"
 },
 "_regex_core.ZeroWidthBase.get_firstset": {
  "lineno": 1922,
  "symbols_in_volume": [
   "set"
  ],
  "type": "function"
 },
 "_regex_core.ZeroWidthBase.max_width": {
  "lineno": 1939,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core._FirstSetError": {
  "lineno": 69,
  "symbols_in_volume": [
   "Exception"
  ],
  "type": "class"
 },
 "_regex_core._UnscopedFlagSet": {
  "lineno": 61,
  "symbols_in_volume": [
   "Exception"
  ],
  "type": "class"
 },
 "_regex_core._check_firstset": {
  "lineno": 319,
  "symbols_in_volume": [
   "SetUnion",
   "isinstance",
   "list",
   "set"
  ],
  "type": "function"
 },
 "_regex_core._check_group_features": {
  "lineno": 4263,
  "symbols_in_volume": [
   "CallRef",
   "Fuzzy",
   "bool",
   "isinstance",
   "len"
  ],
  "type": "function"
 },
 "_regex_core._compile_firstset": {
  "lineno": 309,
  "symbols_in_volume": [
   "_check_firstset",
   "bool"
  ],
  "type": "function"
 },
 "_regex_core._compile_replacement": {
  "lineno": 1706,
  "symbols_in_volume": [
   "bytes",
   "compile_repl_group",
   "error",
   "int",
   "is_octal",
   "isinstance",
   "len",
   "ord",
   "parse_repl_hex_escape",
   "parse_repl_named_char"
  ],
  "type": "function"
 },
 "_regex_core._flatten_code": {
  "lineno": 350,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core._fold_case": {
  "lineno": 293,
  "symbols_in_volume": [
   "_regex.fold_case",
   "string"
  ],
  "type": "function"
 },
 "_regex_core._get_required_string": {
  "lineno": 4302,
  "symbols_in_volume": [
   "bool"
  ],
  "type": "function"
 },
 "_regex_core._parse_pattern": {
  "lineno": 391,
  "symbols_in_volume": [
   "Branch",
   "len",
   "parse_sequence"
  ],
  "type": "function"
 },
 "_regex_core._shrink_cache": {
  "lineno": 243,
  "symbols_in_volume": [
   "KeyError",
   "hasattr",
   "len",
   "random",
   "random.sample",
   "tuple"
  ],
  "type": "function"
 },
 "_regex_core.append_literal": {
  "lineno": 508,
  "symbols_in_volume": [
   "Literal"
  ],
  "type": "function"
 },
 "_regex_core.apply_constraint": {
  "lineno": 485,
  "symbols_in_volume": [
   "Character",
   "Fuzzy",
   "append_literal",
   "error",
   "isinstance"
  ],
  "type": "function"
 },
 "_regex_core.apply_quantifier": {
  "lineno": 448,
  "symbols_in_volume": [
   "Character",
   "append_literal",
   "error",
   "repeated"
  ],
  "type": "function"
 },
 "_regex_core.compile_repl_group": {
  "lineno": 1807,
  "symbols_in_volume": [
   "IndexError",
   "KeyError",
   "error",
   "int",
   "parse_name"
  ],
  "type": "function"
 },
 "_regex_core.error": {
  "lineno": 30,
  "symbols_in_volume": [
   "Exception"
  ],
  "type": "class"
 },
 "_regex_core.error.__init__": {
  "lineno": 42,
  "symbols_in_volume": [
   "Exception.__init__",
   "isinstance",
   "str"
  ],
  "type": "function"
 },
 "_regex_core.float_to_rational": {
  "lineno": 1593,
  "symbols_in_volume": [
   "abs",
   "error",
   "float_to_rational",
   "int"
  ],
  "type": "function"
 },
 "_regex_core.is_above_limit": {
  "lineno": 533,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.is_cased_f": {
  "lineno": 305,
  "symbols_in_volume": [
   "_regex.get_all_cases",
   "len"
  ],
  "type": "function"
 },
 "_regex_core.is_cased_i": {
  "lineno": 301,
  "symbols_in_volume": [
   "_regex.get_all_cases",
   "len"
  ],
  "type": "function"
 },
 "_regex_core.is_decimal": {
  "lineno": 1186,
  "symbols_in_volume": [
   "all",
   "string"
  ],
  "type": "function"
 },
 "_regex_core.is_hexadecimal": {
  "lineno": 1190,
  "symbols_in_volume": [
   "all",
   "string"
  ],
  "type": "function"
 },
 "_regex_core.is_octal": {
  "lineno": 1182,
  "symbols_in_volume": [
   "all",
   "string"
  ],
  "type": "function"
 },
 "_regex_core.lookup_property": {
  "lineno": 1634,
  "symbols_in_volume": [
   "Property",
   "error",
   "property",
   "standardise_name"
  ],
  "type": "function"
 },
 "_regex_core.make_case_flags": {
  "lineno": 358,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.make_character": {
  "lineno": 368,
  "symbols_in_volume": [
   "Character",
   "make_case_flags"
  ],
  "type": "function"
 },
 "_regex_core.make_property": {
  "lineno": 384,
  "symbols_in_volume": [
   "make_case_flags"
  ],
  "type": "function"
 },
 "_regex_core.make_ref_group": {
  "lineno": 376,
  "symbols_in_volume": [
   "RefGroup",
   "make_case_flags"
  ],
  "type": "function"
 },
 "_regex_core.make_sequence": {
  "lineno": 1839,
  "symbols_in_volume": [
   "Sequence",
   "len"
  ],
  "type": "function"
 },
 "_regex_core.make_string_set": {
  "lineno": 380,
  "symbols_in_volume": [
   "StringSet",
   "make_case_flags"
  ],
  "type": "function"
 },
 "_regex_core.numeric_to_rational": {
  "lineno": 1604,
  "symbols_in_volume": [
   "ValueError",
   "float",
   "float_to_rational",
   "len"
  ],
  "type": "function"
 },
 "_regex_core.parse_atomic": {
  "lineno": 1013,
  "symbols_in_volume": [
   "Atomic",
   "_parse_pattern",
   "bool"
  ],
  "type": "function"
 },
 "_regex_core.parse_call_group": {
  "lineno": 1043,
  "symbols_in_volume": [
   "CallGroup"
  ],
  "type": "function"
 },
 "_regex_core.parse_call_named_group": {
  "lineno": 1054,
  "symbols_in_volume": [
   "CallGroup",
   "parse_name"
  ],
  "type": "function"
 },
 "_regex_core.parse_comment": {
  "lineno": 931,
  "symbols_in_volume": [
   "set"
  ],
  "type": "function"
 },
 "_regex_core.parse_common": {
  "lineno": 1025,
  "symbols_in_volume": [
   "Branch",
   "len",
   "max",
   "parse_sequence"
  ],
  "type": "function"
 },
 "_regex_core.parse_conditional": {
  "lineno": 950,
  "symbols_in_volume": [
   "Conditional",
   "Sequence",
   "bool",
   "error",
   "parse_lookaround_conditional",
   "parse_name",
   "parse_sequence"
  ],
  "type": "function"
 },
 "_regex_core.parse_constraint": {
  "lineno": 671,
  "symbols_in_volume": [
   "ParseError"
  ],
  "type": "function"
 },
 "_regex_core.parse_cost_constraint": {
  "lineno": 598,
  "symbols_in_volume": [
   "ParseError",
   "error",
   "parse_constraint",
   "parse_cost_limit",
   "parse_fuzzy_compare"
  ],
  "type": "function"
 },
 "_regex_core.parse_cost_equation": {
  "lineno": 690,
  "symbols_in_volume": [
   "ParseError",
   "error",
   "int",
   "parse_cost_term",
   "parse_count",
   "parse_fuzzy_compare"
  ],
  "type": "function"
 },
 "_regex_core.parse_cost_limit": {
  "lineno": 659,
  "symbols_in_volume": [
   "ValueError",
   "error",
   "int",
   "parse_count"
  ],
  "type": "function"
 },
 "_regex_core.parse_cost_term": {
  "lineno": 717,
  "symbols_in_volume": [
   "ParseError",
   "error",
   "int",
   "parse_count"
  ],
  "type": "function"
 },
 "_regex_core.parse_count": {
  "lineno": 729,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.parse_escape": {
  "lineno": 1194,
  "symbols_in_volume": [
   "Character",
   "Grapheme",
   "SearchAnchor",
   "error",
   "make_character",
   "ord",
   "parse_group_ref",
   "parse_hex_escape",
   "parse_named_char",
   "parse_numeric_escape",
   "parse_property",
   "parse_string_set"
  ],
  "type": "function"
 },
 "_regex_core.parse_extension": {
  "lineno": 895,
  "symbols_in_volume": [
   "Group",
   "_parse_pattern",
   "bool",
   "error",
   "make_ref_group",
   "parse_call_named_group",
   "parse_name"
  ],
  "type": "function"
 },
 "_regex_core.parse_flag_set": {
  "lineno": 1061,
  "symbols_in_volume": [
   "KeyError"
  ],
  "type": "function"
 },
 "_regex_core.parse_flags": {
  "lineno": 1077,
  "symbols_in_volume": [
   "error",
   "parse_flag_set"
  ],
  "type": "function"
 },
 "_regex_core.parse_flags_subpattern": {
  "lineno": 1108,
  "symbols_in_volume": [
   "_UnscopedFlagSet",
   "error",
   "parse_flags",
   "parse_positional_flags",
   "parse_subpattern"
  ],
  "type": "function"
 },
 "_regex_core.parse_fuzzy": {
  "lineno": 567,
  "symbols_in_volume": [
   "error",
   "parse_fuzzy_item"
  ],
  "type": "function"
 },
 "_regex_core.parse_fuzzy_compare": {
  "lineno": 681,
  "symbols_in_volume": [],
  "type": "function"
 },
 "_regex_core.parse_fuzzy_item": {
  "lineno": 588,
  "symbols_in_volume": [
   "parse_cost_constraint",
   "parse_cost_equation"
  ],
  "type": "function"
 },
 "_regex_core.parse_group_ref": {
  "lineno": 1336,
  "symbols_in_volume": [
   "error",
   "make_ref_group",
   "parse_name"
  ],
  "type": "function"
 },
 "_regex_core.parse_hex_escape": {
  "lineno": 1313,
  "symbols_in_volume": [
   "ValueError",
   "error",
   "int",
   "make_character",
   "range",
   "type"
  ],
  "type": "function"
 },
 "_regex_core.parse_limited_quantifier": {
  "lineno": 537,
  "symbols_in_volume": [
   "error",
   "int",
   "is_above_limit",
   "parse_count"
  ],
  "type": "function"
 },
 "_regex_core.parse_literal_and_element": {
  "lineno": 733,
  "symbols_in_volume": [
   "Any",
   "AnyAll",
   "AnyU",
   "EndOfLine",
   "EndOfLineU",
   "EndOfStringLine",
   "EndOfStringLineU",
   "StartOfLine",
   "StartOfLineU",
   "StartOfString",
   "make_case_flags",
   "ord",
   "parse_escape",
   "parse_paren",
   "parse_set"
  ],
  "type": "function"
 },
 "_regex_core.parse_lookaround": {
  "lineno": 938,
  "symbols_in_volume": [
   "LookAround",
   "_parse_pattern",
   "bool"
  ],
  "type": "function"
 },
 "_regex_core.parse_lookaround_conditional": {
  "lineno": 993,
  "symbols_in_volume": [
   "LookAroundConditional",
   "Sequence",
   "_parse_pattern",
   "bool",
   "parse_sequence"
  ],
  "type": "function"
 },
 "_regex_core.parse_name": {
  "lineno": 1163,
  "symbols_in_volume": [
   "error",
   "int",
   "set"
  ],
  "type": "function"
 },
 "_regex_core.parse_named_char": {
  "lineno": 1357,
  "symbols_in_volume": [
   "KeyError",
   "error",
   "make_character",
   "ord",
   "unicodedata.lookup"
  ],
  "type": "function"
 },
 "_regex_core.parse_numeric_escape": {
  "lineno": 1259,
  "symbols_in_volume": [
   "error",
   "int",
   "is_octal",
   "make_character",
   "make_ref_group",
   "parse_octal_escape"
  ],
  "type": "function"
 },
 "_regex_core.parse_octal_escape": {
  "lineno": 1292,
  "symbols_in_volume": [
   "ValueError",
   "error",
   "int",
   "len",
   "make_character"
  ],
  "type": "function"
 },
 "_regex_core.parse_paren": {
  "lineno": 805,
  "symbols_in_volume": [
   "Group",
   "_parse_pattern",
   "bool",
   "error",
   "parse_atomic",
   "parse_call_group",
   "parse_call_named_group",
   "parse_comment",
   "parse_common",
   "parse_conditional",
   "parse_extension",
   "parse_flags_subpattern",
   "parse_lookaround",
   "parse_name",
   "set"
  ],
  "type": "function"
 },
 "_regex_core.parse_positional_flags": {
  "lineno": 1143,
  "symbols_in_volume": [
   "_UnscopedFlagSet",
   "bool",
   "error"
  ],
  "type": "function"
 },
 "_regex_core.parse_posix_class": {
  "lineno": 1584,
  "symbols_in_volume": [
   "ParseError",
   "lookup_property",
   "parse_property_name"
  ],
  "type": "function"
 },
 "_regex_core.parse_property": {
  "lineno": 1373,
  "symbols_in_volume": [
   "lookup_property",
   "make_character",
   "make_property",
   "ord",
   "parse_property_name"
  ],
  "type": "function"
 },
 "_regex_core.parse_property_name": {
  "lineno": 1394,
  "symbols_in_volume": [
   "set"
  ],
  "type": "function"
 },
 "_regex_core.parse_quantifier": {
  "lineno": 518,
  "symbols_in_volume": [
   "parse_limited_quantifier"
  ],
  "type": "function"
 },
 "_regex_core.parse_repl_hex_escape": {
  "lineno": 1778,
  "symbols_in_volume": [
   "error",
   "int",
   "range",
   "type"
  ],
  "type": "function"
 },
 "_regex_core.parse_repl_named_char": {
  "lineno": 1790,
  "symbols_in_volume": [
   "KeyError",
   "error",
   "ord",
   "set",
   "unicodedata.lookup"
  ],
  "type": "function"
 },
 "_regex_core.parse_sequence": {
  "lineno": 401,
  "symbols_in_volume": [
   "append_literal",
   "apply_constraint",
   "apply_quantifier",
   "make_sequence",
   "ord",
   "parse_fuzzy",
   "parse_literal_and_element",
   "parse_quantifier",
   "tuple",
   "type"
  ],
  "type": "function"
 },
 "_regex_core.parse_set": {
  "lineno": 1416,
  "symbols_in_volume": [
   "error",
   "make_case_flags",
   "parse_set_imp_union",
   "parse_set_union"
  ],
  "type": "function"
 },
 "_regex_core.parse_set_diff": {
  "lineno": 1472,
  "symbols_in_volume": [
   "SetDiff",
   "len",
   "parse_set_imp_union"
  ],
  "type": "function"
 },
 "_regex_core.parse_set_imp_union": {
  "lineno": 1482,
  "symbols_in_volume": [
   "SetUnion",
   "any",
   "len",
   "parse_set_member"
  ],
  "type": "function"
 },
 "_regex_core.parse_set_inter": {
  "lineno": 1462,
  "symbols_in_volume": [
   "SetInter",
   "len",
   "parse_set_diff"
  ],
  "type": "function"
 },
 "_regex_core.parse_set_item": {
  "lineno": 1546,
  "symbols_in_volume": [
   "Character",
   "ParseError",
   "error",
   "ord",
   "parse_escape",
   "parse_posix_class",
   "parse_set_union"
  ],
  "type": "function"
 },
 "_regex_core.parse_set_member": {
  "lineno": 1505,
  "symbols_in_volume": [
   "Character",
   "Range",
   "SetUnion",
   "error",
   "isinstance",
   "ord",
   "parse_set_item"
  ],
  "type": "function"
 },
 "_regex_core.parse_set_symm_diff": {
  "lineno": 1452,
  "symbols_in_volume": [
   "SetSymDiff",
   "len",
   "parse_set_inter"
  ],
  "type": "function"
 },
 "_regex_core.parse_set_union": {
  "lineno": 1442,
  "symbols_in_volume": [
   "SetUnion",
   "len",
   "parse_set_symm_diff"
  ],
  "type": "function"
 },
 "_regex_core.parse_string_set": {
  "lineno": 1347,
  "symbols_in_volume": [
   "error",
   "make_string_set",
   "parse_name"
  ],
  "type": "function"
 },
 "_regex_core.parse_subpattern": {
  "lineno": 1094,
  "symbols_in_volume": [
   "_parse_pattern",
   "bool"
  ],
  "type": "function"
 },
 "_regex_core.standardise_name": {
  "lineno": 1625,
  "symbols_in_volume": [
   "ValueError",
   "ZeroDivisionError",
   "numeric_to_rational"
  ],
  "type": "function"
 },
 "regex": {
  "lineno": null,
  "symbols_in_volume": [
   "_compile",
   "_regex_core.DEFAULT_VERSION",
   "compile",
   "copyreg.pickle",
   "frozenset",
   "threading.RLock",
   "type"
  ],
  "type": "module"
 },
 "regex._compile": {
  "lineno": 426,
  "symbols_in_volume": [
   "KeyError",
   "TypeError",
   "ValueError",
   "_regex.compile",
   "_regex_core.DEFAULT_VERSION",
   "_regex_core.Fuzzy",
   "_regex_core.Info",
   "_regex_core.OP.CALL_REF",
   "_regex_core.OP.END",
   "_regex_core.OP.SUCCESS",
   "_regex_core.Source",
   "_regex_core._ALL_ENCODINGS",
   "_regex_core._ALL_VERSIONS",
   "_regex_core._FirstSetError",
   "_regex_core._UnscopedFlagSet",
   "_regex_core._check_group_features",
   "_regex_core._compile_firstset",
   "_regex_core._flatten_code",
   "_regex_core._fold_case",
   "_regex_core._get_required_string",
   "_regex_core._parse_pattern",
   "_regex_core._shrink_cache",
   "bool",
   "bytes",
   "dict",
   "error",
   "frozenset",
   "isinstance",
   "len",
   "locale.getpreferredencoding",
   "set",
   "str",
   "type"
  ],
  "type": "function"
 },
 "regex._compile_replacement_helper": {
  "lineno": 630,
  "symbols_in_volume": [
   "_regex_core.Source",
   "_regex_core._compile_replacement",
   "isinstance",
   "len",
   "make_string",
   "ord",
   "str"
  ],
  "type": "function"
 },
 "regex._compile_replacement_helper.make_string": {
  "lineno": 649,
  "symbols_in_volume": [
   "bytes"
  ],
  "type": "function"
 },
 "regex._pickle": {
  "lineno": 692,
  "symbols_in_volume": [
   "_regex.compile"
  ],
  "type": "function"
 },
 "regex.compile": {
  "lineno": 343,
  "symbols_in_volume": [
   "_compile"
  ],
  "type": "function"
 },
 "regex.escape": {
  "lineno": 356,
  "symbols_in_volume": [
   "bytes",
   "isinstance"
  ],
  "type": "function"
 },
 "regex.findall": {
  "lineno": 326,
  "symbols_in_volume": [
   "_compile"
  ],
  "type": "function"
 },
 "regex.finditer": {
  "lineno": 335,
  "symbols_in_volume": [
   "_compile"
  ],
  "type": "function"
 },
 "regex.fullmatch": {
  "lineno": 254,
  "symbols_in_volume": [
   "_compile"
  ],
  "type": "function"
 },
 "regex.match": {
  "lineno": 247,
  "symbols_in_volume": [
   "_compile"
  ],
  "type": "function"
 },
 "regex.purge": {
  "lineno": 347,
  "symbols_in_volume": [],
  "type": "function"
 },
 "regex.search": {
  "lineno": 261,
  "symbols_in_volume": [
   "_compile"
  ],
  "type": "function"
 },
 "regex.split": {
  "lineno": 312,
  "symbols_in_volume": [
   "_compile"
  ],
  "type": "function"
 },
 "regex.splititer": {
  "lineno": 321,
  "symbols_in_volume": [
   "_compile"
  ],
  "type": "function"
 },
 "regex.sub": {
  "lineno": 268,
  "symbols_in_volume": [
   "_compile"
  ],
  "type": "function"
 },
 "regex.subf": {
  "lineno": 278,
  "symbols_in_volume": [
   "_compile",
   "format"
  ],
  "type": "function"
 },
 "regex.subfn": {
  "lineno": 300,
  "symbols_in_volume": [
   "_compile",
   "format"
  ],
  "type": "function"
 },
 "regex.subn": {
  "lineno": 288,
  "symbols_in_volume": [
   "_compile"
  ],
  "type": "function"
 },
 "regex.template": {
  "lineno": 352,
  "symbols_in_volume": [
   "_compile"
  ],
  "type": "function"
 },
 "test_regex": {
  "lineno": null,
  "symbols_in_volume": [
   "__name__",
   "sys.version_info",
   "test_main"
  ],
  "type": "module"
 },
 "test_regex.BytesSubclass": {
  "lineno": 15,
  "symbols_in_volume": [
   "bytes"
  ],
  "type": "class"
 },
 "test_regex.BytesSubclass.__getitem__": {
  "lineno": 16,
  "symbols_in_volume": [
   "BytesSubclass",
   "super"
  ],
  "type": "function"
 },
 "test_regex.RegexTests": {
  "lineno": 19,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "test_regex.RegexTests.assertTypedEqual": {
  "lineno": 48,
  "symbols_in_volume": [
   "recurse"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.assertTypedEqual.recurse": {
  "lineno": 51,
  "symbols_in_volume": [
   "isinstance",
   "list",
   "recurse",
   "tuple",
   "type",
   "zip"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.bump_num": {
  "lineno": 79,
  "symbols_in_volume": [
   "int",
   "str"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_anyall": {
  "lineno": 527,
  "symbols_in_volume": [
   "regex.DOTALL",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_ascii_and_unicode_flag": {
  "lineno": 953,
  "symbols_in_volume": [
   "ValueError",
   "bool",
   "regex.ASCII",
   "regex.IGNORECASE",
   "regex.UNICODE",
   "regex.compile"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_atomic": {
  "lineno": 1295,
  "symbols_in_volume": [
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_basic_regex_sub": {
  "lineno": 83,
  "symbols_in_volume": [
   "chr",
   "regex.sub"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bigcharset": {
  "lineno": 512,
  "symbols_in_volume": [
   "regex.UNICODE",
   "regex.findall",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_branch_reset": {
  "lineno": 1567,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_10328": {
  "lineno": 1447,
  "symbols_in_volume": [
   "regex.compile"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_113254": {
  "lineno": 741,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_114660": {
  "lineno": 214,
  "symbols_in_volume": [
   "regex.sub"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_117612": {
  "lineno": 333,
  "symbols_in_volume": [
   "regex.findall"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_14462": {
  "lineno": 224,
  "symbols_in_volume": [
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_1661": {
  "lineno": 136,
  "symbols_in_volume": [
   "ValueError",
   "regex.I",
   "regex.compile",
   "regex.findall",
   "regex.match",
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_3629": {
  "lineno": 148,
  "symbols_in_volume": [
   "regex.compile",
   "repr",
   "type"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_418626": {
  "lineno": 761,
  "symbols_in_volume": [
   "regex.match",
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_448951": {
  "lineno": 803,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_449000": {
  "lineno": 125,
  "symbols_in_volume": [
   "regex.sub"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_449964": {
  "lineno": 120,
  "symbols_in_volume": [
   "regex.sub"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_462270": {
  "lineno": 218,
  "symbols_in_volume": [
   "regex.sub"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_527371": {
  "lineno": 746,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_545855": {
  "lineno": 755,
  "symbols_in_volume": [
   "regex.compile",
   "regex.error"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_581080": {
  "lineno": 856,
  "symbols_in_volume": [
   "StopIteration",
   "next",
   "regex.compile",
   "regex.finditer"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_612074": {
  "lineno": 776,
  "symbols_in_volume": [
   "regex.compile",
   "regex.escape"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_725106": {
  "lineno": 812,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_725149": {
  "lineno": 830,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_764548": {
  "lineno": 837,
  "symbols_in_volume": [
   "my_unicode",
   "regex.compile"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_764548.my_unicode": {
  "lineno": 839,
  "symbols_in_volume": [
   "str"
  ],
  "type": "class"
 },
 "test_regex.RegexTests.test_bug_817234": {
  "lineno": 865,
  "symbols_in_volume": [
   "StopIteration",
   "next",
   "regex.finditer"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_926075": {
  "lineno": 847,
  "symbols_in_volume": [
   "regex.compile"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_931848": {
  "lineno": 851,
  "symbols_in_volume": [
   "regex.compile"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_bytes_str_mixing": {
  "lineno": 919,
  "symbols_in_volume": [
   "TypeError",
   "ValueError",
   "regex.ASCII",
   "regex.UNICODE",
   "regex.compile"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_captures": {
  "lineno": 2463,
  "symbols_in_volume": [
   "regex.match",
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_case_folding": {
  "lineno": 572,
  "symbols_in_volume": [
   "bool",
   "regex.findall",
   "regex.match",
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_category": {
  "lineno": 660,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_common_prefix": {
  "lineno": 2456,
  "symbols_in_volume": [
   "all",
   "regex.compile",
   "repr",
   "string.ascii_lowercase",
   "string.ascii_uppercase",
   "string.digits",
   "type"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_constants": {
  "lineno": 696,
  "symbols_in_volume": [
   "regex.DOTALL",
   "regex.I",
   "regex.IGNORECASE",
   "regex.L",
   "regex.LOCALE",
   "regex.M",
   "regex.MULTILINE",
   "regex.S",
   "regex.VERBOSE",
   "regex.X"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_copy": {
  "lineno": 2839,
  "symbols_in_volume": [
   "copy.copy",
   "copy.deepcopy",
   "next",
   "regex.compile",
   "regex.finditer",
   "regex.splititer"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_dollar_matches_twice": {
  "lineno": 907,
  "symbols_in_volume": [
   "regex.MULTILINE",
   "regex.compile"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_empty_array": {
  "lineno": 871,
  "symbols_in_volume": [
   "array.array",
   "regex.compile"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_expand": {
  "lineno": 407,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_finditer": {
  "lineno": 843,
  "symbols_in_volume": [
   "regex.finditer"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_flags": {
  "lineno": 708,
  "symbols_in_volume": [
   "regex.I",
   "regex.L",
   "regex.M",
   "regex.S",
   "regex.X",
   "regex.compile",
   "repr",
   "type"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_format": {
  "lineno": 2882,
  "symbols_in_volume": [
   "regex.match",
   "regex.subf",
   "regex.subfn"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_fullmatch": {
  "lineno": 2896,
  "symbols_in_volume": [
   "bool",
   "regex.fullmatch"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_fuzzy": {
  "lineno": 2583,
  "symbols_in_volume": [
   "regex.compile",
   "regex.findall",
   "regex.fullmatch",
   "regex.match",
   "regex.search",
   "repr",
   "type"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_getattr": {
  "lineno": 449,
  "symbols_in_volume": [
   "regex.A",
   "regex.DEFAULT_VERSION",
   "regex.I",
   "regex.U",
   "regex.compile",
   "regex.match",
   "regex.search",
   "repr",
   "type"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_grapheme": {
  "lineno": 1489,
  "symbols_in_volume": [
   "regex.findall",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_groupdict": {
  "lineno": 403,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_guards": {
  "lineno": 2483,
  "symbols_in_volume": [
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_hg_bugs": {
  "lineno": 3038,
  "symbols_in_volume": [
   "ascii",
   "bool",
   "bytes",
   "chr",
   "len",
   "pickle.dumps",
   "pickle.loads",
   "range",
   "regex.BESTMATCH",
   "regex.DEBUG",
   "regex.DOTALL",
   "regex.ENHANCEMATCH",
   "regex.FULLCASE",
   "regex.I",
   "regex.IGNORECASE",
   "regex.UNICODE",
   "regex.V1",
   "regex.WORD",
   "regex.X",
   "regex.compile",
   "regex.error",
   "regex.escape",
   "regex.findall",
   "regex.finditer",
   "regex.fullmatch",
   "regex.match",
   "regex.search",
   "regex.sub",
   "regex.subf"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_ignore_case": {
  "lineno": 546,
  "symbols_in_volume": [
   "bool",
   "regex.I",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_inline_flags": {
  "lineno": 879,
  "symbols_in_volume": [
   "bool",
   "chr",
   "regex.I",
   "regex.U",
   "regex.compile",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_issue_18468": {
  "lineno": 2918,
  "symbols_in_volume": [
   "BytesSubclass",
   "StrSubclass",
   "bytearray",
   "memoryview",
   "regex.findall",
   "regex.match",
   "regex.split",
   "regex.sub",
   "string",
   "sys.version_info.major",
   "sys.version_info.minor"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_line_boundary": {
  "lineno": 1525,
  "symbols_in_volume": [
   "regex.findall",
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_lookbehind": {
  "lineno": 1390,
  "symbols_in_volume": [
   "bool",
   "regex.compile",
   "regex.match",
   "regex.search",
   "repr",
   "type"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_named_lists": {
  "lineno": 2529,
  "symbols_in_volume": [
   "regex.compile",
   "regex.findall",
   "regex.match",
   "regex.search",
   "repr",
   "set",
   "type"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_new_named_groups": {
  "lineno": 991,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_non_consuming": {
  "lineno": 532,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_not_literal": {
  "lineno": 663,
  "symbols_in_volume": [
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_overlapped": {
  "lineno": 1460,
  "symbols_in_volume": [
   "regex.findall",
   "regex.finditer"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_partial": {
  "lineno": 2985,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_possessive": {
  "lineno": 1299,
  "symbols_in_volume": [
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_properties": {
  "lineno": 997,
  "symbols_in_volume": [
   "Exception",
   "ascii",
   "bool",
   "regex.findall",
   "regex.match",
   "set"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_qualified_re_split": {
  "lineno": 300,
  "symbols_in_volume": [
   "regex.split"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_qualified_re_sub": {
  "lineno": 210,
  "symbols_in_volume": [
   "regex.sub"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_re_escape": {
  "lineno": 671,
  "symbols_in_volume": [
   "bool",
   "chr",
   "range",
   "regex.compile",
   "regex.escape",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_re_escape_byte": {
  "lineno": 684,
  "symbols_in_volume": [
   "bool",
   "bytes",
   "range",
   "regex.compile",
   "regex.escape",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_re_findall": {
  "lineno": 308,
  "symbols_in_volume": [
   "regex.findall"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_re_groupref": {
  "lineno": 387,
  "symbols_in_volume": [
   "regex.findall",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_re_groupref_exists": {
  "lineno": 364,
  "symbols_in_volume": [
   "regex.compile",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_re_match": {
  "lineno": 337,
  "symbols_in_volume": [
   "regex.compile",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_re_split": {
  "lineno": 260,
  "symbols_in_volume": [
   "regex.split",
   "regex.splititer"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_re_subn": {
  "lineno": 253,
  "symbols_in_volume": [
   "regex.subn"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_recursive": {
  "lineno": 2768,
  "symbols_in_volume": [
   "bool",
   "regex.compile",
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_repeat_minmax": {
  "lineno": 412,
  "symbols_in_volume": [
   "bool",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_repeated_repeats": {
  "lineno": 1384,
  "symbols_in_volume": [
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_replacement": {
  "lineno": 2445,
  "symbols_in_volume": [
   "regex.escape",
   "regex.sub"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_scanner": {
  "lineno": 787,
  "symbols_in_volume": [
   "regex.Scanner",
   "repr",
   "type"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_scanner.s_float": {
  "lineno": 790,
  "symbols_in_volume": [
   "float"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_scanner.s_ident": {
  "lineno": 788,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test_regex.RegexTests.test_scanner.s_int": {
  "lineno": 791,
  "symbols_in_volume": [
   "int"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_scanner.s_operator": {
  "lineno": 789,
  "symbols_in_volume": [],
  "type": "function"
 },
 "test_regex.RegexTests.test_scoped_and_inline_flags": {
  "lineno": 1367,
  "symbols_in_volume": [
   "regex.I",
   "regex.error",
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_search_anchor": {
  "lineno": 1194,
  "symbols_in_volume": [
   "regex.findall"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_search_coverage": {
  "lineno": 667,
  "symbols_in_volume": [
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_search_reverse": {
  "lineno": 1197,
  "symbols_in_volume": [
   "regex.I",
   "regex.findall",
   "regex.finditer",
   "regex.search",
   "regex.sub"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_search_star_plus": {
  "lineno": 67,
  "symbols_in_volume": [
   "regex.match",
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_set": {
  "lineno": 1621,
  "symbols_in_volume": [
   "chr",
   "len",
   "range",
   "regex.compile",
   "regex.findall",
   "regex.match",
   "regex.sub",
   "repr",
   "type"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_special_escapes": {
  "lineno": 479,
  "symbols_in_volume": [
   "regex.LOCALE",
   "regex.M",
   "regex.UNICODE",
   "regex.search"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_splititer": {
  "lineno": 1484,
  "symbols_in_volume": [
   "regex.split",
   "regex.splititer"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_sre_character_class_literals": {
  "lineno": 729,
  "symbols_in_volume": [
   "bool",
   "chr",
   "regex.error",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_sre_character_literals": {
  "lineno": 713,
  "symbols_in_volume": [
   "bool",
   "chr",
   "regex.error",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_stack_overflow": {
  "lineno": 780,
  "symbols_in_volume": [
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_sub_template_numeric_escape": {
  "lineno": 153,
  "symbols_in_volume": [
   "regex.error",
   "regex.sub"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_subscripted_captures": {
  "lineno": 3845,
  "symbols_in_volume": [
   "regex.match",
   "regex.subf"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_subscripting_match": {
  "lineno": 980,
  "symbols_in_volume": [
   "ascii",
   "regex.match"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_symbolic_refs": {
  "lineno": 230,
  "symbols_in_volume": [
   "IndexError",
   "regex.error",
   "regex.sub"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_turkic": {
  "lineno": 2503,
  "symbols_in_volume": [
   "ascii",
   "regex.match",
   "set"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_unmatched_in_sub": {
  "lineno": 1438,
  "symbols_in_volume": [
   "regex.sub"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_various": {
  "lineno": 1698,
  "symbols_in_volume": [
   "ValueError",
   "ascii",
   "chr",
   "int",
   "len",
   "regex.error",
   "regex.search",
   "string",
   "sys.version_info.major",
   "sys.version_info.minor"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_weakref": {
  "lineno": 60,
  "symbols_in_volume": [
   "regex.compile",
   "weakref.proxy"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_word_boundary": {
  "lineno": 1501,
  "symbols_in_volume": [
   "regex.split"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_word_class": {
  "lineno": 1181,
  "symbols_in_volume": [
   "regex.findall",
   "regex.split"
  ],
  "type": "function"
 },
 "test_regex.RegexTests.test_zerowidth": {
  "lineno": 1325,
  "symbols_in_volume": [
   "regex.findall",
   "regex.finditer",
   "regex.split",
   "regex.splititer"
  ],
  "type": "function"
 },
 "test_regex.StrSubclass": {
  "lineno": 11,
  "symbols_in_volume": [
   "str"
  ],
  "type": "class"
 },
 "test_regex.StrSubclass.__getitem__": {
  "lineno": 12,
  "symbols_in_volume": [
   "StrSubclass",
   "super"
  ],
  "type": "function"
 },
 "test_regex.test_main": {
  "lineno": 3868,
  "symbols_in_volume": [
   "test.support.run_unittest"
  ],
  "type": "function"
 }
}