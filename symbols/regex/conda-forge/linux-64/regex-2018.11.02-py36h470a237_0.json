{
 "test_regex": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      4174
     ]
    },
    "test_regex.RegexTests": {
     "line number": [
      4169,
      4169
     ]
    },
    "test_regex.sys": {
     "line number": [
      4167
     ]
    },
    "test_regex.test_main": {
     "line number": [
      4175
     ]
    }
   }
  },
  "type": "module"
 },
 "test_regex.BytesSubclass": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "test_regex.BytesSubclass.__getitem__": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "super": {
     "line number": [
      17
     ]
    },
    "test_regex.BytesSubclass": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "test_regex.unittest": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "test_regex.RegexTests.assertTypedEqual": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "recurse": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.assertTypedEqual.recurse": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      52
     ]
    },
    "list": {
     "line number": [
      52
     ]
    },
    "recurse": {
     "line number": [
      54
     ]
    },
    "tuple": {
     "line number": [
      52
     ]
    },
    "type": {
     "line number": [
      56,
      56
     ]
    },
    "zip": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.bump_num": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "int": {
     "line number": [
      80
     ]
    },
    "str": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_anyall": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      547,
      547,
      548,
      548
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_ascii_and_unicode_flag": {
  "data": {
   "lineno": 972,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      996
     ]
    },
    "bool": {
     "line number": [
      976,
      978
     ]
    },
    "test_regex.regex": {
     "line number": [
      974,
      975,
      975,
      977,
      980,
      980,
      980,
      982,
      982,
      984,
      984,
      986,
      990,
      991,
      991,
      993,
      997
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_atomic": {
  "data": {
   "lineno": 1314,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1316
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_basic_regex_sub": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "chr": {
     "line number": [
      102,
      102,
      103,
      103,
      103,
      103
     ]
    },
    "test_regex.regex": {
     "line number": [
      84,
      85,
      87,
      90,
      91,
      93,
      94,
      95,
      97,
      99,
      101,
      102,
      105,
      107,
      108,
      109,
      110,
      113,
      114,
      115,
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bigcharset": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      532,
      534,
      535,
      536,
      537,
      539,
      540,
      542,
      543
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_branch_reset": {
  "data": {
   "lineno": 1621,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1622,
      1624,
      1626,
      1628,
      1631,
      1633,
      1635,
      1638,
      1640,
      1642,
      1644,
      1646,
      1649,
      1652,
      1654,
      1656,
      1658,
      1660,
      1662,
      1666,
      1668,
      1670,
      1672
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_10328": {
  "data": {
   "lineno": 1497,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1499,
      1508
     ]
    },
    "test_regex.sys": {
     "line number": [
      1500
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_113254": {
  "data": {
   "lineno": 760,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      761,
      762,
      763
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_114660": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_117612": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_14462": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      230
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_1661": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      139,
      141,
      143,
      145
     ]
    },
    "test_regex.regex": {
     "line number": [
      138,
      140,
      140,
      142,
      142,
      144,
      144,
      146,
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_3629": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "repr": {
     "line number": [
      150
     ]
    },
    "test_regex.regex": {
     "line number": [
      150
     ]
    },
    "type": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_418626": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      784,
      786,
      788,
      792
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_448951": {
  "data": {
   "lineno": 822,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      826,
      828
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_449000": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      127,
      129,
      131,
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_449964": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_462270": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      221,
      223,
      224,
      225
     ]
    },
    "test_regex.sys": {
     "line number": [
      220
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_527371": {
  "data": {
   "lineno": 765,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      767,
      768,
      769,
      771,
      772
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_545855": {
  "data": {
   "lineno": 774,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      777,
      778
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_581080": {
  "data": {
   "lineno": 875,
   "symbols_in_volume": {
    "StopIteration": {
     "line number": [
      878
     ]
    },
    "next": {
     "line number": [
      877,
      878
     ]
    },
    "test_regex.regex": {
     "line number": [
      876,
      880
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_612074": {
  "data": {
   "lineno": 795,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      796,
      797
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_725106": {
  "data": {
   "lineno": 831,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      833,
      834,
      836,
      838,
      840,
      842,
      844,
      846
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_725149": {
  "data": {
   "lineno": 849,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      851,
      853
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_764548": {
  "data": {
   "lineno": 856,
   "symbols_in_volume": {
    "my_unicode": {
     "line number": [
      859
     ]
    },
    "test_regex.regex": {
     "line number": [
      859
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_764548.my_unicode": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": {
    "str": {
     "line number": [
      858
     ]
    }
   }
  },
  "type": "class"
 },
 "test_regex.RegexTests.test_bug_817234": {
  "data": {
   "lineno": 884,
   "symbols_in_volume": {
    "StopIteration": {
     "line number": [
      888
     ]
    },
    "next": {
     "line number": [
      886,
      887,
      888
     ]
    },
    "test_regex.regex": {
     "line number": [
      885
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_926075": {
  "data": {
   "lineno": 866,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      867,
      867
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bug_931848": {
  "data": {
   "lineno": 870,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      872
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_bytes_str_mixing": {
  "data": {
   "lineno": 938,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      942,
      944,
      946,
      948,
      950,
      952,
      954,
      956
     ]
    },
    "ValueError": {
     "line number": [
      959,
      961,
      963,
      965,
      967,
      969
     ]
    },
    "test_regex.regex": {
     "line number": [
      940,
      941,
      960,
      960,
      962,
      964,
      964,
      964,
      966,
      966,
      968,
      968,
      970
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_captures": {
  "data": {
   "lineno": 2515,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      2516,
      2518,
      2520,
      2522,
      2525,
      2529,
      2531,
      2533
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_case_folding": {
  "data": {
   "lineno": 591,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      636,
      638,
      640,
      642,
      644,
      646,
      648,
      650,
      652,
      654,
      656,
      658
     ]
    },
    "test_regex.regex": {
     "line number": [
      592,
      593,
      594,
      596,
      599,
      601,
      603,
      606,
      608,
      610,
      612,
      614,
      617,
      619,
      621,
      623,
      625,
      627,
      633,
      636,
      638,
      640,
      642,
      644,
      646,
      648,
      650,
      652,
      654,
      656,
      658,
      661,
      664,
      668,
      670,
      672,
      674,
      676
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_category": {
  "data": {
   "lineno": 679,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      680
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_common_prefix": {
  "data": {
   "lineno": 2508,
   "symbols_in_volume": {
    "all": {
     "line number": [
      2510,
      2511
     ]
    },
    "repr": {
     "line number": [
      2513
     ]
    },
    "test_regex.regex": {
     "line number": [
      2513
     ]
    },
    "test_regex.string": {
     "line number": [
      2510,
      2510,
      2510
     ]
    },
    "type": {
     "line number": [
      2513
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_constants": {
  "data": {
   "lineno": 715,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      716,
      716,
      718,
      718,
      720,
      720,
      722,
      722,
      724,
      724
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_copy": {
  "data": {
   "lineno": 2895,
   "symbols_in_volume": {
    "next": {
     "line number": [
      2917,
      2918,
      2923,
      2924,
      2929,
      2930,
      2935,
      2936
     ]
    },
    "test_regex.copy": {
     "line number": [
      2898,
      2899,
      2905,
      2906,
      2909,
      2916,
      2922,
      2928,
      2934
     ]
    },
    "test_regex.regex": {
     "line number": [
      2897,
      2915,
      2921,
      2927,
      2933
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_dollar_matches_twice": {
  "data": {
   "lineno": 926,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      928,
      933,
      933
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_empty_array": {
  "data": {
   "lineno": 890,
   "symbols_in_volume": {
    "test_regex.array": {
     "line number": [
      894
     ]
    },
    "test_regex.regex": {
     "line number": [
      895,
      896
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_expand": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      427
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_finditer": {
  "data": {
   "lineno": 862,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      863
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_flags": {
  "data": {
   "lineno": 727,
   "symbols_in_volume": {
    "repr": {
     "line number": [
      729
     ]
    },
    "test_regex.regex": {
     "line number": [
      728,
      728,
      728,
      728,
      728,
      729
     ]
    },
    "type": {
     "line number": [
      729
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_format": {
  "data": {
   "lineno": 2938,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      2939,
      2941,
      2944,
      2946,
      2949
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_fullmatch": {
  "data": {
   "lineno": 2952,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2953,
      2954,
      2955,
      2957,
      2958,
      2959,
      2962,
      2963,
      2964,
      2967,
      2969,
      2971
     ]
    },
    "test_regex.regex": {
     "line number": [
      2953,
      2954,
      2955,
      2957,
      2958,
      2959,
      2962,
      2963,
      2964,
      2967,
      2969,
      2971
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_fuzzy": {
  "data": {
   "lineno": 2635,
   "symbols_in_volume": {
    "repr": {
     "line number": [
      2637,
      2639,
      2641,
      2643,
      2645,
      2647,
      2675
     ]
    },
    "test_regex.regex": {
     "line number": [
      2637,
      2639,
      2641,
      2643,
      2645,
      2647,
      2651,
      2653,
      2655,
      2656,
      2658,
      2662,
      2664,
      2666,
      2668,
      2670,
      2672,
      2675,
      2679,
      2681,
      2683,
      2687,
      2689,
      2692,
      2696,
      2698,
      2700,
      2704,
      2706,
      2708,
      2710,
      2712,
      2714,
      2716,
      2718,
      2720,
      2722,
      2724,
      2725,
      2726,
      2727,
      2728,
      2733,
      2736,
      2741,
      2743,
      2744,
      2749,
      2751,
      2753,
      2758,
      2760,
      2762,
      2764,
      2766,
      2768,
      2770,
      2772,
      2774,
      2776,
      2778,
      2780,
      2783,
      2785,
      2787,
      2790,
      2792,
      2795,
      2797,
      2799,
      2801,
      2803,
      2807,
      2809,
      2812,
      2814,
      2817,
      2821
     ]
    },
    "type": {
     "line number": [
      2637,
      2639,
      2641,
      2643,
      2645,
      2647,
      2675
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_getattr": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": {
    "repr": {
     "line number": [
      490
     ]
    },
    "test_regex.regex": {
     "line number": [
      469,
      470,
      470,
      470,
      471,
      472,
      472,
      472,
      473,
      474,
      475,
      477,
      480,
      481,
      483,
      484,
      485,
      486,
      488,
      489,
      490,
      494
     ]
    },
    "type": {
     "line number": [
      490
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_grapheme": {
  "data": {
   "lineno": 1543,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1544,
      1545,
      1547,
      1550,
      1552
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_groupdict": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      423
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_guards": {
  "data": {
   "lineno": 2535,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      2536,
      2540,
      2544,
      2547,
      2550,
      2552
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_hg_bugs": {
  "data": {
   "lineno": 3107,
   "symbols_in_volume": {
    "ascii": {
     "line number": [
      3321,
      3324,
      3480,
      3481,
      3483,
      3484,
      3486,
      3487,
      3489,
      3490,
      3492,
      3493,
      3494,
      3495,
      3496,
      3497,
      3499,
      3500,
      3502,
      3503,
      3504,
      3506,
      3508,
      3509,
      3511,
      3512,
      3514,
      3515,
      3517,
      3518,
      3524,
      3525,
      3527,
      3528,
      3529,
      3530,
      3531,
      3532,
      3534,
      3535,
      3537,
      3538,
      3539,
      3540,
      3541,
      3542,
      3543,
      3544,
      3545,
      3546,
      3548,
      3549,
      3550,
      3551,
      3552,
      3553,
      3554,
      3555,
      3558,
      3559
     ]
    },
    "bool": {
     "line number": [
      3110,
      3114,
      3151,
      3449,
      3823,
      3826,
      3843,
      3845,
      3848,
      3850,
      3853,
      3855,
      3859,
      3861,
      3863,
      3865,
      3897,
      3900,
      3901,
      3902,
      3903,
      3907,
      4026,
      4035,
      4037,
      4039,
      4041,
      4043,
      4045,
      4050,
      4051,
      4052,
      4053,
      4055,
      4056,
      4058,
      4060
     ]
    },
    "bytes": {
     "line number": [
      3522
     ]
    },
    "chr": {
     "line number": [
      3478
     ]
    },
    "len": {
     "line number": [
      3711
     ]
    },
    "range": {
     "line number": [
      3478,
      3522
     ]
    },
    "test_regex.pickle": {
     "line number": [
      3796,
      3797
     ]
    },
    "test_regex.regex": {
     "line number": [
      3110,
      3110,
      3114,
      3115,
      3118,
      3120,
      3122,
      3124,
      3126,
      3129,
      3134,
      3134,
      3135,
      3139,
      3139,
      3140,
      3141,
      3141,
      3142,
      3146,
      3151,
      3151,
      3154,
      3159,
      3163,
      3167,
      3169,
      3174,
      3179,
      3180,
      3181,
      3185,
      3189,
      3194,
      3195,
      3199,
      3203,
      3204,
      3208,
      3210,
      3212,
      3214,
      3219,
      3224,
      3228,
      3231,
      3234,
      3240,
      3245,
      3249,
      3252,
      3255,
      3259,
      3260,
      3263,
      3267,
      3272,
      3276,
      3281,
      3285,
      3287,
      3289,
      3291,
      3295,
      3298,
      3303,
      3308,
      3309,
      3314,
      3314,
      3318,
      3321,
      3323,
      3327,
      3330,
      3335,
      3340,
      3340,
      3345,
      3346,
      3352,
      3353,
      3354,
      3356,
      3357,
      3359,
      3362,
      3364,
      3366,
      3370,
      3370,
      3370,
      3378,
      3378,
      3378,
      3379,
      3389,
      3391,
      3392,
      3395,
      3397,
      3398,
      3401,
      3402,
      3405,
      3407,
      3409,
      3412,
      3414,
      3416,
      3419,
      3421,
      3423,
      3426,
      3428,
      3430,
      3433,
      3435,
      3437,
      3441,
      3446,
      3449,
      3449,
      3452,
      3454,
      3456,
      3458,
      3462,
      3463,
      3466,
      3468,
      3480,
      3481,
      3483,
      3484,
      3486,
      3487,
      3489,
      3490,
      3492,
      3493,
      3494,
      3495,
      3496,
      3497,
      3499,
      3500,
      3502,
      3503,
      3504,
      3506,
      3508,
      3509,
      3511,
      3512,
      3514,
      3515,
      3517,
      3518,
      3524,
      3525,
      3527,
      3528,
      3529,
      3530,
      3531,
      3532,
      3534,
      3535,
      3537,
      3538,
      3539,
      3540,
      3541,
      3542,
      3543,
      3544,
      3545,
      3546,
      3548,
      3549,
      3550,
      3551,
      3552,
      3553,
      3554,
      3555,
      3558,
      3563,
      3568,
      3569,
      3570,
      3571,
      3574,
      3576,
      3581,
      3583,
      3585,
      3589,
      3592,
      3595,
      3597,
      3601,
      3604,
      3609,
      3611,
      3614,
      3615,
      3619,
      3621,
      3623,
      3626,
      3628,
      3630,
      3634,
      3638,
      3639,
      3641,
      3642,
      3643,
      3645,
      3647,
      3649,
      3651,
      3653,
      3655,
      3657,
      3660,
      3661,
      3663,
      3665,
      3667,
      3669,
      3671,
      3673,
      3676,
      3678,
      3680,
      3682,
      3684,
      3686,
      3688,
      3690,
      3693,
      3695,
      3697,
      3699,
      3701,
      3703,
      3711,
      3714,
      3717,
      3721,
      3753,
      3754,
      3755,
      3756,
      3759,
      3761,
      3762,
      3764,
      3768,
      3770,
      3772,
      3773,
      3777,
      3779,
      3783,
      3784,
      3787,
      3789,
      3791,
      3795,
      3802,
      3803,
      3804,
      3805,
      3806,
      3807,
      3808,
      3809,
      3810,
      3811,
      3812,
      3813,
      3816,
      3817,
      3820,
      3820,
      3823,
      3826,
      3829,
      3830,
      3835,
      3843,
      3845,
      3848,
      3850,
      3853,
      3855,
      3859,
      3861,
      3863,
      3865,
      3869,
      3871,
      3875,
      3877,
      3882,
      3884,
      3889,
      3891,
      3897,
      3900,
      3901,
      3902,
      3903,
      3907,
      3911,
      3915,
      3916,
      3917,
      3918,
      3920,
      3921,
      3922,
      3923,
      3926,
      3927,
      3928,
      3929,
      3933,
      3933,
      3934,
      3937,
      3939,
      3943,
      3946,
      3948,
      3950,
      3956,
      3958,
      3961,
      3963,
      3966,
      3968,
      3971,
      3973,
      3978,
      3980,
      3982,
      3984,
      3988,
      3989,
      3990,
      3991,
      3993,
      3996,
      3997,
      3998,
      3999,
      4000,
      4004,
      4006,
      4008,
      4011,
      4013,
      4015,
      4018,
      4020,
      4022,
      4026,
      4029,
      4031,
      4035,
      4037,
      4039,
      4041,
      4043,
      4045,
      4050,
      4051,
      4052,
      4053,
      4055,
      4056,
      4058,
      4060,
      4063,
      4065,
      4068,
      4070,
      4074,
      4076,
      4078,
      4080,
      4082,
      4084,
      4086,
      4088,
      4090,
      4092,
      4095,
      4097,
      4099,
      4101,
      4103,
      4105,
      4107,
      4109,
      4111,
      4113,
      4116,
      4117,
      4118,
      4119,
      4120,
      4121,
      4122,
      4123,
      4124,
      4126,
      4127,
      4128,
      4129,
      4130,
      4131,
      4132,
      4133,
      4134
     ]
    },
    "test_regex.sys": {
     "line number": [
      3388,
      3394
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_ignore_case": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      586,
      587,
      588,
      589
     ]
    },
    "test_regex.regex": {
     "line number": [
      566,
      566,
      567,
      567,
      569,
      569,
      571,
      571,
      572,
      572,
      574,
      574,
      575,
      575,
      577,
      577,
      579,
      579,
      583,
      584,
      586,
      587,
      588,
      589
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_inline_flags": {
  "data": {
   "lineno": 898,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      904,
      907,
      910,
      913,
      916,
      919,
      921,
      922,
      923
     ]
    },
    "chr": {
     "line number": [
      900,
      901
     ]
    },
    "test_regex.regex": {
     "line number": [
      903,
      903,
      903,
      906,
      906,
      906,
      909,
      909,
      912,
      912,
      915,
      918,
      921,
      922,
      923,
      924
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_issue_18468": {
  "data": {
   "lineno": 2974,
   "symbols_in_volume": {
    "bytearray": {
     "line number": [
      2985,
      2986,
      3005,
      3029,
      3045
     ]
    },
    "memoryview": {
     "line number": [
      2987,
      2988,
      3005,
      3029,
      3046
     ]
    },
    "test_regex.BytesSubclass": {
     "line number": [
      2983,
      2984,
      3004,
      3028,
      3045
     ]
    },
    "test_regex.StrSubclass": {
     "line number": [
      2980,
      2981,
      2990,
      3020,
      3037
     ]
    },
    "test_regex.regex": {
     "line number": [
      2979,
      2980,
      2982,
      2983,
      2985,
      2987,
      2991,
      2994,
      2996,
      2999,
      3001,
      3006,
      3009,
      3011,
      3015,
      3017,
      3021,
      3023,
      3025,
      3030,
      3032,
      3034,
      3038,
      3039,
      3040,
      3041,
      3042,
      3047,
      3048,
      3049,
      3050,
      3051
     ]
    },
    "test_regex.string": {
     "line number": [
      2990,
      2991,
      2994,
      2996,
      2999,
      3001,
      3004,
      3006,
      3009,
      3011,
      3015,
      3017,
      3020,
      3021,
      3023,
      3025,
      3028,
      3030,
      3032,
      3034,
      3037,
      3038,
      3039,
      3040,
      3041,
      3042,
      3045,
      3047,
      3048,
      3049,
      3050,
      3051
     ]
    },
    "test_regex.sys": {
     "line number": [
      2976,
      2976,
      2993,
      3008
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_line_boundary": {
  "data": {
   "lineno": 1579,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1580,
      1582,
      1584,
      1586,
      1588,
      1590,
      1593,
      1594,
      1595,
      1596,
      1597,
      1598,
      1600,
      1601,
      1602,
      1603,
      1604,
      1605,
      1607,
      1608,
      1609,
      1610,
      1611,
      1612,
      1614,
      1615,
      1616,
      1617,
      1618,
      1619
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_lookbehind": {
  "data": {
   "lineno": 1428,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1434,
      1436,
      1443,
      1447,
      1450,
      1454,
      1458,
      1464,
      1467,
      1470
     ]
    },
    "repr": {
     "line number": [
      1473
     ]
    },
    "test_regex.regex": {
     "line number": [
      1429,
      1430,
      1431,
      1432,
      1434,
      1435,
      1436,
      1437,
      1439,
      1441,
      1443,
      1445,
      1447,
      1450,
      1452,
      1454,
      1456,
      1458,
      1461,
      1462,
      1463,
      1464,
      1467,
      1469,
      1470,
      1473
     ]
    },
    "type": {
     "line number": [
      1473
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_more_zerowidth": {
  "data": {
   "lineno": 4155,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      4157,
      4159,
      4160,
      4162,
      4164
     ]
    },
    "test_regex.sys": {
     "line number": [
      4156
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_named_lists": {
  "data": {
   "lineno": 2581,
   "symbols_in_volume": {
    "repr": {
     "line number": [
      2598
     ]
    },
    "set": {
     "line number": [
      2602,
      2604
     ]
    },
    "test_regex.regex": {
     "line number": [
      2583,
      2585,
      2587,
      2591,
      2593,
      2595,
      2598,
      2601,
      2603,
      2607,
      2612,
      2617,
      2621,
      2623,
      2627,
      2629,
      2632
     ]
    },
    "type": {
     "line number": [
      2598
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_new_named_groups": {
  "data": {
   "lineno": 1010,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1011,
      1012
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_non_consuming": {
  "data": {
   "lineno": 551,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      552,
      553,
      554,
      555,
      556,
      557,
      558,
      560,
      561,
      562,
      563
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_not_literal": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      683,
      684
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_overlapped": {
  "data": {
   "lineno": 1514,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1515,
      1516,
      1518,
      1519,
      1521,
      1524,
      1526,
      1528,
      1530,
      1533,
      1535
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_partial": {
  "data": {
   "lineno": 3054,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      3055,
      3056,
      3057,
      3059,
      3061,
      3062,
      3064,
      3066,
      3068,
      3071,
      3074,
      3076,
      3078,
      3080,
      3083,
      3085,
      3087,
      3089,
      3091,
      3094,
      3096,
      3098,
      3100,
      3102,
      3104,
      3105
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_possessive": {
  "data": {
   "lineno": 1318,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1320,
      1321,
      1322,
      1323,
      1326,
      1327,
      1328,
      1329,
      1333,
      1334,
      1335,
      1336,
      1339,
      1340,
      1341,
      1342
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_properties": {
  "data": {
   "lineno": 1016,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1190
     ]
    },
    "ascii": {
     "line number": [
      1191
     ]
    },
    "bool": {
     "line number": [
      1020,
      1027,
      1028,
      1029,
      1037,
      1038,
      1039,
      1041,
      1043,
      1045,
      1047,
      1049,
      1051,
      1053,
      1055,
      1057,
      1059,
      1061,
      1064,
      1066,
      1068,
      1070,
      1072,
      1074,
      1076,
      1078,
      1080,
      1082,
      1084,
      1086,
      1088,
      1090,
      1092,
      1095,
      1096,
      1097,
      1104,
      1105,
      1106,
      1108,
      1109,
      1110,
      1111,
      1113,
      1114,
      1116,
      1117,
      1118,
      1130,
      1193,
      1195,
      1197
     ]
    },
    "set": {
     "line number": [
      1134
     ]
    },
    "test_regex.regex": {
     "line number": [
      1017,
      1018,
      1019,
      1020,
      1027,
      1028,
      1029,
      1030,
      1031,
      1032,
      1034,
      1035,
      1036,
      1037,
      1038,
      1039,
      1041,
      1043,
      1045,
      1047,
      1049,
      1051,
      1053,
      1055,
      1057,
      1059,
      1061,
      1064,
      1066,
      1068,
      1070,
      1072,
      1074,
      1076,
      1078,
      1080,
      1082,
      1084,
      1086,
      1088,
      1090,
      1092,
      1095,
      1096,
      1097,
      1098,
      1099,
      1100,
      1101,
      1102,
      1103,
      1104,
      1105,
      1106,
      1108,
      1109,
      1110,
      1111,
      1113,
      1114,
      1116,
      1117,
      1118,
      1120,
      1121,
      1122,
      1125,
      1127,
      1130,
      1188,
      1193,
      1195,
      1197
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_qualified_re_split": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      315,
      316,
      317,
      321,
      324
     ]
    },
    "test_regex.sys": {
     "line number": [
      320
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_qualified_re_sub": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      211,
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_re_escape": {
  "data": {
   "lineno": 690,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      695
     ]
    },
    "chr": {
     "line number": [
      694,
      695,
      695,
      697,
      697
     ]
    },
    "range": {
     "line number": [
      693
     ]
    },
    "test_regex.regex": {
     "line number": [
      692,
      695,
      695,
      697,
      697,
      700,
      700
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_re_escape_byte": {
  "data": {
   "lineno": 703,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      709
     ]
    },
    "bytes": {
     "line number": [
      707
     ]
    },
    "range": {
     "line number": [
      706
     ]
    },
    "test_regex.regex": {
     "line number": [
      705,
      709,
      709,
      710,
      710,
      712,
      712
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_re_findall": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      328,
      329,
      330,
      332,
      335,
      337,
      339,
      342,
      343,
      344,
      346,
      349
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_re_groupref": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      407,
      409,
      411,
      412,
      413,
      415,
      418
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_re_groupref_exists": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      384,
      386,
      388,
      389,
      390,
      392,
      394,
      396,
      400
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_re_match": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      357,
      358,
      359,
      360,
      361,
      363,
      371,
      377
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_re_split": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      264,
      266,
      268,
      270,
      272,
      275,
      276,
      278,
      280,
      282,
      284,
      286,
      289,
      290,
      293,
      294,
      297,
      299,
      302,
      304,
      307,
      309,
      311
     ]
    },
    "test_regex.sys": {
     "line number": [
      265
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_re_subn": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      257,
      258,
      259,
      260,
      261
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_recursive": {
  "data": {
   "lineno": 2824,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2878,
      2879,
      2880,
      2881,
      2882,
      2884,
      2885,
      2886,
      2889,
      2891,
      2892,
      2893
     ]
    },
    "test_regex.regex": {
     "line number": [
      2825,
      2827,
      2829,
      2831,
      2833,
      2835,
      2838,
      2840,
      2842,
      2844,
      2846,
      2848,
      2851,
      2853,
      2856,
      2858,
      2861,
      2864,
      2867,
      2872,
      2877
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_repeat_minmax": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      456,
      457,
      458,
      459,
      460,
      461,
      462,
      463,
      466
     ]
    },
    "test_regex.regex": {
     "line number": [
      432,
      433,
      434,
      435,
      437,
      438,
      439,
      440,
      441,
      442,
      443,
      444,
      446,
      447,
      448,
      449,
      451,
      452,
      453,
      454,
      456,
      457,
      458,
      459,
      460,
      461,
      462,
      463,
      465,
      466
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_repeated_repeats": {
  "data": {
   "lineno": 1419,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1421,
      1422,
      1426
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_replacement": {
  "data": {
   "lineno": 2499,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      2500,
      2503,
      2504,
      2504,
      2505,
      2506
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_scanner": {
  "data": {
   "lineno": 806,
   "symbols_in_volume": {
    "repr": {
     "line number": [
      816
     ]
    },
    "test_regex.regex": {
     "line number": [
      812
     ]
    },
    "type": {
     "line number": [
      816
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_scanner.s_float": {
  "data": {
   "lineno": 809,
   "symbols_in_volume": {
    "float": {
     "line number": [
      809
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_scanner.s_ident": {
  "data": {
   "lineno": 807
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_scanner.s_int": {
  "data": {
   "lineno": 810,
   "symbols_in_volume": {
    "int": {
     "line number": [
      810
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_scanner.s_operator": {
  "data": {
   "lineno": 808
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_scoped_and_inline_flags": {
  "data": {
   "lineno": 1402,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1404,
      1405,
      1406,
      1407,
      1409,
      1410,
      1410,
      1412,
      1413,
      1414,
      1414,
      1415,
      1415,
      1416,
      1417
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_search_anchor": {
  "data": {
   "lineno": 1213,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1214
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_search_coverage": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      687,
      688
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_search_reverse": {
  "data": {
   "lineno": 1216,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1217,
      1218,
      1220,
      1221,
      1223,
      1226,
      1228,
      1230,
      1232,
      1235,
      1237,
      1239,
      1241,
      1244,
      1246,
      1248,
      1250,
      1253,
      1254,
      1255,
      1256,
      1258,
      1259,
      1260,
      1261,
      1264,
      1266,
      1268,
      1270,
      1273,
      1275,
      1277,
      1279,
      1282,
      1282,
      1283,
      1283,
      1285,
      1286,
      1288,
      1291,
      1295,
      1297,
      1299,
      1302,
      1306,
      1307,
      1308,
      1309,
      1311,
      1312
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_search_star_plus": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_set": {
  "data": {
   "lineno": 1675,
   "symbols_in_volume": {
    "chr": {
     "line number": [
      1713
     ]
    },
    "len": {
     "line number": [
      1714,
      1715,
      1717,
      1720,
      1722,
      1724,
      1726,
      1728,
      1730,
      1732,
      1734,
      1736,
      1738,
      1740
     ]
    },
    "range": {
     "line number": [
      1713
     ]
    },
    "repr": {
     "line number": [
      1743
     ]
    },
    "test_regex.regex": {
     "line number": [
      1676,
      1677,
      1678,
      1679,
      1681,
      1683,
      1684,
      1686,
      1687,
      1688,
      1690,
      1693,
      1695,
      1698,
      1699,
      1700,
      1701,
      1703,
      1705,
      1707,
      1709,
      1710,
      1711,
      1714,
      1715,
      1717,
      1720,
      1722,
      1724,
      1726,
      1728,
      1730,
      1732,
      1734,
      1736,
      1738,
      1740,
      1743,
      1745,
      1747,
      1749,
      1750
     ]
    },
    "type": {
     "line number": [
      1743
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_special_escapes": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      499,
      500,
      501,
      502,
      503,
      504,
      505,
      506,
      507,
      508,
      510,
      510,
      511,
      511,
      512,
      512,
      514,
      516,
      518,
      518,
      520,
      520,
      522,
      522,
      525,
      526,
      527,
      528,
      529
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_splititer": {
  "data": {
   "lineno": 1538,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1539,
      1540
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_sre_character_class_literals": {
  "data": {
   "lineno": 748,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      750,
      751,
      752,
      753,
      754,
      755
     ]
    },
    "chr": {
     "line number": [
      750,
      751,
      752,
      753,
      754,
      755
     ]
    },
    "test_regex.regex": {
     "line number": [
      750,
      751,
      752,
      753,
      754,
      755,
      757,
      758
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_sre_character_literals": {
  "data": {
   "lineno": 732,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      734,
      735,
      737,
      739,
      740,
      742
     ]
    },
    "chr": {
     "line number": [
      734,
      735,
      737,
      739,
      740,
      742
     ]
    },
    "test_regex.regex": {
     "line number": [
      734,
      735,
      737,
      739,
      740,
      742,
      745,
      746
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_stack_overflow": {
  "data": {
   "lineno": 799,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      802,
      803,
      804
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_sub_template_numeric_escape": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      155,
      156,
      157,
      158,
      159,
      160,
      161,
      163,
      164,
      166,
      167,
      168,
      169,
      170,
      172,
      173,
      174,
      175,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200,
      203,
      205,
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_subscripted_captures": {
  "data": {
   "lineno": 4136,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      4137,
      4139,
      4142,
      4146,
      4148,
      4151
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_subscripting_match": {
  "data": {
   "lineno": 999,
   "symbols_in_volume": {
    "ascii": {
     "line number": [
      1008
     ]
    },
    "test_regex.regex": {
     "line number": [
      1000
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_symbolic_refs": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      244
     ]
    },
    "test_regex.regex": {
     "line number": [
      234,
      235,
      236,
      237,
      238,
      239,
      240,
      241,
      242,
      243,
      245,
      249,
      250,
      253,
      254
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_turkic": {
  "data": {
   "lineno": 2555,
   "symbols_in_volume": {
    "ascii": {
     "line number": [
      2574,
      2575,
      2578,
      2579
     ]
    },
    "set": {
     "line number": [
      2559,
      2560
     ]
    },
    "test_regex.regex": {
     "line number": [
      2571
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_unmatched_in_sub": {
  "data": {
   "lineno": 1476,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1480,
      1483,
      1485,
      1487,
      1489,
      1490,
      1492,
      1494,
      1495
     ]
    },
    "test_regex.sys": {
     "line number": [
      1479,
      1486,
      1491
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_various": {
  "data": {
   "lineno": 1752,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2470,
      2479
     ]
    },
    "ascii": {
     "line number": [
      1763,
      1773,
      1774,
      1777,
      1778,
      1779,
      1783,
      1784,
      1789,
      1790,
      1792,
      1795,
      1796,
      1797,
      1798,
      1802,
      1804,
      1806,
      1807,
      1810,
      1811,
      1812,
      1814,
      1815,
      1816,
      1817,
      1820,
      1824,
      1827,
      1828,
      1829,
      1830,
      1831,
      1833,
      1834,
      1835,
      1836,
      1837,
      1838,
      1839,
      1843,
      1844,
      1845,
      1846,
      1847,
      1848,
      1849,
      1850,
      1852,
      1853,
      1854,
      1855,
      1856,
      1857,
      1858,
      1859,
      1860,
      1861,
      1863,
      1864,
      1865,
      1866,
      1867,
      1868,
      1869,
      1870,
      1871,
      1872,
      1874,
      1875,
      1876,
      1877,
      1878,
      1879,
      1880,
      1881,
      1882,
      1889,
      1890,
      1891,
      1892,
      1893,
      1894,
      1896,
      1897,
      1898,
      1899,
      1900,
      1901,
      1902,
      1903,
      1904,
      1905,
      1907,
      1908,
      1909,
      1910,
      1911,
      1912,
      1913,
      1914,
      1915,
      1916,
      1918,
      1919,
      1920,
      1921,
      1922,
      1923,
      1924,
      1925,
      1926,
      1927,
      1929,
      1930,
      1931,
      1932,
      1933,
      1934,
      1936,
      1937,
      1938,
      1940,
      1941,
      1942,
      1943,
      1944,
      1945,
      1946,
      1947,
      1948,
      1949,
      1951,
      1952,
      1953,
      1954,
      1955,
      1956,
      1957,
      1958,
      1959,
      1960,
      1962,
      1963,
      1965,
      1967,
      1968,
      1969,
      1971,
      1972,
      1974,
      1975,
      1977,
      1978,
      1979,
      1980,
      1981,
      1982,
      1983,
      1984,
      1985,
      1986,
      1988,
      1989,
      1990,
      1991,
      1992,
      1993,
      1994,
      1995,
      1996,
      1997,
      1999,
      2000,
      2002,
      2004,
      2006,
      2007,
      2008,
      2009,
      2010,
      2011,
      2015,
      2016,
      2020,
      2022,
      2023,
      2024,
      2025,
      2026,
      2027,
      2028,
      2029,
      2032,
      2033,
      2034,
      2035,
      2036,
      2037,
      2039,
      2040,
      2041,
      2042,
      2043,
      2044,
      2045,
      2046,
      2047,
      2048,
      2050,
      2051,
      2052,
      2053,
      2054,
      2055,
      2056,
      2057,
      2058,
      2059,
      2061,
      2062,
      2063,
      2064,
      2065,
      2066,
      2067,
      2068,
      2069,
      2070,
      2072,
      2073,
      2074,
      2075,
      2076,
      2077,
      2078,
      2079,
      2084,
      2085,
      2086,
      2087,
      2088,
      2089,
      2090,
      2091,
      2092,
      2094,
      2095,
      2098,
      2100,
      2101,
      2102,
      2103,
      2107,
      2108,
      2109,
      2110,
      2112,
      2113,
      2114,
      2116,
      2117,
      2118,
      2119,
      2121,
      2122,
      2123,
      2124,
      2125,
      2127,
      2128,
      2129,
      2130,
      2131,
      2132,
      2133,
      2134,
      2135,
      2136,
      2138,
      2139,
      2140,
      2141,
      2142,
      2143,
      2144,
      2145,
      2146,
      2147,
      2149,
      2150,
      2152,
      2154,
      2155,
      2156,
      2158,
      2159,
      2169,
      2170,
      2172,
      2173,
      2174,
      2175,
      2176,
      2177,
      2178,
      2179,
      2181,
      2182,
      2183,
      2184,
      2185,
      2186,
      2187,
      2188,
      2189,
      2190,
      2192,
      2193,
      2194,
      2195,
      2196,
      2197,
      2198,
      2199,
      2200,
      2201,
      2203,
      2204,
      2205,
      2206,
      2207,
      2208,
      2209,
      2210,
      2211,
      2212,
      2214,
      2215,
      2216,
      2217,
      2218,
      2219,
      2220,
      2221,
      2222,
      2223,
      2225,
      2226,
      2227,
      2231,
      2232,
      2233,
      2234,
      2236,
      2237,
      2238,
      2239,
      2240,
      2241,
      2242,
      2245,
      2248,
      2249,
      2250,
      2251,
      2254,
      2255,
      2256,
      2258,
      2260,
      2261,
      2262,
      2263,
      2264,
      2265,
      2266,
      2267,
      2269,
      2270,
      2272,
      2273,
      2274,
      2275,
      2276,
      2277,
      2278,
      2280,
      2281,
      2282,
      2283,
      2284,
      2285,
      2286,
      2287,
      2288,
      2289,
      2291,
      2292,
      2293,
      2294,
      2295,
      2296,
      2297,
      2299,
      2300,
      2301,
      2304,
      2306,
      2307,
      2308,
      2310,
      2311,
      2314,
      2316,
      2318,
      2319,
      2322,
      2323,
      2324,
      2325,
      2328,
      2329,
      2330,
      2331,
      2332,
      2333,
      2335,
      2336,
      2337,
      2338,
      2341,
      2343,
      2345,
      2350,
      2357,
      2358,
      2359,
      2360,
      2361,
      2362,
      2368,
      2373,
      2376,
      2380,
      2383,
      2384,
      2387,
      2388,
      2389,
      2390,
      2391,
      2394,
      2396,
      2403,
      2408,
      2411,
      2413,
      2417,
      2418,
      2419,
      2420,
      2421,
      2422,
      2424,
      2426,
      2428,
      2429,
      2430,
      2432,
      2434,
      2435,
      2436,
      2437,
      2442,
      2444,
      2446,
      2448,
      2450,
      2452,
      2453,
      2454,
      2456,
      2458,
      2460,
      2471,
      2491,
      2493,
      2495
     ]
    },
    "chr": {
     "line number": [
      1789,
      1789,
      1807,
      1817,
      1817,
      1818,
      1818,
      1818,
      1818
     ]
    },
    "int": {
     "line number": [
      2478
     ]
    },
    "len": {
     "line number": [
      2466
     ]
    },
    "test_regex.regex": {
     "line number": [
      1755,
      1756,
      1757,
      1758,
      1761,
      1764,
      1766,
      1768,
      1770,
      1780,
      1787,
      1841,
      1883,
      1885,
      1886,
      1887,
      1888,
      1935,
      2014,
      2017,
      2021,
      2080,
      2081,
      2083,
      2096,
      2097,
      2099,
      2105,
      2106,
      2111,
      2120,
      2164,
      2166,
      2228,
      2229,
      2230,
      2243,
      2244,
      2247,
      2252,
      2253,
      2259,
      2271,
      2349,
      2406,
      2410,
      2485,
      2488
     ]
    },
    "test_regex.string": {
     "line number": [
      2467,
      2469,
      2484,
      2486,
      2488
     ]
    },
    "test_regex.sys": {
     "line number": [
      2483,
      2483
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_weakref": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      62
     ]
    },
    "weakref.proxy": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_word_boundary": {
  "data": {
   "lineno": 1555,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1557,
      1561,
      1567,
      1569,
      1573,
      1576
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_word_class": {
  "data": {
   "lineno": 1200,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1201,
      1204,
      1206,
      1209
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.RegexTests.test_zerowidth": {
  "data": {
   "lineno": 1344,
   "symbols_in_volume": {
    "test_regex.regex": {
     "line number": [
      1347,
      1350,
      1351,
      1355,
      1357,
      1359,
      1361,
      1363,
      1365,
      1367,
      1369,
      1373,
      1375,
      1378,
      1379,
      1383,
      1385,
      1388,
      1389,
      1392,
      1394,
      1397,
      1399
     ]
    },
    "test_regex.sys": {
     "line number": [
      1346,
      1372,
      1382
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.StrSubclass": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "str": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "test_regex.StrSubclass.__getitem__": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "super": {
     "line number": [
      13
     ]
    },
    "test_regex.StrSubclass": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.array": {
  "data": {
   "shadows": "array"
  },
  "type": "import"
 },
 "test_regex.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "test_regex.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "test_regex.proxy": {
  "data": {
   "shadows": "weakref.proxy"
  },
  "type": "import"
 },
 "test_regex.regex": {
  "data": {
   "shadows": "regex"
  },
  "type": "import"
 },
 "test_regex.run_unittest": {
  "data": {
   "shadows": "test.support.run_unittest"
  },
  "type": "import"
 },
 "test_regex.string": {
  "data": {
   "shadows": "string"
  },
  "type": "import"
 },
 "test_regex.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "test_regex.test_main": {
  "data": {
   "lineno": 4171,
   "symbols_in_volume": {
    "test.support.run_unittest": {
     "line number": [
      4172
     ]
    },
    "test_regex.RegexTests": {
     "line number": [
      4172
     ]
    }
   }
  },
  "type": "function"
 },
 "test_regex.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 }
}