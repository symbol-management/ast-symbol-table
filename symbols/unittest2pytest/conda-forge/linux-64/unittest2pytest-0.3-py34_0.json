{
 "unittest2pytest": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "unittest2pytest.__main__": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "unittest2pytest.__main__.main": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "unittest2pytest.fixes": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "unittest2pytest.fixes.fix_remove_class": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "unittest2pytest.fixes.fix_remove_class.FixRemoveClass": {
  "lineno": 51,
  "symbols_in_volume": [
   "lib2to3.fixer_base.BaseFix"
  ],
  "type": "class"
 },
 "unittest2pytest.fixes.fix_remove_class.FixRemoveClass.dedent": {
  "lineno": 59,
  "symbols_in_volume": [
   "lib2to3.fixer_util.token.DEDENT",
   "lib2to3.fixer_util.token.INDENT"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_remove_class.FixRemoveClass.transform": {
  "lineno": 73,
  "symbols_in_volume": [
   "lib2to3.fixer_util.find_indentation",
   "lib2to3.fixer_util.token.NEWLINE"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert": {
  "lineno": null,
  "symbols_in_volume": [
   "functools.partial",
   "re.compile",
   "unittest.TestCase"
  ],
  "type": "module"
 },
 "unittest2pytest.fixes.fix_self_assert.AlmostOp": {
  "lineno": 106,
  "symbols_in_volume": [
   "lib2to3.fixer_util.Call",
   "lib2to3.fixer_util.Comma",
   "lib2to3.fixer_util.Name",
   "lib2to3.fixer_util.Node",
   "lib2to3.fixer_util.Number",
   "lib2to3.fixer_util.syms.factor"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.CompOp": {
  "lineno": 46,
  "symbols_in_volume": [
   "lib2to3.fixer_util.Name",
   "lib2to3.fixer_util.Node",
   "lib2to3.fixer_util.syms.comparison"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.DualOp": {
  "lineno": 94,
  "symbols_in_volume": [
   "lib2to3.fixer_util.Node",
   "lib2to3.fixer_util.syms.test"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.FixSelfAssert": {
  "lineno": 361,
  "symbols_in_volume": [
   "lib2to3.fixer_base.BaseFix"
  ],
  "type": "class"
 },
 "unittest2pytest.fixes.fix_self_assert.FixSelfAssert.transform": {
  "lineno": 371,
  "symbols_in_volume": [
   "lib2to3.fixer_util.Name",
   "lib2to3.fixer_util.Node",
   "lib2to3.fixer_util.find_indentation",
   "lib2to3.fixer_util.syms.arglist",
   "lib2to3.fixer_util.syms.assert_stmt",
   "unittest.TestCase"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.FixSelfAssert.transform.fix_line_wrapping": {
  "lineno": 427,
  "symbols_in_volume": [
   "lib2to3.fixer_util.token.LBRACE",
   "lib2to3.fixer_util.token.LPAR",
   "lib2to3.fixer_util.token.LSQB"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.FixSelfAssert.transform.process_arg": {
  "lineno": 373,
  "symbols_in_volume": [
   "lib2to3.fixer_util.Leaf",
   "lib2to3.fixer_util.Node",
   "lib2to3.fixer_util.syms.argument",
   "lib2to3.fixer_util.token.COMMA",
   "lib2to3.fixer_util.token.EQUAL",
   "lib2to3.fixer_util.token.NAME"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.RaisesOp": {
  "lineno": 122,
  "symbols_in_volume": [
   "lib2to3.fixer_util.Call",
   "lib2to3.fixer_util.Name",
   "lib2to3.fixer_util.Newline",
   "lib2to3.fixer_util.Node",
   "lib2to3.fixer_util.syms.lambdef",
   "lib2to3.fixer_util.syms.with_stmt"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.RaisesRegexOp": {
  "lineno": 159,
  "symbols_in_volume": [
   "lib2to3.fixer_util.Name",
   "lib2to3.fixer_util.Newline",
   "lib2to3.fixer_util.Node",
   "lib2to3.fixer_util.syms.arglist",
   "lib2to3.fixer_util.syms.suite",
   "lib2to3.fixer_util.syms.with_stmt"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.SequenceEqual": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.UnaryOp": {
  "lineno": 57,
  "symbols_in_volume": [
   "lib2to3.fixer_util.Name",
   "lib2to3.fixer_util.Node",
   "lib2to3.fixer_util.syms.test"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.add_import": {
  "lineno": 190,
  "symbols_in_volume": [
   "lib2to3.fixer_util.Name",
   "lib2to3.fixer_util.Newline",
   "lib2to3.fixer_util.Node",
   "lib2to3.fixer_util.does_tree_import",
   "lib2to3.fixer_util.syms.file_input",
   "lib2to3.fixer_util.syms.import_name",
   "lib2to3.fixer_util.syms.simple_stmt",
   "lib2to3.fixer_util.syms.suite"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.fill_template": {
  "lineno": 80,
  "symbols_in_volume": [
   "lib2to3.fixer_util.Name"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.get_import_nodes": {
  "lineno": 228,
  "symbols_in_volume": [
   "lib2to3.fixer_util.is_import",
   "lib2to3.fixer_util.syms.simple_stmt"
  ],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.get_parent_of_type": {
  "lineno": 205,
  "symbols_in_volume": [],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.insert_import": {
  "lineno": 212,
  "symbols_in_volume": [],
  "type": "function"
 },
 "unittest2pytest.fixes.fix_self_assert.parenthesize_expression": {
  "lineno": 71,
  "symbols_in_volume": [
   "lib2to3.fixer_util.parenthesize",
   "lib2to3.fixer_util.syms.comparison",
   "lib2to3.fixer_util.syms.not_test"
  ],
  "type": "function"
 },
 "unittest2pytest.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "unittest2pytest.utils.SelfMarker": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "class"
 },
 "unittest2pytest.utils.__apply_defaults": {
  "lineno": 40,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "inspect.Parameter.VAR_KEYWORD",
   "inspect.Parameter.VAR_POSITIONAL",
   "inspect.Parameter.empty"
  ],
  "type": "function"
 },
 "unittest2pytest.utils.resolve_func_args": {
  "lineno": 64,
  "symbols_in_volume": [
   "inspect.Parameter.VAR_KEYWORD",
   "inspect.Parameter.VAR_POSITIONAL",
   "inspect.Parameter.empty",
   "inspect.getargspec",
   "inspect.getcallargs",
   "inspect.signature"
  ],
  "type": "function"
 }
}