{
 "pytest_flask": {
  "data": {},
  "type": "module"
 },
 "pytest_flask.__version__": {
  "data": {
   "shadows": "version"
  },
  "type": "import"
 },
 "pytest_flask._version": {
  "data": {},
  "type": "module"
 },
 "pytest_flask._version.version": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pytest_flask.fixtures": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "pytest_flask.fixtures.LiveServer": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pytest_flask.fixtures.LiveServer.__init__": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "pytest_flask.fixtures.LiveServer.__repr__": {
  "data": {
   "lineno": 88
  },
  "type": "function"
 },
 "pytest_flask.fixtures.LiveServer.start": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "pytest_flask.fixtures.multiprocessing",
    "pytest_flask.fixtures.time",
    "urllib.error.URLError",
    "urllib.request.urlopen"
   ]
  },
  "type": "function"
 },
 "pytest_flask.fixtures.LiveServer.start.worker": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "pytest_flask.fixtures.LiveServer.stop": {
  "data": {
   "lineno": 83
  },
  "type": "function"
 },
 "pytest_flask.fixtures.LiveServer.url": {
  "data": {
   "lineno": 79
  },
  "type": "function"
 },
 "pytest_flask.fixtures.URLError": {
  "data": {
   "shadows": "urllib.error.URLError"
  },
  "type": "import"
 },
 "pytest_flask.fixtures._request_ctx_stack": {
  "data": {
   "shadows": "flask._request_ctx_stack"
  },
  "type": "import"
 },
 "pytest_flask.fixtures._rewrite_server_name": {
  "data": {
   "lineno": 92
  },
  "type": "function"
 },
 "pytest_flask.fixtures.accept_any": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "pytest_flask.fixtures.accept_mimetype",
    "pytest_flask.fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.fixtures.accept_json": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "pytest_flask.fixtures.accept_mimetype",
    "pytest_flask.fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.fixtures.accept_jsonp": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "pytest_flask.fixtures.accept_mimetype",
    "pytest_flask.fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.fixtures.accept_mimetype": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "pytest_flask.fixtures.mimetype",
    "pytest_flask.fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.fixtures.client": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "pytest_flask.fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.fixtures.client_class": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "pytest_flask.fixtures.client",
    "pytest_flask.fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.fixtures.config": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "pytest_flask.fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.fixtures.live_server": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "pytest_flask.fixtures.LiveServer",
    "pytest_flask.fixtures._rewrite_server_name",
    "pytest_flask.fixtures.pytest",
    "pytest_flask.fixtures.socket",
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_flask.fixtures.mimetype": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "pytest_flask.fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.fixtures.multiprocessing": {
  "data": {
   "shadows": "multiprocessing"
  },
  "type": "import"
 },
 "pytest_flask.fixtures.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "pytest_flask.fixtures.request_ctx": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "flask._request_ctx_stack.top",
    "pytest_flask.fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.fixtures.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "pytest_flask.fixtures.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pytest_flask.fixtures.urlopen": {
  "data": {
   "shadows": "urllib.request.urlopen"
  },
  "type": "import"
 },
 "pytest_flask.plugin": {
  "data": {},
  "type": "module"
 },
 "pytest_flask.plugin.JSONResponse": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pytest_flask.plugin.JSONResponse.json": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "flask.json.loads",
    "werkzeug.cached_property"
   ]
  },
  "type": "function"
 },
 "pytest_flask.plugin._configure_application": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "getfixturevalue",
    "pytest_flask.plugin.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.plugin._make_test_response_class": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "pytest_flask.plugin.JSONResponse",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "pytest_flask.plugin._monkeypatch_response_class": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "getfixturevalue",
    "pytest_flask.plugin._make_test_response_class",
    "pytest_flask.plugin.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.plugin._push_request_context": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "getfixturevalue",
    "pytest_flask.plugin.pytest"
   ]
  },
  "type": "function"
 },
 "pytest_flask.plugin._push_request_context.teardown": {
  "data": {
   "lineno": 91
  },
  "type": "function"
 },
 "pytest_flask.plugin.cached_property": {
  "data": {
   "shadows": "werkzeug.cached_property"
  },
  "type": "import"
 },
 "pytest_flask.plugin.json": {
  "data": {
   "shadows": "flask.json"
  },
  "type": "import"
 },
 "pytest_flask.plugin.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "pytest_flask.plugin.pytest_addoption": {
  "data": {
   "lineno": 117
  },
  "type": "function"
 },
 "pytest_flask.plugin.pytest_configure": {
  "data": {
   "lineno": 129
  },
  "type": "function"
 },
 "pytest_flask.pytest_compat": {
  "data": {},
  "type": "module"
 },
 "pytest_flask.pytest_compat.getfixturevalue": {
  "data": {
   "lineno": 1,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 }
}