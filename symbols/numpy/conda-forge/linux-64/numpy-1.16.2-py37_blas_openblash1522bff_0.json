{
 "*": {
  "data": {
   "imports": [
    "distutils.log"
   ]
  },
  "type": "star-import"
 },
 "numpy": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      127,
      131
     ]
    },
    "NameError": {
     "line number": [
      119
     ]
    },
    "__name__": {
     "line number": [
      191
     ]
    },
    "builtins.str": {
     "line number": [
      161
     ]
    },
    "numpy.__NUMPY_SETUP__": {
     "line number": [
      122
     ]
    },
    "numpy.__all__": {
     "line number": [
      169,
      170,
      171,
      172,
      173
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      191,
      192
     ]
    },
    "numpy._sanity_check": {
     "line number": [
      218,
      219
     ]
    },
    "numpy.msg": {
     "line number": [
      131
     ]
    },
    "numpy.sys": {
     "line number": [
      123,
      159
     ]
    },
    "numpy.warnings": {
     "line number": [
      176,
      177,
      178
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.__NUMPY_SETUP__": {
  "data": {
   "lineno": 120
  },
  "type": "constant"
 },
 "numpy.__all__": {
  "data": {
   "lineno": 136
  },
  "type": "constant"
 },
 "numpy.__config__": {
  "data": {
   "symbols_in_volume": {
    "numpy.__config__.extra_dll_dir": {
     "line number": [
      12,
      14
     ]
    },
    "numpy.__config__.os": {
     "line number": [
      10,
      10,
      12,
      13,
      14,
      14
     ]
    },
    "numpy.__config__.sys": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.__config__.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "numpy.__config__.blas_mkl_info": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.__config__.blas_opt_info": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.__config__.blis_info": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.__config__.extra_dll_dir": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "numpy.__config__.get_info": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "globals": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.__config__.lapack_mkl_info": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.__config__.lapack_opt_info": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.__config__.openblas_info": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.__config__.openblas_lapack_info": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.__config__.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.__config__.show": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "globals": {
     "line number": [
      29
     ]
    },
    "len": {
     "line number": [
      36
     ]
    },
    "print": {
     "line number": [
      31,
      33,
      38
     ]
    },
    "str": {
     "line number": [
      35
     ]
    },
    "type": {
     "line number": [
      30,
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.__config__.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.__git_revision__": {
  "data": {
   "shadows": "git_revision"
  },
  "type": "import"
 },
 "numpy.__version__": {
  "data": {
   "shadows": "version"
  },
  "type": "import"
 },
 "numpy._distributor_init": {
  "data": {},
  "type": "module"
 },
 "numpy._globals": {
  "data": {
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      28
     ]
    },
    "globals": {
     "line number": [
      27
     ]
    },
    "numpy._globals.ModuleDeprecationWarning": {
     "line number": [
      43
     ]
    },
    "numpy._globals.VisibleDeprecationWarning": {
     "line number": [
      56
     ]
    },
    "numpy._globals._NoValueType": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy._globals.ModuleDeprecationWarning": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy._globals.VisibleDeprecationWarning": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy._globals._NoValue": {
  "data": {
   "lineno": 81
  },
  "type": "constant"
 },
 "numpy._globals._NoValueType": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "object": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy._globals._NoValueType.__new__": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "numpy._globals._NoValueType": {
     "line number": [
      70
     ]
    },
    "super": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy._globals._NoValueType.__reduce__": {
  "data": {
   "lineno": 74
  },
  "type": "function"
 },
 "numpy._globals._NoValueType.__repr__": {
  "data": {
   "lineno": 77
  },
  "type": "function"
 },
 "numpy._globals.__ALL__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy._globals._is_loaded": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy._globals.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy._globals.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy._globals.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy._mat": {
  "data": {
   "shadows": "matrixlib"
  },
  "type": "import"
 },
 "numpy._pytesttester": {
  "data": {},
  "type": "module"
 },
 "numpy._pytesttester.PytestTester": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "object": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy._pytesttester.PytestTester.__call__": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "SystemExit": {
     "line number": [
      206
     ]
    },
    "ValueError": {
     "line number": [
      176
     ]
    },
    "list": {
     "line number": [
      179,
      198
     ]
    },
    "numpy._pytesttester._show_numpy_info": {
     "line number": [
      202
     ]
    },
    "numpy._pytesttester.os": {
     "line number": [
      133
     ]
    },
    "numpy._pytesttester.pytest": {
     "line number": [
      205
     ]
    },
    "numpy._pytesttester.sys": {
     "line number": [
      132
     ]
    },
    "numpy._pytesttester.warnings": {
     "line number": [
      144,
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy._pytesttester.PytestTester.__init__": {
  "data": {
   "lineno": 72
  },
  "type": "function"
 },
 "numpy._pytesttester.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "numpy._pytesttester._show_numpy_info": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "numpy.__version__": {
     "line number": [
      42
     ]
    },
    "numpy.ones": {
     "line number": [
      43
     ]
    },
    "print": {
     "line number": [
      42,
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy._pytesttester.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy._pytesttester.cpuinfo": {
  "data": {
   "shadows": "numpy.distutils.cpuinfo"
  },
  "type": "import"
 },
 "numpy._pytesttester.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy._pytesttester.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy._pytesttester.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy._pytesttester.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy._pytesttester.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy._pytesttester.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy._pytesttester.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy._sanity_check": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      209,
      210
     ]
    },
    "RuntimeError": {
     "line number": [
      216
     ]
    },
    "abs": {
     "line number": [
      208
     ]
    },
    "numpy.msg": {
     "line number": [
      211,
      216
     ]
    },
    "ones": {
     "line number": [
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.bool": {
  "data": {
   "shadows": "__builtin__.bool"
  },
  "type": "import"
 },
 "numpy.compat": {
  "data": {
   "symbols_in_volume": {
    "numpy.compat.__all__": {
     "line number": [
      19,
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.compat.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.compat._inspect": {
  "data": {},
  "type": "module"
 },
 "numpy.compat._inspect.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.compat._inspect.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.compat._inspect.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.compat._inspect.formatargspec": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "formatvalue": {
     "line number": [
      162
     ]
    },
    "formatvarargs": {
     "line number": [
      165
     ]
    },
    "formatvarkw": {
     "line number": [
      167
     ]
    },
    "join": {
     "line number": [
      160
     ]
    },
    "len": {
     "line number": [
      158,
      158,
      159
     ]
    },
    "numpy.compat._inspect.joinseq": {
     "line number": [
      147
     ]
    },
    "numpy.compat._inspect.strseq": {
     "line number": [
      160
     ]
    },
    "range": {
     "line number": [
      159
     ]
    },
    "repr": {
     "line number": [
      146
     ]
    },
    "str": {
     "line number": [
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat._inspect.formatargvalues": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "convert": {
     "line number": [
      187
     ]
    },
    "formatvalue": {
     "line number": [
      190,
      192
     ]
    },
    "formatvarargs": {
     "line number": [
      190
     ]
    },
    "formatvarkw": {
     "line number": [
      192
     ]
    },
    "join": {
     "line number": [
      187
     ]
    },
    "locals": {
     "line number": [
      190,
      192
     ]
    },
    "numpy.compat._inspect.joinseq": {
     "line number": [
      175
     ]
    },
    "numpy.compat._inspect.strseq": {
     "line number": [
      187
     ]
    },
    "repr": {
     "line number": [
      174
     ]
    },
    "str": {
     "line number": [
      171
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat._inspect.formatargvalues.convert": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": {
    "formatarg": {
     "line number": [
      186
     ]
    },
    "formatvalue": {
     "line number": [
      185,
      186
     ]
    },
    "locals": {
     "line number": [
      184,
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat._inspect.getargs": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      77,
      88
     ]
    },
    "list": {
     "line number": [
      81
     ]
    },
    "numpy.compat._inspect.iscode": {
     "line number": [
      76
     ]
    },
    "range": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat._inspect.getargspec": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      111
     ]
    },
    "numpy.compat._inspect.getargs": {
     "line number": [
      112
     ]
    },
    "numpy.compat._inspect.isfunction": {
     "line number": [
      110
     ]
    },
    "numpy.compat._inspect.ismethod": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat._inspect.getargvalues": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "numpy.compat._inspect.getargs": {
     "line number": [
      124
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat._inspect.iscode": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      61
     ]
    },
    "numpy.compat._inspect.types": {
     "line number": [
      61
     ]
    },
    "object": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat._inspect.isfunction": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      41
     ]
    },
    "numpy.compat._inspect.types": {
     "line number": [
      41
     ]
    },
    "object": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat._inspect.ismethod": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      26
     ]
    },
    "numpy.compat._inspect.types": {
     "line number": [
      26
     ]
    },
    "object": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat._inspect.joinseq": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "len": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat._inspect.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.compat._inspect.strseq": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "convert": {
     "line number": [
      140
     ]
    },
    "join": {
     "line number": [
      138,
      138
     ]
    },
    "list": {
     "line number": [
      137
     ]
    },
    "numpy.compat._inspect.joinseq": {
     "line number": [
      133
     ]
    },
    "object": {
     "line number": [
      137,
      138,
      140
     ]
    },
    "tuple": {
     "line number": [
      137
     ]
    },
    "type": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat._inspect.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "numpy.compat.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.compat.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.compat.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.compat.py3k": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      16
     ]
    },
    "int": {
     "line number": [
      22,
      23,
      60
     ]
    },
    "numpy.compat.py3k.abc": {
     "line number": [
      186,
      188
     ]
    },
    "numpy.compat.py3k.long": {
     "line number": [
      60
     ]
    },
    "numpy.compat.py3k.os": {
     "line number": [
      194,
      195
     ]
    },
    "numpy.compat.py3k.sys": {
     "line number": [
      19,
      125,
      125,
      185,
      192
     ]
    },
    "object": {
     "line number": [
      188
     ]
    },
    "pathlib.Path": {
     "line number": [
      17
     ]
    },
    "pathlib.PurePath": {
     "line number": [
      17
     ]
    },
    "str": {
     "line number": [
      24,
      25,
      56,
      61,
      62
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.compat.py3k.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "numpy.compat.py3k.PurePath": {
  "data": {
   "shadows": "pathlib.PurePath"
  },
  "type": "import"
 },
 "numpy.compat.py3k._PurePath__fspath__": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "str": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.compat.py3k.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "numpy.compat.py3k.abc_ABC": {
  "data": {
   "lineno": 188
  },
  "type": "constant"
 },
 "numpy.compat.py3k.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.compat.py3k.asbytes": {
  "data": {
   "lineno": 61
  },
  "type": "constant"
 },
 "numpy.compat.py3k.asbytes_nested": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      84
     ]
    },
    "isinstance": {
     "line number": [
      84
     ]
    },
    "numpy.compat.py3k.asbytes": {
     "line number": [
      87
     ]
    },
    "numpy.compat.py3k.bytes": {
     "line number": [
      84
     ]
    },
    "numpy.compat.py3k.unicode": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.asstr": {
  "data": {
   "lineno": 62
  },
  "type": "constant"
 },
 "numpy.compat.py3k.asunicode": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      69
     ]
    },
    "numpy.compat.py3k.unicode": {
     "line number": [
      69
     ]
    },
    "str": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.asunicode_nested": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      90
     ]
    },
    "isinstance": {
     "line number": [
      90
     ]
    },
    "numpy.compat.py3k.asunicode": {
     "line number": [
      93
     ]
    },
    "numpy.compat.py3k.bytes": {
     "line number": [
      90
     ]
    },
    "numpy.compat.py3k.unicode": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.basestring": {
  "data": {
   "lineno": 58
  },
  "type": "constant"
 },
 "numpy.compat.py3k.bytes": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "numpy.compat.py3k.contextlib_nullcontext": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "object": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.compat.py3k.contextlib_nullcontext.__enter__": {
  "data": {
   "lineno": 118
  },
  "type": "function"
 },
 "numpy.compat.py3k.contextlib_nullcontext.__exit__": {
  "data": {
   "lineno": 121
  },
  "type": "function"
 },
 "numpy.compat.py3k.contextlib_nullcontext.__init__": {
  "data": {
   "lineno": 115
  },
  "type": "function"
 },
 "numpy.compat.py3k.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.compat.py3k.getexception": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "numpy.compat.py3k.sys": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.imp": {
  "data": {
   "shadows": "imp"
  },
  "type": "import"
 },
 "numpy.compat.py3k.importlib.machinery": {
  "data": {
   "shadows": "importlib.machinery"
  },
  "type": "import"
 },
 "numpy.compat.py3k.integer_types": {
  "data": {
   "lineno": 60
  },
  "type": "constant"
 },
 "numpy.compat.py3k.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "numpy.compat.py3k.is_pathlib_path": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      101
     ]
    },
    "pathlib.Path": {
     "line number": [
      101,
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.isfileobj": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.long": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "numpy.compat.py3k.npy_load_module": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "numpy.compat.py3k.imp": {
     "line number": [
      174,
      178
     ]
    },
    "numpy.compat.py3k.os": {
     "line number": [
      173
     ]
    },
    "open": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.open_latin1": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "open": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.compat.py3k.os_PathLike": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "numpy.compat.py3k.abc_ABC": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.compat.py3k.os_PathLike.__fspath__": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      206
     ]
    },
    "numpy.compat.py3k.abc": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.os_PathLike.__subclasshook__": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      208
     ]
    },
    "hasattr": {
     "line number": [
      212
     ]
    },
    "issubclass": {
     "line number": [
      210
     ]
    },
    "pathlib.PurePath": {
     "line number": [
      210,
      210
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.os_fspath": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      230
     ]
    },
    "TypeError": {
     "line number": [
      236,
      241
     ]
    },
    "hasattr": {
     "line number": [
      231
     ]
    },
    "isinstance": {
     "line number": [
      222,
      238
     ]
    },
    "issubclass": {
     "line number": [
      233
     ]
    },
    "numpy.compat.py3k._PurePath__fspath__": {
     "line number": [
      234
     ]
    },
    "numpy.compat.py3k.bytes": {
     "line number": [
      222,
      238
     ]
    },
    "numpy.compat.py3k.unicode": {
     "line number": [
      222,
      238
     ]
    },
    "pathlib.PurePath": {
     "line number": [
      233,
      233
     ]
    },
    "type": {
     "line number": [
      227,
      243
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.compat.py3k.sixu": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "numpy.compat.py3k.unicode": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.py3k.strchar": {
  "data": {
   "lineno": 63
  },
  "type": "constant"
 },
 "numpy.compat.py3k.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.compat.py3k.unicode": {
  "data": {
   "lineno": 59
  },
  "type": "constant"
 },
 "numpy.compat.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      10
     ]
    },
    "numpy.compat.setup.configuration": {
     "line number": [
      12
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.compat.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.compat.setup.configuration": {
  "data": {
   "lineno": 3,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.compat.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.compat.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.compat.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.compat.tests.test_compat": {
  "data": {},
  "type": "module"
 },
 "numpy.compat.tests.test_compat.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.compat.tests.test_compat.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.compat.tests.test_compat.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.compat.tests.test_compat.isfileobj": {
  "data": {
   "shadows": "numpy.compat.isfileobj"
  },
  "type": "import"
 },
 "numpy.compat.tests.test_compat.join": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "numpy.compat.tests.test_compat.os_fspath": {
  "data": {
   "shadows": "numpy.compat.os_fspath"
  },
  "type": "import"
 },
 "numpy.compat.tests.test_compat.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.compat.tests.test_compat.tempdir": {
  "data": {
   "shadows": "numpy.testing.tempdir"
  },
  "type": "import"
 },
 "numpy.compat.tests.test_compat.test_isfileobj": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "numpy.compat.isfileobj": {
     "line number": [
      15,
      18,
      21
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      15,
      18,
      21
     ]
    },
    "numpy.testing.tempdir": {
     "line number": [
      11
     ]
    },
    "open": {
     "line number": [
      14,
      17,
      20
     ]
    },
    "os.path.join": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.compat.tests.test_compat.test_os_fspath_strings": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "numpy.compat.os_fspath": {
     "line number": [
      26
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.complex": {
  "data": {
   "shadows": "__builtin__.complex"
  },
  "type": "import"
 },
 "numpy.conftest": {
  "data": {},
  "type": "module"
 },
 "numpy.conftest._collect_results": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.conftest._old_fpu_mode": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.conftest.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.conftest.add_np": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "numpy.conftest.numpy": {
     "line number": [
      60
     ]
    },
    "numpy.conftest.pytest": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.conftest.check_fpu_mode": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      47,
      53
     ]
    },
    "numpy.conftest._collect_results": {
     "line number": [
      50
     ]
    },
    "numpy.conftest.pytest": {
     "line number": [
      37
     ]
    },
    "numpy.core._multiarray_tests.get_fpu_mode": {
     "line number": [
      42,
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.conftest.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.conftest.get_fpu_mode": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.get_fpu_mode"
  },
  "type": "import"
 },
 "numpy.conftest.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.conftest.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.conftest.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.conftest.pytest_itemcollected": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "numpy.conftest._collect_results": {
     "line number": [
      33
     ]
    },
    "numpy.conftest._old_fpu_mode": {
     "line number": [
      30,
      31,
      32,
      33,
      34
     ]
    },
    "numpy.conftest.pytest": {
     "line number": [
      17
     ]
    },
    "numpy.core._multiarray_tests.get_fpu_mode": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      41,
      71,
      91
     ]
    },
    "__name__": {
     "line number": [
      170
     ]
    },
    "copy_reg": {
     "line number": [
      165
     ]
    },
    "copy_reg.pickle": {
     "line number": [
      163
     ]
    },
    "ctypes.WinDLL": {
     "line number": [
      23
     ]
    },
    "hasattr": {
     "line number": [
      83,
      84
     ]
    },
    "len": {
     "line number": [
      25
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      170,
      171
     ]
    },
    "numpy.core.DLL_filenames": {
     "line number": [
      24,
      25,
      28
     ]
    },
    "numpy.core.__all__": {
     "line number": [
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137
     ]
    },
    "numpy.core._ufunc_reconstruct": {
     "line number": [
      163
     ]
    },
    "numpy.core._ufunc_reduce": {
     "line number": [
      163,
      167
     ]
    },
    "numpy.core.env_added": {
     "line number": [
      37,
      73,
      76
     ]
    },
    "numpy.core.glob": {
     "line number": [
      20
     ]
    },
    "numpy.core.libs_path": {
     "line number": [
      19,
      20
     ]
    },
    "numpy.core.msg": {
     "line number": [
      71,
      91
     ]
    },
    "numpy.core.os": {
     "line number": [
      11,
      16,
      16,
      16,
      19,
      20,
      23,
      35,
      36,
      74,
      77
     ]
    },
    "numpy.core.path": {
     "line number": [
      91
     ]
    },
    "numpy.core.sys": {
     "line number": [
      70,
      86,
      158,
      166
     ]
    },
    "numpy.core.warnings": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.DLL_filenames": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.core.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.core.WinDLL": {
  "data": {
   "shadows": "ctypes.WinDLL"
  },
  "type": "import"
 },
 "numpy.core.__all__": {
  "data": {
   "lineno": 128
  },
  "type": "constant"
 },
 "numpy.core.__version__": {
  "data": {
   "shadows": "numpy.version.version"
  },
  "type": "import"
 },
 "numpy.core._add_newdocs": {
  "data": {
   "symbols_in_volume": {
    "numpy.core._add_newdocs.add_newdoc_for_scalar_type": {
     "line number": [
      6838,
      6843,
      6848,
      6853,
      6858,
      6863,
      6868,
      6873,
      6878,
      6883,
      6888,
      6893,
      6898,
      6903,
      6909,
      6915,
      6921,
      6927,
      6933
     ]
    },
    "numpy.core._add_newdocs.numeric_type_aliases": {
     "line number": [
      6796
     ]
    },
    "numpy.core._add_newdocs.tobytesdoc": {
     "line number": [
      4087,
      4094
     ]
    },
    "numpy.core.function_base.add_newdoc": {
     "line number": [
      25,
      70,
      85,
      104,
      123,
      129,
      154,
      420,
      439,
      446,
      454,
      464,
      479,
      488,
      497,
      505,
      566,
      586,
      635,
      653,
      675,
      691,
      706,
      720,
      734,
      748,
      785,
      899,
      950,
      964,
      1017,
      1025,
      1075,
      1112,
      1146,
      1221,
      1264,
      1267,
      1270,
      1331,
      1338,
      1346,
      1354,
      1404,
      1464,
      1482,
      1516,
      1835,
      1964,
      1968,
      1972,
      1976,
      1980,
      1987,
      2008,
      2082,
      2086,
      2115,
      2130,
      2146,
      2223,
      2265,
      2285,
      2301,
      2320,
      2361,
      2387,
      2449,
      2479,
      2489,
      2495,
      2501,
      2511,
      2519,
      2527,
      2548,
      2563,
      2578,
      2593,
      2608,
      2623,
      2640,
      2709,
      2749,
      2764,
      2780,
      2795,
      2810,
      2825,
      2868,
      2883,
      2898,
      2915,
      2944,
      2958,
      2972,
      2997,
      3035,
      3077,
      3135,
      3181,
      3196,
      3211,
      3226,
      3268,
      3307,
      3349,
      3364,
      3379,
      3394,
      3408,
      3441,
      3484,
      3501,
      3516,
      3538,
      3630,
      3645,
      3660,
      3711,
      3788,
      3844,
      3899,
      3914,
      3929,
      3944,
      3959,
      3974,
      4014,
      4086,
      4093,
      4097,
      4112,
      4166,
      4181,
      4287,
      4331,
      4395,
      4461,
      4471,
      4497,
      4542,
      4586,
      4631,
      4689,
      4708,
      4732,
      4750,
      4773,
      4799,
      4836,
      4873,
      4990,
      5069,
      5176,
      5240,
      5304,
      5395,
      5403,
      5446,
      5449,
      5460,
      5488,
      5500,
      5513,
      5542,
      5549,
      5557,
      5566,
      5586,
      5594,
      5609,
      5617,
      5624,
      5633,
      5636,
      5650,
      5659,
      5731,
      5795,
      5798,
      5801,
      5852,
      5896,
      5910,
      5924,
      5938,
      5941,
      5944,
      5947,
      5950,
      5953,
      5956,
      5959,
      5962,
      5965,
      5968,
      5971,
      5976,
      5990,
      6004,
      6018,
      6032,
      6046,
      6060,
      6074,
      6088,
      6102,
      6116,
      6130,
      6144,
      6158,
      6172,
      6186,
      6200,
      6214,
      6228,
      6242,
      6256,
      6270,
      6284,
      6298,
      6312,
      6326,
      6359,
      6373,
      6387,
      6401,
      6415,
      6429,
      6443,
      6457,
      6471,
      6485,
      6499,
      6513,
      6527,
      6541,
      6555,
      6569,
      6583,
      6597,
      6611,
      6625,
      6639,
      6653,
      6667,
      6681,
      6695,
      6717,
      6723,
      6729,
      6735,
      6741,
      6749,
      6755,
      6762,
      6770
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core._add_newdocs._numerictypes": {
  "data": {
   "shadows": "numpy.core.numerictypes"
  },
  "type": "import"
 },
 "numpy.core._add_newdocs.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core._add_newdocs.add_newdoc": {
  "data": {
   "shadows": "numpy.core.function_base.add_newdoc"
  },
  "type": "import"
 },
 "numpy.core._add_newdocs.add_newdoc_for_scalar_type": {
  "data": {
   "lineno": 6819,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      6820
     ]
    },
    "numpy.core._add_newdocs.possible_aliases": {
     "line number": [
      6826
     ]
    },
    "numpy.core.dtype": {
     "line number": [
      6822
     ]
    },
    "numpy.core.function_base.add_newdoc": {
     "line number": [
      6835
     ]
    },
    "numpy.core.numerictypes": {
     "line number": [
      6820
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._add_newdocs.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core._add_newdocs.dtype": {
  "data": {
   "shadows": "numpy.core.dtype"
  },
  "type": "import"
 },
 "numpy.core._add_newdocs.numeric_type_aliases": {
  "data": {
   "lineno": 6783,
   "symbols_in_volume": {
    "list": {
     "line number": [
      6793
     ]
    },
    "type_aliases_gen": {
     "line number": [
      6793
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._add_newdocs.numeric_type_aliases.type_aliases_gen": {
  "data": {
   "lineno": 6784,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      6788
     ]
    },
    "aliases": {
     "line number": [
      6785
     ]
    },
    "getattr": {
     "line number": [
      6787
     ]
    },
    "numpy.core.numerictypes": {
     "line number": [
      6787
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._add_newdocs.possible_aliases": {
  "data": {
   "lineno": 6796
  },
  "type": "constant"
 },
 "numpy.core._add_newdocs.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core._add_newdocs.tobytesdoc": {
  "data": {
   "lineno": 4050
  },
  "type": "constant"
 },
 "numpy.core._aliased_types": {
  "data": {},
  "type": "module"
 },
 "numpy.core._internal": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      17
     ]
    },
    "numpy.core._internal._getintp_ctype": {
     "line number": [
      235
     ]
    },
    "numpy.core._internal._nbo": {
     "line number": [
      155
     ]
    },
    "numpy.core._internal._pep3118_native_map": {
     "line number": [
      525
     ]
    },
    "numpy.core._internal._pep3118_standard_map": {
     "line number": [
      550
     ]
    },
    "numpy.core._internal.re": {
     "line number": [
      146,
      150,
      151
     ]
    },
    "numpy.core._internal.sys": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core._internal.AxisError": {
  "data": {
   "lineno": 803,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      804
     ]
    },
    "ValueError": {
     "line number": [
      804
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      803
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core._internal.AxisError.__init__": {
  "data": {
   "lineno": 806,
   "symbols_in_volume": {
    "numpy.core._internal.AxisError": {
     "line number": [
      818
     ]
    },
    "super": {
     "line number": [
      818
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal.TooHardError": {
  "data": {
   "lineno": 799,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      800
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      799
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core._internal._Stream": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": {
    "object": {
     "line number": [
      559
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core._internal._Stream.__bool__": {
  "data": {
   "lineno": 591,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      592
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._Stream.__init__": {
  "data": {
   "lineno": 560
  },
  "type": "function"
 },
 "numpy.core._internal._Stream.advance": {
  "data": {
   "lineno": 564
  },
  "type": "function"
 },
 "numpy.core._internal._Stream.consume": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": {
    "len": {
     "line number": [
      570,
      571
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._Stream.consume_until": {
  "data": {
   "lineno": 575,
   "symbols_in_volume": {
    "c": {
     "line number": [
      578,
      582,
      584
     ]
    },
    "callable": {
     "line number": [
      576
     ]
    },
    "len": {
     "line number": [
      578,
      584
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._Stream.next": {
  "data": {
   "lineno": 587,
   "symbols_in_volume": {
    "property": {
     "line number": [
      587
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal.__dtype_from_pep3118": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      671
     ]
    },
    "RuntimeError": {
     "line number": [
      718
     ]
    },
    "ValueError": {
     "line number": [
      675
     ]
    },
    "c.isdigit": {
     "line number": [
      642
     ]
    },
    "dict": {
     "line number": [
      602
     ]
    },
    "dtype": {
     "line number": [
      667,
      704,
      708,
      741
     ]
    },
    "int": {
     "line number": [
      624,
      644
     ]
    },
    "map": {
     "line number": [
      624
     ]
    },
    "numpy.core._internal._add_trailing_padding": {
     "line number": [
      693
     ]
    },
    "numpy.core._internal._fix_names": {
     "line number": [
      740
     ]
    },
    "numpy.core._internal._lcm": {
     "line number": [
      700
     ]
    },
    "numpy.core._internal._pep3118_native_map": {
     "line number": [
      635
     ]
    },
    "numpy.core._internal._pep3118_native_typechars": {
     "line number": [
      636
     ]
    },
    "numpy.core._internal._pep3118_standard_map": {
     "line number": [
      638
     ]
    },
    "numpy.core._internal._pep3118_standard_typechars": {
     "line number": [
      639
     ]
    },
    "numpy.core._internal._pep3118_unsupported_map": {
     "line number": [
      669,
      670
     ]
    },
    "numpy.core._internal._prod": {
     "line number": [
      691
     ]
    },
    "tuple": {
     "line number": [
      624
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._add_trailing_padding": {
  "data": {
   "lineno": 761,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      764,
      773
     ]
    },
    "dtype": {
     "line number": [
      781
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._array_descr": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      114
     ]
    },
    "len": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._commastring": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      164
     ]
    },
    "TypeError": {
     "line number": [
      164
     ]
    },
    "ValueError": {
     "line number": [
      165,
      175,
      188
     ]
    },
    "dtype": {
     "line number": [
      163,
      195,
      195,
      197,
      199
     ]
    },
    "eval": {
     "line number": [
      199
     ]
    },
    "len": {
     "line number": [
      160,
      166,
      169,
      171,
      177
     ]
    },
    "numpy.core._internal._convorder": {
     "line number": [
      185,
      186
     ]
    },
    "numpy.core._internal._nbo": {
     "line number": [
      193
     ]
    },
    "numpy.core._internal.format_re": {
     "line number": [
      161
     ]
    },
    "numpy.core._internal.sep_re": {
     "line number": [
      173
     ]
    },
    "numpy.core._internal.space_re": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._convorder": {
  "data": {
   "lineno": 155
  },
  "type": "constant"
 },
 "numpy.core._internal._copy_fields": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": {
    "array": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._ctypes": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "object": {
     "line number": [
      288
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core._internal._ctypes.__init__": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "numpy.core._internal._get_void_ptr": {
     "line number": [
      295
     ]
    },
    "numpy.core._internal._missing_ctypes": {
     "line number": [
      299
     ]
    },
    "numpy.core._internal.ctypes": {
     "line number": [
      292,
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._ctypes._as_parameter_": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": {
    "property": {
     "line number": [
      379
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._ctypes.data": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": {
    "property": {
     "line number": [
      338
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._ctypes.data_as": {
  "data": {
   "lineno": 308
  },
  "type": "function"
 },
 "numpy.core._internal._ctypes.shape": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "numpy.core._internal._getintp_ctype": {
     "line number": [
      366
     ]
    },
    "property": {
     "line number": [
      356
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._ctypes.shape_as": {
  "data": {
   "lineno": 320
  },
  "type": "function"
 },
 "numpy.core._internal._ctypes.strides": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": {
    "numpy.core._internal._getintp_ctype": {
     "line number": [
      377
     ]
    },
    "property": {
     "line number": [
      368
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._ctypes.strides_as": {
  "data": {
   "lineno": 329
  },
  "type": "function"
 },
 "numpy.core._internal._dtype_from_pep3118": {
  "data": {
   "lineno": 596,
   "symbols_in_volume": {
    "dtype": {
     "line number": [
      598,
      599
     ]
    },
    "numpy.core._internal._Stream": {
     "line number": [
      597
     ]
    },
    "numpy.core._internal.__dtype_from_pep3118": {
     "line number": [
      598
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._fix_names": {
  "data": {
   "lineno": 746,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      749
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._gcd": {
  "data": {
   "lineno": 789
  },
  "type": "function"
 },
 "numpy.core._internal._get_void_ptr": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      279
     ]
    },
    "numpy.core._internal._unsafe_first_element_pointer": {
     "line number": [
      279
     ]
    },
    "numpy.core._internal.ctypes": {
     "line number": [
      282,
      285,
      285,
      285
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._getfield_is_safe": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      465
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._getintp_ctype": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "dtype": {
     "line number": [
      224
     ]
    },
    "numpy.core._internal.ctypes": {
     "line number": [
      220,
      226,
      228,
      230,
      232
     ]
    },
    "numpy.core._internal.dummy_ctype": {
     "line number": [
      222
     ]
    },
    "numpy.intp": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._lcm": {
  "data": {
   "lineno": 795,
   "symbols_in_volume": {
    "numpy.core._internal._gcd": {
     "line number": [
      796
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._makenames_list": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      32,
      37
     ]
    },
    "dtype": {
     "line number": [
      38
     ]
    },
    "format": {
     "line number": [
      38,
      43
     ]
    },
    "int": {
     "line number": [
      35
     ]
    },
    "isinstance": {
     "line number": [
      31
     ]
    },
    "len": {
     "line number": [
      30
     ]
    },
    "list": {
     "line number": [
      27
     ]
    },
    "tuple": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._missing_ctypes": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "object": {
     "line number": [
      239
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core._internal._missing_ctypes.c_void_p": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": {
    "object": {
     "line number": [
      243
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core._internal._missing_ctypes.c_void_p.__init__": {
  "data": {
   "lineno": 244
  },
  "type": "function"
 },
 "numpy.core._internal._missing_ctypes.cast": {
  "data": {
   "lineno": 240
  },
  "type": "function"
 },
 "numpy.core._internal._nbo": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.core._internal._newnames": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      409,
      411,
      413,
      416
     ]
    },
    "isinstance": {
     "line number": [
      402,
      405
     ]
    },
    "list": {
     "line number": [
      401,
      405,
      415
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      402
     ]
    },
    "set": {
     "line number": [
      404
     ]
    },
    "str": {
     "line number": [
      402
     ]
    },
    "tuple": {
     "line number": [
      405,
      415
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._pep3118_native_map": {
  "data": {
   "lineno": 500
  },
  "type": "constant"
 },
 "numpy.core._internal._pep3118_native_typechars": {
  "data": {
   "lineno": 525
  },
  "type": "constant"
 },
 "numpy.core._internal._pep3118_standard_map": {
  "data": {
   "lineno": 527
  },
  "type": "constant"
 },
 "numpy.core._internal._pep3118_standard_typechars": {
  "data": {
   "lineno": 550
  },
  "type": "constant"
 },
 "numpy.core._internal._pep3118_unsupported_map": {
  "data": {
   "lineno": 552
  },
  "type": "constant"
 },
 "numpy.core._internal._prod": {
  "data": {
   "lineno": 783
  },
  "type": "function"
 },
 "numpy.core._internal._reconstruct": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "dtype": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._ufunc_doc_signature_formatter": {
  "data": {
   "lineno": 840,
   "symbols_in_volume": {
    "range": {
     "line number": [
      851,
      861
     ]
    },
    "repr": {
     "line number": [
      862
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._unsafe_first_element_pointer": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": {
    "object": {
     "line number": [
      248
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core._internal._unsafe_first_element_pointer.__array_interface__": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      262
     ]
    },
    "property": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._unsafe_first_element_pointer.__init__": {
  "data": {
   "lineno": 257
  },
  "type": "function"
 },
 "numpy.core._internal._usefields": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      59
     ]
    },
    "dtype": {
     "line number": [
      76
     ]
    },
    "len": {
     "line number": [
      71
     ]
    },
    "numpy.core._internal._makenames_list": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal._view_is_safe": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      494
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core._internal.array_function_errmsg_formatter": {
  "data": {
   "lineno": 833,
   "symbols_in_volume": {
    "list": {
     "line number": [
      837
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal.array_ufunc_errmsg_formatter": {
  "data": {
   "lineno": 821,
   "symbols_in_volume": {
    "repr": {
     "line number": [
      827
     ]
    },
    "type": {
     "line number": [
      827
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal.ctypes": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.core._internal.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core._internal.dummy_ctype": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "object": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core._internal.dummy_ctype.__call__": {
  "data": {
   "lineno": 209
  },
  "type": "function"
 },
 "numpy.core._internal.dummy_ctype.__eq__": {
  "data": {
   "lineno": 211
  },
  "type": "function"
 },
 "numpy.core._internal.dummy_ctype.__init__": {
  "data": {
   "lineno": 205
  },
  "type": "function"
 },
 "numpy.core._internal.dummy_ctype.__mul__": {
  "data": {
   "lineno": 207
  },
  "type": "function"
 },
 "numpy.core._internal.dummy_ctype.__ne__": {
  "data": {
   "lineno": 213
  },
  "type": "function"
 },
 "numpy.core._internal.format_re": {
  "data": {
   "lineno": 146
  },
  "type": "constant"
 },
 "numpy.core._internal.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core._internal.npy_ctypes_check": {
  "data": {
   "lineno": 886,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      895
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._internal.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core._internal.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.core._internal.recursive": {
  "data": {
   "lineno": 899,
   "symbols_in_volume": {
    "object": {
     "line number": [
      899
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core._internal.recursive.__call__": {
  "data": {
   "lineno": 926
  },
  "type": "function"
 },
 "numpy.core._internal.recursive.__init__": {
  "data": {
   "lineno": 924
  },
  "type": "function"
 },
 "numpy.core._internal.sep_re": {
  "data": {
   "lineno": 150
  },
  "type": "constant"
 },
 "numpy.core._internal.set_module": {
  "data": {
   "shadows": "numpy.core.overrides.set_module"
  },
  "type": "import"
 },
 "numpy.core._internal.space_re": {
  "data": {
   "lineno": 151
  },
  "type": "constant"
 },
 "numpy.core._internal.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core._internal.unicode": {
  "data": {
   "shadows": "numpy.compat.unicode"
  },
  "type": "import"
 },
 "numpy.core._methods": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.umath.add.reduce": {
     "line number": [
      19
     ]
    },
    "numpy.core.umath.logical_and.reduce": {
     "line number": [
      22
     ]
    },
    "numpy.core.umath.logical_or.reduce": {
     "line number": [
      21
     ]
    },
    "numpy.core.umath.maximum.reduce": {
     "line number": [
      17
     ]
    },
    "numpy.core.umath.minimum.reduce": {
     "line number": [
      18
     ]
    },
    "numpy.core.umath.multiply.reduce": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core._methods._NoValue": {
  "data": {
   "shadows": "numpy._globals._NoValue"
  },
  "type": "import"
 },
 "numpy.core._methods._all": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "numpy.core._methods.umr_all": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._methods._amax": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "numpy._globals._NoValue": {
     "line number": [
      27
     ]
    },
    "numpy.core._methods.umr_maximum": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._methods._amin": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "numpy._globals._NoValue": {
     "line number": [
      31
     ]
    },
    "numpy.core._methods.umr_minimum": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._methods._any": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "numpy.core._methods.umr_any": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._methods._count_reduce_items": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      51
     ]
    },
    "range": {
     "line number": [
      50
     ]
    },
    "tuple": {
     "line number": [
      50,
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._methods._mean": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      65
     ]
    },
    "hasattr": {
     "line number": [
      81
     ]
    },
    "isinstance": {
     "line number": [
      76
     ]
    },
    "issubclass": {
     "line number": [
      69,
      71
     ]
    },
    "numpy.core._methods._count_reduce_items": {
     "line number": [
      62
     ]
    },
    "numpy.core._methods.umr_sum": {
     "line number": [
      75
     ]
    },
    "numpy.core._methods.warnings": {
     "line number": [
      65
     ]
    },
    "numpy.core.multiarray.dtype": {
     "line number": [
      70,
      72
     ]
    },
    "numpy.core.multiarray.ndarray": {
     "line number": [
      76
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      59
     ]
    },
    "numpy.core.numerictypes.bool_": {
     "line number": [
      69
     ]
    },
    "numpy.core.numerictypes.float16": {
     "line number": [
      71
     ]
    },
    "numpy.core.numerictypes.integer": {
     "line number": [
      69
     ]
    },
    "numpy.core.umath.true_divide": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._methods._prod": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy._globals._NoValue": {
     "line number": [
      39
     ]
    },
    "numpy.core._methods.umr_prod": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._methods._ptp": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "numpy.core._methods.umr_maximum": {
     "line number": [
      153
     ]
    },
    "numpy.core._methods.umr_minimum": {
     "line number": [
      154
     ]
    },
    "numpy.core.umath.subtract": {
     "line number": [
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._methods._std": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      144
     ]
    },
    "isinstance": {
     "line number": [
      142
     ]
    },
    "numpy.core._methods._var": {
     "line number": [
      139
     ]
    },
    "numpy.core.multiarray.ndarray": {
     "line number": [
      142
     ]
    },
    "numpy.core.umath.sqrt": {
     "line number": [
      143,
      145,
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._methods._sum": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "numpy._globals._NoValue": {
     "line number": [
      35
     ]
    },
    "numpy.core._methods.umr_sum": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._methods._var": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      97
     ]
    },
    "hasattr": {
     "line number": [
      131
     ]
    },
    "isinstance": {
     "line number": [
      108,
      128
     ]
    },
    "issubclass": {
     "line number": [
      101,
      118
     ]
    },
    "max": {
     "line number": [
      125
     ]
    },
    "numpy.core._methods._count_reduce_items": {
     "line number": [
      94
     ]
    },
    "numpy.core._methods.umr_sum": {
     "line number": [
      107,
      122
     ]
    },
    "numpy.core._methods.warnings": {
     "line number": [
      97
     ]
    },
    "numpy.core.multiarray.dtype": {
     "line number": [
      102
     ]
    },
    "numpy.core.multiarray.ndarray": {
     "line number": [
      108,
      128
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      92,
      117
     ]
    },
    "numpy.core.numerictypes.bool_": {
     "line number": [
      101
     ]
    },
    "numpy.core.numerictypes.complexfloating": {
     "line number": [
      118
     ]
    },
    "numpy.core.numerictypes.integer": {
     "line number": [
      101
     ]
    },
    "numpy.core.umath.conjugate": {
     "line number": [
      119
     ]
    },
    "numpy.core.umath.multiply": {
     "line number": [
      119,
      121
     ]
    },
    "numpy.core.umath.true_divide": {
     "line number": [
      109,
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._methods.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core._methods.asanyarray": {
  "data": {
   "shadows": "numpy.core.numeric.asanyarray"
  },
  "type": "import"
 },
 "numpy.core._methods.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core._methods.mu": {
  "data": {
   "shadows": "numpy.core.multiarray"
  },
  "type": "import"
 },
 "numpy.core._methods.nt": {
  "data": {
   "shadows": "numpy.core.numerictypes"
  },
  "type": "import"
 },
 "numpy.core._methods.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core._methods.um": {
  "data": {
   "shadows": "numpy.core.umath"
  },
  "type": "import"
 },
 "numpy.core._methods.umr_all": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.core._methods.umr_any": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.core._methods.umr_maximum": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.core._methods.umr_minimum": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.core._methods.umr_prod": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.core._methods.umr_sum": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.core._methods.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core._string_helpers": {
  "data": {
   "symbols_in_volume": {
    "chr": {
     "line number": [
      9
     ]
    },
    "numpy.core._string_helpers._all_chars": {
     "line number": [
      10,
      11,
      12,
      12,
      13,
      13
     ]
    },
    "numpy.core._string_helpers._ascii_lower": {
     "line number": [
      12
     ]
    },
    "numpy.core._string_helpers._ascii_upper": {
     "line number": [
      13
     ]
    },
    "range": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core._string_helpers.LOWER_TABLE": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.core._string_helpers.UPPER_TABLE": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.core._string_helpers._all_chars": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "numpy.core._string_helpers._ascii_lower": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "numpy.core._string_helpers._ascii_upper": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "numpy.core._string_helpers.english_capitalize": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "numpy.core._string_helpers.english_upper": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._string_helpers.english_lower": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.core._string_helpers.LOWER_TABLE": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._string_helpers.english_upper": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "numpy.core._string_helpers.UPPER_TABLE": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._type_aliases": {
  "data": {
   "symbols_in_volume": {
    "bool": {
     "line number": [
      236
     ]
    },
    "bytes": {
     "line number": [
      236
     ]
    },
    "isinstance": {
     "line number": [
      58,
      277
     ]
    },
    "list": {
     "line number": [
      113
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      236
     ]
    },
    "numpy.core._string_helpers.english_lower": {
     "line number": [
      57
     ]
    },
    "numpy.core._type_aliases.TypeNADict": {
     "line number": [
      48
     ]
    },
    "numpy.core._type_aliases._abstract_types": {
     "line number": [
      59
     ]
    },
    "numpy.core._type_aliases._add_aliases": {
     "line number": [
      152
     ]
    },
    "numpy.core._type_aliases._add_integer_aliases": {
     "line number": [
      178
     ]
    },
    "numpy.core._type_aliases._add_types": {
     "line number": [
      105
     ]
    },
    "numpy.core._type_aliases._concrete_typeinfo": {
     "line number": [
      61,
      63
     ]
    },
    "numpy.core._type_aliases._int_ctypes": {
     "line number": [
      113
     ]
    },
    "numpy.core._type_aliases._set_array_types": {
     "line number": [
      266
     ]
    },
    "numpy.core._type_aliases._set_up_aliases": {
     "line number": [
      229
     ]
    },
    "numpy.core._type_aliases._toadd": {
     "line number": [
      272,
      274,
      276,
      282
     ]
    },
    "numpy.core._type_aliases.allTypes": {
     "line number": [
      181,
      278,
      280
     ]
    },
    "numpy.core._type_aliases.k": {
     "line number": [
      59,
      61,
      63
     ]
    },
    "numpy.core._type_aliases.sctypeDict": {
     "line number": [
      278,
      280
     ]
    },
    "numpy.core._type_aliases.sys": {
     "line number": [
      271
     ]
    },
    "numpy.core._type_aliases.void": {
     "line number": [
      236
     ]
    },
    "numpy.core.multiarray.typeinfo.items": {
     "line number": [
      55
     ]
    },
    "object": {
     "line number": [
      236
     ]
    },
    "tuple": {
     "line number": [
      277
     ]
    },
    "type": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core._type_aliases.TypeNADict": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core._type_aliases.TypeNADict.__getitem__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "dict.__getitem__": {
     "line number": [
      41
     ]
    },
    "numpy._globals.VisibleDeprecationWarning": {
     "line number": [
      40
     ]
    },
    "numpy.core._type_aliases.warnings": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._type_aliases.TypeNADict.get": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "dict.get": {
     "line number": [
      46
     ]
    },
    "numpy._globals.VisibleDeprecationWarning": {
     "line number": [
      45
     ]
    },
    "numpy.core._type_aliases.warnings": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._type_aliases.VisibleDeprecationWarning": {
  "data": {
   "shadows": "numpy._globals.VisibleDeprecationWarning"
  },
  "type": "import"
 },
 "numpy.core._type_aliases._abstract_types": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "numpy.core._type_aliases._add_aliases": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "numpy.core._string_helpers.english_capitalize": {
     "line number": [
      131
     ]
    },
    "numpy.core._type_aliases._concrete_typeinfo": {
     "line number": [
      116
     ]
    },
    "numpy.core._type_aliases._int_ctypes": {
     "line number": [
      118
     ]
    },
    "numpy.core._type_aliases._uint_ctypes": {
     "line number": [
      118
     ]
    },
    "numpy.core._type_aliases.allTypes": {
     "line number": [
      128,
      139
     ]
    },
    "numpy.core._type_aliases.bitname": {
     "line number": [
      122
     ]
    },
    "numpy.core._type_aliases.sctypeDict": {
     "line number": [
      142,
      143,
      150
     ]
    },
    "numpy.core._type_aliases.sctypeNA": {
     "line number": [
      146,
      147,
      148,
      151
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._type_aliases._add_array_type": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      241
     ]
    },
    "numpy.core._type_aliases.allTypes": {
     "line number": [
      240
     ]
    },
    "numpy.core._type_aliases.sctypes": {
     "line number": [
      244
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._type_aliases._add_integer_aliases": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "numpy.core._type_aliases._concrete_typeinfo": {
     "line number": [
      157,
      158
     ]
    },
    "numpy.core._type_aliases._int_ctypes": {
     "line number": [
      156
     ]
    },
    "numpy.core._type_aliases._uint_ctypes": {
     "line number": [
      156
     ]
    },
    "numpy.core._type_aliases.allTypes": {
     "line number": [
      167
     ]
    },
    "numpy.core._type_aliases.sctypeDict": {
     "line number": [
      168,
      169,
      170
     ]
    },
    "numpy.core._type_aliases.sctypeNA": {
     "line number": [
      171,
      172,
      173,
      174
     ]
    },
    "set": {
     "line number": [
      155
     ]
    },
    "zip": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._type_aliases._add_types": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "numpy.core._type_aliases._abstract_types": {
     "line number": [
      103
     ]
    },
    "numpy.core._type_aliases._concrete_typeinfo": {
     "line number": [
      96
     ]
    },
    "numpy.core._type_aliases.allTypes": {
     "line number": [
      98,
      104
     ]
    },
    "numpy.core._type_aliases.sctypeDict": {
     "line number": [
      99,
      100,
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._type_aliases._bits_of": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "StopIteration": {
     "line number": [
      69
     ]
    },
    "ValueError": {
     "line number": [
      71
     ]
    },
    "next": {
     "line number": [
      68
     ]
    },
    "numpy.core._type_aliases._abstract_types": {
     "line number": [
      70
     ]
    },
    "numpy.core._type_aliases._concrete_typeinfo": {
     "line number": [
      68
     ]
    },
    "numpy.core.multiarray.dtype": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._type_aliases._concrete_typeinfo": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "numpy.core._type_aliases._concrete_types": {
  "data": {
   "lineno": 63
  },
  "type": "constant"
 },
 "numpy.core._type_aliases._int_ctypes": {
  "data": {
   "lineno": 112
  },
  "type": "constant"
 },
 "numpy.core._type_aliases._kind_name": {
  "data": {
   "shadows": "numpy.core._dtype._kind_name"
  },
  "type": "import"
 },
 "numpy.core._type_aliases._set_array_types": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      249,
      250,
      253,
      254
     ]
    },
    "len": {
     "line number": [
      262
     ]
    },
    "numpy.core._type_aliases._add_array_type": {
     "line number": [
      251,
      252,
      255,
      256
     ]
    },
    "numpy.core._type_aliases.sctypes": {
     "line number": [
      258,
      261,
      264,
      265
     ]
    },
    "numpy.core.multiarray.dtype": {
     "line number": [
      257,
      265
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._type_aliases._set_up_aliases": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      227
     ]
    },
    "numpy.core._type_aliases.allTypes": {
     "line number": [
      213,
      213,
      225
     ]
    },
    "numpy.core._type_aliases.sctypeDict": {
     "line number": [
      214,
      214,
      226
     ]
    },
    "numpy.core._type_aliases.sys": {
     "line number": [
      208,
      218
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._type_aliases._toadd": {
  "data": {
   "lineno": 270
  },
  "type": "constant"
 },
 "numpy.core._type_aliases._uint_ctypes": {
  "data": {
   "lineno": 113
  },
  "type": "constant"
 },
 "numpy.core._type_aliases.allTypes": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "numpy.core._type_aliases.bitname": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "numpy.core._dtype._kind_name": {
     "line number": [
      84
     ]
    },
    "numpy.core._type_aliases._bits_of": {
     "line number": [
      81
     ]
    },
    "numpy.core.multiarray.dtype": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._type_aliases.dtype": {
  "data": {
   "shadows": "numpy.core.multiarray.dtype"
  },
  "type": "import"
 },
 "numpy.core._type_aliases.english_capitalize": {
  "data": {
   "shadows": "numpy.core._string_helpers.english_capitalize"
  },
  "type": "import"
 },
 "numpy.core._type_aliases.english_lower": {
  "data": {
   "shadows": "numpy.core._string_helpers.english_lower"
  },
  "type": "import"
 },
 "numpy.core._type_aliases.k": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "numpy.core._type_aliases.sctypeDict": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "numpy.core._type_aliases.sctypeNA": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "numpy.core._type_aliases.sctypes": {
  "data": {
   "lineno": 232
  },
  "type": "constant"
 },
 "numpy.core._type_aliases.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core._type_aliases.typeinfo": {
  "data": {
   "shadows": "numpy.core.multiarray.typeinfo"
  },
  "type": "import"
 },
 "numpy.core._type_aliases.unicode": {
  "data": {
   "shadows": "numpy.compat.unicode"
  },
  "type": "import"
 },
 "numpy.core._type_aliases.void": {
  "data": {
   "lineno": 181
  },
  "type": "constant"
 },
 "numpy.core._type_aliases.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core._ufunc_reconstruct": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "__import__": {
     "line number": [
      148
     ]
    },
    "getattr": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core._ufunc_reduce": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "numpy.core._ufunc_reconstruct": {
     "line number": [
      154
     ]
    },
    "pickle.whichmodule": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.abs": {
  "data": {
   "shadows": "absolute"
  },
  "type": "import"
 },
 "numpy.core.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.arrayprint": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      33,
      38
     ]
    },
    "getattr": {
     "line number": [
      1564
     ]
    },
    "int": {
     "line number": [
      1331,
      1333
     ]
    },
    "issubclass": {
     "line number": [
      1331,
      1333
     ]
    },
    "numpy.core.arrayprint._array2string_impl": {
     "line number": [
      1566,
      1568
     ]
    },
    "numpy.core.arrayprint._array_repr_implementation": {
     "line number": [
      1567
     ]
    },
    "numpy.core.arrayprint._array_str_implementation": {
     "line number": [
      1565
     ]
    },
    "numpy.core.arrayprint._default_array_repr": {
     "line number": [
      1631
     ]
    },
    "numpy.core.arrayprint._default_array_str": {
     "line number": [
      1630
     ]
    },
    "numpy.core.arrayprint._recursive_guard": {
     "line number": [
      1496
     ]
    },
    "numpy.core.arrayprint._typelessdata": {
     "line number": [
      1332,
      1334
     ]
    },
    "numpy.core.arrayprint.array2string": {
     "line number": [
      1564,
      1564
     ]
    },
    "numpy.core.arrayprint.functools": {
     "line number": [
      1565,
      1567
     ]
    },
    "numpy.core.arrayprint.set_string_function": {
     "line number": [
      1630,
      1631
     ]
    },
    "numpy.core.arrayprint.sys": {
     "line number": [
      30
     ]
    },
    "str": {
     "line number": [
      1496
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.arrayprint.BoolFormat": {
  "data": {
   "lineno": 1148,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1148
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.BoolFormat.__call__": {
  "data": {
   "lineno": 1154
  },
  "type": "function"
 },
 "numpy.core.arrayprint.BoolFormat.__init__": {
  "data": {
   "lineno": 1149
  },
  "type": "function"
 },
 "numpy.core.arrayprint.ComplexFloatingFormat": {
  "data": {
   "lineno": 1158,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1158
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.ComplexFloatingFormat.__call__": {
  "data": {
   "lineno": 1176,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1181
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.ComplexFloatingFormat.__init__": {
  "data": {
   "lineno": 1160,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1163
     ]
    },
    "isinstance": {
     "line number": [
      1163
     ]
    },
    "numpy.core.arrayprint.FloatingFormat": {
     "line number": [
      1171,
      1173
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.ComplexFormat": {
  "data": {
   "lineno": 1187,
   "symbols_in_volume": {
    "numpy.core.arrayprint.ComplexFloatingFormat": {
     "line number": [
      1187
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.ComplexFormat.__init__": {
  "data": {
   "lineno": 1188,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1191
     ]
    },
    "numpy.core.arrayprint.ComplexFormat": {
     "line number": [
      1192
     ]
    },
    "numpy.core.arrayprint.warnings": {
     "line number": [
      1189
     ]
    },
    "super": {
     "line number": [
      1192
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.DatetimeFormat": {
  "data": {
   "lineno": 1228,
   "symbols_in_volume": {
    "numpy.core.arrayprint._TimelikeFormat": {
     "line number": [
      1228
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.DatetimeFormat.__call__": {
  "data": {
   "lineno": 1248,
   "symbols_in_volume": {
    "numpy.core.arrayprint.DatetimeFormat": {
     "line number": [
      1251
     ]
    },
    "super": {
     "line number": [
      1251
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.DatetimeFormat.__init__": {
  "data": {
   "lineno": 1229,
   "symbols_in_volume": {
    "datetime_data": {
     "line number": [
      1234
     ]
    },
    "numpy.core.arrayprint.DatetimeFormat": {
     "line number": [
      1246
     ]
    },
    "super": {
     "line number": [
      1246
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.DatetimeFormat._format_non_nat": {
  "data": {
   "lineno": 1253,
   "symbols_in_volume": {
    "datetime_as_string": {
     "line number": [
      1254
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.FloatFormat": {
  "data": {
   "lineno": 975,
   "symbols_in_volume": {
    "numpy.core.arrayprint.FloatingFormat": {
     "line number": [
      975
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.FloatFormat.__init__": {
  "data": {
   "lineno": 976,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      978
     ]
    },
    "numpy.core.arrayprint.FloatFormat": {
     "line number": [
      979
     ]
    },
    "numpy.core.arrayprint.warnings": {
     "line number": [
      977
     ]
    },
    "super": {
     "line number": [
      979
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.FloatingFormat": {
  "data": {
   "lineno": 832,
   "symbols_in_volume": {
    "object": {
     "line number": [
      832
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.FloatingFormat.__call__": {
  "data": {
   "lineno": 945,
   "symbols_in_volume": {
    "dragon4_positional": {
     "line number": [
      965
     ]
    },
    "dragon4_scientific": {
     "line number": [
      957
     ]
    },
    "errstate": {
     "line number": [
      947
     ]
    },
    "len": {
     "line number": [
      954
     ]
    },
    "numpy.core.arrayprint._format_options": {
     "line number": [
      950,
      953
     ]
    },
    "numpy.isfinite": {
     "line number": [
      946
     ]
    },
    "numpy.isnan": {
     "line number": [
      948
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.FloatingFormat.__init__": {
  "data": {
   "lineno": 834,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      837
     ]
    },
    "isinstance": {
     "line number": [
      837
     ]
    },
    "numpy.core.arrayprint._none_or_positive_arg": {
     "line number": [
      852
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.FloatingFormat.fillFormat": {
  "data": {
   "lineno": 861,
   "symbols_in_volume": {
    "absolute": {
     "line number": [
      866
     ]
    },
    "any": {
     "line number": [
      934,
      939
     ]
    },
    "dragon4_positional": {
     "line number": [
      911
     ]
    },
    "dragon4_scientific": {
     "line number": [
      886
     ]
    },
    "errstate": {
     "line number": [
      870
     ]
    },
    "isfinite": {
     "line number": [
      863
     ]
    },
    "isinf": {
     "line number": [
      939
     ]
    },
    "len": {
     "line number": [
      867,
      876,
      891,
      894,
      901,
      918,
      920,
      921,
      940,
      941
     ]
    },
    "max": {
     "line number": [
      891,
      894,
      901,
      918,
      920,
      921,
      943
     ]
    },
    "numpy.core.arrayprint._format_options": {
     "line number": [
      940,
      941
     ]
    },
    "numpy.max": {
     "line number": [
      868
     ]
    },
    "numpy.min": {
     "line number": [
      869
     ]
    },
    "numpy.signbit": {
     "line number": [
      934
     ]
    },
    "zip": {
     "line number": [
      889,
      890,
      916
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.IntegerFormat": {
  "data": {
   "lineno": 1135,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1135
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.IntegerFormat.__call__": {
  "data": {
   "lineno": 1144
  },
  "type": "function"
 },
 "numpy.core.arrayprint.IntegerFormat.__init__": {
  "data": {
   "lineno": 1136,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1138,
      1139
     ]
    },
    "max": {
     "line number": [
      1138
     ]
    },
    "numpy.max": {
     "line number": [
      1138
     ]
    },
    "numpy.min": {
     "line number": [
      1139
     ]
    },
    "str": {
     "line number": [
      1138,
      1139
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.LongComplexFormat": {
  "data": {
   "lineno": 1194,
   "symbols_in_volume": {
    "numpy.core.arrayprint.ComplexFloatingFormat": {
     "line number": [
      1194
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.LongComplexFormat.__init__": {
  "data": {
   "lineno": 1195,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1198
     ]
    },
    "numpy.core.arrayprint.LongComplexFormat": {
     "line number": [
      1199
     ]
    },
    "numpy.core.arrayprint.warnings": {
     "line number": [
      1196
     ]
    },
    "super": {
     "line number": [
      1199
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.LongFloatFormat": {
  "data": {
   "lineno": 982,
   "symbols_in_volume": {
    "numpy.core.arrayprint.FloatingFormat": {
     "line number": [
      982
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.LongFloatFormat.__init__": {
  "data": {
   "lineno": 983,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      985
     ]
    },
    "numpy.core.arrayprint.LongFloatFormat": {
     "line number": [
      986
     ]
    },
    "numpy.core.arrayprint.warnings": {
     "line number": [
      984
     ]
    },
    "super": {
     "line number": [
      986
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.StructureFormat": {
  "data": {
   "lineno": 1312,
   "symbols_in_volume": {
    "numpy.core.arrayprint.StructuredVoidFormat": {
     "line number": [
      1312
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.StructureFormat.__init__": {
  "data": {
   "lineno": 1313,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1317
     ]
    },
    "numpy.core.arrayprint.StructureFormat": {
     "line number": [
      1318
     ]
    },
    "numpy.core.arrayprint.warnings": {
     "line number": [
      1315
     ]
    },
    "super": {
     "line number": [
      1318
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.StructuredVoidFormat": {
  "data": {
   "lineno": 1275,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1275
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.StructuredVoidFormat.__call__": {
  "data": {
   "lineno": 1300,
   "symbols_in_volume": {
    "format_function": {
     "line number": [
      1302,
      1303
     ]
    },
    "len": {
     "line number": [
      1305
     ]
    },
    "zip": {
     "line number": [
      1303
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.StructuredVoidFormat.__init__": {
  "data": {
   "lineno": 1283
  },
  "type": "function"
 },
 "numpy.core.arrayprint.StructuredVoidFormat.from_data": {
  "data": {
   "lineno": 1286,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      1286
     ]
    },
    "cls": {
     "line number": [
      1298
     ]
    },
    "format_function": {
     "line number": [
      1294,
      1296,
      1296,
      1297
     ]
    },
    "numpy.core.arrayprint.SubArrayFormat": {
     "line number": [
      1296
     ]
    },
    "numpy.core.arrayprint._get_format_function": {
     "line number": [
      1294
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.SubArrayFormat": {
  "data": {
   "lineno": 1265,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1265
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.SubArrayFormat.__call__": {
  "data": {
   "lineno": 1269
  },
  "type": "function"
 },
 "numpy.core.arrayprint.SubArrayFormat.__init__": {
  "data": {
   "lineno": 1266,
   "symbols_in_volume": {
    "format_function": {
     "line number": [
      1267
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.TimedeltaFormat": {
  "data": {
   "lineno": 1260,
   "symbols_in_volume": {
    "numpy.core.arrayprint._TimelikeFormat": {
     "line number": [
      1260
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint.TimedeltaFormat._format_non_nat": {
  "data": {
   "lineno": 1261,
   "symbols_in_volume": {
    "str": {
     "line number": [
      1262
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._TimelikeFormat": {
  "data": {
   "lineno": 1202,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1202
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.arrayprint._TimelikeFormat.__call__": {
  "data": {
   "lineno": 1221,
   "symbols_in_volume": {
    "isnat": {
     "line number": [
      1222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._TimelikeFormat.__init__": {
  "data": {
   "lineno": 1203,
   "symbols_in_volume": {
    "isnat": {
     "line number": [
      1204
     ]
    },
    "len": {
     "line number": [
      1205,
      1207,
      1208,
      1211
     ]
    },
    "max": {
     "line number": [
      1207,
      1213
     ]
    },
    "numpy.max": {
     "line number": [
      1207
     ]
    },
    "numpy.min": {
     "line number": [
      1208
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._TimelikeFormat._format_non_nat": {
  "data": {
   "lineno": 1217,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      1219
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "numpy.core.arrayprint.__docformat__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "numpy.core.arrayprint._array2string": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": {
    "asarray": {
     "line number": [
      485
     ]
    },
    "len": {
     "line number": [
      501
     ]
    },
    "numpy.core.arrayprint._formatArray": {
     "line number": [
      503
     ]
    },
    "numpy.core.arrayprint._get_format_function": {
     "line number": [
      496
     ]
    },
    "numpy.core.arrayprint._leading_trailing": {
     "line number": [
      491
     ]
    },
    "numpy.core.arrayprint._recursive_guard": {
     "line number": [
      480
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._array2string_dispatcher": {
  "data": {
   "lineno": 509
  },
  "type": "function"
 },
 "numpy.core.arrayprint._array2string_impl": {
  "data": {
   "lineno": 1564
  },
  "type": "constant"
 },
 "numpy.core.arrayprint._array_repr_dispatcher": {
  "data": {
   "lineno": 1444
  },
  "type": "function"
 },
 "numpy.core.arrayprint._array_repr_implementation": {
  "data": {
   "lineno": 1397,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      1436
     ]
    },
    "len": {
     "line number": [
      1433,
      1437,
      1438,
      1439
     ]
    },
    "numpy.core.arrayprint._format_options": {
     "line number": [
      1402,
      1414,
      1435
     ]
    },
    "numpy.core.arrayprint.array2string": {
     "line number": [
      1399,
      1418
     ]
    },
    "numpy.core.arrayprint.dtype_is_implied": {
     "line number": [
      1409
     ]
    },
    "numpy.core.arrayprint.dtype_short_repr": {
     "line number": [
      1428
     ]
    },
    "repr": {
     "line number": [
      1416,
      1421
     ]
    },
    "type": {
     "line number": [
      1404,
      1405
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._array_str_dispatcher": {
  "data": {
   "lineno": 1519
  },
  "type": "function"
 },
 "numpy.core.arrayprint._array_str_implementation": {
  "data": {
   "lineno": 1499,
   "symbols_in_volume": {
    "numpy.core.arrayprint._format_options": {
     "line number": [
      1503
     ]
    },
    "numpy.core.arrayprint._guarded_str": {
     "line number": [
      1514
     ]
    },
    "numpy.core.arrayprint.array2string": {
     "line number": [
      1501,
      1516
     ]
    },
    "numpy.ndarray.__getitem__": {
     "line number": [
      1514
     ]
    },
    "str": {
     "line number": [
      1505
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._default_array_repr": {
  "data": {
   "lineno": 1567
  },
  "type": "constant"
 },
 "numpy.core.arrayprint._default_array_str": {
  "data": {
   "lineno": 1565
  },
  "type": "constant"
 },
 "numpy.core.arrayprint._extendLine": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": {
    "len": {
     "line number": [
      694,
      694,
      697,
      697
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._formatArray": {
  "data": {
   "lineno": 707,
   "symbols_in_volume": {
    "recurser": {
     "line number": [
      816,
      823
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._formatArray.recurser": {
  "data": {
   "lineno": 716,
   "symbols_in_volume": {
    "format_function": {
     "line number": [
      726
     ]
    },
    "len": {
     "line number": [
      722,
      734,
      752,
      754,
      754,
      811
     ]
    },
    "max": {
     "line number": [
      754
     ]
    },
    "numpy.core.arrayprint._extendLine": {
     "line number": [
      759,
      764,
      773,
      781
     ]
    },
    "range": {
     "line number": [
      757,
      771,
      791,
      802
     ]
    },
    "recurser": {
     "line number": [
      758,
      772,
      780,
      792,
      803,
      807
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._format_options": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "numpy.core.arrayprint._get_format_function": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      418,
      420,
      421,
      425,
      426,
      430,
      431,
      435,
      437,
      439,
      441
     ]
    },
    "numpy.core.arrayprint._get_formatdict": {
     "line number": [
      417
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._get_formatdict": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": {
    "indirect": {
     "line number": [
      392,
      395,
      398,
      401,
      404,
      407
     ]
    },
    "numpy.core.arrayprint.BoolFormat": {
     "line number": [
      365
     ]
    },
    "numpy.core.arrayprint.ComplexFloatingFormat": {
     "line number": [
      372,
      374
     ]
    },
    "numpy.core.arrayprint.DatetimeFormat": {
     "line number": [
      375
     ]
    },
    "numpy.core.arrayprint.FloatingFormat": {
     "line number": [
      368,
      370
     ]
    },
    "numpy.core.arrayprint.IntegerFormat": {
     "line number": [
      366
     ]
    },
    "numpy.core.arrayprint.TimedeltaFormat": {
     "line number": [
      376
     ]
    },
    "numpy.core.arrayprint._object_format": {
     "line number": [
      377
     ]
    },
    "numpy.core.arrayprint.repr_format": {
     "line number": [
      379
     ]
    },
    "numpy.core.arrayprint.str_format": {
     "line number": [
      378
     ]
    },
    "str": {
     "line number": [
      380
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._get_formatdict.indirect": {
  "data": {
   "lineno": 384
  },
  "type": "function"
 },
 "numpy.core.arrayprint._guarded_str": {
  "data": {
   "lineno": 1496
  },
  "type": "constant"
 },
 "numpy.core.arrayprint._leading_trailing": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": {
    "concatenate": {
     "line number": [
      336
     ]
    },
    "len": {
     "line number": [
      331
     ]
    },
    "numpy.index_exp": {
     "line number": [
      337,
      338,
      341
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._make_options_dict": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      81,
      85,
      93
     ]
    },
    "bool": {
     "line number": [
      77
     ]
    },
    "isinstance": {
     "line number": [
      92
     ]
    },
    "locals": {
     "line number": [
      74
     ]
    },
    "numpy.core.arrayprint.numbers": {
     "line number": [
      92
     ]
    },
    "numpy.core.arrayprint.warnings": {
     "line number": [
      88
     ]
    },
    "numpy.isnan": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._none_or_positive_arg": {
  "data": {
   "lineno": 825,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      829
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._nt": {
  "data": {
   "shadows": "numerictypes"
  },
  "type": "import"
 },
 "numpy.core.arrayprint._object_format": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": {
    "list": {
     "line number": [
      346
     ]
    },
    "type": {
     "line number": [
      346
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._recursive_guard": {
  "data": {
   "lineno": 450
  },
  "type": "function"
 },
 "numpy.core.arrayprint._recursive_guard.decorating_function": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": {
    "set": {
     "line number": [
      461
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._recursive_guard.decorating_function.wrapper": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": {
    "dummy_thread.get_ident": {
     "line number": [
      465
     ]
    },
    "f": {
     "line number": [
      470,
      463
     ]
    },
    "id": {
     "line number": [
      465
     ]
    },
    "numpy.core.arrayprint.functools": {
     "line number": [
      463
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint._typelessdata": {
  "data": {
   "lineno": 1330
  },
  "type": "constant"
 },
 "numpy.core.arrayprint._void_scalar_repr": {
  "data": {
   "lineno": 1321,
   "symbols_in_volume": {
    "array": {
     "line number": [
      1327
     ]
    },
    "numpy.core.arrayprint.StructuredVoidFormat": {
     "line number": [
      1327
     ]
    },
    "numpy.core.arrayprint._format_options": {
     "line number": [
      1327
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.arrayprint.array2string": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      681
     ]
    },
    "TypeError": {
     "line number": [
      663
     ]
    },
    "array_function_dispatch": {
     "line number": [
      518
     ]
    },
    "len": {
     "line number": [
      684
     ]
    },
    "numpy._NoValue": {
     "line number": [
      521,
      672,
      677
     ]
    },
    "numpy.core.arrayprint._array2string": {
     "line number": [
      690
     ]
    },
    "numpy.core.arrayprint._array2string_dispatcher": {
     "line number": [
      518
     ]
    },
    "numpy.core.arrayprint._format_options": {
     "line number": [
      668
     ]
    },
    "numpy.core.arrayprint._make_options_dict": {
     "line number": [
      665
     ]
    },
    "numpy.core.arrayprint.warnings": {
     "line number": [
      679
     ]
    },
    "repr": {
     "line number": [
      673
     ]
    },
    "style": {
     "line number": [
      676,
      677
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.array_repr": {
  "data": {
   "lineno": 1449,
   "symbols_in_volume": {
    "array_function_dispatch": {
     "line number": [
      1449
     ]
    },
    "numpy.core.arrayprint._array_repr_dispatcher": {
     "line number": [
      1449
     ]
    },
    "numpy.core.arrayprint._array_repr_implementation": {
     "line number": [
      1492
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.array_str": {
  "data": {
   "lineno": 1524,
   "symbols_in_volume": {
    "array_function_dispatch": {
     "line number": [
      1524
     ]
    },
    "numpy.core.arrayprint._array_str_dispatcher": {
     "line number": [
      1524
     ]
    },
    "numpy.core.arrayprint._array_str_implementation": {
     "line number": [
      1559
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.contextlib": {
  "data": {
   "shadows": "contextlib"
  },
  "type": "import"
 },
 "numpy.core.arrayprint.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.arrayprint.dtype_is_implied": {
  "data": {
   "lineno": 1337,
   "symbols_in_volume": {
    "numpy.core.arrayprint._format_options": {
     "line number": [
      1363
     ]
    },
    "numpy.core.arrayprint._typelessdata": {
     "line number": [
      1370
     ]
    },
    "numpy.dtype": {
     "line number": [
      1362
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.dtype_short_repr": {
  "data": {
   "lineno": 1373,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      1385
     ]
    },
    "repr": {
     "line number": [
      1392
     ]
    },
    "str": {
     "line number": [
      1384,
      1387
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.format_float_positional": {
  "data": {
   "lineno": 1058,
   "symbols_in_volume": {
    "dragon4_positional": {
     "line number": [
      1129
     ]
    },
    "numpy.core.arrayprint._none_or_positive_arg": {
     "line number": [
      1126,
      1127,
      1128
     ]
    },
    "set_module": {
     "line number": [
      1058
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.format_float_scientific": {
  "data": {
   "lineno": 989,
   "symbols_in_volume": {
    "dragon4_scientific": {
     "line number": [
      1053
     ]
    },
    "numpy.core.arrayprint._none_or_positive_arg": {
     "line number": [
      1050,
      1051,
      1052
     ]
    },
    "set_module": {
     "line number": [
      989
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.core.arrayprint.get_ident": {
  "data": {
   "shadows": "dummy_thread.get_ident"
  },
  "type": "import"
 },
 "numpy.core.arrayprint.get_printoptions": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "numpy.core.arrayprint._format_options": {
     "line number": [
      287
     ]
    },
    "set_module": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.arrayprint.numbers": {
  "data": {
   "shadows": "numbers"
  },
  "type": "import"
 },
 "numpy.core.arrayprint.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.arrayprint.printoptions": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "numpy.core.arrayprint.contextlib": {
     "line number": [
      291
     ]
    },
    "numpy.get_printoptions": {
     "line number": [
      316,
      319
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      318,
      321
     ]
    },
    "set_module": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.repr_format": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "repr": {
     "line number": [
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.set_printoptions": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      242
     ]
    },
    "numpy.core.arrayprint._format_options": {
     "line number": [
      249,
      252,
      255,
      256
     ]
    },
    "numpy.core.arrayprint._make_options_dict": {
     "line number": [
      244
     ]
    },
    "set_legacy_print_mode": {
     "line number": [
      253,
      257
     ]
    },
    "set_module": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.set_string_function": {
  "data": {
   "lineno": 1571,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1622,
      1628
     ]
    },
    "numpy.core.arrayprint._default_array_repr": {
     "line number": [
      1624
     ]
    },
    "numpy.core.arrayprint._default_array_str": {
     "line number": [
      1626
     ]
    },
    "repr": {
     "line number": [
      1623,
      1628
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.str_format": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": {
    "str": {
     "line number": [
      356
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.arrayprint.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.arrayprint.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.char": {
  "data": {
   "shadows": "defchararray"
  },
  "type": "import"
 },
 "numpy.core.copyreg": {
  "data": {
   "shadows": "copy_reg"
  },
  "type": "import"
 },
 "numpy.core.cversions": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      13
     ]
    },
    "code_generators.genapi.fullapi_hash": {
     "line number": [
      15
     ]
    },
    "code_generators.numpy_api.full_api": {
     "line number": [
      15
     ]
    },
    "os.path.dirname": {
     "line number": [
      14
     ]
    },
    "print": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.cversions.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.cversions.curdir": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "numpy.core.cversions.dirname": {
  "data": {
   "shadows": "os.path.dirname"
  },
  "type": "import"
 },
 "numpy.core.cversions.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.cversions.full_api": {
  "data": {
   "shadows": "code_generators.numpy_api.full_api"
  },
  "type": "import"
 },
 "numpy.core.cversions.fullapi_hash": {
  "data": {
   "shadows": "code_generators.genapi.fullapi_hash"
  },
  "type": "import"
 },
 "numpy.core.cversions.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.einsumfunc": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.einsumfunc.einsum_symbols": {
     "line number": [
      17
     ]
    },
    "set": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.einsumfunc.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "numpy.core.einsumfunc._can_dot": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": {
    "int": {
     "line number": [
      477
     ]
    },
    "len": {
     "line number": [
      459,
      463,
      485
     ]
    },
    "set": {
     "line number": [
      468,
      481,
      482
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.einsumfunc._compute_size_by_dict": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "numpy.core.einsumfunc._einsum_dispatcher": {
  "data": {
   "lineno": 993
  },
  "type": "function"
 },
 "numpy.core.einsumfunc._einsum_path_dispatcher": {
  "data": {
   "lineno": 693
  },
  "type": "function"
 },
 "numpy.core.einsumfunc._find_contraction": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      133
     ]
    },
    "set": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.einsumfunc._flop_count": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "max": {
     "line number": [
      52
     ]
    },
    "numpy.core.einsumfunc._compute_size_by_dict": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.einsumfunc._greedy_path": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "len": {
     "line number": [
      350,
      352,
      356,
      358,
      361,
      367,
      382,
      385,
      392,
      393,
      405
     ]
    },
    "min": {
     "line number": [
      397
     ]
    },
    "numpy.core.einsumfunc._find_contraction": {
     "line number": [
      356
     ]
    },
    "numpy.core.einsumfunc._flop_count": {
     "line number": [
      358
     ]
    },
    "numpy.core.einsumfunc._parse_possible_contraction": {
     "line number": [
      376,
      386
     ]
    },
    "numpy.core.einsumfunc._update_other_results": {
     "line number": [
      400
     ]
    },
    "numpy.core.einsumfunc.itertools": {
     "line number": [
      361,
      385
     ]
    },
    "range": {
     "line number": [
      356,
      361,
      367,
      385,
      393,
      406
     ]
    },
    "tuple": {
     "line number": [
      393
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.einsumfunc._optimal_path": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "len": {
     "line number": [
      179,
      185,
      197,
      207,
      211,
      212
     ]
    },
    "min": {
     "line number": [
      206,
      214
     ]
    },
    "numpy.core.einsumfunc._compute_size_by_dict": {
     "line number": [
      192
     ]
    },
    "numpy.core.einsumfunc._find_contraction": {
     "line number": [
      188
     ]
    },
    "numpy.core.einsumfunc._flop_count": {
     "line number": [
      197
     ]
    },
    "numpy.core.einsumfunc.itertools": {
     "line number": [
      185
     ]
    },
    "range": {
     "line number": [
      179,
      185,
      207,
      212
     ]
    },
    "tuple": {
     "line number": [
      207,
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.einsumfunc._parse_einsum_input": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": {
    "Ellipsis": {
     "line number": [
      579,
      592
     ]
    },
    "TypeError": {
     "line number": [
      584,
      597
     ]
    },
    "ValueError": {
     "line number": [
      552,
      563,
      603,
      623,
      636,
      657,
      675,
      682,
      687
     ]
    },
    "enumerate": {
     "line number": [
      577,
      620
     ]
    },
    "int": {
     "line number": [
      581,
      594
     ]
    },
    "isinstance": {
     "line number": [
      554,
      581,
      594
     ]
    },
    "len": {
     "line number": [
      551,
      569,
      573,
      576,
      630,
      686,
      686
     ]
    },
    "list": {
     "line number": [
      566,
      608
     ]
    },
    "max": {
     "line number": [
      629
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      554
     ]
    },
    "numpy.core.einsumfunc.einsum_symbols": {
     "line number": [
      562,
      582,
      595,
      656,
      674
     ]
    },
    "numpy.core.einsumfunc.einsum_symbols_set": {
     "line number": [
      608
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      556,
      574
     ]
    },
    "range": {
     "line number": [
      569
     ]
    },
    "set": {
     "line number": [
      608,
      655,
      660,
      661,
      673
     ]
    },
    "sorted": {
     "line number": [
      655,
      660,
      673
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.einsumfunc._parse_possible_contraction": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "len": {
     "line number": [
      264
     ]
    },
    "numpy.core.einsumfunc._compute_size_by_dict": {
     "line number": [
      254,
      259
     ]
    },
    "numpy.core.einsumfunc._find_contraction": {
     "line number": [
      250
     ]
    },
    "numpy.core.einsumfunc._flop_count": {
     "line number": [
      264
     ]
    },
    "sum": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.einsumfunc._update_other_results": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": {
    "int": {
     "line number": [
      304,
      304,
      305,
      305,
      309,
      309,
      309,
      309
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.einsumfunc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.einsumfunc.array_function_dispatch": {
  "data": {
   "shadows": "numpy.core.overrides.array_function_dispatch"
  },
  "type": "import"
 },
 "numpy.core.einsumfunc.asanyarray": {
  "data": {
   "shadows": "numpy.core.numeric.asanyarray"
  },
  "type": "import"
 },
 "numpy.core.einsumfunc.basestring": {
  "data": {
   "shadows": "numpy.compat.basestring"
  },
  "type": "import"
 },
 "numpy.core.einsumfunc.c_einsum": {
  "data": {
   "shadows": "numpy.core.multiarray.c_einsum"
  },
  "type": "import"
 },
 "numpy.core.einsumfunc.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.einsumfunc.einsum": {
  "data": {
   "lineno": 1002,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1358
     ]
    },
    "enumerate": {
     "line number": [
      1374
     ]
    },
    "len": {
     "line number": [
      1357,
      1379
     ]
    },
    "numpy.core.einsumfunc._einsum_dispatcher": {
     "line number": [
      1002
     ]
    },
    "numpy.core.einsumfunc.einsum_path": {
     "line number": [
      1368
     ]
    },
    "numpy.core.multiarray.c_einsum": {
     "line number": [
      1346,
      1404,
      1413
     ]
    },
    "numpy.core.numeric.tensordot": {
     "line number": [
      1398
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      1002
     ]
    },
    "sorted": {
     "line number": [
      1393
     ]
    },
    "tuple": {
     "line number": [
      1398,
      1398
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.einsumfunc.einsum_path": {
  "data": {
   "lineno": 703,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      915
     ]
    },
    "TypeError": {
     "line number": [
      818,
      845
     ]
    },
    "ValueError": {
     "line number": [
      865,
      880
     ]
    },
    "enumerate": {
     "line number": [
      862,
      868,
      920,
      983
     ]
    },
    "float": {
     "line number": [
      840
     ]
    },
    "int": {
     "line number": [
      840,
      841
     ]
    },
    "isinstance": {
     "line number": [
      831,
      839,
      840
     ]
    },
    "len": {
     "line number": [
      817,
      835,
      839,
      861,
      864,
      864,
      901,
      901,
      902,
      905,
      907,
      927,
      929,
      941,
      947,
      973
     ]
    },
    "list": {
     "line number": [
      922
     ]
    },
    "max": {
     "line number": [
      892,
      970,
      974
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      831,
      839
     ]
    },
    "numpy.core.einsumfunc._can_dot": {
     "line number": [
      942
     ]
    },
    "numpy.core.einsumfunc._compute_size_by_dict": {
     "line number": [
      890,
      930
     ]
    },
    "numpy.core.einsumfunc._einsum_path_dispatcher": {
     "line number": [
      703
     ]
    },
    "numpy.core.einsumfunc._find_contraction": {
     "line number": [
      924
     ]
    },
    "numpy.core.einsumfunc._flop_count": {
     "line number": [
      902,
      927
     ]
    },
    "numpy.core.einsumfunc._greedy_path": {
     "line number": [
      909
     ]
    },
    "numpy.core.einsumfunc._optimal_path": {
     "line number": [
      911
     ]
    },
    "numpy.core.einsumfunc._parse_einsum_input": {
     "line number": [
      851
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      703
     ]
    },
    "range": {
     "line number": [
      861,
      907
     ]
    },
    "set": {
     "line number": [
      855,
      856,
      857,
      887,
      932
     ]
    },
    "sorted": {
     "line number": [
      922,
      951
     ]
    },
    "str": {
     "line number": [
      845
     ]
    },
    "sum": {
     "line number": [
      901,
      960
     ]
    },
    "tuple": {
     "line number": [
      907,
      922
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.einsumfunc.einsum_symbols": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.core.einsumfunc.einsum_symbols_set": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.core.einsumfunc.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.core.einsumfunc.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.einsumfunc.tensordot": {
  "data": {
   "shadows": "numpy.core.numeric.tensordot"
  },
  "type": "import"
 },
 "numpy.core.env_added": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.core.function_base": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.function_base.functools": {
     "line number": [
      16
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.function_base.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.core.function_base._geomspace_dispatcher": {
  "data": {
   "lineno": 283
  },
  "type": "function"
 },
 "numpy.core.function_base._index_deprecate": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      28
     ]
    },
    "TypeError": {
     "line number": [
      23
     ]
    },
    "int": {
     "line number": [
      26
     ]
    },
    "numpy.core.function_base.operator": {
     "line number": [
      22
     ]
    },
    "numpy.core.function_base.warnings": {
     "line number": [
      28
     ]
    },
    "type": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.function_base._linspace_dispatcher": {
  "data": {
   "lineno": 32
  },
  "type": "function"
 },
 "numpy.core.function_base._logspace_dispatcher": {
  "data": {
   "lineno": 182
  },
  "type": "function"
 },
 "numpy.core.function_base._nx": {
  "data": {
   "shadows": "numeric"
  },
  "type": "import"
 },
 "numpy.core.function_base.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.function_base.add_docstring": {
  "data": {
   "shadows": "numpy.core.multiarray.add_docstring"
  },
  "type": "import"
 },
 "numpy.core.function_base.add_newdoc": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      461
     ]
    },
    "__import__": {
     "line number": [
      453
     ]
    },
    "getattr": {
     "line number": [
      453,
      457,
      460
     ]
    },
    "globals": {
     "line number": [
      453
     ]
    },
    "isinstance": {
     "line number": [
      454,
      456,
      458
     ]
    },
    "list": {
     "line number": [
      458
     ]
    },
    "numpy.core.multiarray.add_docstring": {
     "line number": [
      455,
      457,
      460
     ]
    },
    "str": {
     "line number": [
      454
     ]
    },
    "tuple": {
     "line number": [
      456
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.function_base.array_function_dispatch": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.core.function_base.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.function_base.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.core.function_base.geomspace": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      389
     ]
    },
    "asanyarray": {
     "line number": [
      386,
      387
     ]
    },
    "float": {
     "line number": [
      391
     ]
    },
    "numpy.core.function_base._geomspace_dispatcher": {
     "line number": [
      288
     ]
    },
    "numpy.core.function_base.array_function_dispatch": {
     "line number": [
      288
     ]
    },
    "numpy.core.function_base.logspace": {
     "line number": [
      422
     ]
    },
    "result_type": {
     "line number": [
      391
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.function_base.linspace": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      130
     ]
    },
    "asanyarray": {
     "line number": [
      135,
      136
     ]
    },
    "float": {
     "line number": [
      138
     ]
    },
    "numpy.core.function_base._index_deprecate": {
     "line number": [
      128
     ]
    },
    "numpy.core.function_base._linspace_dispatcher": {
     "line number": [
      37
     ]
    },
    "numpy.core.function_base.array_function_dispatch": {
     "line number": [
      37
     ]
    },
    "result_type": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.function_base.logspace": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "numpy.core.function_base._logspace_dispatcher": {
     "line number": [
      187
     ]
    },
    "numpy.core.function_base.array_function_dispatch": {
     "line number": [
      187
     ]
    },
    "numpy.core.function_base.linspace": {
     "line number": [
      277
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.function_base.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.core.function_base.overrides": {
  "data": {
   "shadows": "numpy.core.overrides"
  },
  "type": "import"
 },
 "numpy.core.function_base.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.function_base.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.generate_numpy_api": {
  "data": {},
  "type": "module"
 },
 "numpy.core.generate_numpy_api.BoolValuesApi": {
  "data": {
   "shadows": "genapi.BoolValuesApi"
  },
  "type": "import"
 },
 "numpy.core.generate_numpy_api.FunctionApi": {
  "data": {
   "shadows": "genapi.FunctionApi"
  },
  "type": "import"
 },
 "numpy.core.generate_numpy_api.GlobalVarApi": {
  "data": {
   "shadows": "genapi.GlobalVarApi"
  },
  "type": "import"
 },
 "numpy.core.generate_numpy_api.TypeApi": {
  "data": {
   "shadows": "genapi.TypeApi"
  },
  "type": "import"
 },
 "numpy.core.generate_numpy_api.c_api_header": {
  "data": {
   "lineno": 151
  },
  "type": "constant"
 },
 "numpy.core.generate_numpy_api.c_template": {
  "data": {
   "lineno": 141
  },
  "type": "constant"
 },
 "numpy.core.generate_numpy_api.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.generate_numpy_api.do_generate_api": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      226
     ]
    },
    "genapi.BoolValuesApi": {
     "line number": [
      217
     ]
    },
    "genapi.FunctionApi": {
     "line number": [
      207
     ]
    },
    "genapi.GlobalVarApi": {
     "line number": [
      213
     ]
    },
    "genapi.TypeApi": {
     "line number": [
      221
     ]
    },
    "len": {
     "line number": [
      223,
      223
     ]
    },
    "numpy.core.generate_numpy_api.c_api_header": {
     "line number": [
      248
     ]
    },
    "numpy.core.generate_numpy_api.c_template": {
     "line number": [
      244
     ]
    },
    "numpy.core.generate_numpy_api.genapi": {
     "line number": [
      191,
      192,
      194,
      198,
      233,
      241,
      245,
      252
     ]
    },
    "numpy.core.generate_numpy_api.h_template": {
     "line number": [
      240
     ]
    },
    "set": {
     "line number": [
      224,
      225
     ]
    },
    "type": {
     "line number": [
      212,
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.generate_numpy_api.genapi": {
  "data": {
   "shadows": "genapi"
  },
  "type": "import"
 },
 "numpy.core.generate_numpy_api.generate_api": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "numpy.core.generate_numpy_api.do_generate_api": {
     "line number": [
      170
     ]
    },
    "numpy.core.generate_numpy_api.genapi": {
     "line number": [
      167
     ]
    },
    "numpy.core.generate_numpy_api.numpy_api": {
     "line number": [
      165,
      167
     ]
    },
    "numpy.core.generate_numpy_api.os": {
     "line number": [
      160,
      161,
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.generate_numpy_api.h_template": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.core.generate_numpy_api.numpy_api": {
  "data": {
   "shadows": "numpy_api"
  },
  "type": "import"
 },
 "numpy.core.generate_numpy_api.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.core.generate_numpy_api.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.getlimits": {
  "data": {
   "symbols_in_volume": {
    "dict": {
     "line number": [
      70,
      74,
      78,
      82
     ]
    },
    "numpy.core.getlimits._title_fmt": {
     "line number": [
      73,
      77,
      81,
      85
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.getlimits.MachArLike": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "object": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.getlimits.MachArLike.__init__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "array": {
     "line number": [
      41,
      43
     ]
    },
    "float_conv": {
     "line number": [
      42,
      54
     ]
    },
    "float_to_float": {
     "line number": [
      47,
      48,
      49,
      50,
      54
     ]
    },
    "float_to_str": {
     "line number": [
      55,
      56,
      57,
      58,
      59
     ]
    },
    "int": {
     "line number": [
      53
     ]
    },
    "log10": {
     "line number": [
      53
     ]
    },
    "numpy.core.getlimits._fr0": {
     "line number": [
      43
     ]
    },
    "numpy.core.getlimits._fr1": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.getlimits._KNOWN_TYPES": {
  "data": {
   "lineno": 91
  },
  "type": "constant"
 },
 "numpy.core.getlimits._MACHAR_PARAMS": {
  "data": {
   "lineno": 69
  },
  "type": "constant"
 },
 "numpy.core.getlimits.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.core.getlimits._convert_to_float": {
  "data": {
   "lineno": 61
  },
  "type": "constant"
 },
 "numpy.core.getlimits._discovered_machar": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "MachAr": {
     "line number": [
      286
     ]
    },
    "array": {
     "line number": [
      286,
      288,
      289
     ]
    },
    "ftype": {
     "line number": [
      285,
      286,
      288,
      289
     ]
    },
    "numpy.core.getlimits._MACHAR_PARAMS": {
     "line number": [
      285
     ]
    },
    "numpy.core.getlimits._fr0": {
     "line number": [
      287,
      288,
      289
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.getlimits._float_ma": {
  "data": {
   "lineno": 94
  },
  "type": "constant"
 },
 "numpy.core.getlimits._fr0": {
  "data": {
   "lineno": 19
  },
  "type": "function"
 },
 "numpy.core.getlimits._fr1": {
  "data": {
   "lineno": 27
  },
  "type": "function"
 },
 "numpy.core.getlimits._get_machar": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      278
     ]
    },
    "ValueError": {
     "line number": [
      264
     ]
    },
    "ftype": {
     "line number": [
      266,
      270,
      277,
      279
     ]
    },
    "numpy.core.getlimits._KNOWN_TYPES": {
     "line number": [
      267,
      271
     ]
    },
    "numpy.core.getlimits._MACHAR_PARAMS": {
     "line number": [
      262
     ]
    },
    "numpy.core.getlimits._discovered_machar": {
     "line number": [
      279
     ]
    },
    "numpy.core.getlimits.warnings": {
     "line number": [
      275
     ]
    },
    "repr": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.getlimits._register_known_types": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "exp2": {
     "line number": [
      110,
      111,
      129,
      130,
      132,
      159,
      160,
      174,
      186,
      187,
      201,
      226,
      227,
      229
     ]
    },
    "f16": {
     "line number": [
      110,
      111,
      112,
      113
     ]
    },
    "f32": {
     "line number": [
      129,
      130,
      131,
      132
     ]
    },
    "f64": {
     "line number": [
      152
     ]
    },
    "hasattr": {
     "line number": [
      214
     ]
    },
    "ld": {
     "line number": [
      159,
      160,
      163,
      163,
      164,
      174,
      186,
      187,
      190,
      190,
      191,
      201,
      213,
      213,
      216,
      226,
      227,
      229
     ]
    },
    "numpy.core.getlimits.MachArLike": {
     "line number": [
      100,
      119,
      140,
      164,
      191,
      216
     ]
    },
    "numpy.core.getlimits._float_ma": {
     "line number": [
      115,
      134,
      155,
      183,
      207,
      236
     ]
    },
    "numpy.core.getlimits._register_type": {
     "line number": [
      114,
      133,
      154,
      179,
      181,
      206,
      231,
      234
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.getlimits._register_type": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "numpy.core.getlimits._KNOWN_TYPES": {
     "line number": [
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.getlimits._title_fmt": {
  "data": {
   "lineno": 68
  },
  "type": "constant"
 },
 "numpy.core.getlimits.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.getlimits.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.getlimits.finfo": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": {
    "object": {
     "line number": [
      294
     ]
    },
    "set_module": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.getlimits.finfo.__new__": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      368
     ]
    },
    "ValueError": {
     "line number": [
      381
     ]
    },
    "issubclass": {
     "line number": [
      380,
      385
     ]
    },
    "numpy.core.getlimits._convert_to_float": {
     "line number": [
      386
     ]
    },
    "object.__new__": {
     "line number": [
      393
     ]
    },
    "type": {
     "line number": [
      370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.getlimits.finfo.__repr__": {
  "data": {
   "lineno": 436
  },
  "type": "function"
 },
 "numpy.core.getlimits.finfo.__str__": {
  "data": {
   "lineno": 422
  },
  "type": "function"
 },
 "numpy.core.getlimits.finfo._init": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      405,
      407
     ]
    },
    "numpy.core.getlimits._get_machar": {
     "line number": [
      400
     ]
    },
    "setattr": {
     "line number": [
      405,
      407
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.getlimits.iinfo": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": {
    "max": {
     "line number": [
      534,
      534
     ]
    },
    "min": {
     "line number": [
      520,
      520
     ]
    },
    "object": {
     "line number": [
      445
     ]
    },
    "property": {
     "line number": [
      520,
      534
     ]
    },
    "set_module": {
     "line number": [
      444
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.getlimits.iinfo.__init__": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      500
     ]
    },
    "ValueError": {
     "line number": [
      506
     ]
    },
    "type": {
     "line number": [
      501
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.getlimits.iinfo.__repr__": {
  "data": {
   "lineno": 547
  },
  "type": "function"
 },
 "numpy.core.getlimits.iinfo.__str__": {
  "data": {
   "lineno": 536
  },
  "type": "function"
 },
 "numpy.core.getlimits.iinfo.max": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      526
     ]
    },
    "int": {
     "line number": [
      528,
      530
     ]
    },
    "numpy.core.getlimits.iinfo": {
     "line number": [
      525,
      531
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.getlimits.iinfo.min": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      515
     ]
    },
    "int": {
     "line number": [
      516
     ]
    },
    "numpy.core.getlimits.iinfo": {
     "line number": [
      514,
      517
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.getlimits.ntypes": {
  "data": {
   "shadows": "numerictypes"
  },
  "type": "import"
 },
 "numpy.core.getlimits.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.getlimits.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.glob": {
  "data": {
   "shadows": "glob"
  },
  "type": "import"
 },
 "numpy.core.info": {
  "data": {},
  "type": "module"
 },
 "numpy.core.info.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.info.depends": {
  "data": {
   "lineno": 86
  },
  "type": "constant"
 },
 "numpy.core.info.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.info.global_symbols": {
  "data": {
   "lineno": 87
  },
  "type": "constant"
 },
 "numpy.core.info.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.libs_path": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.core.machar": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      343
     ]
    },
    "numpy.core.machar.MachAr": {
     "line number": [
      344
     ]
    },
    "print": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.machar.MachAr": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "numpy.core.overrides.set_module": {
     "line number": [
      18
     ]
    },
    "object": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.machar.MachAr.__init__": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "float": {
     "line number": [
      100,
      101
     ]
    },
    "int": {
     "line number": [
      100
     ]
    },
    "numpy.core.numeric.errstate": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.machar.MachAr.__str__": {
  "data": {
   "lineno": 329
  },
  "type": "function"
 },
 "numpy.core.machar.MachAr._do_init": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      135,
      144,
      159,
      170,
      195,
      198,
      213,
      241,
      269
     ]
    },
    "abs": {
     "line number": [
      233,
      259
     ]
    },
    "float_conv": {
     "line number": [
      121,
      146
     ]
    },
    "float_to_float": {
     "line number": [
      301,
      304,
      309,
      312,
      323,
      326
     ]
    },
    "float_to_str": {
     "line number": [
      302,
      305,
      310,
      313,
      327
     ]
    },
    "int": {
     "line number": [
      323
     ]
    },
    "int_conv": {
     "line number": [
      140
     ]
    },
    "locals": {
     "line number": [
      196
     ]
    },
    "numpy.core.fromnumeric.any": {
     "line number": [
      132,
      141,
      156,
      167,
      173,
      177,
      189,
      208,
      219,
      233,
      233,
      236,
      259,
      259,
      262,
      262,
      285,
      288
     ]
    },
    "numpy.core.machar.math": {
     "line number": [
      323
     ]
    },
    "range": {
     "line number": [
      128,
      137,
      151,
      163,
      184,
      187,
      206,
      228,
      254,
      292
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.machar.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "numpy.core.machar.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.machar.any": {
  "data": {
   "shadows": "numpy.core.fromnumeric.any"
  },
  "type": "import"
 },
 "numpy.core.machar.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.machar.errstate": {
  "data": {
   "shadows": "numpy.core.numeric.errstate"
  },
  "type": "import"
 },
 "numpy.core.machar.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "numpy.core.machar.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.machar.set_module": {
  "data": {
   "shadows": "numpy.core.overrides.set_module"
  },
  "type": "import"
 },
 "numpy.core.max": {
  "data": {
   "shadows": "amax"
  },
  "type": "import"
 },
 "numpy.core.memmap": {
  "data": {},
  "type": "module"
 },
 "numpy.core.memmap.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "numpy.core.memmap.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.memmap.basestring": {
  "data": {
   "shadows": "numpy.compat.basestring"
  },
  "type": "import"
 },
 "numpy.core.memmap.contextlib_nullcontext": {
  "data": {
   "shadows": "numpy.compat.contextlib_nullcontext"
  },
  "type": "import"
 },
 "numpy.core.memmap.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.memmap.dtypedescr": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.core.memmap.is_pathlib_path": {
  "data": {
   "shadows": "numpy.compat.is_pathlib_path"
  },
  "type": "import"
 },
 "numpy.core.memmap.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.core.memmap.memmap": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "numpy.core.overrides.set_module": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.memmap.memmap.__array_finalize__": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      286
     ]
    },
    "numpy.may_share_memory": {
     "line number": [
      286
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.memmap.memmap.__array_wrap__": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "numpy.core.memmap.memmap": {
     "line number": [
      316,
      321
     ]
    },
    "numpy.ndarray": {
     "line number": [
      328
     ]
    },
    "super": {
     "line number": [
      316
     ]
    },
    "type": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.memmap.memmap.__getitem__": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": {
    "numpy.core.memmap.memmap": {
     "line number": [
      331,
      332
     ]
    },
    "super": {
     "line number": [
      331
     ]
    },
    "type": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.memmap.memmap.__new__": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      214
     ]
    },
    "ValueError": {
     "line number": [
      216,
      220,
      236
     ]
    },
    "bytes": {
     "line number": [
      234,
      235,
      238,
      247,
      249,
      250,
      262,
      264
     ]
    },
    "hasattr": {
     "line number": [
      222,
      276
     ]
    },
    "isinstance": {
     "line number": [
      241,
      276
     ]
    },
    "list": {
     "line number": [
      217
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      276
     ]
    },
    "numpy.compat.contextlib_nullcontext": {
     "line number": [
      223
     ]
    },
    "numpy.compat.is_pathlib_path": {
     "line number": [
      272
     ]
    },
    "numpy.compat.long": {
     "line number": [
      247
     ]
    },
    "numpy.compat.os_fspath": {
     "line number": [
      225
     ]
    },
    "numpy.core.memmap.dtypedescr": {
     "line number": [
      230
     ]
    },
    "numpy.core.memmap.mmap": {
     "line number": [
      255,
      257,
      259,
      261,
      264
     ]
    },
    "numpy.core.memmap.mode_equivalents": {
     "line number": [
      213,
      217
     ]
    },
    "numpy.core.memmap.valid_filemodes": {
     "line number": [
      215,
      217
     ]
    },
    "numpy.intp": {
     "line number": [
      243
     ]
    },
    "open": {
     "line number": [
      225
     ]
    },
    "tuple": {
     "line number": [
      241
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.memmap.memmap.flush": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.memmap.mmap": {
  "data": {
   "shadows": "mmap"
  },
  "type": "import"
 },
 "numpy.core.memmap.mode_equivalents": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.core.memmap.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.memmap.os.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "numpy.core.memmap.os_fspath": {
  "data": {
   "shadows": "numpy.compat.os_fspath"
  },
  "type": "import"
 },
 "numpy.core.memmap.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.memmap.set_module": {
  "data": {
   "shadows": "numpy.core.overrides.set_module"
  },
  "type": "import"
 },
 "numpy.core.memmap.valid_filemodes": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.core.memmap.writeable_filemodes": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "numpy.core.min": {
  "data": {
   "shadows": "amin"
  },
  "type": "import"
 },
 "numpy.core.msg": {
  "data": {
   "lineno": 87
  },
  "type": "constant"
 },
 "numpy.core.multiarray": {
  "data": {
   "symbols_in_volume": {
    "numpy.core._multiarray_umath._reconstruct.__module__": {
     "line number": [
      44
     ]
    },
    "numpy.core.multiarray.functools": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.multiarray._ARRAY_API": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._ARRAY_API"
  },
  "type": "import"
 },
 "numpy.core.multiarray.__all__": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.core.multiarray._fastCopyAndTranspose": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._fastCopyAndTranspose"
  },
  "type": "import"
 },
 "numpy.core.multiarray._flagdict": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._flagdict"
  },
  "type": "import"
 },
 "numpy.core.multiarray._insert": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._insert"
  },
  "type": "import"
 },
 "numpy.core.multiarray._monotonicity": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._monotonicity"
  },
  "type": "import"
 },
 "numpy.core.multiarray._reconstruct": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._reconstruct"
  },
  "type": "import"
 },
 "numpy.core.multiarray._vec_string": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._vec_string"
  },
  "type": "import"
 },
 "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
  "data": {
   "lineno": 68
  },
  "type": "constant"
 },
 "numpy.core.multiarray.bincount": {
  "data": {
   "lineno": 839,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      839
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.busday_count": {
  "data": {
   "lineno": 1437,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      1437
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.busday_offset": {
  "data": {
   "lineno": 1343,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      1343
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.can_cast": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      459
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.concatenate": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "list": {
     "line number": [
      220
     ]
    },
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.copyto": {
  "data": {
   "lineno": 1029,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      1029
     ]
    },
    "numpy.core.multiarray.where": {
     "line number": [
      1061
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.datetime_as_string": {
  "data": {
   "lineno": 1505,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      1505
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.dot": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      693
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.empty_like": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.core.multiarray.inner": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.is_busday": {
  "data": {
   "lineno": 1289,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      1289
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.lexsort": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      453
     ]
    },
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      377
     ]
    },
    "tuple": {
     "line number": [
      453
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.may_share_memory": {
  "data": {
   "lineno": 1248,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      1248
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.min_scalar_type": {
  "data": {
   "lineno": 570,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      570
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.multiarray.packbits": {
  "data": {
   "lineno": 1109,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      1109
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.putmask": {
  "data": {
   "lineno": 1064,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      1064
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.ravel_multi_index": {
  "data": {
   "lineno": 915,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      915
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.result_type": {
  "data": {
   "lineno": 621,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      621
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.shares_memory": {
  "data": {
   "lineno": 1204,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      1204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.unpackbits": {
  "data": {
   "lineno": 1157,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      1157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.unravel_index": {
  "data": {
   "lineno": 976,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1025
     ]
    },
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      976
     ]
    },
    "numpy.core.multiarray.warnings": {
     "line number": [
      1024
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.vdot": {
  "data": {
   "lineno": 781,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      781
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.multiarray.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.multiarray.where": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": {
    "numpy.core.multiarray.array_function_from_c_func_and_dispatcher": {
     "line number": [
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.nt": {
  "data": {
   "shadows": "numerictypes"
  },
  "type": "import"
 },
 "numpy.core.numeric": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      7,
      49
     ]
    },
    "bool_": {
     "line number": [
      3079,
      3080
     ]
    },
    "numpy.core.numeric.__all__": {
     "line number": [
      93
     ]
    },
    "numpy.core.numeric._errdict": {
     "line number": [
      2653
     ]
    },
    "numpy.core.numeric._setdef": {
     "line number": [
      3075
     ]
    },
    "numpy.core.numeric._unspecified": {
     "line number": [
      2992
     ]
    },
    "numpy.core.numeric.extend_all": {
     "line number": [
      3097,
      3098,
      3099,
      3100
     ]
    },
    "numpy.core.numeric.functools": {
     "line number": [
      60
     ]
    },
    "numpy.core.numeric.sys": {
     "line number": [
      28,
      45,
      46,
      92,
      1899
     ]
    },
    "str": {
     "line number": [
      53
     ]
    },
    "type": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.numeric.ComplexWarning": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      97
     ]
    },
    "set_module": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.numeric.False_": {
  "data": {
   "lineno": 3079
  },
  "type": "constant"
 },
 "numpy.core.numeric.True_": {
  "data": {
   "lineno": 3080
  },
  "type": "constant"
 },
 "numpy.core.numeric._Unspecified": {
  "data": {
   "lineno": 2992
  },
  "type": "constant"
 },
 "numpy.core.numeric.__all__": {
  "data": {
   "lineno": 72
  },
  "type": "constant"
 },
 "numpy.core.numeric._allclose_dispatcher": {
  "data": {
   "lineno": 2351
  },
  "type": "function"
 },
 "numpy.core.numeric._argwhere_dispatcher": {
  "data": {
   "lineno": 838
  },
  "type": "function"
 },
 "numpy.core.numeric._array_equal_dispatcher": {
  "data": {
   "lineno": 2547
  },
  "type": "function"
 },
 "numpy.core.numeric._array_equiv_dispatcher": {
  "data": {
   "lineno": 2594
  },
  "type": "function"
 },
 "numpy.core.numeric._convolve_dispatcher": {
  "data": {
   "lineno": 1013
  },
  "type": "function"
 },
 "numpy.core.numeric._correlate_dispatcher": {
  "data": {
   "lineno": 940
  },
  "type": "function"
 },
 "numpy.core.numeric._count_nonzero_dispatcher": {
  "data": {
   "lineno": 402
  },
  "type": "function"
 },
 "numpy.core.numeric._cross_dispatcher": {
  "data": {
   "lineno": 1697
  },
  "type": "function"
 },
 "numpy.core.numeric._errdict": {
  "data": {
   "lineno": 2646
  },
  "type": "constant"
 },
 "numpy.core.numeric._errdict_rev": {
  "data": {
   "lineno": 2653
  },
  "type": "constant"
 },
 "numpy.core.numeric._flatnonzero_dispatcher": {
  "data": {
   "lineno": 884
  },
  "type": "function"
 },
 "numpy.core.numeric._frombuffer": {
  "data": {
   "lineno": 2031,
   "symbols_in_volume": {
    "frombuffer": {
     "line number": [
      2032
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric._full_like_dispatcher": {
  "data": {
   "lineno": 340
  },
  "type": "function"
 },
 "numpy.core.numeric._isclose_dispatcher": {
  "data": {
   "lineno": 2427
  },
  "type": "function"
 },
 "numpy.core.numeric._maketup": {
  "data": {
   "lineno": 2307,
   "symbols_in_volume": {
    "dtype": {
     "line number": [
      2308
     ]
    },
    "tuple": {
     "line number": [
      2315
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric._mode_from_name": {
  "data": {
   "lineno": 934,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      935
     ]
    },
    "numpy.core.numeric._mode_from_name_dict": {
     "line number": [
      936
     ]
    },
    "numpy.core.numeric.basestring": {
     "line number": [
      935
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric._mode_from_name_dict": {
  "data": {
   "lineno": 929
  },
  "type": "constant"
 },
 "numpy.core.numeric._move_axis_to_0": {
  "data": {
   "lineno": 1693,
   "symbols_in_volume": {
    "numpy.core.numeric.moveaxis": {
     "line number": [
      1694
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric._moveaxis_dispatcher": {
  "data": {
   "lineno": 1616
  },
  "type": "function"
 },
 "numpy.core.numeric._ones_like_dispatcher": {
  "data": {
   "lineno": 228
  },
  "type": "function"
 },
 "numpy.core.numeric._outer_dispatcher": {
  "data": {
   "lineno": 1117
  },
  "type": "function"
 },
 "numpy.core.numeric._roll_dispatcher": {
  "data": {
   "lineno": 1397
  },
  "type": "function"
 },
 "numpy.core.numeric._rollaxis_dispatcher": {
  "data": {
   "lineno": 1491
  },
  "type": "function"
 },
 "numpy.core.numeric._setdef": {
  "data": {
   "lineno": 3069
  },
  "type": "function"
 },
 "numpy.core.numeric._tensordot_dispatcher": {
  "data": {
   "lineno": 1206
  },
  "type": "function"
 },
 "numpy.core.numeric._unspecified": {
  "data": {
   "lineno": 2988,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2988
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.numeric._zeros_like_dispatcher": {
  "data": {
   "lineno": 108
  },
  "type": "function"
 },
 "numpy.core.numeric.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.numeric.allclose": {
  "data": {
   "lineno": 2355,
   "symbols_in_volume": {
    "all": {
     "line number": [
      2423
     ]
    },
    "bool": {
     "line number": [
      2424
     ]
    },
    "numpy.core.numeric._allclose_dispatcher": {
     "line number": [
      2355
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      2355
     ]
    },
    "numpy.core.numeric.isclose": {
     "line number": [
      2423
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.argwhere": {
  "data": {
   "lineno": 842,
   "symbols_in_volume": {
    "nonzero": {
     "line number": [
      881
     ]
    },
    "numpy.core.numeric._argwhere_dispatcher": {
     "line number": [
      842
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      842
     ]
    },
    "transpose": {
     "line number": [
      881
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.array_equal": {
  "data": {
   "lineno": 2551,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      2587
     ]
    },
    "bool": {
     "line number": [
      2591
     ]
    },
    "numpy.core.numeric._array_equal_dispatcher": {
     "line number": [
      2551
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      2551
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      2586,
      2586,
      2591
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.array_equiv": {
  "data": {
   "lineno": 2598,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      2636,
      2640
     ]
    },
    "bool": {
     "line number": [
      2643
     ]
    },
    "numpy.core.numeric._array_equiv_dispatcher": {
     "line number": [
      2598
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      2598
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      2635,
      2635,
      2643
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.array_function_dispatch": {
  "data": {
   "lineno": 60
  },
  "type": "constant"
 },
 "numpy.core.numeric.asanyarray": {
  "data": {
   "lineno": 541,
   "symbols_in_volume": {
    "array": {
     "line number": [
      591
     ]
    },
    "set_module": {
     "line number": [
      541
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.asarray": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": {
    "array": {
     "line number": [
      538
     ]
    },
    "set_module": {
     "line number": [
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.ascontiguousarray": {
  "data": {
   "lineno": 594,
   "symbols_in_volume": {
    "array": {
     "line number": [
      632
     ]
    },
    "set_module": {
     "line number": [
      594
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.asfortranarray": {
  "data": {
   "lineno": 635,
   "symbols_in_volume": {
    "array": {
     "line number": [
      673
     ]
    },
    "set_module": {
     "line number": [
      635
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.base_repr": {
  "data": {
   "lineno": 2223,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2264,
      2266
     ]
    },
    "abs": {
     "line number": [
      2268
     ]
    },
    "len": {
     "line number": [
      2263
     ]
    },
    "reversed": {
     "line number": [
      2277
     ]
    },
    "set_module": {
     "line number": [
      2223
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.basestring": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "numpy.core.numeric.binary_repr": {
  "data": {
   "lineno": 2112,
   "symbols_in_volume": {
    "bin": {
     "line number": [
      2195,
      2204,
      2207,
      2215
     ]
    },
    "len": {
     "line number": [
      2196,
      2207,
      2216
     ]
    },
    "max": {
     "line number": [
      2198,
      2218
     ]
    },
    "set_module": {
     "line number": [
      2112
     ]
    },
    "warn_if_insufficient": {
     "line number": [
      2199,
      2219
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.binary_repr.warn_if_insufficient": {
  "data": {
   "lineno": 2184,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      2188
     ]
    },
    "numpy.core.numeric.warnings": {
     "line number": [
      2186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.bitwise_not": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "numpy.core.numeric.builtins": {
  "data": {
   "shadows": "__builtin__"
  },
  "type": "import"
 },
 "numpy.core.numeric.collections_abc": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "numpy.core.numeric.convolve": {
  "data": {
   "lineno": 1017,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1110,
      1112
     ]
    },
    "array": {
     "line number": [
      1106,
      1106
     ]
    },
    "len": {
     "line number": [
      1107,
      1107,
      1109,
      1111
     ]
    },
    "numpy.core.numeric._convolve_dispatcher": {
     "line number": [
      1017
     ]
    },
    "numpy.core.numeric._mode_from_name": {
     "line number": [
      1113
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      1017
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.correlate": {
  "data": {
   "lineno": 944,
   "symbols_in_volume": {
    "numpy.core.numeric._correlate_dispatcher": {
     "line number": [
      944
     ]
    },
    "numpy.core.numeric._mode_from_name": {
     "line number": [
      1009
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      944
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.count_nonzero": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      464
     ]
    },
    "numpy.character": {
     "line number": [
      461
     ]
    },
    "numpy.core.numeric._count_nonzero_dispatcher": {
     "line number": [
      406
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      406
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      458
     ]
    },
    "numpy.intp": {
     "line number": [
      466
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      461
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.cross": {
  "data": {
   "lineno": 1701,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1829
     ]
    },
    "array": {
     "line number": [
      1877
     ]
    },
    "broadcast": {
     "line number": [
      1832
     ]
    },
    "empty": {
     "line number": [
      1838
     ]
    },
    "len": {
     "line number": [
      1836
     ]
    },
    "multiply": {
     "line number": [
      1857,
      1865,
      1866,
      1868,
      1876,
      1879,
      1880,
      1882,
      1883,
      1890,
      1892,
      1893
     ]
    },
    "negative": {
     "line number": [
      1867,
      1891
     ]
    },
    "normalize_axis_index": {
     "line number": [
      1820,
      1821,
      1836
     ]
    },
    "numpy.core.numeric._cross_dispatcher": {
     "line number": [
      1701
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      1701
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      1817,
      1818
     ]
    },
    "numpy.core.numeric.moveaxis": {
     "line number": [
      1824,
      1825,
      1896
     ]
    },
    "promote_types": {
     "line number": [
      1837
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.numeric.errstate": {
  "data": {
   "lineno": 2995,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2996
     ]
    },
    "set_module": {
     "line number": [
      2995
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.numeric.errstate.__enter__": {
  "data": {
   "lineno": 3058,
   "symbols_in_volume": {
    "numpy.core.numeric._Unspecified": {
     "line number": [
      3060
     ]
    },
    "numpy.core.numeric.seterr": {
     "line number": [
      3059
     ]
    },
    "numpy.core.numeric.seterrcall": {
     "line number": [
      3061
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.errstate.__exit__": {
  "data": {
   "lineno": 3063,
   "symbols_in_volume": {
    "numpy.core.numeric._Unspecified": {
     "line number": [
      3065
     ]
    },
    "numpy.core.numeric.seterr": {
     "line number": [
      3064
     ]
    },
    "numpy.core.numeric.seterrcall": {
     "line number": [
      3066
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.errstate.__init__": {
  "data": {
   "lineno": 3054,
   "symbols_in_volume": {
    "numpy.core.numeric._Unspecified": {
     "line number": [
      3055
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.extend_all": {
  "data": {
   "lineno": 3083,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      3085
     ]
    },
    "numpy.core.numeric.__all__": {
     "line number": [
      3084,
      3088
     ]
    },
    "set": {
     "line number": [
      3084
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.eye": {
  "data": {
   "shadows": "numpy.eye"
  },
  "type": "import"
 },
 "numpy.core.numeric.fastCopyAndTranspose": {
  "data": {
   "shadows": "_fastCopyAndTranspose"
  },
  "type": "import"
 },
 "numpy.core.numeric.flatnonzero": {
  "data": {
   "lineno": 888,
   "symbols_in_volume": {
    "numpy.core.numeric._flatnonzero_dispatcher": {
     "line number": [
      888
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      888
     ]
    },
    "numpy.nonzero": {
     "line number": [
      926
     ]
    },
    "numpy.ravel": {
     "line number": [
      926
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.fromfunction": {
  "data": {
   "lineno": 1974,
   "symbols_in_volume": {
    "float": {
     "line number": [
      2026
     ]
    },
    "function": {
     "line number": [
      2028
     ]
    },
    "numpy.core.numeric.indices": {
     "line number": [
      2027
     ]
    },
    "set_module": {
     "line number": [
      1974
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.full": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": {
    "array": {
     "line number": [
      334
     ]
    },
    "empty": {
     "line number": [
      335
     ]
    },
    "set_module": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.full_like": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": {
    "empty_like": {
     "line number": [
      397
     ]
    },
    "numpy.core.numeric._full_like_dispatcher": {
     "line number": [
      344
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.core.numeric.getbufsize": {
  "data": {
   "lineno": 2835,
   "symbols_in_volume": {
    "set_module": {
     "line number": [
      2835
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.geterr": {
  "data": {
   "lineno": 2758,
   "symbols_in_volume": {
    "numpy.core.numeric._errdict_rev": {
     "line number": [
      2800,
      2802,
      2804,
      2806
     ]
    },
    "set_module": {
     "line number": [
      2758
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.geterrcall": {
  "data": {
   "lineno": 2942,
   "symbols_in_volume": {
    "set_module": {
     "line number": [
      2942
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.identity": {
  "data": {
   "lineno": 2318,
   "symbols_in_volume": {
    "dtype": {
     "line number": [
      2348
     ]
    },
    "numpy.eye": {
     "line number": [
      2348
     ]
    },
    "set_module": {
     "line number": [
      2318
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.indices": {
  "data": {
   "lineno": 1902,
   "symbols_in_volume": {
    "arange": {
     "line number": [
      1968
     ]
    },
    "empty": {
     "line number": [
      1966
     ]
    },
    "enumerate": {
     "line number": [
      1967
     ]
    },
    "int": {
     "line number": [
      1903
     ]
    },
    "len": {
     "line number": [
      1964
     ]
    },
    "set_module": {
     "line number": [
      1902
     ]
    },
    "tuple": {
     "line number": [
      1963
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.isclose": {
  "data": {
   "lineno": 2431,
   "symbols_in_volume": {
    "all": {
     "line number": [
      2523,
      2523
     ]
    },
    "array": {
     "line number": [
      2519
     ]
    },
    "isfinite": {
     "line number": [
      2521,
      2522
     ]
    },
    "isnan": {
     "line number": [
      2539,
      2539
     ]
    },
    "numpy.core.numeric._isclose_dispatcher": {
     "line number": [
      2431
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      2431
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      2512,
      2513
     ]
    },
    "numpy.core.numeric.ones_like": {
     "line number": [
      2531,
      2532
     ]
    },
    "numpy.core.numeric.zeros_like": {
     "line number": [
      2527
     ]
    },
    "within_tol": {
     "line number": [
      2524,
      2534
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.isclose.within_tol": {
  "data": {
   "lineno": 2508,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      2510,
      2510
     ]
    },
    "less_equal": {
     "line number": [
      2510
     ]
    },
    "numpy.core.numeric.errstate": {
     "line number": [
      2509
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.isfortran": {
  "data": {
   "lineno": 775,
   "symbols_in_volume": {
    "set_module": {
     "line number": [
      775
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.isscalar": {
  "data": {
   "lineno": 2035,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2107,
      2109
     ]
    },
    "numpy.core.numeric.numbers": {
     "line number": [
      2109
     ]
    },
    "set_module": {
     "line number": [
      2035
     ]
    },
    "type": {
     "line number": [
      2108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.core.numeric.little_endian": {
  "data": {
   "lineno": 1899
  },
  "type": "constant"
 },
 "numpy.core.numeric.load": {
  "data": {
   "lineno": 2280,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      2297
     ]
    },
    "cPickle.load": {
     "line number": [
      2300
     ]
    },
    "isinstance": {
     "line number": [
      2298
     ]
    },
    "numpy.core.numeric.warnings": {
     "line number": [
      2295
     ]
    },
    "open": {
     "line number": [
      2299
     ]
    },
    "type": {
     "line number": [
      2298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.loads": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      68
     ]
    },
    "cPickle.loads": {
     "line number": [
      69
     ]
    },
    "numpy.core.numeric.warnings": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.moveaxis": {
  "data": {
   "lineno": 1620,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      1673
     ]
    },
    "ValueError": {
     "line number": [
      1680
     ]
    },
    "len": {
     "line number": [
      1679,
      1679
     ]
    },
    "numpy.core.numeric._moveaxis_dispatcher": {
     "line number": [
      1620
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      1620
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      1674
     ]
    },
    "numpy.core.numeric.normalize_axis_tuple": {
     "line number": [
      1677,
      1678
     ]
    },
    "range": {
     "line number": [
      1683
     ]
    },
    "sorted": {
     "line number": [
      1685
     ]
    },
    "transpose": {
     "line number": [
      1672,
      1675,
      1688
     ]
    },
    "zip": {
     "line number": [
      1685
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.newaxis": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "numpy.core.numeric.normalize_axis_tuple": {
  "data": {
   "lineno": 1557,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1604
     ]
    },
    "ValueError": {
     "line number": [
      1610,
      1612
     ]
    },
    "len": {
     "line number": [
      1608,
      1608
     ]
    },
    "list": {
     "line number": [
      1601
     ]
    },
    "normalize_axis_index": {
     "line number": [
      1607
     ]
    },
    "numpy.core.numeric.operator": {
     "line number": [
      1603
     ]
    },
    "set": {
     "line number": [
      1608
     ]
    },
    "tuple": {
     "line number": [
      1601,
      1607
     ]
    },
    "type": {
     "line number": [
      1601
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.numeric.numbers": {
  "data": {
   "shadows": "numbers"
  },
  "type": "import"
 },
 "numpy.core.numeric.ones": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "empty": {
     "line number": [
      223
     ]
    },
    "set_module": {
     "line number": [
      175
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.ones_like": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "empty_like": {
     "line number": [
      288
     ]
    },
    "numpy.core.numeric._ones_like_dispatcher": {
     "line number": [
      232
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.core.numeric.outer": {
  "data": {
   "lineno": 1121,
   "symbols_in_volume": {
    "multiply": {
     "line number": [
      1203
     ]
    },
    "numpy.core.numeric._outer_dispatcher": {
     "line number": [
      1121
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      1121
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      1201,
      1202
     ]
    },
    "numpy.core.numeric.newaxis": {
     "line number": [
      1203,
      1203
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.pickle": {
  "data": {
   "shadows": "cPickle"
  },
  "type": "import"
 },
 "numpy.core.numeric.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.numeric.require": {
  "data": {
   "lineno": 676,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      758
     ]
    },
    "array": {
     "line number": [
      766
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      746
     ]
    },
    "set_module": {
     "line number": [
      676
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.roll": {
  "data": {
   "lineno": 1401,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1469
     ]
    },
    "broadcast": {
     "line number": [
      1467
     ]
    },
    "empty_like": {
     "line number": [
      1483
     ]
    },
    "numpy.core.numeric._roll_dispatcher": {
     "line number": [
      1401
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      1401
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      1461
     ]
    },
    "numpy.core.numeric.itertools": {
     "line number": [
      1484
     ]
    },
    "numpy.core.numeric.normalize_axis_tuple": {
     "line number": [
      1466
     ]
    },
    "range": {
     "line number": [
      1471
     ]
    },
    "slice": {
     "line number": [
      1475,
      1475,
      1480,
      1480,
      1481,
      1481
     ]
    },
    "zip": {
     "line number": [
      1485
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.rollaxis": {
  "data": {
   "lineno": 1495,
   "symbols_in_volume": {
    "AxisError": {
     "line number": [
      1545
     ]
    },
    "list": {
     "line number": [
      1551
     ]
    },
    "normalize_axis_index": {
     "line number": [
      1540
     ]
    },
    "numpy.core.numeric._rollaxis_dispatcher": {
     "line number": [
      1495
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      1495
     ]
    },
    "range": {
     "line number": [
      1551
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.setbufsize": {
  "data": {
   "lineno": 2810,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2822,
      2824,
      2826
     ]
    },
    "numpy.core.numeric.getbufsize": {
     "line number": [
      2829
     ]
    },
    "set_module": {
     "line number": [
      2810
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.seterr": {
  "data": {
   "lineno": 2656,
   "symbols_in_volume": {
    "all": {
     "line number": [
      2740,
      2742,
      2744,
      2746
     ]
    },
    "numpy.core.numeric._errdict": {
     "line number": [
      2748,
      2749,
      2750,
      2751
     ]
    },
    "numpy.core.numeric.geterr": {
     "line number": [
      2737
     ]
    },
    "set_module": {
     "line number": [
      2656
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.seterrcall": {
  "data": {
   "lineno": 2849,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2934
     ]
    },
    "collections.Callable": {
     "line number": [
      2932,
      2933
     ]
    },
    "hasattr": {
     "line number": [
      2933
     ]
    },
    "isinstance": {
     "line number": [
      2932,
      2933
     ]
    },
    "numpy.core.numeric.geterrcall": {
     "line number": [
      2936
     ]
    },
    "set_module": {
     "line number": [
      2849
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.numeric.tensordot": {
  "data": {
   "lineno": 1210,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1335
     ]
    },
    "TypeError": {
     "line number": [
      1343,
      1349
     ]
    },
    "ValueError": {
     "line number": [
      1371
     ]
    },
    "dot": {
     "line number": [
      1393
     ]
    },
    "int": {
     "line number": [
      1380,
      1388
     ]
    },
    "iter": {
     "line number": [
      1334
     ]
    },
    "len": {
     "line number": [
      1341,
      1347
     ]
    },
    "list": {
     "line number": [
      1336,
      1337,
      1342,
      1348
     ]
    },
    "multiply.reduce": {
     "line number": [
      1380,
      1388
     ]
    },
    "numpy.core.numeric._tensordot_dispatcher": {
     "line number": [
      1210
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      1210
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      1353,
      1353
     ]
    },
    "range": {
     "line number": [
      1336,
      1337,
      1362,
      1375,
      1383
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.numeric.ufunc": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "numpy.core.numeric.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.numeric.zeros_like": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "empty_like": {
     "line number": [
      168
     ]
    },
    "numpy.core.numeric._zeros_like_dispatcher": {
     "line number": [
      112
     ]
    },
    "numpy.core.numeric.array_function_dispatch": {
     "line number": [
      112
     ]
    },
    "zeros": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.core.overrides": {
  "data": {
   "symbols_in_volume": {
    "bool": {
     "line number": [
      11
     ]
    },
    "int": {
     "line number": [
      12
     ]
    },
    "numpy.core._multiarray_umath._get_implementing_args": {
     "line number": [
      51
     ]
    },
    "numpy.core._multiarray_umath.add_docstring": {
     "line number": [
      15,
      50
     ]
    },
    "numpy.core._multiarray_umath.implement_array_function": {
     "line number": [
      16
     ]
    },
    "numpy.core.overrides.collections": {
     "line number": [
      68
     ]
    },
    "numpy.core.overrides.os": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.overrides.ArgSpec": {
  "data": {
   "lineno": 68
  },
  "type": "constant"
 },
 "numpy.core.overrides.ENABLE_ARRAY_FUNCTION": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "numpy.core.overrides._get_implementing_args": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._get_implementing_args"
  },
  "type": "import"
 },
 "numpy.core.overrides.add_docstring": {
  "data": {
   "shadows": "numpy.core._multiarray_umath.add_docstring"
  },
  "type": "import"
 },
 "numpy.core.overrides.array_function_dispatch": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "numpy.core.overrides.ENABLE_ARRAY_FUNCTION": {
     "line number": [
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.overrides.array_function_dispatch.decorator": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "numpy.core._multiarray_umath.add_docstring": {
     "line number": [
      159
     ]
    },
    "numpy.core.overrides.verify_matching_signatures": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.overrides.array_function_dispatch.decorator.public_api": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "dispatcher": {
     "line number": [
      163
     ]
    },
    "numpy.core._multiarray_umath.implement_array_function": {
     "line number": [
      164
     ]
    },
    "numpy.core.overrides.functools": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.overrides.array_function_from_dispatcher": {
  "data": {
   "lineno": 179
  },
  "type": "function"
 },
 "numpy.core.overrides.array_function_from_dispatcher.decorator": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "dispatcher": {
     "line number": [
      185
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.overrides.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "numpy.core.overrides.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.core.overrides.getargspec": {
  "data": {
   "shadows": "numpy.compat._inspect.getargspec"
  },
  "type": "import"
 },
 "numpy.core.overrides.implement_array_function": {
  "data": {
   "shadows": "numpy.core._multiarray_umath.implement_array_function"
  },
  "type": "import"
 },
 "numpy.core.overrides.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.core.overrides.set_module": {
  "data": {
   "lineno": 93
  },
  "type": "function"
 },
 "numpy.core.overrides.set_module.decorator": {
  "data": {
   "lineno": 104
  },
  "type": "function"
 },
 "numpy.core.overrides.verify_matching_signatures": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      84,
      89
     ]
    },
    "bool": {
     "line number": [
      79,
      80
     ]
    },
    "len": {
     "line number": [
      82,
      83,
      88
     ]
    },
    "numpy.compat._inspect.getargspec": {
     "line number": [
      73,
      74
     ]
    },
    "numpy.core.overrides.ArgSpec": {
     "line number": [
      73,
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.path": {
  "data": {
   "lineno": 86
  },
  "type": "constant"
 },
 "numpy.core.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.rec": {
  "data": {
   "shadows": "records"
  },
  "type": "import"
 },
 "numpy.core.records": {
  "data": {},
  "type": "module"
 },
 "numpy.core.records.__all__": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "numpy.core.records._byteorderconv": {
  "data": {
   "lineno": 55
  },
  "type": "constant"
 },
 "numpy.core.records.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.records.array": {
  "data": {
   "lineno": 813,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      820,
      839,
      875
     ]
    },
    "dict": {
     "line number": [
      874
     ]
    },
    "getattr": {
     "line number": [
      873
     ]
    },
    "isinstance": {
     "line number": [
      818,
      842,
      845,
      846,
      851,
      863,
      874
     ]
    },
    "list": {
     "line number": [
      845,
      846
     ]
    },
    "numpy.compat.bytes": {
     "line number": [
      842
     ]
    },
    "numpy.compat.isfileobj": {
     "line number": [
      818,
      860
     ]
    },
    "numpy.core.records.format_parser": {
     "line number": [
      827
     ]
    },
    "numpy.core.records.fromarrays": {
     "line number": [
      849
     ]
    },
    "numpy.core.records.fromfile": {
     "line number": [
      861
     ]
    },
    "numpy.core.records.fromrecords": {
     "line number": [
      847
     ]
    },
    "numpy.core.records.fromstring": {
     "line number": [
      843
     ]
    },
    "numpy.core.records.ndarray": {
     "line number": [
      863
     ]
    },
    "numpy.core.records.recarray": {
     "line number": [
      840,
      851,
      870,
      879
     ]
    },
    "str": {
     "line number": [
      818
     ]
    },
    "tuple": {
     "line number": [
      845,
      846
     ]
    },
    "type": {
     "line number": [
      818
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.bytes": {
  "data": {
   "shadows": "numpy.compat.bytes"
  },
  "type": "import"
 },
 "numpy.core.records.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.records.find_duplicate": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "len": {
     "line number": [
      80
     ]
    },
    "list": {
     "line number": [
      80,
      81,
      81,
      82,
      83
     ]
    },
    "range": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.format_parser": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "numpy.core.overrides.set_module": {
     "line number": [
      87
     ]
    },
    "object": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.records.format_parser.__init__": {
  "data": {
   "lineno": 148
  },
  "type": "function"
 },
 "numpy.core.records.format_parser._createdescr": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "numpy.core.records._byteorderconv": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.format_parser._parseFormats": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      158
     ]
    },
    "isinstance": {
     "line number": [
      159
     ]
    },
    "len": {
     "line number": [
      160,
      171
     ]
    },
    "list": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.format_parser._setfieldnames": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "NameError": {
     "line number": [
      183
     ]
    },
    "ValueError": {
     "line number": [
      198
     ]
    },
    "isinstance": {
     "line number": [
      180
     ]
    },
    "len": {
     "line number": [
      193,
      206,
      207
     ]
    },
    "list": {
     "line number": [
      178
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      180
     ]
    },
    "numpy.core.records.find_duplicate": {
     "line number": [
      196
     ]
    },
    "range": {
     "line number": [
      193
     ]
    },
    "repr": {
     "line number": [
      183
     ]
    },
    "str": {
     "line number": [
      180
     ]
    },
    "tuple": {
     "line number": [
      178
     ]
    },
    "type": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.fromarrays": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      603,
      617,
      629
     ]
    },
    "enumerate": {
     "line number": [
      625
     ]
    },
    "int": {
     "line number": [
      594
     ]
    },
    "isinstance": {
     "line number": [
      594,
      602
     ]
    },
    "len": {
     "line number": [
      616,
      616,
      621,
      634
     ]
    },
    "numpy.core.records.format_parser": {
     "line number": [
      611
     ]
    },
    "numpy.core.records.ndarray": {
     "line number": [
      602
     ]
    },
    "numpy.core.records.recarray": {
     "line number": [
      631
     ]
    },
    "range": {
     "line number": [
      634
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.fromfile": {
  "data": {
   "lineno": 737,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      807
     ]
    },
    "TypeError": {
     "line number": [
      763
     ]
    },
    "ValueError": {
     "line number": [
      800
     ]
    },
    "int": {
     "line number": [
      767
     ]
    },
    "isinstance": {
     "line number": [
      767
     ]
    },
    "list": {
     "line number": [
      792
     ]
    },
    "numpy.compat.isfileobj": {
     "line number": [
      770
     ]
    },
    "numpy.compat.long": {
     "line number": [
      767
     ]
    },
    "numpy.compat.os_fspath": {
     "line number": [
      775
     ]
    },
    "numpy.core.records.format_parser": {
     "line number": [
      785
     ]
    },
    "numpy.core.records.get_remaining_size": {
     "line number": [
      780
     ]
    },
    "numpy.core.records.recarray": {
     "line number": [
      804
     ]
    },
    "open": {
     "line number": [
      775
     ]
    },
    "tuple": {
     "line number": [
      794
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.fromrecords": {
  "data": {
   "lineno": 639,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      697
     ]
    },
    "TypeError": {
     "line number": [
      682
     ]
    },
    "ValueError": {
     "line number": [
      682,
      688
     ]
    },
    "int": {
     "line number": [
      685
     ]
    },
    "isinstance": {
     "line number": [
      685
     ]
    },
    "len": {
     "line number": [
      684,
      687
     ]
    },
    "numpy.compat.long": {
     "line number": [
      685
     ]
    },
    "numpy.core.records.format_parser": {
     "line number": [
      678
     ]
    },
    "numpy.core.records.fromarrays": {
     "line number": [
      672
     ]
    },
    "numpy.core.records.recarray": {
     "line number": [
      689,
      703
     ]
    },
    "numpy.core.records.record": {
     "line number": [
      676
     ]
    },
    "numpy.core.records.warnings": {
     "line number": [
      694
     ]
    },
    "object": {
     "line number": [
      670
     ]
    },
    "range": {
     "line number": [
      671,
      690
     ]
    },
    "tuple": {
     "line number": [
      691
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.fromstring": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      714
     ]
    },
    "len": {
     "line number": [
      723
     ]
    },
    "numpy.core.records.format_parser": {
     "line number": [
      719
     ]
    },
    "numpy.core.records.recarray": {
     "line number": [
      725
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.get_remaining_size": {
  "data": {
   "lineno": 728,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      731
     ]
    },
    "numpy.core.records.os": {
     "line number": [
      732,
      733
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.isfileobj": {
  "data": {
   "shadows": "numpy.compat.isfileobj"
  },
  "type": "import"
 },
 "numpy.core.records.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.core.records.ndarray": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "numpy.core.records.nt": {
  "data": {
   "shadows": "numerictypes"
  },
  "type": "import"
 },
 "numpy.core.records.numfmt": {
  "data": {
   "lineno": 75
  },
  "type": "constant"
 },
 "numpy.core.records.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.core.records.os_fspath": {
  "data": {
   "shadows": "numpy.compat.os_fspath"
  },
  "type": "import"
 },
 "numpy.core.records.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.records.recarray": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      413
     ]
    },
    "numpy.core.records.ndarray": {
     "line number": [
      305
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.records.recarray.__array_finalize__": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": {
    "numpy.core.records.record": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.recarray.__getattribute__": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      445,
      453
     ]
    },
    "KeyError": {
     "line number": [
      452
     ]
    },
    "TypeError": {
     "line number": [
      452
     ]
    },
    "issubclass": {
     "line number": [
      463
     ]
    },
    "numpy.core.records.ndarray": {
     "line number": [
      449,
      467
     ]
    },
    "object.__getattribute__": {
     "line number": [
      444
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.recarray.__getitem__": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      510
     ]
    },
    "issubclass": {
     "line number": [
      513
     ]
    },
    "numpy.core.records.ndarray": {
     "line number": [
      510,
      517
     ]
    },
    "numpy.core.records.recarray": {
     "line number": [
      506
     ]
    },
    "super": {
     "line number": [
      506
     ]
    },
    "type": {
     "line number": [
      512
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.recarray.__new__": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": {
    "numpy.core.records.format_parser": {
     "line number": [
      423
     ]
    },
    "numpy.core.records.ndarray": {
     "line number": [
      426,
      428
     ]
    },
    "numpy.core.records.record": {
     "line number": [
      426,
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.recarray.__repr__": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": {
    "get_printoptions": {
     "line number": [
      552
     ]
    },
    "issubclass": {
     "line number": [
      526
     ]
    },
    "len": {
     "line number": [
      551
     ]
    },
    "numpy.core.records.record": {
     "line number": [
      525,
      532
     ]
    },
    "repr": {
     "line number": [
      549
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.recarray.__setattr__": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      502
     ]
    },
    "Exception": {
     "line number": [
      483,
      497
     ]
    },
    "KeyError": {
     "line number": [
      501
     ]
    },
    "TypeError": {
     "line number": [
      501
     ]
    },
    "exctype": {
     "line number": [
      487
     ]
    },
    "issubclass": {
     "line number": [
      477
     ]
    },
    "numpy.core.records.ndarray": {
     "line number": [
      484,
      489
     ]
    },
    "numpy.core.records.record": {
     "line number": [
      478
     ]
    },
    "numpy.core.records.sys": {
     "line number": [
      486
     ]
    },
    "object.__delattr__": {
     "line number": [
      496
     ]
    },
    "object.__setattr__": {
     "line number": [
      482
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.recarray.field": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": {
    "int": {
     "line number": [
      557
     ]
    },
    "isinstance": {
     "line number": [
      557
     ]
    },
    "numpy.core.records.ndarray": {
     "line number": [
      558,
      561,
      569
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.record": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.records.record.__getattribute__": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      244,
      254,
      261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.record.__getitem__": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      282
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.record.__repr__": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "get_printoptions": {
     "line number": [
      230
     ]
    },
    "numpy.core.records.record": {
     "line number": [
      232
     ]
    },
    "super": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.record.__setattr__": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      266,
      275
     ]
    },
    "getattr": {
     "line number": [
      272
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.record.__str__": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "get_printoptions": {
     "line number": [
      235
     ]
    },
    "numpy.core.records.record": {
     "line number": [
      237
     ]
    },
    "str": {
     "line number": [
      236
     ]
    },
    "super": {
     "line number": [
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.record.pprint": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      294
     ]
    },
    "len": {
     "line number": [
      292
     ]
    },
    "max": {
     "line number": [
      292
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.records.sb": {
  "data": {
   "shadows": "numeric"
  },
  "type": "import"
 },
 "numpy.core.records.set_module": {
  "data": {
   "shadows": "numpy.core.overrides.set_module"
  },
  "type": "import"
 },
 "numpy.core.records.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.records.unicode": {
  "data": {
   "shadows": "numpy.compat.unicode"
  },
  "type": "import"
 },
 "numpy.core.records.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.round": {
  "data": {
   "shadows": "round_"
  },
  "type": "import"
 },
 "numpy.core.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      972
     ]
    },
    "numpy.core.setup.NPY_RELAXED_STRIDES_CHECKING": {
     "line number": [
      27
     ]
    },
    "numpy.core.setup.configuration": {
     "line number": [
      974
     ]
    },
    "numpy.core.setup.os": {
     "line number": [
      21,
      26
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      974
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.setup.CallOnceOnly": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "object": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.setup.CallOnceOnly.__init__": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "numpy.core.setup.CallOnceOnly.check_complex": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "numpy.core.setup.check_complex": {
     "line number": [
      63
     ]
    },
    "numpy.core.setup.copy": {
     "line number": [
      66
     ]
    },
    "numpy.core.setup.pickle": {
     "line number": [
      64,
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.CallOnceOnly.check_ieee_macros": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "numpy.core.setup.check_ieee_macros": {
     "line number": [
      55
     ]
    },
    "numpy.core.setup.copy": {
     "line number": [
      58
     ]
    },
    "numpy.core.setup.pickle": {
     "line number": [
      56,
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.CallOnceOnly.check_types": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "numpy.core.setup.check_types": {
     "line number": [
      47
     ]
    },
    "numpy.core.setup.copy": {
     "line number": [
      50
     ]
    },
    "numpy.core.setup.pickle": {
     "line number": [
      48,
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.core.setup.NPY_RELAXED_STRIDES_CHECKING": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.core.setup.NPY_RELAXED_STRIDES_DEBUG": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "numpy.core.setup.check_complex": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      191
     ]
    },
    "check_prec": {
     "line number": [
      218,
      219,
      220
     ]
    },
    "numpy.core.setup.os": {
     "line number": [
      188
     ]
    },
    "numpy.core.setup.warnings": {
     "line number": [
      189
     ]
    },
    "type2def": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.check_complex.check_prec": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      208
     ]
    },
    "fname2def": {
     "line number": [
      214,
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.check_ieee_macros": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": {
    "_add_decl": {
     "line number": [
      257
     ]
    },
    "fname2def": {
     "line number": [
      240,
      246
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.check_ieee_macros._add_decl": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": {
    "fname2def": {
     "line number": [
      231,
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.check_math_capabilities": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "SystemError": {
     "line number": [
      136
     ]
    },
    "check_funcs": {
     "line number": [
      151,
      180,
      181
     ]
    },
    "check_funcs_once": {
     "line number": [
      135
     ]
    },
    "fname2def": {
     "line number": [
      147,
      156,
      161,
      163,
      165,
      172,
      177
     ]
    },
    "len": {
     "line number": [
      160,
      162
     ]
    },
    "numpy.core.setup.os": {
     "line number": [
      155
     ]
    },
    "str": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.check_math_capabilities.check_func": {
  "data": {
   "lineno": 109
  },
  "type": "function"
 },
 "numpy.core.setup.check_math_capabilities.check_funcs": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "check_func": {
     "line number": [
      127
     ]
    },
    "check_funcs_once": {
     "line number": [
      124
     ]
    },
    "fname2def": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.check_math_capabilities.check_funcs_once": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      114
     ]
    },
    "fname2def": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.check_mathlib": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": {
    "EnvironmentError": {
     "line number": [
      374
     ]
    },
    "numpy.core.setup.os": {
     "line number": [
      366
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.check_types": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      356
     ]
    },
    "SystemError": {
     "line number": [
      279,
      301,
      312,
      323,
      334,
      345,
      353
     ]
    },
    "numpy.core.setup.pythonlib_dir": {
     "line number": [
      327,
      339
     ]
    },
    "numpy.core.setup.sys": {
     "line number": [
      277
     ]
    },
    "sym2def": {
     "line number": [
      293,
      295,
      295,
      299,
      304,
      308,
      310,
      321,
      331,
      332,
      342,
      343,
      351
     ]
    },
    "type": {
     "line number": [
      292,
      293,
      295,
      295,
      297,
      297,
      299,
      301,
      303,
      304,
      306,
      306,
      308,
      309,
      310,
      312,
      317,
      317,
      319,
      321,
      325,
      326,
      328,
      331,
      332,
      334
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.configuration": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": {
    "check_api_version": {
     "line number": [
      401
     ]
    },
    "dict": {
     "line number": [
      654
     ]
    },
    "generate_api_func": {
     "line number": [
      604,
      605
     ]
    },
    "is_released": {
     "line number": [
      396
     ]
    },
    "numpy._build_utils.apple_accelerate.get_sgemv_fix": {
     "line number": [
      767
     ]
    },
    "numpy._build_utils.apple_accelerate.uses_accelerate_framework": {
     "line number": [
      766
     ]
    },
    "numpy.compat.npy_load_module": {
     "line number": [
      405
     ]
    },
    "numpy.core.setup.CallOnceOnly": {
     "line number": [
      410
     ]
    },
    "numpy.core.setup.os": {
     "line number": [
      654
     ]
    },
    "numpy.core.setup.platform": {
     "line number": [
      683
     ]
    },
    "numpy.core.setup.sys": {
     "line number": [
      619
     ]
    },
    "numpy.core.setup.warnings": {
     "line number": [
      397
     ]
    },
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      392
     ]
    },
    "numpy.distutils.misc_util.dot_join": {
     "line number": [
      404
     ]
    },
    "numpy.distutils.system_info.get_info": {
     "line number": [
      758
     ]
    },
    "os.path.join": {
     "line number": [
      394,
      403,
      607,
      608,
      609,
      612,
      613,
      614,
      615,
      628,
      629,
      630,
      644,
      675,
      676,
      677,
      678,
      679,
      701,
      702,
      703,
      704,
      705,
      706,
      707,
      708,
      719,
      720,
      721,
      722,
      730,
      731,
      732,
      733,
      734,
      735,
      736,
      737,
      738,
      739,
      740,
      741,
      742,
      743,
      744,
      745,
      749,
      750,
      751,
      752,
      753,
      754,
      755,
      763,
      764,
      776,
      777,
      778,
      779,
      780,
      781,
      782,
      783,
      784,
      785,
      786,
      787,
      788,
      789,
      790,
      791,
      792,
      793,
      794,
      795,
      796,
      797,
      798,
      799,
      800,
      801,
      802,
      803,
      804,
      805,
      806,
      807,
      808,
      809,
      810,
      811,
      812,
      813,
      814,
      815,
      816,
      817,
      818,
      819,
      820,
      826,
      827,
      828,
      829,
      830,
      831,
      832,
      833,
      834,
      835,
      836,
      837,
      838,
      839,
      840,
      841,
      842,
      843,
      844,
      845,
      846,
      847,
      848,
      849,
      850,
      851,
      852,
      853,
      854,
      855,
      856,
      857,
      858,
      859,
      860,
      861,
      862,
      863,
      864,
      865,
      866,
      867,
      868,
      869,
      870,
      871,
      892,
      893,
      894,
      895,
      896,
      897,
      898,
      899,
      900,
      901,
      902,
      903,
      904,
      905,
      910,
      911,
      912,
      913,
      914,
      915,
      916,
      917,
      926,
      927,
      941,
      948,
      955,
      963
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.configuration.generate_api_func": {
  "data": {
   "lineno": 589
  },
  "type": "function"
 },
 "numpy.core.setup.configuration.generate_api_func.generate_api": {
  "data": {
   "lineno": 590,
   "symbols_in_volume": {
    "__import__": {
     "line number": [
      594
     ]
    },
    "numpy.core.setup.os": {
     "line number": [
      596
     ]
    },
    "numpy.core.setup.sys": {
     "line number": [
      592,
      598
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      595
     ]
    },
    "os.path.join": {
     "line number": [
      591
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.configuration.generate_config_h": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": {
    "check_long_double_representation": {
     "line number": [
      456
     ]
    },
    "distutils.dep_util.newer": {
     "line number": [
      418
     ]
    },
    "hasattr": {
     "line number": [
      507
     ]
    },
    "isinstance": {
     "line number": [
      466
     ]
    },
    "len": {
     "line number": [
      499
     ]
    },
    "numpy.core.setup.NPY_RELAXED_STRIDES_CHECKING": {
     "line number": [
      448
     ]
    },
    "numpy.core.setup.NPY_RELAXED_STRIDES_DEBUG": {
     "line number": [
      452
     ]
    },
    "numpy.core.setup.check_math_capabilities": {
     "line number": [
      429
     ]
    },
    "numpy.core.setup.check_mathlib": {
     "line number": [
      426
     ]
    },
    "numpy.core.setup.is_npy_no_signal": {
     "line number": [
      434
     ]
    },
    "numpy.core.setup.os": {
     "line number": [
      414,
      415,
      416,
      438,
      510
     ]
    },
    "numpy.core.setup.sys": {
     "line number": [
      438,
      460
     ]
    },
    "numpy.core.setup.win32_checks": {
     "line number": [
      439
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      420
     ]
    },
    "open": {
     "line number": [
      464,
      489,
      495
     ]
    },
    "os.path.join": {
     "line number": [
      413
     ]
    },
    "print": {
     "line number": [
      488,
      490,
      492
     ]
    },
    "str": {
     "line number": [
      466
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.configuration.generate_numpyconfig_h": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": {
    "distutils.dep_util.newer": {
     "line number": [
      527
     ]
    },
    "isinstance": {
     "line number": [
      567
     ]
    },
    "numpy.core.setup.NPY_RELAXED_STRIDES_CHECKING": {
     "line number": [
      546
     ]
    },
    "numpy.core.setup.NPY_RELAXED_STRIDES_DEBUG": {
     "line number": [
      549
     ]
    },
    "numpy.core.setup.check_mathlib": {
     "line number": [
      542
     ]
    },
    "numpy.core.setup.is_npy_no_signal": {
     "line number": [
      534
     ]
    },
    "numpy.core.setup.is_npy_no_smp": {
     "line number": [
      537
     ]
    },
    "numpy.core.setup.os": {
     "line number": [
      524,
      525,
      526
     ]
    },
    "numpy.core.setup.visibility_define": {
     "line number": [
      557
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      529
     ]
    },
    "open": {
     "line number": [
      565,
      582
     ]
    },
    "os.path.join": {
     "line number": [
      520,
      521,
      523
     ]
    },
    "print": {
     "line number": [
      581,
      583,
      585
     ]
    },
    "str": {
     "line number": [
      567
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.configuration.generate_umath_c": {
  "data": {
   "lineno": 878,
   "symbols_in_volume": {
    "dir": {
     "line number": [
      880,
      881,
      882
     ]
    },
    "distutils.dep_util.newer": {
     "line number": [
      884
     ]
    },
    "numpy.core.setup.os": {
     "line number": [
      880,
      881,
      882
     ]
    },
    "open": {
     "line number": [
      885
     ]
    },
    "os.path.join": {
     "line number": [
      879
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.configuration.get_mathlib_info": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      667
     ]
    },
    "numpy.core.setup.check_mathlib": {
     "line number": [
      668
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "numpy.core.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.setup.dot_join": {
  "data": {
   "shadows": "numpy.distutils.misc_util.dot_join"
  },
  "type": "import"
 },
 "numpy.core.setup.get_build_architecture": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_build_architecture"
  },
  "type": "import"
 },
 "numpy.core.setup.get_config_var": {
  "data": {
   "shadows": "distutils.sysconfig.get_config_var"
  },
  "type": "import"
 },
 "numpy.core.setup.get_info": {
  "data": {
   "shadows": "numpy.distutils.system_info.get_info"
  },
  "type": "import"
 },
 "numpy.core.setup.get_sgemv_fix": {
  "data": {
   "shadows": "numpy._build_utils.apple_accelerate.get_sgemv_fix"
  },
  "type": "import"
 },
 "numpy.core.setup.is_npy_no_signal": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "numpy.core.setup.sys": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.is_npy_no_smp": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "numpy.core.setup.os": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.join": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "numpy.core.setup.log": {
  "data": {
   "shadows": "numpy.distutils.log"
  },
  "type": "import"
 },
 "numpy.core.setup.newer": {
  "data": {
   "shadows": "distutils.dep_util.newer"
  },
  "type": "import"
 },
 "numpy.core.setup.npy_load_module": {
  "data": {
   "shadows": "numpy.compat.npy_load_module"
  },
  "type": "import"
 },
 "numpy.core.setup.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.core.setup.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "numpy.core.setup.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.core.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.setup.pythonlib_dir": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "distutils.sysconfig.get_config_var": {
     "line number": [
      74
     ]
    },
    "numpy.core.setup.os": {
     "line number": [
      72
     ]
    },
    "numpy.core.setup.sys": {
     "line number": [
      71,
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.core.setup.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.setup.uses_accelerate_framework": {
  "data": {
   "shadows": "numpy._build_utils.apple_accelerate.uses_accelerate_framework"
  },
  "type": "import"
 },
 "numpy.core.setup.visibility_define": {
  "data": {
   "lineno": 379
  },
  "type": "function"
 },
 "numpy.core.setup.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.setup.win32_checks": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "numpy.core.setup.os": {
     "line number": [
      98
     ]
    },
    "numpy.core.setup.sys": {
     "line number": [
      98
     ]
    },
    "numpy.distutils.misc_util.get_build_architecture": {
     "line number": [
      94
     ]
    },
    "print": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup_common": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.setup_common.C99_FUNCS": {
     "line number": [
      187,
      188
     ]
    },
    "numpy.core.setup_common._IEEE_DOUBLE_BE": {
     "line number": [
      330
     ]
    },
    "numpy.core.setup_common._IEEE_QUAD_PREC_BE": {
     "line number": [
      339
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.setup_common.C99_COMPLEX_FUNCS": {
  "data": {
   "lineno": 192
  },
  "type": "constant"
 },
 "numpy.core.setup_common.C99_COMPLEX_TYPES": {
  "data": {
   "lineno": 189
  },
  "type": "constant"
 },
 "numpy.core.setup_common.C99_FUNCS": {
  "data": {
   "lineno": 180
  },
  "type": "constant"
 },
 "numpy.core.setup_common.C99_FUNCS_EXTENDED": {
  "data": {
   "lineno": 188
  },
  "type": "constant"
 },
 "numpy.core.setup_common.C99_FUNCS_SINGLE": {
  "data": {
   "lineno": 187
  },
  "type": "constant"
 },
 "numpy.core.setup_common.C_ABI_VERSION": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "numpy.core.setup_common.C_API_VERSION": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "numpy.core.setup_common.LONG_DOUBLE_REPRESENTATION_SRC": {
  "data": {
   "lineno": 256
  },
  "type": "constant"
 },
 "numpy.core.setup_common.LooseVersion": {
  "data": {
   "shadows": "distutils.version.LooseVersion"
  },
  "type": "import"
 },
 "numpy.core.setup_common.MANDATORY_FUNCS": {
  "data": {
   "lineno": 104
  },
  "type": "constant"
 },
 "numpy.core.setup_common.MismatchCAPIWarning": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "Warning": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.setup_common.OPTIONAL_FUNCTION_ATTRIBUTES": {
  "data": {
   "lineno": 158
  },
  "type": "constant"
 },
 "numpy.core.setup_common.OPTIONAL_HEADERS": {
  "data": {
   "lineno": 117
  },
  "type": "constant"
 },
 "numpy.core.setup_common.OPTIONAL_INTRINSICS": {
  "data": {
   "lineno": 130
  },
  "type": "constant"
 },
 "numpy.core.setup_common.OPTIONAL_STDFUNCS": {
  "data": {
   "lineno": 110
  },
  "type": "constant"
 },
 "numpy.core.setup_common.OPTIONAL_STDFUNCS_MAYBE": {
  "data": {
   "lineno": 174
  },
  "type": "constant"
 },
 "numpy.core.setup_common.OPTIONAL_VARIABLE_ATTRIBUTES": {
  "data": {
   "lineno": 171
  },
  "type": "constant"
 },
 "numpy.core.setup_common._AFTER_SEQ": {
  "data": {
   "lineno": 327
  },
  "type": "constant"
 },
 "numpy.core.setup_common._BEFORE_SEQ": {
  "data": {
   "lineno": 325
  },
  "type": "constant"
 },
 "numpy.core.setup_common._IBM_DOUBLE_DOUBLE_BE": {
  "data": {
   "lineno": 340
  },
  "type": "constant"
 },
 "numpy.core.setup_common._IBM_DOUBLE_DOUBLE_LE": {
  "data": {
   "lineno": 342
  },
  "type": "constant"
 },
 "numpy.core.setup_common._IEEE_DOUBLE_BE": {
  "data": {
   "lineno": 329
  },
  "type": "constant"
 },
 "numpy.core.setup_common._IEEE_DOUBLE_LE": {
  "data": {
   "lineno": 330
  },
  "type": "constant"
 },
 "numpy.core.setup_common._IEEE_QUAD_PREC_BE": {
  "data": {
   "lineno": 337
  },
  "type": "constant"
 },
 "numpy.core.setup_common._IEEE_QUAD_PREC_LE": {
  "data": {
   "lineno": 339
  },
  "type": "constant"
 },
 "numpy.core.setup_common._INTEL_EXTENDED_12B": {
  "data": {
   "lineno": 331
  },
  "type": "constant"
 },
 "numpy.core.setup_common._INTEL_EXTENDED_16B": {
  "data": {
   "lineno": 333
  },
  "type": "constant"
 },
 "numpy.core.setup_common._MOTOROLA_EXTENDED_12B": {
  "data": {
   "lineno": 335
  },
  "type": "constant"
 },
 "numpy.core.setup_common.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.setup_common.binascii": {
  "data": {
   "shadows": "binascii"
  },
  "type": "import"
 },
 "numpy.core.setup_common.check_api_version": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "numpy.core.setup_common.MismatchCAPIWarning": {
     "line number": [
      102
     ]
    },
    "numpy.core.setup_common.get_api_versions": {
     "line number": [
      85
     ]
    },
    "numpy.core.setup_common.warnings": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup_common.check_long_double_representation": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      220
     ]
    },
    "ValueError": {
     "line number": [
      220,
      243
     ]
    },
    "numpy.core.setup_common.long_double_representation": {
     "line number": [
      241,
      251
     ]
    },
    "numpy.core.setup_common.pyod": {
     "line number": [
      241,
      251
     ]
    },
    "numpy.core.setup_common.sys": {
     "line number": [
      217,
      226
     ]
    },
    "numpy.distutils.misc_util.mingw32": {
     "line number": [
      217
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup_common.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "numpy.core.setup_common.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.setup_common.fname2def": {
  "data": {
   "lineno": 198
  },
  "type": "function"
 },
 "numpy.core.setup_common.get_api_versions": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "__import__": {
     "line number": [
      74,
      75
     ]
    },
    "numpy.core.setup_common.sys": {
     "line number": [
      72,
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup_common.is_released": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      56
     ]
    },
    "distutils.version.LooseVersion": {
     "line number": [
      57
     ]
    },
    "len": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup_common.long_double_representation": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      398,
      401
     ]
    },
    "numpy.core.setup_common._AFTER_SEQ": {
     "line number": [
      367
     ]
    },
    "numpy.core.setup_common._BEFORE_SEQ": {
     "line number": [
      372,
      379,
      391
     ]
    },
    "numpy.core.setup_common._IBM_DOUBLE_DOUBLE_BE": {
     "line number": [
      388
     ]
    },
    "numpy.core.setup_common._IBM_DOUBLE_DOUBLE_LE": {
     "line number": [
      386
     ]
    },
    "numpy.core.setup_common._IEEE_DOUBLE_BE": {
     "line number": [
      394
     ]
    },
    "numpy.core.setup_common._IEEE_DOUBLE_LE": {
     "line number": [
      392
     ]
    },
    "numpy.core.setup_common._IEEE_QUAD_PREC_BE": {
     "line number": [
      382
     ]
    },
    "numpy.core.setup_common._IEEE_QUAD_PREC_LE": {
     "line number": [
      384
     ]
    },
    "numpy.core.setup_common._INTEL_EXTENDED_12B": {
     "line number": [
      373
     ]
    },
    "numpy.core.setup_common._INTEL_EXTENDED_16B": {
     "line number": [
      380
     ]
    },
    "numpy.core.setup_common._MOTOROLA_EXTENDED_12B": {
     "line number": [
      375
     ]
    },
    "numpy.core.setup_common.copy": {
     "line number": [
      368
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup_common.mingw32": {
  "data": {
   "shadows": "numpy.distutils.misc_util.mingw32"
  },
  "type": "import"
 },
 "numpy.core.setup_common.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.setup_common.pyod": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": {
    "_pyod2": {
     "line number": [
      321
     ]
    },
    "_pyod3": {
     "line number": [
      323
     ]
    },
    "numpy.core.setup_common.sys": {
     "line number": [
      320
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup_common.pyod._pyod2": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "int": {
     "line number": [
      297,
      297,
      299
     ]
    },
    "len": {
     "line number": [
      298
     ]
    },
    "numpy.core.setup_common.binascii": {
     "line number": [
      297
     ]
    },
    "oct": {
     "line number": [
      297,
      299
     ]
    },
    "open": {
     "line number": [
      295
     ]
    },
    "range": {
     "line number": [
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup_common.pyod._pyod3": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": {
    "int": {
     "line number": [
      313,
      314
     ]
    },
    "len": {
     "line number": [
      312
     ]
    },
    "oct": {
     "line number": [
      311,
      313
     ]
    },
    "open": {
     "line number": [
      309
     ]
    },
    "range": {
     "line number": [
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.setup_common.sym2def": {
  "data": {
   "lineno": 201
  },
  "type": "function"
 },
 "numpy.core.setup_common.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.setup_common.type2def": {
  "data": {
   "lineno": 205
  },
  "type": "function"
 },
 "numpy.core.setup_common.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.shape_base": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.shape_base.functools": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.shape_base.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "numpy.core.shape_base._accumulate": {
  "data": {
   "lineno": 516
  },
  "type": "function"
 },
 "numpy.core.shape_base._arrays_for_stack_dispatcher": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      215
     ]
    },
    "hasattr": {
     "line number": [
      210,
      210
     ]
    },
    "numpy.core.shape_base.warnings": {
     "line number": [
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._atleast_1d_dispatcher": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "numpy.core.shape_base._atleast_2d_dispatcher": {
  "data": {
   "lineno": 79
  },
  "type": "function"
 },
 "numpy.core.shape_base._atleast_3d_dispatcher": {
  "data": {
   "lineno": 137
  },
  "type": "function"
 },
 "numpy.core.shape_base._atleast_nd": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": {
    "array": {
     "line number": [
      513
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._block": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": {
    "numpy.core.shape_base._atleast_nd": {
     "line number": [
      654
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._block_check_depths_match": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      471
     ]
    },
    "ValueError": {
     "line number": [
      488
     ]
    },
    "enumerate": {
     "line number": [
      480
     ]
    },
    "len": {
     "line number": [
      478,
      487,
      487,
      491,
      492,
      501
     ]
    },
    "list": {
     "line number": [
      478,
      501
     ]
    },
    "next": {
     "line number": [
      482
     ]
    },
    "numpy.core.shape_base._block_format_index": {
     "line number": [
      475,
      493
     ]
    },
    "tuple": {
     "line number": [
      465
     ]
    },
    "type": {
     "line number": [
      465,
      478,
      501
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._block_concatenate": {
  "data": {
   "lineno": 880,
   "symbols_in_volume": {
    "numpy.core.shape_base._block": {
     "line number": [
      881
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._block_dispatcher": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": {
    "list": {
     "line number": [
      661
     ]
    },
    "type": {
     "line number": [
      661
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._block_format_index": {
  "data": {
   "lineno": 426
  },
  "type": "function"
 },
 "numpy.core.shape_base._block_info_recursion": {
  "data": {
   "lineno": 585,
   "symbols_in_volume": {
    "numpy.core.shape_base._atleast_nd": {
     "line number": [
      634
     ]
    },
    "numpy.core.shape_base._concatenate_shapes": {
     "line number": [
      618
     ]
    },
    "numpy.core.shape_base.functools": {
     "line number": [
      626
     ]
    },
    "numpy.core.shape_base.operator": {
     "line number": [
      626
     ]
    },
    "zip": {
     "line number": [
      613,
      622
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._block_setup": {
  "data": {
   "lineno": 844,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      852
     ]
    },
    "len": {
     "line number": [
      850
     ]
    },
    "max": {
     "line number": [
      857
     ]
    },
    "numpy.core.shape_base._block_check_depths_match": {
     "line number": [
      849
     ]
    },
    "numpy.core.shape_base._block_format_index": {
     "line number": [
      854
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._block_slicing": {
  "data": {
   "lineno": 861,
   "symbols_in_volume": {
    "Ellipsis": {
     "line number": [
      876
     ]
    },
    "all": {
     "line number": [
      867,
      868
     ]
    },
    "numpy.core.shape_base._block_info_recursion": {
     "line number": [
      862
     ]
    },
    "zip": {
     "line number": [
      875
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._concatenate_shapes": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      573
     ]
    },
    "any": {
     "line number": [
      571
     ]
    },
    "numpy.core.shape_base._accumulate": {
     "line number": [
      578
     ]
    },
    "slice": {
     "line number": [
      579
     ]
    },
    "sum": {
     "line number": [
      576
     ]
    },
    "zip": {
     "line number": [
      580
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._nx": {
  "data": {
   "shadows": "numeric"
  },
  "type": "import"
 },
 "numpy.core.shape_base._stack_dispatcher": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "list": {
     "line number": [
      347
     ]
    },
    "numpy.core.shape_base._arrays_for_stack_dispatcher": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._vhstack_dispatcher": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "numpy.core.shape_base._arrays_for_stack_dispatcher": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base._warn_for_nonsequence": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "numpy.core.shape_base._arrays_for_stack_dispatcher": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.shape_base.array_function_dispatch": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.core.shape_base.atleast_1d": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "asanyarray": {
     "line number": [
      67
     ]
    },
    "len": {
     "line number": [
      73
     ]
    },
    "numpy.core.shape_base._atleast_1d_dispatcher": {
     "line number": [
      25
     ]
    },
    "numpy.core.shape_base.array_function_dispatch": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base.atleast_2d": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "asanyarray": {
     "line number": [
      123
     ]
    },
    "len": {
     "line number": [
      131
     ]
    },
    "numpy.core.shape_base._atleast_2d_dispatcher": {
     "line number": [
      83
     ]
    },
    "numpy.core.shape_base.array_function_dispatch": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base.atleast_3d": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "asanyarray": {
     "line number": [
      193
     ]
    },
    "len": {
     "line number": [
      203
     ]
    },
    "numpy.core.shape_base._atleast_3d_dispatcher": {
     "line number": [
      141
     ]
    },
    "numpy.core.shape_base.array_function_dispatch": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base.block": {
  "data": {
   "lineno": 669,
   "symbols_in_volume": {
    "numpy.core.shape_base._block_concatenate": {
     "line number": [
      837
     ]
    },
    "numpy.core.shape_base._block_dispatcher": {
     "line number": [
      669
     ]
    },
    "numpy.core.shape_base._block_setup": {
     "line number": [
      818
     ]
    },
    "numpy.core.shape_base._block_slicing": {
     "line number": [
      835
     ]
    },
    "numpy.core.shape_base.array_function_dispatch": {
     "line number": [
      669
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.shape_base.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.core.shape_base.hstack": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": {
    "numpy.core.shape_base._vhstack_dispatcher": {
     "line number": [
      286
     ]
    },
    "numpy.core.shape_base._warn_for_nonsequence": {
     "line number": [
      334
     ]
    },
    "numpy.core.shape_base.array_function_dispatch": {
     "line number": [
      286
     ]
    },
    "numpy.core.shape_base.atleast_1d": {
     "line number": [
      335
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.core.shape_base.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.shape_base.stack": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      412,
      416
     ]
    },
    "asanyarray": {
     "line number": [
      410
     ]
    },
    "len": {
     "line number": [
      415
     ]
    },
    "normalize_axis_index": {
     "line number": [
      419
     ]
    },
    "numpy.core.shape_base._stack_dispatcher": {
     "line number": [
      352
     ]
    },
    "numpy.core.shape_base._warn_for_nonsequence": {
     "line number": [
      409
     ]
    },
    "numpy.core.shape_base.array_function_dispatch": {
     "line number": [
      352
     ]
    },
    "slice": {
     "line number": [
      421
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "numpy.core.shape_base.vstack": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "numpy.core.shape_base._vhstack_dispatcher": {
     "line number": [
      229
     ]
    },
    "numpy.core.shape_base._warn_for_nonsequence": {
     "line number": [
      282
     ]
    },
    "numpy.core.shape_base.array_function_dispatch": {
     "line number": [
      229
     ]
    },
    "numpy.core.shape_base.atleast_2d": {
     "line number": [
      283
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.shape_base.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.test": {
  "data": {
   "lineno": 170
  },
  "type": "constant"
 },
 "numpy.core.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests._locales": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests._locales.CommaDecimalPointLocale": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "numpy.core.tests._locales.find_comma_decimal_point_locale": {
     "line number": [
      60
     ]
    },
    "object": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests._locales.CommaDecimalPointLocale.__enter__": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "numpy.core.tests._locales.locale": {
     "line number": [
      73,
      73
     ]
    },
    "numpy.core.tests._locales.pytest": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests._locales.CommaDecimalPointLocale.__exit__": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "numpy.core.tests._locales.locale": {
     "line number": [
      76,
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests._locales.CommaDecimalPointLocale.setup": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "numpy.core.tests._locales.locale": {
     "line number": [
      65,
      65
     ]
    },
    "numpy.core.tests._locales.pytest": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests._locales.CommaDecimalPointLocale.teardown": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "numpy.core.tests._locales.locale": {
     "line number": [
      68,
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests._locales.__ALL__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "numpy.core.tests._locales.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests._locales.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests._locales.find_comma_decimal_point_locale": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "numpy.core.tests._locales.locale": {
     "line number": [
      33,
      33,
      38,
      38,
      41,
      44,
      44
     ]
    },
    "numpy.core.tests._locales.sys": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests._locales.locale": {
  "data": {
   "shadows": "locale"
  },
  "type": "import"
 },
 "numpy.core.tests._locales.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests._locales.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests._locales.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_abc": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_abc.TestABC": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "object": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_abc.TestABC.test_abstract": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      12,
      14,
      15,
      16,
      18,
      19,
      20
     ]
    },
    "numpy.complexfloating": {
     "line number": [
      15
     ]
    },
    "numpy.core.tests.test_abc.numbers": {
     "line number": [
      12,
      14,
      15,
      16,
      18,
      19,
      20
     ]
    },
    "numpy.floating": {
     "line number": [
      16
     ]
    },
    "numpy.inexact": {
     "line number": [
      14
     ]
    },
    "numpy.integer": {
     "line number": [
      18
     ]
    },
    "numpy.number": {
     "line number": [
      12
     ]
    },
    "numpy.signedinteger": {
     "line number": [
      19
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      12,
      14,
      15,
      16,
      18,
      19,
      20
     ]
    },
    "numpy.unsignedinteger": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_abc.TestABC.test_complex": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      35,
      39
     ]
    },
    "issubclass": {
     "line number": [
      37,
      41
     ]
    },
    "numpy.core.numerictypes.sctypes": {
     "line number": [
      34
     ]
    },
    "numpy.core.tests.test_abc.numbers": {
     "line number": [
      35,
      37,
      39,
      41
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      35,
      37,
      39,
      41
     ]
    },
    "t": {
     "line number": [
      34,
      35,
      37,
      39,
      41
     ]
    },
    "t.__name__": {
     "line number": [
      36,
      38,
      40,
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_abc.TestABC.test_floats": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      24,
      28
     ]
    },
    "issubclass": {
     "line number": [
      26,
      30
     ]
    },
    "numpy.core.numerictypes.sctypes": {
     "line number": [
      23
     ]
    },
    "numpy.core.tests.test_abc.numbers": {
     "line number": [
      24,
      26,
      28,
      30
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      24,
      26,
      28,
      30
     ]
    },
    "t": {
     "line number": [
      24,
      26,
      28,
      30
     ]
    },
    "t.__name__": {
     "line number": [
      25,
      27,
      29,
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_abc.TestABC.test_int": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      46
     ]
    },
    "issubclass": {
     "line number": [
      48
     ]
    },
    "numpy.core.numerictypes.sctypes": {
     "line number": [
      45
     ]
    },
    "numpy.core.tests.test_abc.numbers": {
     "line number": [
      46,
      48
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      46,
      48
     ]
    },
    "t": {
     "line number": [
      45,
      46,
      48
     ]
    },
    "t.__name__": {
     "line number": [
      47,
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_abc.TestABC.test_uint": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      53
     ]
    },
    "issubclass": {
     "line number": [
      55
     ]
    },
    "numpy.core.numerictypes.sctypes": {
     "line number": [
      52
     ]
    },
    "numpy.core.tests.test_abc.numbers": {
     "line number": [
      53,
      55
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      53,
      55
     ]
    },
    "t": {
     "line number": [
      52,
      53,
      55
     ]
    },
    "t.__name__": {
     "line number": [
      54,
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_abc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_abc.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_abc.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_abc.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_abc.numbers": {
  "data": {
   "shadows": "numbers"
  },
  "type": "import"
 },
 "numpy.core.tests.test_abc.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_abc.sctypes": {
  "data": {
   "shadows": "numpy.core.numerictypes.sctypes"
  },
  "type": "import"
 },
 "numpy.core.tests.test_api": {
  "data": {
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_api.HAS_REFCOUNT": {
  "data": {
   "shadows": "numpy.testing.HAS_REFCOUNT"
  },
  "type": "import"
 },
 "numpy.core.tests.test_api.NPY_RELAXED_STRIDES_CHECKING": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "numpy.core.tests.test_api.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_api.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_api.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_api.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_api.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_api.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_api.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_api.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_api.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_api.test_array_array": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      123
     ]
    },
    "_buffer": {
     "line number": [
      75,
      79
     ]
    },
    "_memoryview": {
     "line number": [
      86,
      90
     ]
    },
    "_unicode": {
     "line number": [
      58,
      60,
      61,
      61,
      62,
      63,
      64
     ]
    },
    "bytes": {
     "line number": [
      107,
      107
     ]
    },
    "dict": {
     "line number": [
      97,
      104,
      111
     ]
    },
    "float": {
     "line number": [
      102
     ]
    },
    "getattr": {
     "line number": [
      67
     ]
    },
    "globals": {
     "line number": [
      53
     ]
    },
    "hasattr": {
     "line number": [
      68
     ]
    },
    "int": {
     "line number": [
      102
     ]
    },
    "numpy.MAXDIMS": {
     "line number": [
      116
     ]
    },
    "numpy.array": {
     "line number": [
      19,
      22,
      26,
      27,
      30,
      34,
      38,
      38,
      45,
      47,
      48,
      49,
      49,
      50,
      58,
      60,
      61,
      62,
      63,
      64,
      75,
      79,
      86,
      90,
      95,
      98,
      101,
      107,
      111,
      112,
      112,
      120,
      123,
      126,
      128,
      130,
      132,
      135,
      137,
      139,
      141,
      145,
      147,
      149,
      151,
      154,
      156,
      158,
      160
     ]
    },
    "numpy.core.tests.test_api.sys": {
     "line number": [
      21,
      23,
      29,
      31,
      37,
      39,
      72
     ]
    },
    "numpy.dtype": {
     "line number": [
      42,
      43,
      44,
      55,
      56,
      57
     ]
    },
    "numpy.float64": {
     "line number": [
      16,
      19,
      26,
      27,
      30,
      34,
      35,
      37,
      38,
      38,
      39,
      45,
      46,
      58,
      59,
      75,
      77,
      86,
      88,
      95,
      98,
      111,
      112,
      112,
      123,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      154,
      155,
      156,
      157,
      158,
      159,
      160,
      161
     ]
    },
    "numpy.full": {
     "line number": [
      127,
      129,
      131,
      133,
      146,
      148,
      150,
      152
     ]
    },
    "numpy.nan": {
     "line number": [
      27,
      127,
      129,
      131,
      133,
      146,
      148,
      150,
      152
     ]
    },
    "numpy.ones": {
     "line number": [
      16,
      35,
      46,
      50,
      59,
      65,
      136,
      138,
      140,
      142,
      155,
      157,
      159,
      161
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      20,
      28,
      36
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      68,
      77,
      81,
      88,
      92
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      19,
      23,
      26,
      31,
      34,
      39,
      45,
      47,
      48,
      49,
      50,
      58,
      60,
      61,
      62,
      64,
      76,
      80,
      87,
      91,
      98,
      107,
      112,
      126,
      128,
      130,
      132,
      135,
      137,
      139,
      141,
      145,
      147,
      149,
      151,
      154,
      156,
      158,
      160
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      123
     ]
    },
    "numpy.uint8": {
     "line number": [
      81,
      92
     ]
    },
    "object": {
     "line number": [
      15,
      96,
      103,
      110
     ]
    },
    "range": {
     "line number": [
      116
     ]
    },
    "str": {
     "line number": [
      42,
      43,
      44,
      48,
      102
     ]
    },
    "type": {
     "line number": [
      15,
      17,
      96,
      103,
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_api.test_array_astype": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      220,
      287,
      290
     ]
    },
    "numpy.arange": {
     "line number": [
      184
     ]
    },
    "numpy.array": {
     "line number": [
      229,
      248,
      252,
      258,
      262,
      267,
      268,
      269,
      270,
      272,
      273,
      274,
      275,
      277,
      278,
      279,
      280,
      282,
      286,
      289
     ]
    },
    "numpy.dtype": {
     "line number": [
      189,
      193,
      218,
      251,
      255,
      261,
      265
     ]
    },
    "numpy.ndarray": {
     "line number": [
      283
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      197,
      201,
      207,
      208,
      212,
      213,
      224,
      233,
      243,
      244,
      284
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      268,
      270,
      273,
      275,
      278,
      280
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      188,
      189,
      190,
      192,
      193,
      194,
      196,
      206,
      211,
      217,
      218,
      237,
      238,
      242,
      250,
      251,
      254,
      255,
      260,
      261,
      264,
      265
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      220,
      287,
      290
     ]
    },
    "type": {
     "line number": [
      238,
      244
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_api.test_array_astype.MyNDArray": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_api.test_broadcast_arrays": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      512,
      513,
      515,
      516
     ]
    },
    "numpy.broadcast_arrays": {
     "line number": [
      514
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      515,
      516
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_api.test_contiguous_flags": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": {
    "check_contig": {
     "line number": [
      477,
      478,
      480,
      481,
      483,
      484,
      485,
      486,
      489,
      490,
      491,
      495,
      496,
      497,
      498,
      501,
      503,
      504,
      507,
      508
     ]
    },
    "numpy.array": {
     "line number": [
      481,
      484,
      489,
      490,
      491
     ]
    },
    "numpy.core.tests.test_api.NPY_RELAXED_STRIDES_CHECKING": {
     "line number": [
      468,
      479,
      493
     ]
    },
    "numpy.empty": {
     "line number": [
      480,
      483,
      485,
      486
     ]
    },
    "numpy.ones": {
     "line number": [
      467,
      470,
      508
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_api.test_contiguous_flags.check_contig": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      473,
      474
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_api.test_copy_order": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "check_copy_result": {
     "line number": [
      426,
      428,
      430,
      432,
      434,
      436,
      440,
      442,
      444,
      446,
      448,
      450,
      454,
      456,
      458,
      460,
      462,
      464
     ]
    },
    "numpy.arange": {
     "line number": [
      399,
      401
     ]
    },
    "numpy.copy": {
     "line number": [
      431,
      433,
      435,
      445,
      447,
      449,
      459,
      461,
      463
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      417,
      418,
      419,
      420,
      421,
      422
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_api.test_copy_order.check_copy_result": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": {
    "numpy.core.tests.test_api.NPY_RELAXED_STRIDES_CHECKING": {
     "line number": [
      410
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      404,
      414
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      405,
      406,
      407,
      412
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_api.test_copyto": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      321,
      332,
      343
     ]
    },
    "numpy.arange": {
     "line number": [
      310
     ]
    },
    "numpy.copyto": {
     "line number": [
      313,
      317,
      321,
      324,
      328,
      332,
      335,
      339,
      343
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      314,
      318,
      325,
      329,
      336,
      340
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      321,
      332,
      343
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_api.test_copyto_fromscalar": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      293
     ]
    },
    "numpy.array": {
     "line number": [
      302,
      305
     ]
    },
    "numpy.copyto": {
     "line number": [
      296,
      298,
      303,
      306
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      297,
      299,
      304,
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_api.test_copyto_permut": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": {
    "len": {
     "line number": [
      349,
      350
     ]
    },
    "numpy.array": {
     "line number": [
      351,
      361,
      383,
      384
     ]
    },
    "numpy.copyto": {
     "line number": [
      352,
      362,
      367,
      372,
      377,
      386,
      391,
      395
     ]
    },
    "numpy.ones": {
     "line number": [
      350,
      357,
      393
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      363,
      368,
      373,
      378,
      387
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      364,
      369,
      374,
      379,
      388,
      392,
      396
     ]
    },
    "numpy.uint8": {
     "line number": [
      384
     ]
    },
    "numpy.zeros": {
     "line number": [
      349,
      359,
      366,
      371,
      376,
      382,
      390,
      394
     ]
    },
    "range": {
     "line number": [
      358,
      360
     ]
    },
    "sum": {
     "line number": [
      364,
      369,
      374,
      379,
      388
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_api.test_fastCopyAndTranspose": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      178
     ]
    },
    "numpy.array": {
     "line number": [
      166,
      172
     ]
    },
    "numpy.fastCopyAndTranspose": {
     "line number": [
      167,
      173,
      179
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      169,
      175,
      181
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      168,
      174,
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_arrayprint.HAS_REFCOUNT": {
  "data": {
   "shadows": "numpy.testing.HAS_REFCOUNT"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "object": {
     "line number": [
      210
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_basic": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      213
     ]
    },
    "numpy.array2string": {
     "line number": [
      214,
      215,
      216
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      214,
      215,
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_edgeitems_kwarg": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": {
    "int": {
     "line number": [
      341
     ]
    },
    "numpy.array2string": {
     "line number": [
      343
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      342
     ]
    },
    "numpy.zeros": {
     "line number": [
      341
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_format_function": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      266
     ]
    },
    "hex": {
     "line number": [
      250
     ]
    },
    "numpy.arange": {
     "line number": [
      237,
      255
     ]
    },
    "numpy.array": {
     "line number": [
      261
     ]
    },
    "numpy.array2string": {
     "line number": [
      244,
      246,
      248,
      250,
      252,
      256,
      258,
      262,
      268
     ]
    },
    "numpy.core.arrayprint.FloatFormat": {
     "line number": [
      267
     ]
    },
    "numpy.core.tests.test_arrayprint.sys": {
     "line number": [
      238
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      244,
      246,
      248,
      256,
      258,
      262
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      250,
      252,
      268
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      266
     ]
    },
    "oct": {
     "line number": [
      252
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_format_function._format_function": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "numpy.abs": {
     "line number": [
      230,
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_linewidth": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": {
    "make_str": {
     "line number": [
      371,
      372,
      373,
      376,
      377,
      379,
      384,
      385,
      386,
      389,
      390,
      392
     ]
    },
    "numpy.full": {
     "line number": [
      366
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      371,
      372,
      373,
      376,
      377,
      379,
      384,
      385,
      386,
      389,
      390,
      392
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_linewidth.make_str": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": {
    "numpy.array2string": {
     "line number": [
      369
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_refcount": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      412
     ]
    },
    "numpy.array2string": {
     "line number": [
      414,
      415
     ]
    },
    "numpy.core.tests.test_arrayprint.gc": {
     "line number": [
      411,
      417,
      418
     ]
    },
    "numpy.core.tests.test_arrayprint.pytest": {
     "line number": [
      407
     ]
    },
    "numpy.core.tests.test_arrayprint.sys": {
     "line number": [
      413,
      416
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      407
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      419
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_structure_format": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      273,
      314,
      317,
      323
     ]
    },
    "numpy.array2string": {
     "line number": [
      274,
      283,
      294,
      307,
      315,
      319,
      325
     ]
    },
    "numpy.core.tests.test_arrayprint.textwrap": {
     "line number": [
      284,
      295,
      308
     ]
    },
    "numpy.datetime64": {
     "line number": [
      281,
      305
     ]
    },
    "numpy.dtype": {
     "line number": [
      272
     ]
    },
    "numpy.float64": {
     "line number": [
      272
     ]
    },
    "numpy.full": {
     "line number": [
      304
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      277,
      290
     ]
    },
    "numpy.str_": {
     "line number": [
      272
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      274,
      282,
      293,
      306,
      315,
      319,
      325
     ]
    },
    "numpy.zeros": {
     "line number": [
      280
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_summarize_1d": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      348
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      350,
      353
     ]
    },
    "repr": {
     "line number": [
      353
     ]
    },
    "str": {
     "line number": [
      350
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_summarize_2d": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      356
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      359,
      363
     ]
    },
    "repr": {
     "line number": [
      363
     ]
    },
    "str": {
     "line number": [
      359
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_unexpected_kwarg": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      223
     ]
    },
    "numpy.array": {
     "line number": [
      224
     ]
    },
    "numpy.array2string": {
     "line number": [
      224
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_unstructured_void_repr": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": {
    "eval": {
     "line number": [
      336,
      337
     ]
    },
    "numpy": {
     "line number": [
      336,
      337
     ]
    },
    "numpy.array": {
     "line number": [
      328
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      330,
      331,
      332,
      336,
      337
     ]
    },
    "repr": {
     "line number": [
      330,
      332,
      336,
      337
     ]
    },
    "str": {
     "line number": [
      331
     ]
    },
    "vars": {
     "line number": [
      336,
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArray2String.test_wide_element": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      397
     ]
    },
    "numpy.array2string": {
     "line number": [
      399,
      403
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      398,
      402
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "object": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      119
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      74,
      75,
      78,
      79,
      83,
      84,
      90,
      92,
      98,
      99,
      120,
      121
     ]
    },
    "repr": {
     "line number": [
      74,
      78,
      83,
      90,
      98
     ]
    },
    "str": {
     "line number": [
      75,
      79,
      84,
      92,
      99,
      120,
      121
     ]
    },
    "sub": {
     "line number": [
      73,
      77,
      82,
      87,
      96,
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.DuckCounter": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.DuckCounter.__getitem__": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      105
     ]
    },
    "super": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.DuckCounter.__str__": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "numpy.array2string": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.DuckCounter.to_string": {
  "data": {
   "lineno": 109
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.sub": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.sub.__getitem__": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "sub": {
     "line number": [
      70,
      71
     ]
    },
    "super": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.sub.__new__": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_containing_list": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      146
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      149
     ]
    },
    "repr": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_fieldless_structured": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      158
     ]
    },
    "numpy.empty": {
     "line number": [
      159
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      160
     ]
    },
    "repr": {
     "line number": [
      160
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_nan_inf": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      17
     ]
    },
    "numpy.inf": {
     "line number": [
      17
     ]
    },
    "numpy.nan": {
     "line number": [
      17
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      18
     ]
    },
    "repr": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_object_subclass": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "numpy.core.tests.test_arrayprint.pytest": {
     "line number": [
      40
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      53,
      54,
      57,
      59
     ]
    },
    "repr": {
     "line number": [
      53,
      57
     ]
    },
    "str": {
     "line number": [
      54,
      59
     ]
    },
    "sub": {
     "line number": [
      52,
      56,
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_object_subclass.sub": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_object_subclass.sub.__getitem__": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "sub": {
     "line number": [
      49
     ]
    },
    "super": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_object_subclass.sub.__new__": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_self_containing": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      124,
      130,
      136,
      137
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      126,
      132,
      140
     ]
    },
    "repr": {
     "line number": [
      126,
      132,
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_subclass": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      24,
      28
     ]
    },
    "numpy.ones": {
     "line number": [
      34
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      25,
      29,
      35
     ]
    },
    "repr": {
     "line number": [
      25,
      29,
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_subclass.sub": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_arrayprint.TestArrayRepr.test_void_scalar_recursion": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "numpy.void": {
     "line number": [
      154
     ]
    },
    "repr": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestComplexArray": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "object": {
     "line number": [
      163
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_arrayprint.TestComplexArray.test_str": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      166
     ]
    },
    "numpy.array": {
     "line number": [
      168
     ]
    },
    "numpy.cdouble": {
     "line number": [
      167
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      167
     ]
    },
    "numpy.complex64": {
     "line number": [
      167
     ]
    },
    "numpy.inf": {
     "line number": [
      165,
      165
     ]
    },
    "numpy.nan": {
     "line number": [
      165
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      208
     ]
    },
    "str": {
     "line number": [
      168
     ]
    },
    "zip": {
     "line number": [
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestContextManager": {
  "data": {
   "lineno": 864,
   "symbols_in_volume": {
    "object": {
     "line number": [
      864
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr": {
  "data": {
   "lineno": 865,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      868
     ]
    },
    "numpy.printoptions": {
     "line number": [
      867
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      869
     ]
    },
    "str": {
     "line number": [
      868
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_as_smth": {
  "data": {
   "lineno": 889,
   "symbols_in_volume": {
    "numpy.printoptions": {
     "line number": [
      891
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      893
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_exceptions": {
  "data": {
   "lineno": 879,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      884,
      885
     ]
    },
    "numpy.get_printoptions": {
     "line number": [
      881,
      887
     ]
    },
    "numpy.printoptions": {
     "line number": [
      883
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      887
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_restores": {
  "data": {
   "lineno": 871,
   "symbols_in_volume": {
    "numpy.get_printoptions": {
     "line number": [
      873,
      877
     ]
    },
    "numpy.printoptions": {
     "line number": [
      874
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      877
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": {
    "object": {
     "line number": [
      421
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.setup": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": {
    "numpy.get_printoptions": {
     "line number": [
      425
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.teardown": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": {
    "numpy.set_printoptions": {
     "line number": [
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_0d_arrays": {
  "data": {
   "lineno": 474,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      504
     ]
    },
    "numpy.array": {
     "line number": [
      477,
      480,
      483,
      485,
      497,
      505,
      507,
      509
     ]
    },
    "numpy.array2string": {
     "line number": [
      504,
      507,
      509
     ]
    },
    "numpy.core.tests.test_arrayprint.sys": {
     "line number": [
      479
     ]
    },
    "numpy.datetime64": {
     "line number": [
      490
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      498
     ]
    },
    "numpy.str_": {
     "line number": [
      485
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      477,
      480,
      483,
      485,
      488,
      490,
      493,
      499,
      501
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      504
     ]
    },
    "numpy.timedelta64": {
     "line number": [
      493
     ]
    },
    "numpy.zeros": {
     "line number": [
      487
     ]
    },
    "repr": {
     "line number": [
      480,
      483,
      490,
      493,
      499,
      505,
      507
     ]
    },
    "str": {
     "line number": [
      485,
      488,
      501
     ]
    },
    "type": {
     "line number": [
      475
     ]
    },
    "unicode": {
     "line number": [
      477
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_bad_args": {
  "data": {
   "lineno": 849,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      850,
      851,
      852
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      850,
      851,
      852
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      850,
      851,
      852
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_basic": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      431
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      433
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      432,
      434
     ]
    },
    "repr": {
     "line number": [
      432,
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_bool_spacing": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      536,
      538,
      540,
      542,
      544
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      536,
      538,
      540,
      542,
      544
     ]
    },
    "repr": {
     "line number": [
      536,
      538,
      540,
      542,
      544
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_dtype_linewidth_wrapping": {
  "data": {
   "lineno": 709,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      711,
      713
     ]
    },
    "numpy.core.tests.test_arrayprint.sys": {
     "line number": [
      717
     ]
    },
    "numpy.core.tests.test_arrayprint.textwrap": {
     "line number": [
      713,
      720
     ]
    },
    "numpy.ones": {
     "line number": [
      718,
      720
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      710
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      711,
      713,
      718,
      720
     ]
    },
    "repr": {
     "line number": [
      711,
      713,
      718,
      720
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_edgeitems": {
  "data": {
   "lineno": 779,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      781
     ]
    },
    "numpy.core.tests.test_arrayprint.textwrap": {
     "line number": [
      784,
      799,
      822,
      835
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      780,
      818
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      782,
      797,
      820,
      833
     ]
    },
    "numpy.zeros": {
     "line number": [
      796
     ]
    },
    "repr": {
     "line number": [
      783,
      798,
      821,
      834
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_float_overflow_nowarn": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      591
     ]
    },
    "repr": {
     "line number": [
      591
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_float_spacing": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      512,
      513,
      514,
      515,
      519,
      520,
      524,
      525,
      527,
      528,
      529
     ]
    },
    "numpy.inf": {
     "line number": [
      524,
      525,
      527,
      528,
      529
     ]
    },
    "numpy.nan": {
     "line number": [
      524,
      525
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      530
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      517,
      518,
      519,
      520,
      521,
      522,
      524,
      525,
      531,
      532,
      533
     ]
    },
    "repr": {
     "line number": [
      517,
      518,
      519,
      520,
      521,
      522,
      524,
      525,
      531,
      532,
      533
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_floatmode": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      607
     ]
    },
    "numpy.array": {
     "line number": [
      600,
      602,
      608,
      611,
      615
     ]
    },
    "numpy.float16": {
     "line number": [
      601,
      607
     ]
    },
    "numpy.float64": {
     "line number": [
      606,
      611
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      618,
      638,
      654,
      669,
      675
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      619,
      622,
      626,
      628,
      633,
      634,
      639,
      642,
      645,
      647,
      649,
      650,
      655,
      658,
      660,
      662,
      664,
      665,
      666,
      670,
      676,
      679,
      682,
      684,
      686,
      687
     ]
    },
    "numpy.zeros": {
     "line number": [
      665
     ]
    },
    "range": {
     "line number": [
      611
     ]
    },
    "repr": {
     "line number": [
      619,
      622,
      626,
      628,
      633,
      634,
      639,
      642,
      645,
      647,
      649,
      650,
      655,
      658,
      660,
      662,
      664,
      665,
      666,
      670,
      676,
      679,
      682,
      684,
      686,
      687
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_formatter": {
  "data": {
   "lineno": 446,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      447
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      448
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      449
     ]
    },
    "repr": {
     "line number": [
      449
     ]
    },
    "str": {
     "line number": [
      448
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_formatter_reset": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      452,
      468
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      453,
      455,
      458,
      460,
      463,
      465,
      469,
      471
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      454,
      456,
      459,
      461,
      464,
      466,
      470,
      472
     ]
    },
    "repr": {
     "line number": [
      454,
      456,
      459,
      461,
      464,
      466,
      470,
      472
     ]
    },
    "str": {
     "line number": [
      453,
      458,
      463,
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_legacy_mode_scalars": {
  "data": {
   "lineno": 690,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      695,
      700
     ]
    },
    "numpy.complex128": {
     "line number": [
      695,
      700
     ]
    },
    "numpy.float64": {
     "line number": [
      694,
      698
     ]
    },
    "numpy.nan": {
     "line number": [
      695,
      700
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      693,
      697
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      694,
      695,
      698,
      700
     ]
    },
    "str": {
     "line number": [
      694,
      695,
      698,
      700
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_legacy_stray_comma": {
  "data": {
   "lineno": 702,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      704,
      707
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      703,
      706
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      704,
      707
     ]
    },
    "str": {
     "line number": [
      704,
      707
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_linewidth_repr": {
  "data": {
   "lineno": 724,
   "symbols_in_volume": {
    "numpy.core.tests.test_arrayprint.textwrap": {
     "line number": [
      729,
      737,
      747,
      756
     ]
    },
    "numpy.full": {
     "line number": [
      725,
      742
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      726,
      734,
      744,
      753
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      727,
      735,
      745,
      754
     ]
    },
    "repr": {
     "line number": [
      728,
      736,
      746,
      755
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_linewidth_str": {
  "data": {
   "lineno": 761,
   "symbols_in_volume": {
    "numpy.core.tests.test_arrayprint.textwrap": {
     "line number": [
      766,
      774
     ]
    },
    "numpy.full": {
     "line number": [
      762
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      763,
      771
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      764,
      772
     ]
    },
    "str": {
     "line number": [
      765,
      773
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_precision_zero": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      442
     ]
    },
    "numpy.array": {
     "line number": [
      443
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      437
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      444
     ]
    },
    "repr": {
     "line number": [
      444
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_sign_spacing": {
  "data": {
   "lineno": 547,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      586
     ]
    },
    "numpy.arange": {
     "line number": [
      548
     ]
    },
    "numpy.array": {
     "line number": [
      549,
      550,
      553,
      555,
      558,
      562,
      566,
      570,
      579,
      580,
      584
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      560,
      568,
      575,
      586
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      552,
      553,
      554,
      555,
      556,
      558,
      561,
      562,
      563,
      564,
      566,
      569,
      570,
      571,
      572,
      576,
      577,
      578,
      579,
      580,
      581,
      584
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      586
     ]
    },
    "repr": {
     "line number": [
      552,
      553,
      554,
      555,
      556,
      558,
      561,
      562,
      563,
      564,
      566,
      569,
      570,
      571,
      572,
      576,
      577,
      578,
      579,
      580,
      581
     ]
    },
    "str": {
     "line number": [
      584
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.TestPrintOptions.test_sign_spacing_structured": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      594
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      595,
      597
     ]
    },
    "repr": {
     "line number": [
      595,
      597
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.gc": {
  "data": {
   "shadows": "gc"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_arrayprint.test_unicode_object_array": {
  "data": {
   "lineno": 854,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      860
     ]
    },
    "numpy.core.tests.test_arrayprint.sys": {
     "line number": [
      856
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      861
     ]
    },
    "object": {
     "line number": [
      860
     ]
    },
    "repr": {
     "line number": [
      861
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_arrayprint.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_defchararray.TestBasic": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "object": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_defchararray.TestBasic.test_from_object_array": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      17
     ]
    },
    "numpy.char.array": {
     "line number": [
      19
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      21
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestBasic.test_from_object_array_unicode": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      27
     ]
    },
    "numpy.array": {
     "line number": [
      25,
      29
     ]
    },
    "numpy.char.array": {
     "line number": [
      27,
      28
     ]
    },
    "numpy.core.tests.test_defchararray.kw_unicode_true": {
     "line number": [
      28
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      30
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      29
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestBasic.test_from_string": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      77
     ]
    },
    "len": {
     "line number": [
      75,
      76
     ]
    },
    "numpy.char.array": {
     "line number": [
      74
     ]
    },
    "numpy.string_": {
     "line number": [
      77
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      77
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      75,
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestBasic.test_from_string_array": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      34
     ]
    },
    "numpy.char.array": {
     "line number": [
      37
     ]
    },
    "numpy.char.asarray": {
     "line number": [
      43
     ]
    },
    "numpy.string_": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      42,
      47,
      48
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      38,
      44
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36,
      39,
      40,
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      84
     ]
    },
    "len": {
     "line number": [
      81,
      82
     ]
    },
    "numpy.char.array": {
     "line number": [
      80
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      84
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      81,
      82,
      83
     ]
    },
    "numpy.unicode_": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "UnicodeEncodeError": {
     "line number": [
      66
     ]
    },
    "numpy.array": {
     "line number": [
      51
     ]
    },
    "numpy.char.array": {
     "line number": [
      54,
      58
     ]
    },
    "numpy.core.tests.test_defchararray.kw_unicode_true": {
     "line number": [
      58
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      55,
      59
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      53,
      56,
      57,
      60,
      61
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      66
     ]
    },
    "numpy.unicode_": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "numpy.char.array": {
     "line number": [
      64
     ]
    },
    "numpy.core.tests.test_defchararray.kw_unicode_false": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestBasic.test_unicode_upconvert": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      71
     ]
    },
    "numpy.char.array": {
     "line number": [
      69,
      70
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      71
     ]
    },
    "numpy.unicode_": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestChar": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "object": {
     "line number": [
      152
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_defchararray.TestChar.setup": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      154
     ]
    },
    "numpy.chararray": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestChar.test_it": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      157,
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestComparisons": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "object": {
     "line number": [
      160
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_defchararray.TestComparisons.setup": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      162,
      164
     ]
    },
    "numpy.chararray": {
     "line number": [
      163,
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestComparisons.test_equal": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      171
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestComparisons.test_greater": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestComparisons.test_greater_equal": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      174
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestComparisons.test_less": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestComparisons.test_less_equal": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestComparisons.test_not_equal": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestComparisonsMixed1": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "numpy.core.tests.test_defchararray.TestComparisons": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_defchararray.TestComparisonsMixed1.setup": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      190
     ]
    },
    "numpy.chararray": {
     "line number": [
      191
     ]
    },
    "numpy.core.tests.test_defchararray.TestComparisons": {
     "line number": [
      189
     ]
    },
    "numpy.unicode_": {
     "line number": [
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestComparisonsMixed2": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": {
    "numpy.core.tests.test_defchararray.TestComparisons": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_defchararray.TestComparisonsMixed2.setup": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      198
     ]
    },
    "numpy.chararray": {
     "line number": [
      199
     ]
    },
    "numpy.core.tests.test_defchararray.TestComparisons": {
     "line number": [
      197
     ]
    },
    "numpy.unicode_": {
     "line number": [
      199
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "object": {
     "line number": [
      201
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_defchararray.TestInformation.setup": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      203,
      206
     ]
    },
    "numpy.chararray": {
     "line number": [
      205,
      208
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_count": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      216
     ]
    },
    "numpy.integer": {
     "line number": [
      216
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      216
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      217,
      218,
      221,
      222,
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_endswith": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      234
     ]
    },
    "issubclass": {
     "line number": [
      227
     ]
    },
    "numpy.bool_": {
     "line number": [
      227
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      227
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      228,
      229
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      234
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail": {
  "data": {
   "lineno": 231
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_find": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      237
     ]
    },
    "numpy.integer": {
     "line number": [
      237
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      237
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      238,
      239,
      240,
      241
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_index": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      248
     ]
    },
    "issubclass": {
     "line number": [
      250
     ]
    },
    "numpy.char.index": {
     "line number": [
      249,
      250
     ]
    },
    "numpy.integer": {
     "line number": [
      250
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      249,
      250
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      248
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_index.fail": {
  "data": {
   "lineno": 245
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_isalnum": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      253
     ]
    },
    "numpy.bool_": {
     "line number": [
      253
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      253
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      254
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_isalpha": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      257
     ]
    },
    "numpy.bool_": {
     "line number": [
      257
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      257
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      258
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_isdigit": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      261
     ]
    },
    "numpy.bool_": {
     "line number": [
      261
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      261
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      262
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_islower": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      265
     ]
    },
    "numpy.bool_": {
     "line number": [
      265
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      265
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      266
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_isspace": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      269
     ]
    },
    "numpy.bool_": {
     "line number": [
      269
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      269
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      270
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_istitle": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      273
     ]
    },
    "numpy.bool_": {
     "line number": [
      273
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      273
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      274
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_isupper": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      277
     ]
    },
    "numpy.bool_": {
     "line number": [
      277
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      277
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_len": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      211
     ]
    },
    "numpy.char.str_len": {
     "line number": [
      211,
      212,
      213
     ]
    },
    "numpy.integer": {
     "line number": [
      211
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      211
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      212,
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_rfind": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      281
     ]
    },
    "numpy.integer": {
     "line number": [
      281
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      281
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      282,
      283,
      284,
      285
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_rindex": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      292
     ]
    },
    "issubclass": {
     "line number": [
      294
     ]
    },
    "numpy.char.rindex": {
     "line number": [
      293,
      294
     ]
    },
    "numpy.integer": {
     "line number": [
      294
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      293,
      294
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      292
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail": {
  "data": {
   "lineno": 289
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_startswith": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      304
     ]
    },
    "issubclass": {
     "line number": [
      297
     ]
    },
    "numpy.bool_": {
     "line number": [
      297
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      297
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      298,
      299
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      304
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail": {
  "data": {
   "lineno": 301
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "object": {
     "line number": [
      307
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_defchararray.TestMethods.setup": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      309,
      313
     ]
    },
    "numpy.chararray": {
     "line number": [
      312,
      315
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_capitalize": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      321,
      327
     ]
    },
    "numpy.string_": {
     "line number": [
      321
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      321,
      327
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      322,
      328
     ]
    },
    "numpy.unicode_": {
     "line number": [
      327
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_center": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      331,
      342
     ]
    },
    "numpy.all": {
     "line number": [
      336,
      337
     ]
    },
    "numpy.char.center": {
     "line number": [
      339
     ]
    },
    "numpy.char.str_len": {
     "line number": [
      333
     ]
    },
    "numpy.string_": {
     "line number": [
      331,
      342
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      331,
      336,
      337,
      342
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      333,
      343
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_decode": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      352
     ]
    },
    "numpy.char.array": {
     "line number": [
      347,
      353
     ]
    },
    "numpy.core.tests.test_defchararray.sys": {
     "line number": [
      346,
      351
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      348,
      354
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      350
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_encode": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      358
     ]
    },
    "str": {
     "line number": [
      358
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_expandtabs": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      362
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal": {
  "data": {
   "lineno": 591,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      596
     ]
    },
    "issubclass": {
     "line number": [
      597
     ]
    },
    "numpy.bool_": {
     "line number": [
      597
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      597
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      598
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      596
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail": {
  "data": {
   "lineno": 593
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric": {
  "data": {
   "lineno": 581,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      586
     ]
    },
    "issubclass": {
     "line number": [
      587
     ]
    },
    "numpy.bool_": {
     "line number": [
      587
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      587
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      588
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      586
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail": {
  "data": {
   "lineno": 583
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_join": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      374,
      376
     ]
    },
    "numpy.array": {
     "line number": [
      377
     ]
    },
    "numpy.char.join": {
     "line number": [
      372,
      380
     ]
    },
    "numpy.core.tests.test_defchararray.sys": {
     "line number": [
      365,
      373
     ]
    },
    "numpy.string_": {
     "line number": [
      376
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      374,
      376
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      380
     ]
    },
    "numpy.unicode_": {
     "line number": [
      374
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_ljust": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      383,
      396
     ]
    },
    "numpy.all": {
     "line number": [
      391
     ]
    },
    "numpy.char.ljust": {
     "line number": [
      393
     ]
    },
    "numpy.char.str_len": {
     "line number": [
      386
     ]
    },
    "numpy.string_": {
     "line number": [
      383,
      396
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      383,
      391,
      396
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      386,
      389,
      397
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_lower": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      403,
      409
     ]
    },
    "numpy.string_": {
     "line number": [
      403
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      403,
      409
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      404,
      410
     ]
    },
    "numpy.unicode_": {
     "line number": [
      409
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_lstrip": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      416,
      427
     ]
    },
    "numpy.string_": {
     "line number": [
      416
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      416,
      427
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      417,
      422,
      428
     ]
    },
    "numpy.unicode_": {
     "line number": [
      427
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_partition": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      435
     ]
    },
    "numpy.string_": {
     "line number": [
      435
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      435
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      436
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_replace": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      444,
      453
     ]
    },
    "numpy.core.tests.test_defchararray.sys": {
     "line number": [
      447
     ]
    },
    "numpy.string_": {
     "line number": [
      444
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      444,
      453
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      445,
      454
     ]
    },
    "numpy.unicode_": {
     "line number": [
      453
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_rjust": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      457,
      470
     ]
    },
    "numpy.all": {
     "line number": [
      463
     ]
    },
    "numpy.char.rjust": {
     "line number": [
      467
     ]
    },
    "numpy.char.str_len": {
     "line number": [
      460
     ]
    },
    "numpy.string_": {
     "line number": [
      457,
      470
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      457,
      463,
      470
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      460,
      464,
      471
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_rpartition": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      478
     ]
    },
    "numpy.string_": {
     "line number": [
      478
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      478
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      479
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_rsplit": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      486
     ]
    },
    "numpy.object_": {
     "line number": [
      486
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      486
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      487
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_rstrip": {
  "data": {
   "lineno": 489,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      490,
      506
     ]
    },
    "numpy.string_": {
     "line number": [
      490
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      490,
      506
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      495,
      501,
      507
     ]
    },
    "numpy.unicode_": {
     "line number": [
      506
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_split": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      533
     ]
    },
    "numpy.object_": {
     "line number": [
      533
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      533
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      534
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_splitlines": {
  "data": {
   "lineno": 536,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      538
     ]
    },
    "len": {
     "line number": [
      540
     ]
    },
    "numpy.char.array": {
     "line number": [
      537
     ]
    },
    "numpy.object_": {
     "line number": [
      538
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      538,
      539,
      540
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_strip": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      513,
      524
     ]
    },
    "numpy.string_": {
     "line number": [
      513
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      513,
      524
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      514,
      519,
      525
     ]
    },
    "numpy.unicode_": {
     "line number": [
      524
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_swapcase": {
  "data": {
   "lineno": 542,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      546,
      552
     ]
    },
    "numpy.string_": {
     "line number": [
      546
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      546,
      552
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      547,
      553
     ]
    },
    "numpy.unicode_": {
     "line number": [
      552
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_title": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      559,
      565
     ]
    },
    "numpy.string_": {
     "line number": [
      559
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      559,
      565
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      560,
      566
     ]
    },
    "numpy.unicode_": {
     "line number": [
      565
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestMethods.test_upper": {
  "data": {
   "lineno": 568,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      572,
      578
     ]
    },
    "numpy.string_": {
     "line number": [
      572
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      572,
      578
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      573,
      579
     ]
    },
    "numpy.unicode_": {
     "line number": [
      578
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestOperations": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": {
    "object": {
     "line number": [
      602
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_defchararray.TestOperations.setup": {
  "data": {
   "lineno": 603,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      604,
      606
     ]
    },
    "numpy.chararray": {
     "line number": [
      605,
      607
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestOperations.test_add": {
  "data": {
   "lineno": 609,
   "symbols_in_volume": {
    "len": {
     "line number": [
      613
     ]
    },
    "numpy.array": {
     "line number": [
      610
     ]
    },
    "numpy.chararray": {
     "line number": [
      611
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      613
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      612
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestOperations.test_mod": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      647,
      648,
      649,
      653,
      654,
      657
     ]
    },
    "numpy.chararray": {
     "line number": [
      647,
      650,
      653,
      654,
      657
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      651,
      655,
      658
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestOperations.test_mul": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      629
     ]
    },
    "numpy.array": {
     "line number": [
      623
     ]
    },
    "numpy.chararray": {
     "line number": [
      624
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      626
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      629
     ]
    },
    "object": {
     "line number": [
      628
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestOperations.test_radd": {
  "data": {
   "lineno": 615,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      616
     ]
    },
    "numpy.chararray": {
     "line number": [
      617
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      618
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestOperations.test_rmod": {
  "data": {
   "lineno": 660,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      666
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      661,
      662
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      665
     ]
    },
    "object": {
     "line number": [
      664
     ]
    },
    "repr": {
     "line number": [
      662
     ]
    },
    "str": {
     "line number": [
      661
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestOperations.test_rmul": {
  "data": {
   "lineno": 633,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      641
     ]
    },
    "numpy.array": {
     "line number": [
      636
     ]
    },
    "numpy.chararray": {
     "line number": [
      637
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      638
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      641
     ]
    },
    "object": {
     "line number": [
      640
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestOperations.test_slice": {
  "data": {
   "lineno": 669,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      672
     ]
    },
    "numpy.chararray": {
     "line number": [
      673
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      676,
      677,
      681,
      682,
      684
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      675,
      680
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "object": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      134
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      134
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error.fail": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "numpy.core.multiarray._vec_string": {
     "line number": [
      132
     ]
    },
    "numpy.integer": {
     "line number": [
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      106
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "numpy.core.multiarray._vec_string": {
     "line number": [
      104
     ]
    },
    "numpy.string_": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      120
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "numpy.core.multiarray._vec_string": {
     "line number": [
      118
     ]
    },
    "numpy.string_": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      127
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type.fail": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "numpy.core.multiarray._vec_string": {
     "line number": [
      125
     ]
    },
    "numpy.integer": {
     "line number": [
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      113
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr.fail": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "numpy.core.multiarray._vec_string": {
     "line number": [
      111
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      92
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "numpy.core.multiarray._vec_string": {
     "line number": [
      90
     ]
    },
    "numpy.string_": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      99
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "numpy.core.multiarray._vec_string": {
     "line number": [
      97
     ]
    },
    "numpy.string_": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestWhitespace": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "object": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_defchararray.TestWhitespace.setup": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      139,
      141
     ]
    },
    "numpy.chararray": {
     "line number": [
      140,
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray.TestWhitespace.test1": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      145,
      146,
      147
     ]
    },
    "numpy.any": {
     "line number": [
      148,
      149,
      150
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      145,
      146,
      147,
      148,
      149,
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_defchararray._vec_string": {
  "data": {
   "shadows": "numpy.core.multiarray._vec_string"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.kw_unicode_false": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.core.tests.test_defchararray.kw_unicode_true": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.core.tests.test_defchararray.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_defchararray.test_empty_indexing": {
  "data": {
   "lineno": 687,
   "symbols_in_volume": {
    "numpy.chararray": {
     "line number": [
      691
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      692
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_deprecations.TestArrayDataAttributeAssignmentDeprecation": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      314
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestArrayDataAttributeAssignmentDeprecation.test_data_attr_assignment": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      323
     ]
    },
    "numpy.linspace": {
     "line number": [
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      348
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation.test_insufficient_width_negative": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": {
    "numpy.binary_repr": {
     "line number": [
      371
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation.test_insufficient_width_positive": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "numpy.binary_repr": {
     "line number": [
      363
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestBincount": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      496
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestBincount.test_bincount_minlength": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": {
    "numpy.bincount": {
     "line number": [
      499
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestClassicIntDivision": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      412
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestClassicIntDivision.test_int_dtypes": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      428,
      429
     ]
    },
    "numpy.core.tests.test_deprecations.operator": {
     "line number": [
      430
     ]
    },
    "numpy.core.tests.test_deprecations.sys": {
     "line number": [
      424,
      424
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestComparisonDeprecations": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_array_richcompare_legacy_weirdness": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      246
     ]
    },
    "FutureWarning": {
     "line number": [
      224,
      225
     ]
    },
    "TypeError": {
     "line number": [
      242
     ]
    },
    "numpy.arange": {
     "line number": [
      224,
      225
     ]
    },
    "numpy.array": {
     "line number": [
      229,
      230
     ]
    },
    "numpy.asarray": {
     "line number": [
      234
     ]
    },
    "numpy.core.tests.test_deprecations.operator": {
     "line number": [
      237,
      237,
      237,
      237
     ]
    },
    "numpy.core.tests.test_deprecations.sys": {
     "line number": [
      238
     ]
    },
    "numpy.core.tests.test_deprecations.warnings": {
     "line number": [
      227,
      228,
      240,
      241
     ]
    },
    "numpy.int16": {
     "line number": [
      231,
      232,
      234
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      229,
      230,
      231,
      232,
      243
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      242
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      224,
      225,
      246
     ]
    },
    "numpy.zeros": {
     "line number": [
      235
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_normal_types": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      182,
      182,
      183,
      183
     ]
    },
    "numpy.core.tests.test_deprecations.operator": {
     "line number": [
      174,
      174
     ]
    },
    "numpy.zeros": {
     "line number": [
      176,
      177
     ]
    },
    "object": {
     "line number": [
      182,
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_string": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      195
     ]
    },
    "ValueError": {
     "line number": [
      190
     ]
    },
    "numpy.array": {
     "line number": [
      188,
      189
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      190
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      195
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      212,
      213,
      214,
      215
     ]
    },
    "NotArray": {
     "line number": [
      206,
      207
     ]
    },
    "numpy.arange": {
     "line number": [
      206,
      207
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      212,
      213,
      214,
      215
     ]
    },
    "numpy.zeros": {
     "line number": [
      209,
      210
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "object": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray.__array__": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray.__ne__": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestDatetime64Timezone": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      249
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestDatetime64Timezone.test_datetime": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._has_pytz": {
     "line number": [
      262
     ]
    },
    "numpy.core.tests.test_deprecations.datetime": {
     "line number": [
      266
     ]
    },
    "numpy.core.tests.test_deprecations.pytest": {
     "line number": [
      262
     ]
    },
    "numpy.core.tests.test_deprecations.pytz": {
     "line number": [
      265
     ]
    },
    "numpy.datetime64": {
     "line number": [
      267
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestDatetime64Timezone.test_string": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": {
    "numpy.datetime64": {
     "line number": [
      259,
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestDatetimeEvent": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      467
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestDatetimeEvent.test_3_tuple": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": {
    "numpy.datetime64": {
     "line number": [
      470
     ]
    },
    "numpy.timedelta64": {
     "line number": [
      470
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestFromstring": {
  "data": {
   "lineno": 521,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      521
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestFromstring.test_fromstring": {
  "data": {
   "lineno": 523,
   "symbols_in_volume": {
    "numpy.fromstring": {
     "line number": [
      524
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestGeneratorSum": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      502
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestGeneratorSum.test_generator_sum": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": {
    "numpy.sum": {
     "line number": [
      505
     ]
    },
    "range": {
     "line number": [
      505
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestInvalidOrderParameterInputForFlattenArrayDeprecation": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      284
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestInvalidOrderParameterInputForFlattenArrayDeprecation.test_flatten_array_invalid_string_arg": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": {
    "numpy.zeros": {
     "line number": [
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestInvalidOrderParameterInputForFlattenArrayDeprecation.test_flatten_array_non_string_arg": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "numpy.pi": {
     "line number": [
      297
     ]
    },
    "numpy.zeros": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestLinspaceInvalidNumParameter": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestLinspaceInvalidNumParameter.test_float_arg": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      345
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestNPY_CHAR": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      447
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestNPY_CHAR.test_npy_char_deprecation": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.npy_char_deprecation": {
     "line number": [
      451,
      452
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      452
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestNonCContiguousViewDeprecation": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      270
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestNonCContiguousViewDeprecation.test_fortran_contiguous": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      280
     ]
    },
    "numpy.int8": {
     "line number": [
      281
     ]
    },
    "numpy.ones": {
     "line number": [
      280,
      281
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestNonNumericConjugate": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestNonNumericConjugate.test_conjugate": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": {
    "int": {
     "line number": [
      443,
      443
     ]
    },
    "numpy.array": {
     "line number": [
      440,
      440,
      442,
      442,
      443
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestNonTupleNDIndexDeprecation": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "object": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestNonTupleNDIndexDeprecation.test_basic": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      141,
      142,
      145,
      146
     ]
    },
    "numpy.core.tests.test_deprecations.warnings": {
     "line number": [
      139,
      140,
      144
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      145,
      146
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      141,
      142
     ]
    },
    "numpy.zeros": {
     "line number": [
      138
     ]
    },
    "slice": {
     "line number": [
      142,
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestNumericStyleTypecodes": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      374
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestNumericStyleTypecodes.test_all_dtypes": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      393
     ]
    },
    "numpy.core.tests.test_deprecations.sys": {
     "line number": [
      389
     ]
    },
    "numpy.dtype": {
     "line number": [
      393
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestPositiveOnNonNumerical": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      516
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestPositiveOnNonNumerical.test_positive_on_non_number": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      519
     ]
    },
    "numpy.core.tests.test_deprecations.operator": {
     "line number": [
      519
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestRankDeprecation": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      152
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestRankDeprecation.test": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      159
     ]
    },
    "numpy.arange": {
     "line number": [
      158
     ]
    },
    "numpy.rank": {
     "line number": [
      159
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestSctypeNA": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._VisibleDeprecationTestCase": {
     "line number": [
      508
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestSctypeNA.test_sctypeNA": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": {
    "numpy.sctypeNA": {
     "line number": [
      511
     ]
    },
    "numpy.typeNA": {
     "line number": [
      512
     ]
    },
    "numpy.typeNA.get": {
     "line number": [
      513
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestTestDeprecated": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": {
    "object": {
     "line number": [
      397
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      401
     ]
    },
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      399
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      401
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated.foo": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      406
     ]
    },
    "numpy.core.tests.test_deprecations.warnings": {
     "line number": [
      406
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestTruthTestingEmptyArrays": {
  "data": {
   "lineno": 483,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      483
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.TestTruthTestingEmptyArrays.test_1d": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      488
     ]
    },
    "numpy.array": {
     "line number": [
      488
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.TestTruthTestingEmptyArrays.test_2d": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      491,
      492,
      493
     ]
    },
    "numpy.zeros": {
     "line number": [
      491,
      492,
      493
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.Test_GetSet_NumericOps": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      526
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.Test_GetSet_NumericOps.test_get_numeric_ops": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      535
     ]
    },
    "numpy.core._multiarray_tests.getset_numericops": {
     "line number": [
      530
     ]
    },
    "numpy.set_numeric_ops": {
     "line number": [
      534,
      535
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      535
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations.Test_UPDATEIFCOPY": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      455
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations.Test_UPDATEIFCOPY.test_npy_updateifcopy_deprecation": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      462
     ]
    },
    "numpy.core._multiarray_tests.npy_updateifcopy_deprecation": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations._DeprecationTestCase": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      30
     ]
    },
    "object": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      99,
      105,
      113,
      117
     ]
    },
    "Exception": {
     "line number": [
      90
     ]
    },
    "function": {
     "line number": [
      89,
      111
     ]
    },
    "len": {
     "line number": [
      103
     ]
    },
    "numpy._NoValue": {
     "line number": [
      51,
      85
     ]
    },
    "numpy.core.tests.test_deprecations.warnings": {
     "line number": [
      107,
      108
     ]
    },
    "str": {
     "line number": [
      104
     ]
    },
    "tuple": {
     "line number": [
      90,
      112,
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_not_deprecated": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "function": {
     "line number": [
      128
     ]
    },
    "tuple": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations._DeprecationTestCase.setup": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "numpy.core.tests.test_deprecations.warnings": {
     "line number": [
      33,
      42,
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations._DeprecationTestCase.teardown": {
  "data": {
   "lineno": 46
  },
  "type": "function"
 },
 "numpy.core.tests.test_deprecations._VisibleDeprecationTestCase": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      133
     ]
    },
    "numpy.core.tests.test_deprecations._DeprecationTestCase": {
     "line number": [
      132
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_deprecations._has_pytz": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.core.tests.test_deprecations.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.getset_numericops": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.getset_numericops"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.npy_char_deprecation": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_char_deprecation"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.npy_updateifcopy_deprecation": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_updateifcopy_deprecation"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.op": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.pytz": {
  "data": {
   "shadows": "pytz"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_deprecations.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_dtype.HAS_REFCOUNT": {
  "data": {
   "shadows": "numpy.testing.HAS_REFCOUNT"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.TestBuiltin": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "object": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestBuiltin.test_bad_param": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      92,
      98,
      104
     ]
    },
    "numpy.dtype": {
     "line number": [
      92,
      98,
      104
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      92,
      98,
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestBuiltin.test_dtype": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "float": {
     "line number": [
      33
     ]
    },
    "int": {
     "line number": [
      33
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_equal": {
     "line number": [
      42,
      45
     ]
    },
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      33
     ]
    },
    "numpy.dtype": {
     "line number": [
      37
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      41,
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestBuiltin.test_equivalent_dtype_hashing": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "hash": {
     "line number": [
      57,
      57
     ]
    },
    "numpy.dtype": {
     "line number": [
      49,
      52,
      55
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      56,
      57
     ]
    },
    "numpy.uint32": {
     "line number": [
      52
     ]
    },
    "numpy.uintp": {
     "line number": [
      49
     ]
    },
    "numpy.ulonglong": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestBuiltin.test_field_order_equality": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      110,
      113
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestBuiltin.test_invalid_types": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      72,
      74,
      77,
      78,
      80,
      81,
      84,
      85,
      87,
      88
     ]
    },
    "numpy.dtype": {
     "line number": [
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      71,
      71,
      72,
      73,
      74,
      76,
      77,
      78,
      80,
      81,
      83,
      84,
      85,
      87,
      88
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      72,
      74,
      77,
      78,
      80,
      81,
      84,
      85,
      87,
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestBuiltin.test_run": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      26
     ]
    },
    "float": {
     "line number": [
      26
     ]
    },
    "hash": {
     "line number": [
      31
     ]
    },
    "int": {
     "line number": [
      26
     ]
    },
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      26
     ]
    },
    "numpy.dtype": {
     "line number": [
      30
     ]
    },
    "numpy.int32": {
     "line number": [
      26
     ]
    },
    "numpy.unicode": {
     "line number": [
      27
     ]
    },
    "object": {
     "line number": [
      26
     ]
    },
    "str": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestDtypeAttributeDeletion": {
  "data": {
   "lineno": 811,
   "symbols_in_volume": {
    "object": {
     "line number": [
      811
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_non_writable_attributes_deletion": {
  "data": {
   "lineno": 813,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      820
     ]
    },
    "delattr": {
     "line number": [
      820
     ]
    },
    "numpy.double": {
     "line number": [
      814
     ]
    },
    "numpy.dtype": {
     "line number": [
      814
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      820
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_writable_attributes_deletion": {
  "data": {
   "lineno": 822,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      826
     ]
    },
    "delattr": {
     "line number": [
      826
     ]
    },
    "numpy.double": {
     "line number": [
      823
     ]
    },
    "numpy.dtype": {
     "line number": [
      823
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      826
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestDtypeAttributes": {
  "data": {
   "lineno": 829,
   "symbols_in_volume": {
    "object": {
     "line number": [
      829
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestDtypeAttributes.test_descr_has_trailing_void": {
  "data": {
   "lineno": 830,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      832,
      837
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      838
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestDtypeAttributes.test_name_builtin": {
  "data": {
   "lineno": 840,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      840
     ]
    },
    "numpy.dtype": {
     "line number": [
      845
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      845
     ]
    },
    "numpy.typeDict.values": {
     "line number": [
      840
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestDtypeAttributes.test_name_dtype_subclass": {
  "data": {
   "lineno": 847,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      851
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      851
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestDtypeAttributes.test_name_dtype_subclass.user_def_subcls": {
  "data": {
   "lineno": 849,
   "symbols_in_volume": {
    "numpy.void": {
     "line number": [
      849
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes": {
  "data": {
   "lineno": 938,
   "symbols_in_volume": {
    "object": {
     "line number": [
      938
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.check": {
  "data": {
   "lineno": 940,
   "symbols_in_volume": {
    "ctype": {
     "line number": [
      944
     ]
    },
    "numpy.dtype": {
     "line number": [
      942,
      943,
      944
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      943,
      944
     ]
    },
    "staticmethod": {
     "line number": [
      940
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_array": {
  "data": {
   "lineno": 946,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      947
     ]
    },
    "numpy.uint8": {
     "line number": [
      948,
      949,
      950,
      951,
      952
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_big_endian_structure": {
  "data": {
   "lineno": 1106,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      1112
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_big_endian_structure.PaddedStruct": {
  "data": {
   "lineno": 1107,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1107,
      1109,
      1110
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_big_endian_structure_packed": {
  "data": {
   "lineno": 1074,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      1081
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_big_endian_structure_packed.BigEndStruct": {
  "data": {
   "lineno": 1075,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1075,
      1077,
      1078
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_bit_fields": {
  "data": {
   "lineno": 966,
   "symbols_in_volume": {
    "BitfieldStruct": {
     "line number": [
      973
     ]
    },
    "TypeError": {
     "line number": [
      972,
      973
     ]
    },
    "numpy.dtype": {
     "line number": [
      972,
      973
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      972,
      973
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_bit_fields.BitfieldStruct": {
  "data": {
   "lineno": 967,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      967,
      969,
      970
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_large_packed_structure": {
  "data": {
   "lineno": 1055,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1067
     ]
    },
    "numpy.dtype": {
     "line number": [
      1067
     ]
    },
    "numpy.uint16": {
     "line number": [
      1068,
      1068
     ]
    },
    "numpy.uint32": {
     "line number": [
      1068,
      1068
     ]
    },
    "numpy.uint8": {
     "line number": [
      1068,
      1068,
      1068
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_large_packed_structure.PackedStructure": {
  "data": {
   "lineno": 1056,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1056,
      1059,
      1060,
      1061,
      1062,
      1063,
      1064,
      1065
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_little_endian_structure": {
  "data": {
   "lineno": 1094,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      1100
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_little_endian_structure.PaddedStruct": {
  "data": {
   "lineno": 1095,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1095,
      1097,
      1098
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_little_endian_structure_packed": {
  "data": {
   "lineno": 1084,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      1091
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_little_endian_structure_packed.LittleEndStruct": {
  "data": {
   "lineno": 1085,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1085,
      1087,
      1088
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_packed_structure": {
  "data": {
   "lineno": 1042,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      1049
     ]
    },
    "numpy.uint16": {
     "line number": [
      1051
     ]
    },
    "numpy.uint8": {
     "line number": [
      1050
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_packed_structure.PackedStructure": {
  "data": {
   "lineno": 1043,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1043,
      1046,
      1047
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_padded_structure": {
  "data": {
   "lineno": 954,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      960
     ]
    },
    "numpy.uint16": {
     "line number": [
      962
     ]
    },
    "numpy.uint8": {
     "line number": [
      961
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_padded_structure.PaddedStruct": {
  "data": {
   "lineno": 955,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      955,
      957,
      958
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_pointer": {
  "data": {
   "lineno": 975,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      977
     ]
    },
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      976,
      976
     ]
    },
    "numpy.dtype": {
     "line number": [
      977
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      977
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_simple_endian_types": {
  "data": {
   "lineno": 1118,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1119,
      1120,
      1121,
      1122
     ]
    },
    "numpy.dtype": {
     "line number": [
      1119,
      1120,
      1121,
      1122
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_union": {
  "data": {
   "lineno": 982,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      988
     ]
    },
    "numpy.dtype": {
     "line number": [
      988
     ]
    },
    "numpy.uint16": {
     "line number": [
      990
     ]
    },
    "numpy.uint8": {
     "line number": [
      990
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_union.Union": {
  "data": {
   "lineno": 983,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      983,
      985,
      986
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_union_packed": {
  "data": {
   "lineno": 1019,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1034
     ]
    },
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1038
     ]
    },
    "numpy.dtype": {
     "line number": [
      1034
     ]
    },
    "numpy.uint16": {
     "line number": [
      1036
     ]
    },
    "numpy.uint32": {
     "line number": [
      1036,
      1036
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_union_packed.Struct": {
  "data": {
   "lineno": 1020,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1020,
      1022,
      1023
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_union_packed.Union": {
  "data": {
   "lineno": 1026,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1026,
      1029,
      1030,
      1031
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_union_with_struct_packed": {
  "data": {
   "lineno": 996,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1011
     ]
    },
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1015
     ]
    },
    "numpy.dtype": {
     "line number": [
      1011
     ]
    },
    "numpy.uint16": {
     "line number": [
      1013
     ]
    },
    "numpy.uint32": {
     "line number": [
      1013,
      1013
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_union_with_struct_packed.Struct": {
  "data": {
   "lineno": 997,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      997,
      1000,
      1001
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_union_with_struct_packed.Union": {
  "data": {
   "lineno": 1004,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      1004,
      1006,
      1007,
      1008
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestFromCTypes.test_void_pointer": {
  "data": {
   "lineno": 979,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.ctypes": {
     "line number": [
      980
     ]
    },
    "numpy.uintp": {
     "line number": [
      980
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestMetadata": {
  "data": {
   "lineno": 636,
   "symbols_in_volume": {
    "object": {
     "line number": [
      636
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestMetadata.test_base_metadata_copied": {
  "data": {
   "lineno": 654,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      655,
      655
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      656
     ]
    },
    "numpy.void": {
     "line number": [
      655
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestMetadata.test_metadata_rejects_nondict": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      646,
      647,
      648
     ]
    },
    "int": {
     "line number": [
      646,
      647,
      648
     ]
    },
    "numpy.dtype": {
     "line number": [
      646,
      647,
      648
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      646,
      647,
      648
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestMetadata.test_metadata_takes_dict": {
  "data": {
   "lineno": 641,
   "symbols_in_volume": {
    "int": {
     "line number": [
      642
     ]
    },
    "numpy.dtype": {
     "line number": [
      642
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      643
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestMetadata.test_nested_metadata": {
  "data": {
   "lineno": 650,
   "symbols_in_volume": {
    "int": {
     "line number": [
      651
     ]
    },
    "numpy.dtype": {
     "line number": [
      651,
      651
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      652
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestMetadata.test_no_metadata": {
  "data": {
   "lineno": 637,
   "symbols_in_volume": {
    "int": {
     "line number": [
      638
     ]
    },
    "numpy.dtype": {
     "line number": [
      638
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      639
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestMonsterType": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": {
    "object": {
     "line number": [
      618
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestMonsterType.test1": {
  "data": {
   "lineno": 621,
   "symbols_in_volume": {
    "int": {
     "line number": [
      624,
      625,
      626,
      627,
      630,
      632
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_equal": {
     "line number": [
      628,
      634
     ]
    },
    "numpy.dtype": {
     "line number": [
      622,
      624,
      625,
      626,
      627,
      630,
      631,
      632,
      633
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestPickling": {
  "data": {
   "lineno": 854,
   "symbols_in_volume": {
    "object": {
     "line number": [
      854
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestPickling.check_pickling": {
  "data": {
   "lineno": 856,
   "symbols_in_volume": {
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      857
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      858
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      858
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      859,
      860,
      862,
      866,
      867
     ]
    },
    "numpy.zeros": {
     "line number": [
      864,
      865
     ]
    },
    "range": {
     "line number": [
      857
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestPickling.test_builtin": {
  "data": {
   "lineno": 869,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      870
     ]
    },
    "complex": {
     "line number": [
      869
     ]
    },
    "float": {
     "line number": [
      869
     ]
    },
    "int": {
     "line number": [
      869
     ]
    },
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      869
     ]
    },
    "numpy.dtype": {
     "line number": [
      872
     ]
    },
    "numpy.int32": {
     "line number": [
      869
     ]
    },
    "numpy.unicode": {
     "line number": [
      870
     ]
    },
    "object": {
     "line number": [
      869
     ]
    },
    "str": {
     "line number": [
      869
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestPickling.test_datetime": {
  "data": {
   "lineno": 900,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      900,
      901
     ]
    },
    "numpy.dtype": {
     "line number": [
      904,
      907
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestPickling.test_metadata": {
  "data": {
   "lineno": 910,
   "symbols_in_volume": {
    "int": {
     "line number": [
      911
     ]
    },
    "numpy.dtype": {
     "line number": [
      911
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestPickling.test_structured": {
  "data": {
   "lineno": 874,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      875
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestPickling.test_structured_aligned": {
  "data": {
   "lineno": 878,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      879
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestPickling.test_structured_padded": {
  "data": {
   "lineno": 886,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      887
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestPickling.test_structured_titles": {
  "data": {
   "lineno": 894,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      895
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestPickling.test_structured_unaligned": {
  "data": {
   "lineno": 882,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      883
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "object": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_aligned_size": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      167,
      169,
      171,
      175,
      178,
      182,
      188,
      195,
      199,
      205,
      212
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      168,
      170,
      174,
      176,
      181,
      187,
      191,
      192,
      193,
      198,
      204,
      208,
      209,
      210,
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_bool_commastring": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "len": {
     "line number": [
      292
     ]
    },
    "numpy.dtype": {
     "line number": [
      291,
      294
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      292,
      294
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_comma_datetime": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      268,
      269
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      269
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_different_names": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "int": {
     "line number": [
      127,
      128
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_not_equal": {
     "line number": [
      129
     ]
    },
    "numpy.dtype": {
     "line number": [
      127,
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_different_titles": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.assert_dtype_not_equal": {
     "line number": [
      139
     ]
    },
    "numpy.dtype": {
     "line number": [
      133,
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_equivalent_record": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "int": {
     "line number": [
      121,
      122
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_equal": {
     "line number": [
      123
     ]
    },
    "numpy.dtype": {
     "line number": [
      121,
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_fields_by_index": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      317
     ]
    },
    "TypeError": {
     "line number": [
      319,
      320
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_equal": {
     "line number": [
      313,
      314,
      315,
      316
     ]
    },
    "numpy.core.tests.test_dtype.operator": {
     "line number": [
      319,
      320
     ]
    },
    "numpy.dtype": {
     "line number": [
      312,
      313,
      314
     ]
    },
    "numpy.float32": {
     "line number": [
      312,
      314
     ]
    },
    "numpy.int8": {
     "line number": [
      312,
      313,
      322
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      322
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      317,
      319,
      320
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_from_dict_with_zero_width_field": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": {
    "int": {
     "line number": [
      282,
      284
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_equal": {
     "line number": [
      286
     ]
    },
    "numpy.dtype": {
     "line number": [
      282,
      283
     ]
    },
    "numpy.float32": {
     "line number": [
      282,
      284
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      287,
      288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_from_dictproxy": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.assert_dtype_equal": {
     "line number": [
      276
     ]
    },
    "numpy.dtype": {
     "line number": [
      275,
      276,
      277
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      278
     ]
    },
    "numpy.void": {
     "line number": [
      277
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_mutate": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "int": {
     "line number": [
      143,
      144,
      145
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_equal": {
     "line number": [
      146,
      149,
      153
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_not_equal": {
     "line number": [
      147,
      150,
      154
     ]
    },
    "numpy.dtype": {
     "line number": [
      143,
      144,
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_nonint_offsets": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      303
     ]
    },
    "TypeError": {
     "line number": [
      302,
      304
     ]
    },
    "ValueError": {
     "line number": [
      305
     ]
    },
    "make_dtype": {
     "line number": [
      308
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      302,
      303,
      304,
      305
     ]
    },
    "numpy.uint32": {
     "line number": [
      308
     ]
    },
    "numpy.zeros": {
     "line number": [
      309
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_nonint_offsets.make_dtype": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_not_lists": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      160,
      162
     ]
    },
    "dict": {
     "line number": [
      161,
      163
     ]
    },
    "numpy.dtype": {
     "line number": [
      160,
      162
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      160,
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestRecord.test_union_struct": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      246,
      250,
      254,
      258
     ]
    },
    "numpy.array": {
     "line number": [
      225,
      239,
      240
     ]
    },
    "numpy.dtype": {
     "line number": [
      222,
      230,
      234,
      246,
      250,
      254,
      258,
      263,
      265
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      224,
      228,
      232,
      241,
      242,
      243,
      244
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      246,
      250,
      254,
      258
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestString": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": {
    "object": {
     "line number": [
      658
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestString.test_base_dtype_with_object_type": {
  "data": {
   "lineno": 784,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      786
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestString.test_complex_dtype_str": {
  "data": {
   "lineno": 659,
   "symbols_in_volume": {
    "eval": {
     "line number": [
      687
     ]
    },
    "numpy.dtype": {
     "line number": [
      660,
      672,
      687,
      689,
      697,
      710,
      720
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      664,
      678,
      687,
      692,
      702,
      713,
      721
     ]
    },
    "str": {
     "line number": [
      664,
      678,
      687,
      692,
      702,
      713,
      721
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestString.test_dtype_str_with_long_in_shape": {
  "data": {
   "lineno": 779,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      779
     ]
    },
    "numpy.core.tests.test_dtype.sys": {
     "line number": [
      779
     ]
    },
    "numpy.dtype": {
     "line number": [
      782
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestString.test_empty_string_to_object": {
  "data": {
   "lineno": 788,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      790
     ]
    },
    "object": {
     "line number": [
      790
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestString.test_repr_str_subarray": {
  "data": {
   "lineno": 774,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      775
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      776,
      777
     ]
    },
    "repr": {
     "line number": [
      776
     ]
    },
    "str": {
     "line number": [
      777
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestString.test_repr_structured": {
  "data": {
   "lineno": 724,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      725,
      735
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      729,
      739
     ]
    },
    "repr": {
     "line number": [
      729,
      739
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestString.test_repr_structured_datetime": {
  "data": {
   "lineno": 769,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      770
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      771
     ]
    },
    "repr": {
     "line number": [
      771
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestString.test_repr_structured_not_packed": {
  "data": {
   "lineno": 744,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      745,
      758
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      750,
      762
     ]
    },
    "repr": {
     "line number": [
      750,
      762
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestString.test_void_subclass_fields": {
  "data": {
   "lineno": 804,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      805
     ]
    },
    "numpy.record": {
     "line number": [
      805
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      806,
      807,
      808
     ]
    },
    "repr": {
     "line number": [
      806
     ]
    },
    "str": {
     "line number": [
      807
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestString.test_void_subclass_sized": {
  "data": {
   "lineno": 798,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      799
     ]
    },
    "numpy.record": {
     "line number": [
      799
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      800,
      801,
      802
     ]
    },
    "repr": {
     "line number": [
      800
     ]
    },
    "str": {
     "line number": [
      801
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestString.test_void_subclass_unsized": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      793
     ]
    },
    "numpy.record": {
     "line number": [
      793
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      794,
      795,
      796
     ]
    },
    "repr": {
     "line number": [
      794
     ]
    },
    "str": {
     "line number": [
      795
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestStructuredDtypeSparseFields": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      593,
      595
     ]
    },
    "object": {
     "line number": [
      588
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestStructuredDtypeSparseFields.test_sparse_field_assignment": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      598,
      599
     ]
    },
    "numpy.finfo": {
     "line number": [
      604
     ]
    },
    "numpy.float32": {
     "line number": [
      604
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      606
     ]
    },
    "numpy.zeros": {
     "line number": [
      601,
      606
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestStructuredDtypeSparseFields.test_sparse_field_assignment_fancy": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": {
    "numpy.finfo": {
     "line number": [
      613
     ]
    },
    "numpy.float32": {
     "line number": [
      613
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      615
     ]
    },
    "numpy.zeros": {
     "line number": [
      610,
      615
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestStructuredObjectRefcounting": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      488
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      488
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_create_delete": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": {
    "creation_func": {
     "line number": [
      507
     ]
    },
    "numpy.core.tests.test_dtype.gc": {
     "line number": [
      505
     ]
    },
    "numpy.core.tests.test_dtype.iter_struct_object_dtypes": {
     "line number": [
      494
     ]
    },
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      493,
      495,
      496,
      498
     ]
    },
    "numpy.core.tests.test_dtype.sys": {
     "line number": [
      506,
      509,
      512
     ]
    },
    "numpy.empty": {
     "line number": [
      496
     ]
    },
    "numpy.ones": {
     "line number": [
      499
     ]
    },
    "numpy.zeros": {
     "line number": [
      500
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_indexing": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.gc": {
     "line number": [
      551,
      561
     ]
    },
    "numpy.core.tests.test_dtype.iter_struct_object_dtypes": {
     "line number": [
      536
     ]
    },
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      535,
      537
     ]
    },
    "numpy.core.tests.test_dtype.sys": {
     "line number": [
      552,
      553,
      556,
      562,
      563
     ]
    },
    "numpy.zeros": {
     "line number": [
      549
     ]
    },
    "slice": {
     "line number": [
      540
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_item_setting": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      523
     ]
    },
    "numpy.core.tests.test_dtype.gc": {
     "line number": [
      521,
      531
     ]
    },
    "numpy.core.tests.test_dtype.iter_struct_object_dtypes": {
     "line number": [
      516
     ]
    },
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      515
     ]
    },
    "numpy.core.tests.test_dtype.sys": {
     "line number": [
      522,
      524,
      526,
      528,
      532,
      533
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_take_and_repeat": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      576
     ]
    },
    "numpy.core.tests.test_dtype.gc": {
     "line number": [
      577,
      583
     ]
    },
    "numpy.core.tests.test_dtype.iter_struct_object_dtypes": {
     "line number": [
      568
     ]
    },
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      567
     ]
    },
    "numpy.core.tests.test_dtype.sys": {
     "line number": [
      578,
      580,
      584
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "object": {
     "line number": [
      325
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_alignment": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      446,
      447
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      448
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_equivalent_record": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": {
    "int": {
     "line number": [
      336,
      337
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_equal": {
     "line number": [
      338
     ]
    },
    "numpy.dtype": {
     "line number": [
      336,
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_nonequivalent_record": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": {
    "int": {
     "line number": [
      342,
      343,
      346,
      347,
      350,
      351
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_not_equal": {
     "line number": [
      344,
      348,
      352
     ]
    },
    "numpy.dtype": {
     "line number": [
      342,
      343,
      346,
      347,
      350,
      351
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_shape_equal": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": {
    "int": {
     "line number": [
      358,
      358
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_equal": {
     "line number": [
      356,
      357,
      358,
      359,
      361
     ]
    },
    "numpy.dtype": {
     "line number": [
      356,
      356,
      357,
      357,
      358,
      358,
      359,
      359,
      361,
      361
     ]
    },
    "tuple": {
     "line number": [
      356
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_shape_invalid": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      435,
      436,
      437,
      439,
      441,
      442
     ]
    },
    "numpy.dtype": {
     "line number": [
      435,
      436,
      437,
      439,
      441,
      442
     ]
    },
    "numpy.iinfo": {
     "line number": [
      432,
      433
     ]
    },
    "numpy.intc": {
     "line number": [
      432
     ]
    },
    "numpy.intp": {
     "line number": [
      433
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      435,
      436,
      437,
      439,
      441,
      442
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_shape_matches_ndim": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      414,
      418,
      422,
      426
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      415,
      416,
      419,
      420,
      423,
      424,
      427,
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_shape_monster": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.assert_dtype_not_equal": {
     "line number": [
      371,
      374,
      377,
      380
     ]
    },
    "numpy.dtype": {
     "line number": [
      372,
      373,
      375,
      376,
      378,
      379,
      381,
      382
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_shape_sequence": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": {
    "IntLike": {
     "line number": [
      406,
      409
     ]
    },
    "int": {
     "line number": [
      392,
      408,
      411
     ]
    },
    "isinstance": {
     "line number": [
      391,
      392,
      395,
      407,
      408,
      410,
      411
     ]
    },
    "numpy.array": {
     "line number": [
      387
     ]
    },
    "numpy.dtype": {
     "line number": [
      390,
      394,
      406,
      409
     ]
    },
    "numpy.int16": {
     "line number": [
      387
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      391,
      392,
      395,
      407,
      408,
      410,
      411
     ]
    },
    "tuple": {
     "line number": [
      391,
      395,
      407,
      410
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_shape_sequence.IntLike": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "object": {
     "line number": [
      398
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_shape_sequence.IntLike.__index__": {
  "data": {
   "lineno": 399
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_shape_sequence.IntLike.__int__": {
  "data": {
   "lineno": 402
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_shape_simple": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.assert_dtype_not_equal": {
     "line number": [
      365,
      366,
      367
     ]
    },
    "numpy.dtype": {
     "line number": [
      365,
      365,
      366,
      366,
      367,
      367
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.TestSubarray.test_single_subarray": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": {
    "int": {
     "line number": [
      327,
      328
     ]
    },
    "numpy.core.tests.test_dtype.assert_dtype_equal": {
     "line number": [
      329
     ]
    },
    "numpy.dtype": {
     "line number": [
      327,
      328
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      331,
      332
     ]
    },
    "tuple": {
     "line number": [
      331,
      332
     ]
    },
    "type": {
     "line number": [
      331,
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.assert_dtype_equal": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "hash": {
     "line number": [
      17,
      17
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      16,
      17
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.assert_dtype_not_equal": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "hash": {
     "line number": [
      22,
      22
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      21,
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.ctypes": {
  "data": {
   "shadows": "ctypes"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.gc": {
  "data": {
   "shadows": "gc"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.iter_struct_object_dtypes": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "numpy.core.tests.test_dtype.pytest": {
     "line number": [
      471,
      475,
      480,
      485
     ]
    },
    "numpy.dtype": {
     "line number": [
      469,
      473,
      477,
      482
     ]
    },
    "object": {
     "line number": [
      467
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.pickle": {
  "data": {
   "shadows": "numpy.core.numeric.pickle"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.rational": {
  "data": {
   "shadows": "numpy.core._rational_tests.rational"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_dtype.test_dtypes_are_true": {
  "data": {
   "lineno": 925,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      927,
      928,
      929
     ]
    },
    "numpy.dtype": {
     "line number": [
      927,
      928,
      929
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.test_invalid_dtype_string": {
  "data": {
   "lineno": 932,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      934,
      935
     ]
    },
    "numpy.dtype": {
     "line number": [
      934,
      935
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      934,
      935
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_dtype.test_rational_dtype": {
  "data": {
   "lineno": 915,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      918
     ]
    },
    "numpy.array": {
     "line number": [
      917,
      922
     ]
    },
    "numpy.core._rational_tests.rational": {
     "line number": [
      917,
      921,
      922
     ]
    },
    "numpy.dtype": {
     "line number": [
      922
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      922
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      918
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum": {
  "data": {
   "symbols_in_volume": {
    "dict": {
     "line number": [
      14
     ]
    },
    "numpy.array": {
     "line number": [
      13
     ]
    },
    "numpy.core.tests.test_einsum.chars": {
     "line number": [
      14
     ]
    },
    "numpy.core.tests.test_einsum.sizes": {
     "line number": [
      14
     ]
    },
    "zip": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_einsum.TestEinsum": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "object": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_einsum.TestEinsum.check_einsum_sums": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "Ellipsis": {
     "line number": [
      248,
      248,
      256,
      256,
      263,
      263,
      281,
      281,
      289,
      289,
      297,
      297
     ]
    },
    "numpy.ComplexWarning": {
     "line number": [
      311
     ]
    },
    "numpy.arange": {
     "line number": [
      238,
      245,
      253,
      260,
      268,
      277,
      278,
      286,
      287,
      293,
      294,
      302,
      303,
      315,
      316,
      322,
      336,
      337,
      343,
      359,
      360,
      367,
      368,
      369,
      384,
      385,
      386,
      393,
      409,
      410,
      416,
      438,
      446,
      468,
      479,
      480,
      481
     ]
    },
    "numpy.array": {
     "line number": [
      428,
      429,
      430,
      494,
      495
     ]
    },
    "numpy.dot": {
     "line number": [
      318,
      320,
      326,
      332,
      339,
      341,
      347,
      353,
      362,
      364,
      373,
      379,
      450,
      459
     ]
    },
    "numpy.dtype": {
     "line number": [
      408,
      408,
      447,
      472,
      476
     ]
    },
    "numpy.einsum": {
     "line number": [
      239,
      241,
      246,
      248,
      254,
      256,
      261,
      263,
      269,
      271,
      275,
      279,
      281,
      288,
      289,
      295,
      297,
      304,
      306,
      317,
      319,
      323,
      329,
      338,
      340,
      344,
      350,
      361,
      363,
      370,
      376,
      388,
      390,
      394,
      401,
      411,
      413,
      417,
      422,
      431,
      434,
      439,
      440,
      441,
      442,
      448,
      450,
      451,
      452,
      453,
      454,
      456,
      458,
      460,
      461,
      462,
      464,
      470,
      474,
      482,
      487,
      488,
      489,
      496,
      497,
      503,
      505,
      507,
      514,
      516,
      518
     ]
    },
    "numpy.eye": {
     "line number": [
      512
     ]
    },
    "numpy.full": {
     "line number": [
      509
     ]
    },
    "numpy.inner": {
     "line number": [
      288,
      290,
      296,
      298
     ]
    },
    "numpy.logical_and": {
     "line number": [
      433,
      433,
      436,
      436
     ]
    },
    "numpy.multiply": {
     "line number": [
      280,
      282,
      449,
      457
     ]
    },
    "numpy.ones": {
     "line number": [
      485,
      486,
      500,
      501,
      513
     ]
    },
    "numpy.outer": {
     "line number": [
      305,
      307
     ]
    },
    "numpy.sum": {
     "line number": [
      240,
      242,
      247,
      249,
      255,
      257,
      262,
      264,
      439,
      440,
      441,
      442,
      453,
      454,
      463,
      465,
      471,
      475
     ]
    },
    "numpy.tensordot": {
     "line number": [
      412,
      414,
      419,
      424
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      487,
      489,
      496,
      497,
      503,
      507,
      514,
      516,
      518
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      239,
      241,
      246,
      248,
      254,
      256,
      261,
      263,
      269,
      271,
      275,
      279,
      281,
      288,
      289,
      295,
      297,
      304,
      306,
      317,
      319,
      325,
      331,
      338,
      340,
      346,
      352,
      361,
      363,
      372,
      378,
      388,
      390,
      398,
      405,
      411,
      413,
      419,
      424,
      431,
      434,
      439,
      440,
      441,
      442,
      448,
      450,
      451,
      452,
      453,
      454,
      456,
      458,
      460,
      461,
      462,
      464,
      471,
      472,
      475,
      476,
      482
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      310
     ]
    },
    "numpy.trace": {
     "line number": [
      270,
      272
     ]
    },
    "object": {
     "line number": [
      468
     ]
    },
    "range": {
     "line number": [
      237,
      244,
      252,
      259,
      267,
      276,
      285,
      292,
      301,
      314,
      335,
      357,
      366,
      445
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.optimize_compare": {
  "data": {
   "lineno": 736,
   "symbols_in_volume": {
    "numpy.core.tests.test_einsum.global_size_dict": {
     "line number": [
      743
     ]
    },
    "numpy.einsum": {
     "line number": [
      748,
      749,
      751
     ]
    },
    "numpy.random.rand": {
     "line number": [
      744
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      750,
      752
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_broadcasting_dot_cases": {
  "data": {
   "lineno": 837,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      854
     ]
    },
    "numpy.random.rand": {
     "line number": [
      840,
      841,
      842,
      843,
      848,
      849
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_collapse": {
  "data": {
   "lineno": 776
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_combined_views_mapping": {
  "data": {
   "lineno": 831,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      833
     ]
    },
    "numpy.einsum": {
     "line number": [
      834
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      835
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_complex": {
  "data": {
   "lineno": 765
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_edge_cases": {
  "data": {
   "lineno": 794
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_all_contig_non_contig_output": {
  "data": {
   "lineno": 698,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      706,
      710,
      718
     ]
    },
    "numpy.float32": {
     "line number": [
      717
     ]
    },
    "numpy.ones": {
     "line number": [
      701,
      702,
      703,
      709,
      714,
      715,
      717
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      707,
      711,
      719
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_broadcast": {
  "data": {
   "lineno": 616,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      624,
      625,
      632,
      633,
      642,
      643,
      651,
      652
     ]
    },
    "numpy.einsum": {
     "line number": [
      626,
      628,
      629,
      630,
      634,
      636,
      637,
      638,
      639,
      644,
      646,
      647,
      648,
      653,
      655
     ]
    },
    "numpy.prod": {
     "line number": [
      642
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      628,
      629,
      630,
      636,
      637,
      638,
      639,
      646,
      647,
      648,
      655
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_errors": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      25,
      28,
      32,
      40,
      44,
      48
     ]
    },
    "ValueError": {
     "line number": [
      21,
      22,
      36,
      51,
      52,
      54,
      57,
      58,
      59,
      60,
      61,
      62,
      65,
      66,
      67,
      68,
      71,
      72,
      73,
      76,
      79,
      83,
      85,
      89,
      91
     ]
    },
    "numpy.arange": {
     "line number": [
      84,
      86,
      89,
      92
     ]
    },
    "numpy.einsum": {
     "line number": [
      21,
      22,
      25,
      28,
      32,
      36,
      40,
      44,
      48,
      51,
      52,
      54,
      57,
      58,
      59,
      60,
      61,
      62,
      65,
      66,
      67,
      68,
      71,
      72,
      73,
      76,
      79,
      83,
      85,
      89,
      91
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      21,
      22,
      25,
      28,
      32,
      36,
      40,
      44,
      48,
      51,
      52,
      54,
      57,
      58,
      59,
      60,
      61,
      62,
      65,
      66,
      67,
      68,
      71,
      72,
      73,
      76,
      79,
      83,
      85,
      89,
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_fixed_collapsingbug": {
  "data": {
   "lineno": 688,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      694
     ]
    },
    "numpy.einsum": {
     "line number": [
      693
     ]
    },
    "numpy.random.normal": {
     "line number": [
      691
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      696
     ]
    },
    "numpy.zeros": {
     "line number": [
      692
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_fixedstridebug": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      675,
      676,
      682,
      683
     ]
    },
    "numpy.einsum": {
     "line number": [
      677,
      684
     ]
    },
    "numpy.float32": {
     "line number": [
      675,
      683
     ]
    },
    "numpy.float64": {
     "line number": [
      682
     ]
    },
    "numpy.int16": {
     "line number": [
      676
     ]
    },
    "numpy.tensordot": {
     "line number": [
      678,
      685
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      679,
      686
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_misc": {
  "data": {
   "lineno": 570,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      595,
      596,
      597
     ]
    },
    "numpy.einsum": {
     "line number": [
      575,
      576,
      579,
      580,
      581,
      582,
      588,
      589,
      590,
      591,
      598,
      601
     ]
    },
    "numpy.int64": {
     "line number": [
      586,
      587
     ]
    },
    "numpy.ones": {
     "line number": [
      573,
      574,
      586,
      587
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      575,
      576,
      579,
      580,
      581,
      582,
      588,
      590,
      598,
      601
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_cfloat128": {
  "data": {
   "lineno": 564
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_cfloat64": {
  "data": {
   "lineno": 560
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_clongdouble": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": {
    "numpy.clongdouble": {
     "line number": [
      568
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_float16": {
  "data": {
   "lineno": 547
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_float32": {
  "data": {
   "lineno": 550
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_float64": {
  "data": {
   "lineno": 553
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_int16": {
  "data": {
   "lineno": 527
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_int32": {
  "data": {
   "lineno": 533
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_int64": {
  "data": {
   "lineno": 541
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_int8": {
  "data": {
   "lineno": 521
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_longdouble": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": {
    "numpy.longdouble": {
     "line number": [
      558
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_uint16": {
  "data": {
   "lineno": 530
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_uint32": {
  "data": {
   "lineno": 537
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_uint64": {
  "data": {
   "lineno": 544
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_uint8": {
  "data": {
   "lineno": 524
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_einsum_views": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "Ellipsis": {
     "line number": [
      103,
      153,
      153,
      162,
      162,
      171,
      171,
      187,
      187,
      195,
      195,
      204,
      204
     ]
    },
    "numpy.arange": {
     "line number": [
      97,
      122,
      134,
      146,
      210,
      222
     ]
    },
    "numpy.einsum": {
     "line number": [
      100,
      103,
      106,
      110,
      115,
      118,
      125,
      129,
      137,
      141,
      149,
      153,
      157,
      162,
      167,
      171,
      175,
      179,
      183,
      187,
      191,
      195,
      199,
      204,
      213,
      217,
      225,
      229
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      101,
      104,
      107,
      111,
      116,
      119,
      126,
      130,
      138,
      142,
      150,
      154,
      158,
      163,
      168,
      172,
      176,
      180,
      184,
      188,
      192,
      196,
      200,
      205,
      214,
      218,
      226,
      230
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      108,
      112,
      127,
      131,
      139,
      143,
      151,
      155,
      159,
      164,
      169,
      173,
      177,
      181,
      185,
      189,
      193,
      197,
      201,
      206,
      215,
      219,
      227,
      231
     ]
    },
    "range": {
     "line number": [
      139,
      143,
      151,
      155,
      159,
      164,
      169,
      173,
      177,
      181,
      185,
      189,
      193,
      197,
      201,
      206,
      215,
      219
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_expand": {
  "data": {
   "lineno": 785
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_hadamard_like_products": {
  "data": {
   "lineno": 754
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_index_transformations": {
  "data": {
   "lineno": 759
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_inner_product": {
  "data": {
   "lineno": 809
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_out_is_res": {
  "data": {
   "lineno": 731,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      732
     ]
    },
    "numpy.einsum": {
     "line number": [
      733
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_random_cases": {
  "data": {
   "lineno": 817
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_small_boolean_arrays": {
  "data": {
   "lineno": 721,
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      724,
      726,
      727
     ]
    },
    "numpy.einsum": {
     "line number": [
      728
     ]
    },
    "numpy.ones": {
     "line number": [
      727
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      729
     ]
    },
    "numpy.zeros": {
     "line number": [
      724,
      726
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsum.test_subscript_range": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      613,
      614
     ]
    },
    "numpy.einsum": {
     "line number": [
      610,
      611,
      612,
      613,
      614
     ]
    },
    "numpy.ones": {
     "line number": [
      608,
      609
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      613,
      614
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsumPath": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": {
    "object": {
     "line number": [
      858
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_einsum.TestEinsumPath.assert_path_equal": {
  "data": {
   "lineno": 870,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      875
     ]
    },
    "len": {
     "line number": [
      872,
      872,
      874
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      873,
      877
     ]
    },
    "range": {
     "line number": [
      874
     ]
    },
    "tuple": {
     "line number": [
      875
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsumPath.build_operands": {
  "data": {
   "lineno": 859,
   "symbols_in_volume": {
    "numpy.core.tests.test_einsum.global_size_dict": {
     "line number": [
      859
     ]
    },
    "numpy.random.rand": {
     "line number": [
      866
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsumPath.test_edge_paths": {
  "data": {
   "lineno": 922,
   "symbols_in_volume": {
    "numpy.einsum_path": {
     "line number": [
      927,
      930,
      935,
      938,
      943,
      946,
      951,
      954,
      960,
      963
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsumPath.test_long_paths": {
  "data": {
   "lineno": 897,
   "symbols_in_volume": {
    "numpy.einsum_path": {
     "line number": [
      902,
      906,
      912,
      917
     ]
    },
    "print": {
     "line number": [
      913,
      918
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsumPath.test_memory_contraints": {
  "data": {
   "lineno": 879,
   "symbols_in_volume": {
    "numpy.einsum_path": {
     "line number": [
      884,
      887,
      891,
      894
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsumPath.test_path_type_input": {
  "data": {
   "lineno": 966,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      981,
      982
     ]
    },
    "numpy.einsum_path": {
     "line number": [
      970,
      973,
      977
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      983
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.TestEinsumPath.test_spaces": {
  "data": {
   "lineno": 985,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      987
     ]
    },
    "numpy.core.tests.test_einsum.itertools": {
     "line number": [
      988
     ]
    },
    "numpy.einsum": {
     "line number": [
      990
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_einsum.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_einsum.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_einsum.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_einsum.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_einsum.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_einsum.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_einsum.chars": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.core.tests.test_einsum.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_einsum.global_size_dict": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "numpy.core.tests.test_einsum.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.core.tests.test_einsum.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_einsum.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_einsum.sizes": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.core.tests.test_einsum.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_einsum.test_overlap": {
  "data": {
   "lineno": 992,
   "symbols_in_volume": {
    "int": {
     "line number": [
      993,
      994
     ]
    },
    "numpy.arange": {
     "line number": [
      993,
      994
     ]
    },
    "numpy.dot": {
     "line number": [
      995
     ]
    },
    "numpy.einsum": {
     "line number": [
      997,
      1000
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      998,
      1001
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_errstate": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_errstate.TestErrstate": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "object": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_errstate.TestErrstate.test_divide": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "FloatingPointError": {
     "line number": [
      29
     ]
    },
    "numpy.arange": {
     "line number": [
      24
     ]
    },
    "numpy.errstate": {
     "line number": [
      23,
      26
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_errstate.TestErrstate.test_errcall": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "numpy.errstate": {
     "line number": [
      37,
      39
     ]
    },
    "numpy.geterrcall": {
     "line number": [
      36,
      38,
      40,
      41
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      38,
      40,
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_errstate.TestErrstate.test_errcall.foo": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "print": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_errstate.TestErrstate.test_invalid": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "FloatingPointError": {
     "line number": [
      19
     ]
    },
    "numpy.arange": {
     "line number": [
      14
     ]
    },
    "numpy.core.tests.test_errstate.platform": {
     "line number": [
      11
     ]
    },
    "numpy.core.tests.test_errstate.pytest": {
     "line number": [
      11
     ]
    },
    "numpy.errstate": {
     "line number": [
      13,
      16
     ]
    },
    "numpy.sqrt": {
     "line number": [
      17,
      20
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_errstate.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_errstate.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_errstate.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_errstate.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_errstate.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_errstate.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.core.tests.test_errstate.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_errstate.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128": {
  "data": {
   "symbols_in_volume": {
    "list": {
     "line number": [
      29,
      38
     ]
    },
    "numpy.core.tests.test_extint128.INT128_MAX": {
     "line number": [
      20,
      34
     ]
    },
    "numpy.core.tests.test_extint128.INT128_MID": {
     "line number": [
      35,
      36,
      37
     ]
    },
    "numpy.core.tests.test_extint128.INT128_MIN": {
     "line number": [
      33
     ]
    },
    "numpy.core.tests.test_extint128.INT64_MAX": {
     "line number": [
      25
     ]
    },
    "numpy.core.tests.test_extint128.INT64_MID": {
     "line number": [
      26,
      27,
      28
     ]
    },
    "numpy.core.tests.test_extint128.INT64_MIN": {
     "line number": [
      24
     ]
    },
    "numpy.core.tests.test_extint128.INT64_VALUES": {
     "line number": [
      42
     ]
    },
    "numpy.iinfo": {
     "line number": [
      14,
      15
     ]
    },
    "numpy.int64": {
     "line number": [
      14,
      15
     ]
    },
    "range": {
     "line number": [
      24,
      25,
      26,
      27,
      28,
      29,
      33,
      34,
      35,
      36,
      37,
      38
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_extint128.INT128_MAX": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.core.tests.test_extint128.INT128_MID": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.core.tests.test_extint128.INT128_MIN": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.core.tests.test_extint128.INT128_VALUES": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "numpy.core.tests.test_extint128.INT64_MAX": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "numpy.core.tests.test_extint128.INT64_MID": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.core.tests.test_extint128.INT64_MIN": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.core.tests.test_extint128.INT64_POS_VALUES": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "numpy.core.tests.test_extint128.INT64_VALUES": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.core.tests.test_extint128.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128.contextlib": {
  "data": {
   "shadows": "contextlib"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128.exc_iter": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      65
     ]
    },
    "Exception": {
     "line number": [
      61
     ]
    },
    "iterate": {
     "line number": [
      60
     ]
    },
    "numpy.core.tests.test_extint128.contextlib": {
     "line number": [
      45
     ]
    },
    "numpy.core.tests.test_extint128.traceback": {
     "line number": [
      64
     ]
    },
    "repr": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.exc_iter.iterate": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "numpy.core.tests.test_extint128.itertools": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128.mt": {
  "data": {
   "shadows": "numpy.core._multiarray_tests"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_extint128.test_add_128": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      124
     ]
    },
    "numpy.core._multiarray_tests.extint_add_128": {
     "line number": [
      124,
      126
     ]
    },
    "numpy.core.tests.test_extint128.INT128_MAX": {
     "line number": [
      123
     ]
    },
    "numpy.core.tests.test_extint128.INT128_MIN": {
     "line number": [
      123
     ]
    },
    "numpy.core.tests.test_extint128.INT128_VALUES": {
     "line number": [
      120,
      120
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      120
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      128
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      124
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_ceildiv_128_64": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.extint_ceildiv_128_64": {
     "line number": [
      218
     ]
    },
    "numpy.core.tests.test_extint128.INT128_VALUES": {
     "line number": [
      215
     ]
    },
    "numpy.core.tests.test_extint128.INT64_POS_VALUES": {
     "line number": [
      215
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      215
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_divmod_128_64": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      190,
      192
     ]
    },
    "numpy.core._multiarray_tests.extint_divmod_128_64": {
     "line number": [
      196
     ]
    },
    "numpy.core.tests.test_extint128.INT128_VALUES": {
     "line number": [
      187
     ]
    },
    "numpy.core.tests.test_extint128.INT64_POS_VALUES": {
     "line number": [
      187
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      187
     ]
    },
    "numpy.core.tests.test_extint128.pytest": {
     "line number": [
      185
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      199,
      200,
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_floordiv_128_64": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.extint_floordiv_128_64": {
     "line number": [
      208
     ]
    },
    "numpy.core.tests.test_extint128.INT128_VALUES": {
     "line number": [
      205
     ]
    },
    "numpy.core.tests.test_extint128.INT64_POS_VALUES": {
     "line number": [
      205
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      205
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_gt_128": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.extint_gt_128": {
     "line number": [
      180
     ]
    },
    "numpy.core.tests.test_extint128.INT128_VALUES": {
     "line number": [
      177,
      177
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      177
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      182
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_mul_64_64": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.extint_mul_64_64": {
     "line number": [
      114
     ]
    },
    "numpy.core.tests.test_extint128.INT64_VALUES": {
     "line number": [
      111,
      111
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      111
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_neg_128": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.extint_neg_128": {
     "line number": [
      147
     ]
    },
    "numpy.core.tests.test_extint128.INT128_VALUES": {
     "line number": [
      144
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      144
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_safe_binop": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      83
     ]
    },
    "numpy.core._multiarray_tests.extint_safe_binop": {
     "line number": [
      83,
      85
     ]
    },
    "numpy.core.tests.test_extint128.INT64_MAX": {
     "line number": [
      82
     ]
    },
    "numpy.core.tests.test_extint128.INT64_MIN": {
     "line number": [
      82
     ]
    },
    "numpy.core.tests.test_extint128.INT64_VALUES": {
     "line number": [
      77,
      77
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      77
     ]
    },
    "numpy.core.tests.test_extint128.operator": {
     "line number": [
      72,
      73,
      74
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      88
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      83
     ]
    },
    "pyop": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_shl_128": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.extint_shl_128": {
     "line number": [
      159
     ]
    },
    "numpy.core.tests.test_extint128.INT128_VALUES": {
     "line number": [
      153
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      153
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_shr_128": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.extint_shr_128": {
     "line number": [
      171
     ]
    },
    "numpy.core.tests.test_extint128.INT128_VALUES": {
     "line number": [
      165
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      165
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      173
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_sub_128": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      136
     ]
    },
    "numpy.core._multiarray_tests.extint_sub_128": {
     "line number": [
      136,
      138
     ]
    },
    "numpy.core.tests.test_extint128.INT128_MAX": {
     "line number": [
      135
     ]
    },
    "numpy.core.tests.test_extint128.INT128_MIN": {
     "line number": [
      135
     ]
    },
    "numpy.core.tests.test_extint128.INT128_VALUES": {
     "line number": [
      132,
      132
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      132
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      140
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_to_128": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.extint_to_128": {
     "line number": [
      94
     ]
    },
    "numpy.core.tests.test_extint128.INT64_VALUES": {
     "line number": [
      92
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      92
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.test_to_64": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      103
     ]
    },
    "numpy.core._multiarray_tests.extint_to_64": {
     "line number": [
      103,
      105
     ]
    },
    "numpy.core.tests.test_extint128.INT128_VALUES": {
     "line number": [
      100
     ]
    },
    "numpy.core.tests.test_extint128.INT64_MAX": {
     "line number": [
      102
     ]
    },
    "numpy.core.tests.test_extint128.INT64_MIN": {
     "line number": [
      102
     ]
    },
    "numpy.core.tests.test_extint128.exc_iter": {
     "line number": [
      100
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      107
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_extint128.traceback": {
  "data": {
   "shadows": "traceback"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_function_base.PhysicalQuantity": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "float": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_function_base.PhysicalQuantity.__add__": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "float": {
     "line number": [
      19,
      19
     ]
    },
    "isinstance": {
     "line number": [
      18
     ]
    },
    "numpy.core.tests.test_function_base.PhysicalQuantity": {
     "line number": [
      18,
      19
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.PhysicalQuantity.__div__": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "float": {
     "line number": [
      35,
      35
     ]
    },
    "numpy.core.tests.test_function_base.PhysicalQuantity": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.PhysicalQuantity.__mul__": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "float": {
     "line number": [
      31,
      31
     ]
    },
    "numpy.core.tests.test_function_base.PhysicalQuantity": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.PhysicalQuantity.__new__": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "float.__new__": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.PhysicalQuantity.__rdiv__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "float": {
     "line number": [
      38,
      38
     ]
    },
    "numpy.core.tests.test_function_base.PhysicalQuantity": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.PhysicalQuantity.__rsub__": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "float": {
     "line number": [
      28,
      28
     ]
    },
    "isinstance": {
     "line number": [
      27
     ]
    },
    "numpy.core.tests.test_function_base.PhysicalQuantity": {
     "line number": [
      27,
      28
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.PhysicalQuantity.__sub__": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "float": {
     "line number": [
      24,
      24
     ]
    },
    "isinstance": {
     "line number": [
      23
     ]
    },
    "numpy.core.tests.test_function_base.PhysicalQuantity": {
     "line number": [
      23,
      24
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.PhysicalQuantity2": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_function_base.TestGeomspace": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "object": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_function_base.TestGeomspace.test_basic": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "len": {
     "line number": [
      99
     ]
    },
    "numpy.geomspace": {
     "line number": [
      98,
      100,
      102,
      104,
      107,
      111,
      115
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      99,
      101,
      103
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      108
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      105,
      109,
      112,
      113,
      116,
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestGeomspace.test_bounds": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      220,
      221,
      222
     ]
    },
    "numpy.geomspace": {
     "line number": [
      220,
      221,
      222
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      220,
      221,
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestGeomspace.test_complex": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      136
     ]
    },
    "numpy.geomspace": {
     "line number": [
      121,
      125,
      129,
      132,
      136,
      139,
      141,
      143,
      145,
      147,
      154,
      156
     ]
    },
    "numpy.sqrt": {
     "line number": [
      140,
      140,
      142,
      142,
      144,
      144,
      146,
      146
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      122,
      126,
      130,
      133,
      137,
      140,
      142,
      144,
      146,
      148,
      155,
      157
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      123,
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestGeomspace.test_dtype": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      170
     ]
    },
    "float": {
     "line number": [
      168
     ]
    },
    "numpy.dtype": {
     "line number": [
      161,
      163,
      165,
      169,
      171
     ]
    },
    "numpy.geomspace": {
     "line number": [
      160,
      162,
      164,
      168,
      170
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      161,
      163,
      165,
      169,
      171
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestGeomspace.test_physical_quantities": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "numpy.core.tests.test_function_base.PhysicalQuantity": {
     "line number": [
      205,
      206
     ]
    },
    "numpy.geomspace": {
     "line number": [
      207,
      207
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestGeomspace.test_start_stop_array": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      191,
      192
     ]
    },
    "numpy.geomspace": {
     "line number": [
      193,
      194,
      197,
      198,
      201
     ]
    },
    "numpy.stack": {
     "line number": [
      194,
      198
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      196,
      200,
      202
     ]
    },
    "zip": {
     "line number": [
      195
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestGeomspace.test_start_stop_array_scalar": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      174,
      175,
      176
     ]
    },
    "numpy.geomspace": {
     "line number": [
      177,
      178,
      179,
      180,
      181,
      182
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      185,
      186,
      187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestGeomspace.test_subclass": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      210,
      211
     ]
    },
    "numpy.core.tests.test_function_base.PhysicalQuantity2": {
     "line number": [
      210,
      211,
      213,
      216
     ]
    },
    "numpy.geomspace": {
     "line number": [
      212,
      214,
      215,
      217
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      214,
      217
     ]
    },
    "type": {
     "line number": [
      213,
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "object": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_array_interface": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "Arrayish": {
     "line number": [
      339,
      340
     ]
    },
    "numpy.array": {
     "line number": [
      339,
      340
     ]
    },
    "numpy.linspace": {
     "line number": [
      342,
      342
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      342
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "object": {
     "line number": [
      315
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__array_interface__": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "property": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__": {
  "data": {
   "lineno": 326
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__mul__": {
  "data": {
   "lineno": 334
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_basic": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      234
     ]
    },
    "len": {
     "line number": [
      229
     ]
    },
    "numpy.linspace": {
     "line number": [
      228,
      230,
      232,
      234
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      229,
      231,
      233
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      234
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_complex": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      289,
      291
     ]
    },
    "numpy.linspace": {
     "line number": [
      288,
      290
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      292,
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_corner": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      240
     ]
    },
    "list": {
     "line number": [
      237,
      241
     ]
    },
    "numpy.linspace": {
     "line number": [
      237,
      241
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      238,
      242
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      239
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_denormal_numbers": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": {
    "any": {
     "line number": [
      349
     ]
    },
    "ftype": {
     "line number": [
      348,
      348,
      349
     ]
    },
    "numpy.linspace": {
     "line number": [
      349
     ]
    },
    "numpy.nextafter": {
     "line number": [
      348
     ]
    },
    "numpy.sctypes": {
     "line number": [
      347
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      349
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_dtype": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      253,
      255,
      257
     ]
    },
    "numpy.linspace": {
     "line number": [
      252,
      254,
      256
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      253,
      255,
      257
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_equivalent_to_arange": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "int": {
     "line number": [
      353,
      354
     ]
    },
    "numpy.arange": {
     "line number": [
      354
     ]
    },
    "numpy.linspace": {
     "line number": [
      353
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      353
     ]
    },
    "range": {
     "line number": [
      352
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_physical_quantities": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": {
    "numpy.core.tests.test_function_base.PhysicalQuantity": {
     "line number": [
      296,
      297
     ]
    },
    "numpy.linspace": {
     "line number": [
      298,
      298
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_retstep": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      358,
      362
     ]
    },
    "len": {
     "line number": [
      358,
      362,
      363
     ]
    },
    "numpy.isnan": {
     "line number": [
      363
     ]
    },
    "numpy.linspace": {
     "line number": [
      357,
      361
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      358,
      362
     ]
    },
    "tuple": {
     "line number": [
      358,
      362
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_start_stop_array": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      274,
      275
     ]
    },
    "numpy.linspace": {
     "line number": [
      276,
      277,
      280,
      281,
      284
     ]
    },
    "numpy.stack": {
     "line number": [
      277,
      281
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      279,
      283,
      285
     ]
    },
    "zip": {
     "line number": [
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_start_stop_array_scalar": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      260,
      261,
      262
     ]
    },
    "numpy.linspace": {
     "line number": [
      263,
      264,
      265,
      266,
      267,
      268
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      269,
      270,
      271
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_subclass": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      301,
      302
     ]
    },
    "numpy.core.tests.test_function_base.PhysicalQuantity2": {
     "line number": [
      301,
      302,
      304,
      307
     ]
    },
    "numpy.linspace": {
     "line number": [
      303,
      305,
      306,
      308
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      305,
      308
     ]
    },
    "type": {
     "line number": [
      304,
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLinspace.test_type": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      245,
      246,
      247
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      248,
      249
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLogspace": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "object": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_function_base.TestLogspace.test_basic": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "len": {
     "line number": [
      49
     ]
    },
    "numpy.logspace": {
     "line number": [
      48,
      50,
      52,
      54
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      49,
      51,
      53
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLogspace.test_dtype": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      73,
      75,
      77
     ]
    },
    "numpy.logspace": {
     "line number": [
      72,
      74,
      76
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      73,
      75,
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLogspace.test_physical_quantities": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "numpy.core.tests.test_function_base.PhysicalQuantity": {
     "line number": [
      80,
      81
     ]
    },
    "numpy.logspace": {
     "line number": [
      82,
      82
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLogspace.test_start_stop_array": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      58,
      59
     ]
    },
    "numpy.logspace": {
     "line number": [
      60,
      61,
      64,
      65,
      68
     ]
    },
    "numpy.stack": {
     "line number": [
      61,
      65
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      63,
      67,
      69
     ]
    },
    "zip": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.TestLogspace.test_subclass": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      85,
      86
     ]
    },
    "numpy.core.tests.test_function_base.PhysicalQuantity2": {
     "line number": [
      85,
      86,
      88,
      91
     ]
    },
    "numpy.logspace": {
     "line number": [
      87,
      89,
      90,
      92
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      89,
      92
     ]
    },
    "type": {
     "line number": [
      88,
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_function_base.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.arange": {
  "data": {
   "shadows": "numpy.arange"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.dtype": {
  "data": {
   "shadows": "numpy.dtype"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.geomspace": {
  "data": {
   "shadows": "numpy.geomspace"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.isnan": {
  "data": {
   "shadows": "numpy.isnan"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.linspace": {
  "data": {
   "shadows": "numpy.linspace"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.logspace": {
  "data": {
   "shadows": "numpy.logspace"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.ndarray": {
  "data": {
   "shadows": "numpy.ndarray"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.nextafter": {
  "data": {
   "shadows": "numpy.nextafter"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.sctypes": {
  "data": {
   "shadows": "numpy.sctypes"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.sqrt": {
  "data": {
   "shadows": "numpy.sqrt"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.stack": {
  "data": {
   "shadows": "numpy.stack"
  },
  "type": "import"
 },
 "numpy.core.tests.test_function_base.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_getlimits.TestDouble": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "object": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_getlimits.TestDouble.test_singleton": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "id": {
     "line number": [
      36,
      36
     ]
    },
    "numpy.core.finfo": {
     "line number": [
      34,
      35
     ]
    },
    "numpy.double": {
     "line number": [
      34,
      35
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.TestFinfo": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "object": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_getlimits.TestFinfo.test_basic": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      55
     ]
    },
    "getattr": {
     "line number": [
      53,
      54
     ]
    },
    "list": {
     "line number": [
      46
     ]
    },
    "numpy.complex128": {
     "line number": [
      48
     ]
    },
    "numpy.complex64": {
     "line number": [
      47
     ]
    },
    "numpy.core.finfo": {
     "line number": [
      53,
      54,
      55
     ]
    },
    "numpy.float16": {
     "line number": [
      47
     ]
    },
    "numpy.float32": {
     "line number": [
      47
     ]
    },
    "numpy.float64": {
     "line number": [
      47
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      53
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      55
     ]
    },
    "zip": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.TestHalf": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "object": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_getlimits.TestHalf.test_singleton": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "id": {
     "line number": [
      24,
      24
     ]
    },
    "numpy.core.finfo": {
     "line number": [
      22,
      23
     ]
    },
    "numpy.half": {
     "line number": [
      22,
      23
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.TestIinfo": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "object": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_getlimits.TestIinfo.test_basic": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      67
     ]
    },
    "getattr": {
     "line number": [
      65,
      66
     ]
    },
    "list": {
     "line number": [
      59
     ]
    },
    "numpy.core.iinfo": {
     "line number": [
      65,
      66,
      67
     ]
    },
    "numpy.int16": {
     "line number": [
      61
     ]
    },
    "numpy.int32": {
     "line number": [
      61
     ]
    },
    "numpy.int64": {
     "line number": [
      61
     ]
    },
    "numpy.int8": {
     "line number": [
      61
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      65
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      67
     ]
    },
    "numpy.uint16": {
     "line number": [
      62
     ]
    },
    "numpy.uint32": {
     "line number": [
      62
     ]
    },
    "numpy.uint64": {
     "line number": [
      62
     ]
    },
    "numpy.uint8": {
     "line number": [
      62
     ]
    },
    "zip": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.TestIinfo.test_unsigned_max": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "T": {
     "line number": [
      72
     ]
    },
    "numpy.core.iinfo": {
     "line number": [
      72
     ]
    },
    "numpy.sctypes": {
     "line number": [
      70
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.TestLongdouble": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "object": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_getlimits.TestLongdouble.test_singleton": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "id": {
     "line number": [
      42,
      42
     ]
    },
    "numpy.core.finfo": {
     "line number": [
      40,
      41
     ]
    },
    "numpy.longdouble": {
     "line number": [
      40,
      41
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.TestPythonFloat": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "object": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_getlimits.TestPythonFloat.test_singleton": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "float": {
     "line number": [
      16,
      17
     ]
    },
    "id": {
     "line number": [
      18,
      18
     ]
    },
    "numpy.core.finfo": {
     "line number": [
      16,
      17
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.TestRepr": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "object": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_getlimits.TestRepr.test_finfo_repr": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "numpy.finfo": {
     "line number": [
      82
     ]
    },
    "numpy.float32": {
     "line number": [
      82
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      82
     ]
    },
    "repr": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.TestRepr.test_iinfo_repr": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "numpy.iinfo": {
     "line number": [
      77
     ]
    },
    "numpy.int16": {
     "line number": [
      77
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      77
     ]
    },
    "repr": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.TestSingle": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "object": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_getlimits.TestSingle.test_singleton": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "id": {
     "line number": [
      30,
      30
     ]
    },
    "numpy.core.finfo": {
     "line number": [
      28,
      29
     ]
    },
    "numpy.single": {
     "line number": [
      28,
      29
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits._discovered_machar": {
  "data": {
   "shadows": "numpy.core.getlimits._discovered_machar"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits._float_ma": {
  "data": {
   "shadows": "numpy.core.getlimits._float_ma"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.assert_ma_equal": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      93,
      95,
      96
     ]
    },
    "hasattr": {
     "line number": [
      94
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      93,
      95,
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.double": {
  "data": {
   "shadows": "numpy.double"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.finfo": {
  "data": {
   "shadows": "numpy.core.finfo"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.half": {
  "data": {
   "shadows": "numpy.half"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.iinfo": {
  "data": {
   "shadows": "numpy.core.iinfo"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.longdouble": {
  "data": {
   "shadows": "numpy.longdouble"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.single": {
  "data": {
   "shadows": "numpy.single"
  },
  "type": "import"
 },
 "numpy.core.tests.test_getlimits.test_instances": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "numpy.core.finfo": {
     "line number": [
      87
     ]
    },
    "numpy.core.iinfo": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.test_known_types": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      108,
      109,
      112
     ]
    },
    "numpy.core.getlimits._discovered_machar": {
     "line number": [
      104,
      107
     ]
    },
    "numpy.core.getlimits._float_ma": {
     "line number": [
      101,
      102,
      103,
      111,
      114
     ]
    },
    "numpy.core.tests.test_getlimits.assert_ma_equal": {
     "line number": [
      104,
      111,
      114
     ]
    },
    "numpy.dtype": {
     "line number": [
      108
     ]
    },
    "numpy.errstate": {
     "line number": [
      106
     ]
    },
    "numpy.float16": {
     "line number": [
      101
     ]
    },
    "numpy.float32": {
     "line number": [
      102
     ]
    },
    "numpy.float64": {
     "line number": [
      103
     ]
    },
    "numpy.longdouble": {
     "line number": [
      107,
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_getlimits.test_plausible_finfo": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "numpy.finfo": {
     "line number": [
      120
     ]
    },
    "numpy.sctypes": {
     "line number": [
      119,
      119
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      121,
      122,
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_half.TestHalf": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "object": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_half.TestHalf.setup": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      24,
      31,
      32
     ]
    },
    "numpy.array": {
     "line number": [
      26,
      27,
      34,
      35
     ]
    },
    "numpy.concatenate": {
     "line number": [
      30
     ]
    },
    "numpy.float16": {
     "line number": [
      25,
      33
     ]
    },
    "numpy.float32": {
     "line number": [
      26,
      34
     ]
    },
    "numpy.float64": {
     "line number": [
      27,
      35
     ]
    },
    "numpy.uint16": {
     "line number": [
      24,
      31,
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_array_interface": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": {
    "Dummy": {
     "line number": [
      514
     ]
    },
    "numpy.array": {
     "line number": [
      516
     ]
    },
    "numpy.float16": {
     "line number": [
      513,
      517
     ]
    },
    "numpy.ones": {
     "line number": [
      513
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      517
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      518
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_array_interface.Dummy": {
  "data": {
   "lineno": 510
  },
  "type": "class"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_coercion": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      418,
      419
     ]
    },
    "numpy.float16": {
     "line number": [
      418,
      420,
      423,
      424,
      425,
      426,
      427,
      432,
      434,
      439
     ]
    },
    "numpy.float32": {
     "line number": [
      419,
      421,
      428,
      433,
      435,
      437,
      438,
      440
     ]
    },
    "numpy.float64": {
     "line number": [
      430,
      431
     ]
    },
    "numpy.power": {
     "line number": [
      423,
      424,
      425,
      426,
      427,
      428,
      430,
      431,
      432,
      433,
      434,
      435,
      437,
      438,
      439,
      440
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      423,
      424,
      425,
      426,
      427,
      428,
      430,
      431,
      432,
      433,
      434,
      435,
      437,
      438,
      439,
      440
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_conversion_denormal_round_even": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "float_t": {
     "line number": [
      136,
      140,
      148
     ]
    },
    "numpy.core.tests.test_half.pytest": {
     "line number": [
      128
     ]
    },
    "numpy.float16": {
     "line number": [
      136,
      141,
      149
     ]
    },
    "numpy.float32": {
     "line number": [
      129
     ]
    },
    "numpy.float64": {
     "line number": [
      130
     ]
    },
    "numpy.uint16": {
     "line number": [
      136
     ]
    },
    "numpy.uint32": {
     "line number": [
      129
     ]
    },
    "numpy.uint64": {
     "line number": [
      130
     ]
    },
    "range": {
     "line number": [
      145
     ]
    },
    "uint_t": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_conversion_rounding": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "float_t": {
     "line number": [
      94,
      96
     ]
    },
    "numpy.arange": {
     "line number": [
      81
     ]
    },
    "numpy.core.tests.test_half.pytest": {
     "line number": [
      72,
      73,
      74
     ]
    },
    "numpy.finfo": {
     "line number": [
      77
     ]
    },
    "numpy.float16": {
     "line number": [
      77,
      77,
      82,
      99
     ]
    },
    "numpy.float32": {
     "line number": [
      74
     ]
    },
    "numpy.float64": {
     "line number": [
      74
     ]
    },
    "numpy.int16": {
     "line number": [
      122,
      124
     ]
    },
    "numpy.nextafter": {
     "line number": [
      94,
      96
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      126
     ]
    },
    "numpy.uint16": {
     "line number": [
      77,
      81,
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_conversions": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "int": {
     "line number": [
      69
     ]
    },
    "numpy.arange": {
     "line number": [
      67
     ]
    },
    "numpy.array": {
     "line number": [
      49,
      54,
      61,
      62,
      68,
      69
     ]
    },
    "numpy.float16": {
     "line number": [
      49,
      54,
      62,
      68
     ]
    },
    "numpy.longdouble": {
     "line number": [
      61
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      50,
      55,
      63,
      70
     ]
    },
    "numpy.uint16": {
     "line number": [
      50,
      51,
      55,
      56,
      63,
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_correctness": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "len": {
     "line number": [
      250,
      259
     ]
    },
    "numpy.array": {
     "line number": [
      240
     ]
    },
    "numpy.int32": {
     "line number": [
      240
     ]
    },
    "numpy.nonzero": {
     "line number": [
      249,
      258
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      252,
      261
     ]
    },
    "numpy.uint16": {
     "line number": [
      236
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_fpe": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      446,
      447
     ]
    },
    "numpy.core.tests.test_half.assert_raises_fpe": {
     "line number": [
      452,
      453,
      454,
      455,
      456,
      457,
      458,
      459,
      460,
      462,
      464,
      466,
      468,
      472,
      473,
      474,
      475,
      476,
      477,
      478,
      479,
      480,
      482,
      484,
      485,
      486,
      489,
      490,
      491,
      492,
      493,
      494
     ]
    },
    "numpy.core.tests.test_half.platform": {
     "line number": [
      442
     ]
    },
    "numpy.core.tests.test_half.pytest": {
     "line number": [
      442
     ]
    },
    "numpy.divide": {
     "line number": [
      489
     ]
    },
    "numpy.errstate": {
     "line number": [
      445
     ]
    },
    "numpy.float16": {
     "line number": [
      446,
      447,
      448,
      449,
      461,
      461,
      463,
      463,
      465,
      465,
      467,
      467,
      469,
      469,
      481,
      481,
      483,
      483,
      484,
      484,
      485,
      485,
      486,
      489,
      489,
      490,
      491,
      492,
      492,
      493,
      493,
      494,
      494,
      497,
      497,
      498,
      498,
      499,
      499,
      500,
      501,
      501,
      502,
      502,
      503,
      503,
      504,
      504,
      505,
      505,
      506,
      506
     ]
    },
    "numpy.inf": {
     "line number": [
      484,
      485,
      489,
      489,
      490,
      492,
      493,
      501,
      502
     ]
    },
    "numpy.nan": {
     "line number": [
      491,
      494
     ]
    },
    "numpy.nextafter": {
     "line number": [
      484,
      485,
      492,
      493,
      494,
      501,
      502
     ]
    },
    "numpy.spacing": {
     "line number": [
      486,
      490,
      491,
      500
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_funcs": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      294,
      295,
      311,
      325
     ]
    },
    "numpy.array": {
     "line number": [
      303,
      317,
      320
     ]
    },
    "numpy.dot": {
     "line number": [
      313
     ]
    },
    "numpy.float16": {
     "line number": [
      294,
      298,
      300,
      303,
      311,
      312,
      317,
      320,
      325
     ]
    },
    "numpy.float32": {
     "line number": [
      295
     ]
    },
    "numpy.inf": {
     "line number": [
      317,
      320,
      320
     ]
    },
    "numpy.nan": {
     "line number": [
      320
     ]
    },
    "numpy.ones": {
     "line number": [
      300,
      312
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      294,
      300,
      304,
      307,
      313,
      318,
      321,
      327
     ]
    },
    "numpy.zeros": {
     "line number": [
      298
     ]
    },
    "range": {
     "line number": [
      326
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_ordering": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      274
     ]
    },
    "numpy.float32": {
     "line number": [
      274
     ]
    },
    "numpy.nonzero": {
     "line number": [
      287,
      288
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      282,
      283,
      284,
      285
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      279,
      287,
      288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_rounding": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      204,
      223,
      227,
      228
     ]
    },
    "numpy.float16": {
     "line number": [
      223,
      228
     ]
    },
    "numpy.float32": {
     "line number": [
      227
     ]
    },
    "numpy.float64": {
     "line number": [
      212
     ]
    },
    "numpy.inf": {
     "line number": [
      220
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      224,
      229
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_ufuncs": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "numpy.absolute": {
     "line number": [
      408
     ]
    },
    "numpy.add": {
     "line number": [
      359
     ]
    },
    "numpy.array": {
     "line number": [
      355,
      356,
      357
     ]
    },
    "numpy.conjugate": {
     "line number": [
      407
     ]
    },
    "numpy.copysign": {
     "line number": [
      380
     ]
    },
    "numpy.divide": {
     "line number": [
      362
     ]
    },
    "numpy.divmod": {
     "line number": [
      403
     ]
    },
    "numpy.equal": {
     "line number": [
      364
     ]
    },
    "numpy.float16": {
     "line number": [
      355,
      356,
      357
     ]
    },
    "numpy.floor_divide": {
     "line number": [
      401
     ]
    },
    "numpy.fmax": {
     "line number": [
      396,
      397
     ]
    },
    "numpy.fmin": {
     "line number": [
      398,
      399
     ]
    },
    "numpy.frexp": {
     "line number": [
      413
     ]
    },
    "numpy.greater": {
     "line number": [
      368
     ]
    },
    "numpy.greater_equal": {
     "line number": [
      369
     ]
    },
    "numpy.inf": {
     "line number": [
      357,
      394,
      399
     ]
    },
    "numpy.isfinite": {
     "line number": [
      377
     ]
    },
    "numpy.isinf": {
     "line number": [
      376
     ]
    },
    "numpy.isnan": {
     "line number": [
      375,
      385,
      392
     ]
    },
    "numpy.ldexp": {
     "line number": [
      414
     ]
    },
    "numpy.less": {
     "line number": [
      366
     ]
    },
    "numpy.less_equal": {
     "line number": [
      367
     ]
    },
    "numpy.logical_and": {
     "line number": [
      370
     ]
    },
    "numpy.logical_not": {
     "line number": [
      373
     ]
    },
    "numpy.logical_or": {
     "line number": [
      371
     ]
    },
    "numpy.logical_xor": {
     "line number": [
      372
     ]
    },
    "numpy.maximum": {
     "line number": [
      382,
      384
     ]
    },
    "numpy.minimum": {
     "line number": [
      389,
      391
     ]
    },
    "numpy.modf": {
     "line number": [
      412
     ]
    },
    "numpy.multiply": {
     "line number": [
      361
     ]
    },
    "numpy.nan": {
     "line number": [
      357
     ]
    },
    "numpy.negative": {
     "line number": [
      409
     ]
    },
    "numpy.not_equal": {
     "line number": [
      365
     ]
    },
    "numpy.ones_like": {
     "line number": [
      406
     ]
    },
    "numpy.positive": {
     "line number": [
      410
     ]
    },
    "numpy.reciprocal": {
     "line number": [
      405
     ]
    },
    "numpy.remainder": {
     "line number": [
      402
     ]
    },
    "numpy.sign": {
     "line number": [
      411
     ]
    },
    "numpy.signbit": {
     "line number": [
      378
     ]
    },
    "numpy.square": {
     "line number": [
      404
     ]
    },
    "numpy.subtract": {
     "line number": [
      360
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      385,
      392
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      359,
      360,
      361,
      362,
      364,
      365,
      366,
      367,
      368,
      369,
      370,
      371,
      372,
      373,
      375,
      376,
      377,
      378,
      380,
      382,
      387,
      389,
      394,
      396,
      397,
      398,
      399,
      401,
      402,
      403,
      404,
      405,
      406,
      407,
      408,
      409,
      410,
      411,
      412,
      413,
      414
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_half_values": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      183,
      191
     ]
    },
    "numpy.float16": {
     "line number": [
      199
     ]
    },
    "numpy.inf": {
     "line number": [
      190,
      190
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      200
     ]
    },
    "numpy.uint16": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_nans_infs": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "numpy.errstate": {
     "line number": [
      152
     ]
    },
    "numpy.float16": {
     "line number": [
      158,
      161
     ]
    },
    "numpy.inf": {
     "line number": [
      158
     ]
    },
    "numpy.isfinite": {
     "line number": [
      156,
      156
     ]
    },
    "numpy.isinf": {
     "line number": [
      155,
      155
     ]
    },
    "numpy.isnan": {
     "line number": [
      154,
      154
     ]
    },
    "numpy.nan": {
     "line number": [
      161
     ]
    },
    "numpy.signbit": {
     "line number": [
      157,
      157
     ]
    },
    "numpy.spacing": {
     "line number": [
      158
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      163,
      164,
      166,
      167,
      169,
      170,
      172,
      173,
      175,
      176,
      178,
      179
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      154,
      155,
      156,
      157,
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.TestHalf.test_spacing_nextafter": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      332
     ]
    },
    "numpy.array": {
     "line number": [
      333
     ]
    },
    "numpy.float16": {
     "line number": [
      333,
      334
     ]
    },
    "numpy.inf": {
     "line number": [
      333
     ]
    },
    "numpy.nextafter": {
     "line number": [
      338,
      339,
      340,
      348,
      349,
      350
     ]
    },
    "numpy.spacing": {
     "line number": [
      336,
      345,
      345,
      346
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      336,
      338,
      339,
      340,
      345,
      346,
      348,
      349,
      350
     ]
    },
    "numpy.uint16": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_half.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_half.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_half.assert_raises_fpe": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "FloatingPointError": {
     "line number": [
      14
     ]
    },
    "callable": {
     "line number": [
      13
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      15,
      18
     ]
    },
    "str": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_half.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_half.float16": {
  "data": {
   "shadows": "numpy.float16"
  },
  "type": "import"
 },
 "numpy.core.tests.test_half.float32": {
  "data": {
   "shadows": "numpy.float32"
  },
  "type": "import"
 },
 "numpy.core.tests.test_half.float64": {
  "data": {
   "shadows": "numpy.float64"
  },
  "type": "import"
 },
 "numpy.core.tests.test_half.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_half.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.core.tests.test_half.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_half.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_half.uint16": {
  "data": {
   "shadows": "numpy.uint16"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexerrors": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_indexerrors.TestIndexErrors": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexerrors.TestIndexErrors.test_arraytypes_fasttake": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      12,
      13,
      14,
      15
     ]
    },
    "numpy.empty": {
     "line number": [
      11
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      12,
      13,
      14,
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexerrors.TestIndexErrors.test_iterators_exceptions": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      57,
      58,
      59,
      60,
      63,
      64,
      67,
      68,
      70,
      71,
      74,
      75,
      77,
      78,
      81,
      82,
      84,
      85
     ]
    },
    "assign": {
     "line number": [
      59,
      60,
      64,
      68,
      71,
      75,
      78,
      82,
      85
     ]
    },
    "numpy.array": {
     "line number": [
      74,
      75,
      77,
      78,
      81,
      82,
      84,
      85
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      57,
      58,
      59,
      60,
      63,
      64,
      67,
      68,
      70,
      71,
      74,
      75,
      77,
      78,
      81,
      82,
      84,
      85
     ]
    },
    "numpy.zeros": {
     "line number": [
      56,
      62,
      66,
      69,
      73,
      76,
      80,
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexerrors.TestIndexErrors.test_iterators_exceptions.assign": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexerrors.TestIndexErrors.test_mapping": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      94,
      97,
      98,
      100,
      101,
      104,
      106,
      109,
      110,
      112,
      113
     ]
    },
    "assign": {
     "line number": [
      98,
      101,
      104,
      106,
      110,
      113
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      94,
      97,
      98,
      100,
      101,
      104,
      106,
      109,
      110,
      112,
      113
     ]
    },
    "numpy.zeros": {
     "line number": [
      93,
      96,
      99,
      103,
      105,
      108,
      111
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexerrors.TestIndexErrors.test_mapping.assign": {
  "data": {
   "lineno": 90
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexerrors.TestIndexErrors.test_methods": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      119,
      120,
      122,
      123
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      119,
      120,
      122,
      123
     ]
    },
    "numpy.zeros": {
     "line number": [
      118,
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexerrors.TestIndexErrors.test_multiindex_exceptions": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      32,
      34,
      37,
      39
     ]
    },
    "numpy.empty": {
     "line number": [
      31,
      33,
      36,
      38
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      32,
      34,
      37,
      39
     ]
    },
    "object": {
     "line number": [
      31,
      33,
      36,
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexerrors.TestIndexErrors.test_put_exceptions": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      43,
      45,
      47,
      49
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      43,
      45,
      47,
      49
     ]
    },
    "numpy.zeros": {
     "line number": [
      42,
      44,
      46,
      48
     ]
    },
    "object": {
     "line number": [
      44,
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexerrors.TestIndexErrors.test_take_from_object": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      20,
      24,
      25,
      26,
      27,
      28
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      20,
      24,
      25,
      26,
      27,
      28
     ]
    },
    "numpy.zeros": {
     "line number": [
      19,
      23
     ]
    },
    "object": {
     "line number": [
      19,
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexerrors.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexerrors.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexerrors.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexerrors.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexerrors.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_indexing.HAS_REFCOUNT": {
  "data": {
   "shadows": "numpy.testing.HAS_REFCOUNT"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.TestArrayToIndexDeprecation": {
  "data": {
   "lineno": 1248,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1248
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestArrayToIndexDeprecation.test_array_to_index_error": {
  "data": {
   "lineno": 1252,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1256,
      1257,
      1258
     ]
    },
    "numpy.array": {
     "line number": [
      1254,
      1256
     ]
    },
    "numpy.core.tests.test_indexing.operator": {
     "line number": [
      1256
     ]
    },
    "numpy.reshape": {
     "line number": [
      1257
     ]
    },
    "numpy.take": {
     "line number": [
      1258
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1256,
      1257,
      1258
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestBooleanIndexing": {
  "data": {
   "lineno": 1227,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1227
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestBooleanIndexing.test_bool_as_int_argument_errors": {
  "data": {
   "lineno": 1229,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1237
     ]
    },
    "TypeError": {
     "line number": [
      1232,
      1233,
      1236,
      1238
     ]
    },
    "numpy.True_": {
     "line number": [
      1237
     ]
    },
    "numpy.array": {
     "line number": [
      1230,
      1236
     ]
    },
    "numpy.bool_": {
     "line number": [
      1233
     ]
    },
    "numpy.core.tests.test_indexing.operator": {
     "line number": [
      1236,
      1237
     ]
    },
    "numpy.reshape": {
     "line number": [
      1232,
      1233
     ]
    },
    "numpy.take": {
     "line number": [
      1238
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1232,
      1233,
      1236,
      1238
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      1237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestBooleanIndexing.test_boolean_indexing_weirdness": {
  "data": {
   "lineno": 1240,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      1245
     ]
    },
    "numpy.ones": {
     "line number": [
      1242
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1245
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestBroadcastedAssignments": {
  "data": {
   "lineno": 530,
   "symbols_in_volume": {
    "object": {
     "line number": [
      530
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestBroadcastedAssignments.assign": {
  "data": {
   "lineno": 531
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_broadcast_subspace": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      575,
      576
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      578
     ]
    },
    "numpy.zeros": {
     "line number": [
      574
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_index_is_larger": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      571
     ]
    },
    "numpy.zeros": {
     "line number": [
      568
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_prepend_not_one": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      551,
      552,
      553
     ]
    },
    "numpy.ones": {
     "line number": [
      551,
      552,
      553
     ]
    },
    "numpy.s_": {
     "line number": [
      547
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      551,
      552,
      553
     ]
    },
    "numpy.zeros": {
     "line number": [
      548
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_prepending_ones": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      538,
      540,
      541,
      543
     ]
    },
    "numpy.zeros": {
     "line number": [
      536
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_simple_broadcasting_errors": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      560,
      561,
      562,
      563,
      564
     ]
    },
    "numpy.s_": {
     "line number": [
      557
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      560,
      561,
      562,
      563,
      564
     ]
    },
    "numpy.zeros": {
     "line number": [
      558,
      560,
      561,
      562,
      563,
      564
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestCApiAccess": {
  "data": {
   "lineno": 1289,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1289
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestCApiAccess.test_getitem": {
  "data": {
   "lineno": 1290,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      1294,
      1296,
      1297,
      1298,
      1299
     ]
    },
    "numpy.arange": {
     "line number": [
      1301
     ]
    },
    "numpy.core._multiarray_tests.array_indexing": {
     "line number": [
      1291
     ]
    },
    "numpy.core.tests.test_indexing.functools": {
     "line number": [
      1291
     ]
    },
    "numpy.ones": {
     "line number": [
      1294,
      1296,
      1297,
      1298,
      1299
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1302,
      1304
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1294,
      1296,
      1297,
      1298,
      1299
     ]
    },
    "subscript": {
     "line number": [
      1302,
      1304
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestCApiAccess.test_setitem": {
  "data": {
   "lineno": 1306,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      1312,
      1314,
      1315,
      1316,
      1317
     ]
    },
    "ValueError": {
     "line number": [
      1310
     ]
    },
    "assign": {
     "line number": [
      1320,
      1324
     ]
    },
    "numpy.arange": {
     "line number": [
      1319
     ]
    },
    "numpy.core._multiarray_tests.array_indexing": {
     "line number": [
      1307
     ]
    },
    "numpy.core.tests.test_indexing.functools": {
     "line number": [
      1307
     ]
    },
    "numpy.ones": {
     "line number": [
      1310,
      1312,
      1314,
      1315,
      1316,
      1317
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1321
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1325
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1310,
      1312,
      1314,
      1315,
      1316,
      1317
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestFancyIndexingCast": {
  "data": {
   "lineno": 680,
   "symbols_in_volume": {
    "object": {
     "line number": [
      680
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestFancyIndexingCast.test_boolean_index_cast_assign": {
  "data": {
   "lineno": 681,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      684
     ]
    },
    "numpy.ComplexWarning": {
     "line number": [
      693,
      698
     ]
    },
    "numpy.array": {
     "line number": [
      689,
      694,
      699
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      690,
      695,
      700
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      693,
      698
     ]
    },
    "numpy.zeros": {
     "line number": [
      684,
      686
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestFancyIndexingEquivalence": {
  "data": {
   "lineno": 702,
   "symbols_in_volume": {
    "object": {
     "line number": [
      702
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestFancyIndexingEquivalence.test_cast_equivalence": {
  "data": {
   "lineno": 735,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      737,
      745
     ]
    },
    "numpy.array": {
     "line number": [
      740,
      741,
      746
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      742,
      747
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestFancyIndexingEquivalence.test_object_assign": {
  "data": {
   "lineno": 703,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      706,
      713
     ]
    },
    "numpy.ones": {
     "line number": [
      725
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      710,
      715,
      722,
      730,
      733
     ]
    },
    "object": {
     "line number": [
      706,
      713,
      725
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestFieldIndexing": {
  "data": {
   "lineno": 521,
   "symbols_in_volume": {
    "object": {
     "line number": [
      521
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestFieldIndexing.test_scalar_return_type": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      526,
      527
     ]
    },
    "numpy.ndarray": {
     "line number": [
      526,
      527
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      526,
      527
     ]
    },
    "numpy.zeros": {
     "line number": [
      525
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument": {
  "data": {
   "lineno": 1172,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1172
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_argument_errors": {
  "data": {
   "lineno": 1202,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1205,
      1206,
      1207,
      1208
     ]
    },
    "numpy.array": {
     "line number": [
      1203,
      1206
     ]
    },
    "numpy.float64": {
     "line number": [
      1208
     ]
    },
    "numpy.reshape": {
     "line number": [
      1205,
      1206
     ]
    },
    "numpy.take": {
     "line number": [
      1207,
      1208
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1205,
      1206,
      1207,
      1208
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_sequence_multiplication": {
  "data": {
   "lineno": 1210,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1215
     ]
    },
    "mult": {
     "line number": [
      1217
     ]
    },
    "numpy.float_": {
     "line number": [
      1215
     ]
    },
    "numpy.int_": {
     "line number": [
      1217
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_sequence_multiplication.mult": {
  "data": {
   "lineno": 1212
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_reduce_axis_float_index": {
  "data": {
   "lineno": 1219,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1221,
      1222,
      1223,
      1224
     ]
    },
    "numpy.min": {
     "line number": [
      1221,
      1222,
      1223,
      1224
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1221,
      1222,
      1223,
      1224
     ]
    },
    "numpy.zeros": {
     "line number": [
      1220
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_valid_indexing": {
  "data": {
   "lineno": 1179,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1181,
      1183
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_valid_slicing": {
  "data": {
   "lineno": 1189,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1191
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "object": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_needs_api": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      225
     ]
    },
    "numpy.ones": {
     "line number": [
      227
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      231
     ]
    },
    "numpy.zeros": {
     "line number": [
      224,
      225,
      229
     ]
    },
    "object": {
     "line number": [
      227
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      215,
      216,
      217
     ]
    },
    "numpy.arange": {
     "line number": [
      210
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      215,
      216,
      217
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f": {
  "data": {
   "lineno": 212
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_boolean_indexing_onedim": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      201
     ]
    },
    "numpy.array": {
     "line number": [
      200,
      201
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      202,
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_boolean_indexing_twodim": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      236,
      239
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      242,
      243,
      244,
      248
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_boolean_shape_mismatch": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      187,
      190,
      193,
      195
     ]
    },
    "bool": {
     "line number": [
      192
     ]
    },
    "numpy.array": {
     "line number": [
      186,
      189
     ]
    },
    "numpy.ones": {
     "line number": [
      184
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      187,
      190,
      193,
      195
     ]
    },
    "numpy.zeros": {
     "line number": [
      192
     ]
    },
    "slice": {
     "line number": [
      195
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_broaderrors_indexing": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      317,
      318
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      317,
      318
     ]
    },
    "numpy.zeros": {
     "line number": [
      316
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": {
    "SequenceLike": {
     "line number": [
      489,
      489,
      494,
      494
     ]
    },
    "numpy.arange": {
     "line number": [
      488
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      489,
      494
     ]
    },
    "numpy.zeros": {
     "line number": [
      493
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": {
    "object": {
     "line number": [
      478
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__getitem__": {
  "data": {
   "lineno": 485,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      486
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__index__": {
  "data": {
   "lineno": 479
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__len__": {
  "data": {
   "lineno": 482
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_ellipsis_index": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "Ellipsis": {
     "line number": [
      157
     ]
    },
    "numpy.array": {
     "line number": [
      137,
      153,
      156
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      140,
      143
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      141,
      147,
      148,
      149,
      153,
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_empty_fancy_index": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      134
     ]
    },
    "numpy.array": {
     "line number": [
      125,
      129,
      133
     ]
    },
    "numpy.intp": {
     "line number": [
      129
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      126,
      127,
      130,
      131
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      134
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_empty_tuple_index": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      94
     ]
    },
    "numpy.array": {
     "line number": [
      90,
      93
     ]
    },
    "numpy.int_": {
     "line number": [
      94
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      92,
      94
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_everything_returns_views": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      309
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      311,
      312,
      313
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_index_no_array_to_index": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      80
     ]
    },
    "numpy.array": {
     "line number": [
      78
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_index_no_floats": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43
     ]
    },
    "numpy.array": {
     "line number": [
      20
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_indexing_array_negative_strides": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      519
     ]
    },
    "numpy.zeros": {
     "line number": [
      514
     ]
    },
    "slice": {
     "line number": [
      517
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_indexing_array_weird_strides": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      502
     ]
    },
    "numpy.broadcast_to": {
     "line number": [
      503
     ]
    },
    "numpy.intp": {
     "line number": [
      508
     ]
    },
    "numpy.ones": {
     "line number": [
      500,
      501
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      506,
      509
     ]
    },
    "numpy.zeros": {
     "line number": [
      508
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_memory_order": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      380,
      381
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      382,
      386
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_nonbaseclass_values": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      357,
      361,
      365
     ]
    },
    "numpy.zeros": {
     "line number": [
      352
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_nonbaseclass_values.SubClass": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      347
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_nonbaseclass_values.SubClass.__array_finalize__": {
  "data": {
   "lineno": 348
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_none_index": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      84
     ]
    },
    "numpy.newaxis": {
     "line number": [
      85
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      85,
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_reverse_strides_and_subspace_bufferinit": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      257,
      265
     ]
    },
    "numpy.intp": {
     "line number": [
      256
     ]
    },
    "numpy.ones": {
     "line number": [
      255,
      264
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      261,
      267
     ]
    },
    "numpy.zeros": {
     "line number": [
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_reversed_strides_result_allocation": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      272,
      273,
      276
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      274
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_same_kind_index_casting": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      105,
      107,
      110,
      111,
      113,
      116,
      117,
      119
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      109,
      111,
      114,
      117,
      120
     ]
    },
    "numpy.uintp": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_scalar_array_bool": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      296,
      297,
      298
     ]
    },
    "numpy.bool_": {
     "line number": [
      297,
      298
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      297,
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": {
    "ArrayLike": {
     "line number": [
      409,
      420
     ]
    },
    "Zero": {
     "line number": [
      396
     ]
    },
    "isinstance": {
     "line number": [
      404,
      406,
      408,
      409,
      415,
      417,
      419,
      420
     ]
    },
    "numpy.array": {
     "line number": [
      408,
      412,
      413,
      416,
      418,
      419
     ]
    },
    "numpy.float_": {
     "line number": [
      404,
      406,
      408,
      409
     ]
    },
    "numpy.ndarray": {
     "line number": [
      415,
      417,
      419,
      420
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      404,
      406,
      408,
      409,
      415,
      417,
      419,
      420
     ]
    },
    "numpy.zeros": {
     "line number": [
      403,
      405,
      407
     ]
    },
    "object": {
     "line number": [
      413
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "object": {
     "line number": [
      398
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike.__array__": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      401
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.Zero": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": {
    "object": {
     "line number": [
      391
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.Zero.__index__": {
  "data": {
   "lineno": 393
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_single_bool_index": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      176,
      180,
      181
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      180,
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_single_int_index": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      170,
      172
     ]
    },
    "numpy.array": {
     "line number": [
      162
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      166,
      167
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      170,
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_slicing_no_floats": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      49,
      50,
      51,
      52,
      53,
      55,
      56,
      57,
      58,
      59,
      61,
      62,
      63,
      64,
      65,
      67,
      68,
      69,
      70,
      71,
      72,
      74
     ]
    },
    "numpy.array": {
     "line number": [
      46
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      49,
      50,
      51,
      52,
      53,
      55,
      56,
      57,
      58,
      59,
      61,
      62,
      63,
      64,
      65,
      67,
      68,
      69,
      70,
      71,
      72,
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_small_regressions": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      430,
      432
     ]
    },
    "numpy.array": {
     "line number": [
      424,
      428,
      429,
      431,
      433
     ]
    },
    "numpy.core.tests.test_indexing.sys": {
     "line number": [
      426,
      436
     ]
    },
    "numpy.dtype": {
     "line number": [
      426,
      436
     ]
    },
    "numpy.intp": {
     "line number": [
      426,
      428,
      431,
      436
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      425,
      435
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      436
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      430,
      432
     ]
    },
    "numpy.uint8": {
     "line number": [
      429,
      433
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_subclass_writeable": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      370
     ]
    },
    "numpy.array": {
     "line number": [
      370,
      372
     ]
    },
    "numpy.rec.array": {
     "line number": [
      368
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      371,
      373,
      374,
      375
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_too_many_fancy_indices_special_case": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      292
     ]
    },
    "numpy.array": {
     "line number": [
      292
     ]
    },
    "numpy.ones": {
     "line number": [
      291
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      292
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_trivial_fancy_not_possible": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      334,
      335,
      341
     ]
    },
    "numpy.intp": {
     "line number": [
      335
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      336,
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_trivial_fancy_out_of_bounds": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      324,
      325,
      328,
      329
     ]
    },
    "numpy.intp": {
     "line number": [
      322,
      326
     ]
    },
    "numpy.ones": {
     "line number": [
      322,
      326
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      324,
      325,
      328,
      329
     ]
    },
    "numpy.zeros": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_tuple_subclass": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": {
    "TupleSubclass": {
     "line number": [
      467
     ]
    },
    "numpy.ones": {
     "line number": [
      461
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      468,
      470
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_tuple_subclass.TupleSubclass": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "tuple": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_unaligned": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      445,
      453
     ]
    },
    "numpy.array": {
     "line number": [
      444
     ]
    },
    "numpy.dtype": {
     "line number": [
      440,
      443
     ]
    },
    "numpy.int16": {
     "line number": [
      454,
      455
     ]
    },
    "numpy.int8": {
     "line number": [
      439,
      442,
      451
     ]
    },
    "numpy.intp": {
     "line number": [
      451,
      452
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      447,
      454
     ]
    },
    "numpy.zeros": {
     "line number": [
      439,
      442,
      451
     ]
    },
    "ord": {
     "line number": [
      439,
      442
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_uncontiguous_subspace_assignment": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      284,
      285
     ]
    },
    "numpy.full": {
     "line number": [
      281,
      282
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      287
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestIndexing.test_void_scalar_empty_tuple": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      100
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      98,
      99,
      100
     ]
    },
    "numpy.zeros": {
     "line number": [
      97
     ]
    },
    "type": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestMultiIndexingAutomated": {
  "data": {
   "lineno": 750,
   "symbols_in_volume": {
    "object": {
     "line number": [
      750
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._check_multi_index": {
  "data": {
   "lineno": 1040,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1053
     ]
    },
    "numpy.core.tests.test_indexing.sys": {
     "line number": [
      1055,
      1059
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      1054,
      1058
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1059
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1056,
      1057
     ]
    },
    "type": {
     "line number": [
      1056,
      1057
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._check_single_index": {
  "data": {
   "lineno": 1064,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1077
     ]
    },
    "numpy.core.tests.test_indexing.sys": {
     "line number": [
      1079,
      1083
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      1078,
      1082
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1083
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1080,
      1081
     ]
    },
    "type": {
     "line number": [
      1080,
      1081
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._compare_index_result": {
  "data": {
   "lineno": 1088,
   "symbols_in_volume": {
    "numpy.core.tests.test_indexing.sys": {
     "line number": [
      1102,
      1104
     ]
    },
    "numpy.may_share_memory": {
     "line number": [
      1097
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      1099
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1097
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1093,
      1114,
      1118
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1102,
      1104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._get_multi_index": {
  "data": {
   "lineno": 801,
   "symbols_in_volume": {
    "Ellipsis": {
     "line number": [
      854
     ]
    },
    "Exception": {
     "line number": [
      914,
      1013
     ]
    },
    "IndexError": {
     "line number": [
      849,
      858,
      871,
      874,
      886,
      909,
      929,
      935,
      942,
      1000,
      1005,
      1016,
      1030
     ]
    },
    "ValueError": {
     "line number": [
      870,
      1022,
      1028
     ]
    },
    "bool": {
     "line number": [
      846,
      907
     ]
    },
    "enumerate": {
     "line number": [
      843,
      896
     ]
    },
    "int": {
     "line number": [
      990
     ]
    },
    "isinstance": {
     "line number": [
      846,
      859,
      862,
      897,
      907
     ]
    },
    "len": {
     "line number": [
      943,
      971,
      974,
      984,
      988,
      991,
      1006,
      1006
     ]
    },
    "list": {
     "line number": [
      825,
      960
     ]
    },
    "numpy.any": {
     "line number": [
      1004,
      1004
     ]
    },
    "numpy.arange": {
     "line number": [
      899
     ]
    },
    "numpy.array": {
     "line number": [
      869,
      904,
      917
     ]
    },
    "numpy.broadcast": {
     "line number": [
      994
     ]
    },
    "numpy.intp": {
     "line number": [
      869,
      904,
      917
     ]
    },
    "numpy.ndarray": {
     "line number": [
      846,
      862,
      907
     ]
    },
    "numpy.nonzero": {
     "line number": [
      912
     ]
    },
    "numpy.prod": {
     "line number": [
      921,
      990
     ]
    },
    "numpy.product": {
     "line number": [
      1007
     ]
    },
    "numpy.ravel_multi_index": {
     "line number": [
      912,
      1011,
      1018
     ]
    },
    "range": {
     "line number": [
      960,
      971
     ]
    },
    "slice": {
     "line number": [
      859,
      893,
      897
     ]
    },
    "zip": {
     "line number": [
      1001
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestMultiIndexingAutomated.setup": {
  "data": {
   "lineno": 772,
   "symbols_in_volume": {
    "Ellipsis": {
     "line number": [
      775,
      796
     ]
    },
    "int": {
     "line number": [
      793
     ]
    },
    "numpy.arange": {
     "line number": [
      773
     ]
    },
    "numpy.array": {
     "line number": [
      779,
      780,
      781,
      789,
      790,
      791,
      792,
      794,
      796
     ]
    },
    "numpy.dtype": {
     "line number": [
      791
     ]
    },
    "numpy.empty": {
     "line number": [
      774,
      788
     ]
    },
    "numpy.int8": {
     "line number": [
      792
     ]
    },
    "numpy.intp": {
     "line number": [
      788
     ]
    },
    "numpy.prod": {
     "line number": [
      773
     ]
    },
    "numpy.zeros": {
     "line number": [
      793
     ]
    },
    "slice": {
     "line number": [
      783,
      784,
      785,
      786,
      799
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_1d": {
  "data": {
   "lineno": 1167,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1168
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_boolean": {
  "data": {
   "lineno": 1120,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1131,
      1133,
      1135
     ]
    },
    "numpy.array": {
     "line number": [
      1121,
      1122,
      1123
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1122,
      1124
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      1131,
      1133,
      1135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_multidim": {
  "data": {
   "lineno": 1137,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1143
     ]
    },
    "IndexError": {
     "line number": [
      1162,
      1163,
      1164,
      1165
     ]
    },
    "isskip": {
     "line number": [
      1154
     ]
    },
    "itertools.product": {
     "line number": [
      1153
     ]
    },
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      1144
     ]
    },
    "numpy.core.tests.test_indexing.warnings": {
     "line number": [
      1140,
      1143,
      1144
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1162,
      1163,
      1164,
      1165
     ]
    },
    "tuple": {
     "line number": [
      1154
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_multidim.isskip": {
  "data": {
   "lineno": 1146,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1147
     ]
    },
    "str": {
     "line number": [
      1147
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestMultipleEllipsisError": {
  "data": {
   "lineno": 1278,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1278
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestMultipleEllipsisError.test_basic": {
  "data": {
   "lineno": 1282,
   "symbols_in_volume": {
    "Ellipsis": {
     "line number": [
      1285,
      1286
     ]
    },
    "IndexError": {
     "line number": [
      1284,
      1285,
      1286
     ]
    },
    "numpy.arange": {
     "line number": [
      1283
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1284,
      1285,
      1286
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestNonIntegerArrayLike": {
  "data": {
   "lineno": 1261,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1261
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestNonIntegerArrayLike.test_basic": {
  "data": {
   "lineno": 1268,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      1271,
      1272
     ]
    },
    "numpy.arange": {
     "line number": [
      1269
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1271,
      1272
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestSubclasses": {
  "data": {
   "lineno": 581,
   "symbols_in_volume": {
    "object": {
     "line number": [
      581
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestSubclasses.test_basic": {
  "data": {
   "lineno": 582,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      590
     ]
    },
    "numpy.ndarray": {
     "line number": [
      600,
      607
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      593,
      594,
      598,
      599,
      600,
      605,
      606,
      607
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      595,
      601,
      602,
      608,
      609
     ]
    },
    "type": {
     "line number": [
      593,
      598,
      600,
      605,
      607
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestSubclasses.test_basic.SubClass": {
  "data": {
   "lineno": 587,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      587
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestSubclasses.test_finalize_gets_full_info": {
  "data": {
   "lineno": 611,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      618
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      620,
      621,
      624,
      625,
      628,
      629
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestSubclasses.test_finalize_gets_full_info.SubClass": {
  "data": {
   "lineno": 613,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      613
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestSubclasses.test_finalize_gets_full_info.SubClass.__array_finalize__": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      615
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestSubclasses.test_slice_decref_getsetslice": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      654,
      669
     ]
    },
    "DeprecationWarning": {
     "line number": [
      659,
      674
     ]
    },
    "ValueError": {
     "line number": [
      655,
      670
     ]
    },
    "hasattr": {
     "line number": [
      657,
      672
     ]
    },
    "numpy.array": {
     "line number": [
      648
     ]
    },
    "numpy.core.tests.test_indexing.pytest": {
     "line number": [
      631
     ]
    },
    "numpy.core.tests.test_indexing.sys": {
     "line number": [
      651,
      657,
      660,
      662,
      666,
      672,
      675,
      677
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      631
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      650,
      651,
      661,
      662,
      665,
      666,
      676,
      677
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      658,
      673
     ]
    },
    "slice": {
     "line number": [
      650,
      661,
      665,
      676
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestSubclasses.test_slice_decref_getsetslice.KeepIndexObject": {
  "data": {
   "lineno": 637,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      637
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_indexing.TestSubclasses.test_slice_decref_getsetslice.KeepIndexObject.__getitem__": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      641
     ]
    },
    "slice": {
     "line number": [
      640
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.TestSubclasses.test_slice_decref_getsetslice.KeepIndexObject.__setitem__": {
  "data": {
   "lineno": 643,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      646
     ]
    },
    "slice": {
     "line number": [
      645
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_indexing.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.array_indexing": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.array_indexing"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_indexing.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_item_selection": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_item_selection.HAS_REFCOUNT": {
  "data": {
   "shadows": "numpy.testing.HAS_REFCOUNT"
  },
  "type": "import"
 },
 "numpy.core.tests.test_item_selection.TestTake": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "object": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_item_selection.TestTake.test_empty_argpartition": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      83,
      84,
      86
     ]
    },
    "numpy.int16": {
     "line number": [
      84
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_item_selection.TestTake.test_empty_partition": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      73,
      77
     ]
    },
    "numpy.int16": {
     "line number": [
      77
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_item_selection.TestTake.test_refcounting": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "all": {
     "line number": [
      58,
      64
     ]
    },
    "numpy.array": {
     "line number": [
      53,
      54,
      60
     ]
    },
    "numpy.core.tests.test_item_selection.sys": {
     "line number": [
      58,
      64
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      57,
      63
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      58,
      64
     ]
    },
    "object": {
     "line number": [
      51
     ]
    },
    "range": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_item_selection.TestTake.test_simple": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      20,
      38,
      40
     ]
    },
    "int": {
     "line number": [
      26
     ]
    },
    "list": {
     "line number": [
      30
     ]
    },
    "numpy.array": {
     "line number": [
      29
     ]
    },
    "numpy.dtype": {
     "line number": [
      26
     ]
    },
    "numpy.empty": {
     "line number": [
      17,
      18,
      19
     ]
    },
    "numpy.intp": {
     "line number": [
      17,
      18,
      19
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      29
     ]
    },
    "numpy.number": {
     "line number": [
      29
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      48
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      45
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      40
     ]
    },
    "object": {
     "line number": [
      26
     ]
    },
    "tuple": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_item_selection.TestTake.test_unicode_mode": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      69
     ]
    },
    "numpy.arange": {
     "line number": [
      67
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_item_selection.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_item_selection.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_item_selection.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_item_selection.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_item_selection.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_item_selection.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_item_selection.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_item_selection.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble": {
  "data": {
   "symbols_in_volume": {
    "len": {
     "line number": [
      30
     ]
    },
    "numpy.core.tests.test_longdouble.LD_INFO": {
     "line number": [
      12,
      15
     ]
    },
    "numpy.core.tests.test_longdouble._o": {
     "line number": [
      16,
      16,
      17
     ]
    },
    "numpy.double": {
     "line number": [
      12
     ]
    },
    "numpy.finfo": {
     "line number": [
      11,
      12
     ]
    },
    "numpy.longdouble": {
     "line number": [
      11,
      16,
      30
     ]
    },
    "repr": {
     "line number": [
      16,
      30
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_longdouble.CommaDecimalPointLocale": {
  "data": {
   "shadows": "numpy.core.tests._locales.CommaDecimalPointLocale"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble.LD_INFO": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "numpy.core.tests._locales.CommaDecimalPointLocale": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_best_effort": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      193
     ]
    },
    "numpy.fromstring": {
     "line number": [
      192
     ]
    },
    "numpy.longdouble": {
     "line number": [
      192
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      192
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_best_effort_float": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "float": {
     "line number": [
      188
     ]
    },
    "numpy.array": {
     "line number": [
      189
     ]
    },
    "numpy.fromstring": {
     "line number": [
      188
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "numpy.fromstring": {
     "line number": [
      197
     ]
    },
    "numpy.longdouble": {
     "line number": [
      197,
      198
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_repr": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "float": {
     "line number": [
      184
     ]
    },
    "numpy.fromstring": {
     "line number": [
      184
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      185
     ]
    },
    "repr": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_sep": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      201
     ]
    },
    "numpy.fromstring": {
     "line number": [
      202
     ]
    },
    "numpy.longdouble": {
     "line number": [
      202
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_value": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "numpy.fromstring": {
     "line number": [
      206
     ]
    },
    "numpy.longdouble": {
     "line number": [
      206
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_repr_roundtrip_foreign": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "numpy.longdouble": {
     "line number": [
      180
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      180
     ]
    },
    "repr": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.TestFileBased": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      90
     ]
    },
    "numpy.core.tests.test_longdouble.LD_INFO": {
     "line number": [
      89
     ]
    },
    "object": {
     "line number": [
      87
     ]
    },
    "repr": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_longdouble.TestFileBased.test_fromfile": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "numpy.core.tests.test_longdouble.pytest": {
     "line number": [
      100
     ]
    },
    "numpy.core.tests.test_longdouble.string_to_longdouble_inaccurate": {
     "line number": [
      100
     ]
    },
    "numpy.fromfile": {
     "line number": [
      106
     ]
    },
    "numpy.longdouble": {
     "line number": [
      106
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      107
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      103
     ]
    },
    "open": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.TestFileBased.test_fromfile_bogus": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "float": {
     "line number": [
      97
     ]
    },
    "numpy.array": {
     "line number": [
      98
     ]
    },
    "numpy.fromfile": {
     "line number": [
      97
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      98
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      94
     ]
    },
    "open": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.TestFileBased.test_genfromtxt": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "numpy.core.tests.test_longdouble.pytest": {
     "line number": [
      109
     ]
    },
    "numpy.core.tests.test_longdouble.string_to_longdouble_inaccurate": {
     "line number": [
      109
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      115
     ]
    },
    "numpy.longdouble": {
     "line number": [
      115
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      116
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      112
     ]
    },
    "open": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.TestFileBased.test_loadtxt": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "numpy.core.tests.test_longdouble.pytest": {
     "line number": [
      118
     ]
    },
    "numpy.core.tests.test_longdouble.string_to_longdouble_inaccurate": {
     "line number": [
      118
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      124
     ]
    },
    "numpy.longdouble": {
     "line number": [
      124
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      125
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      121
     ]
    },
    "open": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.TestFileBased.test_tofile_roundtrip": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "numpy.core.tests.test_longdouble.pytest": {
     "line number": [
      127
     ]
    },
    "numpy.core.tests.test_longdouble.string_to_longdouble_inaccurate": {
     "line number": [
      127
     ]
    },
    "numpy.fromfile": {
     "line number": [
      132
     ]
    },
    "numpy.longdouble": {
     "line number": [
      132
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      133
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble._o": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.core.tests.test_longdouble.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble.longdouble_longer_than_double": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.core.tests.test_longdouble.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble.repr_precision": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "numpy.core.tests.test_longdouble.string_to_longdouble_inaccurate": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.core.tests.test_longdouble.temppath": {
  "data": {
   "shadows": "numpy.testing.temppath"
  },
  "type": "import"
 },
 "numpy.core.tests.test_longdouble.test_array_repr": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      169
     ]
    },
    "numpy.all": {
     "line number": [
      168
     ]
    },
    "numpy.array": {
     "line number": [
      166,
      167
     ]
    },
    "numpy.core.tests.test_longdouble.LD_INFO": {
     "line number": [
      165
     ]
    },
    "numpy.core.tests.test_longdouble.longdouble_longer_than_double": {
     "line number": [
      160
     ]
    },
    "numpy.core.tests.test_longdouble.pytest": {
     "line number": [
      160,
      162
     ]
    },
    "numpy.core.tests.test_longdouble.string_to_longdouble_inaccurate": {
     "line number": [
      162
     ]
    },
    "numpy.longdouble": {
     "line number": [
      167
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      170
     ]
    },
    "repr": {
     "line number": [
      170,
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_bogus_string": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      59,
      60
     ]
    },
    "numpy.longdouble": {
     "line number": [
      59,
      60
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      59,
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_bytes": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "numpy.longdouble": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_format": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "numpy.core.tests.test_longdouble.LD_INFO": {
     "line number": [
      148
     ]
    },
    "numpy.core.tests.test_longdouble.longdouble_longer_than_double": {
     "line number": [
      144
     ]
    },
    "numpy.core.tests.test_longdouble.pytest": {
     "line number": [
      144,
      145
     ]
    },
    "numpy.core.tests.test_longdouble.string_to_longdouble_inaccurate": {
     "line number": [
      145
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_fromstring": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      67
     ]
    },
    "numpy.core.tests.test_longdouble.LD_INFO": {
     "line number": [
      65
     ]
    },
    "numpy.core.tests.test_longdouble.pytest": {
     "line number": [
      63
     ]
    },
    "numpy.core.tests.test_longdouble.string_to_longdouble_inaccurate": {
     "line number": [
      63
     ]
    },
    "numpy.fromstring": {
     "line number": [
      68
     ]
    },
    "numpy.longdouble": {
     "line number": [
      68
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      68
     ]
    },
    "repr": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_fromstring_bogus": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "float": {
     "line number": [
      73
     ]
    },
    "numpy.array": {
     "line number": [
      74
     ]
    },
    "numpy.fromstring": {
     "line number": [
      73
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_fromstring_empty": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      79
     ]
    },
    "numpy.fromstring": {
     "line number": [
      78
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_fromstring_missing": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      84
     ]
    },
    "numpy.fromstring": {
     "line number": [
      83
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_percent": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "numpy.core.tests.test_longdouble.LD_INFO": {
     "line number": [
      156
     ]
    },
    "numpy.core.tests.test_longdouble.longdouble_longer_than_double": {
     "line number": [
      152
     ]
    },
    "numpy.core.tests.test_longdouble.pytest": {
     "line number": [
      152,
      153
     ]
    },
    "numpy.core.tests.test_longdouble.string_to_longdouble_inaccurate": {
     "line number": [
      153
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_repr_exact": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "numpy.core.tests.test_longdouble.LD_INFO": {
     "line number": [
      140
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      141
     ]
    },
    "repr": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_repr_roundtrip": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "numpy.core.tests.test_longdouble.LD_INFO": {
     "line number": [
      36,
      32
     ]
    },
    "numpy.core.tests.test_longdouble.pytest": {
     "line number": [
      32
     ]
    },
    "numpy.core.tests.test_longdouble.repr_precision": {
     "line number": [
      32
     ]
    },
    "numpy.longdouble": {
     "line number": [
      37
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      37
     ]
    },
    "repr": {
     "line number": [
      37,
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_repr_roundtrip_bytes": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "numpy.core.tests.test_longdouble.LD_INFO": {
     "line number": [
      54
     ]
    },
    "numpy.core.tests.test_longdouble.pytest": {
     "line number": [
      52
     ]
    },
    "numpy.core.tests.test_longdouble.string_to_longdouble_inaccurate": {
     "line number": [
      52
     ]
    },
    "numpy.longdouble": {
     "line number": [
      55
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      55
     ]
    },
    "repr": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_scalar_extraction": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      23
     ]
    },
    "numpy.core.tests.test_longdouble.LD_INFO": {
     "line number": [
      22
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_string": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "numpy.longdouble": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_longdouble.test_unicode": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "numpy.longdouble": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_machar": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_machar.MachAr": {
  "data": {
   "shadows": "numpy.core.machar.MachAr"
  },
  "type": "import"
 },
 "numpy.core.tests.test_machar.TestMachAr": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "object": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_machar.TestMachAr._run_machar_highprec": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      20
     ]
    },
    "numpy.array": {
     "line number": [
      19
     ]
    },
    "numpy.core.machar.MachAr": {
     "line number": [
      19
     ]
    },
    "numpy.core.numerictypes.float96": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_machar.TestMachAr.test_underlow": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      32
     ]
    },
    "FloatingPointError": {
     "line number": [
      30
     ]
    },
    "numpy.errstate": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_machar.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_machar.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.core.tests.test_machar.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_machar.errstate": {
  "data": {
   "shadows": "numpy.errstate"
  },
  "type": "import"
 },
 "numpy.core.tests.test_machar.ntypes": {
  "data": {
   "shadows": "numpy.core.numerictypes"
  },
  "type": "import"
 },
 "numpy.core.tests.test_machar.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.tests.test_mem_overlap.ndims": {
     "line number": [
      22
     ]
    },
    "numpy.core.tests.test_mem_overlap.size": {
     "line number": [
      22
     ]
    },
    "numpy.core.tests.test_mem_overlap.sys": {
     "line number": [
      16
     ]
    },
    "range": {
     "line number": [
      17
     ]
    },
    "tuple": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_mem_overlap.DummyArray": {
  "data": {
   "shadows": "numpy.lib.stride_tricks.DummyArray"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.MAY_SHARE_BOUNDS": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "numpy.core.tests.test_mem_overlap.MAY_SHARE_EXACT": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc": {
  "data": {
   "lineno": 622,
   "symbols_in_volume": {
    "object": {
     "line number": [
      622
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.check_unary_fuzz": {
  "data": {
   "lineno": 627,
   "symbols_in_volume": {
    "get_out_axis_size": {
     "line number": [
      658
     ]
    },
    "next": {
     "line number": [
      642
     ]
    },
    "numpy.core.tests.test_mem_overlap.assert_copy_equivalent": {
     "line number": [
      648,
      688
     ]
    },
    "numpy.core.tests.test_mem_overlap.iter_random_view_pairs": {
     "line number": [
      636
     ]
    },
    "numpy.core.tests.test_mem_overlap.itertools": {
     "line number": [
      653
     ]
    },
    "numpy.int16": {
     "line number": [
      627
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      631
     ]
    },
    "numpy.shares_memory": {
     "line number": [
      650,
      684
     ]
    },
    "operation": {
     "line number": [
      648,
      688
     ]
    },
    "range": {
     "line number": [
      633,
      653
     ]
    },
    "slice": {
     "line number": [
      663,
      666,
      668,
      673,
      678
     ]
    },
    "tuple": {
     "line number": [
      679
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_1d_manual": {
  "data": {
   "lineno": 901,
   "symbols_in_volume": {
    "check": {
     "line number": [
      933,
      936,
      937,
      938,
      939,
      940,
      941,
      942,
      943
     ]
    },
    "numpy.add": {
     "line number": [
      903
     ]
    },
    "numpy.arange": {
     "line number": [
      928
     ]
    },
    "numpy.complex128": {
     "line number": [
      912
     ]
    },
    "numpy.complex64": {
     "line number": [
      912
     ]
    },
    "numpy.core.tests.test_mem_overlap.itertools": {
     "line number": [
      927
     ]
    },
    "numpy.core.tests.test_mem_overlap.pytest": {
     "line number": [
      901
     ]
    },
    "numpy.float32": {
     "line number": [
      912
     ]
    },
    "numpy.float64": {
     "line number": [
      912
     ]
    },
    "numpy.index_exp": {
     "line number": [
      921,
      922,
      923,
      924
     ]
    },
    "numpy.int16": {
     "line number": [
      911
     ]
    },
    "numpy.int32": {
     "line number": [
      911
     ]
    },
    "numpy.int64": {
     "line number": [
      911
     ]
    },
    "numpy.int8": {
     "line number": [
      911
     ]
    },
    "ufunc": {
     "line number": [
      903
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_1d_manual.check": {
  "data": {
   "lineno": 905,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      909
     ]
    },
    "ufunc": {
     "line number": [
      907,
      908
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_accumulate_fuzz": {
  "data": {
   "lineno": 694,
   "symbols_in_volume": {
    "get_out_axis_size": {
     "line number": [
      704
     ]
    },
    "numpy.add.accumulate": {
     "line number": [
      704
     ]
    },
    "numpy.int16": {
     "line number": [
      705
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_accumulate_fuzz.get_out_axis_size": {
  "data": {
   "lineno": 695
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduce_fuzz": {
  "data": {
   "lineno": 707,
   "symbols_in_volume": {
    "get_out_axis_size": {
     "line number": [
      711
     ]
    },
    "numpy.add.reduce": {
     "line number": [
      711
     ]
    },
    "numpy.int16": {
     "line number": [
      712
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduce_fuzz.get_out_axis_size": {
  "data": {
   "lineno": 708
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_fuzz": {
  "data": {
   "lineno": 714,
   "symbols_in_volume": {
    "get_out_axis_size": {
     "line number": [
      734
     ]
    },
    "numpy.int16": {
     "line number": [
      735
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_fuzz.do_reduceat": {
  "data": {
   "lineno": 724,
   "symbols_in_volume": {
    "len": {
     "line number": [
      726,
      727
     ]
    },
    "numpy.add.reduceat": {
     "line number": [
      732
     ]
    },
    "numpy.arange": {
     "line number": [
      731
     ]
    },
    "numpy.core.tests.test_mem_overlap.size": {
     "line number": [
      726,
      727,
      729,
      731
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_fuzz.get_out_axis_size": {
  "data": {
   "lineno": 715
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_manual": {
  "data": {
   "lineno": 737,
   "symbols_in_volume": {
    "check": {
     "line number": [
      745,
      749
     ]
    },
    "numpy.add": {
     "line number": [
      745,
      749
     ]
    },
    "numpy.arange": {
     "line number": [
      744,
      748
     ]
    },
    "numpy.int16": {
     "line number": [
      744,
      748
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_manual.check": {
  "data": {
   "lineno": 738,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      741
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_inplace_op_simple_manual": {
  "data": {
   "lineno": 945,
   "symbols_in_volume": {
    "numpy.random.RandomState": {
     "line number": [
      946
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      950
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_ufunc_at_manual": {
  "data": {
   "lineno": 794,
   "symbols_in_volume": {
    "check": {
     "line number": [
      811,
      816
     ]
    },
    "numpy.add": {
     "line number": [
      816
     ]
    },
    "numpy.arange": {
     "line number": [
      810,
      814,
      815
     ]
    },
    "numpy.int16": {
     "line number": [
      810,
      814,
      815
     ]
    },
    "numpy.invert": {
     "line number": [
      811
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_ufunc_at_manual.check": {
  "data": {
   "lineno": 795,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      807
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_gufunc_fuzz": {
  "data": {
   "lineno": 751,
   "symbols_in_volume": {
    "int": {
     "line number": [
      782
     ]
    },
    "max": {
     "line number": [
      782
     ]
    },
    "min": {
     "line number": [
      768,
      768
     ]
    },
    "next": {
     "line number": [
      766
     ]
    },
    "numpy.core._umath_tests.euclidean_pdist": {
     "line number": [
      753
     ]
    },
    "numpy.core.tests.test_mem_overlap.assert_copy_equivalent": {
     "line number": [
      792
     ]
    },
    "numpy.core.tests.test_mem_overlap.iter_random_view_pairs": {
     "line number": [
      760
     ]
    },
    "numpy.errstate": {
     "line number": [
      791
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      755
     ]
    },
    "numpy.shares_memory": {
     "line number": [
      788
     ]
    },
    "numpy.sqrt": {
     "line number": [
      782
     ]
    },
    "range": {
     "line number": [
      757
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_1d_manual": {
  "data": {
   "lineno": 818,
   "symbols_in_volume": {
    "check": {
     "line number": [
      878,
      881,
      882,
      883,
      884
     ]
    },
    "numpy.arange": {
     "line number": [
      873
     ]
    },
    "numpy.complex128": {
     "line number": [
      850
     ]
    },
    "numpy.complex64": {
     "line number": [
      850
     ]
    },
    "numpy.core.tests.test_mem_overlap.itertools": {
     "line number": [
      872
     ]
    },
    "numpy.dtype": {
     "line number": [
      851
     ]
    },
    "numpy.errstate": {
     "line number": [
      877
     ]
    },
    "numpy.float32": {
     "line number": [
      849
     ]
    },
    "numpy.float64": {
     "line number": [
      850
     ]
    },
    "numpy.index_exp": {
     "line number": [
      862,
      863,
      864,
      865,
      866,
      867,
      868,
      869
     ]
    },
    "numpy.int16": {
     "line number": [
      849
     ]
    },
    "numpy.int32": {
     "line number": [
      849
     ]
    },
    "numpy.int64": {
     "line number": [
      849
     ]
    },
    "numpy.int8": {
     "line number": [
      849
     ]
    },
    "numpy.integer": {
     "line number": [
      854
     ]
    },
    "numpy.invert": {
     "line number": [
      855
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      854
     ]
    },
    "numpy.reciprocal": {
     "line number": [
      857
     ]
    },
    "ufunc": {
     "line number": [
      855,
      857
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_1d_manual.check": {
  "data": {
   "lineno": 821,
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      831
     ]
    },
    "numpy.core.tests.test_mem_overlap.view_element_first_byte": {
     "line number": [
      831
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      828,
      846,
      847
     ]
    },
    "ufunc": {
     "line number": [
      826,
      827,
      835,
      839,
      844
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_call_fuzz": {
  "data": {
   "lineno": 690,
   "symbols_in_volume": {
    "numpy.core.tests.test_mem_overlap.pytest": {
     "line number": [
      690
     ]
    },
    "numpy.int16": {
     "line number": [
      692
     ]
    },
    "numpy.invert": {
     "line number": [
      692
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_where_same": {
  "data": {
   "lineno": 886,
   "symbols_in_volume": {
    "check": {
     "line number": [
      897,
      898,
      899
     ]
    },
    "numpy.arange": {
     "line number": [
      896
     ]
    },
    "numpy.bool_": {
     "line number": [
      896
     ]
    },
    "numpy.invert": {
     "line number": [
      888
     ]
    },
    "ufunc": {
     "line number": [
      888
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_where_same.check": {
  "data": {
   "lineno": 890,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      893
     ]
    },
    "ufunc": {
     "line number": [
      891,
      892
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap._check_assignment": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      85
     ]
    },
    "numpy.arange": {
     "line number": [
      78
     ]
    },
    "numpy.core.tests.test_mem_overlap.shape": {
     "line number": [
      78,
      78
     ]
    },
    "numpy.product": {
     "line number": [
      78
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap._indices": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "numpy.core.tests.test_mem_overlap._indices_for_axis": {
     "line number": [
      60
     ]
    },
    "numpy.core.tests.test_mem_overlap.ndims": {
     "line number": [
      65
     ]
    },
    "range": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap._indices_for_axis": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "numpy.core.tests.test_mem_overlap._indices_for_nelems": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap._indices_for_nelems": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "numpy.core.tests.test_mem_overlap.size": {
     "line number": [
      32,
      37
     ]
    },
    "slice": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap._umath_tests": {
  "data": {
   "shadows": "numpy.core._umath_tests"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.as_strided": {
  "data": {
   "shadows": "numpy.lib.stride_tricks.as_strided"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.assert_copy_equivalent": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      608
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      619
     ]
    },
    "operation": {
     "line number": [
      612,
      616
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.check_internal_overlap": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.internal_overlap": {
     "line number": [
      476
     ]
    },
    "numpy.core.tests.test_mem_overlap.itertools": {
     "line number": [
      481
     ]
    },
    "numpy.core.tests.test_mem_overlap.xrange": {
     "line number": [
      480
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      493,
      495
     ]
    },
    "repr": {
     "line number": [
      493
     ]
    },
    "set": {
     "line number": [
      479
     ]
    },
    "sum": {
     "line number": [
      482
     ]
    },
    "tuple": {
     "line number": [
      480
     ]
    },
    "zip": {
     "line number": [
      482
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.check_may_share_memory_easy_fuzz": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": {
    "get_max_work": {
     "line number": [
      361
     ]
    },
    "min": {
     "line number": [
      356
     ]
    },
    "next": {
     "line number": [
      357
     ]
    },
    "numpy.core.tests.test_mem_overlap.MAY_SHARE_EXACT": {
     "line number": [
      362
     ]
    },
    "numpy.core.tests.test_mem_overlap.iter_random_view_pairs": {
     "line number": [
      354
     ]
    },
    "numpy.int16": {
     "line number": [
      349
     ]
    },
    "numpy.may_share_memory": {
     "line number": [
      359,
      360,
      361,
      362
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      366,
      369
     ]
    },
    "numpy.zeros": {
     "line number": [
      349
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.check_may_share_memory_exact": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": {
    "numpy.core.tests.test_mem_overlap.MAY_SHARE_BOUNDS": {
     "line number": [
      185
     ]
    },
    "numpy.core.tests.test_mem_overlap.MAY_SHARE_EXACT": {
     "line number": [
      182
     ]
    },
    "numpy.may_share_memory": {
     "line number": [
      182,
      184,
      185
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      184,
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.internal_overlap": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.internal_overlap"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.iter_random_view_pairs": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      262
     ]
    },
    "list": {
     "line number": [
      289,
      296
     ]
    },
    "max": {
     "line number": [
      325
     ]
    },
    "numpy.arange": {
     "line number": [
      310,
      316
     ]
    },
    "numpy.intp": {
     "line number": [
      306,
      305,
      334,
      333
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      291,
      299
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      259
     ]
    },
    "random_slice": {
     "line number": [
      308,
      338
     ]
    },
    "random_slice_fixed_size": {
     "line number": [
      328
     ]
    },
    "range": {
     "line number": [
      284,
      307,
      335
     ]
    },
    "tuple": {
     "line number": [
      305,
      308,
      325,
      328,
      333,
      338
     ]
    },
    "zip": {
     "line number": [
      308,
      327,
      329,
      338
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.iter_random_view_pairs.random_slice": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": {
    "numpy.intp": {
     "line number": [
      265,
      266,
      267
     ]
    },
    "slice": {
     "line number": [
      270
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.iter_random_view_pairs.random_slice_fixed_size": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "numpy.core.tests.test_mem_overlap.size": {
     "line number": [
      273,
      274
     ]
    },
    "slice": {
     "line number": [
      280
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.ndims": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.core.tests.test_mem_overlap.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.shape": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.core.tests.test_mem_overlap.size": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.core.tests.test_mem_overlap.solve_diophantine": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.solve_diophantine"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_mem_overlap.test_diophantine_fuzz": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      145
     ]
    },
    "all": {
     "line number": [
      162
     ]
    },
    "any": {
     "line number": [
      153
     ]
    },
    "int": {
     "line number": [
      122,
      124
     ]
    },
    "len": {
     "line number": [
      151
     ]
    },
    "min": {
     "line number": [
      114,
      119,
      120,
      127
     ]
    },
    "numpy.core._multiarray_tests.solve_diophantine": {
     "line number": [
      133,
      137,
      157
     ]
    },
    "numpy.core.tests.test_mem_overlap.itertools": {
     "line number": [
      153
     ]
    },
    "numpy.core.tests.test_mem_overlap.pytest": {
     "line number": [
      101
     ]
    },
    "numpy.core.tests.test_mem_overlap.size": {
     "line number": [
      149,
      151,
      152
     ]
    },
    "numpy.core.tests.test_mem_overlap.xrange": {
     "line number": [
      144
     ]
    },
    "numpy.iinfo": {
     "line number": [
      106
     ]
    },
    "numpy.intp": {
     "line number": [
      106,
      116,
      117,
      122,
      124,
      128
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      104
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      138,
      153,
      158,
      161,
      162
     ]
    },
    "range": {
     "line number": [
      108,
      123,
      125
     ]
    },
    "sum": {
     "line number": [
      127,
      153,
      161
     ]
    },
    "tuple": {
     "line number": [
      122,
      124,
      144
     ]
    },
    "zip": {
     "line number": [
      127,
      144,
      161,
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_diophantine_overflow": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.solve_diophantine": {
     "line number": [
      178
     ]
    },
    "numpy.iinfo": {
     "line number": [
      168,
      169
     ]
    },
    "numpy.int64": {
     "line number": [
      169
     ]
    },
    "numpy.intp": {
     "line number": [
      168
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_internal_overlap_diophantine": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "check": {
     "line number": [
      440,
      441
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_internal_overlap_diophantine.check": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": {
    "all": {
     "line number": [
      431
     ]
    },
    "any": {
     "line number": [
      432
     ]
    },
    "numpy.core._multiarray_tests.solve_diophantine": {
     "line number": [
      424
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      430,
      431,
      432,
      435,
      437
     ]
    },
    "repr": {
     "line number": [
      435,
      437
     ]
    },
    "sum": {
     "line number": [
      430,
      430
     ]
    },
    "zip": {
     "line number": [
      430,
      430,
      431,
      432
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_internal_overlap_fuzz": {
  "data": {
   "lineno": 536,
   "symbols_in_volume": {
    "min": {
     "line number": [
      547
     ]
    },
    "numpy.arange": {
     "line number": [
      539
     ]
    },
    "numpy.core.tests.test_mem_overlap.check_internal_overlap": {
     "line number": [
      556
     ]
    },
    "numpy.core.tests.test_mem_overlap.shape": {
     "line number": [
      552,
      555
     ]
    },
    "numpy.int8": {
     "line number": [
      539
     ]
    },
    "numpy.intp": {
     "line number": [
      548,
      550,
      552
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      555
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      545
     ]
    },
    "range": {
     "line number": [
      551,
      553
     ]
    },
    "tuple": {
     "line number": [
      550,
      552
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_internal_overlap_manual": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      504
     ]
    },
    "numpy.core.tests.test_mem_overlap.check_internal_overlap": {
     "line number": [
      508,
      509,
      512,
      515,
      518,
      521,
      524,
      527,
      530,
      533
     ]
    },
    "numpy.int8": {
     "line number": [
      504
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      511,
      514,
      517,
      520,
      523,
      526,
      529,
      532
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_internal_overlap_slices": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      466
     ]
    },
    "numpy.core._multiarray_tests.internal_overlap": {
     "line number": [
      471
     ]
    },
    "numpy.int16": {
     "line number": [
      447
     ]
    },
    "numpy.intp": {
     "line number": [
      464,
      463
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      449
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      471
     ]
    },
    "numpy.zeros": {
     "line number": [
      447
     ]
    },
    "random_slice": {
     "line number": [
      468
     ]
    },
    "range": {
     "line number": [
      465
     ]
    },
    "tuple": {
     "line number": [
      463,
      468
     ]
    },
    "zip": {
     "line number": [
      468
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_internal_overlap_slices.random_slice": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "numpy.intp": {
     "line number": [
      452,
      453,
      454
     ]
    },
    "slice": {
     "line number": [
      457
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_may_share_memory_bad_max_work": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      418,
      419
     ]
    },
    "numpy.may_share_memory": {
     "line number": [
      418
     ]
    },
    "numpy.shares_memory": {
     "line number": [
      419
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      418,
      419
     ]
    },
    "numpy.zeros": {
     "line number": [
      417
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_may_share_memory_easy_fuzz": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": {
    "numpy.core.tests.test_mem_overlap.check_may_share_memory_easy_fuzz": {
     "line number": [
      383
     ]
    },
    "numpy.core.tests.test_mem_overlap.pytest": {
     "line number": [
      378
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_may_share_memory_harder_fuzz": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": {
    "max": {
     "line number": [
      397
     ]
    },
    "numpy.core.tests.test_mem_overlap.check_may_share_memory_easy_fuzz": {
     "line number": [
      397
     ]
    },
    "numpy.core.tests.test_mem_overlap.pytest": {
     "line number": [
      388
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_may_share_memory_manual": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      237
     ]
    },
    "numpy.core.tests.test_mem_overlap.check_may_share_memory_exact": {
     "line number": [
      229,
      230,
      241,
      245,
      247,
      249,
      254,
      255
     ]
    },
    "numpy.core.tests.test_mem_overlap.itertools": {
     "line number": [
      219
     ]
    },
    "numpy.int16": {
     "line number": [
      236
     ]
    },
    "numpy.int8": {
     "line number": [
      212,
      213,
      253
     ]
    },
    "numpy.may_share_memory": {
     "line number": [
      225,
      226
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      225,
      226
     ]
    },
    "numpy.zeros": {
     "line number": [
      212,
      213,
      253
     ]
    },
    "slice": {
     "line number": [
      219,
      219
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": {
    "cls": {
     "line number": [
      585,
      586,
      588,
      589
     ]
    },
    "numpy.arange": {
     "line number": [
      583
     ]
    },
    "numpy.may_share_memory": {
     "line number": [
      585,
      589
     ]
    },
    "numpy.shares_memory": {
     "line number": [
      586,
      588
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      585,
      586,
      588,
      589
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": {
    "object": {
     "line number": [
      567
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__array_interface__": {
  "data": {
   "lineno": 571,
   "symbols_in_volume": {
    "property": {
     "line number": [
      571
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__": {
  "data": {
   "lineno": 568
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2": {
  "data": {
   "lineno": 575,
   "symbols_in_volume": {
    "object": {
     "line number": [
      575
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__array__": {
  "data": {
   "lineno": 579
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__": {
  "data": {
   "lineno": 576
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_overlapping_assignments": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "numpy.core.tests.test_mem_overlap._check_assignment": {
     "line number": [
      98
     ]
    },
    "numpy.core.tests.test_mem_overlap._indices": {
     "line number": [
      92
     ]
    },
    "numpy.core.tests.test_mem_overlap.ndims": {
     "line number": [
      92
     ]
    },
    "tuple": {
     "line number": [
      95,
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.test_shares_memory_api": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": {
    "numpy.TooHardError": {
     "line number": [
      412,
      413
     ]
    },
    "numpy.compat.long": {
     "line number": [
      413
     ]
    },
    "numpy.int8": {
     "line number": [
      403
     ]
    },
    "numpy.shares_memory": {
     "line number": [
      405,
      406,
      410,
      411,
      412,
      413
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      405,
      406,
      410,
      411
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      412,
      413
     ]
    },
    "numpy.zeros": {
     "line number": [
      403
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.view_element_first_byte": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      595
     ]
    },
    "numpy.asarray": {
     "line number": [
      598
     ]
    },
    "numpy.lib.stride_tricks.DummyArray": {
     "line number": [
      598
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_mem_overlap.xrange": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.core.tests.test_memmap": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_memmap.NamedTemporaryFile": {
  "data": {
   "shadows": "tempfile.NamedTemporaryFile"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.Path": {
  "data": {
   "shadows": "numpy.compat.Path"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.TemporaryFile": {
  "data": {
   "shadows": "tempfile.TemporaryFile"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.TestMemmap": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "object": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_memmap.TestMemmap.setup": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      25
     ]
    },
    "tempfile.NamedTemporaryFile": {
     "line number": [
      21
     ]
    },
    "tempfile.mkdtemp": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.teardown": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "numpy.core.tests.test_memmap.shutil": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_arithmetic_drops_references": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      127
     ]
    },
    "numpy.memmap": {
     "line number": [
      124,
      127
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_attributes": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "numpy.memmap": {
     "line number": [
      61
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      63,
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_del": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "numpy.memmap": {
     "line number": [
      111
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      115,
      119,
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_filename": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "numpy.core.tests.test_memmap.os": {
     "line number": [
      71
     ]
    },
    "numpy.memmap": {
     "line number": [
      69
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      73,
      75
     ]
    },
    "tempfile.mktemp": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_filename_fileobj": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "numpy.memmap": {
     "line number": [
      96
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_flush": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "numpy.core.tests.test_memmap.pytest": {
     "line number": [
      100
     ]
    },
    "numpy.core.tests.test_memmap.sys": {
     "line number": [
      100
     ]
    },
    "numpy.memmap": {
     "line number": [
      103
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_getitem": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "numpy.memmap": {
     "line number": [
      176,
      179
     ]
    },
    "numpy.ndarray": {
     "line number": [
      181
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      179,
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_indexing_drops_references": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      134
     ]
    },
    "numpy.memmap": {
     "line number": [
      131,
      134
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_memmap_subclass": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "MemmapSubClass": {
     "line number": [
      187,
      192,
      193,
      194,
      195
     ]
    },
    "numpy.sum": {
     "line number": [
      192,
      193
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      192,
      193,
      194
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_memmap_subclass.MemmapSubClass": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": {
    "numpy.memmap": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_mmap_offset_greater_than_allocation_granularity": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "numpy.core.tests.test_memmap.mmap": {
     "line number": [
      198,
      199
     ]
    },
    "numpy.memmap": {
     "line number": [
      200
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_no_shape": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "numpy.memmap": {
     "line number": [
      205
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_open_with_filename": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "numpy.memmap": {
     "line number": [
      48
     ]
    },
    "tempfile.mktemp": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_path": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "numpy.compat.Path": {
     "line number": [
      82,
      87,
      79
     ]
    },
    "numpy.core.tests.test_memmap.pytest": {
     "line number": [
      79
     ]
    },
    "numpy.memmap": {
     "line number": [
      82
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      89,
      91
     ]
    },
    "str": {
     "line number": [
      87,
      89,
      91
     ]
    },
    "tempfile.mktemp": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_roundtrip": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      42
     ]
    },
    "numpy.memmap": {
     "line number": [
      34,
      40
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      43
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_slicing_keeps_references": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "numpy.memmap": {
     "line number": [
      138
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_ufunc_return_ndarray": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      156
     ]
    },
    "binary_op": {
     "line number": [
      166,
      167,
      168
     ]
    },
    "numpy.add": {
     "line number": [
      165,
      172
     ]
    },
    "numpy.average": {
     "line number": [
      157
     ]
    },
    "numpy.isscalar": {
     "line number": [
      159
     ]
    },
    "numpy.memmap": {
     "line number": [
      152,
      171,
      173
     ]
    },
    "numpy.multiply": {
     "line number": [
      165
     ]
    },
    "numpy.ndarray": {
     "line number": [
      162,
      163,
      166,
      167,
      168
     ]
    },
    "numpy.product": {
     "line number": [
      157
     ]
    },
    "numpy.subtract": {
     "line number": [
      165
     ]
    },
    "numpy.sum": {
     "line number": [
      157
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      159,
      160,
      162,
      163,
      166,
      167,
      168
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      155
     ]
    },
    "unary_op": {
     "line number": [
      158,
      162,
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_unnamed_file": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "numpy.memmap": {
     "line number": [
      55
     ]
    },
    "tempfile.TemporaryFile": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.TestMemmap.test_view": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      148
     ]
    },
    "numpy.memmap": {
     "line number": [
      143
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      146,
      147,
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_memmap.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.add": {
  "data": {
   "shadows": "numpy.add"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.allclose": {
  "data": {
   "shadows": "numpy.allclose"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.arange": {
  "data": {
   "shadows": "numpy.arange"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.asarray": {
  "data": {
   "shadows": "numpy.asarray"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.average": {
  "data": {
   "shadows": "numpy.average"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.isscalar": {
  "data": {
   "shadows": "numpy.isscalar"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.memmap": {
  "data": {
   "shadows": "numpy.memmap"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.mkdtemp": {
  "data": {
   "shadows": "tempfile.mkdtemp"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.mktemp": {
  "data": {
   "shadows": "tempfile.mktemp"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.mmap": {
  "data": {
   "shadows": "mmap"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.multiply": {
  "data": {
   "shadows": "numpy.multiply"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.ndarray": {
  "data": {
   "shadows": "numpy.ndarray"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.product": {
  "data": {
   "shadows": "numpy.product"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.subtract": {
  "data": {
   "shadows": "numpy.subtract"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.sum": {
  "data": {
   "shadows": "numpy.sum"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_memmap.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      7
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      26,
      47,
      6004
     ]
    },
    "numpy.testing.IS_PYPY": {
     "line number": [
      7432
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_multiarray.CommaDecimalPointLocale": {
  "data": {
   "shadows": "numpy.core.tests._locales.CommaDecimalPointLocale"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.Decimal": {
  "data": {
   "shadows": "decimal.Decimal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.EMPTY": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "numpy.core.tests.test_multiarray.HAS_REFCOUNT": {
  "data": {
   "shadows": "numpy.testing.HAS_REFCOUNT"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.IS_PYPY": {
  "data": {
   "shadows": "numpy.testing.IS_PYPY"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.IsPythonScalar": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.IsPythonScalar"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.MatmulCommon": {
  "data": {
   "lineno": 5692,
   "symbols_in_volume": {
    "object": {
     "line number": [
      5692
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.MatmulCommon.test_exceptions": {
  "data": {
   "lineno": 5700,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      5716
     ]
    },
    "numpy.core.tests.test_multiarray.itertools": {
     "line number": [
      5713
     ]
    },
    "numpy.ones": {
     "line number": [
      5714,
      5715
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      5716
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.MatmulCommon.test_matrix_matrix_values": {
  "data": {
   "lineno": 5842,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5843,
      5844,
      5847,
      5848,
      5849,
      5878,
      5879,
      5884
     ]
    },
    "numpy.bool_": {
     "line number": [
      5878,
      5879,
      5884
     ]
    },
    "numpy.stack": {
     "line number": [
      5845,
      5846,
      5850,
      5851,
      5852,
      5880,
      5881,
      5885,
      5886,
      5887
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5861,
      5863,
      5867,
      5871,
      5875,
      5891,
      5893,
      5897,
      5901,
      5905
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.MatmulCommon.test_matrix_vector_values": {
  "data": {
   "lineno": 5815,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5816,
      5817,
      5819,
      5831,
      5832,
      5834
     ]
    },
    "numpy.stack": {
     "line number": [
      5818,
      5820,
      5833,
      5835
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5826,
      5828,
      5838,
      5840
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.MatmulCommon.test_result_types": {
  "data": {
   "lineno": 5738,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      5750
     ]
    },
    "numpy.ones": {
     "line number": [
      5739,
      5740
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5746,
      5750
     ]
    },
    "type": {
     "line number": [
      5750
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.MatmulCommon.test_scalar_output": {
  "data": {
   "lineno": 5752,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5753,
      5754,
      5755,
      5765
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5760,
      5762,
      5767
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.MatmulCommon.test_shapes": {
  "data": {
   "lineno": 5718,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5736
     ]
    },
    "numpy.core.tests.test_multiarray.itertools": {
     "line number": [
      5725
     ]
    },
    "numpy.ones": {
     "line number": [
      5726,
      5727,
      5733,
      5734
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5729,
      5736
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.MatmulCommon.test_vector_matrix_values": {
  "data": {
   "lineno": 5788,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5789,
      5790,
      5792,
      5804,
      5805,
      5807
     ]
    },
    "numpy.stack": {
     "line number": [
      5791,
      5793,
      5806,
      5808
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5799,
      5801,
      5811,
      5813
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.MatmulCommon.test_vector_vector_values": {
  "data": {
   "lineno": 5769,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5770,
      5771,
      5772,
      5773,
      5784
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5778,
      5781,
      5786
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.NEIGH_MODE": {
  "data": {
   "lineno": 6211
  },
  "type": "constant"
 },
 "numpy.core.tests.test_multiarray.TestAlen": {
  "data": {
   "lineno": 6134,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6134
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestAlen.test_basic": {
  "data": {
   "lineno": 6135,
   "symbols_in_volume": {
    "numpy.alen": {
     "line number": [
      6137,
      6140,
      6143,
      6146
     ]
    },
    "numpy.array": {
     "line number": [
      6136,
      6139
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6137,
      6140,
      6143,
      6146
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAlen.test_singleton": {
  "data": {
   "lineno": 6148,
   "symbols_in_volume": {
    "numpy.alen": {
     "line number": [
      6149
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6149
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAlignment": {
  "data": {
   "lineno": 8010,
   "symbols_in_volume": {
    "object": {
     "line number": [
      8010
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestAlignment.check": {
  "data": {
   "lineno": 8016,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      8035
     ]
    },
    "dtype": {
     "line number": [
      8017,
      8018,
      8020,
      8026
     ]
    },
    "hasattr": {
     "line number": [
      8022
     ]
    },
    "numpy.core.tests.test_multiarray._aligned_zeros": {
     "line number": [
      8018
     ]
    },
    "numpy.dtype": {
     "line number": [
      8020
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      8028,
      8031,
      8033
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      8021,
      8023,
      8025,
      8026
     ]
    },
    "repr": {
     "line number": [
      8017
     ]
    },
    "x": {
     "line number": [
      8018
     ]
    },
    "x.__array_interface__": {
     "line number": [
      8021
     ]
    },
    "x.dtype": {
     "line number": [
      8026
     ]
    },
    "x.flags.c_contiguous": {
     "line number": [
      8028,
      8033
     ]
    },
    "x.flags.f_contiguous": {
     "line number": [
      8031
     ]
    },
    "x.shape": {
     "line number": [
      8023,
      8025
     ]
    },
    "x.size": {
     "line number": [
      8030
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAlignment.test_strided_loop_alignments": {
  "data": {
   "lineno": 8048,
   "symbols_in_volume": {
    "numpy.ComplexWarning": {
     "line number": [
      8060
     ]
    },
    "numpy.complex64": {
     "line number": [
      8055,
      8062
     ]
    },
    "numpy.core.tests.test_multiarray._aligned_zeros": {
     "line number": [
      8053,
      8055,
      8056
     ]
    },
    "numpy.float64": {
     "line number": [
      8053
     ]
    },
    "numpy.longdouble": {
     "line number": [
      8056,
      8066
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      8059
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAlignment.test_various_alignments": {
  "data": {
   "lineno": 8037,
   "symbols_in_volume": {
    "dtype": {
     "line number": [
      8041,
      8042,
      8046
     ]
    },
    "list": {
     "line number": [
      8041
     ]
    },
    "numpy.dtype": {
     "line number": [
      8046
     ]
    },
    "numpy.typecodes": {
     "line number": [
      8041
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArange": {
  "data": {
   "lineno": 7830,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7830
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArange.test_infinite": {
  "data": {
   "lineno": 7831,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      7833
     ]
    },
    "numpy.arange": {
     "line number": [
      7834
     ]
    },
    "numpy.inf": {
     "line number": [
      7834
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      7832
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArange.test_nan_step": {
  "data": {
   "lineno": 7837,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      7839
     ]
    },
    "numpy.arange": {
     "line number": [
      7840
     ]
    },
    "numpy.nan": {
     "line number": [
      7840
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      7838
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArange.test_zero_step": {
  "data": {
   "lineno": 7843,
   "symbols_in_volume": {
    "ZeroDivisionError": {
     "line number": [
      7844,
      7845,
      7848,
      7849
     ]
    },
    "numpy.arange": {
     "line number": [
      7844,
      7845,
      7848,
      7849
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7844,
      7845,
      7848,
      7849
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmax": {
  "data": {
   "lineno": 3921,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      3928,
      3929,
      3930,
      3931,
      3932,
      3933,
      3934,
      3934,
      3934,
      3935,
      3935,
      3935,
      3936,
      3936,
      3936,
      3938,
      3938,
      3938,
      3939,
      3939,
      3939,
      3940,
      3940,
      3940
     ]
    },
    "datetime.timedelta": {
     "line number": [
      3973,
      3973,
      3974,
      3975,
      3975,
      3976,
      3977,
      3977,
      3978
     ]
    },
    "numpy.datetime64": {
     "line number": [
      3942,
      3943,
      3944,
      3945,
      3946,
      3947,
      3948,
      3949,
      3950,
      3951,
      3952,
      3953,
      3955,
      3956,
      3957,
      3958,
      3959,
      3960,
      3961,
      3962,
      3963,
      3964,
      3965,
      3966
     ]
    },
    "numpy.nan": {
     "line number": [
      3924,
      3925,
      3926,
      3927,
      3927,
      3928,
      3929,
      3930,
      3931,
      3932,
      3933,
      3933,
      3934,
      3934,
      3934,
      3935,
      3935,
      3935,
      3935,
      3936,
      3936,
      3936,
      3936
     ]
    },
    "numpy.timedelta64": {
     "line number": [
      3967,
      3968,
      3969,
      3970,
      3971
     ]
    },
    "object": {
     "line number": [
      3921
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArgmax.test_all": {
  "data": {
   "lineno": 3986,
   "symbols_in_volume": {
    "list": {
     "line number": [
      3991
     ]
    },
    "numpy.all": {
     "line number": [
      3993
     ]
    },
    "numpy.random.normal": {
     "line number": [
      3987
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3993
     ]
    },
    "range": {
     "line number": [
      3988,
      3991
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmax.test_argmax_unicode": {
  "data": {
   "lineno": 4023,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      4026
     ]
    },
    "numpy.zeros": {
     "line number": [
      4024
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmax.test_combinations": {
  "data": {
   "lineno": 3995,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      3998
     ]
    },
    "numpy.argmax": {
     "line number": [
      4002,
      4003
     ]
    },
    "numpy.max": {
     "line number": [
      4000
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4002,
      4003
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      3997
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmax.test_np_vs_ndarray": {
  "data": {
   "lineno": 4028,
   "symbols_in_volume": {
    "int": {
     "line number": [
      4033,
      4034,
      4039,
      4040
     ]
    },
    "numpy.argmax": {
     "line number": [
      4035,
      4041
     ]
    },
    "numpy.random.normal": {
     "line number": [
      4030
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4035,
      4036,
      4041,
      4042
     ]
    },
    "numpy.zeros": {
     "line number": [
      4033,
      4034,
      4039,
      4040
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmax.test_object_argmax_with_NULLs": {
  "data": {
   "lineno": 4044,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.ctypes": {
     "line number": [
      4047
     ]
    },
    "numpy.empty": {
     "line number": [
      4046
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4048,
      4050,
      4052
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmax.test_output_shape": {
  "data": {
   "lineno": 4005,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      4010,
      4013,
      4017
     ]
    },
    "numpy.int_": {
     "line number": [
      4009,
      4012,
      4016,
      4019
     ]
    },
    "numpy.ones": {
     "line number": [
      4007,
      4009,
      4012,
      4016,
      4019
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4021
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4010,
      4013,
      4017
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmin": {
  "data": {
   "lineno": 4055,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      4062,
      4063,
      4064,
      4065,
      4066,
      4067,
      4068,
      4068,
      4068,
      4069,
      4069,
      4069,
      4070,
      4070,
      4070,
      4072,
      4072,
      4072,
      4073,
      4073,
      4073,
      4074,
      4074,
      4074
     ]
    },
    "datetime.timedelta": {
     "line number": [
      4107,
      4107,
      4108,
      4109,
      4109,
      4110,
      4111,
      4111,
      4112
     ]
    },
    "numpy.datetime64": {
     "line number": [
      4076,
      4077,
      4078,
      4079,
      4080,
      4081,
      4082,
      4083,
      4084,
      4085,
      4086,
      4087,
      4089,
      4090,
      4091,
      4092,
      4093,
      4094,
      4095,
      4096,
      4097,
      4098,
      4099,
      4100
     ]
    },
    "numpy.nan": {
     "line number": [
      4058,
      4059,
      4060,
      4061,
      4061,
      4062,
      4063,
      4064,
      4065,
      4066,
      4067,
      4067,
      4068,
      4068,
      4068,
      4069,
      4069,
      4069,
      4069,
      4070,
      4070,
      4070,
      4070
     ]
    },
    "numpy.timedelta64": {
     "line number": [
      4101,
      4102,
      4103,
      4104,
      4105
     ]
    },
    "object": {
     "line number": [
      4055
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArgmin.test_all": {
  "data": {
   "lineno": 4120,
   "symbols_in_volume": {
    "list": {
     "line number": [
      4125
     ]
    },
    "numpy.all": {
     "line number": [
      4127
     ]
    },
    "numpy.random.normal": {
     "line number": [
      4121
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4127
     ]
    },
    "range": {
     "line number": [
      4122,
      4125
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmin.test_argmin_unicode": {
  "data": {
   "lineno": 4171,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      4172
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4174
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmin.test_combinations": {
  "data": {
   "lineno": 4129,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      4132
     ]
    },
    "numpy.argmin": {
     "line number": [
      4136,
      4137
     ]
    },
    "numpy.min": {
     "line number": [
      4134
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4136,
      4137
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      4131
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmin.test_minimum_signed_integers": {
  "data": {
   "lineno": 4139,
   "symbols_in_volume": {
    "numpy.argmin": {
     "line number": [
      4142,
      4145,
      4148,
      4151
     ]
    },
    "numpy.array": {
     "line number": [
      4141,
      4144,
      4147,
      4150
     ]
    },
    "numpy.int16": {
     "line number": [
      4144
     ]
    },
    "numpy.int32": {
     "line number": [
      4147
     ]
    },
    "numpy.int64": {
     "line number": [
      4150
     ]
    },
    "numpy.int8": {
     "line number": [
      4141
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4142,
      4145,
      4148,
      4151
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmin.test_np_vs_ndarray": {
  "data": {
   "lineno": 4176,
   "symbols_in_volume": {
    "int": {
     "line number": [
      4181,
      4182,
      4187,
      4188
     ]
    },
    "numpy.argmin": {
     "line number": [
      4183,
      4189
     ]
    },
    "numpy.ones": {
     "line number": [
      4182,
      4188
     ]
    },
    "numpy.random.normal": {
     "line number": [
      4178
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4183,
      4184,
      4189,
      4190
     ]
    },
    "numpy.zeros": {
     "line number": [
      4181,
      4187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmin.test_object_argmin_with_NULLs": {
  "data": {
   "lineno": 4192,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.ctypes": {
     "line number": [
      4195
     ]
    },
    "numpy.empty": {
     "line number": [
      4194
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4196,
      4198,
      4200
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArgmin.test_output_shape": {
  "data": {
   "lineno": 4153,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      4158,
      4161,
      4165
     ]
    },
    "numpy.int_": {
     "line number": [
      4157,
      4160,
      4164,
      4167
     ]
    },
    "numpy.ones": {
     "line number": [
      4155,
      4157,
      4160,
      4164,
      4167
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4169
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4158,
      4161,
      4165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayAttributeDeletion": {
  "data": {
   "lineno": 6984,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6984
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_not_writable_attribute_deletion": {
  "data": {
   "lineno": 7009,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      7015
     ]
    },
    "delattr": {
     "line number": [
      7015
     ]
    },
    "numpy.ones": {
     "line number": [
      7010
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7015
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_writable_attribute_deletion": {
  "data": {
   "lineno": 7003,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      7007
     ]
    },
    "delattr": {
     "line number": [
      7007
     ]
    },
    "numpy.ones": {
     "line number": [
      7004
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7007
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_not_writable_attributes_deletion": {
  "data": {
   "lineno": 6995,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      7001
     ]
    },
    "delattr": {
     "line number": [
      7001
     ]
    },
    "numpy.ones": {
     "line number": [
      6996
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7001
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_writable_attributes_deletion": {
  "data": {
   "lineno": 6986,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      6993
     ]
    },
    "DeprecationWarning": {
     "line number": [
      6991
     ]
    },
    "delattr": {
     "line number": [
      6993
     ]
    },
    "numpy.ones": {
     "line number": [
      6988
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      6993
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      6990
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayConstruction": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "object": {
     "line number": [
      331
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayConstruction.test_array": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      363
     ]
    },
    "len": {
     "line number": [
      359
     ]
    },
    "numpy.array": {
     "line number": [
      334,
      339,
      342,
      346,
      350,
      354,
      358,
      366,
      368
     ]
    },
    "numpy.ones": {
     "line number": [
      333,
      335,
      337,
      338,
      345,
      347,
      349,
      351,
      353,
      355,
      357,
      363
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      335,
      340,
      343,
      347,
      351,
      355,
      359,
      360,
      361,
      367,
      369
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_cont": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "numpy.ascontiguousarray": {
     "line number": [
      400,
      401,
      405
     ]
    },
    "numpy.asfortranarray": {
     "line number": [
      402,
      403,
      406
     ]
    },
    "numpy.ones": {
     "line number": [
      399,
      404
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      400,
      401,
      402,
      403,
      405,
      406
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_copy_false": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      375,
      376,
      379
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      378,
      381,
      383
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_copy_true": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      386,
      387,
      392
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      390,
      391,
      395,
      396
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_empty": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      372
     ]
    },
    "numpy.array": {
     "line number": [
      372
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      372
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayFinalize": {
  "data": {
   "lineno": 7852,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7852
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayFinalize.test_lifetime_on_error": {
  "data": {
   "lineno": 7864,
   "symbols_in_volume": {
    "Dummy": {
     "line number": [
      7875
     ]
    },
    "Exception": {
     "line number": [
      7879
     ]
    },
    "isinstance": {
     "line number": [
      7887
     ]
    },
    "numpy.array": {
     "line number": [
      7875
     ]
    },
    "numpy.core.tests.test_multiarray.gc": {
     "line number": [
      7890,
      7894,
      7898
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      7881,
      7883
     ]
    },
    "numpy.core.tests.test_multiarray.weakref": {
     "line number": [
      7876
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7887,
      7891,
      7895,
      7899
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7879
     ]
    },
    "obj_ref": {
     "line number": [
      7891,
      7895,
      7899
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayFinalize.test_lifetime_on_error.Dummy": {
  "data": {
   "lineno": 7872,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7872
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayFinalize.test_lifetime_on_error.RaisesInFinalize": {
  "data": {
   "lineno": 7866,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      7866
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayFinalize.test_lifetime_on_error.RaisesInFinalize.__array_finalize__": {
  "data": {
   "lineno": 7867,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      7869
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayFinalize.test_receives_base": {
  "data": {
   "lineno": 7855,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7861
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7862
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayFinalize.test_receives_base.SavesBase": {
  "data": {
   "lineno": 7857,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      7857
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayFinalize.test_receives_base.SavesBase.__array_finalize__": {
  "data": {
   "lineno": 7858
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayInterface": {
  "data": {
   "lineno": 7018,
   "symbols_in_volume": {
    "Foo": {
     "line number": [
      7032
     ]
    },
    "f": {
     "line number": [
      7032
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayInterface.Foo": {
  "data": {
   "lineno": 7019,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7019
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayInterface.Foo.__array_interface__": {
  "data": {
   "lineno": 7027,
   "symbols_in_volume": {
    "property": {
     "line number": [
      7027
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayInterface.Foo.__float__": {
  "data": {
   "lineno": 7024,
   "symbols_in_volume": {
    "float": {
     "line number": [
      7025
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayInterface.Foo.__init__": {
  "data": {
   "lineno": 7020
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayInterface.test_scalar_interface": {
  "data": {
   "lineno": 7034,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      7039,
      7044
     ]
    },
    "ValueError": {
     "line number": [
      7041,
      7043
     ]
    },
    "f": {
     "line number": [
      7035,
      7036,
      7037,
      7037,
      7038,
      7039,
      7040,
      7041,
      7042,
      7043,
      7044
     ]
    },
    "isinstance": {
     "line number": [
      7052
     ]
    },
    "numpy.array": {
     "line number": [
      7053,
      7055,
      7056
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      7034
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      7051,
      7060
     ]
    },
    "numpy.dtype": {
     "line number": [
      7051,
      7060
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      7050,
      7059
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7056,
      7061
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7053
     ]
    },
    "type": {
     "line number": [
      7052
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayPriority": {
  "data": {
   "lineno": 7491,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.operator": {
     "line number": [
      7494
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      7503,
      7503
     ]
    },
    "object": {
     "line number": [
      7491
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayPriority.Bar": {
  "data": {
   "lineno": 7512,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      7512
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayPriority.Bar.__new__": {
  "data": {
   "lineno": 7515,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7516
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayPriority.Foo": {
  "data": {
   "lineno": 7506,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      7506
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayPriority.Foo.__new__": {
  "data": {
   "lineno": 7509,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7510
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayPriority.Other": {
  "data": {
   "lineno": 7518,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7518
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestArrayPriority.Other._all": {
  "data": {
   "lineno": 7521
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayPriority.test_ndarray_other": {
  "data": {
   "lineno": 7552,
   "symbols_in_volume": {
    "f": {
     "line number": [
      7555,
      7556,
      7557,
      7558
     ]
    },
    "isinstance": {
     "line number": [
      7557,
      7558
     ]
    },
    "numpy.array": {
     "line number": [
      7553
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7557,
      7558
     ]
    },
    "repr": {
     "line number": [
      7556
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayPriority.test_ndarray_subclass": {
  "data": {
   "lineno": 7544,
   "symbols_in_volume": {
    "f": {
     "line number": [
      7547,
      7548,
      7549,
      7550
     ]
    },
    "isinstance": {
     "line number": [
      7549,
      7550
     ]
    },
    "numpy.array": {
     "line number": [
      7545
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7549,
      7550
     ]
    },
    "repr": {
     "line number": [
      7548
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayPriority.test_subclass_other": {
  "data": {
   "lineno": 7568,
   "symbols_in_volume": {
    "f": {
     "line number": [
      7571,
      7572,
      7573,
      7574
     ]
    },
    "isinstance": {
     "line number": [
      7573,
      7574
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7573,
      7574
     ]
    },
    "repr": {
     "line number": [
      7572
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestArrayPriority.test_subclass_subclass": {
  "data": {
   "lineno": 7560,
   "symbols_in_volume": {
    "f": {
     "line number": [
      7563,
      7564,
      7565,
      7566
     ]
    },
    "isinstance": {
     "line number": [
      7565,
      7566
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7565,
      7566
     ]
    },
    "repr": {
     "line number": [
      7564
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAsCArray": {
  "data": {
   "lineno": 7156,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7156
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestAsCArray.test_1darray": {
  "data": {
   "lineno": 7157,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      7158
     ]
    },
    "numpy.core._multiarray_tests.test_as_c_array": {
     "line number": [
      7159
     ]
    },
    "numpy.double": {
     "line number": [
      7158
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7160
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAsCArray.test_2darray": {
  "data": {
   "lineno": 7162,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      7163
     ]
    },
    "numpy.core._multiarray_tests.test_as_c_array": {
     "line number": [
      7164
     ]
    },
    "numpy.double": {
     "line number": [
      7163
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAsCArray.test_3darray": {
  "data": {
   "lineno": 7167,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      7168
     ]
    },
    "numpy.core._multiarray_tests.test_as_c_array": {
     "line number": [
      7169
     ]
    },
    "numpy.double": {
     "line number": [
      7168
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAssignment": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": {
    "object": {
     "line number": [
      409
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_assignment_broadcasting": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      434
     ]
    },
    "numpy.arange": {
     "line number": [
      411,
      414,
      416,
      427,
      434
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      415,
      417,
      428
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_assignment_broadcasting.assign": {
  "data": {
   "lineno": 431
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_assignment_errors": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      445
     ]
    },
    "C": {
     "line number": [
      445
     ]
    },
    "TypeError": {
     "line number": [
      445
     ]
    },
    "ValueError": {
     "line number": [
      446
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      445,
      446
     ]
    },
    "numpy.zeros": {
     "line number": [
      440
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_assignment_errors.C": {
  "data": {
   "lineno": 438
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_assignment_errors.assign": {
  "data": {
   "lineno": 442
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_cast_to_string": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      522
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      523
     ]
    },
    "numpy.zeros": {
     "line number": [
      521
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_longdouble_assignment": {
  "data": {
   "lineno": 485,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      495,
      514,
      514
     ]
    },
    "numpy.longcomplex": {
     "line number": [
      489
     ]
    },
    "numpy.longdouble": {
     "line number": [
      489,
      491,
      492
     ]
    },
    "numpy.nextafter": {
     "line number": [
      491,
      492
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      496,
      500,
      504,
      508,
      512,
      515
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      479,
      480,
      482,
      483
     ]
    },
    "bad_sequence": {
     "line number": [
      482,
      483
     ]
    },
    "numpy.array": {
     "line number": [
      472,
      473
     ]
    },
    "numpy.core.tests.test_multiarray.operator": {
     "line number": [
      479,
      480,
      482,
      483
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      479,
      480,
      482,
      483
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": {
    "object": {
     "line number": [
      475
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence.__getitem__": {
  "data": {
   "lineno": 476
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence.__len__": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      477
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_unicode_assignment": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": {
    "inject_str": {
     "line number": [
      463
     ]
    },
    "numpy.array": {
     "line number": [
      461,
      462,
      468,
      468
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      465
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAssignment.test_unicode_assignment.inject_str": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": {
    "contextlib.contextmanager": {
     "line number": [
      452
     ]
    },
    "numpy.core.numeric.set_string_function": {
     "line number": [
      455,
      459
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "object": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.setup": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      200,
      201,
      202
     ]
    },
    "numpy.float64": {
     "line number": [
      202
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.test_attributes": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      223
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      205,
      206,
      207,
      209,
      211,
      213,
      215,
      216,
      217,
      218,
      220,
      221,
      222,
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.test_dtypeattr": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      226,
      227
     ]
    },
    "numpy.float_": {
     "line number": [
      227
     ]
    },
    "numpy.int_": {
     "line number": [
      226
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      230
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      226,
      227,
      228,
      229,
      231,
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.test_fill": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      304,
      305
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      308
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.test_fill_max_uint64": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      311,
      312
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      316
     ]
    },
    "numpy.uint64": {
     "line number": [
      311,
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.test_fill_struct_array": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      320
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      327,
      328
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      322
     ]
    },
    "numpy.zeros": {
     "line number": [
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.test_int_subclassing": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "int": {
     "line number": [
      242,
      245
     ]
    },
    "isinstance": {
     "line number": [
      242,
      245
     ]
    },
    "numpy.core._multiarray_tests.test_int_subclass": {
     "line number": [
      249
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      239
     ]
    },
    "numpy.int_": {
     "line number": [
      237
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      242,
      245,
      249
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.test_set_stridesattr": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      284
     ]
    },
    "ValueError": {
     "line number": [
      282,
      283,
      292,
      297
     ]
    },
    "make_array": {
     "line number": [
      280,
      281,
      282,
      283,
      284
     ]
    },
    "numpy.arange": {
     "line number": [
      287,
      295
     ]
    },
    "numpy.array": {
     "line number": [
      280,
      281
     ]
    },
    "numpy.int8": {
     "line number": [
      295
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      287,
      295
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      280,
      281
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      282,
      283,
      284,
      292,
      297
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.test_set_stridesattr.make_array": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      275
     ]
    },
    "RuntimeError": {
     "line number": [
      276
     ]
    },
    "int": {
     "line number": [
      273
     ]
    },
    "numpy.ndarray": {
     "line number": [
      273
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.test_set_stridesattr.set_strides": {
  "data": {
   "lineno": 289
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.test_stridesattr": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      260,
      261,
      262,
      265
     ]
    },
    "make_array": {
     "line number": [
      259,
      260,
      261,
      262,
      263,
      265,
      266
     ]
    },
    "numpy.array": {
     "line number": [
      259,
      263,
      265
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      259,
      263
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      260,
      261,
      262,
      265
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestAttributes.test_stridesattr.make_array": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": {
    "int": {
     "line number": [
      255
     ]
    },
    "numpy.ndarray": {
     "line number": [
      255
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop": {
  "data": {
   "lineno": 3185,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3185
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_array_ufunc_index": {
  "data": {
   "lineno": 3424,
   "symbols_in_volume": {
    "CheckIndex": {
     "line number": [
      3438
     ]
    },
    "DeprecationWarning": {
     "line number": [
      3458,
      3460
     ]
    },
    "ValueError": {
     "line number": [
      3461
     ]
    },
    "numpy.add": {
     "line number": [
      3464,
      3465,
      3466,
      3467,
      3468,
      3469,
      3470
     ]
    },
    "numpy.arange": {
     "line number": [
      3439
     ]
    },
    "numpy.core.tests.test_multiarray.warnings": {
     "line number": [
      3457,
      3458
     ]
    },
    "numpy.modf": {
     "line number": [
      3449,
      3450,
      3451,
      3452,
      3453,
      3454,
      3455,
      3456,
      3459,
      3461
     ]
    },
    "numpy.sin": {
     "line number": [
      3441,
      3442,
      3443,
      3444,
      3445,
      3446,
      3447
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3460
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3441,
      3442,
      3443,
      3444,
      3445,
      3446,
      3447,
      3449,
      3450,
      3451,
      3452,
      3453,
      3454,
      3455,
      3456,
      3459,
      3464,
      3465,
      3466,
      3467,
      3468,
      3469,
      3470
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      3461
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_array_ufunc_index.CheckIndex": {
  "data": {
   "lineno": 3428,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3428
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_array_ufunc_index.CheckIndex.__array_ufunc__": {
  "data": {
   "lineno": 3429,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      3430,
      3434
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_inplace": {
  "data": {
   "lineno": 3186,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3188,
      3188,
      3191,
      3192,
      3195,
      3196,
      3209,
      3210
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      3202,
      3213
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      3188,
      3192
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3201,
      3205,
      3206,
      3214,
      3215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_out_override": {
  "data": {
   "lineno": 3472,
   "symbols_in_volume": {
    "A": {
     "line number": [
      3482,
      3485,
      3486,
      3487,
      3488,
      3489,
      3490,
      3491
     ]
    },
    "C": {
     "line number": [
      3484,
      3485,
      3489
     ]
    },
    "isinstance": {
     "line number": [
      3487,
      3491
     ]
    },
    "numpy.array": {
     "line number": [
      3482,
      3483,
      3484
     ]
    },
    "numpy.multiply": {
     "line number": [
      3485,
      3489
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3487,
      3491
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3486,
      3490
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_out_override.OutClass": {
  "data": {
   "lineno": 3474,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      3474
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_out_override.OutClass.__array_ufunc__": {
  "data": {
   "lineno": 3475,
   "symbols_in_volume": {
    "func": {
     "line number": [
      3479,
      3480
     ]
    },
    "getattr": {
     "line number": [
      3479
     ]
    },
    "ufunc": {
     "line number": [
      3479
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pos_array_ufunc_override": {
  "data": {
   "lineno": 3547,
   "symbols_in_volume": {
    "A": {
     "line number": [
      3552
     ]
    },
    "TypeError": {
     "line number": [
      3553
     ]
    },
    "numpy.array": {
     "line number": [
      3552
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      3553
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pos_array_ufunc_override.A": {
  "data": {
   "lineno": 3548,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      3548
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pos_array_ufunc_override.A.__array_ufunc__": {
  "data": {
   "lineno": 3549,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      3550
     ]
    },
    "numpy.ndarray": {
     "line number": [
      3550
     ]
    },
    "ufunc": {
     "line number": [
      3550
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype": {
  "data": {
   "lineno": 3514,
   "symbols_in_volume": {
    "SomeClass": {
     "line number": [
      3539,
      3539,
      3539
     ]
    },
    "numpy.array": {
     "line number": [
      3539
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3541,
      3542,
      3543,
      3544,
      3545
     ]
    },
    "pow_for": {
     "line number": [
      3541,
      3542,
      3543,
      3544,
      3545
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass": {
  "data": {
   "lineno": 3516,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3516
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__div__": {
  "data": {
   "lineno": 3524,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      3525
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__eq__": {
  "data": {
   "lineno": 3530,
   "symbols_in_volume": {
    "SomeClass": {
     "line number": [
      3531
     ]
    },
    "isinstance": {
     "line number": [
      3531
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__": {
  "data": {
   "lineno": 3517
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__mul__": {
  "data": {
   "lineno": 3521,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      3522
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__pow__": {
  "data": {
   "lineno": 3527,
   "symbols_in_volume": {
    "SomeClass": {
     "line number": [
      3528
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.pow_for": {
  "data": {
   "lineno": 3536,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3537
     ]
    },
    "x": {
     "line number": [
      3537,
      3537
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pow_override_with_errors": {
  "data": {
   "lineno": 3493,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      3503,
      3505,
      3507,
      3509,
      3511
     ]
    },
    "numpy.array": {
     "line number": [
      3501
     ]
    },
    "numpy.float64": {
     "line number": [
      3501
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3502
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      3503,
      3505,
      3507,
      3509,
      3511
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pow_override_with_errors.PowerOnly": {
  "data": {
   "lineno": 3495,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      3495
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_pow_override_with_errors.PowerOnly.__array_ufunc__": {
  "data": {
   "lineno": 3496,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      3498
     ]
    },
    "numpy.power": {
     "line number": [
      3497
     ]
    },
    "ufunc": {
     "line number": [
      3497
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction": {
  "data": {
   "lineno": 3223,
   "symbols_in_volume": {
    "check": {
     "line number": [
      3389,
      3392,
      3394,
      3396,
      3399,
      3401,
      3404,
      3405
     ]
    },
    "float": {
     "line number": [
      3227,
      3228,
      3229,
      3230,
      3231,
      3232,
      3233,
      3248
     ]
    },
    "int": {
     "line number": [
      3234,
      3235,
      3236,
      3237,
      3238,
      3239
     ]
    },
    "make_obj": {
     "line number": [
      3389,
      3392,
      3394,
      3396,
      3399,
      3401,
      3404,
      3405
     ]
    },
    "numpy.add": {
     "line number": [
      3227
     ]
    },
    "numpy.bitwise_and": {
     "line number": [
      3237
     ]
    },
    "numpy.bitwise_or": {
     "line number": [
      3239
     ]
    },
    "numpy.bitwise_xor": {
     "line number": [
      3238
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      3247
     ]
    },
    "numpy.divmod": {
     "line number": [
      3233
     ]
    },
    "numpy.floor_divide": {
     "line number": [
      3231
     ]
    },
    "numpy.left_shift": {
     "line number": [
      3235
     ]
    },
    "numpy.matmul": {
     "line number": [
      3248
     ]
    },
    "numpy.multiply": {
     "line number": [
      3229
     ]
    },
    "numpy.ndarray": {
     "line number": [
      3396,
      3401,
      3405
     ]
    },
    "numpy.power": {
     "line number": [
      3234
     ]
    },
    "numpy.remainder": {
     "line number": [
      3232
     ]
    },
    "numpy.right_shift": {
     "line number": [
      3236
     ]
    },
    "numpy.subtract": {
     "line number": [
      3228
     ]
    },
    "numpy.true_divide": {
     "line number": [
      3230
     ]
    },
    "object": {
     "line number": [
      3389,
      3392,
      3394,
      3399,
      3404
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.Coerced": {
  "data": {
   "lineno": 3250,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      3250
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.array_impl": {
  "data": {
   "lineno": 3253
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.array_ufunc_impl": {
  "data": {
   "lineno": 3265
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.check": {
  "data": {
   "lineno": 3295,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      3315,
      3353
     ]
    },
    "TypeError": {
     "line number": [
      3327,
      3345,
      3368
     ]
    },
    "__builtin__": {
     "line number": [
      3376
     ]
    },
    "arr_imethod": {
     "line number": [
      3356,
      3366,
      3369
     ]
    },
    "arr_method": {
     "line number": [
      3315,
      3317,
      3324,
      3328,
      3353
     ]
    },
    "arr_rmethod": {
     "line number": [
      3332,
      3341,
      3346
     ]
    },
    "first_out_arg": {
     "line number": [
      3324,
      3341
     ]
    },
    "getattr": {
     "line number": [
      3304,
      3330,
      3351,
      3372,
      3374,
      3376
     ]
    },
    "isinstance": {
     "line number": [
      3320,
      3337,
      3350,
      3362,
      3378
     ]
    },
    "numpy.arange": {
     "line number": [
      3300
     ]
    },
    "numpy.core.tests.test_multiarray.operator": {
     "line number": [
      3372,
      3374
     ]
    },
    "numpy.ndarray": {
     "line number": [
      3320,
      3337,
      3350,
      3362,
      3378
     ]
    },
    "numpy.ndarray.__array_ufunc__": {
     "line number": [
      3322,
      3339,
      3364
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3325,
      3342,
      3359,
      3360,
      3366
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3315,
      3317,
      3333,
      3335,
      3353,
      3357,
      3358,
      3377,
      3380,
      3382,
      3385
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      3327,
      3345,
      3368
     ]
    },
    "op_fn": {
     "line number": [
      3377,
      3380,
      3382
     ]
    },
    "tuple": {
     "line number": [
      3359
     ]
    },
    "type": {
     "line number": [
      3321,
      3338,
      3359,
      3363
     ]
    },
    "ufunc": {
     "line number": [
      3385
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.check.first_out_arg": {
  "data": {
   "lineno": 3306,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      3308
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3308
     ]
    },
    "tuple": {
     "line number": [
      3308
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.iop_impl": {
  "data": {
   "lineno": 3262
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.make_obj": {
  "data": {
   "lineno": 3271,
   "symbols_in_volume": {
    "MyType": {
     "line number": [
      3293
     ]
    },
    "eval": {
     "line number": [
      3286
     ]
    },
    "issubclass": {
     "line number": [
      3288
     ]
    },
    "numpy.arange": {
     "line number": [
      3291
     ]
    },
    "numpy.ndarray": {
     "line number": [
      3288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.op_impl": {
  "data": {
   "lineno": 3256
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.rop_impl": {
  "data": {
   "lineno": 3259
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_override_normalize_signature": {
  "data": {
   "lineno": 3408,
   "symbols_in_volume": {
    "SomeClass": {
     "line number": [
      3414
     ]
    },
    "numpy.add": {
     "line number": [
      3415,
      3417,
      3420
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3416,
      3418,
      3421
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3419,
      3422
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_override_normalize_signature.SomeClass": {
  "data": {
   "lineno": 3410,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3410
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_override_normalize_signature.SomeClass.__array_ufunc__": {
  "data": {
   "lineno": 3411
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBool": {
  "data": {
   "lineno": 1278,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1278
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestBool._test_cast_from_flexible": {
  "data": {
   "lineno": 1336,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1340,
      1341,
      1342,
      1343,
      1344,
      1350,
      1351,
      1352,
      1353,
      1354
     ]
    },
    "isinstance": {
     "line number": [
      1343,
      1353
     ]
    },
    "numpy.False_": {
     "line number": [
      1344
     ]
    },
    "numpy.True_": {
     "line number": [
      1354
     ]
    },
    "numpy.array": {
     "line number": [
      1339,
      1349
     ]
    },
    "numpy.ndarray": {
     "line number": [
      1343,
      1353
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1343,
      1344,
      1353,
      1354
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1340,
      1341,
      1342,
      1350,
      1351,
      1352
     ]
    },
    "range": {
     "line number": [
      1338,
      1347
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBool.check_count_nonzero": {
  "data": {
   "lineno": 1300,
   "symbols_in_volume": {
    "__builtin__.sum": {
     "line number": [
      1305
     ]
    },
    "bool": {
     "line number": [
      1304
     ]
    },
    "numpy.array": {
     "line number": [
      1304
     ]
    },
    "numpy.count_nonzero": {
     "line number": [
      1306,
      1309,
      1311,
      1313
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1306,
      1309,
      1311,
      1313
     ]
    },
    "numpy.uint8": {
     "line number": [
      1307
     ]
    },
    "range": {
     "line number": [
      1301,
      1302
     ]
    },
    "x": {
     "line number": [
      1303,
      1303
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBool.test_cast_from_bytes": {
  "data": {
   "lineno": 1363,
   "symbols_in_volume": {
    "numpy.bytes_": {
     "line number": [
      1365
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      1363
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBool.test_cast_from_unicode": {
  "data": {
   "lineno": 1359,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      1359
     ]
    },
    "numpy.unicode_": {
     "line number": [
      1361
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBool.test_cast_from_void": {
  "data": {
   "lineno": 1356,
   "symbols_in_volume": {
    "numpy.void": {
     "line number": [
      1357
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBool.test_count_nonzero": {
  "data": {
   "lineno": 1315
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBool.test_count_nonzero_all": {
  "data": {
   "lineno": 1320,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      1320
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBool.test_count_nonzero_unaligned": {
  "data": {
   "lineno": 1326,
   "symbols_in_volume": {
    "__builtin__.sum": {
     "line number": [
      1331,
      1334
     ]
    },
    "bool": {
     "line number": [
      1329,
      1332
     ]
    },
    "numpy.count_nonzero": {
     "line number": [
      1331,
      1334
     ]
    },
    "numpy.ones": {
     "line number": [
      1332
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1331,
      1334
     ]
    },
    "numpy.zeros": {
     "line number": [
      1329
     ]
    },
    "range": {
     "line number": [
      1328
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBool.test_sum": {
  "data": {
   "lineno": 1289,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1290,
      1295
     ]
    },
    "numpy.frombuffer": {
     "line number": [
      1295
     ]
    },
    "numpy.ones": {
     "line number": [
      1290
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1291,
      1292,
      1293,
      1296,
      1297,
      1298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBool.test_test_interning": {
  "data": {
   "lineno": 1279,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1286,
      1287
     ]
    },
    "numpy.bool_": {
     "line number": [
      1280,
      1281,
      1283,
      1284
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1282,
      1285,
      1286,
      1287
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBytestringArrayNonzero": {
  "data": {
   "lineno": 7577,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7577
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_all_null_bstring_array_is_falsey": {
  "data": {
   "lineno": 7587,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7588
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7590
     ]
    },
    "str": {
     "line number": [
      7588
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_empty_bstring_array_is_falsey": {
  "data": {
   "lineno": 7579,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7580
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7580
     ]
    },
    "str": {
     "line number": [
      7580
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_null_inside_bstring_array_is_truthy": {
  "data": {
   "lineno": 7592,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7593
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7595
     ]
    },
    "str": {
     "line number": [
      7593
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_whitespace_bstring_array_is_falsey": {
  "data": {
   "lineno": 7582,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7583
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7585
     ]
    },
    "str": {
     "line number": [
      7583
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCAPI": {
  "data": {
   "lineno": 3659,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3659
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestCAPI.test_IsPythonScalar": {
  "data": {
   "lineno": 3660,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.IsPythonScalar": {
     "line number": [
      3662,
      3663,
      3664,
      3665,
      3666
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3662,
      3663,
      3664,
      3665,
      3666
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCTypes": {
  "data": {
   "lineno": 7642,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7642
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestCTypes._make_readonly": {
  "data": {
   "lineno": 7662,
   "symbols_in_volume": {
    "x": {
     "line number": [
      7664
     ]
    },
    "x.flags.writeable": {
     "line number": [
      7663
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCTypes.test_ctypes_data_as_holds_reference": {
  "data": {
   "lineno": 7666,
   "symbols_in_volume": {
    "_make_readonly": {
     "line number": [
      7681
     ]
    },
    "arr_ref": {
     "line number": [
      7704,
      7709
     ]
    },
    "dict": {
     "line number": [
      7671
     ]
    },
    "numpy.array": {
     "line number": [
      7667,
      7668,
      7669,
      7678,
      7679,
      7681
     ]
    },
    "numpy.core.tests.test_multiarray.ctypes": {
     "line number": [
      7699
     ]
    },
    "numpy.core.tests.test_multiarray.gc": {
     "line number": [
      7703,
      7708
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      7666
     ]
    },
    "numpy.core.tests.test_multiarray.weakref": {
     "line number": [
      7697
     ]
    },
    "numpy.dtype": {
     "line number": [
      7671
     ]
    },
    "numpy.empty": {
     "line number": [
      7680
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7704,
      7709
     ]
    },
    "numpy.zeros": {
     "line number": [
      7670
     ]
    },
    "object": {
     "line number": [
      7678
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCTypes.test_ctypes_is_available": {
  "data": {
   "lineno": 7644,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7645
     ]
    },
    "numpy.core.tests.test_multiarray.ctypes": {
     "line number": [
      7647
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7647,
      7648
     ]
    },
    "tuple": {
     "line number": [
      7648
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCTypes.test_ctypes_is_not_available": {
  "data": {
   "lineno": 7650,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      7656
     ]
    },
    "numpy.array": {
     "line number": [
      7654
     ]
    },
    "numpy.core._internal._missing_ctypes": {
     "line number": [
      7657
     ]
    },
    "numpy.core._internal.ctypes": {
     "line number": [
      7652,
      7660
     ]
    },
    "numpy.core.tests.test_multiarray.ctypes": {
     "line number": [
      7660
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7656
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7658
     ]
    },
    "tuple": {
     "line number": [
      7658
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCequenceMethods": {
  "data": {
   "lineno": 3180,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3180
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestCequenceMethods.test_array_contains": {
  "data": {
   "lineno": 3181,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      3182,
      3183
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3182,
      3183
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestChoose": {
  "data": {
   "lineno": 6152,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6152
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestChoose.setup": {
  "data": {
   "lineno": 6153,
   "symbols_in_volume": {
    "int": {
     "line number": [
      6154,
      6155,
      6156,
      6157
     ]
    },
    "numpy.ones": {
     "line number": [
      6154,
      6155,
      6156,
      6157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestChoose.test_basic": {
  "data": {
   "lineno": 6160,
   "symbols_in_volume": {
    "A": {
     "line number": [
      6161,
      6162
     ]
    },
    "numpy.choose": {
     "line number": [
      6161
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestChoose.test_broadcast1": {
  "data": {
   "lineno": 6164,
   "symbols_in_volume": {
    "A": {
     "line number": [
      6165,
      6166
     ]
    },
    "numpy.choose": {
     "line number": [
      6165
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6166
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestChoose.test_broadcast2": {
  "data": {
   "lineno": 6168,
   "symbols_in_volume": {
    "A": {
     "line number": [
      6169,
      6170
     ]
    },
    "numpy.choose": {
     "line number": [
      6169
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestClip": {
  "data": {
   "lineno": 4240,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4240
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestClip._check_range": {
  "data": {
   "lineno": 4241,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      4242,
      4243
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4242,
      4243
     ]
    },
    "x": {
     "line number": [
      4242,
      4243
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestClip._clip_type": {
  "data": {
   "lineno": 4245,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      4254
     ]
    },
    "numpy.dtype": {
     "line number": [
      4260
     ]
    },
    "numpy.random.random": {
     "line number": [
      4262
     ]
    },
    "numpy.sctypes": {
     "line number": [
      4253
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4271
     ]
    },
    "x": {
     "line number": [
      4262,
      4264,
      4266,
      4272,
      4273
     ]
    },
    "x.clip": {
     "line number": [
      4264,
      4266
     ]
    },
    "x.dtype.byteorder": {
     "line number": [
      4269,
      4271
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestClip.test_basic": {
  "data": {
   "lineno": 4275
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestClip.test_max_or_min": {
  "data": {
   "lineno": 4298,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      4301,
      4303,
      4305
     ]
    },
    "numpy.array": {
     "line number": [
      4299
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4301,
      4303,
      4305
     ]
    },
    "x": {
     "line number": [
      4300,
      4301,
      4302,
      4303,
      4304,
      4305
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestClip.test_nan": {
  "data": {
   "lineno": 4307,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4308,
      4310
     ]
    },
    "numpy.nan": {
     "line number": [
      4308,
      4308,
      4310,
      4310
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4311
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestClip.test_record_array": {
  "data": {
   "lineno": 4292,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4293
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCompress": {
  "data": {
   "lineno": 4314,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4314
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestCompress.test_axis": {
  "data": {
   "lineno": 4315,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      4317
     ]
    },
    "numpy.compress": {
     "line number": [
      4318,
      4322
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4319,
      4323
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCompress.test_flatten": {
  "data": {
   "lineno": 4331,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      4332
     ]
    },
    "numpy.compress": {
     "line number": [
      4333
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4334
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCompress.test_truncate": {
  "data": {
   "lineno": 4325,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      4327
     ]
    },
    "numpy.compress": {
     "line number": [
      4328
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4329
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestConversion": {
  "data": {
   "lineno": 7173,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7173
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestConversion.test_array_scalar_relational_operation": {
  "data": {
   "lineno": 7174,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7177,
      7178,
      7181,
      7181,
      7183,
      7183,
      7188,
      7189,
      7190,
      7194,
      7194,
      7196,
      7196,
      7198,
      7198,
      7203,
      7204,
      7205,
      7208,
      7208,
      7210,
      7210,
      7212,
      7212
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7177,
      7178,
      7181,
      7183,
      7188,
      7189,
      7190,
      7194,
      7196,
      7198,
      7203,
      7204,
      7205,
      7208,
      7210,
      7212
     ]
    },
    "numpy.typecodes": {
     "line number": [
      7176,
      7180,
      7202,
      7207
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestConversion.test_to_bool_scalar": {
  "data": {
   "lineno": 7215,
   "symbols_in_volume": {
    "NameError": {
     "line number": [
      7233
     ]
    },
    "NotConvertible": {
     "line number": [
      7226,
      7227
     ]
    },
    "NotImplementedError": {
     "line number": [
      7226,
      7227
     ]
    },
    "RecursionError": {
     "line number": [
      7232
     ]
    },
    "RuntimeError": {
     "line number": [
      7234
     ]
    },
    "ValueError": {
     "line number": [
      7219
     ]
    },
    "bool": {
     "line number": [
      7216,
      7217,
      7218,
      7219,
      7226,
      7227,
      7235
     ]
    },
    "numpy.array": {
     "line number": [
      7216,
      7217,
      7218,
      7219,
      7226,
      7227,
      7229
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7216,
      7217,
      7218
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7219,
      7226,
      7227,
      7235
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestConversion.test_to_bool_scalar.NotConvertible": {
  "data": {
   "lineno": 7221,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7221
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestConversion.test_to_bool_scalar.NotConvertible.__bool__": {
  "data": {
   "lineno": 7222,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      7223
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestConversion.test_to_int_scalar": {
  "data": {
   "lineno": 7238,
   "symbols_in_volume": {
    "HasTrunc": {
     "line number": [
      7255,
      7256
     ]
    },
    "NotConvertible": {
     "line number": [
      7262,
      7264
     ]
    },
    "NotImplementedError": {
     "line number": [
      7261,
      7263
     ]
    },
    "TypeError": {
     "line number": [
      7245
     ]
    },
    "int": {
     "line number": [
      7240
     ]
    },
    "int_func": {
     "line number": [
      7242,
      7243,
      7244,
      7245,
      7248,
      7249,
      7250,
      7255,
      7256,
      7262,
      7264
     ]
    },
    "numpy.array": {
     "line number": [
      7242,
      7243,
      7244,
      7245,
      7248,
      7255,
      7256,
      7262,
      7264
     ]
    },
    "numpy.bytes_": {
     "line number": [
      7249
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7242,
      7243,
      7244,
      7248,
      7249,
      7250,
      7255,
      7256
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7245,
      7261,
      7263
     ]
    },
    "numpy.unicode_": {
     "line number": [
      7250
     ]
    },
    "x.__int__": {
     "line number": [
      7240
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestConversion.test_to_int_scalar.HasTrunc": {
  "data": {
   "lineno": 7252
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestConversion.test_to_int_scalar.HasTrunc.__trunc__": {
  "data": {
   "lineno": 7253
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestConversion.test_to_int_scalar.NotConvertible": {
  "data": {
   "lineno": 7258,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7258
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestConversion.test_to_int_scalar.NotConvertible.__int__": {
  "data": {
   "lineno": 7259,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      7260
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation": {
  "data": {
   "lineno": 742,
   "symbols_in_volume": {
    "object": {
     "line number": [
      742
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_array_too_big": {
  "data": {
   "lineno": 946,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      958
     ]
    },
    "numpy.dtype": {
     "line number": [
      953
     ]
    },
    "numpy.iinfo": {
     "line number": [
      951
     ]
    },
    "numpy.intp": {
     "line number": [
      951
     ]
    },
    "numpy.ndarray": {
     "line number": [
      956,
      958
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      958
     ]
    },
    "numpy.zeros": {
     "line number": [
      949
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_empty_unicode": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      861
     ]
    },
    "range": {
     "line number": [
      860
     ]
    },
    "str": {
     "line number": [
      862
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence": {
  "data": {
   "lineno": 932,
   "symbols_in_volume": {
    "A": {
     "line number": [
      943
     ]
    },
    "len": {
     "line number": [
      944
     ]
    },
    "numpy.array": {
     "line number": [
      944
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      944
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A": {
  "data": {
   "lineno": 934,
   "symbols_in_volume": {
    "object": {
     "line number": [
      934
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__getitem__": {
  "data": {
   "lineno": 937,
   "symbols_in_volume": {
    "type": {
     "line number": [
      938
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__": {
  "data": {
   "lineno": 935
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__len__": {
  "data": {
   "lineno": 939,
   "symbols_in_volume": {
    "len": {
     "line number": [
      940
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence": {
  "data": {
   "lineno": 922,
   "symbols_in_volume": {
    "C": {
     "line number": [
      930
     ]
    },
    "ValueError": {
     "line number": [
      930
     ]
    },
    "numpy.array": {
     "line number": [
      930
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      930
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C": {
  "data": {
   "lineno": 924
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C.__getitem__": {
  "data": {
   "lineno": 925,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      926
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C.__len__": {
  "data": {
   "lineno": 927
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute": {
  "data": {
   "lineno": 746,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      751
     ]
    },
    "numpy.array": {
     "line number": [
      751
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      751
     ]
    },
    "x": {
     "line number": [
      751
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x": {
  "data": {
   "lineno": 747,
   "symbols_in_volume": {
    "object": {
     "line number": [
      747
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x.__array__": {
  "data": {
   "lineno": 748
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_from_string": {
  "data": {
   "lineno": 753,
   "symbols_in_volume": {
    "int": {
     "line number": [
      756
     ]
    },
    "numpy.array": {
     "line number": [
      756,
      759
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      759
     ]
    },
    "numpy.typecodes": {
     "line number": [
      754,
      754
     ]
    },
    "type": {
     "line number": [
      757,
      758,
      759
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_jagged_ndim_object": {
  "data": {
   "lineno": 961,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      963,
      967,
      971
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      964,
      965,
      968,
      969,
      972,
      973
     ]
    },
    "object": {
     "line number": [
      965,
      969,
      973
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_jagged_shape_object": {
  "data": {
   "lineno": 975,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      977,
      981,
      985
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      978,
      979,
      982,
      983,
      986,
      987
     ]
    },
    "object": {
     "line number": [
      979,
      983,
      987
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type": {
  "data": {
   "lineno": 908,
   "symbols_in_volume": {
    "Point2": {
     "line number": [
      919,
      919,
      919
     ]
    },
    "numpy.array": {
     "line number": [
      919
     ]
    },
    "numpy.dtype": {
     "line number": [
      920
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      920
     ]
    },
    "object": {
     "line number": [
      920
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2": {
  "data": {
   "lineno": 910
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__getitem__": {
  "data": {
   "lineno": 914,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      918
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__": {
  "data": {
   "lineno": 911
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence": {
  "data": {
   "lineno": 880,
   "symbols_in_volume": {
    "Fail": {
     "line number": [
      906
     ]
    },
    "Map": {
     "line number": [
      903
     ]
    },
    "ValueError": {
     "line number": [
      906
     ]
    },
    "numpy.array": {
     "line number": [
      903,
      906
     ]
    },
    "numpy.dtype": {
     "line number": [
      905
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      904,
      905
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      906
     ]
    },
    "object": {
     "line number": [
      905
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail": {
  "data": {
   "lineno": 889,
   "symbols_in_volume": {
    "object": {
     "line number": [
      889
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail.__getitem__": {
  "data": {
   "lineno": 893,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      894
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail.__len__": {
  "data": {
   "lineno": 890
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map": {
  "data": {
   "lineno": 896,
   "symbols_in_volume": {
    "object": {
     "line number": [
      896
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map.__getitem__": {
  "data": {
   "lineno": 900,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      901
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map.__len__": {
  "data": {
   "lineno": 897
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_sequence_long": {
  "data": {
   "lineno": 873,
   "symbols_in_volume": {
    "long": {
     "line number": [
      875,
      875,
      876,
      877,
      877,
      878
     ]
    },
    "numpy.array": {
     "line number": [
      875,
      876,
      877,
      878
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      873
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      873
     ]
    },
    "numpy.long": {
     "line number": [
      875
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      875,
      876,
      877,
      878
     ]
    },
    "object": {
     "line number": [
      876,
      877,
      878
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_sequence_non_homogenous": {
  "data": {
   "lineno": 864,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      869,
      870,
      871
     ]
    },
    "numpy.array": {
     "line number": [
      865,
      866,
      867,
      868,
      869,
      870,
      871
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      865,
      866,
      867,
      868,
      869,
      870,
      871
     ]
    },
    "object": {
     "line number": [
      865,
      866,
      867,
      868
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_too_big_error": {
  "data": {
   "lineno": 765,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      776,
      777,
      778
     ]
    },
    "numpy.empty": {
     "line number": [
      776
     ]
    },
    "numpy.iinfo": {
     "line number": [
      770,
      772
     ]
    },
    "numpy.int8": {
     "line number": [
      776,
      777,
      778
     ]
    },
    "numpy.ones": {
     "line number": [
      778
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      776,
      777,
      778
     ]
    },
    "numpy.zeros": {
     "line number": [
      777
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_void": {
  "data": {
   "lineno": 761,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      762
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      763
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_zeros": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": {
    "numpy.count_nonzero": {
     "line number": [
      784,
      790,
      795,
      800
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      787,
      792,
      797
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      784,
      786,
      790,
      791,
      795,
      796,
      800
     ]
    },
    "numpy.typecodes": {
     "line number": [
      781,
      781
     ]
    },
    "numpy.zeros": {
     "line number": [
      783,
      789,
      794,
      799
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_zeros_big": {
  "data": {
   "lineno": 802,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      802
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      808
     ]
    },
    "numpy.typecodes": {
     "line number": [
      805,
      805
     ]
    },
    "numpy.zeros": {
     "line number": [
      807
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_zeros_like_like_zeros": {
  "data": {
   "lineno": 824,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      830,
      834,
      837,
      841,
      844,
      848,
      851,
      855
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      831,
      835,
      838,
      842,
      845,
      849,
      852,
      856
     ]
    },
    "numpy.typecodes": {
     "line number": [
      826
     ]
    },
    "numpy.zeros": {
     "line number": [
      829,
      833,
      836,
      840,
      843,
      847,
      850,
      854
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      830,
      831,
      834,
      835,
      837,
      838,
      841,
      842,
      844,
      845,
      848,
      849,
      851,
      852,
      855,
      856
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_zeros_obj": {
  "data": {
   "lineno": 814,
   "symbols_in_volume": {
    "numpy.count_nonzero": {
     "line number": [
      818
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      817
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      818
     ]
    },
    "numpy.zeros": {
     "line number": [
      816
     ]
    },
    "object": {
     "line number": [
      816
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestCreation.test_zeros_obj_obj": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      822
     ]
    },
    "numpy.zeros": {
     "line number": [
      821
     ]
    },
    "object": {
     "line number": [
      821
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot": {
  "data": {
   "lineno": 5421,
   "symbols_in_volume": {
    "object": {
     "line number": [
      5421
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestDot.setup": {
  "data": {
   "lineno": 5422,
   "symbols_in_volume": {
    "numpy.random.rand": {
     "line number": [
      5424,
      5425,
      5426,
      5427,
      5428
     ]
    },
    "numpy.random.seed": {
     "line number": [
      5423
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix": {
  "data": {
   "lineno": 5627,
   "symbols_in_volume": {
    "aligned_array": {
     "line number": [
      5648,
      5649
     ]
    },
    "as_aligned": {
     "line number": [
      5659,
      5660,
      5681
     ]
    },
    "assert_dot_close": {
     "line number": [
      5661,
      5666,
      5673,
      5682,
      5687,
      5689
     ]
    },
    "numpy.core.tests.test_multiarray.itertools": {
     "line number": [
      5652
     ]
    },
    "numpy.dot": {
     "line number": [
      5650,
      5657,
      5664,
      5670,
      5685
     ]
    },
    "numpy.float32": {
     "line number": [
      5648,
      5649,
      5659,
      5660,
      5681
     ]
    },
    "numpy.random.rand": {
     "line number": [
      5655,
      5656
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5676,
      5678,
      5679
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix.aligned_array": {
  "data": {
   "lineno": 5629,
   "symbols_in_volume": {
    "dtype": {
     "line number": [
      5630,
      5637
     ]
    },
    "numpy.prod": {
     "line number": [
      5631
     ]
    },
    "numpy.uint8": {
     "line number": [
      5632
     ]
    },
    "numpy.zeros": {
     "line number": [
      5632
     ]
    },
    "range": {
     "line number": [
      5634
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix.as_aligned": {
  "data": {
   "lineno": 5640,
   "symbols_in_volume": {
    "aligned_array": {
     "line number": [
      5641
     ]
    },
    "dtype": {
     "line number": [
      5641
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix.assert_dot_close": {
  "data": {
   "lineno": 5645,
   "symbols_in_volume": {
    "A": {
     "line number": [
      5646
     ]
    },
    "numpy.dot": {
     "line number": [
      5646
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      5646
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_all": {
  "data": {
   "lineno": 5511,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.itertools": {
     "line number": [
      5514
     ]
    },
    "numpy.dot": {
     "line number": [
      5517
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5519
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5520
     ]
    },
    "numpy.zeros": {
     "line number": [
      5515,
      5516,
      5518
     ]
    },
    "zip": {
     "line number": [
      5514
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dot_2args": {
  "data": {
   "lineno": 5555,
   "symbols_in_volume": {
    "float": {
     "line number": [
      5558,
      5559,
      5560
     ]
    },
    "numpy.array": {
     "line number": [
      5558,
      5559,
      5560
     ]
    },
    "numpy.core.multiarray.dot": {
     "line number": [
      5562
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      5563
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dot_3args": {
  "data": {
   "lineno": 5565,
   "symbols_in_volume": {
    "f": {
     "line number": [
      5569,
      5574,
      5577,
      5579,
      5583,
      5584
     ]
    },
    "numpy.core.multiarray.dot": {
     "line number": [
      5574,
      5577,
      5579,
      5583,
      5584
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      5576
     ]
    },
    "numpy.empty": {
     "line number": [
      5572
     ]
    },
    "numpy.random.random_sample": {
     "line number": [
      5569,
      5570
     ]
    },
    "numpy.random.seed": {
     "line number": [
      5568
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      5575
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5579,
      5584
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      5578,
      5585
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5576
     ]
    },
    "range": {
     "line number": [
      5573
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dot_3args_errors": {
  "data": {
   "lineno": 5587,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      5595,
      5598,
      5601,
      5604,
      5605,
      5608,
      5609,
      5612,
      5615
     ]
    },
    "f": {
     "line number": [
      5591,
      5595,
      5598,
      5601,
      5604,
      5605,
      5608,
      5609,
      5612,
      5615
     ]
    },
    "int": {
     "line number": [
      5614
     ]
    },
    "numpy.core.multiarray.dot": {
     "line number": [
      5595,
      5598,
      5601,
      5604,
      5605,
      5608,
      5609,
      5612,
      5615
     ]
    },
    "numpy.empty": {
     "line number": [
      5594,
      5597,
      5600,
      5603,
      5607,
      5611,
      5614
     ]
    },
    "numpy.float32": {
     "line number": [
      5611
     ]
    },
    "numpy.random.random_sample": {
     "line number": [
      5591,
      5592
     ]
    },
    "numpy.random.seed": {
     "line number": [
      5590
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      5595,
      5598,
      5601,
      5604,
      5605,
      5608,
      5609,
      5612,
      5615
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dot_array_order": {
  "data": {
   "lineno": 5617,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5618,
      5619
     ]
    },
    "numpy.dot": {
     "line number": [
      5620,
      5623,
      5624,
      5625
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5623,
      5624,
      5625
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotcolumnvect1": {
  "data": {
   "lineno": 5481,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5485
     ]
    },
    "numpy.dot": {
     "line number": [
      5484
     ]
    },
    "numpy.ones": {
     "line number": [
      5482
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5486
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotcolumnvect2": {
  "data": {
   "lineno": 5488,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5492
     ]
    },
    "numpy.dot": {
     "line number": [
      5491
     ]
    },
    "numpy.ones": {
     "line number": [
      5489
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5493
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotmatmat": {
  "data": {
   "lineno": 5431,
   "symbols_in_volume": {
    "A": {
     "line number": [
      5432,
      5433
     ]
    },
    "A.transpose": {
     "line number": [
      5433
     ]
    },
    "numpy.array": {
     "line number": [
      5434
     ]
    },
    "numpy.dot": {
     "line number": [
      5433
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5436
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotmatvec": {
  "data": {
   "lineno": 5438,
   "symbols_in_volume": {
    "A": {
     "line number": [
      5439,
      5440
     ]
    },
    "numpy.array": {
     "line number": [
      5441
     ]
    },
    "numpy.dot": {
     "line number": [
      5440
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5443
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotmatvec2": {
  "data": {
   "lineno": 5445,
   "symbols_in_volume": {
    "A": {
     "line number": [
      5446,
      5447
     ]
    },
    "numpy.array": {
     "line number": [
      5448
     ]
    },
    "numpy.dot": {
     "line number": [
      5447
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5449
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotvecmat": {
  "data": {
   "lineno": 5451,
   "symbols_in_volume": {
    "A": {
     "line number": [
      5452,
      5453
     ]
    },
    "numpy.array": {
     "line number": [
      5454
     ]
    },
    "numpy.dot": {
     "line number": [
      5453
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5455
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotvecmat2": {
  "data": {
   "lineno": 5457,
   "symbols_in_volume": {
    "A": {
     "line number": [
      5458
     ]
    },
    "A.transpose": {
     "line number": [
      5459
     ]
    },
    "numpy.array": {
     "line number": [
      5460
     ]
    },
    "numpy.dot": {
     "line number": [
      5459
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5461
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotvecmat3": {
  "data": {
   "lineno": 5463,
   "symbols_in_volume": {
    "A": {
     "line number": [
      5464
     ]
    },
    "A.transpose": {
     "line number": [
      5465
     ]
    },
    "numpy.array": {
     "line number": [
      5466
     ]
    },
    "numpy.dot": {
     "line number": [
      5465
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5467
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotvecscalar": {
  "data": {
   "lineno": 5495,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5500
     ]
    },
    "numpy.dot": {
     "line number": [
      5499
     ]
    },
    "numpy.random.rand": {
     "line number": [
      5497,
      5498
     ]
    },
    "numpy.random.seed": {
     "line number": [
      5496
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5501
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotvecscalar2": {
  "data": {
   "lineno": 5503,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5508
     ]
    },
    "numpy.dot": {
     "line number": [
      5507
     ]
    },
    "numpy.random.rand": {
     "line number": [
      5505,
      5506
     ]
    },
    "numpy.random.seed": {
     "line number": [
      5504
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5509
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotvecvecinner": {
  "data": {
   "lineno": 5475,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5478
     ]
    },
    "numpy.dot": {
     "line number": [
      5477
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5479
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_dotvecvecouter": {
  "data": {
   "lineno": 5469,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5472
     ]
    },
    "numpy.dot": {
     "line number": [
      5471
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5473
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_vecobject": {
  "data": {
   "lineno": 5522,
   "symbols_in_volume": {
    "Vec": {
     "line number": [
      5549,
      5549,
      5550,
      5550
     ]
    },
    "numpy.array": {
     "line number": [
      5549,
      5550
     ]
    },
    "numpy.ascontiguousarray": {
     "line number": [
      5548
     ]
    },
    "numpy.dot": {
     "line number": [
      5551,
      5551
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5552,
      5553
     ]
    },
    "numpy.transpose": {
     "line number": [
      5547
     ]
    },
    "x": {
     "line number": [
      5549,
      5551,
      5551
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec": {
  "data": {
   "lineno": 5523,
   "symbols_in_volume": {
    "object": {
     "line number": [
      5523
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__add__": {
  "data": {
   "lineno": 5529,
   "symbols_in_volume": {
    "Vec": {
     "line number": [
      5530
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__": {
  "data": {
   "lineno": 5524,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5527
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__mul__": {
  "data": {
   "lineno": 5539,
   "symbols_in_volume": {
    "Vec": {
     "line number": [
      5540
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__rmul__": {
  "data": {
   "lineno": 5544
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__sub__": {
  "data": {
   "lineno": 5534,
   "symbols_in_volume": {
    "Vec": {
     "line number": [
      5535
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDtypedescr": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": {
    "object": {
     "line number": [
      526
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestDtypedescr.test_byteorders": {
  "data": {
   "lineno": 533,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      534,
      534,
      535,
      535
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      534,
      535
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDtypedescr.test_construction": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      528,
      529,
      530,
      531
     ]
    },
    "numpy.float64": {
     "line number": [
      531
     ]
    },
    "numpy.int32": {
     "line number": [
      529
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      529,
      531
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestDtypedescr.test_structured_non_void": {
  "data": {
   "lineno": 537,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      539
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      540,
      544
     ]
    },
    "numpy.zeros": {
     "line number": [
      543
     ]
    },
    "repr": {
     "line number": [
      544
     ]
    },
    "str": {
     "line number": [
      540
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFancyIndexing": {
  "data": {
   "lineno": 3835,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3835
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestFancyIndexing.test_assign_mask": {
  "data": {
   "lineno": 3867,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3869
     ]
    },
    "numpy.array": {
     "line number": [
      3868,
      3869,
      3871
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      3871
     ]
    },
    "x": {
     "line number": [
      3868,
      3870,
      3871
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFancyIndexing.test_assign_mask2": {
  "data": {
   "lineno": 3873,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3875,
      3876,
      3877
     ]
    },
    "numpy.array": {
     "line number": [
      3874,
      3875,
      3876,
      3877,
      3880,
      3883,
      3886
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      3880,
      3883,
      3886
     ]
    },
    "x": {
     "line number": [
      3878,
      3879,
      3880,
      3881,
      3882,
      3883,
      3884,
      3885,
      3886
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFancyIndexing.test_list": {
  "data": {
   "lineno": 3836,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3839,
      3843
     ]
    },
    "numpy.ones": {
     "line number": [
      3837,
      3841
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      3839,
      3843
     ]
    },
    "x": {
     "line number": [
      3837,
      3838,
      3839,
      3841,
      3842,
      3843
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFancyIndexing.test_mask": {
  "data": {
   "lineno": 3853,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3855
     ]
    },
    "numpy.array": {
     "line number": [
      3854,
      3855,
      3856
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      3856
     ]
    },
    "x": {
     "line number": [
      3854,
      3856
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFancyIndexing.test_mask2": {
  "data": {
   "lineno": 3858,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3860,
      3861,
      3862
     ]
    },
    "numpy.array": {
     "line number": [
      3859,
      3860,
      3861,
      3862,
      3863,
      3864,
      3865
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      3863,
      3864,
      3865
     ]
    },
    "x": {
     "line number": [
      3859,
      3863,
      3864,
      3865
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFancyIndexing.test_tuple": {
  "data": {
   "lineno": 3845,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3848,
      3851
     ]
    },
    "numpy.ones": {
     "line number": [
      3846,
      3849
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      3848,
      3851
     ]
    },
    "x": {
     "line number": [
      3846,
      3847,
      3848,
      3849,
      3850,
      3851
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlags": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "object": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestFlags.setup": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlags.test_otherflags": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      155,
      157
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154,
      156,
      158,
      159,
      160,
      161,
      162
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      155,
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlags.test_string_align": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      165,
      168
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      166,
      169
     ]
    },
    "numpy.zeros": {
     "line number": [
      165,
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlags.test_void_align": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      172
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      173
     ]
    },
    "numpy.zeros": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlags.test_writeable": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      99,
      100
     ]
    },
    "locals": {
     "line number": [
      97
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      99,
      100
     ]
    },
    "numpy.testing.runstring": {
     "line number": [
      99,
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlags.test_writeable_from_buffer": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "bytearray": {
     "line number": [
      117
     ]
    },
    "numpy.core.records.fromstring": {
     "line number": [
      125
     ]
    },
    "numpy.dtype": {
     "line number": [
      124
     ]
    },
    "numpy.frombuffer": {
     "line number": [
      118
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      119,
      121,
      123,
      127,
      129,
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlags.test_writeable_from_readonly": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      110,
      114
     ]
    },
    "numpy.core.records.fromstring": {
     "line number": [
      112
     ]
    },
    "numpy.dtype": {
     "line number": [
      111
     ]
    },
    "numpy.frombuffer": {
     "line number": [
      109
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      110,
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlags.test_writeable_pickle": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      143
     ]
    },
    "isinstance": {
     "line number": [
      143
     ]
    },
    "numpy.arange": {
     "line number": [
      139
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      140
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      141
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      141
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      133
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      133
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      142,
      143
     ]
    },
    "range": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlat": {
  "data": {
   "lineno": 4818,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4818
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestFlat.setup": {
  "data": {
   "lineno": 4819,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      4820
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlat.test___array__": {
  "data": {
   "lineno": 4847,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      4859,
      4861,
      4863,
      4865
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4853,
      4854,
      4857,
      4858,
      4860,
      4862,
      4864,
      4867,
      4868,
      4869,
      4870,
      4871
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      4859,
      4861,
      4863,
      4865
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlat.test_contiguous": {
  "data": {
   "lineno": 4829,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      4833
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4835,
      4836
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFlat.test_discontiguous": {
  "data": {
   "lineno": 4838,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      4842
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4844,
      4845
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFormat": {
  "data": {
   "lineno": 7619,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7619
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestFormat.test_0d": {
  "data": {
   "lineno": 7621,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7622
     ]
    },
    "numpy.pi": {
     "line number": [
      7622
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7623,
      7624
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFormat.test_1d_format": {
  "data": {
   "lineno": 7630,
   "symbols_in_volume": {
    "PendingDeprecationWarning": {
     "line number": [
      7637
     ]
    },
    "TypeError": {
     "line number": [
      7634
     ]
    },
    "numpy.array": {
     "line number": [
      7632
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      7633
     ]
    },
    "numpy.pi": {
     "line number": [
      7632
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7640
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7634
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      7636
     ]
    },
    "object.__format__": {
     "line number": [
      7639
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFormat.test_1d_no_format": {
  "data": {
   "lineno": 7626,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7627
     ]
    },
    "numpy.pi": {
     "line number": [
      7627
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7628
     ]
    },
    "str": {
     "line number": [
      7628
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFromBuffer": {
  "data": {
   "lineno": 4805,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4805
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestFromBuffer.test_basic": {
  "data": {
   "lineno": 4806,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      4807
     ]
    },
    "float": {
     "line number": [
      4807
     ]
    },
    "int": {
     "line number": [
      4807
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      4806,
      4807
     ]
    },
    "numpy.dtype": {
     "line number": [
      4809
     ]
    },
    "numpy.frombuffer": {
     "line number": [
      4812
     ]
    },
    "numpy.random.random": {
     "line number": [
      4810
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4812
     ]
    },
    "x": {
     "line number": [
      4810
     ]
    },
    "x.flat": {
     "line number": [
      4812
     ]
    },
    "x.tobytes": {
     "line number": [
      4811
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestFromBuffer.test_empty": {
  "data": {
   "lineno": 4814,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4815
     ]
    },
    "numpy.frombuffer": {
     "line number": [
      4815
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4815
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestHash": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "object": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestHash.test_int": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "hash": {
     "line number": [
      184,
      184,
      186,
      186,
      188,
      188,
      192,
      192,
      194,
      194
     ]
    },
    "max": {
     "line number": [
      191
     ]
    },
    "numpy.int16": {
     "line number": [
      180
     ]
    },
    "numpy.int32": {
     "line number": [
      181
     ]
    },
    "numpy.int64": {
     "line number": [
      182
     ]
    },
    "numpy.int8": {
     "line number": [
      179
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      184,
      186,
      188,
      192,
      194
     ]
    },
    "numpy.uint16": {
     "line number": [
      180
     ]
    },
    "numpy.uint32": {
     "line number": [
      181
     ]
    },
    "numpy.uint64": {
     "line number": [
      182
     ]
    },
    "numpy.uint8": {
     "line number": [
      179
     ]
    },
    "range": {
     "line number": [
      183
     ]
    },
    "st": {
     "line number": [
      184,
      185,
      186,
      187,
      188,
      189
     ]
    },
    "ut": {
     "line number": [
      192,
      193,
      194,
      195
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestHashing": {
  "data": {
   "lineno": 7480,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7480
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestHashing.test_arrays_not_hashable": {
  "data": {
   "lineno": 7482,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      7484
     ]
    },
    "hash": {
     "line number": [
      7484
     ]
    },
    "numpy.ones": {
     "line number": [
      7483
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7484
     ]
    },
    "x": {
     "line number": [
      7483,
      7484
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestHashing.test_collections_hashable": {
  "data": {
   "lineno": 7486,
   "symbols_in_volume": {
    "collections.Hashable": {
     "line number": [
      7488
     ]
    },
    "isinstance": {
     "line number": [
      7488
     ]
    },
    "numpy.array": {
     "line number": [
      7487
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7488
     ]
    },
    "x": {
     "line number": [
      7487,
      7488
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO": {
  "data": {
   "lineno": 4473,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4473
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestIO._check_from": {
  "data": {
   "lineno": 4672,
   "symbols_in_volume": {
    "numpy.frombuffer": {
     "line number": [
      4674
     ]
    },
    "numpy.fromfile": {
     "line number": [
      4682
     ]
    },
    "numpy.fromstring": {
     "line number": [
      4676
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4677,
      4683
     ]
    },
    "open": {
     "line number": [
      4679
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.setup": {
  "data": {
   "lineno": 4476,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      4479
     ]
    },
    "numpy.core.tests.test_multiarray.tempfile": {
     "line number": [
      4482,
      4483
     ]
    },
    "numpy.inf": {
     "line number": [
      4480,
      4480
     ]
    },
    "numpy.nan": {
     "line number": [
      4480,
      4480
     ]
    },
    "numpy.random.random": {
     "line number": [
      4478
     ]
    },
    "rand": {
     "line number": [
      4479,
      4479
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.teardown": {
  "data": {
   "lineno": 4485,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.shutil": {
     "line number": [
      4486
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_ascii": {
  "data": {
   "lineno": 4746,
   "symbols_in_volume": {
    "float": {
     "line number": [
      4748
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_big_binary": {
  "data": {
   "lineno": 4706,
   "symbols_in_volume": {
    "MemoryError": {
     "line number": [
      4728
     ]
    },
    "ValueError": {
     "line number": [
      4728
     ]
    },
    "len": {
     "line number": [
      4717,
      4724
     ]
    },
    "numpy.arange": {
     "line number": [
      4716
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      4706
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      4711
     ]
    },
    "numpy.core.tests.test_multiarray.tempfile": {
     "line number": [
      4718
     ]
    },
    "numpy.fromfile": {
     "line number": [
      4722
     ]
    },
    "numpy.int8": {
     "line number": [
      4716,
      4722
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4724,
      4726,
      4727
     ]
    },
    "numpy.tile": {
     "line number": [
      4720
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_binary": {
  "data": {
   "lineno": 4701,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4703
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_bool_fromstring": {
  "data": {
   "lineno": 4496,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4497
     ]
    },
    "numpy.bool_": {
     "line number": [
      4497,
      4498
     ]
    },
    "numpy.fromstring": {
     "line number": [
      4498
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4499
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_counted_string": {
  "data": {
   "lineno": 4734
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_counted_string_with_ws": {
  "data": {
   "lineno": 4742,
   "symbols_in_volume": {
    "int": {
     "line number": [
      4743
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_dtype": {
  "data": {
   "lineno": 4756,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4757
     ]
    },
    "numpy.int_": {
     "line number": [
      4757,
      4758
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_dtype_bool": {
  "data": {
   "lineno": 4760,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4762
     ]
    },
    "numpy.bool_": {
     "line number": [
      4762,
      4767
     ]
    },
    "numpy.fromfile": {
     "line number": [
      4767
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4768
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4769
     ]
    },
    "open": {
     "line number": [
      4764
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_empty_files_binary": {
  "data": {
   "lineno": 4513,
   "symbols_in_volume": {
    "numpy.fromfile": {
     "line number": [
      4516
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4517
     ]
    },
    "open": {
     "line number": [
      4514
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_empty_files_text": {
  "data": {
   "lineno": 4519,
   "symbols_in_volume": {
    "numpy.fromfile": {
     "line number": [
      4522
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4523
     ]
    },
    "open": {
     "line number": [
      4520
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_file_position_after_fromfile": {
  "data": {
   "lineno": 4610,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.io": {
     "line number": [
      4612,
      4613,
      4614
     ]
    },
    "numpy.float64": {
     "line number": [
      4627
     ]
    },
    "numpy.fromfile": {
     "line number": [
      4627
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4630
     ]
    },
    "open": {
     "line number": [
      4617,
      4625
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_file_position_after_tofile": {
  "data": {
   "lineno": 4632,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4646,
      4654
     ]
    },
    "numpy.core.tests.test_multiarray.io": {
     "line number": [
      4634,
      4635,
      4636
     ]
    },
    "numpy.float64": {
     "line number": [
      4646,
      4654
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4649,
      4657
     ]
    },
    "open": {
     "line number": [
      4641,
      4651
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_inf": {
  "data": {
   "lineno": 4691,
   "symbols_in_volume": {
    "numpy.inf": {
     "line number": [
      4694,
      4694,
      4694,
      4694,
      4694,
      4694,
      4694
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_int64_fromstring": {
  "data": {
   "lineno": 4507,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4510
     ]
    },
    "numpy.fromstring": {
     "line number": [
      4508
     ]
    },
    "numpy.int64": {
     "line number": [
      4509,
      4510
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4511
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_io_open_buffered_fromfile": {
  "data": {
   "lineno": 4603,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.io": {
     "line number": [
      4606
     ]
    },
    "numpy.fromfile": {
     "line number": [
      4607
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4608
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_io_open_unbuffered_fromfile": {
  "data": {
   "lineno": 4576,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.io": {
     "line number": [
      4579
     ]
    },
    "numpy.fromfile": {
     "line number": [
      4580
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4581
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_largish_file": {
  "data": {
   "lineno": 4583,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.os": {
     "line number": [
      4587,
      4593,
      4601
     ]
    },
    "numpy.fromfile": {
     "line number": [
      4588,
      4598
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4588,
      4598
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4587,
      4593,
      4601
     ]
    },
    "numpy.zeros": {
     "line number": [
      4585
     ]
    },
    "open": {
     "line number": [
      4590,
      4595,
      4596,
      4599
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_load_object_array_fromfile": {
  "data": {
   "lineno": 4659,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      4666,
      4669
     ]
    },
    "numpy.fromfile": {
     "line number": [
      4667,
      4670
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      4666,
      4669
     ]
    },
    "object": {
     "line number": [
      4667,
      4670
     ]
    },
    "open": {
     "line number": [
      4661,
      4665
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_locale": {
  "data": {
   "lineno": 4793,
   "symbols_in_volume": {
    "numpy.core.tests._locales.CommaDecimalPointLocale": {
     "line number": [
      4794
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_long_sep": {
  "data": {
   "lineno": 4753
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_malformed": {
  "data": {
   "lineno": 4750
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_nan": {
  "data": {
   "lineno": 4685,
   "symbols_in_volume": {
    "numpy.nan": {
     "line number": [
      4688,
      4688,
      4688,
      4688,
      4688,
      4688,
      4688
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_nofile": {
  "data": {
   "lineno": 4488,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      4492,
      4494
     ]
    },
    "numpy.core.tests.test_multiarray.io": {
     "line number": [
      4491
     ]
    },
    "numpy.fromfile": {
     "line number": [
      4492
     ]
    },
    "numpy.ones": {
     "line number": [
      4493
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4492,
      4494
     ]
    },
    "numpy.uint8": {
     "line number": [
      4492
     ]
    },
    "x.tofile": {
     "line number": [
      4494
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_numbers": {
  "data": {
   "lineno": 4697
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_roundtrip_binary_str": {
  "data": {
   "lineno": 4540,
   "symbols_in_volume": {
    "numpy.frombuffer": {
     "line number": [
      4542,
      4546
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4543,
      4547
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_roundtrip_file": {
  "data": {
   "lineno": 4525,
   "symbols_in_volume": {
    "numpy.fromfile": {
     "line number": [
      4531
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4533
     ]
    },
    "open": {
     "line number": [
      4526,
      4530
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_roundtrip_filename": {
  "data": {
   "lineno": 4535,
   "symbols_in_volume": {
    "numpy.fromfile": {
     "line number": [
      4537
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4538
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_roundtrip_repr": {
  "data": {
   "lineno": 4558,
   "symbols_in_volume": {
    "map": {
     "line number": [
      4560
     ]
    },
    "numpy.fromstring": {
     "line number": [
      4561
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4562
     ]
    },
    "repr": {
     "line number": [
      4560
     ]
    },
    "x": {
     "line number": [
      4559,
      4560,
      4562
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_roundtrip_str": {
  "data": {
   "lineno": 4549,
   "symbols_in_volume": {
    "map": {
     "line number": [
      4551
     ]
    },
    "numpy.fromstring": {
     "line number": [
      4552
     ]
    },
    "numpy.isfinite": {
     "line number": [
      4554
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      4556
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4555
     ]
    },
    "str": {
     "line number": [
      4551
     ]
    },
    "x": {
     "line number": [
      4550,
      4551,
      4554,
      4555,
      4556
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_string": {
  "data": {
   "lineno": 4731
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_string_with_ws": {
  "data": {
   "lineno": 4739,
   "symbols_in_volume": {
    "int": {
     "line number": [
      4740
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_tofile_format": {
  "data": {
   "lineno": 4783,
   "symbols_in_volume": {
    "float": {
     "line number": [
      4784
     ]
    },
    "numpy.array": {
     "line number": [
      4784
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4791
     ]
    },
    "open": {
     "line number": [
      4785,
      4788
     ]
    },
    "x": {
     "line number": [
      4784
     ]
    },
    "x.tofile": {
     "line number": [
      4786
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_tofile_sep": {
  "data": {
   "lineno": 4771,
   "symbols_in_volume": {
    "float": {
     "line number": [
      4772,
      4780
     ]
    },
    "numpy.array": {
     "line number": [
      4772,
      4780
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4781
     ]
    },
    "open": {
     "line number": [
      4773,
      4776
     ]
    },
    "x": {
     "line number": [
      4772,
      4781
     ]
    },
    "x.tofile": {
     "line number": [
      4774
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_uint64_fromstring": {
  "data": {
   "lineno": 4501,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4504
     ]
    },
    "numpy.fromstring": {
     "line number": [
      4502
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4505
     ]
    },
    "numpy.uint64": {
     "line number": [
      4503,
      4504
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile": {
  "data": {
   "lineno": 4564,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      4574
     ]
    },
    "numpy.core.tests.test_multiarray.io": {
     "line number": [
      4571
     ]
    },
    "numpy.fromfile": {
     "line number": [
      4574
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4574
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile.fail": {
  "data": {
   "lineno": 4568,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      4569
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestInner": {
  "data": {
   "lineno": 6056,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6056
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestInner.test_3d_tensor": {
  "data": {
   "lineno": 6106,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      6108,
      6109
     ]
    },
    "numpy.array": {
     "line number": [
      6110
     ]
    },
    "numpy.inner": {
     "line number": [
      6130,
      6131
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6130,
      6131
     ]
    },
    "numpy.typecodes": {
     "line number": [
      6107,
      6107
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestInner.test_inner_product_with_various_contiguities": {
  "data": {
   "lineno": 6081,
   "symbols_in_volume": {
    "A": {
     "line number": [
      6085,
      6095,
      6098,
      6098,
      6099
     ]
    },
    "A.T": {
     "line number": [
      6089,
      6090
     ]
    },
    "A.copy": {
     "line number": [
      6099
     ]
    },
    "C": {
     "line number": [
      6087,
      6089,
      6090,
      6091,
      6092
     ]
    },
    "numpy.arange": {
     "line number": [
      6101
     ]
    },
    "numpy.array": {
     "line number": [
      6085,
      6086,
      6087,
      6088,
      6094,
      6097,
      6103
     ]
    },
    "numpy.inner": {
     "line number": [
      6089,
      6090,
      6091,
      6092,
      6095,
      6098,
      6099,
      6104
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6089,
      6090,
      6091,
      6092,
      6095,
      6098,
      6099,
      6104
     ]
    },
    "numpy.typecodes": {
     "line number": [
      6083,
      6083
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestInner.test_inner_scalar_and_vector": {
  "data": {
   "lineno": 6065,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      6067,
      6068,
      6069
     ]
    },
    "numpy.inner": {
     "line number": [
      6070,
      6071
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6070,
      6071
     ]
    },
    "numpy.typecodes": {
     "line number": [
      6066,
      6066
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestInner.test_inner_type_mismatch": {
  "data": {
   "lineno": 6058,
   "symbols_in_volume": {
    "A": {
     "line number": [
      6060,
      6062,
      6063
     ]
    },
    "TypeError": {
     "line number": [
      6062,
      6063
     ]
    },
    "numpy.array": {
     "line number": [
      6060
     ]
    },
    "numpy.inner": {
     "line number": [
      6062,
      6063
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      6062,
      6063
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestInner.test_vecself": {
  "data": {
   "lineno": 6073,
   "symbols_in_volume": {
    "numpy.float64": {
     "line number": [
      6077
     ]
    },
    "numpy.inner": {
     "line number": [
      6078
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      6079
     ]
    },
    "numpy.zeros": {
     "line number": [
      6077
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestLexsort": {
  "data": {
   "lineno": 4426,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4426
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestLexsort.test_basic": {
  "data": {
   "lineno": 4427,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4431
     ]
    },
    "numpy.lexsort": {
     "line number": [
      4430,
      4435
     ]
    },
    "numpy.sort": {
     "line number": [
      4438
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4432,
      4436,
      4438
     ]
    },
    "numpy.vstack": {
     "line number": [
      4434
     ]
    },
    "x": {
     "line number": [
      4434,
      4435,
      4438,
      4438
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestLexsort.test_datetime": {
  "data": {
   "lineno": 4440,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4441,
      4442,
      4444,
      4447,
      4448,
      4450
     ]
    },
    "numpy.lexsort": {
     "line number": [
      4443,
      4449
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4445,
      4451
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestLexsort.test_invalid_axis": {
  "data": {
   "lineno": 4469,
   "symbols_in_volume": {
    "numpy.AxisError": {
     "line number": [
      4471
     ]
    },
    "numpy.lexsort": {
     "line number": [
      4471
     ]
    },
    "numpy.linspace": {
     "line number": [
      4470
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4471
     ]
    },
    "x": {
     "line number": [
      4470,
      4471
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestLexsort.test_object": {
  "data": {
   "lineno": 4453,
   "symbols_in_volume": {
    "numpy.argsort": {
     "line number": [
      4459
     ]
    },
    "numpy.array": {
     "line number": [
      4466,
      4466
     ]
    },
    "numpy.lexsort": {
     "line number": [
      4458,
      4463,
      4464,
      4465,
      4467
     ]
    },
    "numpy.random.choice": {
     "line number": [
      4454,
      4455
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4460,
      4464,
      4465,
      4467
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMapIter": {
  "data": {
   "lineno": 7134,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7134
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMapIter.test_mapiter": {
  "data": {
   "lineno": 7135,
   "symbols_in_volume": {
    "float": {
     "line number": [
      7139,
      7149
     ]
    },
    "numpy.arange": {
     "line number": [
      7139,
      7149
     ]
    },
    "numpy.array": {
     "line number": [
      7150
     ]
    },
    "numpy.core._multiarray_tests.test_inplace_increment": {
     "line number": [
      7144,
      7152
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7145,
      7153
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMatmul": {
  "data": {
   "lineno": 5908,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      5969,
      5970,
      5971,
      5972,
      5973
     ]
    },
    "numpy.core.tests.test_multiarray.MatmulCommon": {
     "line number": [
      5908
     ]
    },
    "numpy.matmul": {
     "line number": [
      5909
     ]
    },
    "numpy.zeros": {
     "line number": [
      5974
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMatmul.test_dot_equivalent": {
  "data": {
   "lineno": 5975,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      5975
     ]
    },
    "numpy.dot": {
     "line number": [
      5996
     ]
    },
    "numpy.matmul": {
     "line number": [
      5995,
      5999
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5997,
      6000
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMatmul.test_out_arg": {
  "data": {
   "lineno": 5911,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      5931
     ]
    },
    "float": {
     "line number": [
      5912,
      5913,
      5918,
      5924
     ]
    },
    "numpy.ComplexWarning": {
     "line number": [
      5938
     ]
    },
    "numpy.array": {
     "line number": [
      5913
     ]
    },
    "numpy.complex128": {
     "line number": [
      5934
     ]
    },
    "numpy.dot": {
     "line number": [
      5914
     ]
    },
    "numpy.int32": {
     "line number": [
      5930
     ]
    },
    "numpy.ones": {
     "line number": [
      5912
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5936
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      5920,
      5926,
      5940
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      5931
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      5937
     ]
    },
    "numpy.zeros": {
     "line number": [
      5918,
      5924,
      5930,
      5934
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMatmul.test_out_contiguous": {
  "data": {
   "lineno": 5942,
   "symbols_in_volume": {
    "float": {
     "line number": [
      5943,
      5944,
      5945,
      5950,
      5960,
      5965
     ]
    },
    "numpy.array": {
     "line number": [
      5944,
      5945
     ]
    },
    "numpy.dot": {
     "line number": [
      5946,
      5947
     ]
    },
    "numpy.ones": {
     "line number": [
      5943,
      5950,
      5960,
      5965
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      5953,
      5955,
      5957,
      5962,
      5967
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMatmulOperator": {
  "data": {
   "lineno": 6005,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.MatmulCommon": {
     "line number": [
      6005
     ]
    },
    "numpy.core.tests.test_multiarray.operator": {
     "line number": [
      6007
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override": {
  "data": {
   "lineno": 6009,
   "symbols_in_volume": {
    "A": {
     "line number": [
      6020
     ]
    },
    "numpy.ones": {
     "line number": [
      6021
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6022,
      6023
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A": {
  "data": {
   "lineno": 6011,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6011
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A.__matmul__": {
  "data": {
   "lineno": 6014
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A.__rmatmul__": {
  "data": {
   "lineno": 6017
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMatmulOperator.test_matmul_raises": {
  "data": {
   "lineno": 6025,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      6026,
      6027
     ]
    },
    "ValueError": {
     "line number": [
      6028
     ]
    },
    "numpy.arange": {
     "line number": [
      6028
     ]
    },
    "numpy.int8": {
     "line number": [
      6026,
      6026
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      6026,
      6027,
      6028
     ]
    },
    "numpy.void": {
     "line number": [
      6027,
      6027,
      6028
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMemEventHook": {
  "data": {
   "lineno": 7122,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7122
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMemEventHook.test_mem_seteventhook": {
  "data": {
   "lineno": 7123,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.test_pydatamem_seteventhook_end": {
     "line number": [
      7132
     ]
    },
    "numpy.core._multiarray_tests.test_pydatamem_seteventhook_start": {
     "line number": [
      7126
     ]
    },
    "numpy.core.tests.test_multiarray.gc": {
     "line number": [
      7131
     ]
    },
    "numpy.zeros": {
     "line number": [
      7129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods": {
  "data": {
   "lineno": 1451,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1451
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMethods.assert_partitioned": {
  "data": {
   "lineno": 2508,
   "symbols_in_volume": {
    "numpy.sort": {
     "line number": [
      2510
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2512
     ]
    },
    "numpy.testing.assert_array_less": {
     "line number": [
      2511
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test__complex__": {
  "data": {
   "lineno": 3140,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      3151,
      3153,
      3155
     ]
    },
    "numpy.array": {
     "line number": [
      3146,
      3147,
      3148
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3152,
      3154,
      3156
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test__complex__should_not_work": {
  "data": {
   "lineno": 3158,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      3165,
      3169,
      3172,
      3175,
      3178
     ]
    },
    "complex": {
     "line number": [
      3165,
      3169,
      3172,
      3175,
      3178
     ]
    },
    "numpy.array": {
     "line number": [
      3164,
      3168,
      3171,
      3174,
      3177
     ]
    },
    "numpy.dtype": {
     "line number": [
      3167
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      3165,
      3169,
      3172,
      3175,
      3178
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_argpartition_empty_array": {
  "data": {
   "lineno": 2288,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2290
     ]
    },
    "numpy.intp": {
     "line number": [
      2295,
      2298
     ]
    },
    "numpy.partition": {
     "line number": [
      2294,
      2297
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2294,
      2297
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      2295,
      2298
     ]
    },
    "range": {
     "line number": [
      2292
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_argpartition_gh5524": {
  "data": {
   "lineno": 2628,
   "symbols_in_volume": {
    "numpy.argpartition": {
     "line number": [
      2631
     ]
    },
    "numpy.array": {
     "line number": [
      2632
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_argpartition_integer": {
  "data": {
   "lineno": 2260,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      2263,
      2267
     ]
    },
    "numpy.arange": {
     "line number": [
      2262,
      2266
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2263,
      2267
     ]
    },
    "object": {
     "line number": [
      2266
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_argpartition_out_of_range": {
  "data": {
   "lineno": 2238,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2241,
      2242,
      2246,
      2247
     ]
    },
    "numpy.arange": {
     "line number": [
      2240,
      2245
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2241,
      2242,
      2246,
      2247
     ]
    },
    "object": {
     "line number": [
      2245
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_argsort": {
  "data": {
   "lineno": 1869,
   "symbols_in_volume": {
    "chr": {
     "line number": [
      1907,
      1918
     ]
    },
    "complex": {
     "line number": [
      1995
     ]
    },
    "float": {
     "line number": [
      1939
     ]
    },
    "int": {
     "line number": [
      1939
     ]
    },
    "len": {
     "line number": [
      1903
     ]
    },
    "list": {
     "line number": [
      1929
     ]
    },
    "numpy.arange": {
     "line number": [
      1875,
      1903,
      1909,
      1920,
      1931,
      1942,
      1950,
      1952,
      1960,
      1962,
      1990
     ]
    },
    "numpy.argsort": {
     "line number": [
      1983,
      1986
     ]
    },
    "numpy.array": {
     "line number": [
      1900,
      1907,
      1918,
      1940,
      1971,
      1972,
      1973,
      1979,
      1998,
      2001
     ]
    },
    "numpy.dtype": {
     "line number": [
      1939
     ]
    },
    "numpy.empty": {
     "line number": [
      1928
     ]
    },
    "numpy.intp": {
     "line number": [
      1903,
      1984,
      1987
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1879,
      1880,
      1888,
      1889,
      1894,
      1895,
      1902,
      1913,
      1914,
      1924,
      1925,
      1935,
      1936,
      1946,
      1947,
      1956,
      1957,
      1966,
      1967,
      1974,
      1975,
      1976,
      1983,
      1986,
      1993,
      1996,
      1999,
      2002
     ]
    },
    "numpy.typecodes": {
     "line number": [
      1899
     ]
    },
    "numpy.unicode": {
     "line number": [
      1918,
      2001
     ]
    },
    "numpy.zeros": {
     "line number": [
      1992,
      1995
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      1984,
      1987
     ]
    },
    "object": {
     "line number": [
      1928
     ]
    },
    "range": {
     "line number": [
      1907,
      1918,
      1929,
      1940,
      1981,
      1998,
      2001
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_arr_mult": {
  "data": {
   "lineno": 2648,
   "symbols_in_volume": {
    "func": {
     "line number": [
      2673,
      2674,
      2675,
      2676,
      2677,
      2678,
      2679,
      2685,
      2686,
      2687,
      2688,
      2694,
      2695,
      2698,
      2699,
      2702,
      2703,
      2706,
      2707,
      2710,
      2711,
      2714,
      2715,
      2723,
      2724
     ]
    },
    "numpy.arange": {
     "line number": [
      2653
     ]
    },
    "numpy.array": {
     "line number": [
      2650,
      2651,
      2652,
      2654,
      2660
     ]
    },
    "numpy.complex128": {
     "line number": [
      2671,
      2682,
      2691,
      2719
     ]
    },
    "numpy.complex64": {
     "line number": [
      2671,
      2682,
      2691,
      2719
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      2648
     ]
    },
    "numpy.dot": {
     "line number": [
      2648
     ]
    },
    "numpy.float32": {
     "line number": [
      2671,
      2682,
      2691,
      2719
     ]
    },
    "numpy.float64": {
     "line number": [
      2671,
      2682,
      2691,
      2719
     ]
    },
    "numpy.matmul": {
     "line number": [
      2648
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2673,
      2674,
      2675,
      2676,
      2677,
      2678,
      2679,
      2685,
      2686,
      2687,
      2688,
      2693,
      2697,
      2701,
      2705,
      2709,
      2713,
      2723,
      2724
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_choose": {
  "data": {
   "lineno": 1471,
   "symbols_in_volume": {
    "A": {
     "line number": [
      1478,
      1479,
      1481,
      1482,
      1484,
      1485
     ]
    },
    "TypeError": {
     "line number": [
      1489
     ]
    },
    "int": {
     "line number": [
      1472,
      1473,
      1474,
      1475
     ]
    },
    "numpy.array": {
     "line number": [
      1476
     ]
    },
    "numpy.ones": {
     "line number": [
      1472,
      1473,
      1474,
      1475,
      1487
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1479,
      1482,
      1485
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1489
     ]
    },
    "numpy.void": {
     "line number": [
      1489
     ]
    },
    "x": {
     "line number": [
      1472,
      1478,
      1484
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_compress": {
  "data": {
   "lineno": 1452,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1454,
      1463,
      1467
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1456,
      1460,
      1465,
      1469
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_conjugate": {
  "data": {
   "lineno": 3103,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      3137,
      3138
     ]
    },
    "numpy.array": {
     "line number": [
      3104,
      3111,
      3118,
      3124,
      3130,
      3136
     ]
    },
    "numpy.conjugate": {
     "line number": [
      3109,
      3116,
      3122,
      3128,
      3134
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3106,
      3107,
      3108,
      3109,
      3113,
      3114,
      3115,
      3116,
      3120,
      3121,
      3122,
      3126,
      3127,
      3128,
      3132,
      3133,
      3134
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      3137,
      3138
     ]
    },
    "object": {
     "line number": [
      3130,
      3136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_copy": {
  "data": {
   "lineno": 1807,
   "symbols_in_volume": {
    "assert_c": {
     "line number": [
      1820,
      1821,
      1827,
      1828,
      1830
     ]
    },
    "assert_fortran": {
     "line number": [
      1822,
      1823,
      1829
     ]
    },
    "numpy.empty": {
     "line number": [
      1818,
      1826
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_copy.assert_c": {
  "data": {
   "lineno": 1813,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      1814,
      1815,
      1816
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_copy.assert_fortran": {
  "data": {
   "lineno": 1808,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      1809,
      1810,
      1811
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_diagonal": {
  "data": {
   "lineno": 2838,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2847,
      2854
     ]
    },
    "numpy.AxisError": {
     "line number": [
      2844,
      2845,
      2846
     ]
    },
    "numpy.arange": {
     "line number": [
      2839,
      2849
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2840,
      2841,
      2842,
      2843,
      2850,
      2851,
      2852,
      2853,
      2855,
      2856,
      2857,
      2859
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2844,
      2845,
      2846,
      2847,
      2854
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_diagonal_memleak": {
  "data": {
   "lineno": 2876,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      2880,
      2884
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      2879,
      2883
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2880,
      2884
     ]
    },
    "numpy.zeros": {
     "line number": [
      2878
     ]
    },
    "range": {
     "line number": [
      2881
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_diagonal_view_notwriteable": {
  "data": {
   "lineno": 2861,
   "symbols_in_volume": {
    "numpy.diag": {
     "line number": [
      2872
     ]
    },
    "numpy.diagonal": {
     "line number": [
      2868
     ]
    },
    "numpy.eye": {
     "line number": [
      2864,
      2868,
      2872
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2865,
      2866,
      2869,
      2870,
      2873,
      2874
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_dot": {
  "data": {
   "lineno": 2756,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2757,
      2758,
      2759
     ]
    },
    "numpy.dot": {
     "line number": [
      2761,
      2762,
      2762,
      2767,
      2772
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2761,
      2762,
      2767,
      2772
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      2765,
      2770
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_dot_matmul_inner_array_casting_fails": {
  "data": {
   "lineno": 2815,
   "symbols_in_volume": {
    "A": {
     "line number": [
      2822,
      2822,
      2823,
      2823,
      2824,
      2824
     ]
    },
    "NotImplementedError": {
     "line number": [
      2822,
      2823,
      2824
     ]
    },
    "numpy.dot": {
     "line number": [
      2822
     ]
    },
    "numpy.inner": {
     "line number": [
      2824
     ]
    },
    "numpy.matmul": {
     "line number": [
      2823
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2822,
      2823,
      2824
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_dot_matmul_inner_array_casting_fails.A": {
  "data": {
   "lineno": 2817,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2817
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_dot_matmul_inner_array_casting_fails.A.__array__": {
  "data": {
   "lineno": 2818,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      2819
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_dot_matmul_out": {
  "data": {
   "lineno": 2803,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      2812
     ]
    },
    "numpy.matmul": {
     "line number": [
      2813
     ]
    },
    "numpy.ones": {
     "line number": [
      2807,
      2808,
      2809
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_dot_matmul_out.Sub": {
  "data": {
   "lineno": 2805,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      2805
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_dot_out_mem_overlap": {
  "data": {
   "lineno": 2781,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2800,
      2801
     ]
    },
    "numpy.core.tests.test_multiarray._aligned_zeros": {
     "line number": [
      2792
     ]
    },
    "numpy.dot": {
     "line number": [
      2795,
      2796,
      2800,
      2801
     ]
    },
    "numpy.dtype": {
     "line number": [
      2786
     ]
    },
    "numpy.random.rand": {
     "line number": [
      2789,
      2793
     ]
    },
    "numpy.random.seed": {
     "line number": [
      2782
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2797
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2800,
      2801
     ]
    },
    "numpy.typecodes": {
     "line number": [
      2786
     ]
    },
    "repr": {
     "line number": [
      2797
     ]
    },
    "x": {
     "line number": [
      2796,
      2797
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_dot_type_mismatch": {
  "data": {
   "lineno": 2774,
   "symbols_in_volume": {
    "A": {
     "line number": [
      2776,
      2778,
      2779
     ]
    },
    "TypeError": {
     "line number": [
      2778,
      2779
     ]
    },
    "numpy.array": {
     "line number": [
      2776
     ]
    },
    "numpy.dot": {
     "line number": [
      2778,
      2779
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2778,
      2779
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_flatten": {
  "data": {
   "lineno": 2634,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2635,
      2636,
      2637,
      2638,
      2639,
      2640
     ]
    },
    "numpy.int32": {
     "line number": [
      2635,
      2636,
      2637,
      2638,
      2639,
      2640
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2641,
      2642,
      2643,
      2644,
      2645,
      2646
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_matmul_out": {
  "data": {
   "lineno": 2826,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2828,
      2833
     ]
    },
    "numpy.matmul": {
     "line number": [
      2829,
      2830,
      2834
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2831,
      2835
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2832,
      2836
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_no_dgemv": {
  "data": {
   "lineno": 2726,
   "symbols_in_volume": {
    "func": {
     "line number": [
      2733,
      2734,
      2737,
      2738,
      2748,
      2749,
      2752,
      2753
     ]
    },
    "numpy.arange": {
     "line number": [
      2731
     ]
    },
    "numpy.broadcast_to": {
     "line number": [
      2732
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      2726,
      2727
     ]
    },
    "numpy.dot": {
     "line number": [
      2726
     ]
    },
    "numpy.dtype": {
     "line number": [
      2742
     ]
    },
    "numpy.matmul": {
     "line number": [
      2726
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2747
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2735,
      2739,
      2750,
      2754
     ]
    },
    "numpy.zeros": {
     "line number": [
      2743
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_partition": {
  "data": {
   "lineno": 2300,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      2302,
      2449
     ]
    },
    "ValueError": {
     "line number": [
      2303,
      2304,
      2305,
      2306,
      2426,
      2428,
      2430,
      2432,
      2447,
      2448,
      2450,
      2451,
      2452,
      2453,
      2454,
      2455
     ]
    },
    "aae": {
     "line number": [
      2475,
      2478,
      2484,
      2488,
      2494
     ]
    },
    "at": {
     "line number": [
      2480,
      2482,
      2490,
      2492
     ]
    },
    "map": {
     "line number": [
      2466
     ]
    },
    "numpy.AxisError": {
     "line number": [
      2427,
      2429,
      2431,
      2433
     ]
    },
    "numpy.arange": {
     "line number": [
      2301,
      2319,
      2358,
      2367,
      2384,
      2388,
      2405,
      2406,
      2434,
      2463,
      2465,
      2484,
      2495
     ]
    },
    "numpy.argpartition": {
     "line number": [
      2304,
      2310,
      2313,
      2327,
      2329,
      2342,
      2344,
      2346,
      2354,
      2361,
      2363,
      2370,
      2372,
      2379,
      2398,
      2399,
      2401,
      2410,
      2412,
      2422,
      2432,
      2433,
      2443,
      2444,
      2445,
      2446,
      2454,
      2455,
      2475,
      2485,
      2494
     ]
    },
    "numpy.array": {
     "line number": [
      2308,
      2317,
      2323,
      2337,
      2418,
      2424,
      2478,
      2488
     ]
    },
    "numpy.complex64": {
     "line number": [
      2457
     ]
    },
    "numpy.float32": {
     "line number": [
      2457
     ]
    },
    "numpy.int32": {
     "line number": [
      2457
     ]
    },
    "numpy.isnan": {
     "line number": [
      2401,
      2402
     ]
    },
    "numpy.nan": {
     "line number": [
      2400
     ]
    },
    "numpy.ones": {
     "line number": [
      2311,
      2352,
      2394
     ]
    },
    "numpy.partition": {
     "line number": [
      2302,
      2303,
      2309,
      2312,
      2314,
      2319,
      2325,
      2326,
      2328,
      2330,
      2339,
      2340,
      2341,
      2343,
      2345,
      2347,
      2353,
      2355,
      2359,
      2360,
      2362,
      2364,
      2368,
      2369,
      2371,
      2373,
      2375,
      2376,
      2377,
      2378,
      2380,
      2387,
      2391,
      2396,
      2397,
      2402,
      2409,
      2411,
      2413,
      2421,
      2428,
      2429,
      2437,
      2438,
      2439,
      2440,
      2450,
      2451,
      2469,
      2477,
      2487,
      2500,
      2503,
      2506
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      2407,
      2464,
      2466
     ]
    },
    "numpy.roll": {
     "line number": [
      2385,
      2389
     ]
    },
    "numpy.sort": {
     "line number": [
      2324,
      2338,
      2406
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2401,
      2402,
      2461
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2309,
      2310,
      2312,
      2313,
      2320,
      2325,
      2326,
      2327,
      2329,
      2333,
      2339,
      2340,
      2341,
      2342,
      2344,
      2346,
      2350,
      2353,
      2354,
      2361,
      2363,
      2370,
      2372,
      2375,
      2377,
      2379,
      2410,
      2412,
      2416,
      2460
     ]
    },
    "numpy.testing.assert_array_less": {
     "line number": [
      2472,
      2474
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2359,
      2360,
      2368,
      2369,
      2387,
      2391,
      2396,
      2397,
      2398,
      2399,
      2409,
      2421,
      2422,
      2470,
      2500,
      2503,
      2506
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2302,
      2303,
      2304,
      2305,
      2306,
      2426,
      2427,
      2428,
      2429,
      2430,
      2431,
      2432,
      2433,
      2447,
      2448,
      2449,
      2450,
      2451,
      2452,
      2453,
      2454,
      2455
     ]
    },
    "numpy.tile": {
     "line number": [
      2465
     ]
    },
    "numpy.transpose": {
     "line number": [
      2467
     ]
    },
    "range": {
     "line number": [
      2331,
      2348,
      2408,
      2414,
      2468
     ]
    },
    "x": {
     "line number": [
      2385,
      2387,
      2389,
      2391
     ]
    },
    "x.size": {
     "line number": [
      2386,
      2390
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_partition_cdtype": {
  "data": {
   "lineno": 2584,
   "symbols_in_volume": {
    "numpy.argpartition": {
     "line number": [
      2593,
      2599,
      2607
     ]
    },
    "numpy.array": {
     "line number": [
      2585,
      2602
     ]
    },
    "numpy.partition": {
     "line number": [
      2590,
      2597,
      2604,
      2606
     ]
    },
    "numpy.sort": {
     "line number": [
      2589,
      2603
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2590,
      2593,
      2604
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2597,
      2599,
      2606,
      2607
     ]
    },
    "range": {
     "line number": [
      2590,
      2593,
      2596,
      2604,
      2605
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_partition_empty_array": {
  "data": {
   "lineno": 2278,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2280
     ]
    },
    "numpy.partition": {
     "line number": [
      2284,
      2286
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2284,
      2286
     ]
    },
    "range": {
     "line number": [
      2282
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_partition_fuzz": {
  "data": {
   "lineno": 2615,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2619
     ]
    },
    "numpy.partition": {
     "line number": [
      2625
     ]
    },
    "numpy.random.randint": {
     "line number": [
      2621,
      2622
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      2620
     ]
    },
    "numpy.sort": {
     "line number": [
      2624
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2625
     ]
    },
    "range": {
     "line number": [
      2617,
      2618
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_partition_integer": {
  "data": {
   "lineno": 2269,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      2272,
      2276
     ]
    },
    "numpy.arange": {
     "line number": [
      2271,
      2275
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2272,
      2276
     ]
    },
    "object": {
     "line number": [
      2275
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_partition_iterative": {
  "data": {
   "lineno": 2516,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2519,
      2520,
      2522,
      2523,
      2524,
      2525
     ]
    },
    "map": {
     "line number": [
      2567
     ]
    },
    "numpy.arange": {
     "line number": [
      2517,
      2521,
      2535,
      2538,
      2540,
      2543,
      2556,
      2564,
      2566,
      2572,
      2579
     ]
    },
    "numpy.argpartition": {
     "line number": [
      2530,
      2533,
      2549,
      2553,
      2560,
      2561,
      2578
     ]
    },
    "numpy.array": {
     "line number": [
      2527,
      2545
     ]
    },
    "numpy.partition": {
     "line number": [
      2524,
      2525,
      2528,
      2532,
      2547,
      2552,
      2557,
      2558,
      2571,
      2577
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      2536,
      2539,
      2544,
      2546,
      2551,
      2565,
      2567
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2532,
      2533,
      2538,
      2540,
      2552,
      2553,
      2574,
      2580
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2519,
      2520,
      2522,
      2523,
      2524,
      2525
     ]
    },
    "numpy.tile": {
     "line number": [
      2566
     ]
    },
    "numpy.transpose": {
     "line number": [
      2568
     ]
    },
    "range": {
     "line number": [
      2537,
      2540,
      2575,
      2581
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_partition_out_of_range": {
  "data": {
   "lineno": 2249,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2252,
      2253,
      2257,
      2258
     ]
    },
    "numpy.arange": {
     "line number": [
      2251,
      2256
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2252,
      2253,
      2257,
      2258
     ]
    },
    "object": {
     "line number": [
      2256
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_partition_unicode_kind": {
  "data": {
   "lineno": 2609,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2612,
      2613
     ]
    },
    "numpy.arange": {
     "line number": [
      2610
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2612,
      2613
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_prod": {
  "data": {
   "lineno": 1491,
   "symbols_in_volume": {
    "ArithmeticError": {
     "line number": [
      1500,
      1501
     ]
    },
    "numpy.array": {
     "line number": [
      1497,
      1498,
      1505,
      1507
     ]
    },
    "numpy.complex128": {
     "line number": [
      1496
     ]
    },
    "numpy.complex64": {
     "line number": [
      1496
     ]
    },
    "numpy.float32": {
     "line number": [
      1496
     ]
    },
    "numpy.float64": {
     "line number": [
      1496
     ]
    },
    "numpy.int16": {
     "line number": [
      1495
     ]
    },
    "numpy.int32": {
     "line number": [
      1495
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1504,
      1506
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1503
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1500,
      1501
     ]
    },
    "numpy.uint16": {
     "line number": [
      1495
     ]
    },
    "numpy.uint32": {
     "line number": [
      1495
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_put": {
  "data": {
   "lineno": 2924,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      2962
     ]
    },
    "ValueError": {
     "line number": [
      2956
     ]
    },
    "numpy.array": {
     "line number": [
      2928,
      2941
     ]
    },
    "numpy.put": {
     "line number": [
      2962
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2933,
      2938,
      2946,
      2951
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2956,
      2962
     ]
    },
    "numpy.typecodes": {
     "line number": [
      2925,
      2926
     ]
    },
    "numpy.zeros": {
     "line number": [
      2931,
      2936,
      2944,
      2949,
      2954
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_ravel": {
  "data": {
   "lineno": 2964,
   "symbols_in_volume": {
    "list": {
     "line number": [
      3004,
      3013
     ]
    },
    "numpy.arange": {
     "line number": [
      2996,
      3002,
      3008,
      3011,
      3017,
      3020,
      3042
     ]
    },
    "numpy.array": {
     "line number": [
      2965,
      2977,
      2986,
      3027,
      3037
     ]
    },
    "numpy.may_share_memory": {
     "line number": [
      3016,
      3032,
      3039
     ]
    },
    "numpy.ones": {
     "line number": [
      3031
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2967,
      2972,
      2974,
      2981,
      2982,
      2993,
      2997,
      2998,
      2999,
      3007,
      3016,
      3021,
      3022,
      3032,
      3039
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2966,
      2968,
      2969,
      2970,
      2971,
      2973,
      2975,
      2978,
      2979,
      2980,
      2983,
      2984,
      2987,
      2988,
      2989,
      2990,
      2992,
      3008,
      3017,
      3023,
      3024,
      3033,
      3038,
      3044,
      3045,
      3046,
      3047,
      3050,
      3051,
      3052,
      3053
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_ravel_subclass": {
  "data": {
   "lineno": 3055,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      3060,
      3061,
      3062,
      3063,
      3066,
      3067,
      3068,
      3069
     ]
    },
    "numpy.arange": {
     "line number": [
      3059,
      3065
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3060,
      3061,
      3062,
      3063,
      3066,
      3067,
      3068,
      3069
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_ravel_subclass.ArraySubclass": {
  "data": {
   "lineno": 3056,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      3056
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_repeat": {
  "data": {
   "lineno": 1509,
   "symbols_in_volume": {
    "A": {
     "line number": [
      1513,
      1514,
      1517,
      1518,
      1521,
      1522,
      1526,
      1527,
      1530,
      1531,
      1536,
      1537
     ]
    },
    "numpy.array": {
     "line number": [
      1510
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1514,
      1518,
      1522,
      1527,
      1531,
      1537
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_reshape": {
  "data": {
   "lineno": 1540,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1541
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1544,
      1547,
      1550,
      1553
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_round": {
  "data": {
   "lineno": 1555,
   "symbols_in_volume": {
    "check_round": {
     "line number": [
      1564,
      1565,
      1566,
      1567,
      1569,
      1570
     ]
    },
    "numpy.array": {
     "line number": [
      1564,
      1565,
      1566,
      1567,
      1569,
      1570
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_round.check_round": {
  "data": {
   "lineno": 1556,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      1557,
      1561,
      1562
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      1559
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted": {
  "data": {
   "lineno": 2010,
   "symbols_in_volume": {
    "len": {
     "line number": [
      2106
     ]
    },
    "numpy.arange": {
     "line number": [
      2021,
      2024,
      2031,
      2034,
      2064,
      2080,
      2093,
      2094,
      2096,
      2097
     ]
    },
    "numpy.array": {
     "line number": [
      2018,
      2036,
      2037,
      2040,
      2041
     ]
    },
    "numpy.complex128": {
     "line number": [
      2026
     ]
    },
    "numpy.empty": {
     "line number": [
      2065
     ]
    },
    "numpy.intp": {
     "line number": [
      2106,
      2108
     ]
    },
    "numpy.nan": {
     "line number": [
      2018,
      2027,
      2027,
      2027,
      2028,
      2028,
      2028
     ]
    },
    "numpy.ndarray": {
     "line number": [
      2104
     ]
    },
    "numpy.ones": {
     "line number": [
      2045,
      2050,
      2057
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2106,
      2108
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2021,
      2024,
      2031,
      2034,
      2038,
      2042,
      2047,
      2049,
      2053,
      2055,
      2059,
      2061,
      2070,
      2072,
      2075,
      2077,
      2082,
      2084,
      2099,
      2101
     ]
    },
    "numpy.typecodes": {
     "line number": [
      2087,
      2087,
      2088
     ]
    },
    "numpy.zeros": {
     "line number": [
      2026,
      2106,
      2108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type": {
  "data": {
   "lineno": 2226,
   "symbols_in_volume": {
    "A": {
     "line number": [
      2230,
      2231,
      2232,
      2233,
      2234,
      2235,
      2236
     ]
    },
    "isinstance": {
     "line number": [
      2233,
      2234,
      2235,
      2236
     ]
    },
    "numpy.arange": {
     "line number": [
      2230,
      2231,
      2232
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2233,
      2234,
      2235,
      2236
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type.A": {
  "data": {
   "lineno": 2228,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      2228
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_unicode": {
  "data": {
   "lineno": 2110,
   "symbols_in_volume": {
    "len": {
     "line number": [
      2131
     ]
    },
    "numpy.arange": {
     "line number": [
      2131
     ]
    },
    "numpy.array": {
     "line number": [
      2116
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2132,
      2133,
      2134,
      2135
     ]
    },
    "numpy.unicode": {
     "line number": [
      2130
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_with_sorter": {
  "data": {
   "lineno": 2137,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      2140,
      2141
     ]
    },
    "ValueError": {
     "line number": [
      2142,
      2143,
      2146,
      2147,
      2148
     ]
    },
    "len": {
     "line number": [
      2210
     ]
    },
    "numpy.arange": {
     "line number": [
      2165
     ]
    },
    "numpy.argsort": {
     "line number": [
      2139
     ]
    },
    "numpy.array": {
     "line number": [
      2138,
      2156,
      2191,
      2194,
      2195,
      2197,
      2200,
      2201,
      2215,
      2220
     ]
    },
    "numpy.empty": {
     "line number": [
      2169,
      2216
     ]
    },
    "numpy.int16": {
     "line number": [
      2194,
      2200
     ]
    },
    "numpy.intp": {
     "line number": [
      2201,
      2210,
      2212,
      2216,
      2220
     ]
    },
    "numpy.linspace": {
     "line number": [
      2153
     ]
    },
    "numpy.ndarray": {
     "line number": [
      2208
     ]
    },
    "numpy.random.rand": {
     "line number": [
      2150
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      2167
     ]
    },
    "numpy.searchsorted": {
     "line number": [
      2140,
      2141,
      2142,
      2143,
      2146,
      2147,
      2148
     ]
    },
    "numpy.sort": {
     "line number": [
      2152
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2210,
      2212
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2154,
      2160,
      2162,
      2174,
      2176,
      2180,
      2182,
      2203,
      2205,
      2222,
      2224
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2140,
      2141,
      2142,
      2143,
      2146,
      2147,
      2148
     ]
    },
    "numpy.typecodes": {
     "line number": [
      2185,
      2185,
      2186
     ]
    },
    "numpy.zeros": {
     "line number": [
      2210,
      2212
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_size_zero_memleak": {
  "data": {
   "lineno": 2886,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2890,
      2891
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      2895
     ]
    },
    "numpy.dot": {
     "line number": [
      2893
     ]
    },
    "numpy.float64": {
     "line number": [
      2890
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      2894
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2895
     ]
    },
    "range": {
     "line number": [
      2892
     ]
    },
    "x": {
     "line number": [
      2891,
      2893,
      2895
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_sort": {
  "data": {
   "lineno": 1586,
   "symbols_in_volume": {
    "Boom": {
     "line number": [
      1759
     ]
    },
    "chr": {
     "line number": [
      1655,
      1668
     ]
    },
    "float": {
     "line number": [
      1693
     ]
    },
    "int": {
     "line number": [
      1693
     ]
    },
    "list": {
     "line number": [
      1681
     ]
    },
    "numpy.arange": {
     "line number": [
      1610,
      1706,
      1718
     ]
    },
    "numpy.array": {
     "line number": [
      1594,
      1647,
      1655,
      1668,
      1694,
      1731,
      1732,
      1733,
      1745,
      1759
     ]
    },
    "numpy.complex128": {
     "line number": [
      1599
     ]
    },
    "numpy.dtype": {
     "line number": [
      1693
     ]
    },
    "numpy.empty": {
     "line number": [
      1680
     ]
    },
    "numpy.nan": {
     "line number": [
      1594,
      1600,
      1600,
      1600,
      1601,
      1601,
      1601
     ]
    },
    "numpy.sort": {
     "line number": [
      1595,
      1602,
      1749,
      1751
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1596,
      1603,
      1616,
      1619,
      1629,
      1632,
      1639,
      1642,
      1651,
      1661,
      1664,
      1674,
      1677,
      1687,
      1690,
      1700,
      1703,
      1712,
      1715,
      1724,
      1727,
      1736,
      1739,
      1742,
      1749,
      1751
     ]
    },
    "numpy.typecodes": {
     "line number": [
      1646
     ]
    },
    "numpy.unicode": {
     "line number": [
      1668
     ]
    },
    "numpy.zeros": {
     "line number": [
      1599
     ]
    },
    "object": {
     "line number": [
      1680,
      1759
     ]
    },
    "range": {
     "line number": [
      1655,
      1668,
      1681,
      1694,
      1747
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_sort.Boom": {
  "data": {
   "lineno": 1755,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1755
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_sort.Boom.__lt__": {
  "data": {
   "lineno": 1756
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_sort_degraded": {
  "data": {
   "lineno": 1792,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1794
     ]
    },
    "numpy.argsort": {
     "line number": [
      1805
     ]
    },
    "numpy.sort": {
     "line number": [
      1804
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1804,
      1805
     ]
    },
    "x": {
     "line number": [
      1796,
      1801,
      1801,
      1801,
      1801,
      1802,
      1802
     ]
    },
    "x.size": {
     "line number": [
      1799,
      1800
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_sort_order": {
  "data": {
   "lineno": 1832,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1854
     ]
    },
    "numpy.array": {
     "line number": [
      1834,
      1835,
      1836,
      1840,
      1841,
      1842,
      1845,
      1846,
      1847,
      1850,
      1851,
      1852,
      1862,
      1866
     ]
    },
    "numpy.compat.strchar": {
     "line number": [
      1861
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      1857
     ]
    },
    "numpy.rec.fromarrays": {
     "line number": [
      1837
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1840,
      1841,
      1842,
      1845,
      1846,
      1847,
      1850,
      1851,
      1852,
      1865,
      1866
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      1854
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_sort_raises": {
  "data": {
   "lineno": 1777,
   "symbols_in_volume": {
    "Raiser": {
     "line number": [
      1787
     ]
    },
    "TypeError": {
     "line number": [
      1781,
      1790
     ]
    },
    "datetime.datetime.now": {
     "line number": [
      1779
     ]
    },
    "numpy.array": {
     "line number": [
      1779,
      1787
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      1788
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1781,
      1790
     ]
    },
    "object": {
     "line number": [
      1779
     ]
    },
    "range": {
     "line number": [
      1787
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_sort_raises.Raiser": {
  "data": {
   "lineno": 1783,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1783
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_sort_raises.Raiser.raises_anything": {
  "data": {
   "lineno": 1784,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1785
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_sort_unicode_kind": {
  "data": {
   "lineno": 2004,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2007,
      2008
     ]
    },
    "numpy.arange": {
     "line number": [
      2005
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2007,
      2008
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_squeeze": {
  "data": {
   "lineno": 1572,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1576
     ]
    },
    "numpy.array": {
     "line number": [
      1573
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1574,
      1575,
      1577
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1576
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_swapaxes": {
  "data": {
   "lineno": 3071,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      3084
     ]
    },
    "list": {
     "line number": [
      3087
     ]
    },
    "numpy.AxisError": {
     "line number": [
      3077,
      3078,
      3079,
      3080
     ]
    },
    "numpy.arange": {
     "line number": [
      3072
     ]
    },
    "numpy.indices": {
     "line number": [
      3073
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3074,
      3098
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3090,
      3094
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      3077,
      3078,
      3079,
      3080
     ]
    },
    "range": {
     "line number": [
      3082,
      3083
     ]
    },
    "str": {
     "line number": [
      3090,
      3096,
      3098
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_trace": {
  "data": {
   "lineno": 2897,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2898,
      2904
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2899,
      2900,
      2901,
      2902,
      2905,
      2906,
      2907,
      2908,
      2909,
      2910,
      2911,
      2912
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_trace_subclass": {
  "data": {
   "lineno": 2914,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2922
     ]
    },
    "numpy.arange": {
     "line number": [
      2920
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2922
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_trace_subclass.MyArray": {
  "data": {
   "lineno": 2917,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      2917
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_transpose": {
  "data": {
   "lineno": 1579,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1582,
      1583,
      1584
     ]
    },
    "numpy.array": {
     "line number": [
      1580
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1581
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1582,
      1583,
      1584
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMethods.test_void_sort": {
  "data": {
   "lineno": 1764,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      1771
     ]
    },
    "numpy.random.randint": {
     "line number": [
      1767,
      1773
     ]
    },
    "numpy.uint8": {
     "line number": [
      1767,
      1773
     ]
    },
    "range": {
     "line number": [
      1766,
      1772
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMinMax": {
  "data": {
   "lineno": 4203,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4203
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMinMax.test_axis": {
  "data": {
   "lineno": 4214,
   "symbols_in_volume": {
    "numpy.AxisError": {
     "line number": [
      4215
     ]
    },
    "numpy.amax": {
     "line number": [
      4215,
      4216
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4216
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMinMax.test_datetime": {
  "data": {
   "lineno": 4218,
   "symbols_in_volume": {
    "numpy.amax": {
     "line number": [
      4224,
      4227,
      4230
     ]
    },
    "numpy.amin": {
     "line number": [
      4223,
      4226,
      4229
     ]
    },
    "numpy.arange": {
     "line number": [
      4221
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4223,
      4224,
      4226,
      4227,
      4229,
      4230
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMinMax.test_scalar": {
  "data": {
   "lineno": 4205,
   "symbols_in_volume": {
    "numpy.AxisError": {
     "line number": [
      4206,
      4207
     ]
    },
    "numpy.amax": {
     "line number": [
      4206,
      4209,
      4211
     ]
    },
    "numpy.amin": {
     "line number": [
      4207,
      4210,
      4212
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4209,
      4210,
      4211,
      4212
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4206,
      4207
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMinScalarType": {
  "data": {
   "lineno": 6456,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6456
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestMinScalarType.test_object": {
  "data": {
   "lineno": 6478,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      6480
     ]
    },
    "numpy.min_scalar_type": {
     "line number": [
      6479
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6481
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_int": {
  "data": {
   "lineno": 6468,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      6470
     ]
    },
    "numpy.min_scalar_type": {
     "line number": [
      6469
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6471
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_longlong": {
  "data": {
   "lineno": 6473,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      6475
     ]
    },
    "numpy.min_scalar_type": {
     "line number": [
      6474
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6476
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_short": {
  "data": {
   "lineno": 6463,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      6465
     ]
    },
    "numpy.min_scalar_type": {
     "line number": [
      6464
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6466
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_shortshort": {
  "data": {
   "lineno": 6458,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      6460
     ]
    },
    "numpy.min_scalar_type": {
     "line number": [
      6459
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6461
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNeighborhoodIter": {
  "data": {
   "lineno": 6214,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      6214
     ]
    },
    "float": {
     "line number": [
      6214
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      6214
     ]
    },
    "object": {
     "line number": [
      6215
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_circular": {
  "data": {
   "lineno": 6284,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      6286
     ]
    },
    "numpy.core._multiarray_tests.test_neighborhood_iterator": {
     "line number": [
      6288
     ]
    },
    "numpy.core.tests.test_multiarray.NEIGH_MODE": {
     "line number": [
      6289
     ]
    },
    "numpy.linspace": {
     "line number": [
      6285
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      6290
     ]
    },
    "x": {
     "line number": [
      6285,
      6289,
      6289
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror": {
  "data": {
   "lineno": 6274,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      6276
     ]
    },
    "numpy.core._multiarray_tests.test_neighborhood_iterator": {
     "line number": [
      6278
     ]
    },
    "numpy.core.tests.test_multiarray.NEIGH_MODE": {
     "line number": [
      6279
     ]
    },
    "numpy.linspace": {
     "line number": [
      6275
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      6280
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      6281
     ]
    },
    "x": {
     "line number": [
      6275,
      6279,
      6279
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror2d": {
  "data": {
   "lineno": 6244,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      6245,
      6246,
      6247,
      6248,
      6249
     ]
    },
    "numpy.core._multiarray_tests.test_neighborhood_iterator": {
     "line number": [
      6250
     ]
    },
    "numpy.core.tests.test_multiarray.NEIGH_MODE": {
     "line number": [
      6251
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      6252
     ]
    },
    "x": {
     "line number": [
      6245,
      6251,
      6251
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple": {
  "data": {
   "lineno": 6255,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.test_neighborhood_iterator": {
     "line number": [
      6259,
      6264,
      6269
     ]
    },
    "numpy.core.tests.test_multiarray.NEIGH_MODE": {
     "line number": [
      6260,
      6265,
      6270
     ]
    },
    "numpy.linspace": {
     "line number": [
      6257
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      6261,
      6266,
      6271
     ]
    },
    "x": {
     "line number": [
      6257,
      6260,
      6260,
      6265,
      6265,
      6268,
      6268,
      6270,
      6270
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple2d": {
  "data": {
   "lineno": 6217,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      6219,
      6220,
      6221,
      6222,
      6223,
      6228,
      6229,
      6230,
      6231,
      6236,
      6237,
      6238,
      6239
     ]
    },
    "numpy.core._multiarray_tests.test_neighborhood_iterator": {
     "line number": [
      6224,
      6232,
      6240
     ]
    },
    "numpy.core.tests.test_multiarray.NEIGH_MODE": {
     "line number": [
      6225,
      6233,
      6241
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      6226,
      6234,
      6242
     ]
    },
    "x": {
     "line number": [
      6219,
      6225,
      6225,
      6233,
      6233,
      6241
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol": {
  "data": {
   "lineno": 6594,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6594
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip": {
  "data": {
   "lineno": 6597,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      6599
     ]
    },
    "numpy.array": {
     "line number": [
      6601
     ]
    },
    "numpy.asarray": {
     "line number": [
      6598,
      6600
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      6602,
      6603
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      6607,
      6611
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6605,
      6606,
      6609,
      6610
     ]
    },
    "x": {
     "line number": [
      6599,
      6600,
      6601
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_ctypes_integer_via_memoryview": {
  "data": {
   "lineno": 6960,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      6965
     ]
    },
    "c_integer": {
     "line number": [
      6963
     ]
    },
    "numpy.asarray": {
     "line number": [
      6966
     ]
    },
    "numpy.core.tests.test_multiarray.ctypes": {
     "line number": [
      6962,
      6962,
      6962
     ]
    },
    "numpy.core.tests.test_multiarray.warnings": {
     "line number": [
      6964,
      6965
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_ctypes_struct_via_memoryview": {
  "data": {
   "lineno": 6968,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      6975
     ]
    },
    "f": {
     "line number": [
      6972,
      6976
     ]
    },
    "f.a": {
     "line number": [
      6980
     ]
    },
    "foo": {
     "line number": [
      6972
     ]
    },
    "numpy.asarray": {
     "line number": [
      6976
     ]
    },
    "numpy.core.tests.test_multiarray.warnings": {
     "line number": [
      6974,
      6975
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6978,
      6979,
      6981
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_ctypes_struct_via_memoryview.foo": {
  "data": {
   "lineno": 6970,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.ctypes": {
     "line number": [
      6970,
      6971,
      6971
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_error_message_unsupported": {
  "data": {
   "lineno": 6945,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      6955
     ]
    },
    "ValueError": {
     "line number": [
      6949
     ]
    },
    "numpy.array": {
     "line number": [
      6950
     ]
    },
    "numpy.core.tests.test_multiarray.ctypes": {
     "line number": [
      6948
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      6953
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      6949
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      6954
     ]
    },
    "t": {
     "line number": [
      6950
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_error_pointer_type": {
  "data": {
   "lineno": 6936,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      6942
     ]
    },
    "memoryview": {
     "line number": [
      6938
     ]
    },
    "numpy.array": {
     "line number": [
      6943
     ]
    },
    "numpy.core.tests.test_multiarray.ctypes": {
     "line number": [
      6938,
      6938
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      6939
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      6941
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_error_too_many_dims": {
  "data": {
   "lineno": 6919,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      6933
     ]
    },
    "c_u8_33d": {
     "line number": [
      6929
     ]
    },
    "make_ctype": {
     "line number": [
      6928
     ]
    },
    "memoryview": {
     "line number": [
      6929
     ]
    },
    "numpy.array": {
     "line number": [
      6934
     ]
    },
    "numpy.core.tests.test_multiarray.ctypes": {
     "line number": [
      6928
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      6919
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      6919
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6930
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      6932
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_error_too_many_dims.make_ctype": {
  "data": {
   "lineno": 6921
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_discontiguous": {
  "data": {
   "lineno": 6757,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      6759
     ]
    },
    "numpy.core.tests.test_multiarray.EMPTY": {
     "line number": [
      6764
     ]
    },
    "numpy.float32": {
     "line number": [
      6758
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6760,
      6761,
      6762,
      6763,
      6764,
      6765
     ]
    },
    "numpy.zeros": {
     "line number": [
      6758
     ]
    },
    "x": {
     "line number": [
      6758,
      6759
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_endian": {
  "data": {
   "lineno": 6819,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      6821,
      6828
     ]
    },
    "numpy.array": {
     "line number": [
      6820,
      6827
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      6822,
      6829
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6823,
      6825,
      6830,
      6832
     ]
    },
    "x": {
     "line number": [
      6820,
      6821,
      6827,
      6828
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_flags": {
  "data": {
   "lineno": 6834,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      6836
     ]
    },
    "numpy.arange": {
     "line number": [
      6838
     ]
    },
    "numpy.core._multiarray_tests.get_buffer_info": {
     "line number": [
      6837
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      6836
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_record": {
  "data": {
   "lineno": 6767,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      6794
     ]
    },
    "numpy.array": {
     "line number": [
      6790
     ]
    },
    "numpy.cdouble": {
     "line number": [
      6782
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      6783
     ]
    },
    "numpy.core.tests.test_multiarray.EMPTY": {
     "line number": [
      6797
     ]
    },
    "numpy.csingle": {
     "line number": [
      6781
     ]
    },
    "numpy.double": {
     "line number": [
      6779
     ]
    },
    "numpy.dtype": {
     "line number": [
      6799,
      6800
     ]
    },
    "numpy.half": {
     "line number": [
      6788
     ]
    },
    "numpy.iinfo": {
     "line number": [
      6805
     ]
    },
    "numpy.intp": {
     "line number": [
      6805
     ]
    },
    "numpy.longdouble": {
     "line number": [
      6780
     ]
    },
    "numpy.ones": {
     "line number": [
      6805
     ]
    },
    "numpy.single": {
     "line number": [
      6778
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6795,
      6796,
      6797,
      6801,
      6803,
      6806,
      6807
     ]
    },
    "sum": {
     "line number": [
      6799
     ]
    },
    "x": {
     "line number": [
      6790,
      6794
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_1d": {
  "data": {
   "lineno": 6737,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      6739
     ]
    },
    "numpy.array": {
     "line number": [
      6738
     ]
    },
    "numpy.core.tests.test_multiarray.EMPTY": {
     "line number": [
      6744
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6740,
      6741,
      6742,
      6743,
      6744,
      6745
     ]
    },
    "x": {
     "line number": [
      6738,
      6739
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_nd": {
  "data": {
   "lineno": 6747,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      6749
     ]
    },
    "numpy.array": {
     "line number": [
      6748
     ]
    },
    "numpy.core.tests.test_multiarray.EMPTY": {
     "line number": [
      6754
     ]
    },
    "numpy.float64": {
     "line number": [
      6748
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6750,
      6751,
      6752,
      6753,
      6754,
      6755
     ]
    },
    "x": {
     "line number": [
      6748,
      6749
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_subarray": {
  "data": {
   "lineno": 6809,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      6811
     ]
    },
    "numpy.array": {
     "line number": [
      6810
     ]
    },
    "numpy.core.tests.test_multiarray.EMPTY": {
     "line number": [
      6813,
      6815,
      6816
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6812,
      6813,
      6814,
      6815,
      6816,
      6817
     ]
    },
    "x": {
     "line number": [
      6810,
      6811
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_invalid_buffer_format": {
  "data": {
   "lineno": 6729,
   "symbols_in_volume": {
    "BufferError": {
     "line number": [
      6734,
      6735
     ]
    },
    "ValueError": {
     "line number": [
      6734,
      6735
     ]
    },
    "memoryview": {
     "line number": [
      6734,
      6735
     ]
    },
    "numpy.array": {
     "line number": [
      6735
     ]
    },
    "numpy.dtype": {
     "line number": [
      6732
     ]
    },
    "numpy.empty": {
     "line number": [
      6733
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      6734,
      6735
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_max_dims": {
  "data": {
   "lineno": 6915,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      6916
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_out_of_order_fields": {
  "data": {
   "lineno": 6902,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      6912
     ]
    },
    "dict": {
     "line number": [
      6903
     ]
    },
    "memoryview": {
     "line number": [
      6913
     ]
    },
    "numpy.dtype": {
     "line number": [
      6903
     ]
    },
    "numpy.empty": {
     "line number": [
      6911
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      6912
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_padded_struct_array": {
  "data": {
   "lineno": 6856,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      6860,
      6866,
      6872
     ]
    },
    "numpy.dtype": {
     "line number": [
      6857,
      6858,
      6863,
      6869,
      6871
     ]
    },
    "numpy.int8": {
     "line number": [
      6860,
      6866,
      6872
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_padding": {
  "data": {
   "lineno": 6840,
   "symbols_in_volume": {
    "int": {
     "line number": [
      6842
     ]
    },
    "numpy.array": {
     "line number": [
      6842
     ]
    },
    "range": {
     "line number": [
      6841
     ]
    },
    "x": {
     "line number": [
      6842,
      6843
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_reference_leak": {
  "data": {
   "lineno": 6845,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      6849
     ]
    },
    "numpy.asarray": {
     "line number": [
      6850
     ]
    },
    "numpy.core._internal": {
     "line number": [
      6847,
      6852
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      6847,
      6852
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      6846,
      6851
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6853
     ]
    },
    "numpy.zeros": {
     "line number": [
      6848
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_relaxed_strides": {
  "data": {
   "lineno": 6875,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      6883,
      6890
     ]
    },
    "numpy.core._multiarray_tests.get_buffer_info": {
     "line number": [
      6894,
      6898
     ]
    },
    "numpy.core.tests.test_multiarray.io": {
     "line number": [
      6886
     ]
    },
    "numpy.ones": {
     "line number": [
      6877,
      6880,
      6892,
      6897
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      6883,
      6890,
      6896,
      6900
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip": {
  "data": {
   "lineno": 6613,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      6674,
      6681
     ]
    },
    "int": {
     "line number": [
      6651
     ]
    },
    "numpy.array": {
     "line number": [
      6614,
      6617,
      6645,
      6651,
      6654,
      6657,
      6660,
      6663,
      6667,
      6673,
      6675,
      6678,
      6680
     ]
    },
    "numpy.cdouble": {
     "line number": [
      6637
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      6638
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      6672
     ]
    },
    "numpy.csingle": {
     "line number": [
      6636
     ]
    },
    "numpy.double": {
     "line number": [
      6634
     ]
    },
    "numpy.float32": {
     "line number": [
      6620
     ]
    },
    "numpy.float64": {
     "line number": [
      6617
     ]
    },
    "numpy.half": {
     "line number": [
      6643
     ]
    },
    "numpy.longdouble": {
     "line number": [
      6635
     ]
    },
    "numpy.single": {
     "line number": [
      6633
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      6674,
      6681
     ]
    },
    "numpy.zeros": {
     "line number": [
      6620
     ]
    },
    "x": {
     "line number": [
      6614,
      6615,
      6617,
      6618,
      6620,
      6621,
      6645,
      6649,
      6651,
      6652,
      6654,
      6655,
      6657,
      6658,
      6660,
      6661,
      6663,
      6664,
      6667,
      6668,
      6673,
      6674,
      6675,
      6676,
      6678,
      6679,
      6680,
      6681
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_half": {
  "data": {
   "lineno": 6683,
   "symbols_in_volume": {
    "float": {
     "line number": [
      6692,
      6693
     ]
    },
    "numpy.array": {
     "line number": [
      6697,
      6699
     ]
    },
    "x": {
     "line number": [
      6697,
      6698,
      6699,
      6700
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_scalar": {
  "data": {
   "lineno": 6725
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_single_types": {
  "data": {
   "lineno": 6702,
   "symbols_in_volume": {
    "dtype": {
     "line number": [
      6704,
      6713
     ]
    },
    "dtype.char": {
     "line number": [
      6706,
      6709,
      6716
     ]
    },
    "dtype.newbyteorder": {
     "line number": [
      6717,
      6721
     ]
    },
    "numpy.dtype": {
     "line number": [
      6704
     ]
    },
    "numpy.typeDict.values": {
     "line number": [
      6703
     ]
    },
    "numpy.zeros": {
     "line number": [
      6713,
      6718,
      6722
     ]
    },
    "x": {
     "line number": [
      6713,
      6714,
      6718,
      6719,
      6722,
      6723
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestNewaxis": {
  "data": {
   "lineno": 4233,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4233
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestNewaxis.test_basic": {
  "data": {
   "lineno": 4234,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4235
     ]
    },
    "numpy.newaxis": {
     "line number": [
      4236
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      4237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype": {
  "data": {
   "lineno": 6487,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6487
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check": {
  "data": {
   "lineno": 6488,
   "symbols_in_volume": {
    "numpy.core._internal._dtype_from_pep3118": {
     "line number": [
      6490
     ]
    },
    "numpy.dtype": {
     "line number": [
      6489
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6491
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_byteorder_inside_struct": {
  "data": {
   "lineno": 6553
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_char_vs_string": {
  "data": {
   "lineno": 6574,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      6575,
      6578
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_field_order": {
  "data": {
   "lineno": 6581
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding": {
  "data": {
   "lineno": 6559,
   "symbols_in_volume": {
    "aligned": {
     "line number": [
      6571
     ]
    },
    "dict": {
     "line number": [
      6567
     ]
    },
    "numpy.dtype": {
     "line number": [
      6561,
      6562
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding.aligned": {
  "data": {
   "lineno": 6564
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding": {
  "data": {
   "lineno": 6494,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      6495
     ]
    },
    "range": {
     "line number": [
      6496
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_2": {
  "data": {
   "lineno": 6506
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_3": {
  "data": {
   "lineno": 6534,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      6535,
      6537,
      6541,
      6543
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_padding_with_array_inside_struct": {
  "data": {
   "lineno": 6546,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      6547
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding": {
  "data": {
   "lineno": 6511,
   "symbols_in_volume": {
    "aligned": {
     "line number": [
      6522,
      6523,
      6524,
      6525,
      6526
     ]
    },
    "dict": {
     "line number": [
      6520,
      6522,
      6523,
      6524,
      6525,
      6526,
      6528,
      6529,
      6530,
      6531,
      6532
     ]
    },
    "numpy.dtype": {
     "line number": [
      6514,
      6515
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding.aligned": {
  "data": {
   "lineno": 6517
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_unnamed_fields": {
  "data": {
   "lineno": 6586
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling": {
  "data": {
   "lineno": 3678,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3678
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestPickling._loads": {
  "data": {
   "lineno": 3783,
   "symbols_in_volume": {
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      3785,
      3787
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      3784
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_correct_protocol5_error_message": {
  "data": {
   "lineno": 3690,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      3700
     ]
    },
    "ValueError": {
     "line number": [
      3707
     ]
    },
    "numpy.arange": {
     "line number": [
      3694
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      3690
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      3700,
      3707,
      3690
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      3696,
      3703
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_f_contiguous_array": {
  "data": {
   "lineno": 3731,
   "symbols_in_volume": {
    "len": {
     "line number": [
      3742
     ]
    },
    "numpy.array": {
     "line number": [
      3734
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      3731
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      3739
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      3744
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      3731
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3747
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_highest_available_pickle_protocol": {
  "data": {
   "lineno": 3679,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      3682
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      3686,
      3688
     ]
    },
    "numpy.core.tests.test_multiarray.pickle5": {
     "line number": [
      3683,
      3685
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      3685
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_non_contiguous_array": {
  "data": {
   "lineno": 3749,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      3750
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      3756
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      3758
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      3757
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3760
     ]
    },
    "range": {
     "line number": [
      3756
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_record_array_with_object_dtype": {
  "data": {
   "lineno": 3710,
   "symbols_in_volume": {
    "float": {
     "line number": [
      3715,
      3718
     ]
    },
    "int": {
     "line number": [
      3715,
      3718
     ]
    },
    "numpy.array": {
     "line number": [
      3713,
      3716
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      3720
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      3722,
      3724
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      3721,
      3723
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3726,
      3728
     ]
    },
    "object": {
     "line number": [
      3711,
      3715
     ]
    },
    "range": {
     "line number": [
      3720
     ]
    },
    "str": {
     "line number": [
      3718
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_roundtrip": {
  "data": {
   "lineno": 3762,
   "symbols_in_volume": {
    "float": {
     "line number": [
      3769
     ]
    },
    "int": {
     "line number": [
      3768
     ]
    },
    "numpy.array": {
     "line number": [
      3764,
      3768
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      3763
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      3775
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      3775
     ]
    },
    "numpy.core.tests.test_multiarray.gc": {
     "line number": [
      3778
     ]
    },
    "numpy.core.tests.test_multiarray.weakref": {
     "line number": [
      3772
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3774
     ]
    },
    "numpy.transpose": {
     "line number": [
      3767
     ]
    },
    "range": {
     "line number": [
      3763
     ]
    },
    "ref": {
     "line number": [
      3781
     ]
    },
    "str": {
     "line number": [
      3768
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_subarray_int_shape": {
  "data": {
   "lineno": 3828,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3830
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3832
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_version0_float32": {
  "data": {
   "lineno": 3797,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3799
     ]
    },
    "numpy.float32": {
     "line number": [
      3799
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3801
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_version0_int8": {
  "data": {
   "lineno": 3791,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3793
     ]
    },
    "numpy.int8": {
     "line number": [
      3793
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3795
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_version0_object": {
  "data": {
   "lineno": 3803,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3805
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3807
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_version1_float32": {
  "data": {
   "lineno": 3816,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3818
     ]
    },
    "numpy.float32": {
     "line number": [
      3818
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3820
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_version1_int8": {
  "data": {
   "lineno": 3810,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3812
     ]
    },
    "numpy.int8": {
     "line number": [
      3812
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3814
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPickling.test_version1_object": {
  "data": {
   "lineno": 3822,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3824
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3826
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPutmask": {
  "data": {
   "lineno": 4337,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4337
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestPutmask.test_byteorder": {
  "data": {
   "lineno": 4358,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4360
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      4358
     ]
    },
    "numpy.putmask": {
     "line number": [
      4361
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4362
     ]
    },
    "x": {
     "line number": [
      4360,
      4361,
      4362
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPutmask.test_ip_types": {
  "data": {
   "lineno": 4343,
   "symbols_in_volume": {
    "T": {
     "line number": [
      4351,
      4352,
      4353,
      4353
     ]
    },
    "bytes": {
     "line number": [
      4344
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      4344
     ]
    },
    "numpy.random.random": {
     "line number": [
      4346
     ]
    },
    "numpy.sctypes.values": {
     "line number": [
      4350
     ]
    },
    "numpy.void": {
     "line number": [
      4344
     ]
    },
    "object": {
     "line number": [
      4344
     ]
    },
    "x": {
     "line number": [
      4346,
      4347
     ]
    },
    "x.copy": {
     "line number": [
      4353
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPutmask.test_mask_size": {
  "data": {
   "lineno": 4355,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      4356
     ]
    },
    "numpy.array": {
     "line number": [
      4356
     ]
    },
    "numpy.putmask": {
     "line number": [
      4356
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4356
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPutmask.test_record_array": {
  "data": {
   "lineno": 4364,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4366
     ]
    },
    "numpy.putmask": {
     "line number": [
      4368,
      4372
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4369,
      4370,
      4371,
      4373,
      4374,
      4375
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestPutmask.tst_basic": {
  "data": {
   "lineno": 4338,
   "symbols_in_volume": {
    "T": {
     "line number": [
      4340,
      4341
     ]
    },
    "numpy.putmask": {
     "line number": [
      4339
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4340,
      4341
     ]
    },
    "x": {
     "line number": [
      4339,
      4340
     ]
    },
    "x.dtype": {
     "line number": [
      4341
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord": {
  "data": {
   "lineno": 4967,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4967
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_bytes_fields": {
  "data": {
   "lineno": 4980,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      4991,
      4994
     ]
    },
    "TypeError": {
     "line number": [
      4984,
      4985,
      4988
     ]
    },
    "int": {
     "line number": [
      4984,
      4985,
      4987
     ]
    },
    "numpy.array": {
     "line number": [
      4990
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      4980
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      4980
     ]
    },
    "numpy.dtype": {
     "line number": [
      4984,
      4985,
      4987
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4984,
      4985,
      4988,
      4991,
      4994
     ]
    },
    "x": {
     "line number": [
      4990,
      4993
     ]
    },
    "x.__getitem__": {
     "line number": [
      4991
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_empty_structure_creation": {
  "data": {
   "lineno": 5112,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5114,
      5116
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_field_names": {
  "data": {
   "lineno": 5045,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      5054,
      5055,
      5056,
      5057
     ]
    },
    "ValueError": {
     "line number": [
      5066,
      5067,
      5071,
      5072,
      5078,
      5079,
      5093,
      5094
     ]
    },
    "func": {
     "line number": [
      5060,
      5062,
      5065,
      5074,
      5075,
      5081
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      5059
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      5090
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      5050
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5064,
      5069,
      5077,
      5084,
      5085,
      5086
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      5054,
      5055,
      5056,
      5057,
      5066,
      5067,
      5071,
      5072,
      5078,
      5079,
      5093,
      5094
     ]
    },
    "numpy.zeros": {
     "line number": [
      5047
     ]
    },
    "str": {
     "line number": [
      5052,
      5059
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_field_rename": {
  "data": {
   "lineno": 4968,
   "symbols_in_volume": {
    "float": {
     "line number": [
      4969
     ]
    },
    "int": {
     "line number": [
      4969
     ]
    },
    "numpy.dtype": {
     "line number": [
      4969
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4971
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_fromarrays_unicode": {
  "data": {
   "lineno": 5030,
   "symbols_in_volume": {
    "numpy.core.records.fromarrays": {
     "line number": [
      5033
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5034,
      5035
     ]
    },
    "x": {
     "line number": [
      5033,
      5034,
      5035
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_multifield_indexing_view": {
  "data": {
   "lineno": 5119,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      5123
     ]
    },
    "numpy.ones": {
     "line number": [
      5120
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5122,
      5123
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5127
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_occurrence": {
  "data": {
   "lineno": 4973,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      4978
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4978
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_occurrence.test_dtype_init": {
  "data": {
   "lineno": 4974,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      4975
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_unicode": {
  "data": {
   "lineno": 4996,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      5002
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      4996
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      4996
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      5002
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_unicode.test_dtype_unicode": {
  "data": {
   "lineno": 4998,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      4999
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_record_hash": {
  "data": {
   "lineno": 5096,
   "symbols_in_volume": {
    "hash": {
     "line number": [
      5103,
      5103,
      5104,
      5104,
      5105,
      5105,
      5106,
      5106
     ]
    },
    "numpy.array": {
     "line number": [
      5097,
      5099,
      5101
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5103,
      5104,
      5105,
      5106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_record_no_hash": {
  "data": {
   "lineno": 5108,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      5110
     ]
    },
    "hash": {
     "line number": [
      5110
     ]
    },
    "numpy.array": {
     "line number": [
      5109
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      5110
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_unicode_field_names": {
  "data": {
   "lineno": 5018,
   "symbols_in_volume": {
    "UnicodeEncodeError": {
     "line number": [
      5027,
      5028
     ]
    },
    "int": {
     "line number": [
      5022,
      5023,
      5027,
      5028
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      5018
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      5018
     ]
    },
    "numpy.dtype": {
     "line number": [
      5022,
      5023,
      5027,
      5028
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5022,
      5023
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      5027,
      5028
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_unicode_field_titles": {
  "data": {
   "lineno": 5004,
   "symbols_in_volume": {
    "int": {
     "line number": [
      5008
     ]
    },
    "numpy.array": {
     "line number": [
      5011
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      5004
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      5004
     ]
    },
    "numpy.dtype": {
     "line number": [
      5008
     ]
    },
    "x": {
     "line number": [
      5011,
      5012,
      5013,
      5014
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRecord.test_unicode_order": {
  "data": {
   "lineno": 5037,
   "symbols_in_volume": {
    "int": {
     "line number": [
      5041
     ]
    },
    "numpy.array": {
     "line number": [
      5041,
      5043
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5043
     ]
    },
    "x": {
     "line number": [
      5041,
      5043
     ]
    },
    "x.sort": {
     "line number": [
      5042
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRepeat": {
  "data": {
   "lineno": 6173,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6173
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestRepeat.setup": {
  "data": {
   "lineno": 6174,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      6175
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRepeat.test_axis_spec": {
  "data": {
   "lineno": 6188,
   "symbols_in_volume": {
    "A": {
     "line number": [
      6189,
      6190,
      6194,
      6195
     ]
    },
    "numpy.repeat": {
     "line number": [
      6189,
      6194
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6190,
      6195
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRepeat.test_basic": {
  "data": {
   "lineno": 6178,
   "symbols_in_volume": {
    "A": {
     "line number": [
      6179,
      6180
     ]
    },
    "numpy.repeat": {
     "line number": [
      6179
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRepeat.test_broadcast1": {
  "data": {
   "lineno": 6183,
   "symbols_in_volume": {
    "A": {
     "line number": [
      6184,
      6185
     ]
    },
    "numpy.repeat": {
     "line number": [
      6184
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6185
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestRepeat.test_broadcast2": {
  "data": {
   "lineno": 6198,
   "symbols_in_volume": {
    "A": {
     "line number": [
      6199,
      6200,
      6205,
      6206
     ]
    },
    "numpy.repeat": {
     "line number": [
      6199,
      6205
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6200,
      6206
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestResize": {
  "data": {
   "lineno": 4874,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4874
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestResize.test_0d_shape": {
  "data": {
   "lineno": 4906,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      4909,
      4913
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4911,
      4912,
      4915,
      4916
     ]
    },
    "range": {
     "line number": [
      4908
     ]
    },
    "x": {
     "line number": [
      4909,
      4913
     ]
    },
    "x.resize": {
     "line number": [
      4910,
      4914
     ]
    },
    "x.shape": {
     "line number": [
      4911,
      4915
     ]
    },
    "x.size": {
     "line number": [
      4912,
      4916
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestResize.test_basic": {
  "data": {
   "lineno": 4875,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4876,
      4882
     ]
    },
    "numpy.testing.IS_PYPY": {
     "line number": [
      4877
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4881,
      4883
     ]
    },
    "x": {
     "line number": [
      4876
     ]
    },
    "x.flat": {
     "line number": [
      4881,
      4883
     ]
    },
    "x.resize": {
     "line number": [
      4878,
      4880
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestResize.test_check_reference": {
  "data": {
   "lineno": 4885,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      4888
     ]
    },
    "numpy.array": {
     "line number": [
      4886
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4888
     ]
    },
    "x": {
     "line number": [
      4886,
      4887
     ]
    },
    "x.resize": {
     "line number": [
      4888
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestResize.test_check_weakref": {
  "data": {
   "lineno": 4960,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      4963
     ]
    },
    "numpy.array": {
     "line number": [
      4961
     ]
    },
    "numpy.core.tests.test_multiarray.weakref": {
     "line number": [
      4962
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4963
     ]
    },
    "x": {
     "line number": [
      4961,
      4962
     ]
    },
    "x.resize": {
     "line number": [
      4963
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestResize.test_empty_view": {
  "data": {
   "lineno": 4952,
   "symbols_in_volume": {
    "int": {
     "line number": [
      4955
     ]
    },
    "numpy.zeros": {
     "line number": [
      4955
     ]
    },
    "x": {
     "line number": [
      4955,
      4956
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestResize.test_freeform_shape": {
  "data": {
   "lineno": 4924,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      4925
     ]
    },
    "numpy.testing.IS_PYPY": {
     "line number": [
      4926
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4930
     ]
    },
    "x": {
     "line number": [
      4925
     ]
    },
    "x.resize": {
     "line number": [
      4927,
      4929
     ]
    },
    "x.shape": {
     "line number": [
      4930
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestResize.test_int_shape": {
  "data": {
   "lineno": 4891,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      4892,
      4897
     ]
    },
    "numpy.testing.IS_PYPY": {
     "line number": [
      4893
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4897
     ]
    },
    "x": {
     "line number": [
      4892,
      4897
     ]
    },
    "x.resize": {
     "line number": [
      4894,
      4896
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestResize.test_invalid_arguments": {
  "data": {
   "lineno": 4918,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      4919,
      4921,
      4922
     ]
    },
    "ValueError": {
     "line number": [
      4920
     ]
    },
    "numpy.eye": {
     "line number": [
      4919,
      4920,
      4921,
      4922
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4919,
      4920,
      4921,
      4922
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestResize.test_none_shape": {
  "data": {
   "lineno": 4899,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      4900,
      4902,
      4904
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4902,
      4904
     ]
    },
    "x": {
     "line number": [
      4900,
      4902,
      4904
     ]
    },
    "x.resize": {
     "line number": [
      4901,
      4903
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestResize.test_obj_obj": {
  "data": {
   "lineno": 4941,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      4943
     ]
    },
    "numpy.testing.IS_PYPY": {
     "line number": [
      4944
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4949,
      4950
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      4948
     ]
    },
    "object": {
     "line number": [
      4943
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestResize.test_zeros_appended": {
  "data": {
   "lineno": 4932,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      4933,
      4938
     ]
    },
    "numpy.testing.IS_PYPY": {
     "line number": [
      4934
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4938,
      4939
     ]
    },
    "numpy.zeros": {
     "line number": [
      4939
     ]
    },
    "x": {
     "line number": [
      4933,
      4938,
      4939
     ]
    },
    "x.resize": {
     "line number": [
      4935,
      4937
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestScalarIndexing": {
  "data": {
   "lineno": 646,
   "symbols_in_volume": {
    "object": {
     "line number": [
      646
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestScalarIndexing.setup": {
  "data": {
   "lineno": 647,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      648
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestScalarIndexing.test_ellipsis_subscript": {
  "data": {
   "lineno": 650,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      652,
      653
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestScalarIndexing.test_empty_subscript": {
  "data": {
   "lineno": 655,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      657,
      658
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_newaxis": {
  "data": {
   "lineno": 684,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      690,
      691
     ]
    },
    "numpy.newaxis": {
     "line number": [
      690,
      691
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      690,
      691
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_newaxis.subscript": {
  "data": {
   "lineno": 687
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript": {
  "data": {
   "lineno": 660,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      662,
      663
     ]
    },
    "int": {
     "line number": [
      663
     ]
    },
    "numpy.array": {
     "line number": [
      663
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      662,
      663
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript_assignment": {
  "data": {
   "lineno": 665,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      671
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      671
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript_assignment.assign": {
  "data": {
   "lineno": 668
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestScalarIndexing.test_newaxis": {
  "data": {
   "lineno": 673,
   "symbols_in_volume": {
    "numpy.newaxis.shape": {
     "line number": [
      675,
      676,
      677,
      678,
      679,
      679,
      680,
      680,
      681,
      681,
      682
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      675,
      676,
      677,
      678,
      679,
      680,
      681,
      682
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestScalarIndexing.test_overlapping_assignment": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      695,
      699,
      704,
      708,
      712,
      717,
      721,
      725,
      729,
      733,
      737
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      697,
      701,
      706,
      710,
      714,
      719,
      723,
      727,
      731,
      735,
      739
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestSizeOf": {
  "data": {
   "lineno": 7434,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7434
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestSizeOf.check_array": {
  "data": {
   "lineno": 7440,
   "symbols_in_volume": {
    "dtype": {
     "line number": [
      7441,
      7444
     ]
    },
    "numpy.arange": {
     "line number": [
      7444
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      7445
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7445
     ]
    },
    "x": {
     "line number": [
      7444,
      7445
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestSizeOf.test_array_float32": {
  "data": {
   "lineno": 7453,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      7454
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestSizeOf.test_array_float64": {
  "data": {
   "lineno": 7456,
   "symbols_in_volume": {
    "numpy.float64": {
     "line number": [
      7457
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestSizeOf.test_array_int32": {
  "data": {
   "lineno": 7447,
   "symbols_in_volume": {
    "numpy.int32": {
     "line number": [
      7448
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestSizeOf.test_array_int64": {
  "data": {
   "lineno": 7450,
   "symbols_in_volume": {
    "numpy.int64": {
     "line number": [
      7451
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestSizeOf.test_empty_array": {
  "data": {
   "lineno": 7436,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7437
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      7438
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7438
     ]
    },
    "x": {
     "line number": [
      7437,
      7438
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestSizeOf.test_error": {
  "data": {
   "lineno": 7475,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      7477
     ]
    },
    "numpy.ones": {
     "line number": [
      7476
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7477
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestSizeOf.test_reshape": {
  "data": {
   "lineno": 7463,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      7465,
      7465
     ]
    },
    "numpy.ones": {
     "line number": [
      7464
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7465
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestSizeOf.test_resize": {
  "data": {
   "lineno": 7467,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      7469,
      7471,
      7473
     ]
    },
    "numpy.ones": {
     "line number": [
      7468
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7471,
      7473
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestSizeOf.test_view": {
  "data": {
   "lineno": 7459,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      7461,
      7461
     ]
    },
    "numpy.ones": {
     "line number": [
      7460
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7461
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter": {
  "data": {
   "lineno": 6294,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6294
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_circular": {
  "data": {
   "lineno": 6370,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      6373,
      6374,
      6375,
      6376,
      6377,
      6378,
      6384,
      6385,
      6386,
      6387,
      6388,
      6389,
      6395,
      6396,
      6397,
      6398,
      6399,
      6400,
      6406,
      6407,
      6408,
      6409,
      6410,
      6411
     ]
    },
    "numpy.core._multiarray_tests.test_neighborhood_iterator_oob": {
     "line number": [
      6379,
      6390,
      6401,
      6412
     ]
    },
    "numpy.core.tests.test_multiarray.NEIGH_MODE": {
     "line number": [
      6380,
      6380,
      6391,
      6391,
      6402,
      6402,
      6413,
      6413
     ]
    },
    "numpy.float64": {
     "line number": [
      6371
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      6381,
      6392,
      6403,
      6414
     ]
    },
    "x": {
     "line number": [
      6373,
      6380,
      6384,
      6391,
      6395,
      6402,
      6406,
      6413
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_const": {
  "data": {
   "lineno": 6296,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      6299,
      6300,
      6301,
      6302,
      6303,
      6304,
      6305,
      6306,
      6311,
      6312,
      6313,
      6314,
      6315
     ]
    },
    "numpy.core._multiarray_tests.test_neighborhood_iterator_oob": {
     "line number": [
      6307,
      6316
     ]
    },
    "numpy.core.tests.test_multiarray.NEIGH_MODE": {
     "line number": [
      6308,
      6308,
      6317,
      6317
     ]
    },
    "numpy.float64": {
     "line number": [
      6297
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      6309,
      6318
     ]
    },
    "x": {
     "line number": [
      6299,
      6308,
      6317
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_mirror": {
  "data": {
   "lineno": 6322,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      6325,
      6326,
      6327,
      6328,
      6329,
      6330,
      6336,
      6337,
      6338,
      6339,
      6340,
      6341,
      6347,
      6348,
      6349,
      6350,
      6351,
      6352,
      6358,
      6359,
      6360,
      6361,
      6362,
      6363
     ]
    },
    "numpy.core._multiarray_tests.test_neighborhood_iterator_oob": {
     "line number": [
      6331,
      6342,
      6353,
      6364
     ]
    },
    "numpy.core.tests.test_multiarray.NEIGH_MODE": {
     "line number": [
      6332,
      6332,
      6343,
      6343,
      6354,
      6354,
      6365,
      6365
     ]
    },
    "numpy.float64": {
     "line number": [
      6323
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      6333,
      6344,
      6355,
      6366
     ]
    },
    "x": {
     "line number": [
      6325,
      6332,
      6336,
      6343,
      6347,
      6354,
      6358,
      6365
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_strict_within": {
  "data": {
   "lineno": 6418,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      6422,
      6423,
      6430,
      6431,
      6438,
      6439
     ]
    },
    "numpy.core._multiarray_tests.test_neighborhood_iterator_oob": {
     "line number": [
      6424,
      6432,
      6440
     ]
    },
    "numpy.core.tests.test_multiarray.NEIGH_MODE": {
     "line number": [
      6425,
      6425,
      6433,
      6433,
      6441,
      6441
     ]
    },
    "numpy.float64": {
     "line number": [
      6419
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      6426,
      6434,
      6442
     ]
    },
    "x": {
     "line number": [
      6422,
      6425,
      6430,
      6433,
      6438,
      6441
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats": {
  "data": {
   "lineno": 5154,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray._mean": {
     "line number": [
      5156
     ]
    },
    "numpy.core.tests.test_multiarray._std": {
     "line number": [
      5156
     ]
    },
    "numpy.core.tests.test_multiarray._var": {
     "line number": [
      5156
     ]
    },
    "object": {
     "line number": [
      5154
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestStats.setup": {
  "data": {
   "lineno": 5158,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      5162
     ]
    },
    "numpy.array": {
     "line number": [
      5162
     ]
    },
    "numpy.random.random": {
     "line number": [
      5160
     ]
    },
    "numpy.random.seed": {
     "line number": [
      5159
     ]
    },
    "range": {
     "line number": [
      5159
     ]
    },
    "repr": {
     "line number": [
      5162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_ddof": {
  "data": {
   "lineno": 5271,
   "symbols_in_volume": {
    "f": {
     "line number": [
      5272,
      5275,
      5276,
      5277,
      5280,
      5281
     ]
    },
    "numpy.core.tests.test_multiarray._std": {
     "line number": [
      5277
     ]
    },
    "numpy.core.tests.test_multiarray._var": {
     "line number": [
      5272
     ]
    },
    "numpy.sqrt": {
     "line number": [
      5280,
      5281
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5282,
      5283
     ]
    },
    "range": {
     "line number": [
      5273,
      5278
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_ddof_too_big": {
  "data": {
   "lineno": 5285,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      5294
     ]
    },
    "f": {
     "line number": [
      5287,
      5291
     ]
    },
    "issubclass": {
     "line number": [
      5294
     ]
    },
    "len": {
     "line number": [
      5293
     ]
    },
    "numpy.core.tests.test_multiarray._std": {
     "line number": [
      5287
     ]
    },
    "numpy.core.tests.test_multiarray._var": {
     "line number": [
      5287
     ]
    },
    "numpy.core.tests.test_multiarray.warnings": {
     "line number": [
      5289,
      5290
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5292,
      5293,
      5294
     ]
    },
    "range": {
     "line number": [
      5288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_dtype_from_dtype": {
  "data": {
   "lineno": 5244,
   "symbols_in_volume": {
    "f": {
     "line number": [
      5262,
      5265,
      5268
     ]
    },
    "numpy.dtype": {
     "line number": [
      5264
     ]
    },
    "numpy.eye": {
     "line number": [
      5245
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5266,
      5269
     ]
    },
    "numpy.typecodes": {
     "line number": [
      5263
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_dtype_from_input": {
  "data": {
   "lineno": 5195,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      5202,
      5208
     ]
    },
    "f": {
     "line number": [
      5201,
      5204,
      5207,
      5211,
      5215,
      5218,
      5222,
      5226,
      5229,
      5233,
      5238,
      5241
     ]
    },
    "numpy.array": {
     "line number": [
      5202
     ]
    },
    "numpy.core.tests.test_multiarray._mean": {
     "line number": [
      5222
     ]
    },
    "numpy.core.tests.test_multiarray._std": {
     "line number": [
      5233
     ]
    },
    "numpy.core.tests.test_multiarray._var": {
     "line number": [
      5233
     ]
    },
    "numpy.eye": {
     "line number": [
      5213,
      5224,
      5235
     ]
    },
    "numpy.float64": {
     "line number": [
      5214
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5205,
      5208,
      5216,
      5219,
      5227,
      5230,
      5239,
      5242
     ]
    },
    "numpy.typecodes": {
     "line number": [
      5197,
      5198
     ]
    },
    "type": {
     "line number": [
      5207
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_empty": {
  "data": {
   "lineno": 5296,
   "symbols_in_volume": {
    "A": {
     "line number": [
      5297,
      5302,
      5308
     ]
    },
    "RuntimeWarning": {
     "line number": [
      5304
     ]
    },
    "f": {
     "line number": [
      5298,
      5302,
      5308
     ]
    },
    "issubclass": {
     "line number": [
      5304
     ]
    },
    "len": {
     "line number": [
      5303
     ]
    },
    "numpy.core.tests.test_multiarray.warnings": {
     "line number": [
      5300,
      5301,
      5306,
      5307
     ]
    },
    "numpy.isnan": {
     "line number": [
      5302
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5302,
      5303,
      5304
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5308
     ]
    },
    "numpy.zeros": {
     "line number": [
      5297,
      5308
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_keepdims": {
  "data": {
   "lineno": 5171,
   "symbols_in_volume": {
    "f": {
     "line number": [
      5175,
      5179
     ]
    },
    "numpy.eye": {
     "line number": [
      5172
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5176,
      5177,
      5180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_mean_float16": {
  "data": {
   "lineno": 5321,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray._mean": {
     "line number": [
      5324
     ]
    },
    "numpy.ones": {
     "line number": [
      5324
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5324
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_mean_values": {
  "data": {
   "lineno": 5310,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray._mean": {
     "line number": [
      5314,
      5318
     ]
    },
    "numpy.prod": {
     "line number": [
      5318
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5315,
      5319
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_out": {
  "data": {
   "lineno": 5182,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      5191,
      5193
     ]
    },
    "f": {
     "line number": [
      5184,
      5186,
      5187,
      5191,
      5193
     ]
    },
    "numpy.empty": {
     "line number": [
      5190,
      5192
     ]
    },
    "numpy.eye": {
     "line number": [
      5183
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5188,
      5189
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      5191,
      5193
     ]
    },
    "numpy.zeros": {
     "line number": [
      5185
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_python_type": {
  "data": {
   "lineno": 5165,
   "symbols_in_volume": {
    "numpy.float16": {
     "line number": [
      5166
     ]
    },
    "numpy.mean": {
     "line number": [
      5167
     ]
    },
    "numpy.std": {
     "line number": [
      5168
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5167,
      5168,
      5169
     ]
    },
    "numpy.var": {
     "line number": [
      5169
     ]
    },
    "x": {
     "line number": [
      5166,
      5167,
      5168,
      5169
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_std_values": {
  "data": {
   "lineno": 5335,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray._std": {
     "line number": [
      5339
     ]
    },
    "numpy.core.tests.test_multiarray._var": {
     "line number": [
      5338
     ]
    },
    "numpy.sqrt": {
     "line number": [
      5338
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5340
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_subclass": {
  "data": {
   "lineno": 5342,
   "symbols_in_volume": {
    "TestArray": {
     "line number": [
      5353
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5355,
      5357,
      5359
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_subclass.TestArray": {
  "data": {
   "lineno": 5343,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      5343
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_subclass.TestArray.__array_finalize__": {
  "data": {
   "lineno": 5350,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      5351
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_subclass.TestArray.__new__": {
  "data": {
   "lineno": 5344,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5345
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStats.test_var_values": {
  "data": {
   "lineno": 5326,
   "symbols_in_volume": {
    "numpy.core.tests.test_multiarray._mean": {
     "line number": [
      5329,
      5330
     ]
    },
    "numpy.core.tests.test_multiarray._var": {
     "line number": [
      5332
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      5333
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStringCompare": {
  "data": {
   "lineno": 3889,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3889
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestStringCompare.test_mixed": {
  "data": {
   "lineno": 3900,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3901
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      3903,
      3904,
      3905,
      3906,
      3907,
      3908
     ]
    },
    "x": {
     "line number": [
      3903,
      3903,
      3904,
      3904,
      3905,
      3905,
      3906,
      3906,
      3907,
      3907,
      3908,
      3908
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStringCompare.test_string": {
  "data": {
   "lineno": 3890,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3891,
      3892
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      3893,
      3894,
      3895,
      3896,
      3897,
      3898
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStringCompare.test_unicode": {
  "data": {
   "lineno": 3910,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3911,
      3912
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      3913,
      3914,
      3915,
      3916,
      3917,
      3918
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured": {
  "data": {
   "lineno": 990,
   "symbols_in_volume": {
    "object": {
     "line number": [
      990
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_assignment": {
  "data": {
   "lineno": 1227,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1247
     ]
    },
    "numpy.array": {
     "line number": [
      1236,
      1237,
      1238,
      1239,
      1240,
      1243,
      1250,
      1253,
      1260
     ]
    },
    "numpy.dtype": {
     "line number": [
      1234
     ]
    },
    "numpy.ones": {
     "line number": [
      1235
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1244,
      1245,
      1246,
      1248,
      1250,
      1256,
      1262
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1247
     ]
    },
    "testassign": {
     "line number": [
      1244,
      1245,
      1246,
      1247,
      1248
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_assignment.testassign": {
  "data": {
   "lineno": 1228
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_base_attr": {
  "data": {
   "lineno": 1222,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      1225
     ]
    },
    "numpy.zeros": {
     "line number": [
      1223
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_casting": {
  "data": {
   "lineno": 1074,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1115,
      1118,
      1121,
      1123
     ]
    },
    "numpy.array": {
     "line number": [
      1077,
      1085,
      1086,
      1100,
      1108
     ]
    },
    "numpy.can_cast": {
     "line number": [
      1078,
      1087,
      1091,
      1098,
      1106,
      1114,
      1117,
      1120,
      1122,
      1128,
      1130
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1078,
      1087,
      1091,
      1098,
      1106,
      1114,
      1117,
      1120,
      1122,
      1128,
      1130
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1080,
      1081,
      1088,
      1093,
      1100,
      1108
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1115,
      1118,
      1121,
      1123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_multiindex_titles": {
  "data": {
   "lineno": 1270,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      1272,
      1273
     ]
    },
    "ValueError": {
     "line number": [
      1274
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1272,
      1273,
      1274
     ]
    },
    "numpy.zeros": {
     "line number": [
      1271
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_objview": {
  "data": {
   "lineno": 1132,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1134
     ]
    },
    "numpy.zeros": {
     "line number": [
      1138
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_setfield": {
  "data": {
   "lineno": 1141,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      1143,
      1144
     ]
    },
    "numpy.ones": {
     "line number": [
      1146,
      1147,
      1148
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1148
     ]
    },
    "numpy.zeros": {
     "line number": [
      1145
     ]
    },
    "x": {
     "line number": [
      1145,
      1146,
      1147,
      1148
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_setfield_object": {
  "data": {
   "lineno": 1150,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1164
     ]
    },
    "numpy.arange": {
     "line number": [
      1155,
      1156
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1156
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1164
     ]
    },
    "numpy.zeros": {
     "line number": [
      1153,
      1159
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_setfield_object.testassign": {
  "data": {
   "lineno": 1161,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_structuredscalar_indexing": {
  "data": {
   "lineno": 1264,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      1266
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1267,
      1268
     ]
    },
    "x": {
     "line number": [
      1266,
      1267,
      1267,
      1268,
      1268
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_subarray_comparison": {
  "data": {
   "lineno": 1005,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      1056,
      1065
     ]
    },
    "numpy.array": {
     "line number": [
      1030,
      1031,
      1034,
      1035,
      1038,
      1039,
      1044,
      1045,
      1070,
      1071
     ]
    },
    "numpy.rec.fromrecords": {
     "line number": [
      1008
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1012,
      1013,
      1015,
      1016,
      1020,
      1021,
      1026,
      1027,
      1032,
      1033,
      1036,
      1037,
      1040,
      1041,
      1046,
      1047,
      1057,
      1066,
      1072
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1055,
      1064
     ]
    },
    "numpy.zeros": {
     "line number": [
      1050,
      1051,
      1059,
      1060
     ]
    },
    "object": {
     "line number": [
      1010
     ]
    },
    "range": {
     "line number": [
      1017,
      1022,
      1023
     ]
    },
    "x": {
     "line number": [
      1050,
      1057,
      1059,
      1066
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_subarray_field_access": {
  "data": {
   "lineno": 991,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      993
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      997
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1002,
      1003
     ]
    },
    "numpy.zeros": {
     "line number": [
      992
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestStructured.test_zero_width_string": {
  "data": {
   "lineno": 1166,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1206
     ]
    },
    "eval": {
     "line number": [
      1206
     ]
    },
    "int": {
     "line number": [
      1169
     ]
    },
    "numpy.array": {
     "line number": [
      1206
     ]
    },
    "numpy.core.tests.test_multiarray.io": {
     "line number": [
      1208
     ]
    },
    "numpy.dtype": {
     "line number": [
      1169
     ]
    },
    "numpy.empty": {
     "line number": [
      1198
     ]
    },
    "numpy.load": {
     "line number": [
      1212,
      1218
     ]
    },
    "numpy.ndarray": {
     "line number": [
      1191
     ]
    },
    "numpy.save": {
     "line number": [
      1209,
      1217
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1206
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1173,
      1174,
      1177,
      1178,
      1182,
      1183,
      1187,
      1188,
      1192,
      1193,
      1196,
      1198,
      1199,
      1202,
      1203,
      1205,
      1213,
      1214,
      1219,
      1220
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      1216
     ]
    },
    "numpy.zeros": {
     "line number": [
      1171,
      1196,
      1199
     ]
    },
    "repr": {
     "line number": [
      1206
     ]
    },
    "x": {
     "line number": [
      1171,
      1173,
      1176,
      1177,
      1178,
      1181,
      1181,
      1182,
      1183,
      1186,
      1187,
      1188,
      1193
     ]
    },
    "x.dtype": {
     "line number": [
      1191
     ]
    },
    "x.itemsize": {
     "line number": [
      1174
     ]
    },
    "x.reshape": {
     "line number": [
      1201
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestSubscripting": {
  "data": {
   "lineno": 3669,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3669
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestSubscripting.test_test_zero_rank": {
  "data": {
   "lineno": 3670,
   "symbols_in_volume": {
    "int": {
     "line number": [
      3674
     ]
    },
    "isinstance": {
     "line number": [
      3672,
      3674
     ]
    },
    "numpy.array": {
     "line number": [
      3671
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      3673
     ]
    },
    "numpy.int_": {
     "line number": [
      3672
     ]
    },
    "numpy.ndarray": {
     "line number": [
      3675
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3672,
      3674,
      3675
     ]
    },
    "type": {
     "line number": [
      3675
     ]
    },
    "x": {
     "line number": [
      3671,
      3672,
      3674,
      3675
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTake": {
  "data": {
   "lineno": 4378,
   "symbols_in_volume": {
    "object": {
     "line number": [
      4378
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestTake.test_byteorder": {
  "data": {
   "lineno": 4413,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4415
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      4413
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4416
     ]
    },
    "x": {
     "line number": [
      4415
     ]
    },
    "x.take": {
     "line number": [
      4416
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTake.test_clip": {
  "data": {
   "lineno": 4400,
   "symbols_in_volume": {
    "numpy.random.random": {
     "line number": [
      4401
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4403,
      4404
     ]
    },
    "x": {
     "line number": [
      4401,
      4403,
      4404
     ]
    },
    "x.shape": {
     "line number": [
      4402
     ]
    },
    "x.take": {
     "line number": [
      4403,
      4404
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTake.test_ip_types": {
  "data": {
   "lineno": 4383,
   "symbols_in_volume": {
    "T": {
     "line number": [
      4389,
      4390,
      4391
     ]
    },
    "bytes": {
     "line number": [
      4384
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      4384
     ]
    },
    "numpy.random.random": {
     "line number": [
      4386
     ]
    },
    "numpy.sctypes.values": {
     "line number": [
      4388
     ]
    },
    "numpy.void": {
     "line number": [
      4384
     ]
    },
    "object": {
     "line number": [
      4384
     ]
    },
    "x": {
     "line number": [
      4386
     ]
    },
    "x.copy": {
     "line number": [
      4391
     ]
    },
    "x.shape": {
     "line number": [
      4387
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTake.test_raise": {
  "data": {
   "lineno": 4393,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      4396,
      4397
     ]
    },
    "numpy.random.random": {
     "line number": [
      4394
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4398
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      4396,
      4397
     ]
    },
    "x": {
     "line number": [
      4394,
      4398
     ]
    },
    "x.shape": {
     "line number": [
      4395
     ]
    },
    "x.take": {
     "line number": [
      4396,
      4397,
      4398
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTake.test_record_array": {
  "data": {
   "lineno": 4418,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      4420
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      4423
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTake.test_wrap": {
  "data": {
   "lineno": 4406,
   "symbols_in_volume": {
    "numpy.random.random": {
     "line number": [
      4407
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4409,
      4410,
      4411
     ]
    },
    "x": {
     "line number": [
      4407,
      4409,
      4410,
      4411
     ]
    },
    "x.shape": {
     "line number": [
      4408
     ]
    },
    "x.take": {
     "line number": [
      4409,
      4410,
      4411
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTake.tst_basic": {
  "data": {
   "lineno": 4379,
   "symbols_in_volume": {
    "list": {
     "line number": [
      4380
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      4381
     ]
    },
    "range": {
     "line number": [
      4380
     ]
    },
    "x": {
     "line number": [
      4381
     ]
    },
    "x.shape": {
     "line number": [
      4380
     ]
    },
    "x.take": {
     "line number": [
      4381
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTemporaryElide": {
  "data": {
   "lineno": 3557,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3557
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_broadcast": {
  "data": {
   "lineno": 3623,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3628
     ]
    },
    "int": {
     "line number": [
      3627
     ]
    },
    "numpy.ones": {
     "line number": [
      3627,
      3628
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3630,
      3631
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_readonly": {
  "data": {
   "lineno": 3647,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      3649
     ]
    },
    "numpy.broadcast_to": {
     "line number": [
      3649
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3650
     ]
    },
    "numpy.zeros": {
     "line number": [
      3649
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_scalar": {
  "data": {
   "lineno": 3633,
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      3635,
      3636
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3636
     ]
    },
    "type": {
     "line number": [
      3636
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_scalar_readonly": {
  "data": {
   "lineno": 3638,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      3644
     ]
    },
    "numpy.float64": {
     "line number": [
      3644
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_updateifcopy": {
  "data": {
   "lineno": 3652,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      3653
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3656
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTemporaryElide.test_extension_incref_elide": {
  "data": {
   "lineno": 3560,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.incref_elide": {
     "line number": [
      3569
     ]
    },
    "numpy.ones": {
     "line number": [
      3568
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      3572,
      3573
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTemporaryElide.test_extension_incref_elide_stack": {
  "data": {
   "lineno": 3575,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.incref_elide_l": {
     "line number": [
      3585
     ]
    },
    "numpy.ones": {
     "line number": [
      3584,
      3587
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      3587,
      3588
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestTemporaryElide.test_temporary_with_cast": {
  "data": {
   "lineno": 3590,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      3620
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      3618
     ]
    },
    "numpy.complex128": {
     "line number": [
      3618
     ]
    },
    "numpy.complex64": {
     "line number": [
      3618
     ]
    },
    "numpy.dtype": {
     "line number": [
      3593,
      3596,
      3599,
      3602,
      3605,
      3609,
      3621
     ]
    },
    "numpy.float32": {
     "line number": [
      3608
     ]
    },
    "numpy.float64": {
     "line number": [
      3609,
      3612
     ]
    },
    "numpy.int64": {
     "line number": [
      3592,
      3605
     ]
    },
    "numpy.longdouble": {
     "line number": [
      3614
     ]
    },
    "numpy.ones": {
     "line number": [
      3592,
      3608,
      3614,
      3619
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3593,
      3596,
      3599,
      3602,
      3605,
      3609,
      3613,
      3615,
      3621
     ]
    },
    "numpy.true_divide": {
     "line number": [
      3598
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero": {
  "data": {
   "lineno": 7598,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7598
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_all_null_ustring_array_is_falsey": {
  "data": {
   "lineno": 7608,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7609
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7611
     ]
    },
    "numpy.unicode": {
     "line number": [
      7609
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_empty_ustring_array_is_falsey": {
  "data": {
   "lineno": 7600,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7601
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7601
     ]
    },
    "numpy.unicode": {
     "line number": [
      7601
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_null_inside_ustring_array_is_truthy": {
  "data": {
   "lineno": 7613,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7614
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7616
     ]
    },
    "numpy.unicode": {
     "line number": [
      7614
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_whitespace_ustring_array_is_falsey": {
  "data": {
   "lineno": 7603,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7604
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7606
     ]
    },
    "numpy.unicode": {
     "line number": [
      7604
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestVdot": {
  "data": {
   "lineno": 5361,
   "symbols_in_volume": {
    "object": {
     "line number": [
      5361
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestVdot.test_basic": {
  "data": {
   "lineno": 5362,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      5383
     ]
    },
    "numpy.eye": {
     "line number": [
      5367,
      5375,
      5383
     ]
    },
    "numpy.isscalar": {
     "line number": [
      5371,
      5379,
      5385
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      5371,
      5379,
      5385
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5372,
      5380,
      5386
     ]
    },
    "numpy.typecodes": {
     "line number": [
      5363,
      5363,
      5364
     ]
    },
    "numpy.vdot": {
     "line number": [
      5370,
      5372,
      5378,
      5380,
      5384,
      5386
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestVdot.test_vdot_array_order": {
  "data": {
   "lineno": 5388,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5389,
      5390
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5394,
      5395,
      5396
     ]
    },
    "numpy.vdot": {
     "line number": [
      5391,
      5394,
      5395,
      5396
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestVdot.test_vdot_uncontiguous": {
  "data": {
   "lineno": 5398,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      5403,
      5404
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      5409,
      5411,
      5413,
      5415,
      5417
     ]
    },
    "numpy.vdot": {
     "line number": [
      5409,
      5410,
      5411,
      5412,
      5413,
      5414,
      5415,
      5416,
      5417,
      5418
     ]
    },
    "numpy.zeros": {
     "line number": [
      5401,
      5402
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestView": {
  "data": {
   "lineno": 5129,
   "symbols_in_volume": {
    "object": {
     "line number": [
      5129
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestView.test_basic": {
  "data": {
   "lineno": 5130,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      5131
     ]
    },
    "numpy.int8": {
     "line number": [
      5132,
      5132,
      5133,
      5133
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      5138,
      5139
     ]
    },
    "x": {
     "line number": [
      5131
     ]
    },
    "x.view": {
     "line number": [
      5135,
      5137
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWarnings": {
  "data": {
   "lineno": 6444,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6444
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestWarnings.test_complex_warning": {
  "data": {
   "lineno": 6446,
   "symbols_in_volume": {
    "numpy.ComplexWarning": {
     "line number": [
      6451,
      6452
     ]
    },
    "numpy.array": {
     "line number": [
      6447,
      6448
     ]
    },
    "numpy.core.tests.test_multiarray.warnings": {
     "line number": [
      6450,
      6451
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      6453
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      6452
     ]
    },
    "slice": {
     "line number": [
      6452
     ]
    },
    "x": {
     "line number": [
      6447,
      6453
     ]
    },
    "x.__setitem__": {
     "line number": [
      6452
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWhere": {
  "data": {
   "lineno": 7267,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7267
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestWhere.test_basic": {
  "data": {
   "lineno": 7268,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      7269,
      7272
     ]
    },
    "dt": {
     "line number": [
      7273,
      7273,
      7273,
      7274,
      7274,
      7274,
      7275,
      7275,
      7275,
      7276,
      7276,
      7276,
      7277,
      7279
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      7270
     ]
    },
    "numpy.complex128": {
     "line number": [
      7269
     ]
    },
    "numpy.double": {
     "line number": [
      7269
     ]
    },
    "numpy.int16": {
     "line number": [
      7269
     ]
    },
    "numpy.int32": {
     "line number": [
      7269
     ]
    },
    "numpy.int64": {
     "line number": [
      7269
     ]
    },
    "numpy.longdouble": {
     "line number": [
      7270
     ]
    },
    "numpy.ones": {
     "line number": [
      7272
     ]
    },
    "numpy.ones_like": {
     "line number": [
      7277
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7273,
      7274,
      7275,
      7276,
      7282,
      7283,
      7284,
      7285,
      7286,
      7287,
      7288,
      7289,
      7290,
      7291,
      7292
     ]
    },
    "numpy.where": {
     "line number": [
      7273,
      7274,
      7275,
      7276,
      7282,
      7283,
      7284,
      7285,
      7286,
      7287,
      7288,
      7289,
      7290,
      7291,
      7292
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      7278
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWhere.test_dtype_mix": {
  "data": {
   "lineno": 7349,
   "symbols_in_volume": {
    "int": {
     "line number": [
      7364
     ]
    },
    "numpy.array": {
     "line number": [
      7350,
      7353,
      7355
     ]
    },
    "numpy.float32": {
     "line number": [
      7359
     ]
    },
    "numpy.float64": {
     "line number": [
      7354,
      7356
     ]
    },
    "numpy.int64": {
     "line number": [
      7360
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7357,
      7361,
      7366,
      7371
     ]
    },
    "numpy.uint32": {
     "line number": [
      7352
     ]
    },
    "numpy.where": {
     "line number": [
      7357,
      7361,
      7366,
      7371
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWhere.test_empty_result": {
  "data": {
   "lineno": 7412,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7418
     ]
    },
    "numpy.atleast_2d": {
     "line number": [
      7418
     ]
    },
    "numpy.intp": {
     "line number": [
      7418
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      7417
     ]
    },
    "numpy.vstack": {
     "line number": [
      7416
     ]
    },
    "numpy.where": {
     "line number": [
      7416
     ]
    },
    "numpy.zeros": {
     "line number": [
      7415
     ]
    },
    "x": {
     "line number": [
      7415,
      7416
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWhere.test_error": {
  "data": {
   "lineno": 7392,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      7396,
      7397
     ]
    },
    "numpy.ones": {
     "line number": [
      7394,
      7395
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7396,
      7397
     ]
    },
    "numpy.where": {
     "line number": [
      7396,
      7397
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWhere.test_exotic": {
  "data": {
   "lineno": 7294,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      7298,
      7311
     ]
    },
    "float": {
     "line number": [
      7306,
      7325,
      7327,
      7329,
      7332
     ]
    },
    "numpy.array": {
     "line number": [
      7296,
      7298,
      7299,
      7300,
      7303,
      7307,
      7310,
      7324
     ]
    },
    "numpy.float32": {
     "line number": [
      7324,
      7326,
      7328,
      7330
     ]
    },
    "numpy.float64": {
     "line number": [
      7299,
      7333
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      7296,
      7300,
      7315,
      7319,
      7321
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7326,
      7328,
      7330,
      7333
     ]
    },
    "numpy.where": {
     "line number": [
      7296,
      7300,
      7314,
      7314,
      7315,
      7318,
      7318,
      7319,
      7321,
      7326,
      7328,
      7330,
      7333
     ]
    },
    "object": {
     "line number": [
      7309
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWhere.test_foreign": {
  "data": {
   "lineno": 7373,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7374,
      7376,
      7379
     ]
    },
    "numpy.float64": {
     "line number": [
      7377,
      7380
     ]
    },
    "numpy.ones": {
     "line number": [
      7378
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7381,
      7384,
      7387,
      7390
     ]
    },
    "numpy.where": {
     "line number": [
      7381,
      7384,
      7387,
      7390
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWhere.test_largedim": {
  "data": {
   "lineno": 7420,
   "symbols_in_volume": {
    "numpy.random.rand": {
     "line number": [
      7424
     ]
    },
    "numpy.random.seed": {
     "line number": [
      7423
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      7429
     ]
    },
    "range": {
     "line number": [
      7426
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWhere.test_ndim": {
  "data": {
   "lineno": 7335,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7339
     ]
    },
    "numpy.newaxis": {
     "line number": [
      7339
     ]
    },
    "numpy.ones": {
     "line number": [
      7338
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      7340,
      7341,
      7346,
      7347
     ]
    },
    "numpy.where": {
     "line number": [
      7339,
      7345
     ]
    },
    "numpy.zeros": {
     "line number": [
      7337
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWhere.test_string": {
  "data": {
   "lineno": 7399,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7401,
      7402,
      7407,
      7408
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7403,
      7404,
      7409,
      7410
     ]
    },
    "numpy.where": {
     "line number": [
      7403,
      7404,
      7409,
      7410
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy": {
  "data": {
   "lineno": 7712,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7712
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_argmax_with_out": {
  "data": {
   "lineno": 7714,
   "symbols_in_volume": {
    "numpy.argmax": {
     "line number": [
      7717
     ]
    },
    "numpy.empty": {
     "line number": [
      7716
     ]
    },
    "numpy.eye": {
     "line number": [
      7715
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7718
     ]
    },
    "range": {
     "line number": [
      7718
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_argmin_with_out": {
  "data": {
   "lineno": 7720,
   "symbols_in_volume": {
    "numpy.argmin": {
     "line number": [
      7723
     ]
    },
    "numpy.empty": {
     "line number": [
      7722
     ]
    },
    "numpy.eye": {
     "line number": [
      7721
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7724
     ]
    },
    "range": {
     "line number": [
      7724
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_choose_mod_raise": {
  "data": {
   "lineno": 7758,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7759,
      7763
     ]
    },
    "numpy.choose": {
     "line number": [
      7762
     ]
    },
    "numpy.empty": {
     "line number": [
      7760
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7763
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_clip_with_out": {
  "data": {
   "lineno": 7726,
   "symbols_in_volume": {
    "numpy.clip": {
     "line number": [
      7729
     ]
    },
    "numpy.eye": {
     "line number": [
      7727,
      7728
     ]
    },
    "numpy.sum": {
     "line number": [
      7731
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7730
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7731
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_dealloc_warning": {
  "data": {
   "lineno": 7798,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      7800
     ]
    },
    "len": {
     "line number": [
      7804
     ]
    },
    "numpy.arange": {
     "line number": [
      7801
     ]
    },
    "numpy.core._multiarray_tests.npy_abuse_writebackifcopy": {
     "line number": [
      7803
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      7799
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_dot_out": {
  "data": {
   "lineno": 7774,
   "symbols_in_volume": {
    "float": {
     "line number": [
      7776
     ]
    },
    "numpy.arange": {
     "line number": [
      7776
     ]
    },
    "numpy.array": {
     "line number": [
      7778
     ]
    },
    "numpy.dot": {
     "line number": [
      7777
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7778
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_flatiter__array__": {
  "data": {
   "lineno": 7767,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      7768
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_insert_noncontiguous": {
  "data": {
   "lineno": 7733,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      7739
     ]
    },
    "numpy.arange": {
     "line number": [
      7734
     ]
    },
    "numpy.array": {
     "line number": [
      7737
     ]
    },
    "numpy.place": {
     "line number": [
      7736,
      7739
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7737
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7739
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_put_noncontiguous": {
  "data": {
   "lineno": 7741,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      7742
     ]
    },
    "numpy.array": {
     "line number": [
      7744
     ]
    },
    "numpy.put": {
     "line number": [
      7743
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7744
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_putmask_noncontiguous": {
  "data": {
   "lineno": 7746,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      7747
     ]
    },
    "numpy.array": {
     "line number": [
      7750
     ]
    },
    "numpy.putmask": {
     "line number": [
      7749
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7750
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_take_mode_raise": {
  "data": {
   "lineno": 7752,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      7753
     ]
    },
    "numpy.array": {
     "line number": [
      7756
     ]
    },
    "numpy.empty": {
     "line number": [
      7754
     ]
    },
    "numpy.take": {
     "line number": [
      7755
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7756
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_view_assign": {
  "data": {
   "lineno": 7780,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      7783
     ]
    },
    "numpy.core._multiarray_tests.npy_create_writebackifcopy": {
     "line number": [
      7784
     ]
    },
    "numpy.core._multiarray_tests.npy_resolve": {
     "line number": [
      7788
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7785,
      7786,
      7792
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7790,
      7793,
      7796
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_view_discard_refcount": {
  "data": {
   "lineno": 7806,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      7809
     ]
    },
    "numpy.core._multiarray_tests.npy_create_writebackifcopy": {
     "line number": [
      7813
     ]
    },
    "numpy.core._multiarray_tests.npy_discard": {
     "line number": [
      7817
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      7812,
      7824
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      7811,
      7823
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      7814,
      7815,
      7821
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7819,
      7822,
      7824,
      7827
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank": {
  "data": {
   "lineno": 548,
   "symbols_in_volume": {
    "object": {
     "line number": [
      548
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.setup": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      550,
      550
     ]
    },
    "object": {
     "line number": [
      550
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_constructor": {
  "data": {
   "lineno": 617,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      618,
      621
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      620,
      623
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      556,
      557
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      554,
      555
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript_assignment": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      576,
      578
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_empty_subscript": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      563,
      564
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      561,
      562
     ]
    },
    "str": {
     "line number": [
      564
     ]
    },
    "type": {
     "line number": [
      563,
      564
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_empty_subscript_assignment": {
  "data": {
   "lineno": 580,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      583,
      585
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_newaxis": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      614,
      615
     ]
    },
    "numpy.newaxis": {
     "line number": [
      614,
      615
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      614,
      615
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_newaxis.subscript": {
  "data": {
   "lineno": 611
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_subscript": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      568,
      569,
      570,
      571
     ]
    },
    "int": {
     "line number": [
      570,
      571
     ]
    },
    "numpy.array": {
     "line number": [
      570,
      571
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      568,
      569,
      570,
      571
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_subscript_assignment": {
  "data": {
   "lineno": 587,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      593,
      594
     ]
    },
    "ValueError": {
     "line number": [
      595
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      593,
      594,
      595
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_subscript_assignment.assign": {
  "data": {
   "lineno": 590
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_newaxis": {
  "data": {
   "lineno": 597,
   "symbols_in_volume": {
    "numpy.newaxis.shape": {
     "line number": [
      599,
      600,
      601,
      602,
      603,
      603,
      604,
      604,
      605,
      605,
      606
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      599,
      600,
      601,
      602,
      603,
      604,
      605,
      606
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_output": {
  "data": {
   "lineno": 625,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      627
     ]
    },
    "numpy.add": {
     "line number": [
      627
     ]
    },
    "numpy.array": {
     "line number": [
      626
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      627
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroRank.test_real_imag": {
  "data": {
   "lineno": 629,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      631,
      635,
      640
     ]
    },
    "numpy.ndarray": {
     "line number": [
      636,
      641
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      636,
      641
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      635,
      637,
      638,
      640,
      642,
      643
     ]
    },
    "type": {
     "line number": [
      636,
      641
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible": {
  "data": {
   "lineno": 1368,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1368
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._test_sort_partition": {
  "data": {
   "lineno": 1387,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      1389
     ]
    },
    "getattr": {
     "line number": [
      1391,
      1392
     ]
    },
    "numpy": {
     "line number": [
      1392
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      1389
     ]
    },
    "numpy.void": {
     "line number": [
      1389
     ]
    },
    "sort_func": {
     "line number": [
      1395
     ]
    },
    "sort_method": {
     "line number": [
      1394
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._zeros": {
  "data": {
   "lineno": 1369,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      1371,
      1376
     ]
    },
    "numpy.void": {
     "line number": [
      1372
     ]
    },
    "numpy.zeros": {
     "line number": [
      1373,
      1377
     ]
    },
    "staticmethod": {
     "line number": [
      1369
     ]
    },
    "str": {
     "line number": [
      1370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_argpartition": {
  "data": {
   "lineno": 1406
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_argsort": {
  "data": {
   "lineno": 1400
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_create": {
  "data": {
   "lineno": 1379,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      1380
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      1384
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1381,
      1383,
      1385
     ]
    },
    "numpy.void": {
     "line number": [
      1382
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_partition": {
  "data": {
   "lineno": 1403
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_pickle": {
  "data": {
   "lineno": 1426,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      1428
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      1428
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      1427
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      1430
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      1431
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1433
     ]
    },
    "numpy.void": {
     "line number": [
      1428
     ]
    },
    "range": {
     "line number": [
      1427
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_pickle_with_buffercallback": {
  "data": {
   "lineno": 1435,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1438
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      1435
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      1440
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      1442
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      1435
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_resize": {
  "data": {
   "lineno": 1409,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      1411
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      1411
     ]
    },
    "numpy.void": {
     "line number": [
      1411
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_sort": {
  "data": {
   "lineno": 1397
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_view": {
  "data": {
   "lineno": 1416,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      1417
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      1417
     ]
    },
    "numpy.dtype": {
     "line number": [
      1421
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1421,
      1424
     ]
    },
    "numpy.void": {
     "line number": [
      1417
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray._aligned_zeros": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      68
     ]
    },
    "float": {
     "line number": [
      56
     ]
    },
    "hasattr": {
     "line number": [
      72
     ]
    },
    "numpy.core.tests.test_multiarray.functools": {
     "line number": [
      74
     ]
    },
    "numpy.core.tests.test_multiarray.operator": {
     "line number": [
      74
     ]
    },
    "numpy.dtype": {
     "line number": [
      63,
      64
     ]
    },
    "numpy.empty": {
     "line number": [
      75
     ]
    },
    "numpy.ndarray": {
     "line number": [
      87
     ]
    },
    "numpy.uint8": {
     "line number": [
      75
     ]
    },
    "numpy.zeros": {
     "line number": [
      69
     ]
    },
    "object": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray._dtype_from_pep3118": {
  "data": {
   "shadows": "numpy.core._internal._dtype_from_pep3118"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray._internal": {
  "data": {
   "shadows": "numpy.core._internal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray._mean": {
  "data": {
   "lineno": 5142
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray._multiarray_tests": {
  "data": {
   "shadows": "numpy.core._multiarray_tests"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray._std": {
  "data": {
   "lineno": 5150
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray._var": {
  "data": {
   "lineno": 5146
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.assert_array_less": {
  "data": {
   "shadows": "numpy.testing.assert_array_less"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.builtins": {
  "data": {
   "shadows": "__builtin__"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.collections_abc": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.ctypes": {
  "data": {
   "shadows": "ctypes"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.datetime": {
  "data": {
   "shadows": "datetime.datetime"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.dot": {
  "data": {
   "shadows": "numpy.core.multiarray.dot"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.gc": {
  "data": {
   "shadows": "gc"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.incref_elide": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.incref_elide"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.incref_elide_l": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.incref_elide_l"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.npy_cabs": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_cabs"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.npy_carg": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_carg"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.npy_cosh": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_cosh"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.npy_create_writebackifcopy": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_create_writebackifcopy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.npy_discard": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_discard"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.npy_log10": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_log10"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.npy_resolve": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_resolve"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.npy_sinh": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_sinh"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.npy_tan": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_tan"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.npy_tanh": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.npy_tanh"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.pickle5": {
  "data": {
   "shadows": "pickle5"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.runstring": {
  "data": {
   "shadows": "numpy.testing.runstring"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.set_string_function": {
  "data": {
   "shadows": "numpy.core.numeric.set_string_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.strchar": {
  "data": {
   "shadows": "numpy.compat.strchar"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.temppath": {
  "data": {
   "shadows": "numpy.testing.temppath"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.test_array_interface_empty_shape": {
  "data": {
   "lineno": 7080,
   "symbols_in_volume": {
    "DummyArray1": {
     "line number": [
      7099
     ]
    },
    "DummyArray2": {
     "line number": [
      7100
     ]
    },
    "dict": {
     "line number": [
      7083,
      7093
     ]
    },
    "numpy.array": {
     "line number": [
      7082
     ]
    },
    "numpy.asarray": {
     "line number": [
      7099,
      7100
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7102,
      7103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_array_interface_empty_shape.DummyArray1": {
  "data": {
   "lineno": 7086,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7086
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.test_array_interface_empty_shape.DummyArray2": {
  "data": {
   "lineno": 7096,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7096
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.test_array_interface_itemsize": {
  "data": {
   "lineno": 7070,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      7072,
      7075,
      7076
     ]
    },
    "numpy.ones": {
     "line number": [
      7074
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7077
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_equal_override": {
  "data": {
   "lineno": 7908,
   "symbols_in_volume": {
    "my_always_equal_cls": {
     "line number": [
      7927
     ]
    },
    "numpy.array": {
     "line number": [
      7925
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7928,
      7929,
      7930,
      7931
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_equal_override.MyAlwaysEqual": {
  "data": {
   "lineno": 7912,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7912
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.test_equal_override.MyAlwaysEqual.__eq__": {
  "data": {
   "lineno": 7913
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_equal_override.MyAlwaysEqual.__ne__": {
  "data": {
   "lineno": 7916
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_equal_override.MyAlwaysEqualNew": {
  "data": {
   "lineno": 7922
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.test_equal_override.MyAlwaysEqualOld": {
  "data": {
   "lineno": 7919
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.test_flat_element_deletion": {
  "data": {
   "lineno": 7106,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      7114
     ]
    },
    "Exception": {
     "line number": [
      7113
     ]
    },
    "TypeError": {
     "line number": [
      7111
     ]
    },
    "numpy.ones": {
     "line number": [
      7107
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_getfield": {
  "data": {
   "lineno": 8081,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      8093,
      8094,
      8095
     ]
    },
    "numpy.arange": {
     "line number": [
      8082
     ]
    },
    "numpy.core.tests.test_multiarray.pytest": {
     "line number": [
      8093,
      8094,
      8095
     ]
    },
    "numpy.core.tests.test_multiarray.sys": {
     "line number": [
      8083
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      8090,
      8092
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_int_subclass": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.test_int_subclass"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.test_interface_no_shape": {
  "data": {
   "lineno": 7063,
   "symbols_in_volume": {
    "ArrayLike": {
     "line number": [
      7067
     ]
    },
    "numpy.array": {
     "line number": [
      7067
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7067
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_interface_no_shape.ArrayLike": {
  "data": {
   "lineno": 7064,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      7065
     ]
    },
    "object": {
     "line number": [
      7064
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_multiarray.test_matmul_axes": {
  "data": {
   "lineno": 6044,
   "symbols_in_volume": {
    "f": {
     "line number": [
      6052
     ]
    },
    "f.shape": {
     "line number": [
      6053
     ]
    },
    "numpy.arange": {
     "line number": [
      6045,
      6052
     ]
    },
    "numpy.matmul": {
     "line number": [
      6046,
      6048,
      6052
     ]
    },
    "numpy.swapaxes": {
     "line number": [
      6050
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      6051
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_matmul_inplace": {
  "data": {
   "lineno": 6030,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      6036,
      6038,
      6042
     ]
    },
    "__builtin__": {
     "line number": [
      6041
     ]
    },
    "getattr": {
     "line number": [
      6041
     ]
    },
    "globals": {
     "line number": [
      6042
     ]
    },
    "locals": {
     "line number": [
      6042
     ]
    },
    "numpy.core.tests.test_multiarray.operator": {
     "line number": [
      6038
     ]
    },
    "numpy.eye": {
     "line number": [
      6034,
      6035
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      6036,
      6038,
      6042
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_npymath_complex": {
  "data": {
   "lineno": 7934,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      7947
     ]
    },
    "fun": {
     "line number": [
      7948
     ]
    },
    "npfun": {
     "line number": [
      7949
     ]
    },
    "numpy.absolute": {
     "line number": [
      7939
     ]
    },
    "numpy.angle": {
     "line number": [
      7940
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      7942
     ]
    },
    "numpy.complex128": {
     "line number": [
      7942
     ]
    },
    "numpy.complex64": {
     "line number": [
      7942
     ]
    },
    "numpy.core._multiarray_tests.npy_cabs": {
     "line number": [
      7939
     ]
    },
    "numpy.core._multiarray_tests.npy_carg": {
     "line number": [
      7940
     ]
    },
    "numpy.core.tests.test_multiarray.itertools": {
     "line number": [
      7945
     ]
    },
    "numpy.inf": {
     "line number": [
      7941,
      7941
     ]
    },
    "numpy.nan": {
     "line number": [
      7941
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      7950
     ]
    },
    "t": {
     "line number": [
      7946,
      7947
     ]
    },
    "x": {
     "line number": [
      7945,
      7947
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_npymath_real": {
  "data": {
   "lineno": 7953,
   "symbols_in_volume": {
    "fun": {
     "line number": [
      7967,
      7970
     ]
    },
    "npfun": {
     "line number": [
      7967,
      7971
     ]
    },
    "numpy.core._multiarray_tests.npy_cosh": {
     "line number": [
      7959
     ]
    },
    "numpy.core._multiarray_tests.npy_log10": {
     "line number": [
      7958
     ]
    },
    "numpy.core._multiarray_tests.npy_sinh": {
     "line number": [
      7960
     ]
    },
    "numpy.core._multiarray_tests.npy_tan": {
     "line number": [
      7961
     ]
    },
    "numpy.core._multiarray_tests.npy_tanh": {
     "line number": [
      7962
     ]
    },
    "numpy.core.tests.test_multiarray.itertools": {
     "line number": [
      7968
     ]
    },
    "numpy.cosh": {
     "line number": [
      7959
     ]
    },
    "numpy.errstate": {
     "line number": [
      7966
     ]
    },
    "numpy.float32": {
     "line number": [
      7964
     ]
    },
    "numpy.float64": {
     "line number": [
      7964
     ]
    },
    "numpy.inf": {
     "line number": [
      7963,
      7963
     ]
    },
    "numpy.log10": {
     "line number": [
      7958
     ]
    },
    "numpy.longdouble": {
     "line number": [
      7964
     ]
    },
    "numpy.nan": {
     "line number": [
      7963
     ]
    },
    "numpy.sinh": {
     "line number": [
      7960
     ]
    },
    "numpy.tan": {
     "line number": [
      7961
     ]
    },
    "numpy.tanh": {
     "line number": [
      7962
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      7972
     ]
    },
    "t": {
     "line number": [
      7968,
      7969
     ]
    },
    "x": {
     "line number": [
      7968,
      7969
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_orderconverter_with_nonASCII_unicode_ordering": {
  "data": {
   "lineno": 7902,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      7905
     ]
    },
    "numpy.arange": {
     "line number": [
      7904
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7905
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_scalar_element_deletion": {
  "data": {
   "lineno": 7117,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      7119
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      7119
     ]
    },
    "numpy.zeros": {
     "line number": [
      7118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.test_uintalignment_and_alignment": {
  "data": {
   "lineno": 7974,
   "symbols_in_volume": {
    "numpy.core._multiarray_tests.get_struct_alignments": {
     "line number": [
      7996
     ]
    },
    "numpy.dtype": {
     "line number": [
      7987,
      7988,
      7989
     ]
    },
    "numpy.exp": {
     "line number": [
      8004
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      7991,
      7992,
      7993,
      7998,
      7999
     ]
    },
    "numpy.zeros": {
     "line number": [
      7991,
      7992,
      7993,
      8003,
      8007
     ]
    },
    "zip": {
     "line number": [
      7997
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_multiarray.timedelta": {
  "data": {
   "shadows": "datetime.timedelta"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.unicode": {
  "data": {
   "shadows": "numpy.compat.unicode"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_multiarray.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_nditer.HAS_REFCOUNT": {
  "data": {
   "shadows": "numpy.testing.HAS_REFCOUNT"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.TestIterNested": {
  "data": {
   "lineno": 2191,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2191
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_nditer.TestIterNested.test_0d": {
  "data": {
   "lineno": 2339,
   "symbols_in_volume": {
    "list": {
     "line number": [
      2342,
      2346
     ]
    },
    "numpy.arange": {
     "line number": [
      2340
     ]
    },
    "numpy.nested_iters": {
     "line number": [
      2341,
      2345,
      2349
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2343,
      2347,
      2354
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.TestIterNested.test_basic": {
  "data": {
   "lineno": 2193,
   "symbols_in_volume": {
    "list": {
     "line number": [
      2198,
      2202,
      2206
     ]
    },
    "numpy.arange": {
     "line number": [
      2195
     ]
    },
    "numpy.nested_iters": {
     "line number": [
      2197,
      2201,
      2205
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2199,
      2203,
      2207
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.TestIterNested.test_broadcast": {
  "data": {
   "lineno": 2269,
   "symbols_in_volume": {
    "list": {
     "line number": [
      2275,
      2279
     ]
    },
    "numpy.arange": {
     "line number": [
      2271,
      2272
     ]
    },
    "numpy.nested_iters": {
     "line number": [
      2274,
      2278
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2276,
      2280
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.TestIterNested.test_dtype_buffered": {
  "data": {
   "lineno": 2324,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2327
     ]
    },
    "numpy.dtype": {
     "line number": [
      2333
     ]
    },
    "numpy.nested_iters": {
     "line number": [
      2328
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2333,
      2337
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.TestIterNested.test_dtype_copy": {
  "data": {
   "lineno": 2282,
   "symbols_in_volume": {
    "list": {
     "line number": [
      2291
     ]
    },
    "numpy.arange": {
     "line number": [
      2286,
      2296,
      2310
     ]
    },
    "numpy.dtype": {
     "line number": [
      2290,
      2302,
      2315
     ]
    },
    "numpy.nested_iters": {
     "line number": [
      2287,
      2297,
      2311
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2290,
      2292,
      2302,
      2306,
      2307,
      2315,
      2319,
      2322
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.TestIterNested.test_flip_axes": {
  "data": {
   "lineno": 2239,
   "symbols_in_volume": {
    "list": {
     "line number": [
      2245,
      2249,
      2253,
      2258,
      2262,
      2266
     ]
    },
    "numpy.arange": {
     "line number": [
      2241
     ]
    },
    "numpy.nested_iters": {
     "line number": [
      2244,
      2248,
      2252,
      2257,
      2261,
      2265
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2246,
      2250,
      2254,
      2259,
      2263,
      2267
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.TestIterNested.test_iter_nested_iters_dtype_buffered": {
  "data": {
   "lineno": 2356,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2359
     ]
    },
    "numpy.dtype": {
     "line number": [
      2366
     ]
    },
    "numpy.nested_iters": {
     "line number": [
      2360
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2366,
      2370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.TestIterNested.test_reorder": {
  "data": {
   "lineno": 2209,
   "symbols_in_volume": {
    "list": {
     "line number": [
      2215,
      2219,
      2223,
      2228,
      2232,
      2236
     ]
    },
    "numpy.arange": {
     "line number": [
      2211
     ]
    },
    "numpy.nested_iters": {
     "line number": [
      2214,
      2218,
      2222,
      2227,
      2231,
      2235
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2216,
      2220,
      2224,
      2229,
      2233,
      2237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer._multiarray_tests": {
  "data": {
   "shadows": "numpy.core._multiarray_tests"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.all": {
  "data": {
   "shadows": "numpy.all"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.arange": {
  "data": {
   "shadows": "numpy.arange"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.iter_indices": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.iter_iterindices": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.iter_multi_index": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.nditer": {
  "data": {
   "shadows": "numpy.nditer"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_nditer.test_0d_iter": {
  "data": {
   "lineno": 2676,
   "symbols_in_volume": {
    "StopIteration": {
     "line number": [
      2683,
      2687
     ]
    },
    "len": {
     "line number": [
      2692
     ]
    },
    "next": {
     "line number": [
      2680,
      2683,
      2686,
      2687,
      2700
     ]
    },
    "numpy.arange": {
     "line number": [
      2690
     ]
    },
    "numpy.array": {
     "line number": [
      2697
     ]
    },
    "numpy.nditer": {
     "line number": [
      2678,
      2690,
      2698
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2679,
      2680,
      2681,
      2682,
      2686,
      2691,
      2692,
      2701,
      2702,
      2703,
      2704
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2683,
      2687
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_close_equivalent": {
  "data": {
   "lineno": 2819,
   "symbols_in_volume": {
    "add_close": {
     "line number": [
      2840
     ]
    },
    "add_context": {
     "line number": [
      2842
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2841,
      2843
     ]
    },
    "range": {
     "line number": [
      2840,
      2840,
      2841,
      2842,
      2842,
      2843
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_close_equivalent.add_close": {
  "data": {
   "lineno": 2822,
   "symbols_in_volume": {
    "addop": {
     "line number": [
      2827
     ]
    },
    "numpy.add": {
     "line number": [
      2823
     ]
    },
    "numpy.nditer": {
     "line number": [
      2824
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_close_equivalent.add_context": {
  "data": {
   "lineno": 2832,
   "symbols_in_volume": {
    "addop": {
     "line number": [
      2833,
      2838
     ]
    },
    "numpy.add": {
     "line number": [
      2833
     ]
    },
    "numpy.nditer": {
     "line number": [
      2834
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_close_raises": {
  "data": {
   "lineno": 2845,
   "symbols_in_volume": {
    "StopIteration": {
     "line number": [
      2849
     ]
    },
    "ValueError": {
     "line number": [
      2850
     ]
    },
    "getattr": {
     "line number": [
      2850
     ]
    },
    "next": {
     "line number": [
      2847,
      2849
     ]
    },
    "numpy.arange": {
     "line number": [
      2846
     ]
    },
    "numpy.nditer": {
     "line number": [
      2846
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2847
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2849,
      2850
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_allocate_output_buffered_readwrite": {
  "data": {
   "lineno": 1377,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1380
     ]
    },
    "numpy.nditer": {
     "line number": [
      1381
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1388
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_allocate_output_errors": {
  "data": {
   "lineno": 1491,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1496
     ]
    },
    "ValueError": {
     "line number": [
      1499,
      1502,
      1505,
      1511,
      1516,
      1521
     ]
    },
    "numpy.arange": {
     "line number": [
      1495,
      1510
     ]
    },
    "numpy.dtype": {
     "line number": [
      1508,
      1508,
      1513,
      1518,
      1523
     ]
    },
    "numpy.nditer": {
     "line number": [
      1496,
      1499,
      1502,
      1505,
      1511,
      1516,
      1521
     ]
    },
    "numpy.newaxis": {
     "line number": [
      1514
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1496,
      1499,
      1502,
      1505,
      1511,
      1516,
      1521
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_allocate_output_itorder": {
  "data": {
   "lineno": 1390,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1394,
      1401,
      1408
     ]
    },
    "numpy.dtype": {
     "line number": [
      1396,
      1399,
      1403,
      1406,
      1412,
      1415
     ]
    },
    "numpy.nditer": {
     "line number": [
      1395,
      1402,
      1409
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1397,
      1398,
      1399,
      1404,
      1405,
      1406,
      1413,
      1414,
      1415
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_allocate_output_opaxes": {
  "data": {
   "lineno": 1417,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1420
     ]
    },
    "numpy.dtype": {
     "line number": [
      1422,
      1426
     ]
    },
    "numpy.nditer": {
     "line number": [
      1421
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1424,
      1425,
      1426
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_allocate_output_simple": {
  "data": {
   "lineno": 1367,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1371
     ]
    },
    "numpy.dtype": {
     "line number": [
      1373,
      1375
     ]
    },
    "numpy.nditer": {
     "line number": [
      1372
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1374,
      1375
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_allocate_output_subtype": {
  "data": {
   "lineno": 1469,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1476
     ]
    },
    "numpy.array": {
     "line number": [
      1475
     ]
    },
    "numpy.nditer": {
     "line number": [
      1477,
      1484
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1480,
      1488
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1479,
      1481,
      1487,
      1489
     ]
    },
    "type": {
     "line number": [
      1479,
      1479,
      1480,
      1480,
      1487,
      1487,
      1488,
      1488
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_allocate_output_subtype.MyNDArray": {
  "data": {
   "lineno": 1471,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      1471
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_nditer.test_iter_allocate_output_types_byte_order": {
  "data": {
   "lineno": 1447,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1451
     ]
    },
    "numpy.nditer": {
     "line number": [
      1452,
      1456
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1458
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1454,
      1459
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_allocate_output_types_promotion": {
  "data": {
   "lineno": 1428,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1431,
      1431,
      1434,
      1434,
      1437,
      1437,
      1440,
      1440,
      1443,
      1443
     ]
    },
    "numpy.dtype": {
     "line number": [
      1433,
      1436,
      1439,
      1442,
      1445
     ]
    },
    "numpy.nditer": {
     "line number": [
      1431,
      1434,
      1437,
      1440,
      1443
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1433,
      1436,
      1439,
      1442,
      1445
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_allocate_output_types_scalar": {
  "data": {
   "lineno": 1461,
   "symbols_in_volume": {
    "numpy.complex128": {
     "line number": [
      1464
     ]
    },
    "numpy.dtype": {
     "line number": [
      1466
     ]
    },
    "numpy.float32": {
     "line number": [
      1464
     ]
    },
    "numpy.nditer": {
     "line number": [
      1464
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1466,
      1467
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_allocated_array_dtypes": {
  "data": {
   "lineno": 2657,
   "symbols_in_volume": {
    "numpy.nditer": {
     "line number": [
      2660,
      2667
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2664,
      2673
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_array_cast": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      862,
      869,
      877,
      895,
      908
     ]
    },
    "numpy.dtype": {
     "line number": [
      863,
      866,
      872,
      874,
      880,
      882,
      889,
      891,
      899,
      901,
      912,
      913
     ]
    },
    "numpy.nditer": {
     "line number": [
      863,
      870,
      878,
      887,
      896,
      909
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      905
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      865,
      866,
      873,
      874,
      881,
      882,
      885,
      890,
      891,
      892,
      900,
      901,
      902,
      906,
      913,
      916,
      918
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_array_cast_errors": {
  "data": {
   "lineno": 920,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      924,
      927,
      930,
      933,
      937,
      942,
      946,
      950,
      955,
      959
     ]
    },
    "numpy.arange": {
     "line number": [
      924,
      927,
      930,
      933,
      937,
      942,
      946,
      950,
      955,
      959
     ]
    },
    "numpy.dtype": {
     "line number": [
      925,
      929,
      932,
      936,
      940,
      944,
      949,
      953,
      958,
      962
     ]
    },
    "numpy.nditer": {
     "line number": [
      924,
      927,
      930,
      933,
      937,
      942,
      946,
      950,
      955,
      959
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      924,
      927,
      930,
      933,
      937,
      942,
      946,
      950,
      955,
      959
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_assign_mapping": {
  "data": {
   "lineno": 777,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      778
     ]
    },
    "numpy.dtype": {
     "line number": [
      780,
      786
     ]
    },
    "numpy.nditer": {
     "line number": [
      779,
      785
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      784,
      791
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_best_order": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "len": {
     "line number": [
      87,
      88,
      89,
      102
     ]
    },
    "numpy.arange": {
     "line number": [
      85
     ]
    },
    "numpy.nditer": {
     "line number": [
      96,
      99,
      103
     ]
    },
    "numpy.prod": {
     "line number": [
      85
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      97,
      100,
      104
     ]
    },
    "range": {
     "line number": [
      87,
      89
     ]
    },
    "slice": {
     "line number": [
      88,
      91
     ]
    },
    "tuple": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_best_order_c_index_1d": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      272
     ]
    },
    "numpy.core.tests.test_nditer.iter_indices": {
     "line number": [
      275,
      278
     ]
    },
    "numpy.nditer": {
     "line number": [
      274,
      277
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      275,
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_best_order_c_index_2d": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      283
     ]
    },
    "numpy.core.tests.test_nditer.iter_indices": {
     "line number": [
      286,
      290,
      293,
      295,
      297,
      301,
      304,
      307
     ]
    },
    "numpy.nditer": {
     "line number": [
      285,
      288,
      292,
      294,
      296,
      299,
      302,
      305
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      286,
      290,
      293,
      295,
      297,
      301,
      304,
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_best_order_c_index_3d": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      312
     ]
    },
    "numpy.core.tests.test_nditer.iter_indices": {
     "line number": [
      315,
      320,
      324,
      327,
      330,
      335,
      339,
      343
     ]
    },
    "numpy.nditer": {
     "line number": [
      314,
      318,
      323,
      326,
      329,
      333,
      337,
      341
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      315,
      320,
      324,
      327,
      330,
      335,
      339,
      343
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_best_order_f_index_1d": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      349
     ]
    },
    "numpy.core.tests.test_nditer.iter_indices": {
     "line number": [
      352,
      355
     ]
    },
    "numpy.nditer": {
     "line number": [
      351,
      354
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      352,
      355
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_best_order_f_index_2d": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      360
     ]
    },
    "numpy.core.tests.test_nditer.iter_indices": {
     "line number": [
      363,
      367,
      370,
      372,
      374,
      378,
      381,
      384
     ]
    },
    "numpy.nditer": {
     "line number": [
      362,
      365,
      369,
      371,
      373,
      376,
      379,
      382
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      363,
      367,
      370,
      372,
      374,
      378,
      381,
      384
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_best_order_f_index_3d": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      389
     ]
    },
    "numpy.core.tests.test_nditer.iter_indices": {
     "line number": [
      392,
      397,
      401,
      404,
      407,
      412,
      416,
      420
     ]
    },
    "numpy.nditer": {
     "line number": [
      391,
      395,
      400,
      403,
      406,
      410,
      414,
      418
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      392,
      397,
      401,
      404,
      407,
      412,
      416,
      420
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_best_order_multi_index_1d": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      190
     ]
    },
    "numpy.core.tests.test_nditer.iter_multi_index": {
     "line number": [
      193,
      196
     ]
    },
    "numpy.nditer": {
     "line number": [
      192,
      195
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      193,
      196
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_best_order_multi_index_2d": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      201
     ]
    },
    "numpy.core.tests.test_nditer.iter_multi_index": {
     "line number": [
      204,
      207,
      210,
      212,
      214,
      217,
      220,
      223
     ]
    },
    "numpy.nditer": {
     "line number": [
      203,
      206,
      209,
      211,
      213,
      216,
      218,
      221
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      204,
      207,
      210,
      212,
      214,
      217,
      220,
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_best_order_multi_index_3d": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      228
     ]
    },
    "numpy.core.tests.test_nditer.iter_multi_index": {
     "line number": [
      231,
      236,
      241,
      245,
      249,
      255,
      260,
      265
     ]
    },
    "numpy.nditer": {
     "line number": [
      230,
      235,
      240,
      244,
      248,
      253,
      258,
      263
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      231,
      236,
      241,
      245,
      249,
      255,
      260,
      265
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_broadcasting": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      517,
      522,
      527,
      527,
      531,
      531,
      536,
      536,
      542,
      547,
      547,
      551,
      551,
      556,
      556,
      560,
      560,
      564,
      564,
      569,
      569,
      570,
      574,
      574,
      578,
      578
     ]
    },
    "numpy.int32": {
     "line number": [
      517,
      522,
      542
     ]
    },
    "numpy.nditer": {
     "line number": [
      517,
      522,
      527,
      531,
      536,
      542,
      547,
      551,
      556,
      560,
      564,
      569,
      574,
      578
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      518,
      519,
      524,
      525,
      529,
      530,
      533,
      534,
      538,
      539,
      544,
      545,
      549,
      550,
      553,
      554,
      558,
      559,
      562,
      563,
      566,
      567,
      572,
      573,
      576,
      577,
      580,
      581
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_broadcasting_errors": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      646,
      662,
      679
     ]
    },
    "ValueError": {
     "line number": [
      618,
      621,
      625,
      628,
      632,
      635,
      647,
      663,
      680
     ]
    },
    "numpy.arange": {
     "line number": [
      618,
      618,
      622,
      622,
      626,
      626,
      629,
      629,
      633,
      633,
      636,
      636,
      641,
      642,
      643,
      657,
      657
     ]
    },
    "numpy.nditer": {
     "line number": [
      618,
      621,
      625,
      628,
      632,
      635,
      641,
      657,
      676
     ]
    },
    "numpy.newaxis": {
     "line number": [
      660
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      650,
      653,
      666,
      668,
      672,
      683,
      686
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      618,
      621,
      625,
      628,
      632,
      635
     ]
    },
    "numpy.zeros": {
     "line number": [
      676,
      676
     ]
    },
    "str": {
     "line number": [
      648,
      664,
      681
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffered_cast_byteswapped": {
  "data": {
   "lineno": 1731,
   "symbols_in_volume": {
    "numpy.ComplexWarning": {
     "line number": [
      1747
     ]
    },
    "numpy.arange": {
     "line number": [
      1734,
      1744,
      1749,
      1759
     ]
    },
    "numpy.dtype": {
     "line number": [
      1738,
      1753
     ]
    },
    "numpy.nditer": {
     "line number": [
      1735,
      1750
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1744,
      1759
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1746
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffered_cast_byteswapped_complex": {
  "data": {
   "lineno": 1761,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1764,
      1774,
      1776,
      1786,
      1788,
      1798,
      1800,
      1809
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      1788,
      1798
     ]
    },
    "numpy.dtype": {
     "line number": [
      1769,
      1781,
      1793,
      1804
     ]
    },
    "numpy.longdouble": {
     "line number": [
      1800,
      1809
     ]
    },
    "numpy.nditer": {
     "line number": [
      1766,
      1778,
      1790,
      1801
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1774,
      1786,
      1798,
      1809
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffered_cast_simple": {
  "data": {
   "lineno": 1716,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1719,
      1729
     ]
    },
    "numpy.dtype": {
     "line number": [
      1723
     ]
    },
    "numpy.nditer": {
     "line number": [
      1720
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1729
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffered_cast_structured_type": {
  "data": {
   "lineno": 1811,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1867,
      1890
     ]
    },
    "numpy.arange": {
     "line number": [
      1816
     ]
    },
    "numpy.array": {
     "line number": [
      1820,
      1858,
      1866,
      1875,
      1880,
      1881,
      1882,
      1888
     ]
    },
    "numpy.core.tests.test_nditer.sys": {
     "line number": [
      1838,
      1854
     ]
    },
    "numpy.dtype": {
     "line number": [
      1829,
      1851,
      1879
     ]
    },
    "numpy.nditer": {
     "line number": [
      1817,
      1839,
      1859,
      1868,
      1876,
      1891
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      1837,
      1853
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1821,
      1822,
      1823,
      1824,
      1825,
      1826,
      1827,
      1828,
      1829,
      1843,
      1844,
      1845,
      1846,
      1847,
      1848,
      1849,
      1850,
      1851,
      1854,
      1862,
      1879,
      1880
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1867,
      1890
     ]
    },
    "numpy.zeros": {
     "line number": [
      1833
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffered_cast_subarray": {
  "data": {
   "lineno": 1896,
   "symbols_in_volume": {
    "list": {
     "line number": [
      1908
     ]
    },
    "numpy.all": {
     "line number": [
      1909,
      1923
     ]
    },
    "numpy.arange": {
     "line number": [
      1903,
      1915,
      1926,
      1932,
      1943,
      1949,
      1963,
      1977,
      1991,
      2005,
      2020,
      2035,
      2051
     ]
    },
    "numpy.dtype": {
     "line number": [
      1907,
      1920,
      1937,
      1953,
      1967,
      1981,
      1995,
      2009,
      2024,
      2039,
      2055
     ]
    },
    "numpy.nditer": {
     "line number": [
      1904,
      1916,
      1933,
      1950,
      1964,
      1978,
      1992,
      2006,
      2021,
      2036,
      2052
     ]
    },
    "numpy.ones": {
     "line number": [
      1943
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1909,
      1923
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1907,
      1920,
      1926,
      1937,
      1940,
      1943,
      1953,
      1956,
      1967,
      1970,
      1981,
      1984,
      1995,
      1998,
      2009,
      2012,
      2013,
      2024,
      2027,
      2028,
      2039,
      2042,
      2043,
      2044,
      2055,
      2058,
      2059,
      2060
     ]
    },
    "numpy.zeros": {
     "line number": [
      1902,
      1914,
      1931,
      1948,
      1962,
      1976,
      1990,
      2004,
      2019,
      2034,
      2050
     ]
    },
    "range": {
     "line number": [
      1908
     ]
    },
    "zip": {
     "line number": [
      1908
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffered_reduce_reuse": {
  "data": {
   "lineno": 2124,
   "symbols_in_volume": {
    "float": {
     "line number": [
      2132
     ]
    },
    "get_params": {
     "line number": [
      2146
     ]
    },
    "numpy.arange": {
     "line number": [
      2127
     ]
    },
    "numpy.core.tests.test_nditer.pytest": {
     "line number": [
      2124
     ]
    },
    "numpy.int_": {
     "line number": [
      2156,
      2170
     ]
    },
    "numpy.nditer": {
     "line number": [
      2147,
      2161
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2173
     ]
    },
    "range": {
     "line number": [
      2160
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffered_reduce_reuse.get_params": {
  "data": {
   "lineno": 2134,
   "symbols_in_volume": {
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      2141
     ]
    },
    "range": {
     "line number": [
      2135,
      2136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffering": {
  "data": {
   "lineno": 1642,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1646,
      1649,
      1653,
      1656
     ]
    },
    "numpy.concatenate": {
     "line number": [
      1669
     ]
    },
    "numpy.nditer": {
     "line number": [
      1660
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1666
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1669
     ]
    },
    "numpy.zeros": {
     "line number": [
      1651
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffering_badwriteback": {
  "data": {
   "lineno": 2063,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2069,
      2087,
      2092
     ]
    },
    "numpy.arange": {
     "line number": [
      2067,
      2068,
      2080,
      2086,
      2091
     ]
    },
    "numpy.nditer": {
     "line number": [
      2069,
      2075,
      2081,
      2087,
      2092
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2069,
      2087,
      2092
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffering_delayed_alloc": {
  "data": {
   "lineno": 1689,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1699,
      1700,
      1701,
      1705
     ]
    },
    "list": {
     "line number": [
      1714
     ]
    },
    "numpy.arange": {
     "line number": [
      1692,
      1693
     ]
    },
    "numpy.nditer": {
     "line number": [
      1694
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1698,
      1708
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1709,
      1711,
      1713,
      1714
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1699,
      1700,
      1701,
      1705
     ]
    },
    "range": {
     "line number": [
      1714
     ]
    },
    "zip": {
     "line number": [
      1714
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffering_delayed_alloc.assign_iter": {
  "data": {
   "lineno": 1703
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffering_growinner": {
  "data": {
   "lineno": 2115,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2117
     ]
    },
    "numpy.nditer": {
     "line number": [
      2118
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2121
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffering_reduction": {
  "data": {
   "lineno": 2443,
   "symbols_in_volume": {
    "len": {
     "line number": [
      2474
     ]
    },
    "numpy.arange": {
     "line number": [
      2446,
      2460,
      2479,
      2492,
      2493
     ]
    },
    "numpy.array": {
     "line number": [
      2447,
      2461
     ]
    },
    "numpy.dtype": {
     "line number": [
      2452
     ]
    },
    "numpy.int8": {
     "line number": [
      2491,
      2493
     ]
    },
    "numpy.nditer": {
     "line number": [
      2448,
      2462,
      2480,
      2497
     ]
    },
    "numpy.ones": {
     "line number": [
      2491
     ]
    },
    "numpy.sum": {
     "line number": [
      2458,
      2476
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2453
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2452,
      2458,
      2467,
      2468,
      2476,
      2488,
      2504,
      2505
     ]
    },
    "range": {
     "line number": [
      2474
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffering_reduction_reuse_reduce_loops": {
  "data": {
   "lineno": 2507,
   "symbols_in_volume": {
    "numpy.nditer": {
     "line number": [
      2514
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2520,
      2521
     ]
    },
    "numpy.zeros": {
     "line number": [
      2512,
      2513
     ]
    },
    "sum": {
     "line number": [
      2521
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_buffering_string": {
  "data": {
   "lineno": 2097,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      2101,
      2109
     ]
    },
    "numpy.array": {
     "line number": [
      2099,
      2107
     ]
    },
    "numpy.bytes_": {
     "line number": [
      2099
     ]
    },
    "numpy.dtype": {
     "line number": [
      2100,
      2105,
      2108,
      2113
     ]
    },
    "numpy.nditer": {
     "line number": [
      2101,
      2103,
      2109,
      2111
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2100,
      2104,
      2105,
      2108,
      2112,
      2113
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2101,
      2109
     ]
    },
    "numpy.unicode": {
     "line number": [
      2107
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_c_or_f_order": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "len": {
     "line number": [
      167,
      168,
      169,
      182
     ]
    },
    "numpy.arange": {
     "line number": [
      165
     ]
    },
    "numpy.nditer": {
     "line number": [
      176,
      179,
      183
     ]
    },
    "numpy.prod": {
     "line number": [
      165
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      177,
      180,
      184
     ]
    },
    "range": {
     "line number": [
      167,
      169
     ]
    },
    "slice": {
     "line number": [
      168,
      171
     ]
    },
    "tuple": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_c_order": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "len": {
     "line number": [
      113,
      114,
      115,
      128
     ]
    },
    "numpy.arange": {
     "line number": [
      111
     ]
    },
    "numpy.nditer": {
     "line number": [
      122,
      125,
      129
     ]
    },
    "numpy.prod": {
     "line number": [
      111
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      123,
      126,
      130
     ]
    },
    "range": {
     "line number": [
      113,
      115
     ]
    },
    "slice": {
     "line number": [
      114,
      117
     ]
    },
    "tuple": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_common_dtype": {
  "data": {
   "lineno": 1105,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1108,
      1108,
      1114,
      1114,
      1120,
      1120,
      1126,
      1126,
      1132,
      1132,
      1138,
      1138,
      1139,
      1139,
      1150,
      1150,
      1159,
      1159
     ]
    },
    "numpy.dtype": {
     "line number": [
      1112,
      1113,
      1118,
      1119,
      1124,
      1125,
      1130,
      1131,
      1136,
      1137,
      1143,
      1144,
      1145,
      1146,
      1155,
      1156,
      1157,
      1165,
      1166,
      1167
     ]
    },
    "numpy.nditer": {
     "line number": [
      1108,
      1114,
      1120,
      1126,
      1132,
      1138,
      1150,
      1159
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1112,
      1113,
      1118,
      1119,
      1124,
      1125,
      1130,
      1131,
      1136,
      1137,
      1143,
      1144,
      1145,
      1146,
      1147,
      1155,
      1156,
      1157,
      1165,
      1166,
      1167
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_copy": {
  "data": {
   "lineno": 1323,
   "symbols_in_volume": {
    "next": {
     "line number": [
      1350,
      1351
     ]
    },
    "numpy.arange": {
     "line number": [
      1325,
      1361
     ]
    },
    "numpy.nditer": {
     "line number": [
      1328,
      1337,
      1356,
      1362
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1330,
      1334,
      1339,
      1343,
      1347,
      1353,
      1359,
      1365
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_copy_if_overlap": {
  "data": {
   "lineno": 1169,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1174,
      1180,
      1187,
      1198,
      1205,
      1248
     ]
    },
    "numpy.int32": {
     "line number": [
      1207
     ]
    },
    "numpy.int8": {
     "line number": [
      1205
     ]
    },
    "numpy.nditer": {
     "line number": [
      1175,
      1183,
      1190,
      1194,
      1201,
      1208,
      1217,
      1228,
      1240,
      1252
     ]
    },
    "numpy.ones": {
     "line number": [
      1213,
      1224,
      1236,
      1238
     ]
    },
    "numpy.shares_memory": {
     "line number": [
      1184,
      1195,
      1209,
      1220,
      1221
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1177,
      1184,
      1193,
      1195,
      1202,
      1209,
      1220,
      1221,
      1231,
      1232,
      1233,
      1243,
      1244,
      1245,
      1255,
      1256,
      1257
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_dim_coalescing": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      481,
      486,
      499
     ]
    },
    "numpy.nditer": {
     "line number": [
      482,
      487,
      489,
      491,
      493,
      495,
      500,
      502,
      504,
      506,
      508,
      510
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      483,
      488,
      490,
      492,
      494,
      496,
      501,
      503,
      505,
      507,
      509,
      511
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_element_deletion": {
  "data": {
   "lineno": 2647,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      2655
     ]
    },
    "Exception": {
     "line number": [
      2654
     ]
    },
    "TypeError": {
     "line number": [
      2652
     ]
    },
    "numpy.nditer": {
     "line number": [
      2648
     ]
    },
    "numpy.ones": {
     "line number": [
      2648
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_f_order": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "len": {
     "line number": [
      140,
      141,
      142,
      155
     ]
    },
    "numpy.arange": {
     "line number": [
      138
     ]
    },
    "numpy.nditer": {
     "line number": [
      149,
      152,
      156
     ]
    },
    "numpy.prod": {
     "line number": [
      138
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      150,
      153,
      157
     ]
    },
    "range": {
     "line number": [
      140,
      142
     ]
    },
    "slice": {
     "line number": [
      141,
      144
     ]
    },
    "tuple": {
     "line number": [
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_flags_errors": {
  "data": {
   "lineno": 689,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      726,
      727,
      729,
      730
     ]
    },
    "ValueError": {
     "line number": [
      695,
      697,
      699,
      701,
      703,
      705,
      707,
      709,
      712,
      714,
      716,
      719,
      720,
      721,
      722,
      723,
      733,
      734,
      738,
      740,
      755,
      756,
      757,
      758,
      760,
      761,
      762,
      764
     ]
    },
    "numpy.arange": {
     "line number": [
      692,
      737,
      754,
      759
     ]
    },
    "numpy.array": {
     "line number": [
      764
     ]
    },
    "numpy.int32": {
     "line number": [
      729,
      730
     ]
    },
    "numpy.nditer": {
     "line number": [
      695,
      697,
      699,
      701,
      703,
      705,
      707,
      709,
      712,
      714,
      716,
      719,
      720,
      721,
      722,
      723,
      726,
      727,
      729,
      730,
      733,
      734,
      737,
      754,
      759,
      764
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      695,
      697,
      699,
      701,
      703,
      705,
      707,
      709,
      712,
      714,
      716,
      719,
      720,
      721,
      722,
      723,
      726,
      727,
      729,
      730,
      733,
      734,
      738,
      740,
      755,
      756,
      757,
      758,
      760,
      761,
      762,
      764
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_flags_errors.assign_index": {
  "data": {
   "lineno": 746
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_flags_errors.assign_iterindex": {
  "data": {
   "lineno": 749
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_flags_errors.assign_iterrange": {
  "data": {
   "lineno": 752
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_flags_errors.assign_multi_index": {
  "data": {
   "lineno": 743
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_iterindex": {
  "data": {
   "lineno": 1567,
   "symbols_in_volume": {
    "list": {
     "line number": [
      1574,
      1576,
      1579,
      1581,
      1584,
      1586,
      1589,
      1591,
      1594,
      1596,
      1599
     ]
    },
    "numpy.arange": {
     "line number": [
      1571
     ]
    },
    "numpy.core.tests.test_nditer.iter_iterindices": {
     "line number": [
      1574,
      1576,
      1579,
      1581,
      1584,
      1586,
      1589,
      1591,
      1594,
      1596,
      1599
     ]
    },
    "numpy.nditer": {
     "line number": [
      1573,
      1578,
      1583,
      1588,
      1593
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1574,
      1576,
      1579,
      1581,
      1584,
      1586,
      1589,
      1591,
      1594,
      1596,
      1599
     ]
    },
    "range": {
     "line number": [
      1574,
      1576,
      1579,
      1581,
      1584,
      1586,
      1589,
      1591,
      1594,
      1596,
      1599
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_iterrange": {
  "data": {
   "lineno": 1601,
   "symbols_in_volume": {
    "get_array": {
     "line number": [
      1636,
      1640
     ]
    },
    "numpy.arange": {
     "line number": [
      1605
     ]
    },
    "numpy.nditer": {
     "line number": [
      1608,
      1617,
      1632
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1610,
      1611,
      1614,
      1615,
      1619,
      1620,
      1623,
      1624,
      1635,
      1636,
      1639,
      1640
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_iterrange.get_array": {
  "data": {
   "lineno": 1626,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1627
     ]
    },
    "numpy.concatenate": {
     "line number": [
      1629
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_itershape": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      607
     ]
    },
    "numpy.arange": {
     "line number": [
      585
     ]
    },
    "numpy.nditer": {
     "line number": [
      586,
      592,
      598,
      607,
      612
     ]
    },
    "numpy.ones": {
     "line number": [
      612
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      589,
      590,
      595,
      596,
      602,
      603
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      607
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_nbo_align_contig": {
  "data": {
   "lineno": 796,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      800,
      815,
      831,
      846
     ]
    },
    "numpy.dtype": {
     "line number": [
      805
     ]
    },
    "numpy.nditer": {
     "line number": [
      803,
      818,
      834,
      838,
      848,
      852
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      802,
      817,
      832,
      835,
      839,
      849,
      855
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      808,
      809,
      810,
      812,
      821,
      822,
      823,
      826,
      836,
      841,
      843,
      850,
      856
     ]
    },
    "numpy.zeros": {
     "line number": [
      829
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_no_broadcast": {
  "data": {
   "lineno": 2176,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2185,
      2187
     ]
    },
    "numpy.arange": {
     "line number": [
      2178,
      2179,
      2180
     ]
    },
    "numpy.nditer": {
     "line number": [
      2182,
      2185,
      2187
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2185,
      2187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_no_inner_dim_coalescing": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      458,
      462,
      466,
      472
     ]
    },
    "numpy.nditer": {
     "line number": [
      459,
      463,
      467,
      473
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      460,
      461,
      464,
      465,
      468,
      469,
      474,
      475
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_no_inner_full_coalesce": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": {
    "len": {
     "line number": [
      430,
      431,
      432,
      447
     ]
    },
    "numpy.arange": {
     "line number": [
      428
     ]
    },
    "numpy.nditer": {
     "line number": [
      439,
      443,
      448
     ]
    },
    "numpy.prod": {
     "line number": [
      427
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      440,
      441,
      444,
      445,
      450,
      451
     ]
    },
    "range": {
     "line number": [
      430,
      432
     ]
    },
    "slice": {
     "line number": [
      431,
      434
     ]
    },
    "tuple": {
     "line number": [
      435
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_non_writable_attribute_deletion": {
  "data": {
   "lineno": 2630,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      2637
     ]
    },
    "delattr": {
     "line number": [
      2637
     ]
    },
    "numpy.nditer": {
     "line number": [
      2631
     ]
    },
    "numpy.ones": {
     "line number": [
      2631
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2637
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_object_arrays_basic": {
  "data": {
   "lineno": 1021,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1030
     ]
    },
    "numpy.array": {
     "line number": [
      1025,
      1036,
      1045,
      1058
     ]
    },
    "numpy.core.tests.test_nditer.sys": {
     "line number": [
      1027,
      1032,
      1039,
      1048,
      1057
     ]
    },
    "numpy.nditer": {
     "line number": [
      1030,
      1034,
      1041,
      1050
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      1026,
      1031,
      1038,
      1047,
      1056
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1043,
      1057
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1032,
      1036,
      1039,
      1045,
      1048,
      1058
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1030
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_object_arrays_conversions": {
  "data": {
   "lineno": 1060,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1062,
      1068,
      1070,
      1076,
      1081,
      1087,
      1092,
      1103
     ]
    },
    "numpy.core.tests.test_nditer.sys": {
     "line number": [
      1098,
      1102
     ]
    },
    "numpy.nditer": {
     "line number": [
      1063,
      1071,
      1082,
      1093
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      1097,
      1101
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1102
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1068,
      1076,
      1087,
      1103
     ]
    },
    "numpy.zeros": {
     "line number": [
      1079,
      1090
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_op_axes": {
  "data": {
   "lineno": 1259,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      1265,
      1268
     ]
    },
    "numpy.arange": {
     "line number": [
      1263,
      1266,
      1271,
      1272,
      1275,
      1278,
      1284,
      1285,
      1291,
      1292
     ]
    },
    "numpy.nditer": {
     "line number": [
      1264,
      1267,
      1273,
      1276,
      1279,
      1286,
      1293
     ]
    },
    "numpy.newaxis": {
     "line number": [
      1280,
      1280
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1265,
      1268
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1274,
      1277,
      1281,
      1288,
      1295
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_op_axes_errors": {
  "data": {
   "lineno": 1297,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1302,
      1305,
      1307,
      1310,
      1312,
      1316,
      1320
     ]
    },
    "numpy.arange": {
     "line number": [
      1301
     ]
    },
    "numpy.nditer": {
     "line number": [
      1302,
      1305,
      1307,
      1310,
      1312,
      1316,
      1320
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1302,
      1305,
      1307,
      1310,
      1312,
      1316,
      1320
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_reduction": {
  "data": {
   "lineno": 2384,
   "symbols_in_volume": {
    "len": {
     "line number": [
      2416
     ]
    },
    "numpy.arange": {
     "line number": [
      2387,
      2401
     ]
    },
    "numpy.nditer": {
     "line number": [
      2388,
      2402,
      2425,
      2428
     ]
    },
    "numpy.ones": {
     "line number": [
      2424
     ]
    },
    "numpy.sum": {
     "line number": [
      2399,
      2420
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2398,
      2399,
      2409,
      2410,
      2419,
      2420,
      2440,
      2441
     ]
    },
    "range": {
     "line number": [
      2416
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_reduction_error": {
  "data": {
   "lineno": 2372,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2375,
      2380
     ]
    },
    "numpy.arange": {
     "line number": [
      2374,
      2379
     ]
    },
    "numpy.nditer": {
     "line number": [
      2375,
      2380
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2375,
      2380
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_refcount": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      41,
      58
     ]
    },
    "numpy.core.tests.test_nditer.pytest": {
     "line number": [
      36
     ]
    },
    "numpy.core.tests.test_nditer.sys": {
     "line number": [
      43,
      44,
      50,
      51,
      54,
      55,
      60,
      61,
      65,
      66,
      68,
      69,
      71,
      72,
      74,
      75
     ]
    },
    "numpy.dtype": {
     "line number": [
      42,
      59
     ]
    },
    "numpy.nditer": {
     "line number": [
      45,
      62
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      49,
      50,
      51,
      68,
      69
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      54,
      55,
      71,
      72,
      74,
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_remove_axis": {
  "data": {
   "lineno": 1526,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1527
     ]
    },
    "numpy.nditer": {
     "line number": [
      1529,
      1534
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1531,
      1536
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_remove_multi_index_inner_loop": {
  "data": {
   "lineno": 1538,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1555
     ]
    },
    "numpy.arange": {
     "line number": [
      1541,
      1565
     ]
    },
    "numpy.nditer": {
     "line number": [
      1543
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1544,
      1545,
      1546,
      1553,
      1554,
      1556,
      1560,
      1561,
      1563,
      1564,
      1565
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1555
     ]
    },
    "tuple": {
     "line number": [
      1561
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_scalar_cast": {
  "data": {
   "lineno": 964,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      969,
      970,
      971,
      977,
      978,
      979,
      985,
      986,
      987,
      993,
      994,
      995,
      998,
      999
     ]
    },
    "numpy.float32": {
     "line number": [
      968,
      974
     ]
    },
    "numpy.float64": {
     "line number": [
      982,
      990
     ]
    },
    "numpy.nditer": {
     "line number": [
      968,
      974,
      982,
      990,
      998
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      970,
      971,
      972,
      978,
      979,
      980,
      986,
      987,
      988,
      994,
      995,
      996,
      999,
      1000
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_scalar_cast_errors": {
  "data": {
   "lineno": 1002,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1006,
      1008,
      1011,
      1016
     ]
    },
    "numpy.dtype": {
     "line number": [
      1007,
      1009,
      1014,
      1019
     ]
    },
    "numpy.float32": {
     "line number": [
      1006,
      1016
     ]
    },
    "numpy.float64": {
     "line number": [
      1011
     ]
    },
    "numpy.nditer": {
     "line number": [
      1006,
      1008,
      1011,
      1016
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1006,
      1008,
      1011,
      1016
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_slice": {
  "data": {
   "lineno": 766,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      767,
      767,
      767
     ]
    },
    "numpy.nditer": {
     "line number": [
      768
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      771,
      772,
      773,
      775
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_too_large": {
  "data": {
   "lineno": 2707,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2713,
      2716
     ]
    },
    "numpy.iinfo": {
     "line number": [
      2711
     ]
    },
    "numpy.intp": {
     "line number": [
      2711
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      2712
     ]
    },
    "numpy.nditer": {
     "line number": [
      2713,
      2716
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2713,
      2716
     ]
    },
    "numpy.zeros": {
     "line number": [
      2712
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_too_large_with_multiindex": {
  "data": {
   "lineno": 2720,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2740,
      2751
     ]
    },
    "numpy.core._multiarray_tests.test_nditer_too_large": {
     "line number": [
      2741,
      2743,
      2749,
      2752
     ]
    },
    "numpy.empty": {
     "line number": [
      2734
     ]
    },
    "numpy.iinfo": {
     "line number": [
      2726
     ]
    },
    "numpy.intp": {
     "line number": [
      2726
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2740,
      2751
     ]
    },
    "range": {
     "line number": [
      2731,
      2739,
      2746,
      2747
     ]
    },
    "tuple": {
     "line number": [
      2735
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_writable_attribute_deletion": {
  "data": {
   "lineno": 2640,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      2644
     ]
    },
    "delattr": {
     "line number": [
      2644
     ]
    },
    "numpy.nditer": {
     "line number": [
      2641
     ]
    },
    "numpy.ones": {
     "line number": [
      2641
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2644
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_write_buffering": {
  "data": {
   "lineno": 1671,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1675,
      1687
     ]
    },
    "numpy.nditer": {
     "line number": [
      1676
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1687
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_writemasked": {
  "data": {
   "lineno": 2589,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2591
     ]
    },
    "numpy.nditer": {
     "line number": [
      2595,
      2606,
      2618
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2602,
      2613,
      2628
     ]
    },
    "numpy.zeros": {
     "line number": [
      2590
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_iter_writemasked_badinput": {
  "data": {
   "lineno": 2523,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      2577,
      2583
     ]
    },
    "ValueError": {
     "line number": [
      2533,
      2537,
      2541,
      2545,
      2551,
      2555,
      2565
     ]
    },
    "numpy.array": {
     "line number": [
      2526,
      2527,
      2528,
      2529,
      2530
     ]
    },
    "numpy.nditer": {
     "line number": [
      2533,
      2537,
      2541,
      2545,
      2551,
      2555,
      2560,
      2565,
      2571,
      2577,
      2583
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2533,
      2537,
      2541,
      2545,
      2551,
      2555,
      2565,
      2577,
      2583
     ]
    },
    "numpy.zeros": {
     "line number": [
      2524,
      2525
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_warn_noclose": {
  "data": {
   "lineno": 2852,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      2857
     ]
    },
    "len": {
     "line number": [
      2861
     ]
    },
    "numpy.arange": {
     "line number": [
      2854
     ]
    },
    "numpy.core.tests.test_nditer.pytest": {
     "line number": [
      2852
     ]
    },
    "numpy.dtype": {
     "line number": [
      2859
     ]
    },
    "numpy.nditer": {
     "line number": [
      2858
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      2852
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      2856
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_nditer.test_writebacks": {
  "data": {
   "lineno": 2754,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      2817
     ]
    },
    "ValueError": {
     "line number": [
      2770,
      2776,
      2806
     ]
    },
    "getattr": {
     "line number": [
      2776,
      2806
     ]
    },
    "numpy.arange": {
     "line number": [
      2755
     ]
    },
    "numpy.dtype": {
     "line number": [
      2759,
      2765,
      2779,
      2791,
      2800,
      2810
     ]
    },
    "numpy.nditer": {
     "line number": [
      2758,
      2764,
      2778,
      2789,
      2798,
      2808
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2757,
      2783,
      2785
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2762,
      2768,
      2773,
      2774,
      2784,
      2787
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2776,
      2806,
      2817
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_numeric.Decimal": {
  "data": {
   "shadows": "decimal.Decimal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.Fraction": {
  "data": {
   "shadows": "fractions.Fraction"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.HAS_REFCOUNT": {
  "data": {
   "shadows": "numpy.testing.HAS_REFCOUNT"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.NIterError": {
  "data": {
   "lineno": 907,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      907
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.Number": {
  "data": {
   "shadows": "numbers.Number"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.TestAllclose": {
  "data": {
   "lineno": 1777,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1777
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestAllclose.setup": {
  "data": {
   "lineno": 1781,
   "symbols_in_volume": {
    "numpy.seterr": {
     "line number": [
      1782
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestAllclose.teardown": {
  "data": {
   "lineno": 1784,
   "symbols_in_volume": {
    "numpy.seterr": {
     "line number": [
      1785
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestAllclose.test_equalnan": {
  "data": {
   "lineno": 1847,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      1849
     ]
    },
    "numpy.array": {
     "line number": [
      1848
     ]
    },
    "numpy.nan": {
     "line number": [
      1848
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1849
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestAllclose.test_ip_allclose": {
  "data": {
   "lineno": 1793,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1796
     ]
    },
    "numpy.array": {
     "line number": [
      1795
     ]
    },
    "numpy.inf": {
     "line number": [
      1807,
      1807,
      1808,
      1808
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestAllclose.test_ip_not_allclose": {
  "data": {
   "lineno": 1813,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1815
     ]
    },
    "numpy.array": {
     "line number": [
      1829,
      1829
     ]
    },
    "numpy.inf": {
     "line number": [
      1820,
      1820,
      1821,
      1822,
      1822,
      1822,
      1823,
      1823,
      1824,
      1824,
      1829,
      1829
     ]
    },
    "numpy.nan": {
     "line number": [
      1825,
      1825
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestAllclose.test_min_int": {
  "data": {
   "lineno": 1841,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      1845
     ]
    },
    "numpy.array": {
     "line number": [
      1844
     ]
    },
    "numpy.iinfo": {
     "line number": [
      1843
     ]
    },
    "numpy.int_": {
     "line number": [
      1843,
      1844
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1845
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestAllclose.test_no_parameter_modification": {
  "data": {
   "lineno": 1834,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      1837
     ]
    },
    "numpy.array": {
     "line number": [
      1835,
      1836,
      1838,
      1839
     ]
    },
    "numpy.inf": {
     "line number": [
      1835,
      1836,
      1838,
      1839
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1838,
      1839
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestAllclose.test_return_class_is_ndarray": {
  "data": {
   "lineno": 1851,
   "symbols_in_volume": {
    "Foo": {
     "line number": [
      1858
     ]
    },
    "bool": {
     "line number": [
      1859
     ]
    },
    "numpy.allclose": {
     "line number": [
      1859
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1859
     ]
    },
    "type": {
     "line number": [
      1859
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestAllclose.test_return_class_is_ndarray.Foo": {
  "data": {
   "lineno": 1854,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      1854
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestAllclose.test_return_class_is_ndarray.Foo.__new__": {
  "data": {
   "lineno": 1855,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1856
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestAllclose.tst_allclose": {
  "data": {
   "lineno": 1787,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      1788
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1788
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestAllclose.tst_not_allclose": {
  "data": {
   "lineno": 1790,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      1791
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1791
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestArgwhere": {
  "data": {
   "lineno": 2308,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2308
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestArgwhere.test_2D": {
  "data": {
   "lineno": 2309,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2310
     ]
    },
    "numpy.argwhere": {
     "line number": [
      2311
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2311
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestArgwhere.test_list": {
  "data": {
   "lineno": 2317,
   "symbols_in_volume": {
    "numpy.argwhere": {
     "line number": [
      2318
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2318
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestArrayComparisons": {
  "data": {
   "lineno": 1244,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1244
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestArrayComparisons.test_array_equal": {
  "data": {
   "lineno": 1245,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1248,
      1251,
      1254,
      1257,
      1260,
      1264
     ]
    },
    "numpy.array": {
     "line number": [
      1246,
      1246,
      1249,
      1249,
      1252,
      1252,
      1255,
      1255,
      1258,
      1258,
      1261,
      1262
     ]
    },
    "numpy.array_equal": {
     "line number": [
      1246,
      1249,
      1252,
      1255,
      1258,
      1261
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1247,
      1248,
      1250,
      1251,
      1253,
      1254,
      1256,
      1257,
      1259,
      1260,
      1263,
      1264
     ]
    },
    "type": {
     "line number": [
      1248,
      1251,
      1254,
      1257,
      1260,
      1264
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestArrayComparisons.test_array_equiv": {
  "data": {
   "lineno": 1275,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1278,
      1281,
      1284,
      1287,
      1291,
      1294,
      1297,
      1300,
      1303
     ]
    },
    "numpy.array": {
     "line number": [
      1276,
      1276,
      1279,
      1279,
      1282,
      1282,
      1285,
      1285,
      1289,
      1289,
      1292,
      1292,
      1295,
      1295,
      1298,
      1298,
      1301,
      1301
     ]
    },
    "numpy.array_equiv": {
     "line number": [
      1276,
      1279,
      1282,
      1285,
      1289,
      1292,
      1295,
      1298,
      1301
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1277,
      1278,
      1280,
      1281,
      1283,
      1284,
      1286,
      1287,
      1290,
      1291,
      1293,
      1294,
      1296,
      1297,
      1299,
      1300,
      1302,
      1303
     ]
    },
    "type": {
     "line number": [
      1278,
      1281,
      1284,
      1287,
      1291,
      1294,
      1297,
      1300,
      1303
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestArrayComparisons.test_none_compares_elementwise": {
  "data": {
   "lineno": 1266,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1267
     ]
    },
    "numpy.ones": {
     "line number": [
      1271
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1268,
      1269,
      1272,
      1273
     ]
    },
    "object": {
     "line number": [
      1267
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBaseRepr": {
  "data": {
   "lineno": 1222,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1222
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestBaseRepr.test_base3": {
  "data": {
   "lineno": 1223,
   "symbols_in_volume": {
    "numpy.base_repr": {
     "line number": [
      1224
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1224
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBaseRepr.test_base_range": {
  "data": {
   "lineno": 1237,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1238,
      1240
     ]
    },
    "numpy.base_repr": {
     "line number": [
      1239,
      1241
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1238,
      1240
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBaseRepr.test_negative": {
  "data": {
   "lineno": 1232,
   "symbols_in_volume": {
    "numpy.base_repr": {
     "line number": [
      1233,
      1234,
      1235
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1233,
      1234,
      1235
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBaseRepr.test_positive": {
  "data": {
   "lineno": 1226,
   "symbols_in_volume": {
    "numpy.base_repr": {
     "line number": [
      1227,
      1228,
      1229,
      1230
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1227,
      1228,
      1229,
      1230
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBinaryRepr": {
  "data": {
   "lineno": 1185,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1185
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestBinaryRepr.test_neg_width_boundaries": {
  "data": {
   "lineno": 1209,
   "symbols_in_volume": {
    "numpy.binary_repr": {
     "line number": [
      1214,
      1219
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1214,
      1219
     ]
    },
    "range": {
     "line number": [
      1216
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBinaryRepr.test_negative": {
  "data": {
   "lineno": 1196,
   "symbols_in_volume": {
    "numpy.binary_repr": {
     "line number": [
      1197,
      1198,
      1199,
      1201
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1197,
      1198,
      1199,
      1201
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBinaryRepr.test_positive": {
  "data": {
   "lineno": 1189,
   "symbols_in_volume": {
    "numpy.binary_repr": {
     "line number": [
      1190,
      1191,
      1193
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1190,
      1191,
      1193
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBinaryRepr.test_sufficient_width": {
  "data": {
   "lineno": 1204,
   "symbols_in_volume": {
    "numpy.binary_repr": {
     "line number": [
      1205,
      1206,
      1207
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1205,
      1206,
      1207
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBinaryRepr.test_zero": {
  "data": {
   "lineno": 1186,
   "symbols_in_volume": {
    "numpy.binary_repr": {
     "line number": [
      1187
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBoolArray": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": {
    "object": {
     "line number": [
      261
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestBoolArray.setup": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      264,
      265,
      266
     ]
    },
    "numpy.array": {
     "line number": [
      264,
      265,
      266
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBoolArray.test_all_any": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      285,
      288,
      294,
      297
     ]
    },
    "list": {
     "line number": [
      293
     ]
    },
    "numpy.all": {
     "line number": [
      290,
      299
     ]
    },
    "numpy.any": {
     "line number": [
      287,
      296
     ]
    },
    "numpy.array": {
     "line number": [
      285,
      288,
      294,
      297
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      275,
      276,
      277,
      278,
      279,
      280,
      281,
      282,
      287,
      290,
      296,
      299
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      291
     ]
    },
    "range": {
     "line number": [
      284,
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBoolArray.test_logical_and_or_xor": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "numpy.logical_and": {
     "line number": [
      325
     ]
    },
    "numpy.logical_or": {
     "line number": [
      319
     ]
    },
    "numpy.logical_xor": {
     "line number": [
      331
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      315,
      316,
      317,
      318,
      320,
      321,
      322,
      323,
      324,
      326,
      327,
      328,
      329,
      330,
      332,
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBoolArray.test_logical_not_abs": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": {
    "numpy.abs": {
     "line number": [
      303,
      304,
      305,
      306,
      307,
      308,
      311
     ]
    },
    "numpy.logical_not": {
     "line number": [
      309
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      302,
      303,
      304,
      305,
      306,
      307,
      308,
      310,
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBoolCmp": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "object": {
     "line number": [
      348
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestBoolCmp.setup": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      351,
      353
     ]
    },
    "numpy.float32": {
     "line number": [
      350
     ]
    },
    "numpy.float64": {
     "line number": [
      352
     ]
    },
    "numpy.inf": {
     "line number": [
      373,
      374,
      375,
      376,
      388,
      389
     ]
    },
    "numpy.nan": {
     "line number": [
      368,
      369,
      377,
      378,
      390,
      391
     ]
    },
    "numpy.ones": {
     "line number": [
      350,
      351,
      352,
      353
     ]
    },
    "range": {
     "line number": [
      356,
      357,
      358,
      361,
      362,
      363
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBoolCmp.test_double": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": {
    "numpy.int8": {
     "line number": [
      436,
      436,
      437,
      437,
      438,
      438
     ]
    },
    "numpy.isfinite": {
     "line number": [
      442,
      443
     ]
    },
    "numpy.isinf": {
     "line number": [
      444
     ]
    },
    "numpy.isnan": {
     "line number": [
      441
     ]
    },
    "numpy.signbit": {
     "line number": [
      445
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      424,
      425,
      426,
      427,
      428,
      430,
      433,
      434,
      436,
      437,
      438,
      441,
      442,
      443,
      444,
      445
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      431
     ]
    },
    "range": {
     "line number": [
      423
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBoolCmp.test_float": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": {
    "numpy.int8": {
     "line number": [
      410,
      410,
      411,
      411,
      412,
      412
     ]
    },
    "numpy.isfinite": {
     "line number": [
      416,
      417
     ]
    },
    "numpy.isinf": {
     "line number": [
      418
     ]
    },
    "numpy.isnan": {
     "line number": [
      415
     ]
    },
    "numpy.signbit": {
     "line number": [
      419
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      398,
      399,
      400,
      401,
      402,
      404,
      407,
      408,
      410,
      411,
      412,
      415,
      416,
      417,
      418,
      419
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      405
     ]
    },
    "range": {
     "line number": [
      397
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBoolScalar": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "object": {
     "line number": [
      228
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_and": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "numpy.False_": {
     "line number": [
      245
     ]
    },
    "numpy.True_": {
     "line number": [
      246
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      247,
      248,
      249,
      250
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_or": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "numpy.False_": {
     "line number": [
      237
     ]
    },
    "numpy.True_": {
     "line number": [
      238
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      239,
      240,
      241,
      242
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_xor": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "numpy.False_": {
     "line number": [
      253
     ]
    },
    "numpy.True_": {
     "line number": [
      254
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      255,
      256,
      257,
      258
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBoolScalar.test_logical": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "numpy.False_": {
     "line number": [
      230
     ]
    },
    "numpy.True_": {
     "line number": [
      231
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      233,
      234
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBroadcast": {
  "data": {
   "lineno": 2693,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2693
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestBroadcast.test_broadcast_in_args": {
  "data": {
   "lineno": 2694,
   "symbols_in_volume": {
    "numpy.broadcast": {
     "line number": [
      2698,
      2699,
      2699,
      2699,
      2700,
      2700
     ]
    },
    "numpy.empty": {
     "line number": [
      2696,
      2696,
      2696,
      2697
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2707
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2702,
      2703,
      2704,
      2705
     ]
    },
    "zip": {
     "line number": [
      2706
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBroadcast.test_broadcast_single_arg": {
  "data": {
   "lineno": 2709,
   "symbols_in_volume": {
    "numpy.broadcast": {
     "line number": [
      2712
     ]
    },
    "numpy.empty": {
     "line number": [
      2711
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2717
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2713,
      2714,
      2715,
      2716
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestBroadcast.test_number_of_arguments": {
  "data": {
   "lineno": 2719,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2724
     ]
    },
    "numpy.broadcast": {
     "line number": [
      2724,
      2726
     ]
    },
    "numpy.empty": {
     "line number": [
      2720
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2727
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2724
     ]
    },
    "range": {
     "line number": [
      2721
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip": {
  "data": {
   "lineno": 1323,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1323
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestClip._generate_data": {
  "data": {
   "lineno": 1340,
   "symbols_in_volume": {
    "numpy.random.randn": {
     "line number": [
      1341
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip._generate_data_complex": {
  "data": {
   "lineno": 1343,
   "symbols_in_volume": {
    "numpy.random.rand": {
     "line number": [
      1344
     ]
    },
    "numpy.random.randn": {
     "line number": [
      1344
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip._generate_flt_data": {
  "data": {
   "lineno": 1346,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      1347
     ]
    },
    "numpy.random.randn": {
     "line number": [
      1347
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip._generate_int32_data": {
  "data": {
   "lineno": 1366,
   "symbols_in_volume": {
    "numpy.int32": {
     "line number": [
      1367
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1367
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip._generate_int_data": {
  "data": {
   "lineno": 1363,
   "symbols_in_volume": {
    "numpy.int64": {
     "line number": [
      1364
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1364
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip._generate_non_native_data": {
  "data": {
   "lineno": 1357,
   "symbols_in_volume": {
    "numpy.random.randn": {
     "line number": [
      1358
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1360
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip._neg_byteorder": {
  "data": {
   "lineno": 1349,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      1350
     ]
    },
    "numpy.core.tests.test_numeric.sys": {
     "line number": [
      1351
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.clip": {
  "data": {
   "lineno": 1334,
   "symbols_in_volume": {
    "numpy.greater": {
     "line number": [
      1336
     ]
    },
    "numpy.less": {
     "line number": [
      1336
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.fastclip": {
  "data": {
   "lineno": 1328
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.setup": {
  "data": {
   "lineno": 1324
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_array_double": {
  "data": {
   "lineno": 1389,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1396
     ]
    },
    "numpy.zeros": {
     "line number": [
      1392
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_complex": {
  "data": {
   "lineno": 1435,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      1439
     ]
    },
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1444,
      1445
     ]
    },
    "numpy.ones": {
     "line number": [
      1439
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_func_takes_out": {
  "data": {
   "lineno": 1757,
   "symbols_in_volume": {
    "numpy.clip": {
     "line number": [
      1763
     ]
    },
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1765
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1766
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_inplace_array": {
  "data": {
   "lineno": 1737,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1745
     ]
    },
    "numpy.zeros": {
     "line number": [
      1741
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_inplace_simple": {
  "data": {
   "lineno": 1747,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1755
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_nan": {
  "data": {
   "lineno": 1768,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1769
     ]
    },
    "numpy.nan": {
     "line number": [
      1770,
      1771,
      1772,
      1772,
      1773,
      1774
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1770,
      1771,
      1772,
      1773,
      1774
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_non_contig": {
  "data": {
   "lineno": 1447,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1455
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1451,
      1452
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_array_int32": {
  "data": {
   "lineno": 1699,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1708
     ]
    },
    "numpy.float64": {
     "line number": [
      1702,
      1703
     ]
    },
    "numpy.int32": {
     "line number": [
      1704
     ]
    },
    "numpy.zeros": {
     "line number": [
      1702,
      1704
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_array_outint32": {
  "data": {
   "lineno": 1710,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1719
     ]
    },
    "numpy.int32": {
     "line number": [
      1715
     ]
    },
    "numpy.zeros": {
     "line number": [
      1715
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_memory_overlap": {
  "data": {
   "lineno": 1729,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1731
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1735
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple": {
  "data": {
   "lineno": 1666,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1675
     ]
    },
    "numpy.zeros": {
     "line number": [
      1671,
      1672
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple2": {
  "data": {
   "lineno": 1677,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1686
     ]
    },
    "numpy.float64": {
     "line number": [
      1680,
      1681
     ]
    },
    "numpy.int32": {
     "line number": [
      1682
     ]
    },
    "numpy.zeros": {
     "line number": [
      1682
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple_int32": {
  "data": {
   "lineno": 1688,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1697
     ]
    },
    "numpy.int32": {
     "line number": [
      1691,
      1692
     ]
    },
    "numpy.int64": {
     "line number": [
      1693
     ]
    },
    "numpy.zeros": {
     "line number": [
      1693
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_transposed": {
  "data": {
   "lineno": 1721,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1723
     ]
    },
    "numpy.empty_like": {
     "line number": [
      1724
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1727
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_noncontig_inplace": {
  "data": {
   "lineno": 1532,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      1536,
      1537
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1543
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_simple_complex": {
  "data": {
   "lineno": 1417,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1425,
      1433
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_simple_double": {
  "data": {
   "lineno": 1370,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1377
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_simple_inplace_01": {
  "data": {
   "lineno": 1512,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1520
     ]
    },
    "numpy.zeros": {
     "line number": [
      1516
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_simple_inplace_02": {
  "data": {
   "lineno": 1522,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1530
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_simple_int": {
  "data": {
   "lineno": 1379,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1382
     ]
    },
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1387
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_simple_int32_inout": {
  "data": {
   "lineno": 1468,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1477
     ]
    },
    "numpy.float64": {
     "line number": [
      1471,
      1472
     ]
    },
    "numpy.int32": {
     "line number": [
      1473
     ]
    },
    "numpy.zeros": {
     "line number": [
      1473
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_simple_int32_out": {
  "data": {
   "lineno": 1501,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1510
     ]
    },
    "numpy.int32": {
     "line number": [
      1506
     ]
    },
    "numpy.zeros": {
     "line number": [
      1506
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_simple_int64_inout": {
  "data": {
   "lineno": 1490,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1499
     ]
    },
    "numpy.float64": {
     "line number": [
      1493,
      1494
     ]
    },
    "numpy.int32": {
     "line number": [
      1495
     ]
    },
    "numpy.zeros": {
     "line number": [
      1493,
      1495
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_simple_int64_out": {
  "data": {
   "lineno": 1479,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1488
     ]
    },
    "numpy.int32": {
     "line number": [
      1482,
      1483
     ]
    },
    "numpy.int64": {
     "line number": [
      1484
     ]
    },
    "numpy.zeros": {
     "line number": [
      1484
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_simple_nonnative": {
  "data": {
   "lineno": 1398,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      1412
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1406,
      1415
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_simple_out": {
  "data": {
   "lineno": 1457,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1466
     ]
    },
    "numpy.zeros": {
     "line number": [
      1462,
      1463
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_01": {
  "data": {
   "lineno": 1545,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1552
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_02": {
  "data": {
   "lineno": 1554,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1562
     ]
    },
    "numpy.int32": {
     "line number": [
      1557
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_03": {
  "data": {
   "lineno": 1564,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1571
     ]
    },
    "numpy.float64": {
     "line number": [
      1569,
      1569,
      1570,
      1570
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_04": {
  "data": {
   "lineno": 1573,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1580
     ]
    },
    "numpy.float32": {
     "line number": [
      1576,
      1577
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_05": {
  "data": {
   "lineno": 1582,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1589
     ]
    },
    "numpy.zeros": {
     "line number": [
      1587,
      1588
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_06": {
  "data": {
   "lineno": 1591,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1599
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_07": {
  "data": {
   "lineno": 1601,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1610
     ]
    },
    "numpy.ones": {
     "line number": [
      1604
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1607
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_08": {
  "data": {
   "lineno": 1612,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1621
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1618
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_09": {
  "data": {
   "lineno": 1623,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1632
     ]
    },
    "numpy.ones": {
     "line number": [
      1626
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1629
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_10": {
  "data": {
   "lineno": 1634,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1642
     ]
    },
    "numpy.float32": {
     "line number": [
      1637,
      1638,
      1639
     ]
    },
    "numpy.zeros": {
     "line number": [
      1637
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_11": {
  "data": {
   "lineno": 1644,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1654
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestClip.test_type_cast_12": {
  "data": {
   "lineno": 1656,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.assert_array_strict_equal": {
     "line number": [
      1664
     ]
    },
    "numpy.float32": {
     "line number": [
      1659
     ]
    },
    "numpy.int32": {
     "line number": [
      1660,
      1661
     ]
    },
    "numpy.zeros": {
     "line number": [
      1659
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestConvolve": {
  "data": {
   "lineno": 2294,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2294
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestConvolve.test_no_overwrite": {
  "data": {
   "lineno": 2300,
   "symbols_in_volume": {
    "numpy.convolve": {
     "line number": [
      2303
     ]
    },
    "numpy.ones": {
     "line number": [
      2301,
      2302,
      2304,
      2305
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2304,
      2305
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestConvolve.test_object": {
  "data": {
   "lineno": 2295,
   "symbols_in_volume": {
    "numpy.convolve": {
     "line number": [
      2298
     ]
    },
    "numpy.full": {
     "line number": [
      2298
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      2298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCorrelate": {
  "data": {
   "lineno": 2243,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2243
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestCorrelate._setup": {
  "data": {
   "lineno": 2244,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2246
     ]
    },
    "numpy.array": {
     "line number": [
      2245,
      2247,
      2248,
      2249,
      2250,
      2251,
      2252,
      2253
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCorrelate.test_complex": {
  "data": {
   "lineno": 2285,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      2286,
      2287,
      2288
     ]
    },
    "numpy.array": {
     "line number": [
      2286,
      2287,
      2288
     ]
    },
    "numpy.correlate": {
     "line number": [
      2290
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      2291
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCorrelate.test_float": {
  "data": {
   "lineno": 2256,
   "symbols_in_volume": {
    "float": {
     "line number": [
      2257
     ]
    },
    "numpy.correlate": {
     "line number": [
      2258,
      2260,
      2262,
      2264,
      2266,
      2268
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      2259,
      2261,
      2263,
      2265,
      2267,
      2269
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCorrelate.test_no_overwrite": {
  "data": {
   "lineno": 2278,
   "symbols_in_volume": {
    "numpy.correlate": {
     "line number": [
      2281
     ]
    },
    "numpy.ones": {
     "line number": [
      2279,
      2280,
      2282,
      2283
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2282,
      2283
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCorrelate.test_object": {
  "data": {
   "lineno": 2271,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      2272
     ]
    },
    "numpy.correlate": {
     "line number": [
      2273,
      2275
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      2274,
      2276
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCreationFuncs": {
  "data": {
   "lineno": 2051,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2051
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestCreationFuncs.check_function": {
  "data": {
   "lineno": 2065,
   "symbols_in_volume": {
    "func": {
     "line number": [
      2081
     ]
    },
    "getattr": {
     "line number": [
      2085
     ]
    },
    "numpy.core.tests.test_numeric.itertools": {
     "line number": [
      2074
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2085
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2084,
      2092
     ]
    },
    "range": {
     "line number": [
      2067
     ]
    },
    "str": {
     "line number": [
      2089
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCreationFuncs.setup": {
  "data": {
   "lineno": 2054,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.itertools": {
     "line number": [
      2055
     ]
    },
    "numpy.dtype": {
     "line number": [
      2055,
      2059
     ]
    },
    "numpy.sctypes.values": {
     "line number": [
      2055
     ]
    },
    "range": {
     "line number": [
      2060
     ]
    },
    "sorted": {
     "line number": [
      2058
     ]
    },
    "str": {
     "line number": [
      2059
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCreationFuncs.test_empty": {
  "data": {
   "lineno": 2100,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      2101
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCreationFuncs.test_for_reference_leak": {
  "data": {
   "lineno": 2107,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.pytest": {
     "line number": [
      2107
     ]
    },
    "numpy.core.tests.test_numeric.sys": {
     "line number": [
      2111,
      2113,
      2115,
      2117,
      2119
     ]
    },
    "numpy.empty": {
     "line number": [
      2116
     ]
    },
    "numpy.full": {
     "line number": [
      2118
     ]
    },
    "numpy.ones": {
     "line number": [
      2114
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      2107
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2113,
      2115,
      2117,
      2119
     ]
    },
    "numpy.zeros": {
     "line number": [
      2112
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCreationFuncs.test_full": {
  "data": {
   "lineno": 2103,
   "symbols_in_volume": {
    "numpy.full": {
     "line number": [
      2104,
      2105
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCreationFuncs.test_ones": {
  "data": {
   "lineno": 2097,
   "symbols_in_volume": {
    "numpy.zeros": {
     "line number": [
      2098
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCreationFuncs.test_zeros": {
  "data": {
   "lineno": 2094,
   "symbols_in_volume": {
    "numpy.zeros": {
     "line number": [
      2095
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCross": {
  "data": {
   "lineno": 2530,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2530
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestCross.test_2x2": {
  "data": {
   "lineno": 2531,
   "symbols_in_volume": {
    "numpy.cross": {
     "line number": [
      2535,
      2537
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2536,
      2538
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCross.test_2x3": {
  "data": {
   "lineno": 2540,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2543
     ]
    },
    "numpy.cross": {
     "line number": [
      2544,
      2546
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2545,
      2547
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCross.test_3x3": {
  "data": {
   "lineno": 2549,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2552
     ]
    },
    "numpy.cross": {
     "line number": [
      2553,
      2555
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2554,
      2556
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCross.test_broadcasting": {
  "data": {
   "lineno": 2558,
   "symbols_in_volume": {
    "numpy.cross": {
     "line number": [
      2563,
      2564,
      2565,
      2570,
      2571,
      2572,
      2577,
      2578,
      2579,
      2584,
      2585,
      2586
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2563,
      2564,
      2565,
      2570,
      2571,
      2572,
      2577,
      2578,
      2579,
      2584,
      2585,
      2586
     ]
    },
    "numpy.tile": {
     "line number": [
      2560,
      2561,
      2567,
      2568,
      2569,
      2574,
      2575,
      2576,
      2581,
      2582,
      2583
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestCross.test_broadcasting_shapes": {
  "data": {
   "lineno": 2588,
   "symbols_in_volume": {
    "numpy.AxisError": {
     "line number": [
      2595,
      2596,
      2600,
      2601
     ]
    },
    "numpy.cross": {
     "line number": [
      2591,
      2594,
      2595,
      2596,
      2599,
      2600,
      2601,
      2605
     ]
    },
    "numpy.ones": {
     "line number": [
      2589,
      2590,
      2592,
      2593,
      2597,
      2598,
      2603
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2591,
      2594,
      2599,
      2605
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2595,
      2596,
      2600,
      2601
     ]
    },
    "range": {
     "line number": [
      2604
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestFloatExceptions": {
  "data": {
   "lineno": 529,
   "symbols_in_volume": {
    "object": {
     "line number": [
      529
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestFloatExceptions.assert_op_raises_fpe": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": {
    "flop": {
     "line number": [
      547,
      548,
      549,
      550
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestFloatExceptions.assert_raises_fpe": {
  "data": {
   "lineno": 530,
   "symbols_in_volume": {
    "FloatingPointError": {
     "line number": [
      536
     ]
    },
    "flop": {
     "line number": [
      533
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      534,
      537
     ]
    },
    "str": {
     "line number": [
      537
     ]
    },
    "type": {
     "line number": [
      531
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestFloatExceptions.test_floating_exceptions": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": {
    "ftype": {
     "line number": [
      568,
      570,
      571,
      572,
      584,
      586,
      592,
      592,
      594,
      594,
      596,
      596,
      598,
      598,
      600,
      600,
      602,
      602,
      604,
      604
     ]
    },
    "numpy.dtype": {
     "line number": [
      558
     ]
    },
    "numpy.errstate": {
     "line number": [
      554
     ]
    },
    "numpy.finfo": {
     "line number": [
      560,
      569
     ]
    },
    "numpy.inf": {
     "line number": [
      596,
      596,
      600,
      600,
      602,
      602,
      604
     ]
    },
    "numpy.obj2sctype": {
     "line number": [
      557
     ]
    },
    "numpy.power": {
     "line number": [
      592
     ]
    },
    "numpy.typecodes": {
     "line number": [
      556
     ]
    },
    "type": {
     "line number": [
      568
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestFloatExceptions.test_warnings": {
  "data": {
   "lineno": 606,
   "symbols_in_volume": {
    "len": {
     "line number": [
      612,
      615,
      618,
      621
     ]
    },
    "numpy.array": {
     "line number": [
      614,
      614,
      617,
      617,
      620,
      620
     ]
    },
    "numpy.core.tests.test_numeric.warnings": {
     "line number": [
      608,
      609
     ]
    },
    "numpy.divide": {
     "line number": [
      611
     ]
    },
    "numpy.errstate": {
     "line number": [
      610
     ]
    },
    "numpy.inf": {
     "line number": [
      617,
      617
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      613,
      616,
      619,
      622
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      612,
      615,
      618,
      621
     ]
    },
    "str": {
     "line number": [
      613,
      616,
      619,
      622
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestFromiter": {
  "data": {
   "lineno": 911,
   "symbols_in_volume": {
    "object": {
     "line number": [
      911
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestFromiter.load_data": {
  "data": {
   "lineno": 940,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.NIterError": {
     "line number": [
      945
     ]
    },
    "range": {
     "line number": [
      943
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestFromiter.makegen": {
  "data": {
   "lineno": 912,
   "symbols_in_volume": {
    "range": {
     "line number": [
      913
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestFromiter.test_2592": {
  "data": {
   "lineno": 948,
   "symbols_in_volume": {
    "int": {
     "line number": [
      952
     ]
    },
    "numpy.core.tests.test_numeric.NIterError": {
     "line number": [
      951
     ]
    },
    "numpy.fromiter": {
     "line number": [
      951
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      951
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestFromiter.test_2592_edge": {
  "data": {
   "lineno": 954,
   "symbols_in_volume": {
    "int": {
     "line number": [
      959
     ]
    },
    "numpy.core.tests.test_numeric.NIterError": {
     "line number": [
      958
     ]
    },
    "numpy.fromiter": {
     "line number": [
      958
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      958
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestFromiter.test_lengths": {
  "data": {
   "lineno": 924,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      930
     ]
    },
    "int": {
     "line number": [
      926,
      927,
      931
     ]
    },
    "len": {
     "line number": [
      928,
      928,
      929,
      931
     ]
    },
    "list": {
     "line number": [
      925
     ]
    },
    "numpy.array": {
     "line number": [
      925
     ]
    },
    "numpy.fromiter": {
     "line number": [
      926,
      927,
      930
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      928,
      929
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      930
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestFromiter.test_types": {
  "data": {
   "lineno": 916,
   "symbols_in_volume": {
    "float": {
     "line number": [
      919,
      922
     ]
    },
    "numpy.dtype": {
     "line number": [
      920,
      921,
      922
     ]
    },
    "numpy.fromiter": {
     "line number": [
      917,
      918,
      919
     ]
    },
    "numpy.int32": {
     "line number": [
      917,
      920
     ]
    },
    "numpy.int64": {
     "line number": [
      918,
      921
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      920,
      921,
      922
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestFromiter.test_values": {
  "data": {
   "lineno": 933,
   "symbols_in_volume": {
    "int": {
     "line number": [
      935,
      936
     ]
    },
    "list": {
     "line number": [
      934
     ]
    },
    "numpy.alltrue": {
     "line number": [
      937,
      938
     ]
    },
    "numpy.array": {
     "line number": [
      934
     ]
    },
    "numpy.fromiter": {
     "line number": [
      935,
      936
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      937,
      938
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIndex": {
  "data": {
   "lineno": 1168,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1168
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestIndex.test_boolean": {
  "data": {
   "lineno": 1169,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1175
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1170,
      1171
     ]
    },
    "numpy.random.randint": {
     "line number": [
      1172,
      1173
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1175
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIndex.test_boolean_edgecase": {
  "data": {
   "lineno": 1177,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1178,
      1179
     ]
    },
    "numpy.dtype": {
     "line number": [
      1182
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1181,
      1182
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose": {
  "data": {
   "lineno": 1862,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1862
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestIsclose.setup": {
  "data": {
   "lineno": 1866,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1870,
      1897
     ]
    },
    "numpy.array": {
     "line number": [
      1869,
      1892,
      1892
     ]
    },
    "numpy.inf": {
     "line number": [
      1879,
      1879,
      1880,
      1880,
      1881,
      1881,
      1881,
      1881,
      1884,
      1884,
      1885,
      1885,
      1886,
      1886,
      1886,
      1887,
      1887,
      1888,
      1892,
      1892,
      1895,
      1895,
      1899,
      1899,
      1900,
      1900
     ]
    },
    "numpy.nan": {
     "line number": [
      1888,
      1888,
      1896,
      1898,
      1898,
      1898,
      1898,
      1899,
      1900
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.test_equal_nan": {
  "data": {
   "lineno": 1950,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1952
     ]
    },
    "numpy.isclose": {
     "line number": [
      1951,
      1953
     ]
    },
    "numpy.nan": {
     "line number": [
      1951,
      1951,
      1952
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1951,
      1953
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.test_ip_all_isclose": {
  "data": {
   "lineno": 1933
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.test_ip_isclose": {
  "data": {
   "lineno": 1911,
   "symbols_in_volume": {
    "numpy.isclose": {
     "line number": [
      1916
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1916
     ]
    },
    "zip": {
     "line number": [
      1915
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.test_ip_isclose_allclose": {
  "data": {
   "lineno": 1943
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.test_ip_none_isclose": {
  "data": {
   "lineno": 1938
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.test_masked_arrays": {
  "data": {
   "lineno": 1955,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1958
     ]
    },
    "numpy.inf": {
     "line number": [
      1962,
      1963,
      1964
     ]
    },
    "numpy.isclose": {
     "line number": [
      1959,
      1960,
      1963,
      1964,
      1967,
      1971,
      1977
     ]
    },
    "numpy.ma.masked_where": {
     "line number": [
      1958,
      1962,
      1966,
      1976
     ]
    },
    "numpy.nan": {
     "line number": [
      1962,
      1962,
      1966,
      1966,
      1966,
      1967,
      1971,
      1976,
      1976,
      1976
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1959,
      1960,
      1963,
      1964,
      1968,
      1972,
      1978
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1970,
      1974,
      1980
     ]
    },
    "type": {
     "line number": [
      1959,
      1959,
      1960,
      1960,
      1963,
      1963,
      1964,
      1964,
      1968,
      1968,
      1972,
      1972,
      1978,
      1978
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.test_no_parameter_modification": {
  "data": {
   "lineno": 1985,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1986,
      1987,
      1989,
      1990
     ]
    },
    "numpy.inf": {
     "line number": [
      1986,
      1987,
      1989,
      1990
     ]
    },
    "numpy.isclose": {
     "line number": [
      1988
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1989,
      1990
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.test_non_finite_scalar": {
  "data": {
   "lineno": 1992,
   "symbols_in_volume": {
    "numpy.False_": {
     "line number": [
      1995,
      1996
     ]
    },
    "numpy.bool_": {
     "line number": [
      1997
     ]
    },
    "numpy.inf": {
     "line number": [
      1995,
      1995,
      1996,
      1997
     ]
    },
    "numpy.isclose": {
     "line number": [
      1995,
      1996,
      1997
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1995,
      1996,
      1997
     ]
    },
    "type": {
     "line number": [
      1997
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.test_scalar_return": {
  "data": {
   "lineno": 1982,
   "symbols_in_volume": {
    "numpy.isclose": {
     "line number": [
      1983
     ]
    },
    "numpy.isscalar": {
     "line number": [
      1983
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1983
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.tst_all_isclose": {
  "data": {
   "lineno": 1918,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      1919
     ]
    },
    "numpy.isclose": {
     "line number": [
      1919
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1919
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.tst_isclose_allclose": {
  "data": {
   "lineno": 1925,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      1929,
      1931
     ]
    },
    "numpy.isclose": {
     "line number": [
      1929,
      1931
     ]
    },
    "numpy.isscalar": {
     "line number": [
      1928,
      1928
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1929
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1931
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsclose.tst_none_isclose": {
  "data": {
   "lineno": 1921,
   "symbols_in_volume": {
    "numpy.any": {
     "line number": [
      1923
     ]
    },
    "numpy.isclose": {
     "line number": [
      1923
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1923
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestIsscalar": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": {
    "object": {
     "line number": [
      212
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestIsscalar.test_isscalar": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": {
    "fractions.Fraction": {
     "line number": [
      223
     ]
    },
    "numbers.Number": {
     "line number": [
      225
     ]
    },
    "numpy.int16": {
     "line number": [
      215
     ]
    },
    "numpy.isscalar": {
     "line number": [
      214,
      215,
      216,
      217,
      218,
      219,
      223,
      225
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      214,
      215,
      216,
      217,
      218,
      219,
      223,
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestKeepdims": {
  "data": {
   "lineno": 2730,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2730
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestKeepdims.sub_array": {
  "data": {
   "lineno": 2732,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      2732
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestKeepdims.sub_array.sum": {
  "data": {
   "lineno": 2733,
   "symbols_in_volume": {
    "numpy.ndarray.sum": {
     "line number": [
      2734
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestKeepdims.test_raise": {
  "data": {
   "lineno": 2736,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      2739
     ]
    },
    "numpy.arange": {
     "line number": [
      2738
     ]
    },
    "numpy.sum": {
     "line number": [
      2739
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2739
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestLikeFuncs": {
  "data": {
   "lineno": 2122,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2122
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestLikeFuncs.check_like_function": {
  "data": {
   "lineno": 2162,
   "symbols_in_volume": {
    "like_function": {
     "line number": [
      2169,
      2182,
      2192,
      2202,
      2220,
      2223
     ]
    },
    "numpy.array": {
     "line number": [
      2171,
      2172,
      2218
     ]
    },
    "numpy.dtype": {
     "line number": [
      2178,
      2188,
      2198,
      2211
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2184,
      2194,
      2205,
      2207,
      2221,
      2224
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2170,
      2171,
      2173,
      2174,
      2176,
      2178,
      2183,
      2186,
      2188,
      2193,
      2196,
      2198,
      2203,
      2209,
      2211
     ]
    },
    "type": {
     "line number": [
      2221,
      2224
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestLikeFuncs.check_like_function.MyNDArray": {
  "data": {
   "lineno": 2215,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      2215
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestLikeFuncs.compare_array_value": {
  "data": {
   "lineno": 2150,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      2155
     ]
    },
    "numpy.all": {
     "line number": [
      2158,
      2160
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2158,
      2160
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestLikeFuncs.setup": {
  "data": {
   "lineno": 2125,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2131,
      2132,
      2134,
      2135,
      2137,
      2138,
      2140,
      2141,
      2143,
      2144,
      2146,
      2147
     ]
    },
    "numpy.array": {
     "line number": [
      2128,
      2129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestLikeFuncs.test_empty_like": {
  "data": {
   "lineno": 2232,
   "symbols_in_volume": {
    "numpy.empty_like": {
     "line number": [
      2233
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestLikeFuncs.test_filled_like": {
  "data": {
   "lineno": 2235,
   "symbols_in_volume": {
    "numpy.full_like": {
     "line number": [
      2236,
      2237,
      2238,
      2239,
      2240
     ]
    },
    "numpy.inf": {
     "line number": [
      2240
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestLikeFuncs.test_ones_like": {
  "data": {
   "lineno": 2226,
   "symbols_in_volume": {
    "numpy.ones_like": {
     "line number": [
      2227
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestLikeFuncs.test_zeros_like": {
  "data": {
   "lineno": 2229,
   "symbols_in_volume": {
    "numpy.zeros_like": {
     "line number": [
      2230
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestMoveaxis": {
  "data": {
   "lineno": 2456,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2456
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestMoveaxis.test_array_likes": {
  "data": {
   "lineno": 2518,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2522,
      2527
     ]
    },
    "list": {
     "line number": [
      2526
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      2522
     ]
    },
    "numpy.ma.zeros": {
     "line number": [
      2519
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      2520,
      2525
     ]
    },
    "numpy.ndarray": {
     "line number": [
      2527
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2521,
      2522,
      2526,
      2527
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestMoveaxis.test_errors": {
  "data": {
   "lineno": 2501,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2509,
      2511,
      2513,
      2515
     ]
    },
    "numpy.AxisError": {
     "line number": [
      2503,
      2505,
      2507
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      2504,
      2506,
      2508,
      2510,
      2512,
      2514,
      2516
     ]
    },
    "numpy.random.randn": {
     "line number": [
      2502
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      2503,
      2505,
      2507,
      2509,
      2511,
      2513,
      2515
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestMoveaxis.test_move_multiples": {
  "data": {
   "lineno": 2489,
   "symbols_in_volume": {
    "numpy.moveaxis": {
     "line number": [
      2498
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2499
     ]
    },
    "numpy.zeros": {
     "line number": [
      2490
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestMoveaxis.test_move_new_position": {
  "data": {
   "lineno": 2466,
   "symbols_in_volume": {
    "numpy.moveaxis": {
     "line number": [
      2473
     ]
    },
    "numpy.random.randn": {
     "line number": [
      2467
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2474
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestMoveaxis.test_move_to_end": {
  "data": {
   "lineno": 2457,
   "symbols_in_volume": {
    "numpy.moveaxis": {
     "line number": [
      2463
     ]
    },
    "numpy.random.randn": {
     "line number": [
      2458
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2464
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestMoveaxis.test_preserve_order": {
  "data": {
   "lineno": 2476,
   "symbols_in_volume": {
    "numpy.moveaxis": {
     "line number": [
      2486
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2487
     ]
    },
    "numpy.zeros": {
     "line number": [
      2477
     ]
    },
    "range": {
     "line number": [
      2484,
      2484
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "object": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_choose": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "numpy.choose": {
     "line number": [
      61
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_clip": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "numpy.clip": {
     "line number": [
      66
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_compress": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "numpy.compress": {
     "line number": [
      74
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_count_nonzero": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      80
     ]
    },
    "numpy.count_nonzero": {
     "line number": [
      81
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_cumproduct": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      86
     ]
    },
    "numpy.array": {
     "line number": [
      86
     ]
    },
    "numpy.cumproduct": {
     "line number": [
      86
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_diagonal": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "numpy.diagonal": {
     "line number": [
      92
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_mean": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      104,
      106
     ]
    },
    "numpy.all": {
     "line number": [
      100,
      101
     ]
    },
    "numpy.array": {
     "line number": [
      100,
      101
     ]
    },
    "numpy.core.tests.test_numeric.warnings": {
     "line number": [
      103,
      104
     ]
    },
    "numpy.isnan": {
     "line number": [
      105
     ]
    },
    "numpy.mean": {
     "line number": [
      99,
      100,
      101,
      105
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      99,
      100,
      101,
      105,
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_prod": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "numpy.prod": {
     "line number": [
      118
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_ptp": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "numpy.ptp": {
     "line number": [
      110
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_ravel": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "numpy.ravel": {
     "line number": [
      123
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_repeat": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "numpy.repeat": {
     "line number": [
      129
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_reshape": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "numpy.reshape": {
     "line number": [
      135
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_round": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "numpy.around": {
     "line number": [
      140
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_searchsorted": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "numpy.searchsorted": {
     "line number": [
      144
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_size": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "numpy.size": {
     "line number": [
      149,
      150,
      151
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      149,
      150,
      151
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_squeeze": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "numpy.squeeze": {
     "line number": [
      155
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      155
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_std": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      164,
      166
     ]
    },
    "numpy.array": {
     "line number": [
      160,
      161
     ]
    },
    "numpy.core.tests.test_numeric.warnings": {
     "line number": [
      163,
      164
     ]
    },
    "numpy.isnan": {
     "line number": [
      165
     ]
    },
    "numpy.std": {
     "line number": [
      159,
      160,
      161,
      165
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      165,
      166
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      159,
      160,
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_sum": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "numpy.sum": {
     "line number": [
      179
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_swapaxes": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "numpy.swapaxes": {
     "line number": [
      171
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_take": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "numpy.take": {
     "line number": [
      188
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_trace": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      193
     ]
    },
    "numpy.trace": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_transpose": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      198
     ]
    },
    "numpy.transpose": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonarrayArgs.test_var": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      207,
      209
     ]
    },
    "numpy.array": {
     "line number": [
      203,
      204
     ]
    },
    "numpy.core.tests.test_numeric.warnings": {
     "line number": [
      206,
      207
     ]
    },
    "numpy.isnan": {
     "line number": [
      208
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      208,
      209
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      202,
      203,
      204
     ]
    },
    "numpy.var": {
     "line number": [
      202,
      203,
      204,
      208
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero": {
  "data": {
   "lineno": 962,
   "symbols_in_volume": {
    "object": {
     "line number": [
      962
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_array_method": {
  "data": {
   "lineno": 1146,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1149
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1152
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis": {
  "data": {
   "lineno": 1037,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1048,
      1050
     ]
    },
    "ValueError": {
     "line number": [
      1047
     ]
    },
    "numpy.AxisError": {
     "line number": [
      1049
     ]
    },
    "numpy.array": {
     "line number": [
      1039,
      1041,
      1044,
      1051
     ]
    },
    "numpy.count_nonzero": {
     "line number": [
      1042,
      1045,
      1047,
      1048,
      1049,
      1050
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1042,
      1045
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1047,
      1048,
      1049,
      1050
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis_all_dtypes": {
  "data": {
   "lineno": 1053,
   "symbols_in_volume": {
    "assert_equal_w_dt": {
     "line number": [
      1083,
      1087,
      1104,
      1108
     ]
    },
    "numpy.array": {
     "line number": [
      1075,
      1082,
      1086,
      1090,
      1101,
      1103,
      1107,
      1111
     ]
    },
    "numpy.count_nonzero": {
     "line number": [
      1083,
      1087,
      1091,
      1093,
      1095,
      1104,
      1108,
      1112,
      1114,
      1116
     ]
    },
    "numpy.dtype": {
     "line number": [
      1064
     ]
    },
    "numpy.intp": {
     "line number": [
      1082,
      1086,
      1103,
      1107
     ]
    },
    "numpy.ones": {
     "line number": [
      1069
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1091,
      1093,
      1095,
      1112,
      1114,
      1116
     ]
    },
    "numpy.typecodes": {
     "line number": [
      1063
     ]
    },
    "numpy.void": {
     "line number": [
      1101
     ]
    },
    "numpy.zeros": {
     "line number": [
      1068
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis_all_dtypes.assert_equal_w_dt": {
  "data": {
   "lineno": 1059,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      1060,
      1061
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis_consistent": {
  "data": {
   "lineno": 1119,
   "symbols_in_volume": {
    "itertools.combinations": {
     "line number": [
      1135
     ]
    },
    "itertools.permutations": {
     "line number": [
      1136
     ]
    },
    "len": {
     "line number": [
      1134
     ]
    },
    "numpy.count_nonzero": {
     "line number": [
      1138,
      1139
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      1130
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1137
     ]
    },
    "object": {
     "line number": [
      1132
     ]
    },
    "range": {
     "line number": [
      1134
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_countnonzero_axis_empty": {
  "data": {
   "lineno": 1142,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1144
     ]
    },
    "numpy.array": {
     "line number": [
      1143
     ]
    },
    "numpy.count_nonzero": {
     "line number": [
      1144
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1144
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_invalid_object": {
  "data": {
   "lineno": 1154,
   "symbols_in_volume": {
    "BoolErrors": {
     "line number": [
      1165
     ]
    },
    "ValueError": {
     "line number": [
      1157,
      1165
     ]
    },
    "numpy.array": {
     "line number": [
      1156,
      1156,
      1165
     ]
    },
    "numpy.nonzero": {
     "line number": [
      1157,
      1165
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1157,
      1165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_invalid_object.BoolErrors": {
  "data": {
   "lineno": 1159
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_invalid_object.BoolErrors.__bool__": {
  "data": {
   "lineno": 1160,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_invalid_object.BoolErrors.__nonzero__": {
  "data": {
   "lineno": 1162,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1163
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_onedim": {
  "data": {
   "lineno": 975,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      976,
      981
     ]
    },
    "numpy.count_nonzero": {
     "line number": [
      977,
      978,
      983,
      984
     ]
    },
    "numpy.nonzero": {
     "line number": [
      979,
      985,
      986
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      977,
      978,
      979,
      983,
      984,
      985,
      986
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_trivial": {
  "data": {
   "lineno": 963,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      964,
      965,
      966,
      968,
      969,
      970,
      971,
      972,
      973
     ]
    },
    "numpy.count_nonzero": {
     "line number": [
      964,
      965,
      968,
      969,
      971,
      972
     ]
    },
    "numpy.nonzero": {
     "line number": [
      966,
      970,
      973
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      964,
      965,
      966,
      968,
      969,
      970,
      971,
      972,
      973
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_twodim": {
  "data": {
   "lineno": 988,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      989,
      997
     ]
    },
    "numpy.count_nonzero": {
     "line number": [
      990,
      994,
      1000,
      1001,
      1006,
      1007
     ]
    },
    "numpy.eye": {
     "line number": [
      993
     ]
    },
    "numpy.nonzero": {
     "line number": [
      991,
      995,
      1002,
      1003,
      1008,
      1009
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1005
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      990,
      991,
      994,
      995,
      1000,
      1001,
      1002,
      1003,
      1006,
      1007,
      1008,
      1009
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_return_type": {
  "data": {
   "lineno": 1024,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1031
     ]
    },
    "numpy.ndarray": {
     "line number": [
      1028,
      1034
     ]
    },
    "numpy.nonzero": {
     "line number": [
      1032
     ]
    },
    "numpy.prod": {
     "line number": [
      1031
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1034,
      1035
     ]
    },
    "range": {
     "line number": [
      1029,
      1030
     ]
    },
    "tuple": {
     "line number": [
      1030
     ]
    },
    "type": {
     "line number": [
      1034
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_return_type.C": {
  "data": {
   "lineno": 1025,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      1025
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestNonzero.test_sparse": {
  "data": {
   "lineno": 1011,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1014,
      1018
     ]
    },
    "numpy.arange": {
     "line number": [
      1016,
      1022
     ]
    },
    "numpy.concatenate": {
     "line number": [
      1022
     ]
    },
    "numpy.nonzero": {
     "line number": [
      1016,
      1021
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1016,
      1021
     ]
    },
    "numpy.zeros": {
     "line number": [
      1014,
      1018
     ]
    },
    "range": {
     "line number": [
      1013
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRequire": {
  "data": {
   "lineno": 2619,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2619
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestRequire.generate_all_false": {
  "data": {
   "lineno": 2626,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      2630,
      2631,
      2632,
      2633,
      2634
     ]
    },
    "numpy.zeros": {
     "line number": [
      2627
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRequire.set_and_check_flag": {
  "data": {
   "lineno": 2637,
   "symbols_in_volume": {
    "numpy.require": {
     "line number": [
      2640,
      2646
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2641,
      2642,
      2648,
      2650
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRequire.test_C_and_F_simul": {
  "data": {
   "lineno": 2672,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2674
     ]
    },
    "numpy.require": {
     "line number": [
      2674
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2674
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRequire.test_ensure_array": {
  "data": {
   "lineno": 2676,
   "symbols_in_volume": {
    "ArraySubclass": {
     "line number": [
      2680
     ]
    },
    "numpy.ndarray": {
     "line number": [
      2682
     ]
    },
    "numpy.require": {
     "line number": [
      2681
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2682
     ]
    },
    "type": {
     "line number": [
      2682
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRequire.test_ensure_array.ArraySubclass": {
  "data": {
   "lineno": 2677,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      2677
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestRequire.test_non_array_input": {
  "data": {
   "lineno": 2664,
   "symbols_in_volume": {
    "numpy.require": {
     "line number": [
      2665
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2666,
      2667,
      2668,
      2669
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2670
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRequire.test_preserve_subtype": {
  "data": {
   "lineno": 2684,
   "symbols_in_volume": {
    "ArraySubclass": {
     "line number": [
      2689
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRequire.test_preserve_subtype.ArraySubclass": {
  "data": {
   "lineno": 2685,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      2685
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestRequire.test_require_each": {
  "data": {
   "lineno": 2652,
   "symbols_in_volume": {
    "id": {
     "line number": [
      2654,
      2656
     ]
    },
    "numpy.core.tests.test_numeric.itertools": {
     "line number": [
      2656
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRequire.test_unknown_requirement": {
  "data": {
   "lineno": 2660,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      2662
     ]
    },
    "numpy.require": {
     "line number": [
      2662
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2662
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestResize": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "object": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestResize.test_copies": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      22,
      23,
      26,
      29
     ]
    },
    "numpy.resize": {
     "line number": [
      24,
      27,
      30
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      24,
      27,
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestResize.test_reshape_from_zero": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      46
     ]
    },
    "numpy.resize": {
     "line number": [
      47
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      48
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      49
     ]
    },
    "numpy.zeros": {
     "line number": [
      46,
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestResize.test_zeroresize": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      33,
      35
     ]
    },
    "numpy.resize": {
     "line number": [
      34,
      38,
      41
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      35
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36,
      39,
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRoll": {
  "data": {
   "lineno": 2336,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2336
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestRoll.test_roll1d": {
  "data": {
   "lineno": 2337,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2338
     ]
    },
    "numpy.array": {
     "line number": [
      2340
     ]
    },
    "numpy.roll": {
     "line number": [
      2339
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2340
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRoll.test_roll2d": {
  "data": {
   "lineno": 2342,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2343
     ]
    },
    "numpy.array": {
     "line number": [
      2345,
      2348,
      2351,
      2355,
      2358,
      2361,
      2364,
      2367,
      2370,
      2373,
      2377,
      2380,
      2384,
      2387
     ]
    },
    "numpy.reshape": {
     "line number": [
      2343
     ]
    },
    "numpy.roll": {
     "line number": [
      2344,
      2347,
      2350,
      2354,
      2357,
      2360,
      2363,
      2366,
      2369,
      2372,
      2376,
      2379,
      2383,
      2386
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2345,
      2348,
      2351,
      2355,
      2358,
      2361,
      2364,
      2367,
      2370,
      2373,
      2377,
      2380,
      2384,
      2387
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRoll.test_roll_empty": {
  "data": {
   "lineno": 2389,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2390,
      2391
     ]
    },
    "numpy.roll": {
     "line number": [
      2391
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2391
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRollaxis": {
  "data": {
   "lineno": 2394,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2394
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestRollaxis.test_exceptions": {
  "data": {
   "lineno": 2411,
   "symbols_in_volume": {
    "numpy.AxisError": {
     "line number": [
      2413,
      2414,
      2415,
      2416
     ]
    },
    "numpy.arange": {
     "line number": [
      2412
     ]
    },
    "numpy.rollaxis": {
     "line number": [
      2413,
      2414,
      2415,
      2416
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2413,
      2414,
      2415,
      2416
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestRollaxis.test_results": {
  "data": {
   "lineno": 2418,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      2426,
      2434,
      2442,
      2451
     ]
    },
    "numpy.arange": {
     "line number": [
      2419
     ]
    },
    "numpy.array": {
     "line number": [
      2425,
      2433,
      2441,
      2450
     ]
    },
    "numpy.indices": {
     "line number": [
      2420
     ]
    },
    "numpy.rollaxis": {
     "line number": [
      2424,
      2432,
      2440,
      2449
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2421,
      2426,
      2427,
      2428,
      2434,
      2435,
      2436,
      2442,
      2443,
      2444,
      2451,
      2452,
      2453
     ]
    },
    "str": {
     "line number": [
      2427
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestSeterr": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": {
    "object": {
     "line number": [
      448
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestSeterr.test_default": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      452
     ]
    },
    "numpy.geterr": {
     "line number": [
      450
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      451
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestSeterr.test_divide_err": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": {
    "FloatingPointError": {
     "line number": [
      474
     ]
    },
    "numpy.array": {
     "line number": [
      475,
      475,
      478,
      478
     ]
    },
    "numpy.core.tests.test_numeric.platform": {
     "line number": [
      471
     ]
    },
    "numpy.core.tests.test_numeric.pytest": {
     "line number": [
      471
     ]
    },
    "numpy.errstate": {
     "line number": [
      473
     ]
    },
    "numpy.seterr": {
     "line number": [
      477
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      474
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestSeterr.test_errobj": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": {
    "len": {
     "line number": [
      489
     ]
    },
    "numpy.array": {
     "line number": [
      488,
      488,
      499,
      499
     ]
    },
    "numpy.core.tests.test_numeric.warnings": {
     "line number": [
      484,
      485
     ]
    },
    "numpy.divide": {
     "line number": [
      504
     ]
    },
    "numpy.errstate": {
     "line number": [
      486,
      497,
      503
     ]
    },
    "numpy.geterrobj": {
     "line number": [
      481
     ]
    },
    "numpy.seterrobj": {
     "line number": [
      487,
      498,
      502,
      507
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      489,
      500,
      505
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestSeterr.test_errobj.log_err": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": {
    "len": {
     "line number": [
      494
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      494,
      495
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestSeterr.test_errobj_noerrmask": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      518,
      524
     ]
    },
    "numpy.core.umath.ERR_DEFAULT": {
     "line number": [
      516,
      522
     ]
    },
    "numpy.core.umath.UFUNC_BUFSIZE_DEFAULT": {
     "line number": [
      515,
      522
     ]
    },
    "numpy.geterrobj": {
     "line number": [
      512
     ]
    },
    "numpy.isnan": {
     "line number": [
      518,
      524
     ]
    },
    "numpy.seterrobj": {
     "line number": [
      515,
      522,
      526
     ]
    },
    "range": {
     "line number": [
      521
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestSeterr.test_set": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": {
    "numpy.errstate": {
     "line number": [
      459
     ]
    },
    "numpy.geterr": {
     "line number": [
      466,
      469
     ]
    },
    "numpy.seterr": {
     "line number": [
      460,
      461,
      463,
      465,
      468
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      462,
      464,
      466,
      467,
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestStdVar": {
  "data": {
   "lineno": 2000,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2000
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestStdVar.setup": {
  "data": {
   "lineno": 2001,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2002
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestStdVar.test_basic": {
  "data": {
   "lineno": 2005,
   "symbols_in_volume": {
    "numpy.std": {
     "line number": [
      2007
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2006,
      2007
     ]
    },
    "numpy.var": {
     "line number": [
      2006
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestStdVar.test_ddof1": {
  "data": {
   "lineno": 2013,
   "symbols_in_volume": {
    "float": {
     "line number": [
      2015,
      2017
     ]
    },
    "len": {
     "line number": [
      2015,
      2015,
      2017,
      2017
     ]
    },
    "numpy.std": {
     "line number": [
      2016
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2014,
      2016
     ]
    },
    "numpy.var": {
     "line number": [
      2014
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestStdVar.test_ddof2": {
  "data": {
   "lineno": 2019,
   "symbols_in_volume": {
    "float": {
     "line number": [
      2021,
      2023
     ]
    },
    "len": {
     "line number": [
      2021,
      2021,
      2023,
      2023
     ]
    },
    "numpy.std": {
     "line number": [
      2022
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2020,
      2022
     ]
    },
    "numpy.var": {
     "line number": [
      2020
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestStdVar.test_out_scalar": {
  "data": {
   "lineno": 2025,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2026
     ]
    },
    "numpy.array": {
     "line number": [
      2027
     ]
    },
    "numpy.mean": {
     "line number": [
      2034
     ]
    },
    "numpy.std": {
     "line number": [
      2028
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2029,
      2032,
      2035
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2030,
      2033,
      2036
     ]
    },
    "numpy.var": {
     "line number": [
      2031
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestStdVar.test_scalars": {
  "data": {
   "lineno": 2009,
   "symbols_in_volume": {
    "numpy.std": {
     "line number": [
      2011
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2010,
      2011
     ]
    },
    "numpy.var": {
     "line number": [
      2010
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestStdVarComplex": {
  "data": {
   "lineno": 2039,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2039
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestStdVarComplex.test_basic": {
  "data": {
   "lineno": 2040,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2041
     ]
    },
    "numpy.std": {
     "line number": [
      2044
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2043,
      2044
     ]
    },
    "numpy.var": {
     "line number": [
      2043
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestStdVarComplex.test_scalars": {
  "data": {
   "lineno": 2046,
   "symbols_in_volume": {
    "numpy.std": {
     "line number": [
      2048
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2047,
      2048
     ]
    },
    "numpy.var": {
     "line number": [
      2047
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestStringFunction": {
  "data": {
   "lineno": 2321,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2321
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestStringFunction.test_set_string_function": {
  "data": {
   "lineno": 2323,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2324
     ]
    },
    "numpy.set_string_function": {
     "line number": [
      2325,
      2327,
      2330,
      2332
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2326,
      2328,
      2331,
      2333
     ]
    },
    "repr": {
     "line number": [
      2326,
      2328
     ]
    },
    "str": {
     "line number": [
      2331,
      2333
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestTensordot": {
  "data": {
   "lineno": 2742,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2742
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestTensordot.test_zero_dimension": {
  "data": {
   "lineno": 2744,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      2749
     ]
    },
    "numpy.einsum": {
     "line number": [
      2750
     ]
    },
    "numpy.ndarray": {
     "line number": [
      2746,
      2747
     ]
    },
    "numpy.tensordot": {
     "line number": [
      2748
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2749,
      2750
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestTypes": {
  "data": {
   "lineno": 625,
   "symbols_in_volume": {
    "object": {
     "line number": [
      625
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numeric.TestTypes.check_promotion_cases": {
  "data": {
   "lineno": 626,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      662,
      663,
      664,
      665,
      666,
      667,
      668,
      669,
      671,
      672,
      673,
      674,
      676,
      678,
      683,
      684,
      685,
      686,
      687,
      691,
      697
     ]
    },
    "numpy.bool_": {
     "line number": [
      628
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      632,
      643,
      644,
      659
     ]
    },
    "numpy.complex128": {
     "line number": [
      632,
      642,
      658,
      677,
      679
     ]
    },
    "numpy.complex64": {
     "line number": [
      632,
      657,
      675,
      678,
      698
     ]
    },
    "numpy.dtype": {
     "line number": [
      635,
      636,
      637,
      638,
      639,
      640,
      641,
      642,
      643,
      644,
      647,
      648,
      649,
      650,
      651,
      652,
      653,
      654,
      655,
      656,
      657,
      658,
      659,
      662,
      663,
      664,
      665,
      666,
      667,
      668,
      670,
      671,
      672,
      673,
      675,
      677,
      679,
      683,
      684,
      685,
      686,
      687,
      691,
      698
     ]
    },
    "numpy.float32": {
     "line number": [
      631,
      655,
      671,
      672
     ]
    },
    "numpy.float64": {
     "line number": [
      631,
      639,
      652,
      653,
      654,
      656,
      670,
      673,
      683,
      686,
      687
     ]
    },
    "numpy.int16": {
     "line number": [
      629,
      635,
      649
     ]
    },
    "numpy.int32": {
     "line number": [
      629,
      636,
      647,
      650,
      664,
      667,
      669
     ]
    },
    "numpy.int64": {
     "line number": [
      629,
      637,
      651,
      684
     ]
    },
    "numpy.int8": {
     "line number": [
      629,
      662,
      666
     ]
    },
    "numpy.longdouble": {
     "line number": [
      631,
      640,
      641
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      635,
      636,
      637,
      638,
      639,
      640,
      641,
      642,
      643,
      644,
      647,
      648,
      649,
      650,
      651,
      652,
      653,
      654,
      655,
      656,
      657,
      658,
      659,
      662,
      663,
      664,
      665,
      666,
      667,
      668,
      669,
      671,
      672,
      673,
      674,
      676,
      678,
      683,
      684,
      685,
      686,
      687,
      691,
      697
     ]
    },
    "numpy.uint16": {
     "line number": [
      630,
      691
     ]
    },
    "numpy.uint32": {
     "line number": [
      630,
      638,
      665,
      668
     ]
    },
    "numpy.uint64": {
     "line number": [
      630,
      685
     ]
    },
    "numpy.uint8": {
     "line number": [
      630,
      648,
      663
     ]
    },
    "promote_func": {
     "line number": [
      635,
      636,
      637,
      638,
      639,
      640,
      641,
      642,
      643,
      644,
      647,
      648,
      649,
      650,
      651,
      652,
      653,
      654,
      655,
      656,
      657,
      658,
      659,
      662,
      663,
      664,
      665,
      666,
      667,
      668,
      669,
      671,
      672,
      673,
      674,
      676,
      678,
      683,
      684,
      685,
      686,
      687,
      691,
      697
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestTypes.test_can_cast": {
  "data": {
   "lineno": 814,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      885,
      886
     ]
    },
    "complex": {
     "line number": [
      816,
      817
     ]
    },
    "float": {
     "line number": [
      817
     ]
    },
    "numpy.can_cast": {
     "line number": [
      815,
      816,
      817,
      819,
      820,
      821,
      823,
      824,
      826,
      827,
      829,
      830,
      832,
      833,
      835,
      837,
      838,
      840,
      841,
      843,
      844,
      845,
      846,
      847,
      848,
      849,
      850,
      852,
      853,
      854,
      855,
      856,
      857,
      858,
      859,
      861,
      862,
      864,
      865,
      867,
      868,
      869,
      870,
      871,
      872,
      873,
      874,
      876,
      877,
      878,
      879,
      880,
      881,
      882,
      883,
      885,
      886,
      889
     ]
    },
    "numpy.float64": {
     "line number": [
      816
     ]
    },
    "numpy.int32": {
     "line number": [
      815,
      889
     ]
    },
    "numpy.int64": {
     "line number": [
      815,
      889
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      815,
      816,
      817,
      819,
      820,
      821,
      823,
      824,
      826,
      827,
      829,
      830,
      832,
      833,
      835,
      837,
      838,
      840,
      841,
      843,
      844,
      845,
      846,
      847,
      848,
      849,
      850,
      852,
      853,
      854,
      855,
      856,
      857,
      858,
      859,
      861,
      862,
      864,
      865,
      867,
      868,
      869,
      870,
      871,
      872,
      873,
      874,
      876,
      877,
      878,
      879,
      880,
      881,
      882,
      883,
      889
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      885,
      886
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestTypes.test_can_cast_values": {
  "data": {
   "lineno": 891,
   "symbols_in_volume": {
    "numpy.can_cast": {
     "line number": [
      895,
      896,
      897,
      898,
      902,
      903
     ]
    },
    "numpy.finfo": {
     "line number": [
      901
     ]
    },
    "numpy.iinfo": {
     "line number": [
      894
     ]
    },
    "numpy.sctypes": {
     "line number": [
      893,
      893,
      900
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      895,
      896,
      897,
      898,
      902,
      903
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestTypes.test_coercion": {
  "data": {
   "lineno": 700,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      708,
      708
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      723,
      724
     ]
    },
    "numpy.complex128": {
     "line number": [
      726
     ]
    },
    "numpy.complex64": {
     "line number": [
      728
     ]
    },
    "numpy.dtype": {
     "line number": [
      710,
      712,
      715,
      717,
      719,
      722,
      724,
      727,
      729
     ]
    },
    "numpy.float16": {
     "line number": [
      718
     ]
    },
    "numpy.float32": {
     "line number": [
      716
     ]
    },
    "numpy.float64": {
     "line number": [
      714
     ]
    },
    "numpy.int8": {
     "line number": [
      708
     ]
    },
    "numpy.longdouble": {
     "line number": [
      711,
      712
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      710,
      712,
      715,
      717,
      719,
      722,
      724,
      727,
      729
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestTypes.test_coercion.res_type": {
  "data": {
   "lineno": 701,
   "symbols_in_volume": {
    "numpy.add": {
     "line number": [
      702
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestTypes.test_promote_types_endian": {
  "data": {
   "lineno": 758,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      760,
      761,
      763,
      764,
      765,
      766,
      768,
      769,
      770,
      771,
      772,
      773,
      775,
      776,
      777,
      778
     ]
    },
    "numpy.promote_types": {
     "line number": [
      760,
      761,
      763,
      764,
      765,
      766,
      768,
      769,
      770,
      771,
      772,
      773,
      775,
      776,
      777,
      778
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      760,
      761,
      763,
      764,
      765,
      766,
      768,
      769,
      770,
      771,
      772,
      773,
      775,
      776,
      777,
      778
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestTypes.test_promote_types_strings": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      781,
      782,
      783,
      784,
      785,
      786,
      787,
      788,
      789,
      790,
      791,
      792,
      793,
      794,
      795,
      796,
      797,
      798,
      799,
      800,
      801,
      802,
      803,
      804,
      805,
      806,
      807,
      808,
      809,
      810,
      811,
      812
     ]
    },
    "numpy.promote_types": {
     "line number": [
      781,
      782,
      783,
      784,
      785,
      786,
      787,
      788,
      789,
      790,
      791,
      792,
      793,
      794,
      795,
      796,
      797,
      798,
      799,
      800,
      801,
      802,
      803,
      804,
      805,
      806,
      807,
      808,
      809,
      810,
      811,
      812
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      781,
      782,
      783,
      784,
      785,
      786,
      787,
      788,
      789,
      790,
      791,
      792,
      793,
      794,
      795,
      796,
      797,
      798,
      799,
      800,
      801,
      802,
      803,
      804,
      805,
      806,
      807,
      808,
      809,
      810,
      811,
      812
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.TestTypes.test_result_type": {
  "data": {
   "lineno": 754,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      756
     ]
    },
    "numpy.result_type": {
     "line number": [
      755,
      756
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      756
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.assert_array_strict_equal": {
  "data": {
   "lineno": 1306,
   "symbols_in_volume": {
    "numpy.core.tests.test_numeric.sys": {
     "line number": [
      1311
     ]
    },
    "numpy.intp": {
     "line number": [
      1310
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1312,
      1314,
      1315,
      1316,
      1317,
      1318,
      1320
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.rand": {
  "data": {
   "shadows": "numpy.random.rand"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.randint": {
  "data": {
   "shadows": "numpy.random.randint"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.randn": {
  "data": {
   "shadows": "numpy.random.randn"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.test_outer_out_param": {
  "data": {
   "lineno": 2608,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      2611
     ]
    },
    "numpy.ndarray": {
     "line number": [
      2612,
      2613
     ]
    },
    "numpy.ones": {
     "line number": [
      2609,
      2610
     ]
    },
    "numpy.outer": {
     "line number": [
      2614,
      2616
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2615,
      2616
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numeric.umath": {
  "data": {
   "shadows": "numpy.core.umath"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numeric.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.sys": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_numerictypes.CreateValues": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "object": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.CreateValues.test_list_of_list_of_tuple": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      169
     ]
    },
    "numpy.core.tests.test_numerictypes.normalize_descr": {
     "line number": [
      170
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      170,
      172,
      174
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.CreateValues.test_list_of_tuple": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      160
     ]
    },
    "numpy.core.tests.test_numerictypes.normalize_descr": {
     "line number": [
      161
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      161,
      163,
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.CreateValues.test_tuple": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      151
     ]
    },
    "numpy.core.tests.test_numerictypes.normalize_descr": {
     "line number": [
      152
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      152,
      154,
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.CreateZeros": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "object": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.CreateZeros.test_zeros0D": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.normalize_descr": {
     "line number": [
      109
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      109,
      110,
      111,
      112
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      114
     ]
    },
    "numpy.void": {
     "line number": [
      112
     ]
    },
    "numpy.zeros": {
     "line number": [
      108,
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.CreateZeros.test_zerosMD": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.normalize_descr": {
     "line number": [
      129
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      129,
      130,
      131,
      132
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      134
     ]
    },
    "numpy.uint8": {
     "line number": [
      132
     ]
    },
    "numpy.zeros": {
     "line number": [
      128,
      134
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.CreateZeros.test_zerosSD": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.normalize_descr": {
     "line number": [
      119
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      119,
      120,
      121,
      122
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      124
     ]
    },
    "numpy.void": {
     "line number": [
      122
     ]
    },
    "numpy.zeros": {
     "line number": [
      118,
      124
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.NbufferT": {
  "data": {
   "lineno": 61
  },
  "type": "constant"
 },
 "numpy.core.tests.test_numerictypes.Ndescr": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "numpy.core.tests.test_numerictypes.PbufferT": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.core.tests.test_numerictypes.Pdescr": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.core.tests.test_numerictypes.ReadValuesNested": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": {
    "object": {
     "line number": [
      238
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.ReadValuesNested.test_access_top_fields": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": {
    "len": {
     "line number": [
      250
     ]
    },
    "numpy.array": {
     "line number": [
      243,
      246,
      247,
      248,
      251,
      253,
      255
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      245,
      250
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      246,
      247,
      248,
      251,
      253,
      255
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested1_acessors": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      260,
      263,
      265,
      267,
      269,
      272,
      276,
      280,
      284
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      262,
      264,
      266,
      268,
      271,
      275,
      279,
      283
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested1_descriptor": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      308
     ]
    },
    "numpy.core.tests.test_numerictypes.sys": {
     "line number": [
      311
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      309,
      310,
      312,
      314,
      315
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested2_acessors": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      290,
      293,
      295,
      298,
      302
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      292,
      294,
      297,
      301
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested2_descriptor": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      319
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      320,
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.ReadValuesPlain": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": {
    "object": {
     "line number": [
      206
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.ReadValuesPlain.test_access_fields": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "len": {
     "line number": [
      217
     ]
    },
    "numpy.array": {
     "line number": [
      210,
      213,
      214,
      215,
      218,
      220,
      222
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      212,
      217
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      213,
      214,
      215,
      218,
      220,
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestBitName": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": {
    "object": {
     "line number": [
      416
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestBitName.test_abstract": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      418
     ]
    },
    "numpy.core.numerictypes.bitname": {
     "line number": [
      418
     ]
    },
    "numpy.floating": {
     "line number": [
      418
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      418
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestCommonType": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "object": {
     "line number": [
      343
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_loses1": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": {
    "numpy.find_common_type": {
     "line number": [
      345
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      346
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_loses2": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "numpy.find_common_type": {
     "line number": [
      349
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      350
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "numpy.find_common_type": {
     "line number": [
      353
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      354
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins2": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "numpy.find_common_type": {
     "line number": [
      357
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      358
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins3": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": {
    "numpy.find_common_type": {
     "line number": [
      361
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      362
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestCreateValuesNestedMultiple": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.CreateValues": {
     "line number": [
      195
     ]
    },
    "numpy.core.tests.test_numerictypes.NbufferT": {
     "line number": [
      199
     ]
    },
    "numpy.core.tests.test_numerictypes.Ndescr": {
     "line number": [
      197
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestCreateValuesNestedSingle": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.CreateValues": {
     "line number": [
      189
     ]
    },
    "numpy.core.tests.test_numerictypes.NbufferT": {
     "line number": [
      193
     ]
    },
    "numpy.core.tests.test_numerictypes.Ndescr": {
     "line number": [
      191
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestCreateValuesPlainMultiple": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.CreateValues": {
     "line number": [
      183
     ]
    },
    "numpy.core.tests.test_numerictypes.PbufferT": {
     "line number": [
      187
     ]
    },
    "numpy.core.tests.test_numerictypes.Pdescr": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestCreateValuesPlainSingle": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.CreateValues": {
     "line number": [
      177
     ]
    },
    "numpy.core.tests.test_numerictypes.PbufferT": {
     "line number": [
      181
     ]
    },
    "numpy.core.tests.test_numerictypes.Pdescr": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestCreateZerosNested": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.CreateZeros": {
     "line number": [
      141
     ]
    },
    "numpy.core.tests.test_numerictypes.Ndescr": {
     "line number": [
      143
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestCreateZerosPlain": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.CreateZeros": {
     "line number": [
      137
     ]
    },
    "numpy.core.tests.test_numerictypes.Pdescr": {
     "line number": [
      139
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestDocStrings": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.pytest": {
     "line number": [
      492
     ]
    },
    "numpy.core.tests.test_numerictypes.sys": {
     "line number": [
      492
     ]
    },
    "object": {
     "line number": [
      494
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestDocStrings.test_platform_dependent_aliases": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": {
    "numpy.int64": {
     "line number": [
      496,
      498
     ]
    },
    "numpy.int_": {
     "line number": [
      496
     ]
    },
    "numpy.int_.__doc__": {
     "line number": [
      497
     ]
    },
    "numpy.longlong": {
     "line number": [
      498
     ]
    },
    "numpy.longlong.__doc__": {
     "line number": [
      499
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      497,
      499
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestEmptyField": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": {
    "object": {
     "line number": [
      336
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestEmptyField.test_assign": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      338
     ]
    },
    "numpy.float32": {
     "line number": [
      338
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      340,
      341
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestIsSubDType": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      381
     ]
    },
    "object": {
     "line number": [
      379
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestIsSubDType.test_both_abstract": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "numpy.floating": {
     "line number": [
      384,
      385
     ]
    },
    "numpy.inexact": {
     "line number": [
      384,
      385
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      384,
      385
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      384,
      385
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestIsSubDType.test_same": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.itertools": {
     "line number": [
      389
     ]
    },
    "numpy.float32": {
     "line number": [
      388
     ]
    },
    "numpy.int32": {
     "line number": [
      388
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      390
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      390
     ]
    },
    "w1": {
     "line number": [
      390
     ]
    },
    "w2": {
     "line number": [
      390
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestIsSubDType.test_sibling_class": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.itertools": {
     "line number": [
      405
     ]
    },
    "numpy.float32": {
     "line number": [
      406,
      407
     ]
    },
    "numpy.float64": {
     "line number": [
      406,
      407
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      406,
      407
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      406,
      407
     ]
    },
    "w1": {
     "line number": [
      405,
      406,
      407
     ]
    },
    "w2": {
     "line number": [
      405,
      406,
      407
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestIsSubDType.test_subclass": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      396
     ]
    },
    "numpy.float64": {
     "line number": [
      397
     ]
    },
    "numpy.floating": {
     "line number": [
      396,
      397
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      396,
      397
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      396,
      397
     ]
    },
    "w": {
     "line number": [
      396,
      397
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestIsSubDType.test_subclass_backwards": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      401
     ]
    },
    "numpy.float64": {
     "line number": [
      402
     ]
    },
    "numpy.floating": {
     "line number": [
      401,
      402
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      401,
      402
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      401,
      402
     ]
    },
    "w": {
     "line number": [
      400,
      401,
      402
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestMaximumSctype": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": {
    "object": {
     "line number": [
      421
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestMaximumSctype.test_complex": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": {
    "numpy.cdouble": {
     "line number": [
      438
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      438
     ]
    },
    "numpy.core.tests.test_numerictypes.pytest": {
     "line number": [
      438
     ]
    },
    "numpy.csingle": {
     "line number": [
      438
     ]
    },
    "numpy.maximum_sctype": {
     "line number": [
      440
     ]
    },
    "numpy.sctypes": {
     "line number": [
      440
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      440
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestMaximumSctype.test_float": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.pytest": {
     "line number": [
      434
     ]
    },
    "numpy.double": {
     "line number": [
      434
     ]
    },
    "numpy.half": {
     "line number": [
      434
     ]
    },
    "numpy.longdouble": {
     "line number": [
      434
     ]
    },
    "numpy.maximum_sctype": {
     "line number": [
      436
     ]
    },
    "numpy.sctypes": {
     "line number": [
      436
     ]
    },
    "numpy.single": {
     "line number": [
      434
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      436
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestMaximumSctype.test_int": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": {
    "numpy.byte": {
     "line number": [
      426
     ]
    },
    "numpy.core.tests.test_numerictypes.pytest": {
     "line number": [
      426
     ]
    },
    "numpy.int_": {
     "line number": [
      426
     ]
    },
    "numpy.intc": {
     "line number": [
      426
     ]
    },
    "numpy.longlong": {
     "line number": [
      426
     ]
    },
    "numpy.maximum_sctype": {
     "line number": [
      428
     ]
    },
    "numpy.sctypes": {
     "line number": [
      428
     ]
    },
    "numpy.short": {
     "line number": [
      426
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestMaximumSctype.test_other": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      442
     ]
    },
    "numpy.bytes_": {
     "line number": [
      442
     ]
    },
    "numpy.core.tests.test_numerictypes.pytest": {
     "line number": [
      442
     ]
    },
    "numpy.maximum_sctype": {
     "line number": [
      444
     ]
    },
    "numpy.object_": {
     "line number": [
      442
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      444
     ]
    },
    "numpy.unicode_": {
     "line number": [
      442
     ]
    },
    "numpy.void": {
     "line number": [
      442
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestMaximumSctype.test_uint": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.pytest": {
     "line number": [
      430
     ]
    },
    "numpy.maximum_sctype": {
     "line number": [
      432
     ]
    },
    "numpy.sctypes": {
     "line number": [
      432
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      432
     ]
    },
    "numpy.ubyte": {
     "line number": [
      430
     ]
    },
    "numpy.uint": {
     "line number": [
      430
     ]
    },
    "numpy.uintc": {
     "line number": [
      430
     ]
    },
    "numpy.ulonglong": {
     "line number": [
      430
     ]
    },
    "numpy.ushort": {
     "line number": [
      430
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestMultipleFields": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "object": {
     "line number": [
      364
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestMultipleFields._bad_call": {
  "data": {
   "lineno": 368
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestMultipleFields.setup": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      366
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestMultipleFields.test_no_tuple": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      372
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      372
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestMultipleFields.test_return": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      376
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.TestReadValuesNestedMultiple": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.NbufferT": {
     "line number": [
      334
     ]
    },
    "numpy.core.tests.test_numerictypes.Ndescr": {
     "line number": [
      332
     ]
    },
    "numpy.core.tests.test_numerictypes.ReadValuesNested": {
     "line number": [
      330
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestReadValuesNestedSingle": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.NbufferT": {
     "line number": [
      328
     ]
    },
    "numpy.core.tests.test_numerictypes.Ndescr": {
     "line number": [
      326
     ]
    },
    "numpy.core.tests.test_numerictypes.ReadValuesNested": {
     "line number": [
      324
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestReadValuesPlainMultiple": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.PbufferT": {
     "line number": [
      236
     ]
    },
    "numpy.core.tests.test_numerictypes.Pdescr": {
     "line number": [
      234
     ]
    },
    "numpy.core.tests.test_numerictypes.ReadValuesPlain": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestReadValuesPlainSingle": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": {
    "numpy.core.tests.test_numerictypes.PbufferT": {
     "line number": [
      230
     ]
    },
    "numpy.core.tests.test_numerictypes.Pdescr": {
     "line number": [
      228
     ]
    },
    "numpy.core.tests.test_numerictypes.ReadValuesPlain": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestSctypeDict": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": {
    "object": {
     "line number": [
      410
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.TestSctypeDict.test_longdouble": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": {
    "numpy.clongdouble": {
     "line number": [
      413
     ]
    },
    "numpy.longdouble": {
     "line number": [
      412
     ]
    },
    "numpy.sctypeDict": {
     "line number": [
      412,
      413
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      412,
      413
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.Test_sctype2char": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": {
    "object": {
     "line number": [
      447
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_numerictypes.Test_sctype2char.test_abstract_type": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      471
     ]
    },
    "numpy.floating": {
     "line number": [
      471
     ]
    },
    "numpy.sctype2char": {
     "line number": [
      471
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      471
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.Test_sctype2char.test_array_instance": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      468
     ]
    },
    "numpy.sctype2char": {
     "line number": [
      468
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      468
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.Test_sctype2char.test_non_type": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      474
     ]
    },
    "numpy.sctype2char": {
     "line number": [
      474
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      474
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.Test_sctype2char.test_other_type": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": {
    "float": {
     "line number": [
      458
     ]
    },
    "list": {
     "line number": [
      459
     ]
    },
    "numpy.ndarray": {
     "line number": [
      460
     ]
    },
    "numpy.sctype2char": {
     "line number": [
      458,
      459,
      460
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      458,
      459,
      460
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.Test_sctype2char.test_scalar_type": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "numpy.bytes_": {
     "line number": [
      455
     ]
    },
    "numpy.double": {
     "line number": [
      452
     ]
    },
    "numpy.int_": {
     "line number": [
      453
     ]
    },
    "numpy.sctype2char": {
     "line number": [
      452,
      453,
      454,
      455
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      452,
      453,
      454,
      455
     ]
    },
    "numpy.unicode_": {
     "line number": [
      454
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.Test_sctype2char.test_third_party_scalar_type": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      464,
      465
     ]
    },
    "numpy.core._rational_tests.rational": {
     "line number": [
      464,
      465
     ]
    },
    "numpy.sctype2char": {
     "line number": [
      464,
      465
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      464,
      465
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes.byteorder": {
  "data": {
   "lineno": 70
  },
  "type": "constant"
 },
 "numpy.core.tests.test_numerictypes.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes.normalize_descr": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      94
     ]
    },
    "isinstance": {
     "line number": [
      78,
      90
     ]
    },
    "len": {
     "line number": [
      85
     ]
    },
    "list": {
     "line number": [
      90
     ]
    },
    "numpy.core.tests.test_numerictypes.byteorder": {
     "line number": [
      84
     ]
    },
    "numpy.prod": {
     "line number": [
      85
     ]
    },
    "str": {
     "line number": [
      78
     ]
    },
    "type": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_numerictypes.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes.rational": {
  "data": {
   "shadows": "numpy.core._rational_tests.rational"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_numerictypes.test_issctype": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": {
    "list": {
     "line number": [
      478
     ]
    },
    "numpy.core.tests.test_numerictypes.pytest": {
     "line number": [
      476
     ]
    },
    "numpy.dtype": {
     "line number": [
      481,
      482,
      483
     ]
    },
    "numpy.float64": {
     "line number": [
      481
     ]
    },
    "numpy.int16": {
     "line number": [
      482
     ]
    },
    "numpy.int32": {
     "line number": [
      477
     ]
    },
    "numpy.int8": {
     "line number": [
      483
     ]
    },
    "numpy.issctype": {
     "line number": [
      488
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      489
     ]
    },
    "str": {
     "line number": [
      480
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.overrides.ENABLE_ARRAY_FUNCTION": {
     "line number": [
      17
     ]
    },
    "numpy.core.tests.test_overrides.pytest": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_overrides.ENABLE_ARRAY_FUNCTION": {
  "data": {
   "shadows": "numpy.core.overrides.ENABLE_ARRAY_FUNCTION"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionDispatch": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides.requires_array_function": {
     "line number": [
      209
     ]
    },
    "object": {
     "line number": [
      210
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_interface": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "MyArray": {
     "line number": [
      229,
      233
     ]
    },
    "numpy.core.tests.test_overrides.dispatched_one_arg": {
     "line number": [
      230,
      232
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      231,
      232,
      235
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      233,
      236
     ]
    },
    "set": {
     "line number": [
      233
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_interface.MyArray": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "object": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_interface.MyArray.__array_function__": {
  "data": {
   "lineno": 226
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_name_and_docstring": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides.dispatched_one_arg": {
     "line number": [
      219,
      221
     ]
    },
    "numpy.core.tests.test_overrides.sys": {
     "line number": [
      220
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      219,
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_not_implemented": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": {
    "MyArray": {
     "line number": [
      244
     ]
    },
    "TypeError": {
     "line number": [
      245
     ]
    },
    "numpy.core.tests.test_overrides.dispatched_one_arg": {
     "line number": [
      246
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_not_implemented.MyArray": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "object": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_not_implemented.MyArray.__array_function__": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      242
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_pickle": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": {
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      213
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      215
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      214
     ]
    },
    "numpy.core.tests.test_overrides.dispatched_one_arg": {
     "line number": [
      215,
      216
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      216
     ]
    },
    "range": {
     "line number": [
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionImplementation": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides.requires_array_function": {
     "line number": [
      302
     ]
    },
    "object": {
     "line number": [
      303
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionImplementation.test_not_implemented": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": {
    "MyArray": {
     "line number": [
      341,
      353
     ]
    },
    "TypeError": {
     "line number": [
      352
     ]
    },
    "func": {
     "line number": [
      348,
      353
     ]
    },
    "func.__module__": {
     "line number": [
      349
     ]
    },
    "implements": {
     "line number": [
      341
     ]
    },
    "numpy.array": {
     "line number": [
      347
     ]
    },
    "numpy.core.tests.test_overrides._new_duck_type_and_implements": {
     "line number": [
      341
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      348
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      349
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      351
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionImplementation.test_not_implemented.func": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      343
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionImplementation.test_one_arg": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": {
    "MyArray": {
     "line number": [
      306,
      313
     ]
    },
    "numpy.core.tests.test_overrides._new_duck_type_and_implements": {
     "line number": [
      306
     ]
    },
    "numpy.core.tests.test_overrides.dispatched_one_arg": {
     "line number": [
      312,
      313
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      312,
      313
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionImplementation.test_one_arg._": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": {
    "implements": {
     "line number": [
      308
     ]
    },
    "numpy.core.tests.test_overrides.dispatched_one_arg": {
     "line number": [
      308
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionImplementation.test_optional_args": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "MyArray": {
     "line number": [
      316,
      330,
      332,
      335,
      338
     ]
    },
    "TypeError": {
     "line number": [
      331,
      337
     ]
    },
    "func_with_option": {
     "line number": [
      328,
      329,
      330,
      332,
      338
     ]
    },
    "implements": {
     "line number": [
      316
     ]
    },
    "my_array_func_with_option": {
     "line number": [
      335
     ]
    },
    "numpy.core.tests.test_overrides._new_duck_type_and_implements": {
     "line number": [
      316
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      328,
      329,
      330,
      336
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      331,
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionImplementation.test_optional_args.func_with_option": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      318
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestArrayFunctionImplementation.test_optional_args.my_array_func_with_option": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": {
    "implements": {
     "line number": [
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides.requires_array_function": {
     "line number": [
      38
     ]
    },
    "object": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_many_duck_arrays": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "A": {
     "line number": [
      123
     ]
    },
    "B": {
     "line number": [
      124
     ]
    },
    "C": {
     "line number": [
      125
     ]
    },
    "D": {
     "line number": [
      126
     ]
    },
    "numpy.core.overrides._get_implementing_args": {
     "line number": [
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_many_duck_arrays.A": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides._return_not_implemented": {
     "line number": [
      112
     ]
    },
    "object": {
     "line number": [
      111
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_many_duck_arrays.B": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides._return_not_implemented": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_many_duck_arrays.C": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides._return_not_implemented": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_many_duck_arrays.D": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides._return_not_implemented": {
     "line number": [
      121
     ]
    },
    "object": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "list": {
     "line number": [
      45,
      48,
      51,
      54
     ]
    },
    "numpy.array": {
     "line number": [
      42
     ]
    },
    "numpy.core.overrides._get_implementing_args": {
     "line number": [
      44,
      47,
      50,
      53
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      45,
      48,
      51,
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_and_duck_array": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "Other": {
     "line number": [
      84
     ]
    },
    "list": {
     "line number": [
      87,
      90
     ]
    },
    "numpy.array": {
     "line number": [
      83
     ]
    },
    "numpy.core.overrides._get_implementing_args": {
     "line number": [
      86,
      89
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      87,
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_and_duck_array.Other": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides._return_not_implemented": {
     "line number": [
      81
     ]
    },
    "object": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclass_and_duck_array": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "Other": {
     "line number": [
      102
     ]
    },
    "numpy.array": {
     "line number": [
      100,
      101
     ]
    },
    "numpy.core.overrides._get_implementing_args": {
     "line number": [
      104,
      106
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      104,
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclass_and_duck_array.Other": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides._return_not_implemented": {
     "line number": [
      98
     ]
    },
    "object": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclass_and_duck_array.OverrideSub": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides._return_not_implemented": {
     "line number": [
      95
     ]
    },
    "numpy.ndarray": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclasses": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "list": {
     "line number": [
      69,
      72,
      76
     ]
    },
    "numpy.array": {
     "line number": [
      64,
      65,
      66
     ]
    },
    "numpy.core.overrides._get_implementing_args": {
     "line number": [
      68,
      71,
      74
     ]
    },
    "numpy.ndarray": {
     "line number": [
      64
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69,
      72,
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclasses.NoOverrideSub": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclasses.OverrideSub": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides._return_not_implemented": {
     "line number": [
      59
     ]
    },
    "numpy.ndarray": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestGetImplementingArgs.test_too_many_duck_arrays": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      146
     ]
    },
    "dict": {
     "line number": [
      139
     ]
    },
    "numpy.core.overrides._get_implementing_args": {
     "line number": [
      143,
      147
     ]
    },
    "numpy.core.tests.test_overrides._return_not_implemented": {
     "line number": [
      139
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      144
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      146
     ]
    },
    "object": {
     "line number": [
      140
     ]
    },
    "range": {
     "line number": [
      140
     ]
    },
    "str": {
     "line number": [
      140
     ]
    },
    "t": {
     "line number": [
      141,
      141
     ]
    },
    "type": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestNDArrayArrayFunction": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides.requires_array_function": {
     "line number": [
      150
     ]
    },
    "object": {
     "line number": [
      151
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestNDArrayArrayFunction.test_method": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      177
     ]
    },
    "Other": {
     "line number": [
      165,
      175
     ]
    },
    "TypeError": {
     "line number": [
      191
     ]
    },
    "numpy.array": {
     "line number": [
      164
     ]
    },
    "numpy.concatenate": {
     "line number": [
      192,
      194,
      195,
      197
     ]
    },
    "numpy.core.tests.test_overrides.dispatched_two_arg": {
     "line number": [
      169,
      174,
      179,
      185
     ]
    },
    "numpy.ndarray": {
     "line number": [
      170,
      175,
      180,
      186
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      177
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      172,
      183,
      189,
      196,
      198
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestNDArrayArrayFunction.test_method.NoOverrideSub": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      158
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestNDArrayArrayFunction.test_method.Other": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides._return_not_implemented": {
     "line number": [
      156
     ]
    },
    "object": {
     "line number": [
      155
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestNDArrayArrayFunction.test_method.OverrideSub": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides._return_not_implemented": {
     "line number": [
      162
     ]
    },
    "numpy.ndarray": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestNDArrayArrayFunction.test_no_wrapper": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      203
     ]
    },
    "numpy.array": {
     "line number": [
      201
     ]
    },
    "numpy.core.tests.test_overrides.dispatched_one_arg": {
     "line number": [
      202
     ]
    },
    "numpy.ndarray": {
     "line number": [
      205
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestNDArrayMethods": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "object": {
     "line number": [
      356
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestNDArrayMethods.test_repr": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": {
    "MyArray": {
     "line number": [
      366
     ]
    },
    "numpy.array": {
     "line number": [
      366
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      367,
      368
     ]
    },
    "repr": {
     "line number": [
      367
     ]
    },
    "str": {
     "line number": [
      368
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestNDArrayMethods.test_repr.MyArray": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      362
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestNDArrayMethods.test_repr.MyArray.__array_function__": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      364
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestNumPyFunctions": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": {
    "object": {
     "line number": [
      371
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestNumPyFunctions.test_inspect_sum": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides.inspect": {
     "line number": [
      381
     ]
    },
    "numpy.core.tests.test_overrides.pytest": {
     "line number": [
      379
     ]
    },
    "numpy.core.tests.test_overrides.sys": {
     "line number": [
      379
     ]
    },
    "numpy.sum": {
     "line number": [
      381
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      382
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestNumPyFunctions.test_override_sum": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": {
    "MyArray": {
     "line number": [
      386,
      392
     ]
    },
    "implements": {
     "line number": [
      386
     ]
    },
    "numpy.core.tests.test_overrides._new_duck_type_and_implements": {
     "line number": [
      386
     ]
    },
    "numpy.core.tests.test_overrides.requires_array_function": {
     "line number": [
      384
     ]
    },
    "numpy.sum": {
     "line number": [
      392
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      392
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestNumPyFunctions.test_override_sum._": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": {
    "implements": {
     "line number": [
      388
     ]
    },
    "numpy.sum": {
     "line number": [
      388
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestNumPyFunctions.test_set_module": {
  "data": {
   "lineno": 373,
   "symbols_in_volume": {
    "numpy.char.equal.__module__": {
     "line number": [
      375
     ]
    },
    "numpy.fft.fft.__module__": {
     "line number": [
      376
     ]
    },
    "numpy.linalg.solve.__module__": {
     "line number": [
      377
     ]
    },
    "numpy.sum.__module__": {
     "line number": [
      374
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      374,
      375,
      376,
      377
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestVerifyMatchingSignatures": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": {
    "numpy.core.tests.test_overrides.requires_array_function": {
     "line number": [
      249
     ]
    },
    "object": {
     "line number": [
      250
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides.TestVerifyMatchingSignatures.test_array_function_dispatch": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      269
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      269
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestVerifyMatchingSignatures.test_array_function_dispatch.f": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      275
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.TestVerifyMatchingSignatures.test_verify_matching_signatures": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      258,
      260,
      262,
      264
     ]
    },
    "numpy.core.overrides.verify_matching_signatures": {
     "line number": [
      254,
      255,
      256,
      259,
      261,
      263,
      265
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      258,
      260,
      262,
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides._get_implementing_args": {
  "data": {
   "shadows": "numpy.core.overrides._get_implementing_args"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides._new_duck_type_and_implements": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": {
    "MyArray": {
     "line number": [
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides._new_duck_type_and_implements.MyArray": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": {
    "object": {
     "line number": [
      284
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_overrides._new_duck_type_and_implements.MyArray.__array_function__": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": {
    "MyArray": {
     "line number": [
      288
     ]
    },
    "NotImplemented": {
     "line number": [
      287,
      289
     ]
    },
    "all": {
     "line number": [
      288
     ]
    },
    "issubclass": {
     "line number": [
      288
     ]
    },
    "t": {
     "line number": [
      288,
      288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides._new_duck_type_and_implements.implements": {
  "data": {
   "lineno": 292
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides._new_duck_type_and_implements.implements.decorator": {
  "data": {
   "lineno": 294
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides._return_not_implemented": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.array_function_dispatch": {
  "data": {
   "shadows": "numpy.core.overrides.array_function_dispatch"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.dispatched_one_arg": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.dispatched_two_arg": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_overrides.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.pickle": {
  "data": {
   "shadows": "numpy.core.numeric.pickle"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.requires_array_function": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.core.tests.test_overrides.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_overrides.verify_matching_signatures": {
  "data": {
   "shadows": "numpy.core.overrides.verify_matching_signatures"
  },
  "type": "import"
 },
 "numpy.core.tests.test_print": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.tests.test_print.sys": {
     "line number": [
      12
     ]
    },
    "numpy.inf": {
     "line number": [
      17,
      17
     ]
    },
    "numpy.nan": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_print.CommaDecimalPointLocale": {
  "data": {
   "shadows": "numpy.core.tests._locales.CommaDecimalPointLocale"
  },
  "type": "import"
 },
 "numpy.core.tests.test_print.StringIO": {
  "data": {
   "shadows": "StringIO.StringIO"
  },
  "type": "import"
 },
 "numpy.core.tests.test_print.TestCommaDecimalPointLocale": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "numpy.core.tests._locales.CommaDecimalPointLocale": {
     "line number": [
      196
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_print.TestCommaDecimalPointLocale.test_locale_double": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "float": {
     "line number": [
      202
     ]
    },
    "numpy.double": {
     "line number": [
      202
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      202
     ]
    },
    "str": {
     "line number": [
      202,
      202
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_print.TestCommaDecimalPointLocale.test_locale_longdouble": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "float": {
     "line number": [
      205
     ]
    },
    "numpy.longdouble": {
     "line number": [
      205
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      205
     ]
    },
    "str": {
     "line number": [
      205,
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_print.TestCommaDecimalPointLocale.test_locale_single": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "float": {
     "line number": [
      199
     ]
    },
    "numpy.float32": {
     "line number": [
      199
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      199
     ]
    },
    "str": {
     "line number": [
      199,
      199
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_print._REF": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.core.tests.test_print._test_redirected_print": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "StringIO.StringIO": {
     "line number": [
      109,
      110
     ]
    },
    "numpy.core.tests.test_print.sys": {
     "line number": [
      111,
      113,
      115,
      121
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      123
     ]
    },
    "print": {
     "line number": [
      114,
      117,
      119
     ]
    },
    "tp": {
     "line number": [
      114,
      124
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_print.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_print.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_print.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_print.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_print.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_print.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_print.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_print.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_print.test_complex_inf_nan": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101
     ]
    },
    "dtype": {
     "line number": [
      104
     ]
    },
    "numpy.cdouble": {
     "line number": [
      82
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      82
     ]
    },
    "numpy.complex64": {
     "line number": [
      82
     ]
    },
    "numpy.core.tests.test_print.pytest": {
     "line number": [
      82
     ]
    },
    "numpy.inf": {
     "line number": [
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93
     ]
    },
    "numpy.nan": {
     "line number": [
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      104
     ]
    },
    "str": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_print.test_complex_type_print": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      149,
      152,
      155,
      157,
      158,
      159
     ]
    },
    "numpy.cdouble": {
     "line number": [
      143
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      143
     ]
    },
    "numpy.complex64": {
     "line number": [
      143
     ]
    },
    "numpy.core.tests.test_print._test_redirected_print": {
     "line number": [
      149,
      152,
      155,
      157,
      158,
      159
     ]
    },
    "numpy.core.tests.test_print.pytest": {
     "line number": [
      143
     ]
    },
    "numpy.inf": {
     "line number": [
      157,
      158
     ]
    },
    "numpy.nan": {
     "line number": [
      159
     ]
    },
    "tp": {
     "line number": [
      149,
      151,
      152,
      155,
      157,
      158,
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_print.test_complex_types": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      66,
      68,
      70,
      74
     ]
    },
    "numpy.cdouble": {
     "line number": [
      56
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      56
     ]
    },
    "numpy.complex64": {
     "line number": [
      56
     ]
    },
    "numpy.core.tests.test_print.pytest": {
     "line number": [
      56
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      66,
      68,
      70,
      74,
      78
     ]
    },
    "str": {
     "line number": [
      66,
      66,
      68,
      68,
      70,
      70,
      74,
      74,
      78
     ]
    },
    "tp": {
     "line number": [
      66,
      67,
      68,
      69,
      70,
      71,
      73,
      74,
      75,
      78,
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_print.test_float_type_print": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "float": {
     "line number": [
      131,
      134,
      137,
      140
     ]
    },
    "numpy.core.tests.test_print._REF": {
     "line number": [
      134
     ]
    },
    "numpy.core.tests.test_print._test_redirected_print": {
     "line number": [
      131,
      134,
      137,
      140
     ]
    },
    "numpy.core.tests.test_print.pytest": {
     "line number": [
      127
     ]
    },
    "numpy.double": {
     "line number": [
      127
     ]
    },
    "numpy.float32": {
     "line number": [
      127
     ]
    },
    "numpy.inf": {
     "line number": [
      133,
      133
     ]
    },
    "numpy.longdouble": {
     "line number": [
      127
     ]
    },
    "numpy.nan": {
     "line number": [
      133
     ]
    },
    "tp": {
     "line number": [
      131,
      134,
      136,
      137,
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_print.test_float_types": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "float": {
     "line number": [
      30,
      34
     ]
    },
    "numpy.core.tests.test_print.pytest": {
     "line number": [
      20
     ]
    },
    "numpy.double": {
     "line number": [
      20
     ]
    },
    "numpy.float32": {
     "line number": [
      20
     ]
    },
    "numpy.longdouble": {
     "line number": [
      20
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      30,
      34,
      38
     ]
    },
    "str": {
     "line number": [
      30,
      30,
      34,
      34,
      38
     ]
    },
    "tp": {
     "line number": [
      30,
      31,
      33,
      34,
      35,
      38,
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_print.test_nan_inf_float": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "numpy.core.tests.test_print._REF": {
     "line number": [
      52
     ]
    },
    "numpy.core.tests.test_print.pytest": {
     "line number": [
      42
     ]
    },
    "numpy.double": {
     "line number": [
      42
     ]
    },
    "numpy.float32": {
     "line number": [
      42
     ]
    },
    "numpy.inf": {
     "line number": [
      51,
      51
     ]
    },
    "numpy.longdouble": {
     "line number": [
      42
     ]
    },
    "numpy.nan": {
     "line number": [
      51
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      52
     ]
    },
    "str": {
     "line number": [
      52
     ]
    },
    "tp": {
     "line number": [
      52,
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_print.test_scalar_format": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      186
     ]
    },
    "numpy.bool_": {
     "line number": [
      164,
      165
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      180
     ]
    },
    "numpy.complex128": {
     "line number": [
      179
     ]
    },
    "numpy.complex64": {
     "line number": [
      178
     ]
    },
    "numpy.float16": {
     "line number": [
      174
     ]
    },
    "numpy.float32": {
     "line number": [
      175
     ]
    },
    "numpy.float64": {
     "line number": [
      176
     ]
    },
    "numpy.int16": {
     "line number": [
      171
     ]
    },
    "numpy.int32": {
     "line number": [
      172
     ]
    },
    "numpy.int64": {
     "line number": [
      173
     ]
    },
    "numpy.int8": {
     "line number": [
      170
     ]
    },
    "numpy.longdouble": {
     "line number": [
      177
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      187
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      184
     ]
    },
    "numpy.uint16": {
     "line number": [
      167
     ]
    },
    "numpy.uint32": {
     "line number": [
      168
     ]
    },
    "numpy.uint64": {
     "line number": [
      169
     ]
    },
    "numpy.uint8": {
     "line number": [
      166
     ]
    },
    "repr": {
     "line number": [
      189,
      189
     ]
    },
    "str": {
     "line number": [
      189
     ]
    },
    "valtype": {
     "line number": [
      184,
      185,
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      8
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_records.Path": {
  "data": {
   "shadows": "numpy.compat.Path"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.TestFromrecords": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "object": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_0d_recarray_repr": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "numpy.core.tests.test_records.textwrap": {
     "line number": [
      134
     ]
    },
    "numpy.rec.array": {
     "line number": [
      133
     ]
    },
    "numpy.set_printoptions": {
     "line number": [
      142,
      145
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      134,
      139,
      143
     ]
    },
    "repr": {
     "line number": [
      134,
      139,
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_fromrecords": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "numpy.core.tests.test_records.sys": {
     "line number": [
      29
     ]
    },
    "numpy.rec.fromrecords": {
     "line number": [
      25
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      27,
      28,
      30,
      31,
      33,
      34,
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_fromrecords_0len": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "float": {
     "line number": [
      39,
      39
     ]
    },
    "numpy.rec.fromrecords": {
     "line number": [
      40
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_fromrecords_2d": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "int": {
     "line number": [
      52,
      52
     ]
    },
    "numpy.rec.fromrecords": {
     "line number": [
      52,
      57
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      53,
      54,
      58,
      59,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_fromrecords_with_explicit_dtype": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "int": {
     "line number": [
      265,
      271
     ]
    },
    "numpy.dtype": {
     "line number": [
      271
     ]
    },
    "numpy.rec.fromrecords": {
     "line number": [
      264,
      272
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      266,
      267,
      268,
      269,
      273,
      274,
      275,
      276
     ]
    },
    "object": {
     "line number": [
      265,
      271
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_method_array": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "numpy.rec.array": {
     "line number": [
      64
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_method_array2": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "numpy.rec.array": {
     "line number": [
      68
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_conflict_fields": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": {
    "collections.Callable": {
     "line number": [
      261
     ]
    },
    "isinstance": {
     "line number": [
      261
     ]
    },
    "numpy.rec.array": {
     "line number": [
      249
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      254,
      256,
      261
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      253
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      258,
      260
     ]
    },
    "type": {
     "line number": [
      254,
      254
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_from_names": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "len": {
     "line number": [
      245
     ]
    },
    "numpy.rec.array": {
     "line number": [
      233
     ]
    },
    "numpy.rec.fromrecords": {
     "line number": [
      238
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      243,
      244,
      246
     ]
    },
    "range": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_from_obj": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "len": {
     "line number": [
      102,
      106
     ]
    },
    "list": {
     "line number": [
      103,
      107
     ]
    },
    "numpy.rec.fromarrays": {
     "line number": [
      105
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      107,
      108,
      109
     ]
    },
    "numpy.zeros": {
     "line number": [
      99,
      100,
      101
     ]
    },
    "range": {
     "line number": [
      102,
      103,
      106,
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_from_repr": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "eval": {
     "line number": [
      154,
      155,
      156
     ]
    },
    "int": {
     "line number": [
      149
     ]
    },
    "numpy": {
     "line number": [
      154,
      155,
      156
     ]
    },
    "numpy.array": {
     "line number": [
      148
     ]
    },
    "numpy.dtype": {
     "line number": [
      152
     ]
    },
    "numpy.ndarray": {
     "line number": [
      166
     ]
    },
    "numpy.rec.array": {
     "line number": [
      150
     ]
    },
    "numpy.recarray": {
     "line number": [
      151,
      158,
      162
     ]
    },
    "numpy.record": {
     "line number": [
      152,
      159,
      163,
      167
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      158,
      159,
      160,
      162,
      163,
      164,
      166,
      167,
      168
     ]
    },
    "repr": {
     "line number": [
      154,
      155,
      156
     ]
    },
    "type": {
     "line number": [
      158,
      162,
      166
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_fromarrays": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      78,
      79,
      80,
      84
     ]
    },
    "numpy.rec.fromarrays": {
     "line number": [
      81
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      82,
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_fromfile": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "numpy.rec.array": {
     "line number": [
      93
     ]
    },
    "numpy.rec.fromfile": {
     "line number": [
      91
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      95
     ]
    },
    "open": {
     "line number": [
      89
     ]
    },
    "os.path.dirname": {
     "line number": [
      87
     ]
    },
    "os.path.join": {
     "line number": [
      87,
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_repr": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      112,
      123
     ]
    },
    "numpy.core.tests.test_records.textwrap": {
     "line number": [
      117
     ]
    },
    "numpy.ones": {
     "line number": [
      123,
      127,
      129
     ]
    },
    "numpy.rec.array": {
     "line number": [
      114,
      124,
      127,
      129
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      124,
      130
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      115,
      128
     ]
    },
    "repr": {
     "line number": [
      116,
      124,
      128,
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_returntypes": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      299
     ]
    },
    "int": {
     "line number": [
      290,
      290,
      291
     ]
    },
    "numpy.dtype": {
     "line number": [
      286,
      286
     ]
    },
    "numpy.ndarray": {
     "line number": [
      292,
      293,
      300,
      301
     ]
    },
    "numpy.rec.array": {
     "line number": [
      287
     ]
    },
    "numpy.recarray": {
     "line number": [
      294,
      295,
      297
     ]
    },
    "numpy.record": {
     "line number": [
      296,
      298,
      302,
      303
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      292,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305,
      306,
      307,
      308,
      309,
      310,
      311
     ]
    },
    "type": {
     "line number": [
      292,
      293,
      294,
      295,
      297,
      300,
      301,
      302,
      303
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_slices": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "numpy.rec.array": {
     "line number": [
      73
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_stringtypes": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "int": {
     "line number": [
      281
     ]
    },
    "numpy.array": {
     "line number": [
      280
     ]
    },
    "numpy.recarray": {
     "line number": [
      282
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      283
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_views": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "int": {
     "line number": [
      172
     ]
    },
    "numpy.array": {
     "line number": [
      171,
      173
     ]
    },
    "numpy.float32": {
     "line number": [
      214
     ]
    },
    "numpy.int32": {
     "line number": [
      219
     ]
    },
    "numpy.int64": {
     "line number": [
      173,
      178,
      184,
      215,
      221
     ]
    },
    "numpy.ndarray": {
     "line number": [
      228
     ]
    },
    "numpy.ones": {
     "line number": [
      188,
      194,
      217,
      224,
      224
     ]
    },
    "numpy.rec.array": {
     "line number": [
      176,
      177,
      178,
      179,
      188,
      194,
      210,
      217,
      226
     ]
    },
    "numpy.recarray": {
     "line number": [
      177,
      179,
      182,
      183,
      183,
      184,
      185,
      185,
      190,
      197
     ]
    },
    "numpy.record": {
     "line number": [
      176,
      182,
      191,
      196,
      212,
      218
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      176,
      177,
      178,
      179,
      182,
      183,
      184,
      185,
      190,
      191,
      196,
      197,
      204,
      212,
      213,
      214,
      215,
      218,
      219,
      220,
      221,
      229,
      230
     ]
    },
    "numpy.void": {
     "line number": [
      213,
      220
     ]
    },
    "type": {
     "line number": [
      177,
      179,
      183,
      185,
      190,
      197,
      204,
      230,
      230
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_recarray_views.C": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "numpy.recarray": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_records.TestFromrecords.test_zero_width_strings": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      321
     ]
    },
    "numpy.rec.fromarrays": {
     "line number": [
      317,
      322
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      318,
      319,
      323,
      324,
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestPathUsage": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": {
    "numpy.compat.Path": {
     "line number": [
      328
     ]
    },
    "numpy.core.tests.test_records.pytest": {
     "line number": [
      328
     ]
    },
    "object": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_records.TestPathUsage.test_tofile_fromfile": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "numpy.compat.Path": {
     "line number": [
      333
     ]
    },
    "numpy.core.records.fromfile": {
     "line number": [
      339
     ]
    },
    "numpy.random.rand": {
     "line number": [
      335
     ]
    },
    "numpy.random.seed": {
     "line number": [
      334
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      342
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      332
     ]
    },
    "os.path": {
     "line number": [
      332,
      333,
      333,
      339
     ]
    },
    "os.path.open": {
     "line number": [
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": {
    "object": {
     "line number": [
      345
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_records.TestRecord.setup": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": {
    "numpy.rec.fromrecords": {
     "line number": [
      347
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_assignment1": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      354,
      356
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_assignment2": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      360,
      362
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_invalid_assignment": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      370
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_invalid_assignment.assign_invalid_column": {
  "data": {
   "lineno": 367
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_missing_field": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      438
     ]
    },
    "int": {
     "line number": [
      437,
      437
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      438
     ]
    },
    "numpy.zeros": {
     "line number": [
      437
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_nonwriteable_setfield": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      376,
      378
     ]
    },
    "numpy.rec.array": {
     "line number": [
      374
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      376,
      378
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_objview_record": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": {
    "float": {
     "line number": [
      426
     ]
    },
    "int": {
     "line number": [
      426
     ]
    },
    "numpy.array": {
     "line number": [
      423
     ]
    },
    "numpy.dtype": {
     "line number": [
      421
     ]
    },
    "numpy.recarray": {
     "line number": [
      422,
      426
     ]
    },
    "numpy.zeros": {
     "line number": [
      422
     ]
    },
    "object": {
     "line number": [
      426
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_out_of_order_fields": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      392
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      384,
      385,
      391
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      392
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_pickle_1": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      396
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      397
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      398,
      399
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      398,
      399
     ]
    },
    "numpy.int32": {
     "line number": [
      396,
      396
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      398,
      399
     ]
    },
    "range": {
     "line number": [
      397
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_pickle_2": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": {
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      404
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      405,
      406
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      405,
      406
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      405,
      406
     ]
    },
    "range": {
     "line number": [
      404
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_pickle_3": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": {
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      412
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      413
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      413
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      414,
      415,
      416,
      417
     ]
    },
    "range": {
     "line number": [
      412
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.TestRecord.test_record_scalar_setitem": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": {
    "float": {
     "line number": [
      431
     ]
    },
    "numpy.ones": {
     "line number": [
      433
     ]
    },
    "numpy.recarray": {
     "line number": [
      431
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      433
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.collections_abc": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.pickle": {
  "data": {
   "shadows": "numpy.core.numeric.pickle"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.temppath": {
  "data": {
   "shadows": "numpy.testing.temppath"
  },
  "type": "import"
 },
 "numpy.core.tests.test_records.test_find_duplicate": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "numpy.rec.find_duplicate": {
     "line number": [
      443,
      446,
      449,
      452
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      443,
      446,
      449,
      452
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_records.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalar_ctors": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_scalar_ctors.TestFromInt": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "object": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalar_ctors.TestFromInt.test_intp": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "numpy.intp": {
     "line number": [
      62
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalar_ctors.TestFromInt.test_uint64_from_negative": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      65
     ]
    },
    "numpy.uint64": {
     "line number": [
      65,
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalar_ctors.TestFromString": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "object": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalar_ctors.TestFromString.test_floating": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.double": {
     "line number": [
      19
     ]
    },
    "numpy.longdouble": {
     "line number": [
      20
     ]
    },
    "numpy.single": {
     "line number": [
      18
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      21,
      22,
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalar_ctors.TestFromString.test_floating_overflow": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      33,
      42
     ]
    },
    "numpy.double": {
     "line number": [
      31,
      40
     ]
    },
    "numpy.half": {
     "line number": [
      27,
      36
     ]
    },
    "numpy.inf": {
     "line number": [
      28,
      30,
      32,
      34,
      37,
      39,
      41,
      43
     ]
    },
    "numpy.longdouble": {
     "line number": [
      33,
      42
     ]
    },
    "numpy.single": {
     "line number": [
      29,
      38
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      28,
      30,
      32,
      34,
      37,
      39,
      41,
      43
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      33,
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalar_ctors.TestFromString.test_intp": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      54
     ]
    },
    "ValueError": {
     "line number": [
      55
     ]
    },
    "numpy.core.tests.test_scalar_ctors.platform": {
     "line number": [
      47
     ]
    },
    "numpy.core.tests.test_scalar_ctors.pytest": {
     "line number": [
      45
     ]
    },
    "numpy.core.tests.test_scalar_ctors.sys": {
     "line number": [
      45,
      46
     ]
    },
    "numpy.int_": {
     "line number": [
      52
     ]
    },
    "numpy.intp": {
     "line number": [
      53,
      54,
      55,
      56
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      56
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      54,
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalar_ctors.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalar_ctors.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalar_ctors.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalar_ctors.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalar_ctors.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalar_ctors.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalar_ctors.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalar_ctors.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalar_ctors.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalar_ctors.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalar_ctors.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarbuffer": {
  "data": {
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      12
     ]
    },
    "numpy.byte": {
     "line number": [
      13
     ]
    },
    "numpy.cdouble": {
     "line number": [
      28
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      29
     ]
    },
    "numpy.core.tests.test_scalarbuffer.scalars_and_codes": {
     "line number": [
      31
     ]
    },
    "numpy.csingle": {
     "line number": [
      27
     ]
    },
    "numpy.double": {
     "line number": [
      25
     ]
    },
    "numpy.half": {
     "line number": [
      23
     ]
    },
    "numpy.int_": {
     "line number": [
      16
     ]
    },
    "numpy.intc": {
     "line number": [
      15
     ]
    },
    "numpy.longdouble": {
     "line number": [
      26
     ]
    },
    "numpy.longlong": {
     "line number": [
      17
     ]
    },
    "numpy.short": {
     "line number": [
      14
     ]
    },
    "numpy.single": {
     "line number": [
      24
     ]
    },
    "numpy.ubyte": {
     "line number": [
      18
     ]
    },
    "numpy.uint": {
     "line number": [
      21
     ]
    },
    "numpy.uintc": {
     "line number": [
      20
     ]
    },
    "numpy.ulonglong": {
     "line number": [
      22
     ]
    },
    "numpy.ushort": {
     "line number": [
      19
     ]
    },
    "zip": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_scalarbuffer.TestScalarPEP3118": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "numpy.core.tests.test_scalarbuffer.pytest": {
     "line number": [
      34
     ]
    },
    "numpy.core.tests.test_scalarbuffer.sys": {
     "line number": [
      34
     ]
    },
    "object": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_datetime_memoryview": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "BufferError": {
     "line number": [
      104
     ]
    },
    "ValueError": {
     "line number": [
      104
     ]
    },
    "as_dict": {
     "line number": [
      94,
      98
     ]
    },
    "memoryview": {
     "line number": [
      93,
      97,
      104
     ]
    },
    "numpy.datetime64": {
     "line number": [
      89,
      90
     ]
    },
    "numpy.dtype": {
     "line number": [
      101
     ]
    },
    "numpy.empty": {
     "line number": [
      102
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      95,
      99
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_datetime_memoryview.as_dict": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_dim": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      49
     ]
    },
    "numpy.core.tests.test_scalarbuffer.pytest": {
     "line number": [
      46
     ]
    },
    "numpy.dtype": {
     "line number": [
      50
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      50,
      51,
      52,
      53,
      54
     ]
    },
    "scalar": {
     "line number": [
      48,
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_known_code": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      59
     ]
    },
    "numpy.core.tests.test_scalarbuffer.pytest": {
     "line number": [
      56
     ]
    },
    "numpy.core.tests.test_scalarbuffer.scalars_and_codes": {
     "line number": [
      56
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      60
     ]
    },
    "scalar": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_match_array": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "memoryview": {
     "line number": [
      42,
      43
     ]
    },
    "numpy.array": {
     "line number": [
      41
     ]
    },
    "numpy.core.tests.test_scalarbuffer.pytest": {
     "line number": [
      38
     ]
    },
    "numpy.dtype": {
     "line number": [
      41
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      44
     ]
    },
    "scalar": {
     "line number": [
      40,
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_void_scalar_structured_data": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      65,
      77
     ]
    },
    "memoryview": {
     "line number": [
      66,
      78
     ]
    },
    "numpy.array": {
     "line number": [
      64,
      76
     ]
    },
    "numpy.dtype": {
     "line number": [
      63,
      67,
      68
     ]
    },
    "numpy.float64": {
     "line number": [
      63,
      68
     ]
    },
    "numpy.ndarray": {
     "line number": [
      77
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      65,
      77
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69,
      70,
      71,
      72,
      73,
      79,
      80
     ]
    },
    "numpy.unicode_": {
     "line number": [
      63,
      67
     ]
    },
    "numpy.void": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarbuffer.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarbuffer.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarbuffer.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarbuffer.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarbuffer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarbuffer.scalars_and_codes": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "numpy.core.tests.test_scalarbuffer.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarinherit": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_scalarinherit.A": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "object": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarinherit.B": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "numpy.core.tests.test_scalarinherit.A": {
     "line number": [
      13
     ]
    },
    "numpy.float64": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarinherit.B0": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "numpy.core.tests.test_scalarinherit.A": {
     "line number": [
      21
     ]
    },
    "numpy.float64": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarinherit.C": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.core.tests.test_scalarinherit.B": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarinherit.C0": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "numpy.core.tests.test_scalarinherit.B0": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarinherit.D": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "numpy.core.tests.test_scalarinherit.B": {
     "line number": [
      18
     ]
    },
    "numpy.core.tests.test_scalarinherit.C": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarinherit.TestCharacter": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "object": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarinherit.TestCharacter.test_char_radd": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "Mystr": {
     "line number": [
      65
     ]
    },
    "NotImplemented": {
     "line number": [
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56
     ]
    },
    "numpy.string_": {
     "line number": [
      45
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      66
     ]
    },
    "numpy.unicode_": {
     "line number": [
      46
     ]
    },
    "type": {
     "line number": [
      66,
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarinherit.TestCharacter.test_char_radd.Mystr": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "numpy.generic": {
     "line number": [
      61
     ]
    },
    "str": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarinherit.TestCharacter.test_char_repeat": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "numpy.int": {
     "line number": [
      71
     ]
    },
    "numpy.string_": {
     "line number": [
      69
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      74,
      75
     ]
    },
    "numpy.unicode_": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarinherit.TestInherit": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "object": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarinherit.TestInherit.test_init": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "numpy.core.tests.test_scalarinherit.B": {
     "line number": [
      28
     ]
    },
    "numpy.core.tests.test_scalarinherit.C": {
     "line number": [
      30
     ]
    },
    "numpy.core.tests.test_scalarinherit.D": {
     "line number": [
      32
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      29,
      31,
      33
     ]
    },
    "str": {
     "line number": [
      29,
      31,
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarinherit.TestInherit.test_init2": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "numpy.core.tests.test_scalarinherit.B0": {
     "line number": [
      36
     ]
    },
    "numpy.core.tests.test_scalarinherit.C0": {
     "line number": [
      38
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      37,
      39
     ]
    },
    "str": {
     "line number": [
      37,
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarinherit.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarinherit.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarinherit.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarinherit.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarinherit.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath": {
  "data": {
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      17
     ]
    },
    "numpy.byte": {
     "line number": [
      17
     ]
    },
    "numpy.cdouble": {
     "line number": [
      20
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      20
     ]
    },
    "numpy.complexfloating.__subclasses__": {
     "line number": [
      23
     ]
    },
    "numpy.csingle": {
     "line number": [
      19
     ]
    },
    "numpy.double": {
     "line number": [
      19
     ]
    },
    "numpy.floating.__subclasses__": {
     "line number": [
      22
     ]
    },
    "numpy.int_": {
     "line number": [
      18
     ]
    },
    "numpy.intc": {
     "line number": [
      17
     ]
    },
    "numpy.longdouble": {
     "line number": [
      19
     ]
    },
    "numpy.longlong": {
     "line number": [
      18
     ]
    },
    "numpy.short": {
     "line number": [
      17
     ]
    },
    "numpy.single": {
     "line number": [
      19
     ]
    },
    "numpy.testing.IS_PYPY": {
     "line number": [
      547
     ]
    },
    "numpy.ubyte": {
     "line number": [
      17
     ]
    },
    "numpy.uint": {
     "line number": [
      18
     ]
    },
    "numpy.uintc": {
     "line number": [
      17
     ]
    },
    "numpy.ulonglong": {
     "line number": [
      18
     ]
    },
    "numpy.ushort": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_scalarmath.IS_PYPY": {
  "data": {
   "shadows": "numpy.testing.IS_PYPY"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.TestAbs": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": {
    "object": {
     "line number": [
      640
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestAbs._test_abs_func": {
  "data": {
   "lineno": 641,
   "symbols_in_volume": {
    "absfunc": {
     "line number": [
      644,
      646,
      650,
      654,
      657,
      660
     ]
    },
    "numpy.core.tests.test_scalarmath.complex_floating_types": {
     "line number": [
      642
     ]
    },
    "numpy.core.tests.test_scalarmath.floating_types": {
     "line number": [
      642
     ]
    },
    "numpy.finfo": {
     "line number": [
      653,
      656,
      659
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      644,
      648,
      651,
      654,
      657,
      660
     ]
    },
    "tp": {
     "line number": [
      643,
      645,
      649,
      653,
      653,
      656,
      656,
      659,
      659
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestAbs.test_builtin_abs": {
  "data": {
   "lineno": 662,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      663
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestAbs.test_numpy_abs": {
  "data": {
   "lineno": 665,
   "symbols_in_volume": {
    "numpy.abs": {
     "line number": [
      666
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestBaseMath": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "object": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestBaseMath.test_blocked": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "numpy.add": {
     "line number": [
      78,
      79,
      80,
      82,
      94,
      97
     ]
    },
    "numpy.arange": {
     "line number": [
      85
     ]
    },
    "numpy.core.tests.test_scalarmath.sys": {
     "line number": [
      89,
      89
     ]
    },
    "numpy.divide": {
     "line number": [
      91
     ]
    },
    "numpy.float32": {
     "line number": [
      71
     ]
    },
    "numpy.float64": {
     "line number": [
      71
     ]
    },
    "numpy.int32": {
     "line number": [
      71,
      89
     ]
    },
    "numpy.multiply": {
     "line number": [
      87
     ]
    },
    "numpy.ones_like": {
     "line number": [
      75,
      76,
      93,
      96
     ]
    },
    "numpy.reciprocal": {
     "line number": [
      90
     ]
    },
    "numpy.square": {
     "line number": [
      86
     ]
    },
    "numpy.testing._gen_alignment_data": {
     "line number": [
      72
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      78,
      79,
      80,
      83,
      86,
      90,
      95,
      98
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestBaseMath.test_lower_align": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "numpy.add": {
     "line number": [
      106,
      107,
      108,
      109,
      110
     ]
    },
    "numpy.float64": {
     "line number": [
      103,
      104
     ]
    },
    "numpy.int8": {
     "line number": [
      103,
      104
     ]
    },
    "numpy.ones_like": {
     "line number": [
      107,
      108,
      109,
      110
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      105
     ]
    },
    "numpy.zeros": {
     "line number": [
      103,
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestComplexDivision": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "object": {
     "line number": [
      297
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestComplexDivision.test_branches": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      362,
      362
     ]
    },
    "list": {
     "line number": [
      345
     ]
    },
    "numpy.complex128": {
     "line number": [
      342
     ]
    },
    "numpy.complex64": {
     "line number": [
      342
     ]
    },
    "numpy.errstate": {
     "line number": [
      341
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      365,
      366
     ]
    },
    "t": {
     "line number": [
      342,
      362,
      362
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestComplexDivision.test_signed_zeros": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      334,
      334
     ]
    },
    "numpy.complex128": {
     "line number": [
      317
     ]
    },
    "numpy.complex64": {
     "line number": [
      317
     ]
    },
    "numpy.errstate": {
     "line number": [
      316
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      337,
      338
     ]
    },
    "t": {
     "line number": [
      317,
      334,
      334
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestComplexDivision.test_zero_division": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      304,
      306,
      308,
      310
     ]
    },
    "numpy.complex128": {
     "line number": [
      300
     ]
    },
    "numpy.complex64": {
     "line number": [
      300
     ]
    },
    "numpy.errstate": {
     "line number": [
      299
     ]
    },
    "numpy.inf": {
     "line number": [
      304,
      304,
      306,
      308
     ]
    },
    "numpy.isinf": {
     "line number": [
      303,
      305,
      307,
      309
     ]
    },
    "numpy.isnan": {
     "line number": [
      311,
      313
     ]
    },
    "numpy.nan": {
     "line number": [
      306,
      308,
      310,
      310
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      303,
      305,
      307,
      309,
      311,
      313
     ]
    },
    "t": {
     "line number": [
      300,
      301,
      302,
      304,
      306,
      308,
      310,
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestConversion": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": {
    "object": {
     "line number": [
      369
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestConversion.test_iinfo_long_values": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      382,
      387
     ]
    },
    "numpy.iinfo": {
     "line number": [
      382,
      383,
      387,
      388,
      392,
      393
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      384,
      389,
      394
     ]
    },
    "numpy.typeDict": {
     "line number": [
      392
     ]
    },
    "numpy.typecodes": {
     "line number": [
      386,
      391
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestConversion.test_int_from_huge_longdouble": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": {
    "int": {
     "line number": [
      434
     ]
    },
    "numpy.core.tests.test_scalarmath.platform": {
     "line number": [
      425
     ]
    },
    "numpy.core.tests.test_scalarmath.pytest": {
     "line number": [
      423,
      425
     ]
    },
    "numpy.double": {
     "line number": [
      430,
      423
     ]
    },
    "numpy.finfo": {
     "line number": [
      430,
      423,
      423
     ]
    },
    "numpy.inf": {
     "line number": [
      433
     ]
    },
    "numpy.longdouble": {
     "line number": [
      431,
      423
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      433
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestConversion.test_int_from_infinite_longdouble": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      406,
      410
     ]
    },
    "int": {
     "line number": [
      406,
      410
     ]
    },
    "len": {
     "line number": [
      411
     ]
    },
    "numpy.ComplexWarning": {
     "line number": [
      408
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      409
     ]
    },
    "numpy.inf": {
     "line number": [
      405,
      409
     ]
    },
    "numpy.longdouble": {
     "line number": [
      405
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      411
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      406,
      410
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      407
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestConversion.test_int_from_infinite_longdouble___int__": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      416,
      420
     ]
    },
    "len": {
     "line number": [
      421
     ]
    },
    "numpy.ComplexWarning": {
     "line number": [
      418
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      419
     ]
    },
    "numpy.core.tests.test_scalarmath.pytest": {
     "line number": [
      413
     ]
    },
    "numpy.inf": {
     "line number": [
      415,
      419
     ]
    },
    "numpy.longdouble": {
     "line number": [
      415
     ]
    },
    "numpy.testing.IS_PYPY": {
     "line number": [
      413
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      421
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      416,
      420
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      417
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestConversion.test_int_from_long": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": {
    "int": {
     "line number": [
      375,
      378
     ]
    },
    "numpy.array": {
     "line number": [
      374,
      377
     ]
    },
    "numpy.float64": {
     "line number": [
      373
     ]
    },
    "numpy.int64": {
     "line number": [
      373
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      375,
      378
     ]
    },
    "numpy.uint64": {
     "line number": [
      377
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestConversion.test_int_from_longdouble": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "int": {
     "line number": [
      438,
      440
     ]
    },
    "numpy.longdouble": {
     "line number": [
      437,
      439
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      438,
      440
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestConversion.test_int_raise_behaviour": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      401
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      401
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestConversion.test_int_raise_behaviour.overflow_error_func": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": {
    "numpy.iinfo": {
     "line number": [
      398
     ]
    },
    "numpy.typeDict": {
     "line number": [
      398
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestConversion.test_numpy_scalar_relational_operators": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      445,
      446,
      449,
      449,
      451,
      451,
      456,
      457,
      458,
      462,
      462,
      464,
      464,
      466,
      466,
      471,
      472,
      473,
      476,
      476,
      478,
      478,
      480,
      480
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      445,
      446,
      449,
      451,
      456,
      457,
      458,
      462,
      464,
      466,
      471,
      472,
      473,
      476,
      478,
      480
     ]
    },
    "numpy.typecodes": {
     "line number": [
      444,
      448,
      470,
      475
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestConversion.test_scalar_comparison_to_none": {
  "data": {
   "lineno": 483,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      487
     ]
    },
    "len": {
     "line number": [
      497
     ]
    },
    "numpy.core.tests.test_scalarmath.warnings": {
     "line number": [
      486,
      487
     ]
    },
    "numpy.datetime64": {
     "line number": [
      491,
      496,
      502
     ]
    },
    "numpy.equal": {
     "line number": [
      502
     ]
    },
    "numpy.float32": {
     "line number": [
      488,
      493
     ]
    },
    "numpy.str_": {
     "line number": [
      489,
      494
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      488,
      489,
      491,
      493,
      494,
      496,
      497,
      502
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestModulus": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "object": {
     "line number": [
      205
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestModulus.test_float_modulus_corner_cases": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      280
     ]
    },
    "numpy.array": {
     "line number": [
      271,
      272,
      282,
      283,
      284,
      285
     ]
    },
    "numpy.core.tests.test_scalarmath.operator": {
     "line number": [
      273,
      275,
      286,
      291,
      293
     ]
    },
    "numpy.inf": {
     "line number": [
      284
     ]
    },
    "numpy.isnan": {
     "line number": [
      287,
      292,
      294
     ]
    },
    "numpy.nan": {
     "line number": [
      285
     ]
    },
    "numpy.nextafter": {
     "line number": [
      272
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      274,
      276,
      287,
      292,
      294
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      279
     ]
    },
    "numpy.typecodes": {
     "line number": [
      270,
      281
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestModulus.test_float_modulus_exact": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      231,
      240
     ]
    },
    "float": {
     "line number": [
      236
     ]
    },
    "int": {
     "line number": [
      233
     ]
    },
    "list": {
     "line number": [
      226,
      227,
      230,
      231
     ]
    },
    "numpy.array": {
     "line number": [
      233,
      236
     ]
    },
    "numpy.core.tests.test_scalarmath.floordiv_and_mod": {
     "line number": [
      240
     ]
    },
    "numpy.core.tests.test_scalarmath.itertools": {
     "line number": [
      230
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      247,
      248
     ]
    },
    "numpy.typecodes": {
     "line number": [
      241
     ]
    },
    "numpy.where": {
     "line number": [
      237,
      238
     ]
    },
    "op": {
     "line number": [
      240,
      246
     ]
    },
    "op.__name__": {
     "line number": [
      242
     ]
    },
    "range": {
     "line number": [
      226,
      227
     ]
    },
    "t": {
     "line number": [
      231,
      231
     ]
    },
    "zip": {
     "line number": [
      246,
      246
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestModulus.test_float_modulus_roundoff": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      253
     ]
    },
    "numpy.array": {
     "line number": [
      258,
      259
     ]
    },
    "numpy.core.tests.test_scalarmath.floordiv_and_mod": {
     "line number": [
      253
     ]
    },
    "numpy.core.tests.test_scalarmath.itertools": {
     "line number": [
      254,
      255
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      264,
      266
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      262
     ]
    },
    "numpy.typecodes": {
     "line number": [
      252
     ]
    },
    "op": {
     "line number": [
      253,
      260
     ]
    },
    "op.__name__": {
     "line number": [
      257
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestModulus.test_modulus_basic": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      209
     ]
    },
    "numpy.array": {
     "line number": [
      214,
      215
     ]
    },
    "numpy.core.tests.test_scalarmath._signs": {
     "line number": [
      211,
      211
     ]
    },
    "numpy.core.tests.test_scalarmath.floordiv_and_mod": {
     "line number": [
      209
     ]
    },
    "numpy.core.tests.test_scalarmath.itertools": {
     "line number": [
      210,
      211
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      219,
      221
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      217
     ]
    },
    "numpy.typecodes": {
     "line number": [
      208,
      208
     ]
    },
    "op": {
     "line number": [
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestMultiply": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": {
    "object": {
     "line number": [
      561
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like": {
  "data": {
   "lineno": 594,
   "symbols_in_volume": {
    "ArrayLike": {
     "line number": [
      605
     ]
    },
    "memoryview": {
     "line number": [
      605
     ]
    },
    "numpy.float32": {
     "line number": [
      606,
      607
     ]
    },
    "numpy.full": {
     "line number": [
      606,
      607,
      608,
      609
     ]
    },
    "numpy.int_": {
     "line number": [
      608,
      609
     ]
    },
    "numpy.ones": {
     "line number": [
      605,
      605
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      606,
      607,
      608,
      609
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": {
    "object": {
     "line number": [
      598
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__array__": {
  "data": {
   "lineno": 601
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__": {
  "data": {
   "lineno": 599
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestMultiply.test_seq_repeat": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      583,
      586
     ]
    },
    "TypeError": {
     "line number": [
      591,
      592
     ]
    },
    "int": {
     "line number": [
      577,
      578,
      584,
      587
     ]
    },
    "list": {
     "line number": [
      573
     ]
    },
    "numpy.core.tests.test_scalarmath.operator": {
     "line number": [
      583,
      586,
      591,
      592
     ]
    },
    "numpy.dtype": {
     "line number": [
      576,
      581,
      590
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      577,
      578,
      582,
      585
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      591,
      592
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      583,
      586
     ]
    },
    "numpy.typecodes": {
     "line number": [
      567,
      570
     ]
    },
    "seq_type": {
     "line number": [
      574
     ]
    },
    "set": {
     "line number": [
      567,
      570
     ]
    },
    "tuple": {
     "line number": [
      573
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestNegative": {
  "data": {
   "lineno": 612,
   "symbols_in_volume": {
    "object": {
     "line number": [
      612
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestNegative.test_exceptions": {
  "data": {
   "lineno": 613,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      615
     ]
    },
    "numpy.bool_": {
     "line number": [
      614
     ]
    },
    "numpy.core.tests.test_scalarmath.operator": {
     "line number": [
      615
     ]
    },
    "numpy.ones": {
     "line number": [
      614
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      615
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestNegative.test_result": {
  "data": {
   "lineno": 617,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      620
     ]
    },
    "numpy.core.tests.test_scalarmath.operator": {
     "line number": [
      623
     ]
    },
    "numpy.core.tests.test_scalarmath.types": {
     "line number": [
      618,
      621
     ]
    },
    "numpy.ones": {
     "line number": [
      622
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      623
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      619
     ]
    },
    "numpy.typecodes": {
     "line number": [
      618,
      618
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestPower": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "object": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestPower.test_integers_to_negative_integer_power": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      140,
      150,
      160
     ]
    },
    "numpy.array": {
     "line number": [
      134,
      137,
      147,
      157
     ]
    },
    "numpy.core.tests.test_scalarmath.itertools": {
     "line number": [
      138,
      148,
      158
     ]
    },
    "numpy.core.tests.test_scalarmath.operator": {
     "line number": [
      140,
      142,
      150,
      152,
      160,
      162
     ]
    },
    "numpy.float64": {
     "line number": [
      143,
      153,
      163
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      143,
      153,
      163
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      144,
      154,
      164
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      140,
      150,
      160
     ]
    },
    "numpy.uint64": {
     "line number": [
      139,
      149,
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestPower.test_large_types": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      121
     ]
    },
    "numpy.float64": {
     "line number": [
      121
     ]
    },
    "numpy.int32": {
     "line number": [
      121
     ]
    },
    "numpy.int64": {
     "line number": [
      121
     ]
    },
    "numpy.integer": {
     "line number": [
      125
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      125
     ]
    },
    "numpy.longdouble": {
     "line number": [
      121
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      126
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      128
     ]
    },
    "t": {
     "line number": [
      121,
      122,
      124,
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestPower.test_mixed_types": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      177
     ]
    },
    "numpy.float16": {
     "line number": [
      167
     ]
    },
    "numpy.float32": {
     "line number": [
      168
     ]
    },
    "numpy.float64": {
     "line number": [
      168
     ]
    },
    "numpy.int16": {
     "line number": [
      167,
      169
     ]
    },
    "numpy.int32": {
     "line number": [
      169
     ]
    },
    "numpy.int64": {
     "line number": [
      169
     ]
    },
    "numpy.int8": {
     "line number": [
      167,
      168
     ]
    },
    "numpy.integer": {
     "line number": [
      177
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      177
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      178
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      180
     ]
    },
    "t1": {
     "line number": [
      172,
      176
     ]
    },
    "t2": {
     "line number": [
      173,
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestPower.test_modular_power": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      190,
      191
     ]
    },
    "numpy.array": {
     "line number": [
      191
     ]
    },
    "numpy.complex64": {
     "line number": [
      188
     ]
    },
    "numpy.core.tests.test_scalarmath.operator": {
     "line number": [
      190,
      191
     ]
    },
    "numpy.float32": {
     "line number": [
      188
     ]
    },
    "numpy.int32": {
     "line number": [
      188
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      190,
      191
     ]
    },
    "pow": {
     "line number": [
      187
     ]
    },
    "t": {
     "line number": [
      188,
      190,
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestPower.test_small_types": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "numpy.float16": {
     "line number": [
      115
     ]
    },
    "numpy.int16": {
     "line number": [
      115
     ]
    },
    "numpy.int8": {
     "line number": [
      115
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      118
     ]
    },
    "t": {
     "line number": [
      116,
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestRepr": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": {
    "object": {
     "line number": [
      514
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestRepr._test_type_repr": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      533
     ]
    },
    "eval": {
     "line number": [
      536
     ]
    },
    "numpy.array": {
     "line number": [
      523
     ]
    },
    "numpy.dtype": {
     "line number": [
      519
     ]
    },
    "numpy.finfo": {
     "line number": [
      516
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      538
     ]
    },
    "numpy.uint8": {
     "line number": [
      523
     ]
    },
    "repr": {
     "line number": [
      535
     ]
    },
    "t": {
     "line number": [
      516,
      519,
      534,
      536
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestRepr.test_float_repr": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      543
     ]
    },
    "numpy.float64": {
     "line number": [
      543
     ]
    },
    "t": {
     "line number": [
      543,
      544
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestSizeOf": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": {
    "object": {
     "line number": [
      549
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestSizeOf.test_equal_nbytes": {
  "data": {
   "lineno": 551,
   "symbols_in_volume": {
    "numpy.core.tests.test_scalarmath.sys": {
     "line number": [
      554
     ]
    },
    "numpy.core.tests.test_scalarmath.types": {
     "line number": [
      552
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      554
     ]
    },
    "type": {
     "line number": [
      552,
      553
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestSizeOf.test_error": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      558
     ]
    },
    "numpy.float32": {
     "line number": [
      557
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      558
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestSubtract": {
  "data": {
   "lineno": 626,
   "symbols_in_volume": {
    "object": {
     "line number": [
      626
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestSubtract.test_exceptions": {
  "data": {
   "lineno": 627,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      629
     ]
    },
    "numpy.bool_": {
     "line number": [
      628
     ]
    },
    "numpy.core.tests.test_scalarmath.operator": {
     "line number": [
      629
     ]
    },
    "numpy.ones": {
     "line number": [
      628
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      629
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestSubtract.test_result": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      634
     ]
    },
    "numpy.core.tests.test_scalarmath.operator": {
     "line number": [
      637
     ]
    },
    "numpy.core.tests.test_scalarmath.types": {
     "line number": [
      632,
      635
     ]
    },
    "numpy.ones": {
     "line number": [
      636
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      637
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      633
     ]
    },
    "numpy.typecodes": {
     "line number": [
      632,
      632
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestTypes": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "object": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarmath.TestTypes.test_leak": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "numpy.add": {
     "line number": [
      64
     ]
    },
    "range": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestTypes.test_type_add": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "atype": {
     "line number": [
      36,
      37,
      38,
      52
     ]
    },
    "btype": {
     "line number": [
      40,
      41,
      52
     ]
    },
    "enumerate": {
     "line number": [
      36,
      39
     ]
    },
    "numpy.array": {
     "line number": [
      38,
      41
     ]
    },
    "numpy.core.tests.test_scalarmath.types": {
     "line number": [
      36,
      39
     ]
    },
    "numpy.dtype": {
     "line number": [
      52,
      52
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestTypes.test_type_create": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "atype": {
     "line number": [
      55,
      56,
      57
     ]
    },
    "enumerate": {
     "line number": [
      55
     ]
    },
    "numpy.array": {
     "line number": [
      56
     ]
    },
    "numpy.core.tests.test_scalarmath.types": {
     "line number": [
      55
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.TestTypes.test_types": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "atype": {
     "line number": [
      31,
      32
     ]
    },
    "numpy.core.tests.test_scalarmath.types": {
     "line number": [
      30
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath._gen_alignment_data": {
  "data": {
   "shadows": "numpy.testing._gen_alignment_data"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath._signs": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "numpy.typecodes": {
     "line number": [
      199
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.complex_floating_types": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.core.tests.test_scalarmath.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.floating_types": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.core.tests.test_scalarmath.floordiv_and_mod": {
  "data": {
   "lineno": 194
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarmath.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarmath.types": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.core.tests.test_scalarmath.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_scalarprint.TemporaryFile": {
  "data": {
   "shadows": "tempfile.TemporaryFile"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint.TestRealScalars": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "object": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_scalarprint.TestRealScalars.float32_roundtrip": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      317,
      318,
      320,
      321
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      319
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      320,
      321
     ]
    },
    "repr": {
     "line number": [
      319,
      319,
      320,
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarprint.TestRealScalars.float64_vs_python": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": {
    "numpy.float64": {
     "line number": [
      325,
      326
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      326
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      325
     ]
    },
    "repr": {
     "line number": [
      325,
      325,
      326,
      326
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarprint.TestRealScalars.test_dragon4": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "fpos32": {
     "line number": [
      110,
      112,
      113,
      116,
      117,
      119,
      120,
      123,
      135,
      144,
      149,
      157,
      183,
      194,
      198,
      202
     ]
    },
    "fpos64": {
     "line number": [
      139,
      146,
      151,
      153,
      161,
      185,
      199,
      203,
      207
     ]
    },
    "fsci32": {
     "line number": [
      111,
      114,
      115,
      118,
      121,
      122,
      124,
      137,
      145,
      200,
      204
     ]
    },
    "fsci64": {
     "line number": [
      125,
      127,
      129,
      141,
      147,
      201,
      205
     ]
    },
    "numpy.finfo": {
     "line number": [
      183,
      185,
      194
     ]
    },
    "numpy.float32": {
     "line number": [
      103,
      104,
      183,
      194
     ]
    },
    "numpy.float64": {
     "line number": [
      105,
      106,
      185
     ]
    },
    "numpy.format_float_positional": {
     "line number": [
      103,
      105
     ]
    },
    "numpy.format_float_scientific": {
     "line number": [
      104,
      106
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      127,
      129,
      135,
      137,
      139,
      141,
      144,
      145,
      146,
      147,
      149,
      151,
      153,
      157,
      161,
      183,
      185,
      194,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      207
     ]
    },
    "preckwd": {
     "line number": [
      125,
      127,
      129,
      135,
      137,
      139,
      141,
      144,
      145,
      146,
      147,
      149,
      151,
      183,
      185
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarprint.TestRealScalars.test_dragon4_interface": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "fpos": {
     "line number": [
      219,
      220,
      221,
      228,
      235,
      238,
      240,
      243,
      245,
      247,
      249,
      251,
      253
     ]
    },
    "fsci": {
     "line number": [
      225,
      229
     ]
    },
    "hasattr": {
     "line number": [
      211
     ]
    },
    "numpy": {
     "line number": [
      211
     ]
    },
    "numpy.float128": {
     "line number": [
      212
     ]
    },
    "numpy.float16": {
     "line number": [
      210,
      241,
      246,
      252
     ]
    },
    "numpy.float32": {
     "line number": [
      210
     ]
    },
    "numpy.float64": {
     "line number": [
      210
     ]
    },
    "numpy.format_float_positional": {
     "line number": [
      214
     ]
    },
    "numpy.format_float_scientific": {
     "line number": [
      215
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      219,
      220,
      221,
      225,
      228,
      229,
      235,
      238,
      240,
      243,
      245,
      247,
      249,
      251,
      253
     ]
    },
    "tp": {
     "line number": [
      219,
      220,
      221,
      225,
      228,
      229,
      235,
      238,
      240,
      241,
      243,
      245,
      246,
      247,
      249,
      251,
      252,
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarprint.TestRealScalars.test_ppc64_ibm_double_double128": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": {
    "numpy.core.tests.test_scalarprint.platform": {
     "line number": [
      255
     ]
    },
    "numpy.core.tests.test_scalarprint.pytest": {
     "line number": [
      255
     ]
    },
    "numpy.float128": {
     "line number": [
      262,
      263,
      310,
      310,
      311
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      313
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      305,
      312
     ]
    },
    "range": {
     "line number": [
      263
     ]
    },
    "str": {
     "line number": [
      263,
      263,
      311,
      312,
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarprint.TestRealScalars.test_py2_float_print": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      89
     ]
    },
    "next": {
     "line number": [
      81
     ]
    },
    "numpy": {
     "line number": [
      90
     ]
    },
    "numpy.core.tests.test_scalarprint.code": {
     "line number": [
      90
     ]
    },
    "numpy.core.tests.test_scalarprint.sys": {
     "line number": [
      84,
      84,
      85,
      85,
      92,
      92
     ]
    },
    "numpy.double": {
     "line number": [
      58
     ]
    },
    "numpy.sqrt": {
     "line number": [
      97
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      63,
      97
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      88
     ]
    },
    "print": {
     "line number": [
      60
     ]
    },
    "repr": {
     "line number": [
      97
     ]
    },
    "str": {
     "line number": [
      63
     ]
    },
    "tempfile.TemporaryFile": {
     "line number": [
      59,
      83,
      83
     ]
    },
    "userinput": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarprint.TestRealScalars.test_py2_float_print.userinput": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "EOFError": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarprint.TestRealScalars.test_scalar_cutoffs": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "check": {
     "line number": [
      43,
      44,
      47,
      48,
      49,
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarprint.TestRealScalars.test_scalar_cutoffs.check": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "numpy.float64": {
     "line number": [
      39,
      40
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      39,
      40
     ]
    },
    "repr": {
     "line number": [
      39,
      40,
      40
     ]
    },
    "str": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarprint.TestRealScalars.test_str": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      30
     ]
    },
    "numpy.float16": {
     "line number": [
      18
     ]
    },
    "numpy.float32": {
     "line number": [
      18
     ]
    },
    "numpy.float64": {
     "line number": [
      18
     ]
    },
    "numpy.inf": {
     "line number": [
      17,
      17
     ]
    },
    "numpy.longdouble": {
     "line number": [
      18
     ]
    },
    "numpy.nan": {
     "line number": [
      17
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      31
     ]
    },
    "repr": {
     "line number": [
      30
     ]
    },
    "str": {
     "line number": [
      31
     ]
    },
    "styp": {
     "line number": [
      31
     ]
    },
    "zip": {
     "line number": [
      28,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_scalarprint.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint.code": {
  "data": {
   "shadows": "code"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_scalarprint.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_shape_base.TestAtleast1d": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "object": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_shape_base.TestAtleast1d.test_0D_array": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      21,
      22,
      24,
      24
     ]
    },
    "numpy.core.atleast_1d": {
     "line number": [
      23,
      23
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast1d.test_1D_array": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      28,
      29,
      31,
      31
     ]
    },
    "numpy.core.atleast_1d": {
     "line number": [
      30,
      30
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast1d.test_2D_array": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      35,
      36
     ]
    },
    "numpy.core.atleast_1d": {
     "line number": [
      37,
      37
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast1d.test_3D_array": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      42,
      43,
      44,
      45
     ]
    },
    "numpy.core.atleast_1d": {
     "line number": [
      46,
      46
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast1d.test_r1array": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "numpy.compat.long": {
     "line number": [
      55
     ]
    },
    "numpy.core.atleast_1d": {
     "line number": [
      53,
      54,
      55,
      56,
      57
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      53,
      54,
      55,
      56,
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast2d": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "object": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_shape_base.TestAtleast2d.test_0D_array": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      62,
      63,
      65,
      65
     ]
    },
    "numpy.core.atleast_2d": {
     "line number": [
      64,
      64
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast2d.test_1D_array": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      69,
      70,
      72,
      72
     ]
    },
    "numpy.core.atleast_2d": {
     "line number": [
      71,
      71
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast2d.test_2D_array": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      76,
      77
     ]
    },
    "numpy.core.atleast_2d": {
     "line number": [
      78,
      78
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast2d.test_3D_array": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      83,
      84,
      85,
      86
     ]
    },
    "numpy.core.atleast_2d": {
     "line number": [
      87,
      87
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast2d.test_r2array": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "numpy.core.atleast_2d": {
     "line number": [
      94,
      95,
      96
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      94,
      95,
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast3d": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "object": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_shape_base.TestAtleast3d.test_0D_array": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      101,
      102,
      104,
      104
     ]
    },
    "numpy.core.atleast_3d": {
     "line number": [
      103,
      103
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast3d.test_1D_array": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      108,
      109,
      111,
      111
     ]
    },
    "numpy.core.atleast_3d": {
     "line number": [
      110,
      110
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast3d.test_2D_array": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      115,
      116
     ]
    },
    "numpy.core.atleast_3d": {
     "line number": [
      117,
      117
     ]
    },
    "numpy.core.newaxis": {
     "line number": [
      118,
      118
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestAtleast3d.test_3D_array": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      122,
      123,
      124,
      125
     ]
    },
    "numpy.core.atleast_3d": {
     "line number": [
      126,
      126
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "object": {
     "line number": [
      398
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_shape_base.TestBlock.block": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      423
     ]
    },
    "numpy.core.block": {
     "line number": [
      421
     ]
    },
    "numpy.core.tests.test_shape_base.pytest": {
     "line number": [
      399
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.block._block_force_concatenate": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": {
    "numpy.core.shape_base._block_concatenate": {
     "line number": [
      410
     ]
    },
    "numpy.core.shape_base._block_setup": {
     "line number": [
      409
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.block._block_force_slicing": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": {
    "numpy.core.shape_base._block_setup": {
     "line number": [
      413
     ]
    },
    "numpy.core.shape_base._block_slicing": {
     "line number": [
      414
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_3d": {
  "data": {
   "lineno": 553,
   "symbols_in_volume": {
    "int": {
     "line number": [
      554,
      556,
      557,
      558,
      560,
      561,
      562,
      564
     ]
    },
    "numpy.core.array": {
     "line number": [
      576
     ]
    },
    "numpy.core.block": {
     "line number": [
      566
     ]
    },
    "numpy.ones": {
     "line number": [
      554,
      556,
      557,
      558,
      560,
      561,
      562,
      564
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      606
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_block_complicated": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      501,
      502,
      503,
      504,
      505,
      506,
      509
     ]
    },
    "numpy.core.block": {
     "line number": [
      516
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      521
     ]
    },
    "numpy.zeros": {
     "line number": [
      507
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_block_memory_order": {
  "data": {
   "lineno": 664,
   "symbols_in_volume": {
    "numpy.core.block": {
     "line number": [
      679,
      680,
      691,
      692
     ]
    },
    "numpy.zeros": {
     "line number": [
      666,
      667,
      682,
      683
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_block_mixed_1d_and_2d": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      492,
      494
     ]
    },
    "numpy.core.block": {
     "line number": [
      493
     ]
    },
    "numpy.ones": {
     "line number": [
      491
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      497
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_block_simple_column_wise": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      458
     ]
    },
    "numpy.core.block": {
     "line number": [
      462
     ]
    },
    "numpy.ones": {
     "line number": [
      456
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      463
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_block_simple_row_wise": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      450
     ]
    },
    "numpy.core.block": {
     "line number": [
      452
     ]
    },
    "numpy.ones": {
     "line number": [
      448
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      453
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_block_total_size_estimate": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": {
    "numpy.core.shape_base._block_setup": {
     "line number": [
      432,
      435,
      438,
      441,
      444
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_column_wise": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      483,
      484,
      485
     ]
    },
    "numpy.core.block": {
     "line number": [
      487
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      488
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_multiple_rows": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      474,
      475,
      476
     ]
    },
    "numpy.core.block": {
     "line number": [
      478
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      479
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_row_wise": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      467,
      468,
      469
     ]
    },
    "numpy.core.block": {
     "line number": [
      470
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      471
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_block_with_mismatched_shape": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      611,
      612,
      616
     ]
    },
    "numpy.array": {
     "line number": [
      609
     ]
    },
    "numpy.core.block": {
     "line number": [
      611,
      612,
      616
     ]
    },
    "numpy.eye": {
     "line number": [
      610
     ]
    },
    "numpy.ones": {
     "line number": [
      614,
      614,
      615,
      615
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      611,
      612,
      616
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_different_ndims": {
  "data": {
   "lineno": 642,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      648
     ]
    },
    "numpy.core.block": {
     "line number": [
      647
     ]
    },
    "numpy.ones": {
     "line number": [
      644,
      645
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      650
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_different_ndims_depths": {
  "data": {
   "lineno": 652,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      658
     ]
    },
    "numpy.core.block": {
     "line number": [
      657
     ]
    },
    "numpy.ones": {
     "line number": [
      654,
      655
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      662
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_empty_lists": {
  "data": {
   "lineno": 633,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      634,
      635,
      636
     ]
    },
    "numpy.core.block": {
     "line number": [
      634,
      635,
      636
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      634,
      635,
      636
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_invalid_nesting": {
  "data": {
   "lineno": 621,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      623,
      624,
      625,
      626,
      627
     ]
    },
    "numpy.core.block": {
     "line number": [
      623,
      624,
      625,
      626,
      627
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      623,
      624,
      625,
      626,
      627
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_nested": {
  "data": {
   "lineno": 523,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      524,
      525,
      526,
      527,
      528,
      529,
      544
     ]
    },
    "numpy.core.block": {
     "line number": [
      532,
      534
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      551
     ]
    },
    "numpy.zeros": {
     "line number": [
      530
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_no_lists": {
  "data": {
   "lineno": 617,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      618
     ]
    },
    "numpy.core.block": {
     "line number": [
      618,
      619
     ]
    },
    "numpy.eye": {
     "line number": [
      619,
      619
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      618,
      619
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_returns_copy": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": {
    "numpy.core.block": {
     "line number": [
      427
     ]
    },
    "numpy.eye": {
     "line number": [
      426
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestBlock.test_tuple": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      639,
      640
     ]
    },
    "numpy.core.block": {
     "line number": [
      639,
      640
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      639,
      640
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestConcatenate": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "object": {
     "line number": [
      208
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_shape_base.TestConcatenate.test_bad_out_shape": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      320,
      321,
      322
     ]
    },
    "numpy.core.array": {
     "line number": [
      317,
      318
     ]
    },
    "numpy.core.concatenate": {
     "line number": [
      320,
      321,
      322,
      323
     ]
    },
    "numpy.empty": {
     "line number": [
      320,
      321,
      322,
      323
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      320,
      321,
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestConcatenate.test_concatenate": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      301
     ]
    },
    "list": {
     "line number": [
      277,
      283
     ]
    },
    "numpy.core.arange": {
     "line number": [
      303
     ]
    },
    "numpy.core.array": {
     "line number": [
      281,
      287,
      293,
      294,
      295
     ]
    },
    "numpy.core.concatenate": {
     "line number": [
      278,
      280,
      281,
      284,
      286,
      287,
      289,
      291,
      296,
      297,
      298,
      299,
      301,
      307,
      308,
      309,
      312
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      313
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      278,
      280,
      281,
      284,
      286,
      287,
      289,
      291,
      296,
      297,
      298,
      299,
      307,
      308,
      309
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      314
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      301
     ]
    },
    "range": {
     "line number": [
      277,
      283
     ]
    },
    "tuple": {
     "line number": [
      280,
      286
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestConcatenate.test_concatenate_axis_None": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "len": {
     "line number": [
      250,
      257
     ]
    },
    "list": {
     "line number": [
      244
     ]
    },
    "numpy.arange": {
     "line number": [
      243
     ]
    },
    "numpy.concatenate": {
     "line number": [
      246,
      249,
      252,
      258,
      259
     ]
    },
    "numpy.core.array": {
     "line number": [
      253
     ]
    },
    "numpy.float64": {
     "line number": [
      243
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      260
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      255
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      247,
      248,
      250,
      251,
      261
     ]
    },
    "numpy.zeros": {
     "line number": [
      257
     ]
    },
    "range": {
     "line number": [
      244
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestConcatenate.test_exceptions": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      224,
      225,
      233,
      234,
      240
     ]
    },
    "list": {
     "line number": [
      230
     ]
    },
    "numpy.AxisError": {
     "line number": [
      220,
      221
     ]
    },
    "numpy.array": {
     "line number": [
      225
     ]
    },
    "numpy.concatenate": {
     "line number": [
      219,
      220,
      221,
      232,
      233,
      234
     ]
    },
    "numpy.core.concatenate": {
     "line number": [
      224,
      225,
      240
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      235,
      236
     ]
    },
    "numpy.ones": {
     "line number": [
      218,
      228,
      229
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      220,
      221,
      224,
      225,
      233,
      234,
      240
     ]
    },
    "range": {
     "line number": [
      230,
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestConcatenate.test_large_concatenate_axis_None": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      266
     ]
    },
    "numpy.concatenate": {
     "line number": [
      267,
      271
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      268,
      272
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestConcatenate.test_out_dtype": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      336
     ]
    },
    "numpy.complex64": {
     "line number": [
      330
     ]
    },
    "numpy.core.array": {
     "line number": [
      327,
      327,
      331,
      331,
      337,
      337
     ]
    },
    "numpy.core.concatenate": {
     "line number": [
      327,
      331,
      336
     ]
    },
    "numpy.empty": {
     "line number": [
      326,
      330,
      335
     ]
    },
    "numpy.float32": {
     "line number": [
      326
     ]
    },
    "numpy.int32": {
     "line number": [
      335
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      328,
      332
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      336
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestConcatenate.test_returns_copy": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      211
     ]
    },
    "numpy.eye": {
     "line number": [
      210
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestHstack": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "object": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_shape_base.TestHstack.test_0D_array": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      139,
      140,
      142
     ]
    },
    "numpy.core.hstack": {
     "line number": [
      141
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestHstack.test_1D_array": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      146,
      147,
      149
     ]
    },
    "numpy.core.hstack": {
     "line number": [
      148
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestHstack.test_2D_array": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      153,
      154,
      156
     ]
    },
    "numpy.core.hstack": {
     "line number": [
      155
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestHstack.test_empty_input": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      136
     ]
    },
    "numpy.core.hstack": {
     "line number": [
      136
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestHstack.test_generator": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      160,
      164
     ]
    },
    "map": {
     "line number": [
      165
     ]
    },
    "numpy.arange": {
     "line number": [
      161
     ]
    },
    "numpy.core.hstack": {
     "line number": [
      161,
      165
     ]
    },
    "numpy.core.tests.test_shape_base.sys": {
     "line number": [
      162
     ]
    },
    "numpy.ones": {
     "line number": [
      165
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      160,
      164
     ]
    },
    "range": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestHstack.test_non_iterable": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      133
     ]
    },
    "numpy.core.hstack": {
     "line number": [
      133
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestVstack": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "object": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_shape_base.TestVstack.test_0D_array": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      176,
      177,
      179
     ]
    },
    "numpy.core.vstack": {
     "line number": [
      178
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestVstack.test_1D_array": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      183,
      184,
      186
     ]
    },
    "numpy.core.vstack": {
     "line number": [
      185
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestVstack.test_2D_array": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      190,
      191,
      193
     ]
    },
    "numpy.core.vstack": {
     "line number": [
      192
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      194
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestVstack.test_2D_array2": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      197,
      198,
      200
     ]
    },
    "numpy.core.vstack": {
     "line number": [
      199
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestVstack.test_empty_input": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      173
     ]
    },
    "numpy.core.vstack": {
     "line number": [
      173
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      173
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestVstack.test_generator": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      204
     ]
    },
    "numpy.arange": {
     "line number": [
      205
     ]
    },
    "numpy.core.vstack": {
     "line number": [
      205
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      204
     ]
    },
    "range": {
     "line number": [
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.TestVstack.test_non_iterable": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      170
     ]
    },
    "numpy.core.vstack": {
     "line number": [
      170
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base._block_concatenate": {
  "data": {
   "shadows": "numpy.core.shape_base._block_concatenate"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base._block_dispatcher": {
  "data": {
   "shadows": "numpy.core.shape_base._block_dispatcher"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base._block_setup": {
  "data": {
   "shadows": "numpy.core.shape_base._block_setup"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base._block_slicing": {
  "data": {
   "shadows": "numpy.core.shape_base._block_slicing"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.arange": {
  "data": {
   "shadows": "numpy.core.arange"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.array": {
  "data": {
   "shadows": "numpy.core.array"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.atleast_1d": {
  "data": {
   "shadows": "numpy.core.atleast_1d"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.atleast_2d": {
  "data": {
   "shadows": "numpy.core.atleast_2d"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.atleast_3d": {
  "data": {
   "shadows": "numpy.core.atleast_3d"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.block": {
  "data": {
   "shadows": "numpy.core.block"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.concatenate": {
  "data": {
   "shadows": "numpy.core.concatenate"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.hstack": {
  "data": {
   "shadows": "numpy.core.hstack"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.newaxis": {
  "data": {
   "shadows": "numpy.core.newaxis"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.stack": {
  "data": {
   "shadows": "numpy.core.stack"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_shape_base.test_block_dispatcher": {
  "data": {
   "lineno": 695,
   "symbols_in_volume": {
    "ArrayLike": {
     "line number": [
      698,
      699,
      700
     ]
    },
    "list": {
     "line number": [
      701,
      702,
      703,
      704,
      706
     ]
    },
    "numpy.core.shape_base._block_dispatcher": {
     "line number": [
      701,
      702,
      703,
      704,
      706
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      701,
      702,
      703,
      704,
      706
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.test_block_dispatcher.ArrayLike": {
  "data": {
   "lineno": 696,
   "symbols_in_volume": {
    "object": {
     "line number": [
      696
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_shape_base.test_stack": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      393
     ]
    },
    "TypeError": {
     "line number": [
      342
     ]
    },
    "ValueError": {
     "line number": [
      381,
      382,
      384,
      386,
      388,
      390
     ]
    },
    "list": {
     "line number": [
      356
     ]
    },
    "numpy.AxisError": {
     "line number": [
      364,
      365
     ]
    },
    "numpy.arange": {
     "line number": [
      383,
      385,
      387,
      391,
      391
     ]
    },
    "numpy.array": {
     "line number": [
      347,
      347,
      347,
      350,
      351,
      395
     ]
    },
    "numpy.core.array": {
     "line number": [
      352,
      357
     ]
    },
    "numpy.core.stack": {
     "line number": [
      342,
      348,
      364,
      365,
      374,
      375,
      381,
      383,
      385,
      387,
      389,
      391,
      394
     ]
    },
    "numpy.int32": {
     "line number": [
      346,
      346,
      346
     ]
    },
    "numpy.random.randn": {
     "line number": [
      359,
      367
     ]
    },
    "numpy.stack": {
     "line number": [
      353,
      354,
      356,
      357,
      363,
      372,
      378
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      374,
      375
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      348,
      353,
      354,
      356,
      357,
      379,
      395
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      363,
      372
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      342
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      364,
      365,
      381,
      382,
      384,
      386,
      388,
      390
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      393
     ]
    },
    "numpy.zeros": {
     "line number": [
      389,
      389
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      377
     ]
    },
    "range": {
     "line number": [
      359,
      367,
      394
     ]
    },
    "zip": {
     "line number": [
      362,
      371
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_shape_base.vstack": {
  "data": {
   "shadows": "numpy.core.vstack"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc": {
  "data": {},
  "type": "module"
 },
 "numpy.core.tests.test_ufunc.TestUfunc": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "object": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.check_identityless_reduction": {
  "data": {
   "lineno": 1300,
   "symbols_in_volume": {
    "numpy.minimum.reduce": {
     "line number": [
      1306,
      1307,
      1308,
      1309,
      1310,
      1312,
      1314,
      1316,
      1320,
      1321,
      1322,
      1323,
      1324,
      1326,
      1328,
      1330,
      1334,
      1335,
      1336,
      1337,
      1338,
      1340,
      1342,
      1344
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1306,
      1307,
      1308,
      1309,
      1310,
      1312,
      1314,
      1316,
      1320,
      1321,
      1322,
      1323,
      1324,
      1326,
      1328,
      1330,
      1334,
      1335,
      1336,
      1337,
      1338,
      1340,
      1342,
      1344
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results": {
  "data": {
   "lineno": 1039,
   "symbols_in_volume": {
    "broadcastable": {
     "line number": [
      1083
     ]
    },
    "numpy.array": {
     "line number": [
      1040,
      1041
     ]
    },
    "numpy.core._umath_tests.matrix_multiply": {
     "line number": [
      1085
     ]
    },
    "numpy.newaxis": {
     "line number": [
      1087
     ]
    },
    "numpy.newaxis.swapaxes": {
     "line number": [
      1086
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1040,
      1041
     ]
    },
    "numpy.sum": {
     "line number": [
      1086
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1084
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1091
     ]
    },
    "permute_n": {
     "line number": [
      1070
     ]
    },
    "slice": {
     "line number": [
      1071
     ]
    },
    "slice_n": {
     "line number": [
      1071
     ]
    },
    "str": {
     "line number": [
      1088,
      1089
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results.broadcastable": {
  "data": {
   "lineno": 1067
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results.permute_n": {
  "data": {
   "lineno": 1044,
   "symbols_in_volume": {
    "permute_n": {
     "line number": [
      1048
     ]
    },
    "range": {
     "line number": [
      1050
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results.slice_n": {
  "data": {
   "lineno": 1057,
   "symbols_in_volume": {
    "slice": {
     "line number": [
      1063,
      1064
     ]
    },
    "slice_n": {
     "line number": [
      1061
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_NotImplemented_not_returned": {
  "data": {
   "lineno": 1816,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1833,
      1834
     ]
    },
    "f": {
     "line number": [
      1832,
      1833,
      1834
     ]
    },
    "numpy.add": {
     "line number": [
      1820
     ]
    },
    "numpy.array": {
     "line number": [
      1829,
      1831
     ]
    },
    "numpy.bitwise_and": {
     "line number": [
      1821
     ]
    },
    "numpy.bitwise_or": {
     "line number": [
      1821
     ]
    },
    "numpy.bitwise_xor": {
     "line number": [
      1822
     ]
    },
    "numpy.divide": {
     "line number": [
      1820
     ]
    },
    "numpy.equal": {
     "line number": [
      1827
     ]
    },
    "numpy.floor_divide": {
     "line number": [
      1821
     ]
    },
    "numpy.fmax": {
     "line number": [
      1822
     ]
    },
    "numpy.fmin": {
     "line number": [
      1823
     ]
    },
    "numpy.fmod": {
     "line number": [
      1823
     ]
    },
    "numpy.greater": {
     "line number": [
      1826
     ]
    },
    "numpy.greater_equal": {
     "line number": [
      1826
     ]
    },
    "numpy.hypot": {
     "line number": [
      1823
     ]
    },
    "numpy.left_shift": {
     "line number": [
      1822
     ]
    },
    "numpy.less": {
     "line number": [
      1826
     ]
    },
    "numpy.less_equal": {
     "line number": [
      1826
     ]
    },
    "numpy.logaddexp": {
     "line number": [
      1823
     ]
    },
    "numpy.logaddexp2": {
     "line number": [
      1823
     ]
    },
    "numpy.logical_and": {
     "line number": [
      1824
     ]
    },
    "numpy.logical_or": {
     "line number": [
      1824
     ]
    },
    "numpy.logical_xor": {
     "line number": [
      1824
     ]
    },
    "numpy.maximum": {
     "line number": [
      1824
     ]
    },
    "numpy.minimum": {
     "line number": [
      1825
     ]
    },
    "numpy.mod": {
     "line number": [
      1825
     ]
    },
    "numpy.multiply": {
     "line number": [
      1820
     ]
    },
    "numpy.not_equal": {
     "line number": [
      1827
     ]
    },
    "numpy.power": {
     "line number": [
      1820
     ]
    },
    "numpy.right_shift": {
     "line number": [
      1822
     ]
    },
    "numpy.subtract": {
     "line number": [
      1820
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1833,
      1834
     ]
    },
    "numpy.true_divide": {
     "line number": [
      1821
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_all_ufunc": {
  "data": {
   "lineno": 208
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_axes_argument": {
  "data": {
   "lineno": 703,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      733,
      737,
      738,
      739,
      742,
      778,
      780,
      781,
      786,
      787,
      788,
      790,
      792,
      802,
      804
     ]
    },
    "ValueError": {
     "line number": [
      735,
      744,
      745,
      747,
      783,
      784,
      794,
      797,
      798,
      799,
      800
     ]
    },
    "inner1d": {
     "line number": [
      709,
      712,
      715,
      718,
      721,
      724,
      727,
      729,
      733,
      735,
      737,
      738,
      739,
      742,
      744,
      745,
      747
     ]
    },
    "mm": {
     "line number": [
      754,
      757,
      760,
      763,
      768,
      773,
      778,
      780,
      781,
      783,
      784,
      786,
      787,
      789,
      791,
      792,
      794,
      797,
      798,
      799,
      800,
      804
     ]
    },
    "numpy.add": {
     "line number": [
      802
     ]
    },
    "numpy.arange": {
     "line number": [
      706,
      707,
      751,
      752
     ]
    },
    "numpy.array": {
     "line number": [
      724
     ]
    },
    "numpy.core._umath_tests.inner1d": {
     "line number": [
      705
     ]
    },
    "numpy.core._umath_tests.matrix_multiply": {
     "line number": [
      750
     ]
    },
    "numpy.empty": {
     "line number": [
      767,
      772
     ]
    },
    "numpy.int32": {
     "line number": [
      724
     ]
    },
    "numpy.int8": {
     "line number": [
      724
     ]
    },
    "numpy.matmul": {
     "line number": [
      755,
      758,
      761,
      764,
      770,
      775
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      769,
      774
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      710,
      713,
      716,
      719,
      722,
      725,
      728,
      730,
      755,
      758,
      761,
      764,
      770,
      775
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      733,
      735,
      737,
      738,
      739,
      742,
      744,
      745,
      747,
      778,
      780,
      781,
      783,
      784,
      786,
      787,
      788,
      790,
      792,
      794,
      797,
      798,
      799,
      800,
      802,
      804
     ]
    },
    "numpy.zeros": {
     "line number": [
      796
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_axis_argument": {
  "data": {
   "lineno": 806,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      838,
      840,
      843,
      848
     ]
    },
    "ValueError": {
     "line number": [
      846
     ]
    },
    "inner1d": {
     "line number": [
      808,
      811,
      813,
      816,
      819,
      838,
      840
     ]
    },
    "mm": {
     "line number": [
      842,
      843
     ]
    },
    "numpy.add": {
     "line number": [
      848
     ]
    },
    "numpy.arange": {
     "line number": [
      809,
      810,
      822,
      823,
      824
     ]
    },
    "numpy.core._umath_tests.cumsum": {
     "line number": [
      827,
      828,
      830,
      833,
      846
     ]
    },
    "numpy.core._umath_tests.inner1d": {
     "line number": [
      808
     ]
    },
    "numpy.core._umath_tests.innerwt": {
     "line number": [
      825
     ]
    },
    "numpy.core._umath_tests.matrix_multiply": {
     "line number": [
      842
     ]
    },
    "numpy.cumsum": {
     "line number": [
      827,
      828,
      832,
      835
     ]
    },
    "numpy.empty": {
     "line number": [
      845
     ]
    },
    "numpy.empty_like": {
     "line number": [
      829
     ]
    },
    "numpy.sum": {
     "line number": [
      826
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      817,
      831,
      834
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      812,
      814,
      818,
      820,
      825,
      827,
      828,
      832,
      835
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      838,
      840,
      843,
      846,
      848
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      815
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_axis_out_of_bounds": {
  "data": {
   "lineno": 1211,
   "symbols_in_volume": {
    "numpy.AxisError": {
     "line number": [
      1213,
      1215,
      1218,
      1220
     ]
    },
    "numpy.array": {
     "line number": [
      1212,
      1214,
      1217,
      1219
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1213,
      1215,
      1218,
      1220
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_broadcast": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      616,
      620,
      624
     ]
    },
    "numpy.arange": {
     "line number": [
      607,
      608,
      611,
      614,
      615,
      618,
      622,
      623
     ]
    },
    "numpy.array": {
     "line number": [
      619
     ]
    },
    "numpy.core._umath_tests.inner1d": {
     "line number": [
      609,
      612,
      616,
      620,
      624
     ]
    },
    "numpy.sum": {
     "line number": [
      609,
      612
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      609,
      612
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      616,
      620,
      624
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_can_ignore_signature": {
  "data": {
   "lineno": 958,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      973,
      991,
      1006,
      1023
     ]
    },
    "numpy.arange": {
     "line number": [
      962,
      963,
      965,
      983,
      985
     ]
    },
    "numpy.core._umath_tests.matmul": {
     "line number": [
      969,
      975,
      980,
      988,
      992,
      996,
      1003,
      1007,
      1011,
      1019,
      1026
     ]
    },
    "numpy.core._umath_tests.matrix_multiply": {
     "line number": [
      967,
      973,
      979,
      987,
      991,
      995,
      1002,
      1006,
      1010,
      1016,
      1023
     ]
    },
    "numpy.newaxis": {
     "line number": [
      964,
      984
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      970,
      976,
      981,
      989,
      993,
      997,
      1004,
      1008,
      1012,
      1017,
      1020,
      1027
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      973,
      991,
      1006,
      1023
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      1015,
      1022
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_casting_out_param": {
  "data": {
   "lineno": 1250,
   "symbols_in_volume": {
    "numpy.add": {
     "line number": [
      1255
     ]
    },
    "numpy.float32": {
     "line number": [
      1259
     ]
    },
    "numpy.float64": {
     "line number": [
      1254
     ]
    },
    "numpy.int64": {
     "line number": [
      1252,
      1253
     ]
    },
    "numpy.ones": {
     "line number": [
      1252,
      1253,
      1254
     ]
    },
    "numpy.subtract": {
     "line number": [
      1260
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1256,
      1261
     ]
    },
    "numpy.zeros": {
     "line number": [
      1258,
      1259
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_cross1d": {
  "data": {
   "lineno": 946,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      954,
      955,
      956
     ]
    },
    "numpy.arange": {
     "line number": [
      955,
      956
     ]
    },
    "numpy.core._umath_tests.cross1d": {
     "line number": [
      949,
      951,
      954,
      955,
      956
     ]
    },
    "numpy.eye": {
     "line number": [
      948,
      954,
      954
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      952
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      949,
      953
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      954,
      955,
      956
     ]
    },
    "numpy.vstack": {
     "line number": [
      953
     ]
    },
    "numpy.zeros": {
     "line number": [
      949,
      950,
      953,
      956
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_cumsum": {
  "data": {
   "lineno": 1103,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1104
     ]
    },
    "numpy.core._umath_tests.cumsum": {
     "line number": [
      1105
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like": {
  "data": {
   "lineno": 1562,
   "symbols_in_volume": {
    "MyThing": {
     "line number": [
      1589
     ]
    },
    "MyThing.getitem_count": {
     "line number": [
      1591,
      1591
     ]
    },
    "MyThing.rmul_count": {
     "line number": [
      1590,
      1590
     ]
    },
    "numpy.float64": {
     "line number": [
      1589
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1590,
      1591
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing": {
  "data": {
   "lineno": 1564,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1564
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__getitem__": {
  "data": {
   "lineno": 1576,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      1581
     ]
    },
    "MyThing": {
     "line number": [
      1583
     ]
    },
    "isinstance": {
     "line number": [
      1578
     ]
    },
    "len": {
     "line number": [
      1580,
      1583
     ]
    },
    "tuple": {
     "line number": [
      1578
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__": {
  "data": {
   "lineno": 1570
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__len__": {
  "data": {
   "lineno": 1573
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__rmul__": {
  "data": {
   "lineno": 1585,
   "symbols_in_volume": {
    "MyThing.rmul_count": {
     "line number": [
      1586
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_custom_ufunc": {
  "data": {
   "lineno": 1536,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1537,
      1542,
      1549
     ]
    },
    "numpy.core._rational_tests.rational": {
     "line number": [
      1538,
      1539,
      1540,
      1541,
      1543,
      1544,
      1545,
      1546,
      1550,
      1551,
      1552,
      1553
     ]
    },
    "numpy.core._rational_tests.test_add_rationals": {
     "line number": [
      1548
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1554
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_custom_ufunc_forced_sig": {
  "data": {
   "lineno": 1556,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1558
     ]
    },
    "int": {
     "line number": [
      1560
     ]
    },
    "numpy.core._rational_tests.rational": {
     "line number": [
      1559,
      1560
     ]
    },
    "numpy.multiply": {
     "line number": [
      1559
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1558
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_endian": {
  "data": {
   "lineno": 637,
   "symbols_in_volume": {
    "numpy.absolute": {
     "line number": [
      655,
      656
     ]
    },
    "numpy.arange": {
     "line number": [
      639,
      643,
      648,
      649
     ]
    },
    "numpy.core._umath_tests.inner1d": {
     "line number": [
      640,
      644
     ]
    },
    "numpy.dtype": {
     "line number": [
      650,
      651,
      652,
      653,
      655,
      656,
      657,
      658
     ]
    },
    "numpy.negative": {
     "line number": [
      657,
      658
     ]
    },
    "numpy.sum": {
     "line number": [
      640,
      644
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      640,
      644
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      650,
      651,
      652,
      653,
      655,
      656,
      657,
      658
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_euclidean_pdist": {
  "data": {
   "lineno": 1093,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1101
     ]
    },
    "bool": {
     "line number": [
      1098
     ]
    },
    "float": {
     "line number": [
      1094
     ]
    },
    "numpy.arange": {
     "line number": [
      1094
     ]
    },
    "numpy.core._umath_tests.euclidean_pdist": {
     "line number": [
      1096,
      1101
     ]
    },
    "numpy.empty": {
     "line number": [
      1095
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1097
     ]
    },
    "numpy.sum": {
     "line number": [
      1097
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1099
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1101
     ]
    },
    "numpy.tri": {
     "line number": [
      1098
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_forced_sig": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": {
    "numpy.add": {
     "line number": [
      427,
      428,
      429,
      430,
      431,
      435,
      438,
      441,
      444,
      447
     ]
    },
    "numpy.arange": {
     "line number": [
      426
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      427,
      428,
      429,
      430,
      431,
      436,
      439,
      442,
      445,
      448
     ]
    },
    "numpy.zeros": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "fone": {
     "line number": [
      128,
      132,
      136,
      140,
      144,
      148
     ]
    },
    "foo": {
     "line number": [
      191,
      202
     ]
    },
    "ftwo": {
     "line number": [
      153,
      157,
      161,
      165,
      169,
      173
     ]
    },
    "len": {
     "line number": [
      190,
      201
     ]
    },
    "numpy.abs": {
     "line number": [
      186
     ]
    },
    "numpy.add": {
     "line number": [
      197
     ]
    },
    "numpy.all": {
     "line number": [
      186,
      192,
      197,
      203
     ]
    },
    "numpy.cdouble": {
     "line number": [
      143,
      168
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      147,
      172
     ]
    },
    "numpy.conjugate": {
     "line number": [
      192
     ]
    },
    "numpy.csingle": {
     "line number": [
      139,
      164
     ]
    },
    "numpy.double": {
     "line number": [
      131,
      156
     ]
    },
    "numpy.exp": {
     "line number": [
      121
     ]
    },
    "numpy.logical_xor": {
     "line number": [
      203
     ]
    },
    "numpy.longdouble": {
     "line number": [
      135,
      160
     ]
    },
    "numpy.ones": {
     "line number": [
      152,
      156,
      160,
      164,
      168,
      172,
      185,
      196
     ]
    },
    "numpy.single": {
     "line number": [
      127,
      152
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      186,
      192,
      197,
      203
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      128,
      132,
      136,
      140,
      144,
      148,
      153,
      157,
      161,
      165,
      169,
      173
     ]
    },
    "numpy.zeros": {
     "line number": [
      127,
      131,
      135,
      139,
      143,
      147,
      189,
      200
     ]
    },
    "object": {
     "line number": [
      185,
      189,
      196,
      200
     ]
    },
    "range": {
     "line number": [
      190,
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "object": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo.conjugate": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo.logical_xor": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_get_signature": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "numpy.core._umath_tests.inner1d.signature": {
     "line number": [
      423
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      423
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_corder": {
  "data": {
   "lineno": 1346,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      1347
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_forder": {
  "data": {
   "lineno": 1350,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      1351
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig": {
  "data": {
   "lineno": 1358,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      1359
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig_unaligned": {
  "data": {
   "lineno": 1363,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      1364
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_nonreorderable": {
  "data": {
   "lineno": 1399,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1411
     ]
    },
    "numpy.array": {
     "line number": [
      1400
     ]
    },
    "numpy.divide.reduce": {
     "line number": [
      1402,
      1405,
      1408,
      1411
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1403,
      1406,
      1409
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1411
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_otherorder": {
  "data": {
   "lineno": 1354,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      1355
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_incontiguous_array": {
  "data": {
   "lineno": 660,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      662,
      669
     ]
    },
    "numpy.core._umath_tests.inner1d": {
     "line number": [
      668,
      674
     ]
    },
    "numpy.sum": {
     "line number": [
      668,
      674
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      668,
      674
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      667,
      673
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_initial_reduction": {
  "data": {
   "lineno": 1370,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1388,
      1389
     ]
    },
    "numpy._NoValue": {
     "line number": [
      1392
     ]
    },
    "numpy.add.reduce": {
     "line number": [
      1389,
      1392,
      1396
     ]
    },
    "numpy.array": {
     "line number": [
      1395
     ]
    },
    "numpy.inf": {
     "line number": [
      1378,
      1378,
      1379,
      1379
     ]
    },
    "numpy.maximum.reduce": {
     "line number": [
      1375,
      1379,
      1383,
      1384
     ]
    },
    "numpy.minimum.reduce": {
     "line number": [
      1378,
      1382,
      1385,
      1388
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1375,
      1378,
      1379,
      1382,
      1383,
      1384,
      1385,
      1392,
      1397
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1388,
      1389
     ]
    },
    "object": {
     "line number": [
      1395
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_inner1d": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      600,
      602
     ]
    },
    "numpy.core._umath_tests.inner1d": {
     "line number": [
      601,
      603
     ]
    },
    "numpy.sum": {
     "line number": [
      601,
      603
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      601,
      603
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_innerwt": {
  "data": {
   "lineno": 929,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      930,
      931,
      932,
      934,
      935,
      936
     ]
    },
    "numpy.core._umath_tests.innerwt": {
     "line number": [
      933,
      937
     ]
    },
    "numpy.sum": {
     "line number": [
      933,
      937
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      933,
      937
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_innerwt_empty": {
  "data": {
   "lineno": 939,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      941,
      942,
      943
     ]
    },
    "numpy.core._umath_tests.innerwt": {
     "line number": [
      944
     ]
    },
    "numpy.sum": {
     "line number": [
      944
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      944
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_inplace_fancy_indexing": {
  "data": {
   "lineno": 1593,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      1692,
      1693
     ]
    },
    "TypeError": {
     "line number": [
      1725
     ]
    },
    "ValueError": {
     "line number": [
      1729
     ]
    },
    "numpy.add.at": {
     "line number": [
      1596,
      1601,
      1606,
      1611,
      1627,
      1632,
      1648,
      1653,
      1669,
      1689,
      1692,
      1693,
      1714,
      1720,
      1725
     ]
    },
    "numpy.arange": {
     "line number": [
      1595,
      1599,
      1604,
      1609,
      1625,
      1630,
      1646,
      1651,
      1667,
      1683,
      1696,
      1701,
      1707,
      1712,
      1715,
      1729
     ]
    },
    "numpy.array": {
     "line number": [
      1600,
      1605,
      1610,
      1626,
      1631,
      1647,
      1652,
      1668,
      1688,
      1698,
      1718,
      1719,
      1724,
      1726
     ]
    },
    "numpy.dtype": {
     "line number": [
      1718,
      1719
     ]
    },
    "numpy.equal.at": {
     "line number": [
      1703
     ]
    },
    "numpy.invert.at": {
     "line number": [
      1708
     ]
    },
    "numpy.modf.at": {
     "line number": [
      1729
     ]
    },
    "numpy.negative.at": {
     "line number": [
      1684
     ]
    },
    "numpy.power.at": {
     "line number": [
      1697
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1715,
      1721,
      1726
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1597,
      1602,
      1607,
      1612,
      1628,
      1633,
      1649,
      1654,
      1670,
      1685,
      1690,
      1698,
      1704,
      1709
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1692,
      1693,
      1725,
      1729
     ]
    },
    "object": {
     "line number": [
      1724,
      1726
     ]
    },
    "slice": {
     "line number": [
      1606,
      1611,
      1611,
      1627,
      1632,
      1632,
      1653,
      1669,
      1669,
      1669
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_keepdims_argument": {
  "data": {
   "lineno": 850,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      921,
      924,
      925,
      927
     ]
    },
    "inner1d": {
     "line number": [
      852,
      855,
      857,
      859,
      862,
      866,
      868,
      870,
      872,
      874,
      876,
      878,
      880,
      882,
      884,
      887,
      890,
      893,
      921
     ]
    },
    "mm": {
     "line number": [
      923,
      924,
      925
     ]
    },
    "numpy.add": {
     "line number": [
      927
     ]
    },
    "numpy.arange": {
     "line number": [
      853,
      854,
      897,
      903,
      912,
      913,
      914
     ]
    },
    "numpy.core._umath_tests.inner1d": {
     "line number": [
      852
     ]
    },
    "numpy.core._umath_tests.innerwt": {
     "line number": [
      915,
      917
     ]
    },
    "numpy.core._umath_tests.matrix_multiply": {
     "line number": [
      923
     ]
    },
    "numpy.eye": {
     "line number": [
      897,
      903
     ]
    },
    "numpy.linalg._umath_linalg.det": {
     "line number": [
      898,
      899,
      901
     ]
    },
    "numpy.linalg._umath_linalg.slogdet": {
     "line number": [
      904,
      905,
      908
     ]
    },
    "numpy.newaxis": {
     "line number": [
      897,
      897,
      902,
      902,
      903,
      903,
      909,
      909,
      910,
      910
     ]
    },
    "numpy.sum": {
     "line number": [
      916,
      918
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      863
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      856,
      858,
      860,
      864,
      867,
      869,
      871,
      873,
      875,
      877,
      879,
      881,
      883,
      885,
      888,
      891,
      894,
      900,
      902,
      906,
      907,
      909,
      910,
      915,
      917
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      921,
      924,
      925,
      927
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      861
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_matrix_multiply": {
  "data": {
   "lineno": 1029,
   "symbols_in_volume": {
    "numpy.double": {
     "line number": [
      1031
     ]
    },
    "numpy.long": {
     "line number": [
      1030
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_matrix_multiply_umath_empty": {
  "data": {
   "lineno": 1033,
   "symbols_in_volume": {
    "numpy.core._umath_tests.matrix_multiply": {
     "line number": [
      1034,
      1036
     ]
    },
    "numpy.ones": {
     "line number": [
      1034,
      1034,
      1036,
      1036
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1035,
      1037
     ]
    },
    "numpy.zeros": {
     "line number": [
      1035,
      1037
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_no_doc_string": {
  "data": {
   "lineno": 1857,
   "symbols_in_volume": {
    "numpy.core._umath_tests.inner1d_no_doc.__doc__": {
     "line number": [
      1859
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1859
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_object_array_accumulate_inplace": {
  "data": {
   "lineno": 1166,
   "symbols_in_volume": {
    "numpy.add.accumulate": {
     "line number": [
      1171,
      1172,
      1178,
      1179
     ]
    },
    "numpy.array": {
     "line number": [
      1173,
      1180
     ]
    },
    "numpy.ones": {
     "line number": [
      1168,
      1176
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1173,
      1180
     ]
    },
    "object": {
     "line number": [
      1168,
      1176
     ]
    },
    "range": {
     "line number": [
      1169,
      1177
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_object_array_reduceat_inplace": {
  "data": {
   "lineno": 1182,
   "symbols_in_volume": {
    "numpy.add.reduceat": {
     "line number": [
      1188,
      1189,
      1197,
      1198
     ]
    },
    "numpy.arange": {
     "line number": [
      1188,
      1189,
      1197,
      1198
     ]
    },
    "numpy.empty": {
     "line number": [
      1184,
      1186
     ]
    },
    "numpy.ones": {
     "line number": [
      1193,
      1195
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1190,
      1199
     ]
    },
    "object": {
     "line number": [
      1184,
      1186,
      1193,
      1195
     ]
    },
    "range": {
     "line number": [
      1185,
      1187,
      1194,
      1196
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_object_array_reduction": {
  "data": {
   "lineno": 1149,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      1159
     ]
    },
    "numpy.any": {
     "line number": [
      1158
     ]
    },
    "numpy.array": {
     "line number": [
      1151,
      1155,
      1162,
      1163,
      1164
     ]
    },
    "numpy.max": {
     "line number": [
      1153,
      1160
     ]
    },
    "numpy.min": {
     "line number": [
      1154,
      1161
     ]
    },
    "numpy.prod": {
     "line number": [
      1157
     ]
    },
    "numpy.sum": {
     "line number": [
      1152,
      1156
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1152,
      1153,
      1154,
      1156,
      1157,
      1158,
      1159,
      1160,
      1161,
      1162,
      1163,
      1164
     ]
    },
    "object": {
     "line number": [
      1151,
      1155,
      1162,
      1163,
      1164
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_object_comparison": {
  "data": {
   "lineno": 1134,
   "symbols_in_volume": {
    "HasComparisons": {
     "line number": [
      1139,
      1144
     ]
    },
    "numpy.array": {
     "line number": [
      1139,
      1144,
      1145,
      1146,
      1147
     ]
    },
    "numpy.equal": {
     "line number": [
      1141,
      1142,
      1146,
      1147
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1140,
      1141,
      1142,
      1145,
      1146,
      1147
     ]
    },
    "object": {
     "line number": [
      1142,
      1147
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_object_comparison.HasComparisons": {
  "data": {
   "lineno": 1135,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1135
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_object_comparison.HasComparisons.__eq__": {
  "data": {
   "lineno": 1136
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_object_logical": {
  "data": {
   "lineno": 1108,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1109,
      1111,
      1113,
      1115,
      1117,
      1120,
      1122,
      1124,
      1126,
      1129
     ]
    },
    "numpy.logical_and": {
     "line number": [
      1119,
      1121,
      1123,
      1125
     ]
    },
    "numpy.logical_and.reduce": {
     "line number": [
      1132
     ]
    },
    "numpy.logical_not": {
     "line number": [
      1128
     ]
    },
    "numpy.logical_or": {
     "line number": [
      1110,
      1112,
      1114,
      1116
     ]
    },
    "numpy.logical_or.reduce": {
     "line number": [
      1131
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1110,
      1112,
      1114,
      1116,
      1119,
      1121,
      1123,
      1125,
      1128,
      1131,
      1132
     ]
    },
    "object": {
     "line number": [
      1109,
      1111,
      1113,
      1115,
      1117,
      1120,
      1122,
      1124,
      1126,
      1129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_operand_flags": {
  "data": {
   "lineno": 1514,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1515,
      1516
     ]
    },
    "numpy.array": {
     "line number": [
      1518,
      1521
     ]
    },
    "numpy.core._operand_flag_tests.inplace_add": {
     "line number": [
      1517,
      1522,
      1524
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1518,
      1523,
      1525
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_output_argument": {
  "data": {
   "lineno": 676,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      678,
      679
     ]
    },
    "numpy.core._umath_tests.inner1d": {
     "line number": [
      681,
      684,
      689,
      692,
      697,
      700
     ]
    },
    "numpy.sum": {
     "line number": [
      682,
      685,
      690,
      693,
      698,
      701
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      682,
      685,
      690,
      693,
      698,
      701
     ]
    },
    "numpy.zeros": {
     "line number": [
      680,
      688,
      696
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_pickle": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "numpy.core._rational_tests.test_add": {
     "line number": [
      53,
      55
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      47
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      48,
      53
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      48,
      53
     ]
    },
    "numpy.sin": {
     "line number": [
      48,
      49
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      48,
      55
     ]
    },
    "range": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_pickle_withstring": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      60
     ]
    },
    "numpy.cos": {
     "line number": [
      60
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_arguments": {
  "data": {
   "lineno": 1731,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1759,
      1761,
      1763,
      1764,
      1765,
      1768,
      1769,
      1770,
      1772,
      1773,
      1774,
      1779,
      1783,
      1784,
      1785,
      1787,
      1789
     ]
    },
    "f": {
     "line number": [
      1732,
      1736,
      1738,
      1739,
      1740,
      1741,
      1742,
      1743,
      1744,
      1745,
      1746,
      1747,
      1748,
      1749,
      1750,
      1751,
      1753,
      1754,
      1755,
      1756,
      1759,
      1761,
      1763,
      1764,
      1765,
      1768,
      1769,
      1770,
      1772,
      1773,
      1774,
      1779,
      1783,
      1784,
      1785,
      1787,
      1789
     ]
    },
    "int": {
     "line number": [
      1733
     ]
    },
    "numpy.add.reduce": {
     "line number": [
      1732
     ]
    },
    "numpy.ones": {
     "line number": [
      1733,
      1734
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1736,
      1738,
      1739,
      1740,
      1741,
      1742,
      1743,
      1744,
      1745,
      1746,
      1747,
      1748,
      1749,
      1750,
      1751,
      1753,
      1754,
      1755,
      1756
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1759,
      1761,
      1763,
      1764,
      1765,
      1768,
      1769,
      1770,
      1772,
      1773,
      1774,
      1779,
      1783,
      1784,
      1785,
      1787,
      1789
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_noncontig_output": {
  "data": {
   "lineno": 1836,
   "symbols_in_volume": {
    "numpy.add.reduce": {
     "line number": [
      1849,
      1850
     ]
    },
    "numpy.arange": {
     "line number": [
      1842,
      1844
     ]
    },
    "numpy.int16": {
     "line number": [
      1842,
      1844
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1853,
      1854,
      1855
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis": {
  "data": {
   "lineno": 1413,
   "symbols_in_volume": {
    "err": {
     "line number": [
      1457
     ]
    },
    "numpy.add": {
     "line number": [
      1472
     ]
    },
    "numpy.add.reduce": {
     "line number": [
      1462,
      1463,
      1464,
      1465,
      1466,
      1467
     ]
    },
    "numpy.maximum": {
     "line number": [
      1472
     ]
    },
    "numpy.maximum.identity": {
     "line number": [
      1452
     ]
    },
    "numpy.maximum.reduce": {
     "line number": [
      1453,
      1454,
      1455,
      1456,
      1457,
      1458
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1452
     ]
    },
    "numpy.zeros": {
     "line number": [
      1458,
      1467,
      1473,
      1474,
      1475,
      1476
     ]
    },
    "t": {
     "line number": [
      1453,
      1454,
      1455,
      1456,
      1462,
      1463,
      1464,
      1465
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.err": {
  "data": {
   "lineno": 1430,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1431
     ]
    },
    "f": {
     "line number": [
      1431
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1431
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.ok": {
  "data": {
   "lineno": 1427,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1428
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.t": {
  "data": {
   "lineno": 1433,
   "symbols_in_volume": {
    "expect": {
     "line number": [
      1434,
      1435,
      1436,
      1437,
      1438,
      1439,
      1440,
      1445,
      1446,
      1447,
      1448,
      1449
     ]
    },
    "numpy.zeros": {
     "line number": [
      1434,
      1435,
      1436,
      1437,
      1438,
      1439,
      1440,
      1445,
      1446,
      1447,
      1448,
      1449
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_reduceat_shifting_sum": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "list": {
     "line number": [
      65
     ]
    },
    "numpy.add.reduceat": {
     "line number": [
      66
     ]
    },
    "numpy.arange": {
     "line number": [
      64,
      65,
      65
     ]
    },
    "numpy.array": {
     "line number": [
      65
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      66
     ]
    },
    "zip": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_safe_casting": {
  "data": {
   "lineno": 1478,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1487,
      1492
     ]
    },
    "int": {
     "line number": [
      1483
     ]
    },
    "numpy.add": {
     "line number": [
      1485,
      1487,
      1494
     ]
    },
    "numpy.array": {
     "line number": [
      1483
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1485,
      1495
     ]
    },
    "numpy.testing.assert_no_warnings": {
     "line number": [
      1485,
      1494
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1487,
      1492
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_safe_casting.add_inplace": {
  "data": {
   "lineno": 1489
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_scalar_equal": {
  "data": {
   "lineno": 1806,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1809,
      1810
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1811,
      1812,
      1813,
      1814
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_scalar_reduction": {
  "data": {
   "lineno": 1222,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      1228
     ]
    },
    "numpy.any": {
     "line number": [
      1227,
      1242,
      1248
     ]
    },
    "numpy.array": {
     "line number": [
      1247
     ]
    },
    "numpy.bool_": {
     "line number": [
      1242
     ]
    },
    "numpy.float32": {
     "line number": [
      1236,
      1236,
      1237,
      1237,
      1238,
      1238,
      1239,
      1239
     ]
    },
    "numpy.max": {
     "line number": [
      1229,
      1238
     ]
    },
    "numpy.min": {
     "line number": [
      1230,
      1239
     ]
    },
    "numpy.power.reduce": {
     "line number": [
      1233
     ]
    },
    "numpy.prod": {
     "line number": [
      1226,
      1236
     ]
    },
    "numpy.sum": {
     "line number": [
      1225,
      1237
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1236,
      1237,
      1238,
      1239,
      1242,
      1248
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1225,
      1226,
      1227,
      1228,
      1229,
      1230,
      1233
     ]
    },
    "type": {
     "line number": [
      1236,
      1237,
      1238,
      1239,
      1242,
      1248
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_scalar_reduction.MyArray": {
  "data": {
   "lineno": 1245,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      1245
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature0": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": {
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      296
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      298,
      299,
      300,
      301,
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature1": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      306
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      308,
      309,
      310,
      311,
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature2": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      316
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      318,
      319,
      320,
      321,
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature3": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": {
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      325
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      327,
      328,
      329,
      330,
      331
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature4": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": {
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      335
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      337,
      338,
      339,
      340,
      341
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature5": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      345
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      347,
      348,
      349,
      350,
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature6": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": {
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      356
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      358,
      359,
      360,
      361,
      362
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature7": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      365
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      367,
      368,
      369,
      370,
      371
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature8": {
  "data": {
   "lineno": 373,
   "symbols_in_volume": {
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      374
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      376,
      377,
      378,
      379,
      380
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature_failure0": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      392
     ]
    },
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      390
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      391
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature_failure1": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      401
     ]
    },
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      399
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      400
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature_failure2": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      410
     ]
    },
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      408
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      409
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_signature_failure3": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      419
     ]
    },
    "numpy.core._umath_tests.test_signature": {
     "line number": [
      417
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      418
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_struct_ufunc": {
  "data": {
   "lineno": 1527,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1530,
      1531,
      1534
     ]
    },
    "numpy.core._struct_ufunc_tests.add_triplet": {
     "line number": [
      1533
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1534
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_structured_equal": {
  "data": {
   "lineno": 1792,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1803
     ]
    },
    "numpy.all": {
     "line number": [
      1804
     ]
    },
    "numpy.arange": {
     "line number": [
      1799
     ]
    },
    "numpy.array": {
     "line number": [
      1803
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1804
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_structured_equal.MyA": {
  "data": {
   "lineno": 1795,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      1795
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_structured_equal.MyA.__array_ufunc__": {
  "data": {
   "lineno": 1796,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      1797
     ]
    },
    "input": {
     "line number": [
      1798
     ]
    },
    "input.view": {
     "line number": [
      1797
     ]
    },
    "numpy.ndarray": {
     "line number": [
      1797
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_sum": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": {
    "dt": {
     "line number": [
      535,
      536,
      549,
      559
     ]
    },
    "int": {
     "line number": [
      532
     ]
    },
    "len": {
     "line number": [
      544,
      547
     ]
    },
    "numpy.arange": {
     "line number": [
      536
     ]
    },
    "numpy.core.tests.test_ufunc.warnings": {
     "line number": [
      541,
      542
     ]
    },
    "numpy.float16": {
     "line number": [
      532
     ]
    },
    "numpy.float32": {
     "line number": [
      532
     ]
    },
    "numpy.float64": {
     "line number": [
      532
     ]
    },
    "numpy.isfinite": {
     "line number": [
      539
     ]
    },
    "numpy.longdouble": {
     "line number": [
      532
     ]
    },
    "numpy.ones": {
     "line number": [
      549,
      559
     ]
    },
    "numpy.sum": {
     "line number": [
      543,
      546,
      550,
      551,
      552,
      553,
      554,
      555,
      556,
      557
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      543,
      546,
      550,
      551,
      552,
      553,
      554,
      555,
      556,
      557,
      561
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      544,
      547
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_sum_complex": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": {
    "dt": {
     "line number": [
      564,
      567,
      567,
      568,
      574,
      584
     ]
    },
    "numpy.arange": {
     "line number": [
      569,
      570
     ]
    },
    "numpy.clongdouble": {
     "line number": [
      564
     ]
    },
    "numpy.complex128": {
     "line number": [
      564
     ]
    },
    "numpy.complex64": {
     "line number": [
      564
     ]
    },
    "numpy.empty": {
     "line number": [
      568
     ]
    },
    "numpy.ones": {
     "line number": [
      574,
      584
     ]
    },
    "numpy.sum": {
     "line number": [
      571,
      572,
      575,
      576,
      577,
      578,
      579,
      580,
      581,
      582
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      571,
      572,
      575,
      576,
      577,
      578,
      579,
      580,
      581,
      582,
      586
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_sum_initial": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": {
    "numpy.int64": {
     "line number": [
      596
     ]
    },
    "numpy.ones": {
     "line number": [
      596
     ]
    },
    "numpy.sum": {
     "line number": [
      590,
      593,
      596
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      593
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      590,
      596
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_sum_stability": {
  "data": {
   "lineno": 524,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      525
     ]
    },
    "numpy.float64": {
     "line number": [
      528
     ]
    },
    "numpy.ones": {
     "line number": [
      525,
      528
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      526,
      529
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_true_divide": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      485,
      491
     ]
    },
    "complex": {
     "line number": [
      465,
      465,
      506,
      506
     ]
    },
    "float": {
     "line number": [
      467,
      467,
      493,
      493
     ]
    },
    "max": {
     "line number": [
      470,
      494,
      495,
      507,
      508
     ]
    },
    "numpy.array": {
     "line number": [
      451,
      452,
      453
     ]
    },
    "numpy.bool_": {
     "line number": [
      516
     ]
    },
    "numpy.core.tests.test_ufunc.itertools": {
     "line number": [
      461
     ]
    },
    "numpy.dtype": {
     "line number": [
      456,
      484,
      488,
      505
     ]
    },
    "numpy.errstate": {
     "line number": [
      497
     ]
    },
    "numpy.finfo": {
     "line number": [
      470,
      494,
      495,
      507,
      508
     ]
    },
    "numpy.isfinite": {
     "line number": [
      499,
      510
     ]
    },
    "numpy.ones": {
     "line number": [
      516
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      474,
      476,
      502,
      513,
      518,
      519,
      521,
      522
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      471,
      501,
      512
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      485,
      491
     ]
    },
    "numpy.true_divide": {
     "line number": [
      469,
      485,
      491,
      498,
      509,
      517,
      520
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_type_cast": {
  "data": {
   "lineno": 626,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      628,
      632
     ]
    },
    "numpy.core._umath_tests.inner1d": {
     "line number": [
      629,
      634
     ]
    },
    "numpy.sum": {
     "line number": [
      629,
      634
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      634
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      629
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_ufunc_custom_out": {
  "data": {
   "lineno": 1497,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1511
     ]
    },
    "numpy.array": {
     "line number": [
      1500,
      1501,
      1507
     ]
    },
    "numpy.core._rational_tests.rational": {
     "line number": [
      1502,
      1507
     ]
    },
    "numpy.core._rational_tests.test_add": {
     "line number": [
      1506,
      1512
     ]
    },
    "numpy.empty": {
     "line number": [
      1502
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1508
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1511
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_where_param": {
  "data": {
   "lineno": 1263,
   "symbols_in_volume": {
    "numpy.add": {
     "line number": [
      1268
     ]
    },
    "numpy.arange": {
     "line number": [
      1265,
      1271
     ]
    },
    "numpy.ones": {
     "line number": [
      1266
     ]
    },
    "numpy.power": {
     "line number": [
      1272
     ]
    },
    "numpy.subtract": {
     "line number": [
      1275
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1269,
      1273,
      1276
     ]
    },
    "numpy.zeros": {
     "line number": [
      1267
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_where_param_alloc": {
  "data": {
   "lineno": 1289,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1292,
      1297
     ]
    },
    "numpy.array": {
     "line number": [
      1291,
      1292,
      1296,
      1297
     ]
    },
    "numpy.float64": {
     "line number": [
      1296
     ]
    },
    "numpy.int64": {
     "line number": [
      1291
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1293,
      1298
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1293,
      1298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_where_param_buffer_output": {
  "data": {
   "lineno": 1278,
   "symbols_in_volume": {
    "numpy.add": {
     "line number": [
      1286
     ]
    },
    "numpy.float64": {
     "line number": [
      1285
     ]
    },
    "numpy.int64": {
     "line number": [
      1283,
      1284
     ]
    },
    "numpy.ones": {
     "line number": [
      1283,
      1284,
      1285
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1287
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfunc.test_zerosize_reduction": {
  "data": {
   "lineno": 1201,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1208,
      1209
     ]
    },
    "numpy.all": {
     "line number": [
      1207
     ]
    },
    "numpy.any": {
     "line number": [
      1206
     ]
    },
    "numpy.array": {
     "line number": [
      1203
     ]
    },
    "numpy.max": {
     "line number": [
      1208
     ]
    },
    "numpy.min": {
     "line number": [
      1209
     ]
    },
    "numpy.prod": {
     "line number": [
      1205
     ]
    },
    "numpy.sum": {
     "line number": [
      1204
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1204,
      1205,
      1206,
      1207
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1208,
      1209
     ]
    },
    "object": {
     "line number": [
      1203
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfuncKwargs": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "object": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_ufunc.TestUfuncKwargs.test_extobj_refcount": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      42
     ]
    },
    "numpy.add": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfuncKwargs.test_kwarg_exact": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28
     ]
    },
    "int": {
     "line number": [
      22
     ]
    },
    "numpy.add": {
     "line number": [
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfuncKwargs.test_sig_dtype": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      35,
      37
     ]
    },
    "int": {
     "line number": [
      36,
      38
     ]
    },
    "numpy.add": {
     "line number": [
      35,
      37
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      35,
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc.TestUfuncKwargs.test_sig_signature": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      31
     ]
    },
    "numpy.add": {
     "line number": [
      31
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_ufunc._rational_tests": {
  "data": {
   "shadows": "numpy.core._rational_tests"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.assert_no_warnings": {
  "data": {
   "shadows": "numpy.testing.assert_no_warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.opflag_tests": {
  "data": {
   "shadows": "numpy.core._operand_flag_tests"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.pickle": {
  "data": {
   "shadows": "numpy.core.numeric.pickle"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.struct_ufunc": {
  "data": {
   "shadows": "numpy.core._struct_ufunc_tests"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.uml": {
  "data": {
   "shadows": "numpy.linalg._umath_linalg"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.umt": {
  "data": {
   "shadows": "numpy.core._umath_tests"
  },
  "type": "import"
 },
 "numpy.core.tests.test_ufunc.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.tests.test_unicode": {
  "data": {
   "symbols_in_volume": {
    "buffer": {
     "line number": [
      34
     ]
    },
    "len": {
     "line number": [
      34
     ]
    },
    "numpy.core.tests.test_unicode.sys": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.tests.test_unicode.AssignValues": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "object": {
     "line number": [
      207
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.AssignValues.content_check": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "int": {
     "line number": [
      213
     ]
    },
    "numpy.core.tests.test_unicode.buffer_length": {
     "line number": [
      215,
      223,
      228,
      232
     ]
    },
    "numpy.core.tests.test_unicode.ucs4": {
     "line number": [
      222
     ]
    },
    "numpy.core.tests.test_unicode.ucs4_value": {
     "line number": [
      225
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      213,
      215,
      217,
      219,
      223,
      228,
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.AssignValues.test_values0D": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "numpy.zeros": {
     "line number": [
      236
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.AssignValues.test_valuesMD": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": {
    "numpy.zeros": {
     "line number": [
      250
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.AssignValues.test_valuesSD": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "numpy.zeros": {
     "line number": [
      242
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.ByteorderValues": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "object": {
     "line number": [
      297
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.ByteorderValues.test_values0D": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      302
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      307
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      310
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.ByteorderValues.test_valuesMD": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      324
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      327,
      328
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      331
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.ByteorderValues.test_valuesSD": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      314
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      316,
      317
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      320
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.ByteorderValues.test_values_cast": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      336
     ]
    },
    "numpy.repeat": {
     "line number": [
      337
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      340,
      341
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.ByteorderValues.test_values_updowncast": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      349
     ]
    },
    "numpy.dtype": {
     "line number": [
      353
     ]
    },
    "numpy.repeat": {
     "line number": [
      350
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      355,
      356
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      360
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.CreateValues": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "object": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.CreateValues.content_check": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "int": {
     "line number": [
      128
     ]
    },
    "numpy.core.tests.test_unicode.buffer_length": {
     "line number": [
      130,
      138,
      143,
      147
     ]
    },
    "numpy.core.tests.test_unicode.ucs4": {
     "line number": [
      137
     ]
    },
    "numpy.core.tests.test_unicode.ucs4_value": {
     "line number": [
      140
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      128,
      130,
      132,
      134,
      138,
      143,
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.CreateValues.test_values0D": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      151
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.CreateValues.test_valuesMD": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.CreateValues.test_valuesSD": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.CreateZeros": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "object": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.CreateZeros.content_check": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "int": {
     "line number": [
      76
     ]
    },
    "numpy.core.tests.test_unicode.buffer_length": {
     "line number": [
      78,
      85,
      87
     ]
    },
    "numpy.core.tests.test_unicode.ucs4": {
     "line number": [
      84
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      76,
      78,
      80,
      82,
      85,
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.CreateZeros.test_zeros0D": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "numpy.zeros": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.CreateZeros.test_zerosMD": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "numpy.zeros": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.CreateZeros.test_zerosSD": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "numpy.zeros": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.TestAssignValues_1009_UCS2": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.AssignValues": {
     "line number": [
      281
     ]
    },
    "numpy.core.tests.test_unicode.ucs2_value": {
     "line number": [
      284
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestAssignValues_1009_UCS4": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.AssignValues": {
     "line number": [
      287
     ]
    },
    "numpy.core.tests.test_unicode.ucs4_value": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestAssignValues_1_UCS2": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.AssignValues": {
     "line number": [
      257
     ]
    },
    "numpy.core.tests.test_unicode.ucs2_value": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestAssignValues_1_UCS4": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.AssignValues": {
     "line number": [
      263
     ]
    },
    "numpy.core.tests.test_unicode.ucs4_value": {
     "line number": [
      266
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestAssignValues_2_UCS2": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.AssignValues": {
     "line number": [
      269
     ]
    },
    "numpy.core.tests.test_unicode.ucs2_value": {
     "line number": [
      272
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestAssignValues_2_UCS4": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.AssignValues": {
     "line number": [
      275
     ]
    },
    "numpy.core.tests.test_unicode.ucs4_value": {
     "line number": [
      278
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestByteorder_1009_UCS2": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.ByteorderValues": {
     "line number": [
      387
     ]
    },
    "numpy.core.tests.test_unicode.ucs2_value": {
     "line number": [
      390
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestByteorder_1009_UCS4": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.ByteorderValues": {
     "line number": [
      393
     ]
    },
    "numpy.core.tests.test_unicode.ucs4_value": {
     "line number": [
      396
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestByteorder_1_UCS2": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.ByteorderValues": {
     "line number": [
      363
     ]
    },
    "numpy.core.tests.test_unicode.ucs2_value": {
     "line number": [
      366
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestByteorder_1_UCS4": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.ByteorderValues": {
     "line number": [
      369
     ]
    },
    "numpy.core.tests.test_unicode.ucs4_value": {
     "line number": [
      372
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestByteorder_2_UCS2": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.ByteorderValues": {
     "line number": [
      375
     ]
    },
    "numpy.core.tests.test_unicode.ucs2_value": {
     "line number": [
      378
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestByteorder_2_UCS4": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.ByteorderValues": {
     "line number": [
      381
     ]
    },
    "numpy.core.tests.test_unicode.ucs4_value": {
     "line number": [
      384
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestCreateValues_1009_UCS2": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.CreateValues": {
     "line number": [
      191
     ]
    },
    "numpy.core.tests.test_unicode.ucs2_value": {
     "line number": [
      194
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestCreateValues_1009_UCS4": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.CreateValues": {
     "line number": [
      197
     ]
    },
    "numpy.core.tests.test_unicode.ucs4_value": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestCreateValues_1_UCS2": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.CreateValues": {
     "line number": [
      167
     ]
    },
    "numpy.core.tests.test_unicode.ucs2_value": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestCreateValues_1_UCS4": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.CreateValues": {
     "line number": [
      173
     ]
    },
    "numpy.core.tests.test_unicode.ucs4_value": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestCreateValues_2_UCS2": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.CreateValues": {
     "line number": [
      179
     ]
    },
    "numpy.core.tests.test_unicode.ucs2_value": {
     "line number": [
      182
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestCreateValues_2_UCS4": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.CreateValues": {
     "line number": [
      185
     ]
    },
    "numpy.core.tests.test_unicode.ucs4_value": {
     "line number": [
      188
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestCreateZeros_1": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.CreateZeros": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestCreateZeros_1009": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.CreateZeros": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.TestCreateZeros_2": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "numpy.core.tests.test_unicode.CreateZeros": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.core.tests.test_unicode.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.tests.test_unicode.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.core.tests.test_unicode.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_unicode.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.core.tests.test_unicode.buffer_length": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "buffer": {
     "line number": [
      42
     ]
    },
    "isinstance": {
     "line number": [
      40
     ]
    },
    "len": {
     "line number": [
      41,
      42
     ]
    },
    "numpy.ndarray": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.tests.test_unicode.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.core.tests.test_unicode.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.tests.test_unicode.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.core.tests.test_unicode.test_string_cast": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      53
     ]
    },
    "numpy.core.tests.test_unicode.sys": {
     "line number": [
      57
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      61,
      62
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      58,
      59,
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.core.tests.test_unicode.ucs2_value": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "numpy.core.tests.test_unicode.ucs4": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "numpy.core.tests.test_unicode.ucs4_value": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "numpy.core.tests.test_unicode.unicode": {
  "data": {
   "shadows": "numpy.compat.unicode"
  },
  "type": "import"
 },
 "numpy.core.umath": {
  "data": {},
  "type": "module"
 },
 "numpy.core.umath._UFUNC_API": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._UFUNC_API"
  },
  "type": "import"
 },
 "numpy.core.umath.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.core.umath._add_newdoc_ufunc": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._add_newdoc_ufunc"
  },
  "type": "import"
 },
 "numpy.core.umath._arg": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._arg"
  },
  "type": "import"
 },
 "numpy.core.umath._ones_like": {
  "data": {
   "shadows": "numpy.core._multiarray_umath._ones_like"
  },
  "type": "import"
 },
 "numpy.core.umath_tests": {
  "data": {
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      13
     ]
    },
    "numpy.core.umath_tests.warnings": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.core.umath_tests.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.core.umath_tests.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.core.umath_tests.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.core.umath_tests.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.core.whichmodule": {
  "data": {
   "shadows": "pickle.whichmodule"
  },
  "type": "import"
 },
 "numpy.distutils": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      21
     ]
    },
    "__name__": {
     "line number": [
      19
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      19,
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.distutils.__config__": {
  "data": {
   "symbols_in_volume": {
    "numpy.distutils.__config__.extra_dll_dir": {
     "line number": [
      12,
      14
     ]
    },
    "numpy.distutils.__config__.os": {
     "line number": [
      10,
      10,
      12,
      13,
      14,
      14
     ]
    },
    "numpy.distutils.__config__.sys": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.__config__.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "numpy.distutils.__config__.blas_mkl_info": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.distutils.__config__.blas_opt_info": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.distutils.__config__.blis_info": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.distutils.__config__.extra_dll_dir": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "numpy.distutils.__config__.get_info": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "globals": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.__config__.lapack_mkl_info": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.distutils.__config__.lapack_opt_info": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.distutils.__config__.openblas_info": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.distutils.__config__.openblas_lapack_info": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.distutils.__config__.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.__config__.show": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "globals": {
     "line number": [
      29
     ]
    },
    "len": {
     "line number": [
      36
     ]
    },
    "print": {
     "line number": [
      31,
      33,
      38
     ]
    },
    "str": {
     "line number": [
      35
     ]
    },
    "type": {
     "line number": [
      30,
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.__config__.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.__version__": {
  "data": {
   "shadows": "version"
  },
  "type": "import"
 },
 "numpy.distutils.__version__.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.__version__.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.__version__.major": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "numpy.distutils.__version__.micro": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "numpy.distutils.__version__.minor": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "numpy.distutils.__version__.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.__version__.version": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.distutils._shell_utils": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      10
     ]
    },
    "numpy.distutils._shell_utils.PosixParser": {
     "line number": [
      91
     ]
    },
    "numpy.distutils._shell_utils.WindowsParser": {
     "line number": [
      89
     ]
    },
    "numpy.distutils._shell_utils.os": {
     "line number": [
      88,
      90
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils._shell_utils.CommandLineParser": {
  "data": {
   "lineno": 16
  },
  "type": "class"
 },
 "numpy.distutils._shell_utils.CommandLineParser.join": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      27
     ]
    },
    "staticmethod": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils._shell_utils.CommandLineParser.split": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      32
     ]
    },
    "staticmethod": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils._shell_utils.NativeParser": {
  "data": {
   "lineno": 91
  },
  "type": "constant"
 },
 "numpy.distutils._shell_utils.PosixParser": {
  "data": {
   "lineno": 75
  },
  "type": "class"
 },
 "numpy.distutils._shell_utils.PosixParser.join": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "pipes.quote": {
     "line number": [
      81
     ]
    },
    "staticmethod": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils._shell_utils.PosixParser.split": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "numpy.distutils._shell_utils.shlex": {
     "line number": [
      85
     ]
    },
    "staticmethod": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils._shell_utils.WindowsParser": {
  "data": {
   "lineno": 35
  },
  "type": "class"
 },
 "numpy.distutils._shell_utils.WindowsParser.join": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "numpy.distutils._shell_utils.subprocess": {
     "line number": [
      45
     ]
    },
    "staticmethod": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils._shell_utils.WindowsParser.split": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      52
     ]
    },
    "CommandLineToArgvW": {
     "line number": [
      66
     ]
    },
    "NotImplementedError": {
     "line number": [
      53
     ]
    },
    "numpy.distutils._shell_utils.ctypes": {
     "line number": [
      51,
      61,
      62,
      62,
      63,
      63,
      63,
      65,
      66,
      68
     ]
    },
    "range": {
     "line number": [
      67
     ]
    },
    "staticmethod": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils._shell_utils.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.distutils._shell_utils.ctypes": {
  "data": {
   "shadows": "ctypes"
  },
  "type": "import"
 },
 "numpy.distutils._shell_utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils._shell_utils.quote": {
  "data": {
   "shadows": "pipes.quote"
  },
  "type": "import"
 },
 "numpy.distutils._shell_utils.shlex": {
  "data": {
   "shadows": "shlex"
  },
  "type": "import"
 },
 "numpy.distutils._shell_utils.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.distutils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      30
     ]
    },
    "distutils.ccompiler._default_compilers": {
     "line number": [
      708,
      723,
      724
     ]
    },
    "distutils.ccompiler.gen_lib_options": {
     "line number": [
      789
     ]
    },
    "distutils.ccompiler.new_compiler": {
     "line number": [
      769
     ]
    },
    "distutils.ccompiler.split_quoted": {
     "line number": [
      857
     ]
    },
    "dummy_threading.Lock": {
     "line number": [
      33
     ]
    },
    "numpy.distutils.ccompiler.CCompiler_compile": {
     "line number": [
      368
     ]
    },
    "numpy.distutils.ccompiler.CCompiler_customize": {
     "line number": [
      549
     ]
    },
    "numpy.distutils.ccompiler.CCompiler_customize_cmd": {
     "line number": [
      411
     ]
    },
    "numpy.distutils.ccompiler.CCompiler_cxx_compiler": {
     "line number": [
      694
     ]
    },
    "numpy.distutils.ccompiler.CCompiler_find_executables": {
     "line number": [
      111
     ]
    },
    "numpy.distutils.ccompiler.CCompiler_get_version": {
     "line number": [
      665
     ]
    },
    "numpy.distutils.ccompiler.CCompiler_object_filenames": {
     "line number": [
      221
     ]
    },
    "numpy.distutils.ccompiler.CCompiler_show_customization": {
     "line number": [
      466
     ]
    },
    "numpy.distutils.ccompiler.CCompiler_spawn": {
     "line number": [
      174
     ]
    },
    "numpy.distutils.ccompiler._m": {
     "line number": [
      796,
      797
     ]
    },
    "numpy.distutils.ccompiler.gen_lib_options": {
     "line number": [
      789,
      797
     ]
    },
    "numpy.distutils.ccompiler.new_compiler": {
     "line number": [
      769
     ]
    },
    "numpy.distutils.ccompiler.re": {
     "line number": [
      806,
      807,
      808,
      809
     ]
    },
    "numpy.distutils.ccompiler.replace_method": {
     "line number": [
      111,
      174,
      221,
      368,
      411,
      466,
      549,
      665,
      694
     ]
    },
    "numpy.distutils.ccompiler.split_quoted": {
     "line number": [
      857
     ]
    },
    "numpy.distutils.ccompiler.string": {
     "line number": [
      806
     ]
    },
    "numpy.distutils.ccompiler.sys": {
     "line number": [
      715,
      795
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      722
     ]
    },
    "numpy.distutils.misc_util.mingw32": {
     "line number": [
      719
     ]
    },
    "set": {
     "line number": [
      34
     ]
    },
    "setattr": {
     "line number": [
      797
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.ccompiler.CCompiler_compile": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "dummy_threading.Semaphore": {
     "line number": [
      272
     ]
    },
    "getattr": {
     "line number": [
      285
     ]
    },
    "isinstance": {
     "line number": [
      282,
      330
     ]
    },
    "len": {
     "line number": [
      354
     ]
    },
    "list": {
     "line number": [
      331
     ]
    },
    "numpy.distutils.ccompiler._global_lock": {
     "line number": [
      270
     ]
    },
    "numpy.distutils.ccompiler._job_semaphore": {
     "line number": [
      271,
      272
     ]
    },
    "numpy.distutils.ccompiler.sys": {
     "line number": [
      277
     ]
    },
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      282,
      330
     ]
    },
    "numpy.distutils.fcompiler.has_f90_header": {
     "line number": [
      339
     ]
    },
    "numpy.distutils.fcompiler.is_f_file": {
     "line number": [
      339
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      293,
      301
     ]
    },
    "numpy.distutils.misc_util.cyg2win32": {
     "line number": [
      337,
      338
     ]
    },
    "numpy.distutils.misc_util.get_num_build_jobs": {
     "line number": [
      266
     ]
    },
    "single_compile": {
     "line number": [
      350,
      358,
      363
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CCompiler_compile.single_compile": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": {
    "numpy.distutils.ccompiler._global_lock": {
     "line number": [
      312,
      326
     ]
    },
    "numpy.distutils.ccompiler._job_semaphore": {
     "line number": [
      322
     ]
    },
    "numpy.distutils.ccompiler._needs_build": {
     "line number": [
      305
     ]
    },
    "numpy.distutils.ccompiler._processing_files": {
     "line number": [
      314,
      315,
      327
     ]
    },
    "numpy.distutils.ccompiler.time": {
     "line number": [
      318
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CCompiler_customize": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      507
     ]
    },
    "ValueError": {
     "line number": [
      507
     ]
    },
    "distutils.errors.CompileError": {
     "line number": [
      542
     ]
    },
    "distutils.sysconfig.customize_compiler": {
     "line number": [
      500
     ]
    },
    "hasattr": {
     "line number": [
      510,
      519,
      521,
      527
     ]
    },
    "numpy.distutils.ccompiler.os": {
     "line number": [
      531,
      536
     ]
    },
    "numpy.distutils.ccompiler.shutil": {
     "line number": [
      545
     ]
    },
    "numpy.distutils.ccompiler.tempfile": {
     "line number": [
      534
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      499
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      520,
      522
     ]
    },
    "open": {
     "line number": [
      537
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CCompiler_customize_cmd": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": {
    "allow": {
     "line number": [
      394,
      396,
      399,
      402,
      404,
      406,
      408
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      389
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CCompiler_customize_cmd.allow": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      392
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CCompiler_cxx_compiler": {
  "data": {
   "lineno": 667,
   "symbols_in_volume": {
    "copy.copy": {
     "line number": [
      684
     ]
    },
    "numpy.distutils.ccompiler.sys": {
     "line number": [
      686
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CCompiler_find_executables": {
  "data": {
   "lineno": 101
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CCompiler_get_version": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      623,
      629,
      632
     ]
    },
    "OSError": {
     "line number": [
      646
     ]
    },
    "distutils.version.LooseVersion": {
     "line number": [
      661
     ]
    },
    "hasattr": {
     "line number": [
      618
     ]
    },
    "matcher": {
     "line number": [
      659
     ]
    },
    "numpy.distutils.ccompiler.subprocess": {
     "line number": [
      642,
      643
     ]
    },
    "numpy.distutils.exec_command.filepath_from_subprocess_output": {
     "line number": [
      654
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CCompiler_get_version.matcher": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": {
    "numpy.distutils.ccompiler.re": {
     "line number": [
      635
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CCompiler_object_filenames": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "UnknownFileError": {
     "line number": [
      214
     ]
    },
    "numpy.distutils.ccompiler.os": {
     "line number": [
      203,
      203,
      204,
      205,
      211,
      211,
      216,
      217
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CCompiler_show_customization": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      458
     ]
    },
    "getattr": {
     "line number": [
      452
     ]
    },
    "numpy.distutils.ccompiler._compiler_to_string": {
     "line number": [
      463
     ]
    },
    "numpy.distutils.log._global_log.threshold": {
     "line number": [
      460
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      455
     ]
    },
    "print": {
     "line number": [
      461,
      462,
      463,
      464
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CCompiler_spawn": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "OSError": {
     "line number": [
      147
     ]
    },
    "distutils.errors.DistutilsExecError": {
     "line number": [
      171
     ]
    },
    "list": {
     "line number": [
      140,
      163
     ]
    },
    "numpy.distutils.ccompiler.re": {
     "line number": [
      167
     ]
    },
    "numpy.distutils.ccompiler.subprocess": {
     "line number": [
      143,
      144
     ]
    },
    "numpy.distutils.exec_command.forward_bytes_to_stdout": {
     "line number": [
      165
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      141
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      139,
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.CompileError": {
  "data": {
   "shadows": "distutils.errors.CompileError"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.DistutilsExecError": {
  "data": {
   "shadows": "distutils.errors.DistutilsExecError"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.DistutilsModuleError": {
  "data": {
   "shadows": "distutils.errors.DistutilsModuleError"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.DistutilsPlatformError": {
  "data": {
   "shadows": "distutils.errors.DistutilsPlatformError"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.LooseVersion": {
  "data": {
   "shadows": "distutils.version.LooseVersion"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler._commandline_dep_string": {
  "data": {
   "shadows": "numpy.distutils.misc_util._commandline_dep_string"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler._compiler_to_string": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      424
     ]
    },
    "hasattr": {
     "line number": [
      423
     ]
    },
    "len": {
     "line number": [
      425
     ]
    },
    "list": {
     "line number": [
      416
     ]
    },
    "max": {
     "line number": [
      425
     ]
    },
    "repr": {
     "line number": [
      426,
      427
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler._distutils_gen_lib_options": {
  "data": {
   "lineno": 771
  },
  "type": "constant"
 },
 "numpy.distutils.ccompiler._distutils_new_compiler": {
  "data": {
   "lineno": 727
  },
  "type": "constant"
 },
 "numpy.distutils.ccompiler._dquote_re": {
  "data": {
   "lineno": 808
  },
  "type": "constant"
 },
 "numpy.distutils.ccompiler._global_lock": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.distutils.ccompiler._has_white_re": {
  "data": {
   "lineno": 809
  },
  "type": "constant"
 },
 "numpy.distutils.ccompiler._job_semaphore": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "numpy.distutils.ccompiler._m": {
  "data": {
   "lineno": 795
  },
  "type": "constant"
 },
 "numpy.distutils.ccompiler._needs_build": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "OSError": {
     "line number": [
      80
     ]
    },
    "numpy.distutils.ccompiler.os": {
     "line number": [
      52,
      73,
      78
     ]
    },
    "numpy.distutils.ccompiler.shlex": {
     "line number": [
      69
     ]
    },
    "numpy.distutils.misc_util._commandline_dep_string": {
     "line number": [
      63
     ]
    },
    "open": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler._processing_files": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "numpy.distutils.ccompiler._squote_re": {
  "data": {
   "lineno": 807
  },
  "type": "constant"
 },
 "numpy.distutils.ccompiler._wordchars_re": {
  "data": {
   "lineno": 806
  },
  "type": "constant"
 },
 "numpy.distutils.ccompiler.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.ccompiler": {
  "data": {
   "shadows": "distutils.ccompiler"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.copy": {
  "data": {
   "shadows": "copy.copy"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.customize_compiler": {
  "data": {
   "shadows": "distutils.sysconfig.customize_compiler"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.cyg2win32": {
  "data": {
   "shadows": "numpy.distutils.misc_util.cyg2win32"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.filepath_from_subprocess_output": {
  "data": {
   "shadows": "numpy.distutils.exec_command.filepath_from_subprocess_output"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.forward_bytes_to_stdout": {
  "data": {
   "shadows": "numpy.distutils.exec_command.forward_bytes_to_stdout"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.gen_lib_options": {
  "data": {
   "lineno": 772,
   "symbols_in_volume": {
    "list": {
     "line number": [
      785
     ]
    },
    "numpy.distutils.ccompiler._distutils_gen_lib_options": {
     "line number": [
      780
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      784
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.get_exception": {
  "data": {
   "shadows": "numpy.distutils.compat.get_exception"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.get_num_build_jobs": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_num_build_jobs"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.has_f90_header": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.has_f90_header"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.is_f_file": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.is_f_file"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.is_sequence": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_sequence"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.log": {
  "data": {
   "shadows": "numpy.distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.mingw32": {
  "data": {
   "shadows": "numpy.distutils.misc_util.mingw32"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.multiprocessing.pool": {
  "data": {
   "shadows": "multiprocessing.pool"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.new_compiler": {
  "data": {
   "lineno": 728,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      748,
      755
     ]
    },
    "KeyError": {
     "line number": [
      740,
      762
     ]
    },
    "__import__": {
     "line number": [
      747,
      754
     ]
    },
    "distutils.errors.DistutilsModuleError": {
     "line number": [
      757,
      763
     ]
    },
    "distutils.errors.DistutilsPlatformError": {
     "line number": [
      744
     ]
    },
    "get_default_compiler": {
     "line number": [
      738
     ]
    },
    "klass": {
     "line number": [
      765,
      766
     ]
    },
    "numpy.distutils.ccompiler.os": {
     "line number": [
      735
     ]
    },
    "numpy.distutils.ccompiler.sys": {
     "line number": [
      760
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      749,
      756
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      766
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      750
     ]
    },
    "str": {
     "line number": [
      749,
      751,
      756
     ]
    },
    "vars": {
     "line number": [
      761
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.replace_method": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "func": {
     "line number": [
      92
     ]
    },
    "numpy.distutils.ccompiler.sys": {
     "line number": [
      88
     ]
    },
    "numpy.distutils.ccompiler.types": {
     "line number": [
      89
     ]
    },
    "setattr": {
     "line number": [
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.shlex": {
  "data": {
   "shadows": "shlex"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.simple_version_match": {
  "data": {
   "lineno": 551
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.simple_version_match.matcher": {
  "data": {
   "lineno": 577,
   "symbols_in_volume": {
    "numpy.distutils.ccompiler.re": {
     "line number": [
      583,
      588,
      591
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.split_quoted": {
  "data": {
   "lineno": 810,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      838
     ]
    },
    "ValueError": {
     "line number": [
      841
     ]
    },
    "len": {
     "line number": [
      818,
      852
     ]
    },
    "numpy.distutils.ccompiler._dquote_re": {
     "line number": [
      836
     ]
    },
    "numpy.distutils.ccompiler._has_white_re": {
     "line number": [
      844
     ]
    },
    "numpy.distutils.ccompiler._squote_re": {
     "line number": [
      834
     ]
    },
    "numpy.distutils.ccompiler._wordchars_re": {
     "line number": [
      816
     ]
    },
    "numpy.distutils.ccompiler.string": {
     "line number": [
      822
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.ccompiler.string": {
  "data": {
   "shadows": "string"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.threading": {
  "data": {
   "shadows": "dummy_threading"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "numpy.distutils.ccompiler.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "numpy.distutils.command": {
  "data": {
   "symbols_in_volume": {
    "__import__": {
     "line number": [
      27
     ]
    },
    "globals": {
     "line number": [
      27
     ]
    },
    "locals": {
     "line number": [
      27
     ]
    },
    "numpy.distutils.command.distutils_all": {
     "line number": [
      27,
      43
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.command.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy.distutils.command.__revision__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.distutils.command.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.autodist": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.command.autodist.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.autodist.check_compiler_gcc4": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "numpy.distutils.command.autodist.check_gcc_function_attribute": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "numpy.distutils.command.autodist.check_gcc_variable_attribute": {
  "data": {
   "lineno": 81
  },
  "type": "function"
 },
 "numpy.distutils.command.autodist.check_inline": {
  "data": {
   "lineno": 9
  },
  "type": "function"
 },
 "numpy.distutils.command.autodist.check_restrict": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "numpy.distutils.command.autodist.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.autodist.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.bdist_rpm": {
  "data": {
   "symbols_in_volume": {
    "numpy.distutils.command.bdist_rpm.sys": {
     "line number": [
      5
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.command.bdist_rpm.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.bdist_rpm.bdist_rpm": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "distutils.command.bdist_rpm.bdist_rpm": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.bdist_rpm.bdist_rpm._make_spec_file": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "distutils.command.bdist_rpm.bdist_rpm._make_spec_file": {
     "line number": [
      13
     ]
    },
    "numpy.distutils.command.bdist_rpm.os": {
     "line number": [
      17
     ]
    },
    "numpy.distutils.command.bdist_rpm.sys": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.bdist_rpm.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.bdist_rpm.old_bdist_rpm": {
  "data": {
   "shadows": "distutils.command.bdist_rpm.bdist_rpm"
  },
  "type": "import"
 },
 "numpy.distutils.command.bdist_rpm.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.command.bdist_rpm.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.bdist_rpm.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.command.build": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.command.build.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.build.build": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "distutils.command.build.build": {
     "line number": [
      9
     ]
    },
    "distutils.command.build.build.has_ext_modules": {
     "line number": [
      13
     ]
    },
    "distutils.command.build.build.help_options": {
     "line number": [
      23
     ]
    },
    "distutils.command.build.build.sub_commands": {
     "line number": [
      14
     ]
    },
    "distutils.command.build.build.user_options": {
     "line number": [
      16
     ]
    },
    "numpy.distutils.command.config_compiler.show_fortran_compilers": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.build.build.finalize_options": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      37,
      38
     ]
    },
    "distutils.command.build.build.finalize_options": {
     "line number": [
      40
     ]
    },
    "distutils.util.get_platform": {
     "line number": [
      41
     ]
    },
    "int": {
     "line number": [
      36
     ]
    },
    "numpy.distutils.command.build.os": {
     "line number": [
      43
     ]
    },
    "numpy.distutils.command.build.sys": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build.build.initialize_options": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "distutils.command.build.build.initialize_options": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build.build.run": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "distutils.command.build.build.run": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.build.get_platform": {
  "data": {
   "shadows": "distutils.util.get_platform"
  },
  "type": "import"
 },
 "numpy.distutils.command.build.old_build": {
  "data": {
   "shadows": "distutils.command.build.build"
  },
  "type": "import"
 },
 "numpy.distutils.command.build.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.command.build.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.build.show_fortran_compilers": {
  "data": {
   "shadows": "numpy.distutils.command.config_compiler.show_fortran_compilers"
  },
  "type": "import"
 },
 "numpy.distutils.command.build.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib": {
  "data": {
   "symbols_in_volume": {
    "distutils.command.build_clib.build_clib.user_options": {
     "line number": [
      19
     ]
    },
    "len": {
     "line number": [
      20
     ]
    },
    "numpy.distutils.command.build_clib._l": {
     "line number": [
      20,
      21,
      22,
      22,
      22
     ]
    },
    "range": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.command.build_clib.DistutilsError": {
  "data": {
   "shadows": "distutils.errors.DistutilsError"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.DistutilsFileError": {
  "data": {
   "shadows": "distutils.errors.DistutilsFileError"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.DistutilsSetupError": {
  "data": {
   "shadows": "distutils.errors.DistutilsSetupError"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib._l": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.distutils.command.build_clib.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.all_strings": {
  "data": {
   "shadows": "numpy.distutils.misc_util.all_strings"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.build_clib": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "distutils.command.build_clib.build_clib": {
     "line number": [
      26
     ]
    },
    "distutils.command.build_clib.build_clib.boolean_options": {
     "line number": [
      38
     ]
    },
    "distutils.command.build_clib.build_clib.user_options": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.build_clib.build_clib.build_a_library": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "distutils.dep_util.newer_group": {
     "line number": [
      169
     ]
    },
    "distutils.errors.DistutilsError": {
     "line number": [
      195
     ]
    },
    "distutils.errors.DistutilsFileError": {
     "line number": [
      275
     ]
    },
    "distutils.errors.DistutilsSetupError": {
     "line number": [
      144
     ]
    },
    "glob.glob": {
     "line number": [
      250,
      265
     ]
    },
    "list": {
     "line number": [
      147
     ]
    },
    "numpy.distutils.command.build_clib.os": {
     "line number": [
      213,
      268,
      269,
      269,
      271,
      272,
      294,
      297,
      299,
      302,
      305
     ]
    },
    "numpy.distutils.fcompiler.new_fcompiler": {
     "line number": [
      181
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      170
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      173,
      177,
      225,
      234,
      255,
      280
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      276
     ]
    },
    "numpy.distutils.misc_util.filter_sources": {
     "line number": [
      150
     ]
    },
    "numpy.distutils.misc_util.get_numpy_include_dirs": {
     "line number": [
      210
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      143
     ]
    },
    "open": {
     "line number": [
      296,
      301,
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_clib.build_clib.build_libraries": {
  "data": {
   "lineno": 133
  },
  "type": "function"
 },
 "numpy.distutils.command.build_clib.build_clib.finalize_options": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      50,
      51
     ]
    },
    "distutils.command.build_clib.build_clib.finalize_options": {
     "line number": [
      52
     ]
    },
    "int": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_clib.build_clib.get_source_files": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.get_lib_source_files": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_clib.build_clib.have_cxx_sources": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.has_cxx_sources": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_clib.build_clib.have_f_sources": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.has_f_sources": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_clib.build_clib.initialize_options": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "distutils.command.build_clib.build_clib.initialize_options": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_clib.build_clib.run": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "distutils.ccompiler.new_compiler": {
     "line number": [
      83
     ]
    },
    "numpy.distutils.command.build_clib.os": {
     "line number": [
      121,
      122
     ]
    },
    "numpy.distutils.command.build_clib.shutil": {
     "line number": [
      124
     ]
    },
    "numpy.distutils.fcompiler.new_fcompiler": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_clib.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.filter_sources": {
  "data": {
   "shadows": "numpy.distutils.misc_util.filter_sources"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.get_lib_source_files": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_lib_source_files"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.get_numpy_include_dirs": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_numpy_include_dirs"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.glob": {
  "data": {
   "shadows": "glob.glob"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.has_cxx_sources": {
  "data": {
   "shadows": "numpy.distutils.misc_util.has_cxx_sources"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.has_f_sources": {
  "data": {
   "shadows": "numpy.distutils.misc_util.has_f_sources"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.is_sequence": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_sequence"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.log": {
  "data": {
   "shadows": "numpy.distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.new_compiler": {
  "data": {
   "shadows": "distutils.ccompiler.new_compiler"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.new_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.new_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.newer_group": {
  "data": {
   "shadows": "distutils.dep_util.newer_group"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.old_build_clib": {
  "data": {
   "shadows": "distutils.command.build_clib.build_clib"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_clib.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.command.build_ext.DistutilsError": {
  "data": {
   "shadows": "distutils.errors.DistutilsError"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.DistutilsFileError": {
  "data": {
   "shadows": "distutils.errors.DistutilsFileError"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.DistutilsSetupError": {
  "data": {
   "shadows": "distutils.errors.DistutilsSetupError"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.build_ext": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "distutils.command.build_ext.build_ext": {
     "line number": [
      27
     ]
    },
    "distutils.command.build_ext.build_ext.help_options": {
     "line number": [
      38
     ]
    },
    "distutils.command.build_ext.build_ext.user_options": {
     "line number": [
      31
     ]
    },
    "numpy.distutils.command.config_compiler.show_fortran_compilers": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.build_ext.build_ext._add_dummy_mingwex_sym": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": {
    "numpy.distutils.command.build_ext.os": {
     "line number": [
      482
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_ext.build_ext._libs_with_msvc_and_fortran": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": {
    "OSError": {
     "line number": [
      562
     ]
    },
    "dir": {
     "line number": [
      556,
      561,
      561,
      565,
      565,
      566
     ]
    },
    "dir.startswith": {
     "line number": [
      559
     ]
    },
    "distutils.file_util.copy_file": {
     "line number": [
      544,
      577
     ]
    },
    "numpy.distutils.command.build_ext.os": {
     "line number": [
      530,
      531,
      539,
      540,
      543,
      575,
      576
     ]
    },
    "numpy.distutils.command.build_ext.subprocess": {
     "line number": [
      561,
      562
     ]
    },
    "numpy.distutils.exec_command.filepath_from_subprocess_output": {
     "line number": [
      565
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      551
     ]
    },
    "numpy.distutils.system_info.combine_paths": {
     "line number": [
      573
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_ext.build_ext._process_unlinkable_fobjects": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "list": {
     "line number": [
      491,
      492,
      493,
      496
     ]
    },
    "numpy.distutils.command.build_ext.os": {
     "line number": [
      498,
      499,
      506,
      512
     ]
    },
    "open": {
     "line number": [
      502,
      507
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_ext.build_ext.build_extension": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "distutils.dep_util.newer_group": {
     "line number": [
      314
     ]
    },
    "distutils.errors.DistutilsError": {
     "line number": [
      353,
      356
     ]
    },
    "distutils.errors.DistutilsFileError": {
     "line number": [
      424
     ]
    },
    "distutils.errors.DistutilsSetupError": {
     "line number": [
      291
     ]
    },
    "glob.glob": {
     "line number": [
      402,
      414
     ]
    },
    "hasattr": {
     "line number": [
      345,
      347
     ]
    },
    "linker": {
     "line number": [
      469
     ]
    },
    "list": {
     "line number": [
      295
     ]
    },
    "numpy.distutils.command.build_ext.os": {
     "line number": [
      307,
      310,
      396,
      397,
      417,
      418,
      418,
      420,
      421
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      315
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      318,
      372,
      382,
      394,
      428
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      425
     ]
    },
    "numpy.distutils.misc_util.filter_sources": {
     "line number": [
      326
     ]
    },
    "numpy.distutils.misc_util.get_numpy_include_dirs": {
     "line number": [
      368
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_ext.build_ext.finalize_options": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      52,
      53
     ]
    },
    "distutils.command.build_ext.build_ext.finalize_options": {
     "line number": [
      71
     ]
    },
    "int": {
     "line number": [
      51
     ]
    },
    "isinstance": {
     "line number": [
      63
     ]
    },
    "numpy.distutils.command.build_ext.os": {
     "line number": [
      64
     ]
    },
    "str": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_ext.build_ext.get_outputs": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": {
    "numpy.distutils.command.build_ext.os": {
     "line number": [
      596
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_ext.build_ext.get_source_files": {
  "data": {
   "lineno": 581,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.get_ext_source_files": {
     "line number": [
      585
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_ext.build_ext.initialize_options": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "distutils.command.build_ext.build_ext.initialize_options": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_ext.build_ext.run": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "distutils.ccompiler.new_compiler": {
     "line number": [
      113,
      202
     ]
    },
    "distutils.file_util.copy_file": {
     "line number": [
      282
     ]
    },
    "numpy.distutils.command.build_ext.os": {
     "line number": [
      122,
      123,
      124,
      273,
      275,
      276,
      277,
      278,
      281
     ]
    },
    "numpy.distutils.fcompiler.new_fcompiler": {
     "line number": [
      217,
      240
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      163,
      168
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      84,
      131,
      190
     ]
    },
    "numpy.distutils.misc_util.has_cxx_sources": {
     "line number": [
      175
     ]
    },
    "numpy.distutils.misc_util.has_f_sources": {
     "line number": [
      173
     ]
    },
    "repr": {
     "line number": [
      133,
      133
     ]
    },
    "set": {
     "line number": [
      144,
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_ext.build_ext.swig_sources": {
  "data": {
   "lineno": 284
  },
  "type": "function"
 },
 "numpy.distutils.command.build_ext.combine_paths": {
  "data": {
   "shadows": "numpy.distutils.system_info.combine_paths"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.copy_file": {
  "data": {
   "shadows": "distutils.file_util.copy_file"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.filepath_from_subprocess_output": {
  "data": {
   "shadows": "numpy.distutils.exec_command.filepath_from_subprocess_output"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.filter_sources": {
  "data": {
   "shadows": "numpy.distutils.misc_util.filter_sources"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.get_build_architecture": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_build_architecture"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.get_ext_source_files": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_ext_source_files"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.get_numpy_include_dirs": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_numpy_include_dirs"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.glob": {
  "data": {
   "shadows": "glob.glob"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.has_cxx_sources": {
  "data": {
   "shadows": "numpy.distutils.misc_util.has_cxx_sources"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.has_f_sources": {
  "data": {
   "shadows": "numpy.distutils.misc_util.has_f_sources"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.is_sequence": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_sequence"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.log": {
  "data": {
   "shadows": "numpy.distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.msvc_version": {
  "data": {
   "shadows": "numpy.distutils.misc_util.msvc_version"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.new_compiler": {
  "data": {
   "shadows": "distutils.ccompiler.new_compiler"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.new_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.new_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.newer_group": {
  "data": {
   "shadows": "distutils.dep_util.newer_group"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.old_build_ext": {
  "data": {
   "shadows": "distutils.command.build_ext.build_ext"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.show_fortran_compilers": {
  "data": {
   "shadows": "numpy.distutils.command.config_compiler.show_fortran_compilers"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_ext.system_info": {
  "data": {
   "shadows": "numpy.distutils.system_info.system_info"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_py": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.command.build_py.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_py.build_py": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "distutils.command.build_py.build_py": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.build_py.build_py.find_modules": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "distutils.command.build_py.build_py.find_modules": {
     "line number": [
      27
     ]
    },
    "numpy.distutils.misc_util.is_string": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_py.build_py.find_package_modules": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "distutils.command.build_py.build_py.find_package_modules": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_py.build_py.run": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "distutils.command.build_py.build_py.run": {
     "line number": [
      12
     ]
    },
    "list": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_py.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_py.is_string": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_string"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_py.old_build_py": {
  "data": {
   "shadows": "distutils.command.build_py.build_py"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_py.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_scripts": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.command.build_scripts.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_scripts.build_scripts": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "distutils.command.build_scripts.build_scripts": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.build_scripts.build_scripts.generate_scripts": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "func": {
     "line number": [
      26
     ]
    },
    "list": {
     "line number": [
      34
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      30,
      33
     ]
    },
    "numpy.distutils.misc_util.is_string": {
     "line number": [
      16,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_scripts.build_scripts.get_source_files": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.get_script_files": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_scripts.build_scripts.run": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "distutils.command.build_scripts.build_scripts.run": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_scripts.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_scripts.get_script_files": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_script_files"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_scripts.is_string": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_string"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_scripts.log": {
  "data": {
   "shadows": "numpy.distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_scripts.old_build_scripts": {
  "data": {
   "shadows": "distutils.command.build_scripts.build_scripts"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_scripts.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src": {
  "data": {
   "symbols_in_volume": {
    "numpy.distutils.command.build_src.re": {
     "line number": [
      716,
      716,
      717,
      717,
      720,
      721,
      722,
      722,
      723,
      723,
      756,
      757,
      758,
      759
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.command.build_src.DistutilsError": {
  "data": {
   "shadows": "distutils.errors.DistutilsError"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.DistutilsSetupError": {
  "data": {
   "shadows": "distutils.errors.DistutilsSetupError"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src._f2py_module_name_match": {
  "data": {
   "lineno": 756
  },
  "type": "constant"
 },
 "numpy.distutils.command.build_src._f2py_user_module_name_match": {
  "data": {
   "lineno": 758
  },
  "type": "constant"
 },
 "numpy.distutils.command.build_src._f_pyf_ext_match": {
  "data": {
   "lineno": 716
  },
  "type": "constant"
 },
 "numpy.distutils.command.build_src._find_swig_target": {
  "data": {
   "lineno": 747,
   "symbols_in_volume": {
    "numpy.distutils.command.build_src.os": {
     "line number": [
      749,
      750
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src._has_c_header": {
  "data": {
   "lineno": 722
  },
  "type": "constant"
 },
 "numpy.distutils.command.build_src._has_cpp_header": {
  "data": {
   "lineno": 723
  },
  "type": "constant"
 },
 "numpy.distutils.command.build_src._header_ext_match": {
  "data": {
   "lineno": 717
  },
  "type": "constant"
 },
 "numpy.distutils.command.build_src._swig_module_name_match": {
  "data": {
   "lineno": 720
  },
  "type": "constant"
 },
 "numpy.distutils.command.build_src.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.appendpath": {
  "data": {
   "shadows": "numpy.distutils.misc_util.appendpath"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.build_ext": {
  "data": {
   "shadows": "distutils.command.build_ext"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.build_src": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "distutils.command.build_ext.build_ext": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.build_src.build_src._build_npy_pkg_config": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": {
    "numpy.distutils.command.build_src.os": {
     "line number": [
      208,
      213,
      215,
      217,
      217,
      218,
      219,
      220,
      225
     ]
    },
    "numpy.distutils.command.build_src.subst_vars": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.build_data_files_sources": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      198,
      202
     ]
    },
    "f": {
     "line number": [
      189,
      191
     ]
    },
    "hasattr": {
     "line number": [
      185,
      186
     ]
    },
    "isinstance": {
     "line number": [
      177,
      179,
      193,
      195
     ]
    },
    "list": {
     "line number": [
      193
     ]
    },
    "numpy.distutils.command.build_src.os": {
     "line number": [
      182,
      184
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      173
     ]
    },
    "numpy.distutils.misc_util.get_data_files": {
     "line number": [
      199
     ]
    },
    "repr": {
     "line number": [
      198,
      202
     ]
    },
    "str": {
     "line number": [
      177,
      195
     ]
    },
    "tuple": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.build_extension_sources": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": {
    "f": {
     "line number": [
      333,
      334,
      335
     ]
    },
    "list": {
     "line number": [
      310
     ]
    },
    "numpy.distutils.command.build_src.os": {
     "line number": [
      334,
      334
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      312,
      341
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.build_library_sources": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": {
    "list": {
     "line number": [
      285
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      290,
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.build_npy_pkg_config": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      244
     ]
    },
    "numpy.distutils.command.build_src.copy": {
     "line number": [
      237
     ]
    },
    "numpy.distutils.command.build_src.os": {
     "line number": [
      251,
      251
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      229
     ]
    },
    "numpy.distutils.misc_util.get_cmd": {
     "line number": [
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.build_py_modules_sources": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      271
     ]
    },
    "len": {
     "line number": [
      264
     ]
    },
    "numpy.distutils.command.build_src.os": {
     "line number": [
      269,
      270,
      272
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      261
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      264
     ]
    },
    "source": {
     "line number": [
      273,
      274,
      276,
      281
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.build_sources": {
  "data": {
   "lineno": 150
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.f2py_sources": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "distutils.dep_util.newer": {
     "line number": [
      584,
      584
     ]
    },
    "distutils.dep_util.newer_group": {
     "line number": [
      537,
      555
     ]
    },
    "distutils.errors.DistutilsError": {
     "line number": [
      568
     ]
    },
    "distutils.errors.DistutilsSetupError": {
     "line number": [
      483,
      501,
      530,
      590,
      592
     ]
    },
    "len": {
     "line number": [
      529
     ]
    },
    "numpy.distutils.command.build_src.get_f2py_modulename": {
     "line number": [
      481
     ]
    },
    "numpy.distutils.command.build_src.os": {
     "line number": [
      474,
      477,
      479,
      480,
      486,
      492,
      493,
      498,
      499,
      500,
      535,
      550,
      552,
      567,
      570,
      571,
      572,
      581,
      582,
      583,
      585,
      589,
      591,
      595,
      596
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      488,
      544,
      564
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      502,
      526,
      539,
      557,
      573,
      576,
      597
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      494
     ]
    },
    "numpy.distutils.misc_util.appendpath": {
     "line number": [
      479
     ]
    },
    "numpy.distutils.misc_util.fortran_ext_match": {
     "line number": [
      508
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      547
     ]
    },
    "source": {
     "line number": [
      473,
      474,
      480,
      481,
      485,
      489,
      505,
      506,
      509,
      511,
      533,
      534,
      536,
      539,
      542,
      544
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.filter_files": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": {
    "numpy.distutils.command.build_src.os": {
     "line number": [
      397
     ]
    },
    "source": {
     "line number": [
      396,
      397,
      399,
      401
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.filter_h_files": {
  "data": {
   "lineno": 390
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.filter_py_files": {
  "data": {
   "lineno": 387
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.finalize_options": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "distutils.command.build_ext": {
     "line number": [
      129,
      136
     ]
    },
    "distutils.command.build_ext.inplace": {
     "line number": [
      131
     ]
    },
    "distutils.command.build_ext.swig_cpp": {
     "line number": [
      133
     ]
    },
    "distutils.util.get_platform": {
     "line number": [
      99
     ]
    },
    "getattr": {
     "line number": [
      136,
      138
     ]
    },
    "numpy.distutils.command.build_src.os": {
     "line number": [
      100
     ]
    },
    "numpy.distutils.command.build_src.shlex": {
     "line number": [
      114,
      126
     ]
    },
    "numpy.distutils.command.build_src.sys": {
     "line number": [
      99
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      141
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      107,
      118,
      139
     ]
    },
    "setattr": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.generate_a_pyrex_source": {
  "data": {
   "lineno": 456
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.generate_sources": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "func": {
     "line number": [
      375
     ]
    },
    "numpy.distutils.command.build_src.os": {
     "line number": [
      371
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      379,
      382
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      358,
      361,
      378
     ]
    },
    "numpy.distutils.misc_util.is_string": {
     "line number": [
      352
     ]
    },
    "source": {
     "line number": [
      351,
      352,
      353,
      355,
      375,
      376,
      378,
      379,
      380,
      382,
      383
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.initialize_options": {
  "data": {
   "lineno": 68
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.pyrex_sources": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "numpy.distutils.command.build_src.os": {
     "line number": [
      446
     ]
    },
    "source": {
     "line number": [
      445,
      446,
      449,
      453
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.run": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "numpy.distutils.log.info": {
     "line number": [
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.swig_sources": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": {
    "distutils.dep_util.newer_group": {
     "line number": [
      705
     ]
    },
    "distutils.errors.DistutilsSetupError": {
     "line number": [
      639,
      676
     ]
    },
    "numpy.distutils.command.build_src._find_swig_target": {
     "line number": [
      667,
      674
     ]
    },
    "numpy.distutils.command.build_src.get_swig_modulename": {
     "line number": [
      637
     ]
    },
    "numpy.distutils.command.build_src.get_swig_target": {
     "line number": [
      643,
      646
     ]
    },
    "numpy.distutils.command.build_src.os": {
     "line number": [
      626,
      631,
      634,
      636,
      660,
      668,
      673,
      675,
      681,
      706
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      711
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      706
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      648,
      651,
      654,
      657,
      663,
      669,
      677
     ]
    },
    "numpy.distutils.misc_util.appendpath": {
     "line number": [
      634
     ]
    },
    "source": {
     "line number": [
      625,
      626,
      636,
      637,
      641,
      643,
      646,
      649,
      652,
      657,
      664,
      682,
      683,
      685,
      702,
      703,
      704,
      707,
      709,
      712
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.build_src.template_sources": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": {
    "distutils.dep_util.newer_group": {
     "line number": [
      421
     ]
    },
    "numpy.distutils.command.build_src._f_pyf_ext_match": {
     "line number": [
      422
     ]
    },
    "numpy.distutils.command.build_src._header_ext_match": {
     "line number": [
      431
     ]
    },
    "numpy.distutils.command.build_src.os": {
     "line number": [
      413,
      416,
      418,
      420,
      420,
      432
     ]
    },
    "numpy.distutils.conv_template.process_file": {
     "line number": [
      427
     ]
    },
    "numpy.distutils.from_template.process_file": {
     "line number": [
      424
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      423,
      426,
      434
     ]
    },
    "numpy.distutils.misc_util.appendpath": {
     "line number": [
      418
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      406
     ]
    },
    "open": {
     "line number": [
      428
     ]
    },
    "source": {
     "line number": [
      412,
      413,
      421,
      424,
      427,
      438
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.fortran_ext_match": {
  "data": {
   "shadows": "numpy.distutils.misc_util.fortran_ext_match"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.get_cmd": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_cmd"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.get_data_files": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_data_files"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.get_f2py_modulename": {
  "data": {
   "lineno": 761,
   "symbols_in_volume": {
    "f": {
     "line number": [
      763,
      764
     ]
    },
    "f.close": {
     "line number": [
      771
     ]
    },
    "numpy.distutils.command.build_src._f2py_module_name_match": {
     "line number": [
      765
     ]
    },
    "numpy.distutils.command.build_src._f2py_user_module_name_match": {
     "line number": [
      767
     ]
    },
    "open": {
     "line number": [
      763
     ]
    },
    "source": {
     "line number": [
      763
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.get_platform": {
  "data": {
   "shadows": "distutils.util.get_platform"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.get_swig_modulename": {
  "data": {
   "lineno": 736,
   "symbols_in_volume": {
    "f": {
     "line number": [
      737,
      739
     ]
    },
    "f.close": {
     "line number": [
      744
     ]
    },
    "numpy.distutils.command.build_src._swig_module_name_match": {
     "line number": [
      740
     ]
    },
    "open": {
     "line number": [
      737
     ]
    },
    "source": {
     "line number": [
      737
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.get_swig_target": {
  "data": {
   "lineno": 725,
   "symbols_in_volume": {
    "f": {
     "line number": [
      726
     ]
    },
    "f.close": {
     "line number": [
      733
     ]
    },
    "f.readline": {
     "line number": [
      728
     ]
    },
    "numpy.distutils.command.build_src._has_c_header": {
     "line number": [
      731
     ]
    },
    "numpy.distutils.command.build_src._has_cpp_header": {
     "line number": [
      729
     ]
    },
    "open": {
     "line number": [
      726
     ]
    },
    "source": {
     "line number": [
      726
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.is_sequence": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_sequence"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.is_string": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_string"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.log": {
  "data": {
   "shadows": "numpy.distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.newer": {
  "data": {
   "shadows": "distutils.dep_util.newer"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.newer_group": {
  "data": {
   "shadows": "distutils.dep_util.newer_group"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.numpy.f2py": {
  "data": {
   "shadows": "numpy.f2py"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.process_c_file": {
  "data": {
   "shadows": "numpy.distutils.conv_template.process_file"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.process_f_file": {
  "data": {
   "shadows": "numpy.distutils.from_template.process_file"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.shlex": {
  "data": {
   "shadows": "shlex"
  },
  "type": "import"
 },
 "numpy.distutils.command.build_src.subst_vars": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "numpy.distutils.command.build_src.re": {
     "line number": [
      30
     ]
    },
    "open": {
     "line number": [
      31,
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.build_src.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.command.config": {
  "data": {
   "symbols_in_volume": {
    "distutils.command.config.LANG_EXT": {
     "line number": [
      27,
      28
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.command.config.CompileError": {
  "data": {
   "shadows": "distutils.ccompiler.CompileError"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.DistutilsExecError": {
  "data": {
   "shadows": "distutils.errors.DistutilsExecError"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.GrabStdout": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": {
    "object": {
     "line number": [
      491
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.config.GrabStdout.__init__": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": {
    "numpy.distutils.command.config.sys": {
     "line number": [
      494,
      496
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.GrabStdout.flush": {
  "data": {
   "lineno": 502
  },
  "type": "function"
 },
 "numpy.distutils.command.config.GrabStdout.restore": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": {
    "numpy.distutils.command.config.sys": {
     "line number": [
      506
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.GrabStdout.write": {
  "data": {
   "lineno": 498
  },
  "type": "function"
 },
 "numpy.distutils.command.config.LANG_EXT": {
  "data": {
   "shadows": "distutils.command.config.LANG_EXT"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.LinkError": {
  "data": {
   "shadows": "distutils.ccompiler.LinkError"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.check_compiler_gcc4": {
  "data": {
   "shadows": "numpy.distutils.command.autodist.check_compiler_gcc4"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.check_gcc_function_attribute": {
  "data": {
   "shadows": "numpy.distutils.command.autodist.check_gcc_function_attribute"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.check_gcc_variable_attribute": {
  "data": {
   "shadows": "numpy.distutils.command.autodist.check_gcc_variable_attribute"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.check_inline": {
  "data": {
   "shadows": "numpy.distutils.command.autodist.check_inline"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.check_restrict": {
  "data": {
   "shadows": "numpy.distutils.command.autodist.check_restrict"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.config": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "distutils.command.config.config": {
     "line number": [
      30
     ]
    },
    "distutils.command.config.config.user_options": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.config.config._check_compiler": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      53
     ]
    },
    "distutils.command.config.config._check_compiler": {
     "line number": [
      40
     ]
    },
    "distutils.msvc9compiler.get_build_version": {
     "line number": [
      73
     ]
    },
    "isinstance": {
     "line number": [
      79
     ]
    },
    "numpy.distutils.command.config.distutils": {
     "line number": [
      67
     ]
    },
    "numpy.distutils.command.config.sys": {
     "line number": [
      43
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      54
     ]
    },
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      79
     ]
    },
    "numpy.distutils.fcompiler.new_fcompiler": {
     "line number": [
      80
     ]
    },
    "print": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config._compile": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "distutils.command.config.config._compile": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config._link": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "OSError": {
     "line number": [
      128
     ]
    },
    "distutils.command.config.config._link": {
     "line number": [
      162
     ]
    },
    "distutils.file_util.copy_file": {
     "line number": [
      153
     ]
    },
    "distutils.log.warn": {
     "line number": [
      158
     ]
    },
    "numpy.distutils.command.config.os": {
     "line number": [
      140,
      141,
      148,
      149,
      152
     ]
    },
    "numpy.distutils.command.config.subprocess": {
     "line number": [
      126,
      128
     ]
    },
    "numpy.distutils.exec_command.filepath_from_subprocess_output": {
     "line number": [
      131
     ]
    },
    "numpy.distutils.mingw32ccompiler.generate_manifest": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config._wrap_method": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "distutils.ccompiler.CompileError": {
     "line number": [
      97,
      100
     ]
    },
    "distutils.errors.DistutilsExecError": {
     "line number": [
      97
     ]
    },
    "mth": {
     "line number": [
      96
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      98
     ]
    },
    "str": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_compiler_gcc4": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": {
    "numpy.distutils.command.autodist.check_compiler_gcc4": {
     "line number": [
      422
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_decl": {
  "data": {
   "lineno": 172
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_func": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "str": {
     "line number": [
      324
     ]
    },
    "type": {
     "line number": [
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_funcs_once": {
  "data": {
   "lineno": 349
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_gcc_function_attribute": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": {
    "numpy.distutils.command.autodist.check_gcc_function_attribute": {
     "line number": [
      425
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_gcc_variable_attribute": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": {
    "numpy.distutils.command.autodist.check_gcc_variable_attribute": {
     "line number": [
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_header": {
  "data": {
   "lineno": 166
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_inline": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": {
    "numpy.distutils.command.autodist.check_inline": {
     "line number": [
      413
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_macro_true": {
  "data": {
   "lineno": 187
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_restrict": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": {
    "numpy.distutils.command.autodist.check_restrict": {
     "line number": [
      418
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_type": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "numpy.distutils.command.config.distutils": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.check_type_size": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "distutils.ccompiler.CompileError": {
     "line number": [
      270,
      297,
      311
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.get_output": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      443
     ]
    },
    "Exception": {
     "line number": [
      452
     ]
    },
    "KeyboardInterrupt": {
     "line number": [
      482
     ]
    },
    "OSError": {
     "line number": [
      468
     ]
    },
    "distutils.ccompiler.CompileError": {
     "line number": [
      486
     ]
    },
    "distutils.ccompiler.LinkError": {
     "line number": [
      486
     ]
    },
    "distutils.log.error": {
     "line number": [
      479
     ]
    },
    "distutils.log.info": {
     "line number": [
      485,
      487
     ]
    },
    "hasattr": {
     "line number": [
      475
     ]
    },
    "numpy.distutils.command.config.GrabStdout": {
     "line number": [
      447
     ]
    },
    "numpy.distutils.command.config.os": {
     "line number": [
      456,
      475,
      476,
      477,
      478
     ]
    },
    "numpy.distutils.command.config.signal": {
     "line number": [
      480
     ]
    },
    "numpy.distutils.command.config.subprocess": {
     "line number": [
      464,
      465
     ]
    },
    "numpy.distutils.command.config.warnings": {
     "line number": [
      438
     ]
    },
    "numpy.distutils.exec_command.filepath_from_subprocess_output": {
     "line number": [
      474
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.config.initialize_options": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "distutils.command.config.config.initialize_options": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config.copy_file": {
  "data": {
   "shadows": "distutils.file_util.copy_file"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.distutils": {
  "data": {
   "shadows": "distutils"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.filepath_from_subprocess_output": {
  "data": {
   "shadows": "numpy.distutils.exec_command.filepath_from_subprocess_output"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.generate_manifest": {
  "data": {
   "shadows": "numpy.distutils.mingw32ccompiler.generate_manifest"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.get_exception": {
  "data": {
   "shadows": "numpy.distutils.compat.get_exception"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.msvc9compiler": {
  "data": {
   "shadows": "distutils.msvc9compiler"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.new_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.new_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.old_config": {
  "data": {
   "shadows": "distutils.command.config.config"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.signal": {
  "data": {
   "shadows": "signal"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.command.config.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.distutils.command.config_compiler": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.command.config_compiler.Command": {
  "data": {
   "shadows": "distutils.core.Command"
  },
  "type": "import"
 },
 "numpy.distutils.command.config_compiler.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.config_compiler.config_cc": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "distutils.core.Command": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.config_compiler.config_cc.finalize_options": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      112,
      123
     ]
    },
    "isinstance": {
     "line number": [
      114
     ]
    },
    "len": {
     "line number": [
      118
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      103
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      119
     ]
    },
    "setattr": {
     "line number": [
      123
     ]
    },
    "str": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config_compiler.config_cc.initialize_options": {
  "data": {
   "lineno": 99
  },
  "type": "function"
 },
 "numpy.distutils.command.config_compiler.config_cc.run": {
  "data": {
   "lineno": 126
  },
  "type": "function"
 },
 "numpy.distutils.command.config_compiler.config_fc": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "distutils.core.Command": {
     "line number": [
      20
     ]
    },
    "numpy.distutils.command.config_compiler.show_fortran_compilers": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.config_compiler.config_fc.finalize_options": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      71,
      82
     ]
    },
    "isinstance": {
     "line number": [
      73
     ]
    },
    "len": {
     "line number": [
      77
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      62
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      78
     ]
    },
    "setattr": {
     "line number": [
      82
     ]
    },
    "str": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.config_compiler.config_fc.initialize_options": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "numpy.distutils.command.config_compiler.config_fc.run": {
  "data": {
   "lineno": 84
  },
  "type": "function"
 },
 "numpy.distutils.command.config_compiler.distutils.core": {
  "data": {
   "shadows": "distutils.core"
  },
  "type": "import"
 },
 "numpy.distutils.command.config_compiler.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.config_compiler.log": {
  "data": {
   "shadows": "numpy.distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.command.config_compiler.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.config_compiler.show_fcompilers": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.show_fcompilers"
  },
  "type": "import"
 },
 "numpy.distutils.command.config_compiler.show_fortran_compilers": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.show_fcompilers": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.develop": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.command.develop.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.develop.develop": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "__doc__": {
     "line number": [
      11
     ]
    },
    "setuptools.command.develop.develop": {
     "line number": [
      10
     ]
    },
    "setuptools.command.develop.develop.__doc__": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.develop.develop.install_for_development": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "setuptools.command.develop.develop.install_for_development": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.develop.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.develop.old_develop": {
  "data": {
   "shadows": "setuptools.command.develop.develop"
  },
  "type": "import"
 },
 "numpy.distutils.command.develop.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.distutils_all": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.distutils.command.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.egg_info": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.command.egg_info._egg_info": {
  "data": {
   "shadows": "setuptools.command.egg_info.egg_info"
  },
  "type": "import"
 },
 "numpy.distutils.command.egg_info.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.egg_info.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.egg_info.egg_info": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "setuptools.command.egg_info.egg_info": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.egg_info.egg_info.run": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      21
     ]
    },
    "numpy.distutils.command.egg_info.sys": {
     "line number": [
      9
     ]
    },
    "numpy.distutils.command.egg_info.textwrap": {
     "line number": [
      12
     ]
    },
    "numpy.distutils.command.egg_info.warnings": {
     "line number": [
      21
     ]
    },
    "setuptools.command.egg_info.egg_info.run": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.egg_info.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.egg_info.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.command.egg_info.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "numpy.distutils.command.egg_info.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.distutils.command.install": {
  "data": {
   "symbols_in_volume": {
    "distutils.command.install.install": {
     "line number": [
      12
     ]
    },
    "numpy.distutils.command.install.sys": {
     "line number": [
      4
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.command.install.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.install.distutils_install": {
  "data": {
   "shadows": "distutils.command.install.install"
  },
  "type": "import"
 },
 "numpy.distutils.command.install.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.install.have_setuptools": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "numpy.distutils.command.install.install": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "numpy.distutils.command.install.old_install": {
     "line number": [
      14,
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.install.install.finalize_options": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "numpy.distutils.command.install.old_install": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.install.install.run": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "distutils.file_util.write_file": {
     "line number": [
      78
     ]
    },
    "numpy.distutils.command.install.have_setuptools": {
     "line number": [
      59
     ]
    },
    "numpy.distutils.command.install.old_install": {
     "line number": [
      60
     ]
    },
    "open": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.install.install.setuptools_run": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "distutils.command.install.install.run": {
     "line number": [
      36,
      54
     ]
    },
    "numpy.distutils.command.install.sys": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.install.old_install": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.distutils.command.install.old_install_mod": {
  "data": {
   "shadows": "distutils.command.install"
  },
  "type": "import"
 },
 "numpy.distutils.command.install.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.install.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.command.install.write_file": {
  "data": {
   "shadows": "distutils.file_util.write_file"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_clib": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.command.install_clib.Command": {
  "data": {
   "shadows": "distutils.core.Command"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_clib.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_clib.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_clib.get_cmd": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_cmd"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_clib.install_clib": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "distutils.core.Command": {
     "line number": [
      8
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.install_clib.install_clib.finalize_options": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "numpy.distutils.command.install_clib.install_clib.get_outputs": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "numpy.distutils.command.install_clib.install_clib.initialize_options": {
  "data": {
   "lineno": 13
  },
  "type": "function"
 },
 "numpy.distutils.command.install_clib.install_clib.run": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "distutils.ccompiler.new_compiler": {
     "line number": [
      26
     ]
    },
    "numpy.distutils.command.install_clib.os": {
     "line number": [
      32,
      34
     ]
    },
    "numpy.distutils.misc_util.get_cmd": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.install_clib.new_compiler": {
  "data": {
   "shadows": "distutils.ccompiler.new_compiler"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_clib.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_clib.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_data": {
  "data": {
   "symbols_in_volume": {
    "numpy.distutils.command.install_data.sys": {
     "line number": [
      4
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.command.install_data.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_data.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_data.have_setuptools": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "numpy.distutils.command.install_data.install_data": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "distutils.command.install_data.install_data": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.install_data.install_data.finalize_options": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "numpy.distutils.command.install_data.install_data.run": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "distutils.command.install_data.install_data.run": {
     "line number": [
      14
     ]
    },
    "numpy.distutils.command.install_data.have_setuptools": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.install_data.old_install_data": {
  "data": {
   "shadows": "distutils.command.install_data.install_data"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_data.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_data.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_headers": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.command.install_headers.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_headers.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_headers.install_headers": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "distutils.command.install_headers.install_headers": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.install_headers.install_headers.run": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      15
     ]
    },
    "numpy.distutils.command.install_headers.os": {
     "line number": [
      13,
      19,
      21
     ]
    },
    "tuple": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.install_headers.old_install_headers": {
  "data": {
   "shadows": "distutils.command.install_headers.install_headers"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_headers.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.command.install_headers.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.sdist": {
  "data": {
   "symbols_in_volume": {
    "numpy.distutils.command.sdist.sys": {
     "line number": [
      4
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.command.sdist.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.command.sdist.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.command.sdist.get_data_files": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_data_files"
  },
  "type": "import"
 },
 "numpy.distutils.command.sdist.old_sdist": {
  "data": {
   "shadows": "distutils.command.sdist.sdist"
  },
  "type": "import"
 },
 "numpy.distutils.command.sdist.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.command.sdist.sdist": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "distutils.command.sdist.sdist": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.command.sdist.sdist.add_defaults": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "distutils.command.sdist.sdist.add_defaults": {
     "line number": [
      14
     ]
    },
    "isinstance": {
     "line number": [
      25
     ]
    },
    "numpy.distutils.misc_util.get_data_files": {
     "line number": [
      20
     ]
    },
    "str": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.command.sdist.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.command.test_na_writable_attributes_deletion": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      13
     ]
    },
    "assert_raises": {
     "line number": [
      13
     ]
    },
    "delattr": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.compat": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.compat.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.compat.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.compat.get_exception": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "numpy.distutils.compat.sys": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.compat.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.compat.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.conv_template": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      336
     ]
    },
    "numpy.distutils.conv_template.main": {
     "line number": [
      337
     ]
    },
    "numpy.distutils.conv_template.re": {
     "line number": [
      144,
      145,
      158,
      159,
      160,
      161,
      214,
      265,
      266
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.conv_template.__all__": {
  "data": {
   "lineno": 84
  },
  "type": "constant"
 },
 "numpy.distutils.conv_template.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.conv_template.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.conv_template.exclude_re": {
  "data": {
   "lineno": 161
  },
  "type": "constant"
 },
 "numpy.distutils.conv_template.exclude_vars_re": {
  "data": {
   "lineno": 160
  },
  "type": "constant"
 },
 "numpy.distutils.conv_template.get_exception": {
  "data": {
   "shadows": "numpy.distutils.compat.get_exception"
  },
  "type": "import"
 },
 "numpy.distutils.conv_template.global_names": {
  "data": {
   "lineno": 93
  },
  "type": "constant"
 },
 "numpy.distutils.conv_template.header": {
  "data": {
   "lineno": 96
  },
  "type": "constant"
 },
 "numpy.distutils.conv_template.include_src_re": {
  "data": {
   "lineno": 265
  },
  "type": "constant"
 },
 "numpy.distutils.conv_template.main": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      319
     ]
    },
    "ValueError": {
     "line number": [
      331,
      333
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      332
     ]
    },
    "numpy.distutils.conv_template.os": {
     "line number": [
      324
     ]
    },
    "numpy.distutils.conv_template.process_str": {
     "line number": [
      330
     ]
    },
    "numpy.distutils.conv_template.sys": {
     "line number": [
      318,
      320,
      321
     ]
    },
    "open": {
     "line number": [
      323,
      326
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.conv_template.named_re": {
  "data": {
   "lineno": 159
  },
  "type": "constant"
 },
 "numpy.distutils.conv_template.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.conv_template.paren_repl": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "int": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.conv_template.parenrep": {
  "data": {
   "lineno": 144
  },
  "type": "constant"
 },
 "numpy.distutils.conv_template.parse_loop_header": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      190,
      208
     ]
    },
    "dict": {
     "line number": [
      203
     ]
    },
    "len": {
     "line number": [
      185
     ]
    },
    "numpy.distutils.conv_template.exclude_re": {
     "line number": [
      197
     ]
    },
    "numpy.distutils.conv_template.exclude_vars_re": {
     "line number": [
      202
     ]
    },
    "numpy.distutils.conv_template.named_re": {
     "line number": [
      180
     ]
    },
    "numpy.distutils.conv_template.parse_values": {
     "line number": [
      184
     ]
    },
    "numpy.distutils.conv_template.stripast": {
     "line number": [
      177
     ]
    },
    "range": {
     "line number": [
      209
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.conv_template.parse_string": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      243,
      246
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      244
     ]
    },
    "numpy.distutils.conv_template.parse_loop_header": {
     "line number": [
      242
     ]
    },
    "numpy.distutils.conv_template.parse_structure": {
     "line number": [
      229
     ]
    },
    "numpy.distutils.conv_template.replace_re": {
     "line number": [
      240,
      252,
      255
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.conv_template.parse_string.replace": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      223
     ]
    },
    "ValueError": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.conv_template.parse_structure": {
  "data": {
   "lineno": 107
  },
  "type": "function"
 },
 "numpy.distutils.conv_template.parse_values": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "numpy.distutils.conv_template.paren_repl": {
     "line number": [
      151,
      153
     ]
    },
    "numpy.distutils.conv_template.parenrep": {
     "line number": [
      151
     ]
    },
    "numpy.distutils.conv_template.plainrep": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.conv_template.plainrep": {
  "data": {
   "lineno": 145
  },
  "type": "constant"
 },
 "numpy.distutils.conv_template.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.conv_template.process_file": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      293,
      295
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      294
     ]
    },
    "numpy.distutils.conv_template.os": {
     "line number": [
      290
     ]
    },
    "numpy.distutils.conv_template.process_str": {
     "line number": [
      292
     ]
    },
    "numpy.distutils.conv_template.resolve_includes": {
     "line number": [
      289
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.conv_template.process_str": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": {
    "numpy.distutils.conv_template.global_names": {
     "line number": [
      261
     ]
    },
    "numpy.distutils.conv_template.header": {
     "line number": [
      260
     ]
    },
    "numpy.distutils.conv_template.parse_string": {
     "line number": [
      261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.conv_template.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.conv_template.replace_re": {
  "data": {
   "lineno": 214
  },
  "type": "constant"
 },
 "numpy.distutils.conv_template.resolve_includes": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "numpy.distutils.conv_template.include_src_re": {
     "line number": [
      273
     ]
    },
    "numpy.distutils.conv_template.os": {
     "line number": [
      269,
      276,
      277,
      278
     ]
    },
    "open": {
     "line number": [
      270
     ]
    },
    "print": {
     "line number": [
      279
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.conv_template.stripast": {
  "data": {
   "lineno": 158
  },
  "type": "constant"
 },
 "numpy.distutils.conv_template.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.conv_template.unique_key": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": {
    "list": {
     "line number": [
      304
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.core": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      14
     ]
    },
    "numpy.distutils.command.bdist_rpm.bdist_rpm": {
     "line number": [
      46
     ]
    },
    "numpy.distutils.command.build.build": {
     "line number": [
      32
     ]
    },
    "numpy.distutils.command.build_clib.build_clib": {
     "line number": [
      40
     ]
    },
    "numpy.distutils.command.build_ext.build_ext": {
     "line number": [
      38
     ]
    },
    "numpy.distutils.command.build_py.build_py": {
     "line number": [
      39
     ]
    },
    "numpy.distutils.command.build_scripts.build_scripts": {
     "line number": [
      34
     ]
    },
    "numpy.distutils.command.build_src.build_src": {
     "line number": [
      33
     ]
    },
    "numpy.distutils.command.config.config": {
     "line number": [
      37
     ]
    },
    "numpy.distutils.command.config_compiler.config_cc": {
     "line number": [
      35
     ]
    },
    "numpy.distutils.command.config_compiler.config_fc": {
     "line number": [
      36
     ]
    },
    "numpy.distutils.command.develop.develop": {
     "line number": [
      53
     ]
    },
    "numpy.distutils.command.egg_info.egg_info": {
     "line number": [
      55
     ]
    },
    "numpy.distutils.command.install.install": {
     "line number": [
      45
     ]
    },
    "numpy.distutils.command.install_clib.install_clib": {
     "line number": [
      44
     ]
    },
    "numpy.distutils.command.install_data.install_data": {
     "line number": [
      42
     ]
    },
    "numpy.distutils.command.install_headers.install_headers": {
     "line number": [
      43
     ]
    },
    "numpy.distutils.command.sdist.sdist": {
     "line number": [
      41
     ]
    },
    "numpy.distutils.core.have_setuptools": {
     "line number": [
      48
     ]
    },
    "numpy.distutils.core.numpy_cmdclass": {
     "line number": [
      52,
      53,
      54,
      55
     ]
    },
    "numpy.distutils.core.sys": {
     "line number": [
      6
     ]
    },
    "setuptools.command.bdist_egg.bdist_egg": {
     "line number": [
      52
     ]
    },
    "setuptools.command.easy_install.easy_install": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.core.Extension": {
  "data": {
   "shadows": "numpy.distutils.extension.Extension"
  },
  "type": "import"
 },
 "numpy.distutils.core.NumpyDistribution": {
  "data": {
   "shadows": "numpy.distutils.numpy_distribution.NumpyDistribution"
  },
  "type": "import"
 },
 "numpy.distutils.core._check_append_ext_library": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "numpy.distutils.core.warnings": {
     "line number": [
      208,
      213
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.core._check_append_library": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "numpy.distutils.core.warnings": {
     "line number": [
      180,
      186,
      193
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      175,
      176,
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.core._command_line_ok": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "numpy.distutils.core.sys": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.core._dict_append": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      72
     ]
    },
    "dict": {
     "line number": [
      67
     ]
    },
    "isinstance": {
     "line number": [
      63,
      65,
      67
     ]
    },
    "list": {
     "line number": [
      65,
      66
     ]
    },
    "numpy.distutils.misc_util.is_string": {
     "line number": [
      69
     ]
    },
    "repr": {
     "line number": [
      72
     ]
    },
    "tuple": {
     "line number": [
      63,
      64
     ]
    },
    "type": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.core.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.core.bdist_egg": {
  "data": {
   "shadows": "setuptools.command.bdist_egg"
  },
  "type": "import"
 },
 "numpy.distutils.core.bdist_rpm": {
  "data": {
   "shadows": "numpy.distutils.command.bdist_rpm"
  },
  "type": "import"
 },
 "numpy.distutils.core.build": {
  "data": {
   "shadows": "numpy.distutils.command.build"
  },
  "type": "import"
 },
 "numpy.distutils.core.build_clib": {
  "data": {
   "shadows": "numpy.distutils.command.build_clib"
  },
  "type": "import"
 },
 "numpy.distutils.core.build_ext": {
  "data": {
   "shadows": "numpy.distutils.command.build_ext"
  },
  "type": "import"
 },
 "numpy.distutils.core.build_py": {
  "data": {
   "shadows": "numpy.distutils.command.build_py"
  },
  "type": "import"
 },
 "numpy.distutils.core.build_scripts": {
  "data": {
   "shadows": "numpy.distutils.command.build_scripts"
  },
  "type": "import"
 },
 "numpy.distutils.core.build_src": {
  "data": {
   "shadows": "numpy.distutils.command.build_src"
  },
  "type": "import"
 },
 "numpy.distutils.core.config": {
  "data": {
   "shadows": "numpy.distutils.command.config"
  },
  "type": "import"
 },
 "numpy.distutils.core.config_compiler": {
  "data": {
   "shadows": "numpy.distutils.command.config_compiler"
  },
  "type": "import"
 },
 "numpy.distutils.core.develop": {
  "data": {
   "shadows": "numpy.distutils.command.develop"
  },
  "type": "import"
 },
 "numpy.distutils.core.distutils.core": {
  "data": {
   "shadows": "distutils.core"
  },
  "type": "import"
 },
 "numpy.distutils.core.distutils.dist": {
  "data": {
   "shadows": "distutils.dist"
  },
  "type": "import"
 },
 "numpy.distutils.core.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.core.easy_install": {
  "data": {
   "shadows": "setuptools.command.easy_install"
  },
  "type": "import"
 },
 "numpy.distutils.core.egg_info": {
  "data": {
   "shadows": "numpy.distutils.command.egg_info"
  },
  "type": "import"
 },
 "numpy.distutils.core.get_data_files": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_data_files"
  },
  "type": "import"
 },
 "numpy.distutils.core.get_distribution": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "numpy.distutils.numpy_distribution.NumpyDistribution": {
     "line number": [
      106
     ]
    },
    "repr": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.core.have_setuptools": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.distutils.core.install": {
  "data": {
   "shadows": "numpy.distutils.command.install"
  },
  "type": "import"
 },
 "numpy.distutils.core.install_clib": {
  "data": {
   "shadows": "numpy.distutils.command.install_clib"
  },
  "type": "import"
 },
 "numpy.distutils.core.install_data": {
  "data": {
   "shadows": "numpy.distutils.command.install_data"
  },
  "type": "import"
 },
 "numpy.distutils.core.install_headers": {
  "data": {
   "shadows": "numpy.distutils.command.install_headers"
  },
  "type": "import"
 },
 "numpy.distutils.core.is_sequence": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_sequence"
  },
  "type": "import"
 },
 "numpy.distutils.core.is_string": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_string"
  },
  "type": "import"
 },
 "numpy.distutils.core.numpy_cmdclass": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "numpy.distutils.core.old_setup": {
  "data": {
   "shadows": "distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.distutils.core.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.core.sdist": {
  "data": {
   "shadows": "numpy.distutils.command.sdist"
  },
  "type": "import"
 },
 "numpy.distutils.core.setup": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      154
     ]
    },
    "configuration": {
     "line number": [
      137
     ]
    },
    "distutils.core.setup": {
     "line number": [
      128,
      171
     ]
    },
    "hasattr": {
     "line number": [
      138
     ]
    },
    "numpy.distutils.command.config": {
     "line number": [
      137,
      138,
      139,
      140
     ]
    },
    "numpy.distutils.command.config.todict": {
     "line number": [
      139
     ]
    },
    "numpy.distutils.core._check_append_ext_library": {
     "line number": [
      149
     ]
    },
    "numpy.distutils.core._check_append_library": {
     "line number": [
      161
     ]
    },
    "numpy.distutils.core._command_line_ok": {
     "line number": [
      132
     ]
    },
    "numpy.distutils.core._dict_append": {
     "line number": [
      140
     ]
    },
    "numpy.distutils.core.numpy_cmdclass": {
     "line number": [
      111
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      147
     ]
    },
    "numpy.distutils.misc_util.is_string": {
     "line number": [
      151
     ]
    },
    "numpy.distutils.numpy_distribution.NumpyDistribution": {
     "line number": [
      169
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.core.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.core.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo": {
  "data": {
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.CPUInfoBase": {
     "line number": [
      674
     ]
    },
    "numpy.distutils.cpuinfo.DarwinCPUInfo": {
     "line number": [
      665
     ]
    },
    "numpy.distutils.cpuinfo.IRIXCPUInfo": {
     "line number": [
      663
     ]
    },
    "numpy.distutils.cpuinfo.LinuxCPUInfo": {
     "line number": [
      661,
      671
     ]
    },
    "numpy.distutils.cpuinfo.SunOSCPUInfo": {
     "line number": [
      667
     ]
    },
    "numpy.distutils.cpuinfo.Win32CPUInfo": {
     "line number": [
      669
     ]
    },
    "numpy.distutils.cpuinfo.cpuinfo": {
     "line number": [
      676
     ]
    },
    "numpy.distutils.cpuinfo.sys": {
     "line number": [
      22,
      660,
      662,
      664,
      666,
      668,
      670
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.cpuinfo.CPUInfoBase": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "object": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.cpuinfo.CPUInfoBase.__get_nbits": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.platform": {
     "line number": [
      95
     ]
    },
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.CPUInfoBase.__getattr__": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      89
     ]
    },
    "func": {
     "line number": [
      86
     ]
    },
    "getattr": {
     "line number": [
      84
     ]
    },
    "hasattr": {
     "line number": [
      83
     ]
    },
    "isinstance": {
     "line number": [
      85
     ]
    },
    "numpy.distutils.cpuinfo.types": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.CPUInfoBase._getNCPUs": {
  "data": {
   "lineno": 91
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.CPUInfoBase._is_32bit": {
  "data": {
   "lineno": 99
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.CPUInfoBase._is_64bit": {
  "data": {
   "lineno": 102
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.CPUInfoBase._try_call": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      78
     ]
    },
    "func": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.CPUInfoBase": {
     "line number": [
      359
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.command_info": {
     "line number": [
      365
     ]
    },
    "numpy.distutils.cpuinfo.key_value_from_command": {
     "line number": [
      367
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine": {
  "data": {
   "lineno": 383
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._getNCPUs": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": {
    "int": {
     "line number": [
      373
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_Power_Macintosh": {
  "data": {
   "lineno": 375
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_i386": {
  "data": {
   "lineno": 378
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc": {
  "data": {
   "lineno": 380
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc403": {
  "data": {
   "lineno": 397
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc505": {
  "data": {
   "lineno": 398
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc601": {
  "data": {
   "lineno": 385
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc602": {
  "data": {
   "lineno": 386
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc603": {
  "data": {
   "lineno": 387
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc603e": {
  "data": {
   "lineno": 388
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc604": {
  "data": {
   "lineno": 389
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc604e": {
  "data": {
   "lineno": 390
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc620": {
  "data": {
   "lineno": 391
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc630": {
  "data": {
   "lineno": 392
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc740": {
  "data": {
   "lineno": 393
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc7400": {
  "data": {
   "lineno": 394
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc7450": {
  "data": {
   "lineno": 395
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc750": {
  "data": {
   "lineno": 396
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc801": {
  "data": {
   "lineno": 399
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc821": {
  "data": {
   "lineno": 400
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc823": {
  "data": {
   "lineno": 401
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc860": {
  "data": {
   "lineno": 402
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.DarwinCPUInfo._not_impl": {
  "data": {
   "lineno": 370
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.CPUInfoBase": {
     "line number": [
      301
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype": {
  "data": {
   "lineno": 319
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.key_value_from_command": {
     "line number": [
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine": {
  "data": {
   "lineno": 340
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._getNCPUs": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "int": {
     "line number": [
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP19": {
  "data": {
   "lineno": 342
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP20": {
  "data": {
   "lineno": 343
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP21": {
  "data": {
   "lineno": 344
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22": {
  "data": {
   "lineno": 345
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22_4k": {
  "data": {
   "lineno": 346
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22_5k": {
  "data": {
   "lineno": 347
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP24": {
  "data": {
   "lineno": 348
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP25": {
  "data": {
   "lineno": 349
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP26": {
  "data": {
   "lineno": 350
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP27": {
  "data": {
   "lineno": 351
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP28": {
  "data": {
   "lineno": 352
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP30": {
  "data": {
   "lineno": 353
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32": {
  "data": {
   "lineno": 354
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32_10k": {
  "data": {
   "lineno": 356
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32_5k": {
  "data": {
   "lineno": 355
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r10000": {
  "data": {
   "lineno": 333
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r12000": {
  "data": {
   "lineno": 334
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r2000": {
  "data": {
   "lineno": 321
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r3000": {
  "data": {
   "lineno": 322
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r3900": {
  "data": {
   "lineno": 323
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4000": {
  "data": {
   "lineno": 324
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4100": {
  "data": {
   "lineno": 325
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4300": {
  "data": {
   "lineno": 326
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4400": {
  "data": {
   "lineno": 327
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4600": {
  "data": {
   "lineno": 328
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4650": {
  "data": {
   "lineno": 329
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r5000": {
  "data": {
   "lineno": 330
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r6000": {
  "data": {
   "lineno": 331
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r8000": {
  "data": {
   "lineno": 332
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_rorion": {
  "data": {
   "lineno": 335
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._is_singleCPU": {
  "data": {
   "lineno": 313
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo._not_impl": {
  "data": {
   "lineno": 311
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.IRIXCPUInfo.get_ip": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      339
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.CPUInfoBase": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "EnvironmentError": {
     "line number": [
      118
     ]
    },
    "UserWarning": {
     "line number": [
      120
     ]
    },
    "len": {
     "line number": [
      124
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      119
     ]
    },
    "numpy.distutils.cpuinfo.getoutput": {
     "line number": [
      113
     ]
    },
    "numpy.distutils.cpuinfo.warnings": {
     "line number": [
      120
     ]
    },
    "open": {
     "line number": [
      117
     ]
    },
    "str": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._getNCPUs": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": {
    "len": {
     "line number": [
      272
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._has_3dnow": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      296
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._has_3dnowext": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._has_f00f_bug": {
  "data": {
   "lineno": 277
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._has_fdiv_bug": {
  "data": {
   "lineno": 274
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._has_mmx": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      281
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      284
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse2": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      287
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse3": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._has_ssse3": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD": {
  "data": {
   "lineno": 137
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD64": {
  "data": {
   "lineno": 156
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Alpha": {
  "data": {
   "lineno": 177
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Athlon64": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      160
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonHX": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      164
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6_2": {
  "data": {
   "lineno": 140
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6_3": {
  "data": {
   "lineno": 143
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK7": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonMP": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Celeron": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      210
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Core2": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV4": {
  "data": {
   "lineno": 180
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV5": {
  "data": {
   "lineno": 183
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV56": {
  "data": {
   "lineno": 186
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Hammer": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Intel": {
  "data": {
   "lineno": 197
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Itanium": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      257
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Nocona": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      249
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Opteron": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PCA56": {
  "data": {
   "lineno": 189
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Pentium": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      214
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumII": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      218
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumIII": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      230
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumIV": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      234
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumM": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      238
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumMMX": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumPro": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Prescott": {
  "data": {
   "lineno": 241
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_XEON": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      261,
      262
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_i486": {
  "data": {
   "lineno": 200
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_i586": {
  "data": {
   "lineno": 203
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_i686": {
  "data": {
   "lineno": 206
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._is_singleCPU": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "len": {
     "line number": [
      269
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.LinuxCPUInfo._not_impl": {
  "data": {
   "lineno": 133
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.CPUInfoBase": {
     "line number": [
      405
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.command_by_line": {
     "line number": [
      419
     ]
    },
    "numpy.distutils.cpuinfo.command_info": {
     "line number": [
      412
     ]
    },
    "numpy.distutils.cpuinfo.key_value_from_command": {
     "line number": [
      418
     ]
    },
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      420
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._getNCPUs": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": {
    "int": {
     "line number": [
      436
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_SUNW": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      442
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv7": {
  "data": {
   "lineno": 472
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv8": {
  "data": {
   "lineno": 474
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv9": {
  "data": {
   "lineno": 476
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_i386": {
  "data": {
   "lineno": 428
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparc": {
  "data": {
   "lineno": 430
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparcstation5": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      444
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparcv9": {
  "data": {
   "lineno": 432
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_sun4": {
  "data": {
   "lineno": 438
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_sunfire": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      468
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      470
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra1": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      446
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra2": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      450
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra250": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      448
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra30": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      452
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra4": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      454
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra5": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      458
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra5_10": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      456
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra60": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      460
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra80": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      462
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultraenterprice": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultraenterprice10k": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      466
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.SunOSCPUInfo._not_impl": {
  "data": {
   "lineno": 426
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.CPUInfoBase": {
     "line number": [
      479
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo.__init__": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      526
     ]
    },
    "_winreg.EnumKey": {
     "line number": [
      504
     ]
    },
    "_winreg.EnumValue": {
     "line number": [
      514
     ]
    },
    "_winreg.HKEY_LOCAL_MACHINE": {
     "line number": [
      500
     ]
    },
    "_winreg.OpenKey": {
     "line number": [
      500,
      510
     ]
    },
    "_winreg.error": {
     "line number": [
      505,
      515
     ]
    },
    "int": {
     "line number": [
      523,
      524,
      525
     ]
    },
    "numpy.distutils.cpuinfo.re": {
     "line number": [
      498,
      499
     ]
    },
    "numpy.distutils.cpuinfo.sys": {
     "line number": [
      493,
      527
     ]
    },
    "print": {
     "line number": [
      527
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._getNCPUs": {
  "data": {
   "lineno": 621,
   "symbols_in_volume": {
    "len": {
     "line number": [
      622
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._has_3dnow": {
  "data": {
   "lineno": 654
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._has_3dnowext": {
  "data": {
   "lineno": 657
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._has_mmx": {
  "data": {
   "lineno": 624
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._has_sse": {
  "data": {
   "lineno": 633
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._has_sse2": {
  "data": {
   "lineno": 645
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMD": {
  "data": {
   "lineno": 534
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMD64": {
  "data": {
   "lineno": 566
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK5": {
  "data": {
   "lineno": 543
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6": {
  "data": {
   "lineno": 547
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6_2": {
  "data": {
   "lineno": 551
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6_3": {
  "data": {
   "lineno": 555
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK7": {
  "data": {
   "lineno": 559
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_Am486": {
  "data": {
   "lineno": 537
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_Am5x86": {
  "data": {
   "lineno": 540
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_Core2": {
  "data": {
   "lineno": 612
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_Intel": {
  "data": {
   "lineno": 571
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_Pentium": {
  "data": {
   "lineno": 586
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumII": {
  "data": {
   "lineno": 597
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumIII": {
  "data": {
   "lineno": 601
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumIV": {
  "data": {
   "lineno": 605
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumM": {
  "data": {
   "lineno": 608
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumMMX": {
  "data": {
   "lineno": 589
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumPro": {
  "data": {
   "lineno": 593
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_i386": {
  "data": {
   "lineno": 574
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_i486": {
  "data": {
   "lineno": 577
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_i586": {
  "data": {
   "lineno": 580
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_i686": {
  "data": {
   "lineno": 583
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._is_singleCPU": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": {
    "len": {
     "line number": [
      619
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.Win32CPUInfo._not_impl": {
  "data": {
   "lineno": 530
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.distutils.cpuinfo.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo.command_by_line": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.getoutput": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.command_info": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.getoutput": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.cpu": {
  "data": {
   "lineno": 676
  },
  "type": "constant"
 },
 "numpy.distutils.cpuinfo.cpuinfo": {
  "data": {
   "lineno": 674
  },
  "type": "constant"
 },
 "numpy.distutils.cpuinfo.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo.get_exception": {
  "data": {
   "shadows": "numpy.distutils.compat.get_exception"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo.getoutput": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "EnvironmentError": {
     "line number": [
      35
     ]
    },
    "UserWarning": {
     "line number": [
      37
     ]
    },
    "commands.getstatusoutput": {
     "line number": [
      34
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      36
     ]
    },
    "numpy.distutils.cpuinfo.os": {
     "line number": [
      39,
      39
     ]
    },
    "numpy.distutils.cpuinfo.warnings": {
     "line number": [
      37
     ]
    },
    "str": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.getstatusoutput": {
  "data": {
   "shadows": "commands.getstatusoutput"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo.key_value_from_command": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "len": {
     "line number": [
      66
     ]
    },
    "numpy.distutils.cpuinfo.command_by_line": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.cpuinfo.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.distutils.cpuinfo.winreg": {
  "data": {
   "shadows": "_winreg"
  },
  "type": "import"
 },
 "numpy.distutils.customized_ccompiler": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "numpy.distutils.customized_fcompiler": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.new_fcompiler": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.exec_command": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.exec_command.__all__": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "numpy.distutils.exec_command._exec_command": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "EnvironmentError": {
     "line number": [
      299
     ]
    },
    "numpy.distutils.exec_command._quote_arg": {
     "line number": [
      286
     ]
    },
    "numpy.distutils.exec_command.locale": {
     "line number": [
      304
     ]
    },
    "numpy.distutils.exec_command.os": {
     "line number": [
      270,
      272,
      274,
      276,
      283
     ]
    },
    "numpy.distutils.exec_command.subprocess": {
     "line number": [
      295,
      296,
      297
     ]
    },
    "numpy.distutils.exec_command.sys": {
     "line number": [
      315
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      277,
      283
     ]
    },
    "print": {
     "line number": [
      319
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.exec_command._preserve_environment": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": {
    "numpy.distutils.exec_command.os": {
     "line number": [
      174
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      173
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.exec_command._quote_arg": {
  "data": {
   "lineno": 323
  },
  "type": "function"
 },
 "numpy.distutils.exec_command._supports_fileno": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      190
     ]
    },
    "hasattr": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.exec_command._update_environment": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "numpy.distutils.exec_command.os": {
     "line number": [
      180
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.exec_command.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.exec_command.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.exec_command.exec_command": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      233
     ]
    },
    "list": {
     "line number": [
      248
     ]
    },
    "numpy.distutils.exec_command._exec_command": {
     "line number": [
      252
     ]
    },
    "numpy.distutils.exec_command._preserve_environment": {
     "line number": [
      248
     ]
    },
    "numpy.distutils.exec_command._update_environment": {
     "line number": [
      249,
      260
     ]
    },
    "numpy.distutils.exec_command.os": {
     "line number": [
      227,
      229,
      230,
      231,
      231,
      234,
      234,
      235,
      236,
      238,
      239,
      240,
      243,
      258
     ]
    },
    "numpy.distutils.exec_command.sys": {
     "line number": [
      238
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      223,
      244,
      246,
      259
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.exec_command.filepath_from_subprocess_output": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "numpy.distutils.exec_command.locale": {
     "line number": [
      70
     ]
    },
    "numpy.distutils.exec_command.sys": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.exec_command.find_executable": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      129
     ]
    },
    "numpy.distutils.exec_command.os": {
     "line number": [
      135,
      135,
      136,
      137,
      145,
      146,
      151,
      154,
      154,
      157,
      160,
      162,
      162,
      162
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      131
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      163
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      167
     ]
    },
    "realpath": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.exec_command.forward_bytes_to_stdout": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      96,
      99
     ]
    },
    "numpy.distutils.exec_command.sys": {
     "line number": [
      93,
      95,
      96,
      98,
      99,
      101,
      101,
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.exec_command.get_pythonexe": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "numpy.distutils.exec_command.os": {
     "line number": [
      114,
      115,
      117,
      118
     ]
    },
    "numpy.distutils.exec_command.sys": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.exec_command.is_sequence": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_sequence"
  },
  "type": "import"
 },
 "numpy.distutils.exec_command.locale": {
  "data": {
   "shadows": "locale"
  },
  "type": "import"
 },
 "numpy.distutils.exec_command.log": {
  "data": {
   "shadows": "numpy.distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.exec_command.make_temp_file": {
  "data": {
   "shadows": "numpy.distutils.misc_util.make_temp_file"
  },
  "type": "import"
 },
 "numpy.distutils.exec_command.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.exec_command.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.exec_command.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.distutils.exec_command.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.exec_command.temp_file_name": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.make_temp_file": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.extension": {
  "data": {
   "symbols_in_volume": {
    "numpy.distutils.extension.re": {
     "line number": [
      19,
      19,
      20,
      20
     ]
    },
    "numpy.distutils.extension.sys": {
     "line number": [
      15
     ]
    },
    "str": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.extension.Extension": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "distutils.extension.Extension": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.extension.Extension.__init__": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "SyntaxWarning": {
     "line number": [
      66
     ]
    },
    "distutils.extension.Extension.__init__": {
     "line number": [
      43
     ]
    },
    "isinstance": {
     "line number": [
      63
     ]
    },
    "numpy.distutils.extension.basestring": {
     "line number": [
      63
     ]
    },
    "numpy.distutils.extension.warnings": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.extension.Extension.has_cxx_sources": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "numpy.distutils.extension.cxx_ext_re": {
     "line number": [
      83
     ]
    },
    "str": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.extension.Extension.has_f2py_sources": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "numpy.distutils.extension.fortran_pyf_ext_re": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.extension.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.extension.basestring": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.distutils.extension.cxx_ext_re": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.distutils.extension.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.extension.fortran_pyf_ext_re": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.distutils.extension.old_Extension": {
  "data": {
   "shadows": "distutils.extension.Extension"
  },
  "type": "import"
 },
 "numpy.distutils.extension.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.extension.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.extension.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.extension.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      1031
     ]
    },
    "numpy.distutils.fcompiler.re": {
     "line number": [
      972,
      972,
      973,
      973,
      974,
      974,
      975,
      975,
      976,
      976,
      1008,
      1008
     ]
    },
    "numpy.distutils.fcompiler.show_fcompilers": {
     "line number": [
      1032
     ]
    },
    "set": {
     "line number": [
      863
     ]
    },
    "type": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.CCompiler": {
  "data": {
   "shadows": "numpy.distutils.ccompiler.CCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.CompileError": {
  "data": {
   "shadows": "distutils.errors.CompileError"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.CompilerNotFound": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.Distribution": {
  "data": {
   "shadows": "distutils.dist.Distribution"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.DistutilsExecError": {
  "data": {
   "shadows": "distutils.errors.DistutilsExecError"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.DistutilsModuleError": {
  "data": {
   "shadows": "distutils.errors.DistutilsModuleError"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.DistutilsPlatformError": {
  "data": {
   "shadows": "distutils.errors.DistutilsPlatformError"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.FCompiler": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "EnvironmentConfig": {
     "line number": [
      104,
      112,
      124
     ]
    },
    "_command_property": {
     "line number": [
      254,
      255,
      256,
      257,
      258,
      259,
      260,
      261
     ]
    },
    "numpy.distutils.ccompiler.CCompiler": {
     "line number": [
      63
     ]
    },
    "numpy.distutils.fcompiler.flaglist": {
     "line number": [
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142
     ]
    },
    "numpy.distutils.fcompiler.str2bool": {
     "line number": [
      106,
      107,
      108,
      109
     ]
    },
    "numpy.distutils.misc_util.get_shared_lib_extension": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.FCompiler.__copy__": {
  "data": {
   "lineno": 234
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.__init__": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "numpy.distutils.ccompiler.CCompiler.__init__": {
     "line number": [
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler._command_property": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": {
    "property": {
     "line number": [
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler._command_property.fget": {
  "data": {
   "lineno": 250
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler._compile": {
  "data": {
   "lineno": 571,
   "symbols_in_volume": {
    "distutils.errors.CompileError": {
     "line number": [
      619
     ]
    },
    "distutils.errors.DistutilsExecError": {
     "line number": [
      583,
      590,
      617
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      618
     ]
    },
    "numpy.distutils.fcompiler.get_f77flags": {
     "line number": [
      577
     ]
    },
    "numpy.distutils.fcompiler.has_f90_header": {
     "line number": [
      574
     ]
    },
    "numpy.distutils.fcompiler.is_f_file": {
     "line number": [
      574
     ]
    },
    "numpy.distutils.fcompiler.is_free_format": {
     "line number": [
      579
     ]
    },
    "numpy.distutils.fcompiler.os": {
     "line number": [
      613
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      602,
      607
     ]
    },
    "str": {
     "line number": [
      618
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler._environment_hook": {
  "data": {
   "lineno": 691,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      697,
      708
     ]
    },
    "hook": {
     "line number": [
      698,
      708,
      709
     ]
    },
    "hook_name": {
     "line number": [
      711
     ]
    },
    "numpy.distutils.misc_util.is_string": {
     "line number": [
      694
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler._get_command_flags": {
  "data": {
   "lineno": 380
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.can_ccompiler_link": {
  "data": {
   "lineno": 713
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.copy": {
  "data": {
   "lineno": 243
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.customize": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": {
    "distutils.sysconfig.get_python_lib": {
     "line number": [
      532
     ]
    },
    "get_flags": {
     "line number": [
      511,
      513,
      515
     ]
    },
    "numpy.distutils._shell_utils.NativeParser.split": {
     "line number": [
      478,
      481,
      494
     ]
    },
    "numpy.distutils.fcompiler.os": {
     "line number": [
      533,
      534
     ]
    },
    "numpy.distutils.fcompiler.sys": {
     "line number": [
      531
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      451
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.customize.get_flags": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      502,
      503,
      508,
      509
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.dump_properties": {
  "data": {
   "lineno": 551,
   "symbols_in_volume": {
    "distutils.fancy_getopt.FancyGetopt": {
     "line number": [
      562
     ]
    },
    "getattr": {
     "line number": [
      558
     ]
    },
    "hasattr": {
     "line number": [
      557
     ]
    },
    "list": {
     "line number": [
      554
     ]
    },
    "print": {
     "line number": [
      567
     ]
    },
    "repr": {
     "line number": [
      559
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.find_executables": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.CompilerNotFound": {
     "line number": [
      352
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      350,
      356
     ]
    },
    "set_exe": {
     "line number": [
      346,
      348,
      354,
      357,
      359,
      360,
      361,
      362,
      363
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.find_executables.cached_find_executable": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": {
    "numpy.distutils.exec_command.find_executable": {
     "line number": [
      305
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.find_executables.set_exe": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "cached_find_executable": {
     "line number": [
      338
     ]
    },
    "getattr": {
     "line number": [
      319
     ]
    },
    "set": {
     "line number": [
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.find_executables.verify_command_form": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      310
     ]
    },
    "numpy.distutils.fcompiler.is_sequence_of_strings": {
     "line number": [
      309
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_flags": {
  "data": {
   "lineno": 376
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_flags_ar": {
  "data": {
   "lineno": 404
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_flags_arch": {
  "data": {
   "lineno": 410
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_flags_debug": {
  "data": {
   "lineno": 413
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_flags_f77": {
  "data": {
   "lineno": 386
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_flags_f90": {
  "data": {
   "lineno": 389
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_flags_fix": {
  "data": {
   "lineno": 395
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_flags_free": {
  "data": {
   "lineno": 392
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_flags_linker_exe": {
  "data": {
   "lineno": 401
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_flags_linker_so": {
  "data": {
   "lineno": 398
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_flags_opt": {
  "data": {
   "lineno": 407
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_libraries": {
  "data": {
   "lineno": 421
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_library_dirs": {
  "data": {
   "lineno": 424
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.get_version": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": {
    "numpy.distutils.ccompiler.CCompiler.get_version": {
     "line number": [
      430
     ]
    },
    "numpy.distutils.fcompiler.CompilerNotFound": {
     "line number": [
      432
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.library_dir_option": {
  "data": {
   "lineno": 641,
   "symbols_in_volume": {
    "dir": {
     "line number": [
      642
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.library_option": {
  "data": {
   "lineno": 639
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.link": {
  "data": {
   "lineno": 644,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      658
     ]
    },
    "distutils.errors.DistutilsExecError": {
     "line number": [
      685
     ]
    },
    "distutils.errors.LinkError": {
     "line number": [
      687
     ]
    },
    "numpy.distutils.ccompiler.CCompiler.EXECUTABLE": {
     "line number": [
      678
     ]
    },
    "numpy.distutils.ccompiler.gen_lib_options": {
     "line number": [
      653
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      686
     ]
    },
    "numpy.distutils.fcompiler.os": {
     "line number": [
      656,
      677
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      689
     ]
    },
    "numpy.distutils.misc_util.is_string": {
     "line number": [
      655,
      666
     ]
    },
    "str": {
     "line number": [
      686
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.module_options": {
  "data": {
   "lineno": 621,
   "symbols_in_volume": {
    "print": {
     "line number": [
      629,
      630,
      635,
      636
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.set_command": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      273
     ]
    },
    "distutils.util.split_quoted": {
     "line number": [
      277
     ]
    },
    "numpy.distutils.fcompiler.is_sequence_of_strings": {
     "line number": [
      278
     ]
    },
    "numpy.distutils.misc_util.is_string": {
     "line number": [
      276
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.set_commands": {
  "data": {
   "lineno": 267
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.set_executable": {
  "data": {
   "lineno": 264
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.update_executables": {
  "data": {
   "lineno": 365
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FCompiler.wrap_unlinkable_objects": {
  "data": {
   "lineno": 720,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      743
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.FancyGetopt": {
  "data": {
   "shadows": "distutils.fancy_getopt.FancyGetopt"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.LinkError": {
  "data": {
   "shadows": "distutils.errors.LinkError"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.__metaclass__": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler._default_compilers": {
  "data": {
   "lineno": 747
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler._f77flags_re": {
  "data": {
   "lineno": 1008
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler._find_existing_fcompiler": {
  "data": {
   "lineno": 795,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      822
     ]
    },
    "distutils.errors.DistutilsModuleError": {
     "line number": [
      824
     ]
    },
    "numpy.distutils.core.get_distribution": {
     "line number": [
      800
     ]
    },
    "numpy.distutils.fcompiler.CompilerNotFound": {
     "line number": [
      826
     ]
    },
    "numpy.distutils.fcompiler.new_fcompiler": {
     "line number": [
      804,
      815
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      825,
      827
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      812
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler._free_f90_start": {
  "data": {
   "lineno": 976
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler._has_f90_header": {
  "data": {
   "lineno": 974
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler._has_f_header": {
  "data": {
   "lineno": 973
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler._has_fix_header": {
  "data": {
   "lineno": 975
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler._shell_utils": {
  "data": {
   "shadows": "numpy.distutils._shell_utils"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.absoft": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      154
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      156
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      158
     ]
    },
    "print": {
     "line number": [
      158
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      18
     ]
    },
    "numpy.distutils.fcompiler.absoft.os": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler.get_flags": {
     "line number": [
      108
     ]
    },
    "numpy.distutils.fcompiler.absoft.os": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_f77": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler.get_flags_f77": {
     "line number": [
      117
     ]
    },
    "numpy.distutils.fcompiler.absoft.os": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_f90": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler.get_flags_f90": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_fix": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler.get_flags_fix": {
     "line number": [
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_linker_so": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.absoft.os": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_opt": {
  "data": {
   "lineno": 150
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_libraries": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler.get_libraries": {
     "line number": [
      94
     ]
    },
    "numpy.distutils.fcompiler.absoft.os": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_library_dirs": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.cpu.is_64bit": {
     "line number": [
      86
     ]
    },
    "numpy.distutils.fcompiler.FCompiler.get_library_dirs": {
     "line number": [
      78
     ]
    },
    "numpy.distutils.fcompiler.absoft.os": {
     "line number": [
      79,
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.library_dir_option": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "dir": {
     "line number": [
      69,
      70
     ]
    },
    "numpy.distutils.fcompiler.absoft.os": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.library_option": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.absoft.os": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.update_executables": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.dummy_fortran_file": {
     "line number": [
      50
     ]
    },
    "numpy.distutils.misc_util.cyg2win32": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.absoft.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.absoft.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.absoft.compilers": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.absoft.cpu": {
  "data": {
   "shadows": "numpy.distutils.cpuinfo.cpu"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.absoft.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.absoft.cyg2win32": {
  "data": {
   "shadows": "numpy.distutils.misc_util.cyg2win32"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.absoft.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.absoft.dummy_fortran_file": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.dummy_fortran_file"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.absoft.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.absoft.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.absoft.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.all_strings": {
  "data": {
   "shadows": "numpy.distutils.misc_util.all_strings"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.available_fcompilers_for_platform": {
  "data": {
   "lineno": 832,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler._default_compilers": {
     "line number": [
      838
     ]
    },
    "numpy.distutils.fcompiler.os": {
     "line number": [
      834
     ]
    },
    "numpy.distutils.fcompiler.re": {
     "line number": [
      839,
      839
     ]
    },
    "numpy.distutils.fcompiler.sys": {
     "line number": [
      836
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.compaq": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      122
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      124
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      126
     ]
    },
    "numpy.distutils.fcompiler.compaq.compilers": {
     "line number": [
      17
     ]
    },
    "numpy.distutils.fcompiler.compaq.os": {
     "line number": [
      13
     ]
    },
    "numpy.distutils.fcompiler.compaq.sys": {
     "line number": [
      13
     ]
    },
    "print": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.compaq.CompaqFCompiler": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      19
     ]
    },
    "numpy.distutils.fcompiler.compaq.sys": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_arch": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_debug": {
  "data": {
   "lineno": 45
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_linker_so": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.compaq.sys": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_opt": {
  "data": {
   "lineno": 47
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      85
     ]
    },
    "IOError": {
     "line number": [
      91
     ]
    },
    "ValueError": {
     "line number": [
      96
     ]
    },
    "distutils.errors.DistutilsPlatformError": {
     "line number": [
      83
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      86,
      92,
      97
     ]
    },
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      57
     ]
    },
    "numpy.distutils.fcompiler.compaq.sys": {
     "line number": [
      76
     ]
    },
    "numpy.distutils.msvccompiler.MSVCCompiler": {
     "line number": [
      80
     ]
    },
    "print": {
     "line number": [
      88,
      94,
      99
     ]
    },
    "str": {
     "line number": [
      87,
      93,
      98
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags": {
  "data": {
   "lineno": 112
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_arch": {
  "data": {
   "lineno": 117
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_debug": {
  "data": {
   "lineno": 119
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_opt": {
  "data": {
   "lineno": 115
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.compaq.DistutilsPlatformError": {
  "data": {
   "shadows": "distutils.errors.DistutilsPlatformError"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.compaq.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.compaq.MSVCCompiler": {
  "data": {
   "shadows": "numpy.distutils.msvccompiler.MSVCCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.compaq.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.compaq.compilers": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.compaq.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.compaq.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.compaq.get_exception": {
  "data": {
   "shadows": "numpy.distutils.compat.get_exception"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.compaq.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.compaq.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.compaq.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.compaq.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.config_fc": {
  "data": {
   "shadows": "numpy.distutils.command.config_compiler.config_fc"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.dummy_fortran_file": {
  "data": {
   "lineno": 965,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.make_temp_file": {
     "line number": [
      966
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.environment": {
  "data": {
   "symbols_in_volume": {
    "type": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.environment.Distribution": {
  "data": {
   "shadows": "distutils.dist.Distribution"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.environment.EnvironmentConfig": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "object": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.environment.EnvironmentConfig.__getattr__": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      39
     ]
    },
    "KeyError": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.environment.EnvironmentConfig.__init__": {
  "data": {
   "lineno": 10
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.environment.EnvironmentConfig._get_var": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      69
     ]
    },
    "convert": {
     "line number": [
      53,
      74,
      75
     ]
    },
    "numpy.distutils.fcompiler.environment.os": {
     "line number": [
      56,
      59,
      63
     ]
    },
    "numpy.distutils.fcompiler.environment.warnings": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.environment.EnvironmentConfig.clone": {
  "data": {
   "lineno": 78
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.environment.EnvironmentConfig.dump_variable": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "convert": {
     "line number": [
      23,
      26,
      29
     ]
    },
    "numpy.distutils.fcompiler.environment.os": {
     "line number": [
      25
     ]
    },
    "print": {
     "line number": [
      21,
      23,
      26,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.environment.EnvironmentConfig.dump_variables": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.environment.EnvironmentConfig.get": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.environment.EnvironmentConfig.use_distribution": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "distutils.dist.Distribution": {
     "line number": [
      85
     ]
    },
    "isinstance": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.environment.__metaclass__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.environment.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.environment.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.environment.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.environment.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.environment.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.failed_fcompilers": {
  "data": {
   "lineno": 863
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.fcompiler_aliases": {
  "data": {
   "lineno": 765
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.fcompiler_class": {
  "data": {
   "lineno": 764
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.find_executable": {
  "data": {
   "shadows": "numpy.distutils.exec_command.find_executable"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.flaglist": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "distutils.util.split_quoted": {
     "line number": [
      51
     ]
    },
    "numpy.distutils.misc_util.is_string": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.g95": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      40
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      43
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      44
     ]
    },
    "print": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.g95.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.g95.G95FCompiler": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      8
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.g95.G95FCompiler.get_flags": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.g95.G95FCompiler.get_flags_debug": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.g95.G95FCompiler.get_flags_opt": {
  "data": {
   "lineno": 35
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.g95.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.g95.compilers": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.g95.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.g95.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.g95.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.g95.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gen_lib_options": {
  "data": {
   "shadows": "numpy.distutils.ccompiler.gen_lib_options"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.get_default_fcompiler": {
  "data": {
   "lineno": 847,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler._find_existing_fcompiler": {
     "line number": [
      855
     ]
    },
    "numpy.distutils.fcompiler.available_fcompilers_for_platform": {
     "line number": [
      851
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      853
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.get_distribution": {
  "data": {
   "shadows": "numpy.distutils.core.get_distribution"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.get_exception": {
  "data": {
   "shadows": "numpy.distutils.compat.get_exception"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.get_f77flags": {
  "data": {
   "lineno": 1009,
   "symbols_in_volume": {
    "distutils.util.split_quoted": {
     "line number": [
      1025
     ]
    },
    "numpy.compat.open_latin1": {
     "line number": [
      1016
     ]
    },
    "numpy.distutils.fcompiler._f77flags_re": {
     "line number": [
      1021
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.get_python_lib": {
  "data": {
   "shadows": "distutils.sysconfig.get_python_lib"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.get_shared_lib_extension": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_shared_lib_extension"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.glob": {
  "data": {
   "shadows": "glob.glob"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu": {
  "data": {
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      563
     ]
    },
    "__name__": {
     "line number": [
      555
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      558
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      564
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      560,
      562
     ]
    },
    "numpy.distutils.fcompiler.gnu.is_win64": {
     "line number": [
      29
     ]
    },
    "numpy.distutils.fcompiler.gnu.re": {
     "line number": [
      20
     ]
    },
    "print": {
     "line number": [
      560,
      562,
      564
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.gnu.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.GnuFCompiler": {
     "line number": [
      279
     ]
    },
    "numpy.distutils.fcompiler.gnu._EXTRAFLAGS": {
     "line number": [
      307,
      309,
      311
     ]
    },
    "numpy.distutils.fcompiler.gnu.platform": {
     "line number": [
      323
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler._hash_files": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.base64": {
     "line number": [
      417
     ]
    },
    "numpy.distutils.fcompiler.gnu.hashlib": {
     "line number": [
      409
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      418
     ]
    },
    "open": {
     "line number": [
      411
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler._link_wrapper_lib": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      431
     ]
    },
    "list": {
     "line number": [
      433,
      433,
      455,
      461
     ]
    },
    "numpy.distutils.fcompiler.gnu.is_win64": {
     "line number": [
      435,
      471
     ]
    },
    "numpy.distutils.fcompiler.gnu.os": {
     "line number": [
      440,
      441,
      446,
      447,
      448,
      450
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler._universal_flags": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu._can_target": {
     "line number": [
      341
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      331
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.can_ccompiler_link": {
  "data": {
   "lineno": 484
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_flags": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.GnuFCompiler": {
     "line number": [
      346
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_flags_linker_so": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.GnuFCompiler": {
     "line number": [
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_libraries": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.GnuFCompiler": {
     "line number": [
      379
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      380,
      382
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_library_dirs": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.GnuFCompiler": {
     "line number": [
      360
     ]
    },
    "numpy.distutils.fcompiler.gnu.os": {
     "line number": [
      366,
      367,
      367,
      368,
      369,
      370,
      370
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      361
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_target": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": {
    "OSError": {
     "line number": [
      399
     ]
    },
    "numpy.distutils.exec_command.filepath_from_subprocess_output": {
     "line number": [
      402
     ]
    },
    "numpy.distutils.fcompiler.gnu.TARGET_R": {
     "line number": [
      403
     ]
    },
    "numpy.distutils.fcompiler.gnu.subprocess": {
     "line number": [
      398,
      399
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.version_match": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      295
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.wrap_unlinkable_objects": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      531
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      36
     ]
    },
    "numpy.distutils.fcompiler.gnu.os": {
     "line number": [
      107
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      107,
      111
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler._c_arch_flags": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      256
     ]
    },
    "distutils.sysconfig.get_config_vars": {
     "line number": [
      255
     ]
    },
    "numpy.distutils.fcompiler.gnu.re": {
     "line number": [
      258
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_arch": {
  "data": {
   "lineno": 264
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_debug": {
  "data": {
   "lineno": 237
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_linker_so": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      138
     ]
    },
    "distutils.sysconfig.get_makefile_filename": {
     "line number": [
      137
     ]
    },
    "distutils.sysconfig.parse_makefile": {
     "line number": [
      142
     ]
    },
    "get_makefile_filename": {
     "line number": [
      141
     ]
    },
    "numpy.distutils.fcompiler.gnu.os": {
     "line number": [
      121,
      144
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      120,
      152
     ]
    },
    "numpy.distutils.fcompiler.gnu.warnings": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_opt": {
  "data": {
   "lineno": 240
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgcc_dir": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "OSError": {
     "line number": [
      166
     ]
    },
    "numpy.distutils.exec_command.filepath_from_subprocess_output": {
     "line number": [
      169
     ]
    },
    "numpy.distutils.fcompiler.gnu.os": {
     "line number": [
      170
     ]
    },
    "numpy.distutils.fcompiler.gnu.subprocess": {
     "line number": [
      164,
      166
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgfortran_dir": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "OSError": {
     "line number": [
      187
     ]
    },
    "numpy.distutils.exec_command.filepath_from_subprocess_output": {
     "line number": [
      190
     ]
    },
    "numpy.distutils.fcompiler.gnu.os": {
     "line number": [
      191
     ]
    },
    "numpy.distutils.fcompiler.gnu.subprocess": {
     "line number": [
      185,
      187
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      174,
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libraries": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.os": {
     "line number": [
      222,
      222
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      230,
      233
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_library_dirs": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.os": {
     "line number": [
      201,
      202,
      203,
      204,
      204,
      205,
      205,
      206,
      207
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      196,
      200
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler.gnu_version_match": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      83
     ]
    },
    "len": {
     "line number": [
      51
     ]
    },
    "numpy.distutils.fcompiler.gnu.re": {
     "line number": [
      53,
      66,
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler.runtime_library_dir_option": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      270
     ]
    },
    "dir": {
     "line number": [
      273,
      276
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      268,
      268,
      275
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match": {
  "data": {
   "lineno": 85
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.PIPE": {
  "data": {
   "shadows": "subprocess.PIPE"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.Popen": {
  "data": {
   "shadows": "subprocess.Popen"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.STDOUT": {
  "data": {
   "shadows": "subprocess.STDOUT"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.TARGET_R": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.gnu._EXTRAFLAGS": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.gnu._can_target": {
  "data": {
   "lineno": 534,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.os": {
     "line number": [
      538,
      540,
      541,
      548,
      549,
      551
     ]
    },
    "numpy.distutils.fcompiler.gnu.tempfile": {
     "line number": [
      537
     ]
    },
    "subprocess.PIPE": {
     "line number": [
      544
     ]
    },
    "subprocess.Popen": {
     "line number": [
      544
     ]
    },
    "subprocess.STDOUT": {
     "line number": [
      544
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.base64": {
  "data": {
   "shadows": "base64"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.compilers": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.gnu.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.filepath_from_subprocess_output": {
  "data": {
   "shadows": "numpy.distutils.exec_command.filepath_from_subprocess_output"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.get_exception": {
  "data": {
   "shadows": "numpy.distutils.compat.get_exception"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.is_win64": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.platform": {
     "line number": [
      26
     ]
    },
    "numpy.distutils.fcompiler.gnu.sys": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.gnu.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.sc": {
  "data": {
   "shadows": "distutils.sysconfig"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.sysconfig": {
  "data": {
   "shadows": "distutils.sysconfig"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.system_info": {
  "data": {
   "shadows": "numpy.distutils.system_info.system_info"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.gnu.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.has_f90_header": {
  "data": {
   "lineno": 1002,
   "symbols_in_volume": {
    "numpy.compat.open_latin1": {
     "line number": [
      1003
     ]
    },
    "numpy.distutils.fcompiler._has_f90_header": {
     "line number": [
      1006
     ]
    },
    "numpy.distutils.fcompiler._has_fix_header": {
     "line number": [
      1006
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.hpux": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      39
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      41
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      43
     ]
    },
    "print": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.hpux.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.hpux.HPUXFCompiler": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_flags": {
  "data": {
   "lineno": 25
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_flags_opt": {
  "data": {
   "lineno": 27
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_libraries": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_library_dirs": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_version": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler.get_version": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.hpux.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.hpux.compilers": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.hpux.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.hpux.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.hpux.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.hpux.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      97
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      99
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      100
     ]
    },
    "print": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.ibm.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.IBMFCompiler": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags": {
  "data": {
   "lineno": 61
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_debug": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_linker_so": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "crt1_match": {
     "line number": [
      84
     ]
    },
    "distutils.log.info": {
     "line number": [
      80
     ]
    },
    "numpy.distutils.fcompiler.ibm.re": {
     "line number": [
      82
     ]
    },
    "numpy.distutils.fcompiler.ibm.sys": {
     "line number": [
      69,
      75
     ]
    },
    "numpy.distutils.misc_util.make_temp_file": {
     "line number": [
      79
     ]
    },
    "open": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_opt": {
  "data": {
   "lineno": 94
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.ibm.IBMFCompiler.get_version": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "OSError": {
     "line number": [
      41
     ]
    },
    "distutils.version.LooseVersion": {
     "line number": [
      58
     ]
    },
    "numpy.distutils.exec_command.find_executable": {
     "line number": [
      36,
      37
     ]
    },
    "numpy.distutils.fcompiler.FCompiler.get_version": {
     "line number": [
      32
     ]
    },
    "numpy.distutils.fcompiler.ibm.os": {
     "line number": [
      38,
      38,
      48,
      53,
      55,
      55
     ]
    },
    "numpy.distutils.fcompiler.ibm.re": {
     "line number": [
      44
     ]
    },
    "numpy.distutils.fcompiler.ibm.subprocess": {
     "line number": [
      40,
      41
     ]
    },
    "numpy.distutils.fcompiler.ibm.sys": {
     "line number": [
      34
     ]
    },
    "sorted": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.ibm.LooseVersion": {
  "data": {
   "shadows": "distutils.version.LooseVersion"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.compilers": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.ibm.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.find_executable": {
  "data": {
   "shadows": "numpy.distutils.exec_command.find_executable"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.make_temp_file": {
  "data": {
   "shadows": "numpy.distutils.misc_util.make_temp_file"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.ibm.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.intel": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      218
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      220
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      222
     ]
    },
    "print": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.intel.BaseIntelFCompiler": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.intel.BaseIntelFCompiler.runtime_library_dir_option": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "dir": {
     "line number": [
      27,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.BaseIntelFCompiler.update_executables": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.dummy_fortran_file": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.intel.IntelEM64TFCompiler": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.intel.IntelFCompiler": {
     "line number": [
      105
     ]
    },
    "numpy.distutils.fcompiler.intel.intel_version_match": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.intel.IntelEM64TFCompiler.get_flags": {
  "data": {
   "lineno": 124
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelEM64TFCompiler.get_flags_arch": {
  "data": {
   "lineno": 132
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelEM64TFCompiler.get_flags_opt": {
  "data": {
   "lineno": 127
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelEM64VisualFCompiler": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "numpy.distutils.ccompiler.simple_version_match": {
     "line number": [
      212
     ]
    },
    "numpy.distutils.fcompiler.intel.IntelVisualFCompiler": {
     "line number": [
      208
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.intel.IntelEM64VisualFCompiler.get_flags_arch": {
  "data": {
   "lineno": 214
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelFCompiler": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.intel.BaseIntelFCompiler": {
     "line number": [
      32
     ]
    },
    "numpy.distutils.fcompiler.intel.intel_version_match": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_arch": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_free": {
  "data": {
   "lineno": 55
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_linker_so": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      79
     ]
    },
    "numpy.distutils.fcompiler.FCompiler.get_flags_linker_so": {
     "line number": [
      70
     ]
    },
    "numpy.distutils.fcompiler.intel.sys": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_opt": {
  "data": {
   "lineno": 61
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelItaniumFCompiler": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.intel.IntelFCompiler": {
     "line number": [
      85
     ]
    },
    "numpy.distutils.fcompiler.intel.intel_version_match": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.intel.IntelItaniumVisualFCompiler": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.intel.IntelVisualFCompiler": {
     "line number": [
      188,
      195
     ]
    },
    "numpy.distutils.fcompiler.intel.intel_version_match": {
     "line number": [
      192
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.intel.IntelVisualFCompiler": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.intel.BaseIntelFCompiler": {
     "line number": [
      139
     ]
    },
    "numpy.distutils.fcompiler.intel.intel_version_match": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags": {
  "data": {
   "lineno": 168
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_arch": {
  "data": {
   "lineno": 181
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_debug": {
  "data": {
   "lineno": 175
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_free": {
  "data": {
   "lineno": 172
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_opt": {
  "data": {
   "lineno": 178
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelVisualFCompiler.runtime_library_dir_option": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.IntelVisualFCompiler.update_executables": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.dummy_fortran_file": {
     "line number": [
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.intel.compilers": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.intel.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.intel.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.intel.dummy_fortran_file": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.dummy_fortran_file"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.intel.intel_version_match": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "numpy.distutils.ccompiler.simple_version_match": {
     "line number": [
      16
     ]
    },
    "type": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.intel.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.intel.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.intel.simple_version_match": {
  "data": {
   "shadows": "numpy.distutils.ccompiler.simple_version_match"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.intel.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.is_f_file": {
  "data": {
   "lineno": 972
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.is_free_format": {
  "data": {
   "lineno": 978,
   "symbols_in_volume": {
    "numpy.compat.open_latin1": {
     "line number": [
      983
     ]
    },
    "numpy.distutils.fcompiler._free_f90_start": {
     "line number": [
      995
     ]
    },
    "numpy.distutils.fcompiler._has_f90_header": {
     "line number": [
      988
     ]
    },
    "numpy.distutils.fcompiler._has_f_header": {
     "line number": [
      986
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.is_sequence": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_sequence"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.is_sequence_of_strings": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.all_strings": {
     "line number": [
      61
     ]
    },
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.is_string": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_string"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.lahey": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      43
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      45
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      47
     ]
    },
    "print": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.lahey.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.lahey.LaheyFCompiler": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_flags_debug": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_flags_opt": {
  "data": {
   "lineno": 28
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_libraries": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_library_dirs": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.lahey.os": {
     "line number": [
      34,
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.lahey.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.lahey.compilers": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.lahey.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.lahey.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.lahey.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.lahey.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.lahey.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.load_all_fcompiler_classes": {
  "data": {
   "lineno": 767,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      790
     ]
    },
    "__import__": {
     "line number": [
      781
     ]
    },
    "getattr": {
     "line number": [
      785
     ]
    },
    "glob.glob": {
     "line number": [
      778
     ]
    },
    "hasattr": {
     "line number": [
      783
     ]
    },
    "numpy.distutils.fcompiler.fcompiler_aliases": {
     "line number": [
      777,
      789,
      792,
      793
     ]
    },
    "numpy.distutils.fcompiler.fcompiler_class": {
     "line number": [
      773,
      776,
      787
     ]
    },
    "numpy.distutils.fcompiler.os": {
     "line number": [
      775,
      775,
      779,
      779
     ]
    },
    "numpy.distutils.fcompiler.sys": {
     "line number": [
      782
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.log": {
  "data": {
   "shadows": "numpy.distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.make_temp_file": {
  "data": {
   "shadows": "numpy.distutils.misc_util.make_temp_file"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.mips": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      54
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      56
     ]
    },
    "print": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.mips.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.mips.MIPSFCompiler": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      8
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags": {
  "data": {
   "lineno": 27
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      34
     ]
    },
    "numpy.distutils.cpuinfo.cpu": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch_f77": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.distutils.cpuinfo.cpu.is_r10000": {
     "line number": [
      40
     ]
    },
    "numpy.distutils.cpuinfo.cpu.is_r12000": {
     "line number": [
      41
     ]
    },
    "numpy.distutils.cpuinfo.cpu.is_r4000": {
     "line number": [
      44
     ]
    },
    "numpy.distutils.cpuinfo.cpu.is_r5000": {
     "line number": [
      43
     ]
    },
    "numpy.distutils.cpuinfo.cpu.is_r8000": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch_f90": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_opt": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.mips.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.mips.compilers": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.mips.cpu": {
  "data": {
   "shadows": "numpy.distutils.cpuinfo.cpu"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.mips.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.mips.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.mips.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.nag": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      78
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      80
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      82
     ]
    },
    "numpy.distutils.fcompiler.nag.compiler": {
     "line number": [
      83,
      84
     ]
    },
    "print": {
     "line number": [
      83,
      84
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.nag.BaseNAGFCompiler": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.get_flags_arch": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.get_flags_linker_so": {
  "data": {
   "lineno": 19
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.get_flags_opt": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.version_match": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.nag.re": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.nag.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.nag.NAGFCompiler": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.nag.BaseNAGFCompiler": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_arch": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.nag.BaseNAGFCompiler": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_debug": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_linker_so": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.nag.BaseNAGFCompiler": {
     "line number": [
      44
     ]
    },
    "numpy.distutils.fcompiler.nag.sys": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.nag.NAGFORCompiler": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.nag.BaseNAGFCompiler": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.nag.NAGFORCompiler.get_flags_debug": {
  "data": {
   "lineno": 69
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.nag.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.nag.compiler": {
  "data": {
   "lineno": 82
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.nag.compilers": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.nag.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.nag.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.nag.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.nag.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.nag.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.nag.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.new_fcompiler": {
  "data": {
   "lineno": 865,
   "symbols_in_volume": {
    "klass": {
     "line number": [
      900
     ]
    },
    "numpy.distutils.fcompiler.failed_fcompilers": {
     "line number": [
      877,
      897
     ]
    },
    "numpy.distutils.fcompiler.fcompiler_aliases": {
     "line number": [
      888,
      889
     ]
    },
    "numpy.distutils.fcompiler.fcompiler_class": {
     "line number": [
      886,
      887,
      895
     ]
    },
    "numpy.distutils.fcompiler.get_default_fcompiler": {
     "line number": [
      884
     ]
    },
    "numpy.distutils.fcompiler.load_all_fcompiler_classes": {
     "line number": [
      880
     ]
    },
    "numpy.distutils.fcompiler.os": {
     "line number": [
      882
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      896
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.none": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      27
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      29
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      30
     ]
    },
    "print": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.none.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.none.NoneFCompiler": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      8
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.none.NoneFCompiler.find_executables": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.none.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.none.compilers": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.none.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.none.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.none.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.none.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.open_latin1": {
  "data": {
   "shadows": "numpy.compat.open_latin1"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pathf95": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      31
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      33
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      35
     ]
    },
    "print": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.pathf95.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pathf95.PathScaleFCompiler": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.pathf95.PathScaleFCompiler.get_flags_debug": {
  "data": {
   "lineno": 28
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pathf95.PathScaleFCompiler.get_flags_opt": {
  "data": {
   "lineno": 26
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pathf95.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pathf95.compilers": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.pathf95.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pathf95.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pathf95.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pathf95.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      135
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      137
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      140,
      142
     ]
    },
    "numpy.distutils.fcompiler.pg.sys": {
     "line number": [
      67,
      139
     ]
    },
    "print": {
     "line number": [
      140,
      142
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.pg.CompilerNotFound": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.CompilerNotFound"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.PGroupFCompiler": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      13
     ]
    },
    "sys.platform": {
     "line number": [
      19,
      55
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags": {
  "data": {
   "lineno": 45
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags_debug": {
  "data": {
   "lineno": 52
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags_linker_so": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags_opt": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFCompiler.runtime_library_dir_option": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "dir": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFlangCompiler": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      127
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags": {
  "data": {
   "lineno": 105
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_arch": {
  "data": {
   "lineno": 117
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_debug": {
  "data": {
   "lineno": 111
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_free": {
  "data": {
   "lineno": 108
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_opt": {
  "data": {
   "lineno": 114
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_libraries": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler.get_libraries": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_library_dirs": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.FCompiler.get_library_dirs": {
     "line number": [
      99
     ]
    },
    "numpy.distutils.fcompiler.pg.functools": {
     "line number": [
      96
     ]
    },
    "os.path.dirname": {
     "line number": [
      100
     ]
    },
    "os.path.join": {
     "line number": [
      101
     ]
    },
    "os.path.normpath": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_version": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.CompilerNotFound": {
     "line number": [
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.runtime_library_dir_option": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.pg.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.compilers": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.pg.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.dirname": {
  "data": {
   "shadows": "os.path.dirname"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.dummy_fortran_file": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.dummy_fortran_file"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.join": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.normpath": {
  "data": {
   "shadows": "os.path.normpath"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.platform": {
  "data": {
   "shadows": "sys.platform"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.pg.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.show_fcompilers": {
  "data": {
   "lineno": 904,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      916
     ]
    },
    "distutils.dist.Distribution": {
     "line number": [
      911
     ]
    },
    "distutils.errors.DistutilsModuleError": {
     "line number": [
      934
     ]
    },
    "distutils.fancy_getopt.FancyGetopt": {
     "line number": [
      954,
      956,
      960
     ]
    },
    "list": {
     "line number": [
      947
     ]
    },
    "numpy.distutils.command.config_compiler.config_fc": {
     "line number": [
      918
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      935
     ]
    },
    "numpy.distutils.fcompiler.CompilerNotFound": {
     "line number": [
      934
     ]
    },
    "numpy.distutils.fcompiler.available_fcompilers_for_platform": {
     "line number": [
      926
     ]
    },
    "numpy.distutils.fcompiler.fcompiler_class": {
     "line number": [
      924,
      941,
      945,
      947,
      948
     ]
    },
    "numpy.distutils.fcompiler.load_all_fcompiler_classes": {
     "line number": [
      925
     ]
    },
    "numpy.distutils.fcompiler.new_fcompiler": {
     "line number": [
      931
     ]
    },
    "numpy.distutils.fcompiler.os": {
     "line number": [
      912
     ]
    },
    "numpy.distutils.fcompiler.sys": {
     "line number": [
      912,
      913
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      936,
      937
     ]
    },
    "numpy.distutils.log.set_verbosity": {
     "line number": [
      929
     ]
    },
    "print": {
     "line number": [
      962
     ]
    },
    "repr": {
     "line number": [
      937
     ]
    },
    "set": {
     "line number": [
      947,
      947
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.split_quoted": {
  "data": {
   "shadows": "distutils.util.split_quoted"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.str2bool": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      58
     ]
    },
    "distutils.util.strtobool": {
     "line number": [
      57
     ]
    },
    "numpy.distutils.misc_util.is_string": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.strtobool": {
  "data": {
   "shadows": "distutils.util.strtobool"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.sun": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      49
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      51
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      53
     ]
    },
    "print": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.sun.FCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.FCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.sun.SunFCompiler": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "numpy.distutils.ccompiler.simple_version_match": {
     "line number": [
      14
     ]
    },
    "numpy.distutils.fcompiler.FCompiler": {
     "line number": [
      8
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.sun.SunFCompiler.get_arch": {
  "data": {
   "lineno": 39
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.sun.SunFCompiler.get_flags_f77": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.sun.SunFCompiler.get_libraries": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.sun.SunFCompiler.get_opt": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.sun.SunFCompiler.runtime_library_dir_option": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "dir": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.sun.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.sun.compilers": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.sun.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.sun.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.sun.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.sun.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.sun.simple_version_match": {
  "data": {
   "shadows": "numpy.distutils.ccompiler.simple_version_match"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.vast": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      50
     ]
    },
    "distutils.log.set_verbosity": {
     "line number": [
      52
     ]
    },
    "numpy.distutils.customized_fcompiler": {
     "line number": [
      54
     ]
    },
    "print": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.fcompiler.vast.GnuFCompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.gnu.GnuFCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.vast.VastFCompiler": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.GnuFCompiler": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.fcompiler.vast.VastFCompiler.find_executables": {
  "data": {
   "lineno": 32
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.vast.VastFCompiler.get_flags_arch": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.gnu.GnuFCompiler": {
     "line number": [
      43
     ]
    },
    "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_arch": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.vast.VastFCompiler.get_version_cmd": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "numpy.distutils.fcompiler.vast.os": {
     "line number": [
      37,
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.fcompiler.vast.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.vast.compilers": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.distutils.fcompiler.vast.customized_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.vast.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.vast.log": {
  "data": {
   "shadows": "distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.vast.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.fcompiler.vast.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.from_template": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      263
     ]
    },
    "numpy.distutils.from_template.find_repl_patterns": {
     "line number": [
      237
     ]
    },
    "numpy.distutils.from_template.main": {
     "line number": [
      264
     ]
    },
    "numpy.distutils.from_template.re": {
     "line number": [
      56,
      56,
      57,
      57,
      58,
      58,
      87,
      88,
      89,
      106,
      131,
      211,
      211
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.from_template.__all__": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "numpy.distutils.from_template._special_names": {
  "data": {
   "lineno": 237
  },
  "type": "constant"
 },
 "numpy.distutils.from_template.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.from_template.conv": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "int": {
     "line number": [
      113
     ]
    },
    "len": {
     "line number": [
      110
     ]
    },
    "numpy.distutils.from_template.item_re": {
     "line number": [
      111
     ]
    },
    "range": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.from_template.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.from_template.expand_sub": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      161
     ]
    },
    "len": {
     "line number": [
      165
     ]
    },
    "numpy.distutils.from_template.find_repl_patterns": {
     "line number": [
      135
     ]
    },
    "numpy.distutils.from_template.list_re": {
     "line number": [
      151
     ]
    },
    "numpy.distutils.from_template.named_re": {
     "line number": [
      136
     ]
    },
    "numpy.distutils.from_template.template_re": {
     "line number": [
      157,
      186
     ]
    },
    "print": {
     "line number": [
      174
     ]
    },
    "range": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.from_template.expand_sub.listrepl": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "numpy.distutils.from_template.conv": {
     "line number": [
      139
     ]
    },
    "numpy.distutils.from_template.template_name_re": {
     "line number": [
      140
     ]
    },
    "numpy.distutils.from_template.unique_key": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.from_template.expand_sub.namerepl": {
  "data": {
   "lineno": 180
  },
  "type": "function"
 },
 "numpy.distutils.from_template.find_and_remove_repl_patterns": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "numpy.distutils.from_template.find_repl_patterns": {
     "line number": [
      102
     ]
    },
    "numpy.distutils.from_template.named_re": {
     "line number": [
      103
     ]
    },
    "numpy.distutils.from_template.re": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.from_template.find_repl_patterns": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "numpy.distutils.from_template.conv": {
     "line number": [
      97
     ]
    },
    "numpy.distutils.from_template.named_re": {
     "line number": [
      92
     ]
    },
    "numpy.distutils.from_template.unique_key": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.from_template.function_start_re": {
  "data": {
   "lineno": 58
  },
  "type": "constant"
 },
 "numpy.distutils.from_template.include_src_re": {
  "data": {
   "lineno": 211
  },
  "type": "constant"
 },
 "numpy.distutils.from_template.item_re": {
  "data": {
   "lineno": 106
  },
  "type": "constant"
 },
 "numpy.distutils.from_template.list_re": {
  "data": {
   "lineno": 89
  },
  "type": "constant"
 },
 "numpy.distutils.from_template.main": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      250
     ]
    },
    "numpy.distutils.from_template.os": {
     "line number": [
      255
     ]
    },
    "numpy.distutils.from_template.process_str": {
     "line number": [
      260
     ]
    },
    "numpy.distutils.from_template.sys": {
     "line number": [
      249,
      251,
      252
     ]
    },
    "open": {
     "line number": [
      254,
      257
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.from_template.named_re": {
  "data": {
   "lineno": 88
  },
  "type": "constant"
 },
 "numpy.distutils.from_template.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.from_template.parse_structure": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "len": {
     "line number": [
      83
     ]
    },
    "numpy.distutils.from_template.function_start_re": {
     "line number": [
      73
     ]
    },
    "numpy.distutils.from_template.routine_end_re": {
     "line number": [
      82
     ]
    },
    "numpy.distutils.from_template.routine_start_re": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.from_template.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.from_template.process_file": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "numpy.distutils.from_template.process_str": {
     "line number": [
      235
     ]
    },
    "numpy.distutils.from_template.resolve_includes": {
     "line number": [
      234
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.from_template.process_str": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "numpy.distutils.from_template.expand_sub": {
     "line number": [
      205
     ]
    },
    "numpy.distutils.from_template.find_and_remove_repl_patterns": {
     "line number": [
      202
     ]
    },
    "numpy.distutils.from_template.parse_structure": {
     "line number": [
      196
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.from_template.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.from_template.resolve_includes": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": {
    "numpy.distutils.from_template.include_src_re": {
     "line number": [
      218
     ]
    },
    "numpy.distutils.from_template.os": {
     "line number": [
      214,
      221,
      222,
      223
     ]
    },
    "open": {
     "line number": [
      215
     ]
    },
    "print": {
     "line number": [
      224
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.from_template.routine_end_re": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "numpy.distutils.from_template.routine_start_re": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "numpy.distutils.from_template.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.from_template.template_name_re": {
  "data": {
   "lineno": 131
  },
  "type": "constant"
 },
 "numpy.distutils.from_template.template_re": {
  "data": {
   "lineno": 87
  },
  "type": "constant"
 },
 "numpy.distutils.from_template.unique_key": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "list": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.info": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.info.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.info.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.info.postpone_import": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.distutils.info.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.intelccompiler": {
  "data": {
   "symbols_in_volume": {
    "numpy.distutils.intelccompiler.platform": {
     "line number": [
      8,
      80
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.intelccompiler.IntelCCompiler": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "distutils.unixccompiler.UnixCCompiler": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.intelccompiler.IntelCCompiler.__init__": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "distutils.unixccompiler.UnixCCompiler.__init__": {
     "line number": [
      19
     ]
    },
    "numpy.distutils.intelccompiler.platform": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.intelccompiler.IntelCCompilerW": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "numpy.distutils.msvc9compiler.MSVCCompiler": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.intelccompiler.IntelCCompilerW.__init__": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "numpy.distutils.ccompiler.simple_version_match": {
     "line number": [
      90
     ]
    },
    "numpy.distutils.msvc9compiler.MSVCCompiler.__init__": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.intelccompiler.IntelCCompilerW.initialize": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "numpy.distutils.msvc9compiler.MSVCCompiler.initialize": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.intelccompiler.IntelEM64TCCompiler": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "distutils.unixccompiler.UnixCCompiler": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "distutils.unixccompiler.UnixCCompiler.__init__": {
     "line number": [
      59
     ]
    },
    "numpy.distutils.intelccompiler.platform": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.intelccompiler.IntelEM64TCCompilerW": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "numpy.distutils.intelccompiler.IntelCCompilerW": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.intelccompiler.IntelEM64TCCompilerW.__init__": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "numpy.distutils.ccompiler.simple_version_match": {
     "line number": [
      112
     ]
    },
    "numpy.distutils.msvc9compiler.MSVCCompiler.__init__": {
     "line number": [
      111
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.intelccompiler.IntelItaniumCCompiler": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "map": {
     "line number": [
      45
     ]
    },
    "numpy.distutils.exec_command.find_executable": {
     "line number": [
      45
     ]
    },
    "numpy.distutils.intelccompiler.IntelCCompiler": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.intelccompiler.MSVCCompiler": {
  "data": {
   "shadows": "numpy.distutils.msvc9compiler.MSVCCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.intelccompiler.UnixCCompiler": {
  "data": {
   "shadows": "distutils.unixccompiler.UnixCCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.intelccompiler.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.intelccompiler.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.intelccompiler.find_executable": {
  "data": {
   "shadows": "numpy.distutils.exec_command.find_executable"
  },
  "type": "import"
 },
 "numpy.distutils.intelccompiler.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.distutils.intelccompiler.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.intelccompiler.simple_version_match": {
  "data": {
   "shadows": "numpy.distutils.ccompiler.simple_version_match"
  },
  "type": "import"
 },
 "numpy.distutils.lib2def": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      106
     ]
    },
    "numpy.distutils.lib2def.DEFAULT_NM": {
     "line number": [
      112
     ]
    },
    "numpy.distutils.lib2def.DEF_HEADER": {
     "line number": [
      115
     ]
    },
    "numpy.distutils.lib2def.deffile": {
     "line number": [
      115
     ]
    },
    "numpy.distutils.lib2def.getnm": {
     "line number": [
      113
     ]
    },
    "numpy.distutils.lib2def.nm_cmd": {
     "line number": [
      113
     ]
    },
    "numpy.distutils.lib2def.nm_output": {
     "line number": [
      114
     ]
    },
    "numpy.distutils.lib2def.output_def": {
     "line number": [
      115
     ]
    },
    "numpy.distutils.lib2def.parse_cmd": {
     "line number": [
      107
     ]
    },
    "numpy.distutils.lib2def.parse_nm": {
     "line number": [
      114
     ]
    },
    "numpy.distutils.lib2def.py_ver": {
     "line number": [
      34,
      37,
      38
     ]
    },
    "numpy.distutils.lib2def.re": {
     "line number": [
      37,
      37,
      38,
      38
     ]
    },
    "numpy.distutils.lib2def.sys": {
     "line number": [
      25,
      109
     ]
    },
    "open": {
     "line number": [
      111
     ]
    },
    "str": {
     "line number": [
      112,
      112
     ]
    },
    "tuple": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.lib2def.DATA_RE": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "numpy.distutils.lib2def.DEFAULT_NM": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "numpy.distutils.lib2def.DEF_HEADER": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy.distutils.lib2def.FUNC_RE": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "numpy.distutils.lib2def.__doc__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.distutils.lib2def.__version__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.distutils.lib2def.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.lib2def.deffile": {
  "data": {
   "lineno": 111
  },
  "type": "constant"
 },
 "numpy.distutils.lib2def.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.lib2def.getnm": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "numpy.distutils.lib2def.py_ver": {
     "line number": [
      64
     ]
    },
    "numpy.distutils.lib2def.subprocess": {
     "line number": [
      68,
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.lib2def.nm_cmd": {
  "data": {
   "lineno": 112
  },
  "type": "constant"
 },
 "numpy.distutils.lib2def.nm_output": {
  "data": {
   "lineno": 113
  },
  "type": "constant"
 },
 "numpy.distutils.lib2def.output_def": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "numpy.distutils.lib2def.sys": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.lib2def.parse_cmd": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "len": {
     "line number": [
      44,
      52
     ]
    },
    "numpy.distutils.lib2def.py_ver": {
     "line number": [
      55,
      60
     ]
    },
    "numpy.distutils.lib2def.sys": {
     "line number": [
      44,
      45,
      45,
      46,
      47,
      47,
      48,
      52,
      53,
      54,
      56,
      58
     ]
    },
    "print": {
     "line number": [
      50,
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.lib2def.parse_nm": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "numpy.distutils.lib2def.DATA_RE": {
     "line number": [
      78
     ]
    },
    "numpy.distutils.lib2def.FUNC_RE": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.lib2def.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.lib2def.py_ver": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "numpy.distutils.lib2def.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.lib2def.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.distutils.lib2def.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.line_endings": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      75
     ]
    },
    "numpy.distutils.line_endings.dos2unix_dir": {
     "line number": [
      76
     ]
    },
    "numpy.distutils.line_endings.sys": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.line_endings.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.line_endings.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.line_endings.dos2unix": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "numpy.distutils.line_endings.os": {
     "line number": [
      10
     ]
    },
    "numpy.distutils.line_endings.re": {
     "line number": [
      19
     ]
    },
    "open": {
     "line number": [
      14,
      22
     ]
    },
    "print": {
     "line number": [
      11,
      16,
      21,
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.line_endings.dos2unix_dir": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "numpy.distutils.line_endings.dos2unix_one_dir": {
     "line number": [
      38
     ]
    },
    "numpy.distutils.line_endings.os": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.line_endings.dos2unix_one_dir": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "numpy.distutils.line_endings.dos2unix": {
     "line number": [
      32
     ]
    },
    "numpy.distutils.line_endings.os": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.line_endings.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.line_endings.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.line_endings.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.line_endings.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.line_endings.unix2dos": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "numpy.distutils.line_endings.os": {
     "line number": [
      44
     ]
    },
    "numpy.distutils.line_endings.re": {
     "line number": [
      52,
      53
     ]
    },
    "open": {
     "line number": [
      48,
      56
     ]
    },
    "print": {
     "line number": [
      45,
      50,
      55,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.line_endings.unix2dos_dir": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "numpy.distutils.line_endings.os": {
     "line number": [
      72
     ]
    },
    "numpy.distutils.line_endings.unix2dos_one_dir": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.line_endings.unix2dos_one_dir": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "numpy.distutils.line_endings.os": {
     "line number": [
      65
     ]
    },
    "numpy.distutils.line_endings.unix2dos": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.log": {
  "data": {
   "symbols_in_volume": {
    "distutils.log.Log": {
     "line number": [
      52
     ]
    },
    "distutils.log._global_log.__class__": {
     "line number": [
      52
     ]
    },
    "distutils.log._global_log.good": {
     "line number": [
      54
     ]
    },
    "numpy.distutils.log.set_verbosity": {
     "line number": [
      93
     ]
    },
    "numpy.distutils.log.sys": {
     "line number": [
      9
     ]
    },
    "numpy.distutils.misc_util.cyan_text": {
     "line number": [
      85
     ]
    },
    "numpy.distutils.misc_util.default_text": {
     "line number": [
      86
     ]
    },
    "numpy.distutils.misc_util.red_text": {
     "line number": [
      87,
      88,
      89
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.log.Log": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "distutils.log.Log": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.log.Log._log": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "numpy.distutils.log._fix_args": {
     "line number": [
      29
     ]
    },
    "numpy.distutils.log.sys": {
     "line number": [
      36
     ]
    },
    "print": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.log.Log.good": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.distutils.log._fix_args": {
     "line number": [
      46
     ]
    },
    "numpy.distutils.log.sys": {
     "line number": [
      49
     ]
    },
    "numpy.distutils.misc_util.green_text": {
     "line number": [
      46,
      48
     ]
    },
    "print": {
     "line number": [
      46,
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.log._fix_args": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.is_sequence": {
     "line number": [
      20
     ]
    },
    "numpy.distutils.misc_util.is_string": {
     "line number": [
      18
     ]
    },
    "tuple": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.log._global_color_map": {
  "data": {
   "lineno": 84
  },
  "type": "constant"
 },
 "numpy.distutils.log._global_log": {
  "data": {
   "shadows": "distutils.log._global_log"
  },
  "type": "import"
 },
 "numpy.distutils.log.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.log.cyan_text": {
  "data": {
   "shadows": "numpy.distutils.misc_util.cyan_text"
  },
  "type": "import"
 },
 "numpy.distutils.log.default_text": {
  "data": {
   "shadows": "numpy.distutils.misc_util.default_text"
  },
  "type": "import"
 },
 "numpy.distutils.log.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.log.good": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "numpy.distutils.log.green_text": {
  "data": {
   "shadows": "numpy.distutils.misc_util.green_text"
  },
  "type": "import"
 },
 "numpy.distutils.log.is_sequence": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_sequence"
  },
  "type": "import"
 },
 "numpy.distutils.log.is_string": {
  "data": {
   "shadows": "numpy.distutils.misc_util.is_string"
  },
  "type": "import"
 },
 "numpy.distutils.log.old_Log": {
  "data": {
   "shadows": "distutils.log.Log"
  },
  "type": "import"
 },
 "numpy.distutils.log.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.log.red_text": {
  "data": {
   "shadows": "numpy.distutils.misc_util.red_text"
  },
  "type": "import"
 },
 "numpy.distutils.log.set_threshold": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "distutils.log._global_log.threshold": {
     "line number": [
      57,
      61
     ]
    },
    "info": {
     "line number": [
      63,
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.log.set_verbosity": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "distutils.log._global_log.threshold": {
     "line number": [
      72
     ]
    },
    "numpy.distutils.log.set_threshold": {
     "line number": [
      74,
      76,
      78,
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.log.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      555
     ]
    },
    "hasattr": {
     "line number": [
      551
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      559
     ]
    },
    "numpy.distutils.mingw32ccompiler._MSVCRVER_TO_FULLVER": {
     "line number": [
      546,
      547,
      550,
      553
     ]
    },
    "numpy.distutils.mingw32ccompiler.get_msvcr_replacement": {
     "line number": [
      49
     ]
    },
    "numpy.distutils.mingw32ccompiler.msvcrt": {
     "line number": [
      551,
      552,
      553
     ]
    },
    "numpy.distutils.mingw32ccompiler.re": {
     "line number": [
      52,
      53
     ]
    },
    "numpy.distutils.mingw32ccompiler.sys": {
     "line number": [
      20,
      541
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.mingw32ccompiler.CompileError": {
  "data": {
   "shadows": "distutils.errors.CompileError"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.DistutilsExecError": {
  "data": {
   "shadows": "distutils.errors.DistutilsExecError"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.Mingw32CCompiler": {
  "data": {
   "lineno": 56
  },
  "type": "class"
 },
 "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "distutils.version.StrictVersion": {
     "line number": [
      80
     ]
    },
    "numpy.distutils.mingw32ccompiler.build_import_library": {
     "line number": [
      103
     ]
    },
    "numpy.distutils.mingw32ccompiler.build_msvcr_library": {
     "line number": [
      106,
      107
     ]
    },
    "numpy.distutils.mingw32ccompiler.re": {
     "line number": [
      78
     ]
    },
    "numpy.distutils.mingw32ccompiler.subprocess": {
     "line number": [
      74,
      75
     ]
    },
    "numpy.distutils.misc_util.get_build_architecture": {
     "line number": [
      121
     ]
    },
    "numpy.distutils.misc_util.msvc_runtime_version": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.link": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": {
    "distutils.unixccompiler.UnixCCompiler.link": {
     "line number": [
      210
     ]
    },
    "func": {
     "line number": [
      211
     ]
    },
    "func.__code__.co_argcount": {
     "line number": [
      211
     ]
    },
    "numpy.distutils.misc_util.msvc_runtime_library": {
     "line number": [
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.object_filenames": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": {
    "distutils.errors.UnknownFileError": {
     "line number": [
      232
     ]
    },
    "numpy.distutils.mingw32ccompiler.os": {
     "line number": [
      222,
      222,
      227,
      236,
      239,
      242
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.StrictVersion": {
  "data": {
   "shadows": "distutils.version.StrictVersion"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.UnixCCompiler": {
  "data": {
   "shadows": "distutils.unixccompiler.UnixCCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.UnknownFileError": {
  "data": {
   "shadows": "distutils.errors.UnknownFileError"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler._MSVCRVER_TO_FULLVER": {
  "data": {
   "lineno": 540
  },
  "type": "constant"
 },
 "numpy.distutils.mingw32ccompiler._START": {
  "data": {
   "lineno": 52
  },
  "type": "constant"
 },
 "numpy.distutils.mingw32ccompiler._TABLE": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "numpy.distutils.mingw32ccompiler._build_import_library_amd64": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": {
    "numpy.distutils.log.debug": {
     "line number": [
      460
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      465
     ]
    },
    "numpy.distutils.mingw32ccompiler._check_for_import_lib": {
     "line number": [
      458
     ]
    },
    "numpy.distutils.mingw32ccompiler.find_python_dll": {
     "line number": [
      464
     ]
    },
    "numpy.distutils.mingw32ccompiler.generate_def": {
     "line number": [
      471
     ]
    },
    "numpy.distutils.mingw32ccompiler.os": {
     "line number": [
      470
     ]
    },
    "numpy.distutils.mingw32ccompiler.subprocess": {
     "line number": [
      475
     ]
    },
    "numpy.distutils.mingw32ccompiler.sys": {
     "line number": [
      469,
      470
     ]
    },
    "tuple": {
     "line number": [
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler._build_import_library_x86": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      491,
      493
     ]
    },
    "numpy.distutils.lib2def.DEFAULT_NM": {
     "line number": [
      509
     ]
    },
    "numpy.distutils.lib2def.DEF_HEADER": {
     "line number": [
      512
     ]
    },
    "numpy.distutils.lib2def.getnm": {
     "line number": [
      510
     ]
    },
    "numpy.distutils.lib2def.output_def": {
     "line number": [
      512
     ]
    },
    "numpy.distutils.lib2def.parse_nm": {
     "line number": [
      511
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      482
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      503
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      501,
      520
     ]
    },
    "numpy.distutils.mingw32ccompiler._check_for_import_lib": {
     "line number": [
      480
     ]
    },
    "numpy.distutils.mingw32ccompiler.find_python_dll": {
     "line number": [
      514
     ]
    },
    "numpy.distutils.mingw32ccompiler.os": {
     "line number": [
      486,
      487,
      492,
      494,
      498,
      508,
      517
     ]
    },
    "numpy.distutils.mingw32ccompiler.sys": {
     "line number": [
      485,
      486,
      491,
      492,
      493,
      494,
      507,
      508
     ]
    },
    "open": {
     "line number": [
      512
     ]
    },
    "tuple": {
     "line number": [
      485,
      507
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler._check_for_import_lib": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      432,
      434
     ]
    },
    "numpy.distutils.mingw32ccompiler.os": {
     "line number": [
      446,
      450
     ]
    },
    "numpy.distutils.mingw32ccompiler.sys": {
     "line number": [
      423,
      431,
      432,
      432,
      432,
      433,
      434,
      434,
      434,
      435
     ]
    },
    "tuple": {
     "line number": [
      423
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.build_import_library": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      419
     ]
    },
    "numpy.distutils.mingw32ccompiler._build_import_library_amd64": {
     "line number": [
      415
     ]
    },
    "numpy.distutils.mingw32ccompiler._build_import_library_x86": {
     "line number": [
      417
     ]
    },
    "numpy.distutils.mingw32ccompiler.os": {
     "line number": [
      410
     ]
    },
    "numpy.distutils.misc_util.get_build_architecture": {
     "line number": [
      413
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.build_msvcr_library": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": {
    "numpy.distutils.log.debug": {
     "line number": [
      361,
      367,
      379
     ]
    },
    "numpy.distutils.log.info": {
     "line number": [
      394
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      387
     ]
    },
    "numpy.distutils.mingw32ccompiler.find_dll": {
     "line number": [
      385
     ]
    },
    "numpy.distutils.mingw32ccompiler.generate_def": {
     "line number": [
      398
     ]
    },
    "numpy.distutils.mingw32ccompiler.os": {
     "line number": [
      351,
      377,
      378,
      392,
      405
     ]
    },
    "numpy.distutils.mingw32ccompiler.subprocess": {
     "line number": [
      402
     ]
    },
    "numpy.distutils.mingw32ccompiler.sys": {
     "line number": [
      377,
      392
     ]
    },
    "numpy.distutils.misc_util.msvc_runtime_library": {
     "line number": [
      371
     ]
    },
    "numpy.distutils.misc_util.msvc_runtime_major": {
     "line number": [
      359
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.check_embedded_msvcr_match_linked": {
  "data": {
   "lineno": 617,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      624
     ]
    },
    "int": {
     "line number": [
      623,
      627
     ]
    },
    "numpy.distutils.misc_util.msvc_runtime_major": {
     "line number": [
      621
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.configtest_name": {
  "data": {
   "lineno": 629,
   "symbols_in_volume": {
    "numpy.distutils.mingw32ccompiler.os": {
     "line number": [
      630,
      631
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.distutils.cygwinccompiler": {
  "data": {
   "shadows": "distutils.cygwinccompiler"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.dump_table": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "numpy.distutils.mingw32ccompiler.subprocess": {
     "line number": [
      288,
      288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.find_dll": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": {
    "_find_dll_in_path": {
     "line number": [
      348
     ]
    },
    "_find_dll_in_winsxs": {
     "line number": [
      348
     ]
    },
    "numpy.distutils.misc_util.get_build_architecture": {
     "line number": [
      327
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.find_dll._find_dll_in_path": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": {
    "numpy.distutils.mingw32ccompiler.os": {
     "line number": [
      343,
      344,
      345,
      346
     ]
    },
    "numpy.distutils.mingw32ccompiler.sys": {
     "line number": [
      343
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.find_dll._find_dll_in_winsxs": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "numpy.distutils.mingw32ccompiler.os": {
     "line number": [
      331,
      331,
      333,
      335,
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.find_python_dll": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      285
     ]
    },
    "hasattr": {
     "line number": [
      257,
      259
     ]
    },
    "numpy.distutils.mingw32ccompiler.os": {
     "line number": [
      267,
      270,
      271,
      271,
      281,
      282
     ]
    },
    "numpy.distutils.mingw32ccompiler.sys": {
     "line number": [
      256,
      257,
      257,
      257,
      258,
      259,
      259,
      259,
      260,
      274
     ]
    },
    "print": {
     "line number": [
      279
     ]
    },
    "tuple": {
     "line number": [
      274
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.gen_lib_options": {
  "data": {
   "shadows": "numpy.distutils.ccompiler.gen_lib_options"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.gen_preprocess_options": {
  "data": {
   "shadows": "numpy.distutils.ccompiler.gen_preprocess_options"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.generate_def": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      301
     ]
    },
    "int": {
     "line number": [
      307
     ]
    },
    "len": {
     "line number": [
      297,
      304,
      311
     ]
    },
    "numpy.distutils.log.warn": {
     "line number": [
      312
     ]
    },
    "numpy.distutils.mingw32ccompiler._START": {
     "line number": [
      298
     ]
    },
    "numpy.distutils.mingw32ccompiler._TABLE": {
     "line number": [
      305
     ]
    },
    "numpy.distutils.mingw32ccompiler.dump_table": {
     "line number": [
      296
     ]
    },
    "numpy.distutils.mingw32ccompiler.os": {
     "line number": [
      315
     ]
    },
    "open": {
     "line number": [
      314
     ]
    },
    "range": {
     "line number": [
      297,
      304
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.generate_manifest": {
  "data": {
   "lineno": 644,
   "symbols_in_volume": {
    "distutils.msvccompiler.get_build_version": {
     "line number": [
      645
     ]
    },
    "int": {
     "line number": [
      649,
      650
     ]
    },
    "numpy.distutils.mingw32ccompiler.check_embedded_msvcr_match_linked": {
     "line number": [
      648
     ]
    },
    "numpy.distutils.mingw32ccompiler.manifest_name": {
     "line number": [
      653,
      654
     ]
    },
    "numpy.distutils.mingw32ccompiler.msvc_manifest_xml": {
     "line number": [
      652
     ]
    },
    "open": {
     "line number": [
      653
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.get_build_architecture": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_build_architecture"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.get_build_msvc_version": {
  "data": {
   "shadows": "distutils.msvccompiler.get_build_version"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.get_msvcr_replacement": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.msvc_runtime_library": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.lib2def": {
  "data": {
   "shadows": "numpy.distutils.lib2def"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.log": {
  "data": {
   "shadows": "numpy.distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.manifest_name": {
  "data": {
   "lineno": 633,
   "symbols_in_volume": {
    "numpy.distutils.mingw32ccompiler.configtest_name": {
     "line number": [
      635
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.manifest_rc": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      611
     ]
    },
    "type": {
     "line number": [
      606,
      608,
      611
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.msvc_manifest_xml": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      566
     ]
    },
    "ValueError": {
     "line number": [
      567
     ]
    },
    "min": {
     "line number": [
      565,
      568,
      591
     ]
    },
    "numpy.distutils.mingw32ccompiler._MSVCRVER_TO_FULLVER": {
     "line number": [
      565
     ]
    },
    "str": {
     "line number": [
      565
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.msvc_runtime_library": {
  "data": {
   "shadows": "numpy.distutils.misc_util.msvc_runtime_library"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.msvc_runtime_major": {
  "data": {
   "shadows": "numpy.distutils.misc_util.msvc_runtime_major"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.msvc_runtime_version": {
  "data": {
   "shadows": "numpy.distutils.misc_util.msvc_runtime_version"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.msvcrt": {
  "data": {
   "shadows": "msvcrt"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.numpy.distutils.ccompiler": {
  "data": {
   "shadows": "numpy.distutils.ccompiler"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.rc_name": {
  "data": {
   "lineno": 639,
   "symbols_in_volume": {
    "numpy.distutils.mingw32ccompiler.configtest_name": {
     "line number": [
      641
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.mingw32ccompiler.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.distutils.mingw32ccompiler.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.msvc9compiler": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.msvc9compiler.MSVCCompiler": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "distutils.msvc9compiler.MSVCCompiler": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.msvc9compiler.MSVCCompiler.__init__": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "distutils.msvc9compiler.MSVCCompiler.__init__": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.msvc9compiler.MSVCCompiler.initialize": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "distutils.msvc9compiler.MSVCCompiler.initialize": {
     "line number": [
      50
     ]
    },
    "numpy.distutils.msvc9compiler._merge": {
     "line number": [
      53,
      54
     ]
    },
    "numpy.distutils.msvc9compiler.os": {
     "line number": [
      48,
      49,
      53,
      53,
      54,
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.msvc9compiler.MSVCCompiler.manifest_setup_ldargs": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "distutils.msvc9compiler.MSVCCompiler.manifest_setup_ldargs": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.msvc9compiler._MSVCCompiler": {
  "data": {
   "shadows": "distutils.msvc9compiler.MSVCCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.msvc9compiler._merge": {
  "data": {
   "lineno": 9
  },
  "type": "function"
 },
 "numpy.distutils.msvc9compiler.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.msvc9compiler.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.msvc9compiler.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.msvc9compiler.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.msvccompiler": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.msvccompiler.MSVCCompiler": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "distutils.msvccompiler.MSVCCompiler": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.msvccompiler.MSVCCompiler.__init__": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "distutils.msvccompiler.MSVCCompiler.__init__": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.msvccompiler.MSVCCompiler.initialize": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "distutils.msvccompiler.MSVCCompiler.initialize": {
     "line number": [
      50
     ]
    },
    "numpy.distutils.msvccompiler._merge": {
     "line number": [
      53,
      54
     ]
    },
    "numpy.distutils.msvccompiler.os": {
     "line number": [
      48,
      49,
      53,
      53,
      54,
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.msvccompiler._MSVCCompiler": {
  "data": {
   "shadows": "distutils.msvccompiler.MSVCCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.msvccompiler._merge": {
  "data": {
   "lineno": 9
  },
  "type": "function"
 },
 "numpy.distutils.msvccompiler.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.msvccompiler.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.msvccompiler.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.msvccompiler.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.new_fcompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler.new_fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.npy_pkg_config": {
  "data": {
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      406,
      429
     ]
    },
    "__name__": {
     "line number": [
      382
     ]
    },
    "len": {
     "line number": [
      405
     ]
    },
    "numpy.distutils.npy_pkg_config.d": {
     "line number": [
      416,
      417
     ]
    },
    "numpy.distutils.npy_pkg_config.files": {
     "line number": [
      410
     ]
    },
    "numpy.distutils.npy_pkg_config.glob": {
     "line number": [
      409
     ]
    },
    "numpy.distutils.npy_pkg_config.info": {
     "line number": [
      412,
      412,
      412,
      434,
      437,
      439,
      441,
      443
     ]
    },
    "numpy.distutils.npy_pkg_config.m": {
     "line number": [
      428,
      432,
      433
     ]
    },
    "numpy.distutils.npy_pkg_config.name": {
     "line number": [
      434
     ]
    },
    "numpy.distutils.npy_pkg_config.os": {
     "line number": [
      415
     ]
    },
    "numpy.distutils.npy_pkg_config.parser": {
     "line number": [
      388,
      390,
      392,
      394,
      396,
      398,
      400,
      403
     ]
    },
    "numpy.distutils.npy_pkg_config.pkg_name": {
     "line number": [
      417,
      419
     ]
    },
    "numpy.distutils.npy_pkg_config.re": {
     "line number": [
      15,
      427
     ]
    },
    "numpy.distutils.npy_pkg_config.read_config": {
     "line number": [
      411,
      417,
      419
     ]
    },
    "numpy.distutils.npy_pkg_config.section": {
     "line number": [
      437,
      439
     ]
    },
    "numpy.distutils.npy_pkg_config.sys": {
     "line number": [
      7,
      403
     ]
    },
    "numpy.distutils.npy_pkg_config.value": {
     "line number": [
      434
     ]
    },
    "optparse.OptionParser": {
     "line number": [
      387
     ]
    },
    "print": {
     "line number": [
      412,
      437,
      439,
      441,
      443
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.npy_pkg_config.FormatError": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.npy_pkg_config.FormatError.__init__": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.FormatError.__str__": {
  "data": {
   "lineno": 25
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.LibraryInfo": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "object": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.npy_pkg_config.LibraryInfo.__init__": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "vars": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.LibraryInfo.__str__": {
  "data": {
   "lineno": 143
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.LibraryInfo.cflags": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "numpy.distutils.npy_pkg_config._escape_backslash": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.LibraryInfo.libs": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "numpy.distutils.npy_pkg_config._escape_backslash": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.LibraryInfo.sections": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "list": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.OptionParser": {
  "data": {
   "shadows": "optparse.OptionParser"
  },
  "type": "import"
 },
 "numpy.distutils.npy_pkg_config.PkgNotFound": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.npy_pkg_config.PkgNotFound.__init__": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.PkgNotFound.__str__": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.RawConfigParser": {
  "data": {
   "shadows": "configparser.RawConfigParser"
  },
  "type": "import"
 },
 "numpy.distutils.npy_pkg_config.VariableSet": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "object": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.npy_pkg_config.VariableSet.__getitem__": {
  "data": {
   "lineno": 214
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.VariableSet.__init__": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.VariableSet.__setitem__": {
  "data": {
   "lineno": 217
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.VariableSet._init_parse": {
  "data": {
   "lineno": 174
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.VariableSet._init_parse_var": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "numpy.distutils.npy_pkg_config.re": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.VariableSet.interpolate": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "_interpolate": {
     "line number": [
      190
     ]
    },
    "numpy.distutils.npy_pkg_config._VAR": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.VariableSet.interpolate._interpolate": {
  "data": {
   "lineno": 185
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.VariableSet.variables": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "list": {
     "line number": [
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config._CACHE": {
  "data": {
   "lineno": 330
  },
  "type": "constant"
 },
 "numpy.distutils.npy_pkg_config._VAR": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.distutils.npy_pkg_config.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.distutils.npy_pkg_config._escape_backslash": {
  "data": {
   "lineno": 78
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config._read_config_imp": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      317
     ]
    },
    "_read_config": {
     "line number": [
      309
     ]
    },
    "numpy.distutils.npy_pkg_config.LibraryInfo": {
     "line number": [
      323
     ]
    },
    "numpy.distutils.npy_pkg_config.VariableSet": {
     "line number": [
      324
     ]
    },
    "numpy.distutils.npy_pkg_config._escape_backslash": {
     "line number": [
      321
     ]
    },
    "numpy.distutils.npy_pkg_config.os": {
     "line number": [
      321
     ]
    },
    "numpy.distutils.npy_pkg_config.sys": {
     "line number": [
      316,
      320
     ]
    },
    "vars": {
     "line number": [
      309,
      314,
      314,
      315,
      321,
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config._read_config_imp._read_config": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": {
    "_read_config": {
     "line number": [
      295
     ]
    },
    "numpy.distutils.npy_pkg_config.parse_config": {
     "line number": [
      292
     ]
    },
    "numpy.distutils.npy_pkg_config.pkg_to_filename": {
     "line number": [
      295
     ]
    },
    "vars": {
     "line number": [
      292,
      299,
      300,
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.npy_pkg_config.d": {
  "data": {
   "lineno": 415
  },
  "type": "constant"
 },
 "numpy.distutils.npy_pkg_config.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.npy_pkg_config.files": {
  "data": {
   "lineno": 409
  },
  "type": "constant"
 },
 "numpy.distutils.npy_pkg_config.glob": {
  "data": {
   "shadows": "glob"
  },
  "type": "import"
 },
 "numpy.distutils.npy_pkg_config.info": {
  "data": {
   "lineno": 419
  },
  "type": "constant"
 },
 "numpy.distutils.npy_pkg_config.m": {
  "data": {
   "lineno": 427
  },
  "type": "constant"
 },
 "numpy.distutils.npy_pkg_config.name": {
  "data": {
   "lineno": 432
  },
  "type": "constant"
 },
 "numpy.distutils.npy_pkg_config.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.npy_pkg_config.parse_config": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": {
    "configparser.RawConfigParser": {
     "line number": [
      260
     ]
    },
    "len": {
     "line number": [
      263
     ]
    },
    "numpy.distutils.npy_pkg_config.PkgNotFound": {
     "line number": [
      264
     ]
    },
    "numpy.distutils.npy_pkg_config._escape_backslash": {
     "line number": [
      272
     ]
    },
    "numpy.distutils.npy_pkg_config.os": {
     "line number": [
      256
     ]
    },
    "numpy.distutils.npy_pkg_config.parse_meta": {
     "line number": [
      267
     ]
    },
    "str": {
     "line number": [
      264
     ]
    },
    "vars": {
     "line number": [
      269,
      272,
      288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.parse_flags": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "len": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.parse_meta": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      225
     ]
    },
    "numpy.distutils.npy_pkg_config.FormatError": {
     "line number": [
      223,
      229
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.parse_sections": {
  "data": {
   "lineno": 248
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.parse_variables": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": {
    "numpy.distutils.npy_pkg_config.FormatError": {
     "line number": [
      239
     ]
    },
    "numpy.distutils.npy_pkg_config.VariableSet": {
     "line number": [
      246
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.parser": {
  "data": {
   "lineno": 387
  },
  "type": "constant"
 },
 "numpy.distutils.npy_pkg_config.pkg_name": {
  "data": {
   "lineno": 414
  },
  "type": "constant"
 },
 "numpy.distutils.npy_pkg_config.pkg_to_filename": {
  "data": {
   "lineno": 251
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.npy_pkg_config.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.distutils.npy_pkg_config.read_config": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      372
     ]
    },
    "numpy.distutils.npy_pkg_config._CACHE": {
     "line number": [
      371,
      374
     ]
    },
    "numpy.distutils.npy_pkg_config._read_config_imp": {
     "line number": [
      373
     ]
    },
    "numpy.distutils.npy_pkg_config.pkg_to_filename": {
     "line number": [
      373
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.npy_pkg_config.section": {
  "data": {
   "lineno": 424
  },
  "type": "constant"
 },
 "numpy.distutils.npy_pkg_config.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.npy_pkg_config.value": {
  "data": {
   "lineno": 433
  },
  "type": "constant"
 },
 "numpy.distutils.numpy_distribution": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.numpy_distribution.Distribution": {
  "data": {
   "shadows": "distutils.core.Distribution"
  },
  "type": "import"
 },
 "numpy.distutils.numpy_distribution.NumpyDistribution": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "distutils.core.Distribution": {
     "line number": [
      8
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.numpy_distribution.NumpyDistribution.__init__": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "distutils.core.Distribution.__init__": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.numpy_distribution.NumpyDistribution.has_scons_scripts": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.numpy_distribution.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.numpy_distribution.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.numpy_distribution.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.pathccompiler": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.pathccompiler.PathScaleCCompiler": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": {
    "distutils.unixccompiler.UnixCCompiler": {
     "line number": [
      5
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "distutils.unixccompiler.UnixCCompiler.__init__": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.pathccompiler.UnixCCompiler": {
  "data": {
   "shadows": "distutils.unixccompiler.UnixCCompiler"
  },
  "type": "import"
 },
 "numpy.distutils.pathccompiler.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.pathccompiler.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.pathccompiler.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      15
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      17
     ]
    },
    "numpy.distutils.setup.configuration": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.distutils.setup.configuration": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.distutils.test": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.distutils.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.tests.test_exec_command": {
  "data": {
   "symbols_in_volume": {
    "numpy.distutils.tests.test_exec_command.sys": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.tests.test_exec_command.StringIO": {
  "data": {
   "shadows": "StringIO.StringIO"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_exec_command.TemporaryFile": {
  "data": {
   "shadows": "tempfile.TemporaryFile"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_exec_command.TestExecCommand": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "object": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_exec_command.TestExecCommand.check_basic": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "numpy.distutils.exec_command.exec_command": {
     "line number": [
      164,
      169,
      176,
      181
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      166,
      167,
      173,
      174,
      178,
      179,
      183,
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.TestExecCommand.check_execute_in": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "numpy.distutils.exec_command.exec_command": {
     "line number": [
      194,
      199
     ]
    },
    "numpy.distutils.tests.test_exec_command.os": {
     "line number": [
      189
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      197,
      198,
      202,
      203
     ]
    },
    "numpy.testing.tempdir": {
     "line number": [
      187
     ]
    },
    "open": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.TestExecCommand.check_nt": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "numpy.distutils.exec_command.exec_command": {
     "line number": [
      102,
      106
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      103,
      104,
      108,
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.TestExecCommand.check_posix": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "numpy.distutils.exec_command.exec_command": {
     "line number": [
      112,
      116,
      120,
      124,
      130,
      134,
      138,
      144,
      149,
      153,
      157
     ]
    },
    "numpy.distutils.tests.test_exec_command.os": {
     "line number": [
      128,
      129,
      142
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      113,
      114,
      117,
      118,
      121,
      122,
      125,
      126,
      131,
      132,
      135,
      136,
      139,
      140,
      145,
      146,
      150,
      151,
      154,
      155,
      160,
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.TestExecCommand.setup": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "numpy.distutils.exec_command.get_pythonexe": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.TestExecCommand.test_basic": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "StringIO.StringIO": {
     "line number": [
      206,
      207
     ]
    },
    "numpy.distutils.tests.test_exec_command.os": {
     "line number": [
      208,
      211
     ]
    },
    "numpy.distutils.tests.test_exec_command.redirect_stderr": {
     "line number": [
      207
     ]
    },
    "numpy.distutils.tests.test_exec_command.redirect_stdout": {
     "line number": [
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_exec_command.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_exec_command.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_exec_command.emulate_nonposix": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "object": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_exec_command.emulate_nonposix.__enter__": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_exec_command.os": {
     "line number": [
      54,
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.emulate_nonposix.__exit__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_exec_command.os": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.exec_command": {
  "data": {
   "shadows": "numpy.distutils.exec_command"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_exec_command.get_pythonexe": {
  "data": {
   "shadows": "numpy.distutils.exec_command.get_pythonexe"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_exec_command.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_exec_command.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_exec_command.redirect_stderr": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "object": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_exec_command.redirect_stderr.__enter__": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_exec_command.sys": {
     "line number": [
      39,
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.redirect_stderr.__exit__": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_exec_command.sys": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_exec_command.sys": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.redirect_stdout": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "object": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_exec_command.redirect_stdout.__enter__": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_exec_command.sys": {
     "line number": [
      24,
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.redirect_stdout.__exit__": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_exec_command.sys": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_exec_command.sys": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_exec_command.tempdir": {
  "data": {
   "shadows": "numpy.testing.tempdir"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_exec_command.test_exec_command_stderr": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "StringIO.StringIO": {
     "line number": [
      86,
      93
     ]
    },
    "numpy.distutils.exec_command.exec_command": {
     "line number": [
      87,
      94
     ]
    },
    "numpy.distutils.tests.test_exec_command.emulate_nonposix": {
     "line number": [
      91
     ]
    },
    "numpy.distutils.tests.test_exec_command.os": {
     "line number": [
      89
     ]
    },
    "numpy.distutils.tests.test_exec_command.redirect_stderr": {
     "line number": [
      86,
      93
     ]
    },
    "numpy.distutils.tests.test_exec_command.redirect_stdout": {
     "line number": [
      85,
      92
     ]
    },
    "tempfile.TemporaryFile": {
     "line number": [
      85,
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_exec_command.test_exec_command_stdout": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "StringIO.StringIO": {
     "line number": [
      72,
      79
     ]
    },
    "numpy.distutils.exec_command.exec_command": {
     "line number": [
      74,
      81
     ]
    },
    "numpy.distutils.tests.test_exec_command.emulate_nonposix": {
     "line number": [
      78
     ]
    },
    "numpy.distutils.tests.test_exec_command.os": {
     "line number": [
      76
     ]
    },
    "numpy.distutils.tests.test_exec_command.redirect_stderr": {
     "line number": [
      73,
      80
     ]
    },
    "numpy.distutils.tests.test_exec_command.redirect_stdout": {
     "line number": [
      72,
      79
     ]
    },
    "tempfile.TemporaryFile": {
     "line number": [
      73,
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_fcompiler": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.tests.test_fcompiler.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler.customizable_flags": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_fcompiler.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler.numpy.distutils.fcompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler.test_fcompiler_flags": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      26,
      29,
      38,
      40
     ]
    },
    "numpy.distutils.tests.test_fcompiler.customizable_flags": {
     "line number": [
      24,
      36
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      32,
      44,
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_fcompiler.test_fcompiler_flags_append_warning": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      69,
      74
     ]
    },
    "len": {
     "line number": [
      77
     ]
    },
    "numpy.distutils.tests.test_fcompiler.customizable_flags": {
     "line number": [
      65
     ]
    },
    "numpy.distutils.tests.test_fcompiler.pytest": {
     "line number": [
      60
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      80
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      55,
      67,
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_fcompiler_gnu": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "object": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions.test_g77_version": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_fcompiler_gnu.g77_version_strings": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions.test_not_g77": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_fcompiler_gnu.gfortran_version_strings": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.TestGFortranVersions": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "object": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.TestGFortranVersions.test_gfortran_version": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_fcompiler_gnu.gfortran_version_strings": {
     "line number": [
      49
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.TestGFortranVersions.test_not_gfortran": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_fcompiler_gnu.g77_version_strings": {
     "line number": [
      55
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.g77_version_strings": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.gfortran_version_strings": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.numpy.distutils.fcompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_gnu.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_intel": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.tests.test_fcompiler_intel.TestIntelEM64TFCompilerVersions": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "object": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_fcompiler_intel.TestIntelEM64TFCompilerVersions.test_64bit_version": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_fcompiler_intel.intel_64bit_version_strings": {
     "line number": [
      30
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_fcompiler_intel.TestIntelFCompilerVersions": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "object": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_fcompiler_intel.TestIntelFCompilerVersions.test_32bit_version": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_fcompiler_intel.intel_32bit_version_strings": {
     "line number": [
      22
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_fcompiler_intel.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_intel.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_intel.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_intel.intel_32bit_version_strings": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_fcompiler_intel.intel_64bit_version_strings": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_fcompiler_intel.numpy.distutils.fcompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_intel.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_nagfor": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.tests.test_fcompiler_nagfor.TestNagFCompilerVersions": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "object": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_fcompiler_nagfor.TestNagFCompilerVersions.test_version_match": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_fcompiler_nagfor.nag_version_strings": {
     "line number": [
      21
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_fcompiler_nagfor.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_nagfor.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_nagfor.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_nagfor.nag_version_strings": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_fcompiler_nagfor.numpy.distutils.fcompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_fcompiler_nagfor.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_from_template": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.tests.test_from_template.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_from_template.expected_pyf": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_from_template.normalize_whitespace": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_from_template.process_str": {
  "data": {
   "shadows": "numpy.distutils.from_template.process_str"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_from_template.pyf_src": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_from_template.test_from_template": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "numpy.distutils.from_template.process_str": {
     "line number": [
      41
     ]
    },
    "numpy.distutils.tests.test_from_template.expected_pyf": {
     "line number": [
      43
     ]
    },
    "numpy.distutils.tests.test_from_template.normalize_whitespace": {
     "line number": [
      42,
      43
     ]
    },
    "numpy.distutils.tests.test_from_template.pyf_src": {
     "line number": [
      41
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_misc_util": {
  "data": {
   "symbols_in_volume": {
    "os.path.join": {
     "line number": [
      12
     ]
    },
    "os.path.sep": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.tests.test_misc_util.TestAppendpath": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "object": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_misc_util.TestAppendpath.test_1": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.appendpath": {
     "line number": [
      17,
      18,
      19,
      20
     ]
    },
    "numpy.distutils.tests.test_misc_util.ajoin": {
     "line number": [
      18,
      19
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      17,
      18,
      19,
      20
     ]
    },
    "os.path.join": {
     "line number": [
      17,
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_misc_util.TestAppendpath.test_2": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.appendpath": {
     "line number": [
      23,
      25,
      27
     ]
    },
    "numpy.distutils.tests.test_misc_util.ajoin": {
     "line number": [
      28
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      23,
      25,
      27
     ]
    },
    "os.path.join": {
     "line number": [
      24,
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_misc_util.TestAppendpath.test_3": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.appendpath": {
     "line number": [
      31,
      33,
      35
     ]
    },
    "numpy.distutils.tests.test_misc_util.ajoin": {
     "line number": [
      32,
      34,
      36
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      31,
      33,
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_misc_util.TestGpaths": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "object": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_misc_util.TestGpaths.test_gpaths": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.gpaths": {
     "line number": [
      56,
      58
     ]
    },
    "numpy.distutils.misc_util.minrelpath": {
     "line number": [
      55
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      57,
      59
     ]
    },
    "os.path.dirname": {
     "line number": [
      55
     ]
    },
    "os.path.join": {
     "line number": [
      55,
      57,
      59
     ]
    },
    "repr": {
     "line number": [
      57,
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_misc_util.TestMinrelpath": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "object": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_misc_util.TestMinrelpath.test_1": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "n": {
     "line number": [
      42,
      42,
      44,
      45,
      46,
      47,
      48,
      48,
      49,
      49,
      50,
      50
     ]
    },
    "numpy.distutils.misc_util.minrelpath": {
     "line number": [
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50
     ]
    },
    "os.path.sep": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_misc_util.TestSharedExtension": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "object": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_misc_util.TestSharedExtension.test_get_shared_lib_extension": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.get_shared_lib_extension": {
     "line number": [
      65,
      75
     ]
    },
    "numpy.distutils.tests.test_misc_util.sys": {
     "line number": [
      66,
      68,
      70,
      72
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      75
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      67,
      69,
      71,
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_misc_util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.ajoin": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_misc_util.appendpath": {
  "data": {
   "shadows": "numpy.distutils.misc_util.appendpath"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.dirname": {
  "data": {
   "shadows": "os.path.dirname"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.get_info": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_info"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.get_shared_lib_extension": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_shared_lib_extension"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.gpaths": {
  "data": {
   "shadows": "numpy.distutils.misc_util.gpaths"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.join": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.minrelpath": {
  "data": {
   "shadows": "numpy.distutils.misc_util.minrelpath"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.sep": {
  "data": {
   "shadows": "os.path.sep"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_misc_util.test_installed_npymath_ini": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      83
     ]
    },
    "isinstance": {
     "line number": [
      83
     ]
    },
    "numpy.distutils.misc_util.get_info": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_npy_pkg_config": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "object": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo.test_simple": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "numpy.distutils.npy_pkg_config.read_config": {
     "line number": [
      45
     ]
    },
    "numpy.distutils.tests.test_npy_pkg_config.os": {
     "line number": [
      44
     ]
    },
    "numpy.distutils.tests.test_npy_pkg_config.simple": {
     "line number": [
      43
     ]
    },
    "numpy.distutils.tests.test_npy_pkg_config.simple_d": {
     "line number": [
      47,
      48,
      49,
      50
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      47,
      48,
      49,
      50
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      41
     ]
    },
    "open": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo.test_simple_variable": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "numpy.distutils.npy_pkg_config.read_config": {
     "line number": [
      57
     ]
    },
    "numpy.distutils.tests.test_npy_pkg_config.os": {
     "line number": [
      56
     ]
    },
    "numpy.distutils.tests.test_npy_pkg_config.simple_variable": {
     "line number": [
      55
     ]
    },
    "numpy.distutils.tests.test_npy_pkg_config.simple_variable_d": {
     "line number": [
      59,
      60,
      61,
      62
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      59,
      60,
      61,
      62,
      64
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      53
     ]
    },
    "open": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_npy_pkg_config.TestParseFlags": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "object": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_npy_pkg_config.TestParseFlags.test_simple_cflags": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "numpy.distutils.npy_pkg_config.parse_flags": {
     "line number": [
      68,
      71,
      75
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      69,
      72,
      73,
      76,
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_npy_pkg_config.TestParseFlags.test_simple_lflags": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "numpy.distutils.npy_pkg_config.parse_flags": {
     "line number": [
      80,
      84
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      81,
      82,
      85,
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_npy_pkg_config.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_npy_pkg_config.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_npy_pkg_config.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_npy_pkg_config.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_npy_pkg_config.parse_flags": {
  "data": {
   "shadows": "numpy.distutils.npy_pkg_config.parse_flags"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_npy_pkg_config.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_npy_pkg_config.read_config": {
  "data": {
   "shadows": "numpy.distutils.npy_pkg_config.read_config"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_npy_pkg_config.simple": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_npy_pkg_config.simple_d": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_npy_pkg_config.simple_variable": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_npy_pkg_config.simple_variable_d": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_npy_pkg_config.temppath": {
  "data": {
   "shadows": "numpy.testing.temppath"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_shell_utils": {
  "data": {},
  "type": "module"
 },
 "numpy.distutils.tests.test_shell_utils.Parser": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "numpy.distutils._shell_utils.PosixParser": {
     "line number": [
      35
     ]
    },
    "numpy.distutils._shell_utils.WindowsParser": {
     "line number": [
      34
     ]
    },
    "numpy.distutils.tests.test_shell_utils.pytest": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_shell_utils._shell_utils": {
  "data": {
   "shadows": "numpy.distutils._shell_utils"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_shell_utils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_shell_utils.argv_cases": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_shell_utils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_shell_utils.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_shell_utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_shell_utils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_shell_utils.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_shell_utils.runner": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      52
     ]
    },
    "numpy.distutils._shell_utils.NativeParser": {
     "line number": [
      43
     ]
    },
    "numpy.distutils._shell_utils.PosixParser": {
     "line number": [
      48
     ]
    },
    "numpy.distutils._shell_utils.WindowsParser": {
     "line number": [
      46
     ]
    },
    "numpy.distutils.tests.test_shell_utils.Parser": {
     "line number": [
      43,
      46,
      48
     ]
    },
    "numpy.distutils.tests.test_shell_utils.pytest": {
     "line number": [
      44,
      41
     ]
    },
    "numpy.distutils.tests.test_shell_utils.subprocess": {
     "line number": [
      47,
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_shell_utils.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_shell_utils.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_shell_utils.test_join_matches_subprocess": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_shell_utils.Parser": {
     "line number": [
      65
     ]
    },
    "numpy.distutils.tests.test_shell_utils.argv_cases": {
     "line number": [
      55
     ]
    },
    "numpy.distutils.tests.test_shell_utils.json": {
     "line number": [
      67
     ]
    },
    "numpy.distutils.tests.test_shell_utils.pytest": {
     "line number": [
      55
     ]
    },
    "numpy.distutils.tests.test_shell_utils.runner": {
     "line number": [
      66
     ]
    },
    "numpy.distutils.tests.test_shell_utils.sys": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_shell_utils.test_roundtrip": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      78
     ]
    },
    "numpy.distutils.tests.test_shell_utils.Parser": {
     "line number": [
      76,
      77
     ]
    },
    "numpy.distutils.tests.test_shell_utils.argv_cases": {
     "line number": [
      70
     ]
    },
    "numpy.distutils.tests.test_shell_utils.pytest": {
     "line number": [
      79,
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info": {
  "data": {
   "symbols_in_volume": {
    "numpy.distutils.tests.test_system_info.have_compiler": {
     "line number": [
      83
     ]
    },
    "numpy.distutils.tests.test_system_info.simple_site": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.tests.test_system_info.ConfigParser": {
  "data": {
   "shadows": "numpy.distutils.system_info.ConfigParser"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.DistutilsError": {
  "data": {
   "shadows": "distutils.errors.DistutilsError"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.HAVE_COMPILER": {
  "data": {
   "lineno": 83
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_system_info.PIPE": {
  "data": {
   "shadows": "subprocess.PIPE"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.Popen": {
  "data": {
   "shadows": "subprocess.Popen"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.Temp1Info": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_system_info._system_info": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_system_info.Temp2Info": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_system_info._system_info": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_system_info.TestSystemInfoReading": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "object": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_system_info.TestSystemInfoReading.setup": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "numpy.distutils._shell_utils.NativeParser.join": {
     "line number": [
      142
     ]
    },
    "numpy.distutils.tests.test_system_info.fakelib_c_text": {
     "line number": [
      151,
      153
     ]
    },
    "numpy.distutils.tests.test_system_info.get_class": {
     "line number": [
      160,
      161,
      162
     ]
    },
    "numpy.distutils.tests.test_system_info.os": {
     "line number": [
      129,
      130,
      132,
      133,
      141,
      146
     ]
    },
    "numpy.distutils.tests.test_system_info.simple_site": {
     "line number": [
      136
     ]
    },
    "numpy.distutils.tests.test_system_info.site_cfg": {
     "line number": [
      136,
      148
     ]
    },
    "open": {
     "line number": [
      147,
      150,
      152
     ]
    },
    "site_and_parse": {
     "line number": [
      160,
      161,
      162
     ]
    },
    "tempfile.mkdtemp": {
     "line number": [
      128,
      131
     ]
    },
    "tempfile.mkstemp": {
     "line number": [
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info.TestSystemInfoReading.setup.site_and_parse": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "numpy.distutils.tests.test_system_info.site_cfg": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info.TestSystemInfoReading.teardown": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      168,
      172,
      176
     ]
    },
    "numpy.distutils.tests.test_system_info.os": {
     "line number": [
      175
     ]
    },
    "numpy.distutils.tests.test_system_info.shutil": {
     "line number": [
      167,
      171
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_all": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      182,
      183,
      184,
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_compile1": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "numpy.distutils.customized_ccompiler": {
     "line number": [
      208
     ]
    },
    "numpy.distutils.tests.test_system_info.HAVE_COMPILER": {
     "line number": [
      205
     ]
    },
    "numpy.distutils.tests.test_system_info.os": {
     "line number": [
      209,
      212,
      213,
      215,
      216,
      218
     ]
    },
    "numpy.distutils.tests.test_system_info.pytest": {
     "line number": [
      205
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_compile2": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "numpy.distutils.ccompiler.new_compiler": {
     "line number": [
      221
     ]
    },
    "numpy.distutils.customized_ccompiler": {
     "line number": [
      226
     ]
    },
    "numpy.distutils.tests.test_system_info.HAVE_COMPILER": {
     "line number": [
      220
     ]
    },
    "numpy.distutils.tests.test_system_info.os": {
     "line number": [
      228,
      231,
      232,
      235,
      237
     ]
    },
    "numpy.distutils.tests.test_system_info.pytest": {
     "line number": [
      220,
      221
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      235
     ]
    },
    "repr": {
     "line number": [
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_temp1": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      191,
      192,
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_temp2": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      198,
      199,
      201,
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info._shell_utils": {
  "data": {
   "shadows": "numpy.distutils._shell_utils"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info._system_info": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "numpy.distutils.system_info.system_info": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.distutils.tests.test_system_info._system_info.__init__": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "numpy.distutils.system_info.ConfigParser": {
     "line number": [
      103
     ]
    },
    "numpy.distutils.system_info.default_include_dirs": {
     "line number": [
      90
     ]
    },
    "numpy.distutils.system_info.default_lib_dirs": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info._system_info._check_libs": {
  "data": {
   "lineno": 107
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.ccompiler": {
  "data": {
   "shadows": "numpy.distutils.ccompiler"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.customized_ccompiler": {
  "data": {
   "shadows": "numpy.distutils.customized_ccompiler"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.default_include_dirs": {
  "data": {
   "shadows": "numpy.distutils.system_info.default_include_dirs"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.default_lib_dirs": {
  "data": {
   "shadows": "numpy.distutils.system_info.default_lib_dirs"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.fakelib_c_text": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_system_info.get_class": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "cl": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info.have_compiler": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      66
     ]
    },
    "OSError": {
     "line number": [
      78
     ]
    },
    "ValueError": {
     "line number": [
      70
     ]
    },
    "distutils.errors.DistutilsError": {
     "line number": [
      70
     ]
    },
    "numpy.distutils.customized_ccompiler": {
     "line number": [
      63
     ]
    },
    "subprocess.PIPE": {
     "line number": [
      74,
      74
     ]
    },
    "subprocess.Popen": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.tests.test_system_info.mkdtemp": {
  "data": {
   "shadows": "tempfile.mkdtemp"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.mkstemp": {
  "data": {
   "shadows": "tempfile.mkstemp"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "numpy.distutils.tests.test_system_info.simple_site": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_system_info.site_cfg": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "numpy.distutils.tests.test_system_info.system_info": {
  "data": {
   "shadows": "numpy.distutils.system_info.system_info"
  },
  "type": "import"
 },
 "numpy.distutils.unixccompiler": {
  "data": {
   "symbols_in_volume": {
    "numpy.distutils.ccompiler.replace_method": {
     "line number": [
      68,
      138
     ]
    },
    "numpy.distutils.unixccompiler.UnixCCompiler__compile": {
     "line number": [
      68
     ]
    },
    "numpy.distutils.unixccompiler.UnixCCompiler_create_static_lib": {
     "line number": [
      139
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.distutils.unixccompiler.CompileError": {
  "data": {
   "shadows": "distutils.errors.CompileError"
  },
  "type": "import"
 },
 "numpy.distutils.unixccompiler.DistutilsExecError": {
  "data": {
   "shadows": "distutils.errors.DistutilsExecError"
  },
  "type": "import"
 },
 "numpy.distutils.unixccompiler.UnixCCompiler__compile": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "distutils.errors.CompileError": {
     "line number": [
      61
     ]
    },
    "distutils.errors.DistutilsExecError": {
     "line number": [
      59
     ]
    },
    "distutils.sysconfig.get_config_vars": {
     "line number": [
      38
     ]
    },
    "getattr": {
     "line number": [
      51
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      60
     ]
    },
    "numpy.distutils.misc_util._commandline_dep_string": {
     "line number": [
      66
     ]
    },
    "numpy.distutils.unixccompiler.os": {
     "line number": [
      35,
      37,
      47
     ]
    },
    "open": {
     "line number": [
      65
     ]
    },
    "str": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.unixccompiler.UnixCCompiler_create_static_lib": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      107
     ]
    },
    "LibError": {
     "line number": [
      133
     ]
    },
    "OSError": {
     "line number": [
      107
     ]
    },
    "distutils.errors.DistutilsExecError": {
     "line number": [
      131
     ]
    },
    "len": {
     "line number": [
      116
     ]
    },
    "numpy.distutils.compat.get_exception": {
     "line number": [
      132
     ]
    },
    "numpy.distutils.log.debug": {
     "line number": [
      135
     ]
    },
    "numpy.distutils.unixccompiler.os": {
     "line number": [
      106,
      109,
      115,
      126
     ]
    },
    "str": {
     "line number": [
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.distutils.unixccompiler._commandline_dep_string": {
  "data": {
   "shadows": "numpy.distutils.misc_util._commandline_dep_string"
  },
  "type": "import"
 },
 "numpy.distutils.unixccompiler.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.distutils.unixccompiler.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.distutils.unixccompiler.get_config_vars": {
  "data": {
   "shadows": "distutils.sysconfig.get_config_vars"
  },
  "type": "import"
 },
 "numpy.distutils.unixccompiler.get_exception": {
  "data": {
   "shadows": "numpy.distutils.compat.get_exception"
  },
  "type": "import"
 },
 "numpy.distutils.unixccompiler.log": {
  "data": {
   "shadows": "numpy.distutils.log"
  },
  "type": "import"
 },
 "numpy.distutils.unixccompiler.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.distutils.unixccompiler.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.distutils.unixccompiler.replace_method": {
  "data": {
   "shadows": "numpy.distutils.ccompiler.replace_method"
  },
  "type": "import"
 },
 "numpy.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc": {
  "data": {
   "symbols_in_volume": {
    "__import__": {
     "line number": [
      11
     ]
    },
    "__name__": {
     "line number": [
      11
     ]
    },
    "numpy.doc.__all__": {
     "line number": [
      10,
      26,
      28
     ]
    },
    "numpy.doc.os": {
     "line number": [
      5,
      5,
      7
     ]
    },
    "numpy.doc.ref_dir": {
     "line number": [
      7,
      13
     ]
    },
    "sorted": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.doc.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.doc.__doc__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.doc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.basics": {
  "data": {},
  "type": "module"
 },
 "numpy.doc.basics.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.basics.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.basics.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.doc.broadcasting": {
  "data": {},
  "type": "module"
 },
 "numpy.doc.broadcasting.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.broadcasting.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.broadcasting.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.doc.byteswapping": {
  "data": {},
  "type": "module"
 },
 "numpy.doc.byteswapping.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.byteswapping.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.byteswapping.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.doc.creation": {
  "data": {},
  "type": "module"
 },
 "numpy.doc.creation.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.creation.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.creation.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.doc.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.glossary": {
  "data": {},
  "type": "module"
 },
 "numpy.doc.glossary.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.glossary.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.glossary.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.doc.indexing": {
  "data": {},
  "type": "module"
 },
 "numpy.doc.indexing.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.indexing.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.indexing.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.doc.internals": {
  "data": {},
  "type": "module"
 },
 "numpy.doc.internals.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.internals.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.internals.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.doc.misc": {
  "data": {},
  "type": "module"
 },
 "numpy.doc.misc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.misc.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.misc.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.doc.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.doc.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.doc.ref_dir": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "numpy.doc.structured_arrays": {
  "data": {},
  "type": "module"
 },
 "numpy.doc.structured_arrays.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.structured_arrays.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.structured_arrays.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.doc.subclassing": {
  "data": {},
  "type": "module"
 },
 "numpy.doc.subclassing.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.subclassing.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.subclassing.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.doc.ufuncs": {
  "data": {},
  "type": "module"
 },
 "numpy.doc.ufuncs.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.doc.ufuncs.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.doc.ufuncs.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.dual": {
  "data": {
   "symbols_in_volume": {
    "numpy.fft.fft": {
     "line number": [
      30
     ]
    },
    "numpy.fft.fft2": {
     "line number": [
      34
     ]
    },
    "numpy.fft.fftn": {
     "line number": [
      32
     ]
    },
    "numpy.fft.ifft": {
     "line number": [
      31
     ]
    },
    "numpy.fft.ifft2": {
     "line number": [
      35
     ]
    },
    "numpy.fft.ifftn": {
     "line number": [
      33
     ]
    },
    "numpy.linalg.cholesky": {
     "line number": [
      48
     ]
    },
    "numpy.linalg.det": {
     "line number": [
      41
     ]
    },
    "numpy.linalg.eig": {
     "line number": [
      42
     ]
    },
    "numpy.linalg.eigh": {
     "line number": [
      44
     ]
    },
    "numpy.linalg.eigvals": {
     "line number": [
      43
     ]
    },
    "numpy.linalg.eigvalsh": {
     "line number": [
      45
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      38
     ]
    },
    "numpy.linalg.lstsq": {
     "line number": [
      46
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      37
     ]
    },
    "numpy.linalg.pinv": {
     "line number": [
      47
     ]
    },
    "numpy.linalg.solve": {
     "line number": [
      40
     ]
    },
    "numpy.linalg.svd": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.dual.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.dual._restore_dict": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "numpy.dual.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.dual.cholesky": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "numpy.dual.det": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "numpy.dual.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.dual.eig": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "numpy.dual.eigh": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "numpy.dual.eigvals": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "numpy.dual.eigvalsh": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "numpy.dual.fft": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "numpy.dual.fft2": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "numpy.dual.fftn": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "numpy.dual.fftpkg": {
  "data": {
   "shadows": "numpy.fft"
  },
  "type": "import"
 },
 "numpy.dual.i0": {
  "data": {
   "shadows": "numpy.lib.i0"
  },
  "type": "import"
 },
 "numpy.dual.ifft": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "numpy.dual.ifft2": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "numpy.dual.ifftn": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.dual.inv": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "numpy.dual.linpkg": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "numpy.dual.lstsq": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "numpy.dual.norm": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "numpy.dual.pinv": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "numpy.dual.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.dual.register_func": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      54
     ]
    },
    "numpy.dual.__all__": {
     "line number": [
      53
     ]
    },
    "numpy.dual._restore_dict": {
     "line number": [
      56
     ]
    },
    "numpy.dual.sys": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.dual.restore_all": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "numpy.dual._restore_dict": {
     "line number": [
      70
     ]
    },
    "numpy.dual.restore_func": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.dual.restore_func": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      64
     ]
    },
    "ValueError": {
     "line number": [
      61
     ]
    },
    "numpy.dual.__all__": {
     "line number": [
      60
     ]
    },
    "numpy.dual._restore_dict": {
     "line number": [
      63
     ]
    },
    "numpy.dual.sys": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.dual.solve": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "numpy.dual.svd": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "numpy.dual.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      120
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      120,
      121
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.f2py.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.f2py.__main__": {
  "data": {
   "symbols_in_volume": {
    "numpy.f2py.f2py2e.main": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.__main__.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.__main__.main": {
  "data": {
   "shadows": "numpy.f2py.f2py2e.main"
  },
  "type": "import"
 },
 "numpy.f2py.__main__.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.__version__": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      9
     ]
    },
    "ValueError": {
     "line number": [
      9
     ]
    },
    "__svn_version__.version": {
     "line number": [
      7,
      8,
      10
     ]
    },
    "numpy.f2py.__version__.major": {
     "line number": [
      7,
      10
     ]
    },
    "numpy.f2py.__version__.version_info": {
     "line number": [
      8
     ]
    },
    "str": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.__version__.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.__version__.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.__version__.major": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "numpy.f2py.__version__.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.__version__.version": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "numpy.f2py.__version__.version_info": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.f2py.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.capi_maps": {
  "data": {
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      212
     ]
    },
    "errmess": {
     "line number": [
      209,
      213
     ]
    },
    "eval": {
     "line number": [
      191
     ]
    },
    "list": {
     "line number": [
      193,
      194,
      197,
      200,
      210
     ]
    },
    "numpy.f2py.capi_maps.__version__": {
     "line number": [
      19
     ]
    },
    "numpy.f2py.capi_maps.c2buildvalue_map": {
     "line number": [
      156
     ]
    },
    "numpy.f2py.capi_maps.c2py_map": {
     "line number": [
      201,
      210
     ]
    },
    "numpy.f2py.capi_maps.d": {
     "line number": [
      193,
      196,
      196,
      197,
      200,
      201,
      204,
      205,
      207,
      210,
      210
     ]
    },
    "numpy.f2py.capi_maps.f": {
     "line number": [
      191,
      192
     ]
    },
    "numpy.f2py.capi_maps.f2cmap_all": {
     "line number": [
      198,
      199,
      202,
      204,
      205
     ]
    },
    "numpy.f2py.capi_maps.os": {
     "line number": [
      182
     ]
    },
    "numpy.f2py.capi_maps.sys": {
     "line number": [
      154
     ]
    },
    "numpy.f2py.capi_maps.using_newcore": {
     "line number": [
      84,
      122,
      158
     ]
    },
    "open": {
     "line number": [
      190
     ]
    },
    "outmess": {
     "line number": [
      189,
      203,
      206,
      211
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.capi_maps.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.__version__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.capi_maps.c2buildvalue_map": {
  "data": {
   "lineno": 141
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.c2capi_map": {
  "data": {
   "lineno": 85
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.c2py_map": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.c2pycode_map": {
  "data": {
   "lineno": 123
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.cb_routsign2map": {
  "data": {
   "lineno": 736,
   "symbols_in_volume": {
    "gentitle": {
     "line number": [
      758,
      759
     ]
    },
    "hasnote": {
     "line number": [
      784,
      798,
      812
     ]
    },
    "iscomplexfunction": {
     "line number": [
      767,
      789
     ]
    },
    "isfunction": {
     "line number": [
      779,
      812
     ]
    },
    "isintent_callback": {
     "line number": [
      743
     ]
    },
    "isintent_in": {
     "line number": [
      806
     ]
    },
    "isintent_inout": {
     "line number": [
      806
     ]
    },
    "isoptional": {
     "line number": [
      808
     ]
    },
    "isstringfunction": {
     "line number": [
      777
     ]
    },
    "l_or": {
     "line number": [
      806
     ]
    },
    "numpy.f2py.capi_maps.cformat_map": {
     "line number": [
      775,
      776
     ]
    },
    "numpy.f2py.capi_maps.getctype": {
     "line number": [
      760
     ]
    },
    "numpy.f2py.capi_maps.getpydocsign": {
     "line number": [
      788
     ]
    },
    "numpy.f2py.capi_maps.getstrlength": {
     "line number": [
      778
     ]
    },
    "repr": {
     "line number": [
      810,
      811
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.cb_sign2map": {
  "data": {
   "lineno": 719,
   "symbols_in_volume": {
    "dictappend": {
     "line number": [
      728
     ]
    },
    "hasnote": {
     "line number": [
      730
     ]
    },
    "isarray": {
     "line number": [
      727
     ]
    },
    "numpy.f2py.capi_maps.c2capi_map": {
     "line number": [
      723,
      724
     ]
    },
    "numpy.f2py.capi_maps.cformat_map": {
     "line number": [
      725,
      726
     ]
    },
    "numpy.f2py.capi_maps.getarrdims": {
     "line number": [
      728
     ]
    },
    "numpy.f2py.capi_maps.getctype": {
     "line number": [
      722
     ]
    },
    "numpy.f2py.capi_maps.getpydocsign": {
     "line number": [
      729
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.cformat_map": {
  "data": {
   "lineno": 216
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.common_sign2map": {
  "data": {
   "lineno": 818,
   "symbols_in_volume": {
    "dictappend": {
     "line number": [
      827
     ]
    },
    "hasnote": {
     "line number": [
      832
     ]
    },
    "isarray": {
     "line number": [
      826
     ]
    },
    "isstring": {
     "line number": [
      828
     ]
    },
    "isstringarray": {
     "line number": [
      820
     ]
    },
    "numpy.f2py.capi_maps.c2capi_map": {
     "line number": [
      822,
      823
     ]
    },
    "numpy.f2py.capi_maps.cformat_map": {
     "line number": [
      824,
      825
     ]
    },
    "numpy.f2py.capi_maps.getarrdims": {
     "line number": [
      827
     ]
    },
    "numpy.f2py.capi_maps.getarrdocsign": {
     "line number": [
      836
     ]
    },
    "numpy.f2py.capi_maps.getctype": {
     "line number": [
      819
     ]
    },
    "numpy.f2py.capi_maps.getpydocsign": {
     "line number": [
      831
     ]
    },
    "numpy.f2py.capi_maps.getstrlength": {
     "line number": [
      829
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "numpy.f2py.capi_maps.d": {
  "data": {
   "lineno": 191
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.depargs": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.capi_maps.f": {
  "data": {
   "lineno": 190
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.f2cmap_all": {
  "data": {
   "lineno": 162
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.f2py_version": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.getarrdims": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      331
     ]
    },
    "errmess": {
     "line number": [
      368
     ]
    },
    "eval": {
     "line number": [
      330
     ]
    },
    "isarray": {
     "line number": [
      318,
      326
     ]
    },
    "isintent_in": {
     "line number": [
      362
     ]
    },
    "isscalar": {
     "line number": [
      322
     ]
    },
    "isstring": {
     "line number": [
      318
     ]
    },
    "len": {
     "line number": [
      334,
      335,
      336
     ]
    },
    "numpy.f2py.capi_maps.copy": {
     "line number": [
      327
     ]
    },
    "numpy.f2py.capi_maps.d": {
     "line number": [
      349,
      351,
      353,
      357,
      359,
      361,
      364,
      369
     ]
    },
    "numpy.f2py.capi_maps.depargs": {
     "line number": [
      338,
      341,
      345,
      345
     ]
    },
    "numpy.f2py.capi_maps.getstrlength": {
     "line number": [
      319
     ]
    },
    "numpy.f2py.capi_maps.re": {
     "line number": [
      342
     ]
    },
    "outmess": {
     "line number": [
      363
     ]
    },
    "range": {
     "line number": [
      336
     ]
    },
    "repr": {
     "line number": [
      330,
      334,
      335,
      369,
      369
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.getarrdocsign": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "isarray": {
     "line number": [
      453,
      459
     ]
    },
    "isscalar": {
     "line number": [
      456
     ]
    },
    "isstring": {
     "line number": [
      453
     ]
    },
    "len": {
     "line number": [
      461
     ]
    },
    "numpy.f2py.capi_maps.c2py_map": {
     "line number": [
      457
     ]
    },
    "numpy.f2py.capi_maps.c2pycode_map": {
     "line number": [
      458,
      463
     ]
    },
    "numpy.f2py.capi_maps.getctype": {
     "line number": [
      452
     ]
    },
    "numpy.f2py.capi_maps.getstrlength": {
     "line number": [
      455
     ]
    },
    "repr": {
     "line number": [
      461
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.getctype": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      262,
      270,
      275
     ]
    },
    "errmess": {
     "line number": [
      251,
      263,
      276,
      282
     ]
    },
    "isexternal": {
     "line number": [
      281
     ]
    },
    "isfunction": {
     "line number": [
      243
     ]
    },
    "issubroutine": {
     "line number": [
      252
     ]
    },
    "numpy.f2py.capi_maps.f2cmap_all": {
     "line number": [
      254,
      256,
      266,
      267,
      271,
      272
     ]
    },
    "numpy.f2py.capi_maps.os": {
     "line number": [
      278
     ]
    },
    "str": {
     "line number": [
      274
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.getinit": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      488
     ]
    },
    "ValueError": {
     "line number": [
      489
     ]
    },
    "eval": {
     "line number": [
      486
     ]
    },
    "hasinitvalue": {
     "line number": [
      474
     ]
    },
    "isarray": {
     "line number": [
      491
     ]
    },
    "iscomplex": {
     "line number": [
      477
     ]
    },
    "iscomplexarray": {
     "line number": [
      477
     ]
    },
    "isstring": {
     "line number": [
      470,
      494
     ]
    },
    "markoutercomma": {
     "line number": [
      483
     ]
    },
    "str": {
     "line number": [
      487,
      487
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.getpydocsign": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": {
    "errmess": {
     "line number": [
      387,
      446
     ]
    },
    "hasinitvalue": {
     "line number": [
      404
     ]
    },
    "isarray": {
     "line number": [
      422
     ]
    },
    "isexternal": {
     "line number": [
      435
     ]
    },
    "isfunction": {
     "line number": [
      379
     ]
    },
    "isintent_in": {
     "line number": [
      391
     ]
    },
    "isintent_inout": {
     "line number": [
      393,
      408,
      415
     ]
    },
    "isintent_out": {
     "line number": [
      396
     ]
    },
    "isscalar": {
     "line number": [
      407
     ]
    },
    "isstring": {
     "line number": [
      414
     ]
    },
    "len": {
     "line number": [
      424
     ]
    },
    "numpy.f2py.capi_maps.c2py_map": {
     "line number": [
      409,
      412,
      413
     ]
    },
    "numpy.f2py.capi_maps.c2pycode_map": {
     "line number": [
      410,
      426,
      431,
      434
     ]
    },
    "numpy.f2py.capi_maps.getctype": {
     "line number": [
      402
     ]
    },
    "numpy.f2py.capi_maps.getinit": {
     "line number": [
      405
     ]
    },
    "numpy.f2py.capi_maps.getstrlength": {
     "line number": [
      417,
      420,
      421
     ]
    },
    "numpy.f2py.capi_maps.lcb2_map": {
     "line number": [
      437,
      437,
      438
     ]
    },
    "numpy.f2py.capi_maps.lcb_map": {
     "line number": [
      437,
      437,
      437,
      438
     ]
    },
    "repr": {
     "line number": [
      424
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.getstrlength": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "errmess": {
     "line number": [
      296,
      298,
      309
     ]
    },
    "isintent_hide": {
     "line number": [
      308
     ]
    },
    "isstring": {
     "line number": [
      297
     ]
    },
    "isstringfunction": {
     "line number": [
      288
     ]
    },
    "len": {
     "line number": [
      300,
      304,
      306,
      307,
      307,
      311,
      312
     ]
    },
    "numpy.f2py.capi_maps.re": {
     "line number": [
      307,
      307
     ]
    },
    "repr": {
     "line number": [
      299,
      310
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.lcb2_map": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.lcb_map": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "numpy.f2py.capi_maps.modsign2map": {
  "data": {
   "lineno": 690,
   "symbols_in_volume": {
    "getpymethoddef": {
     "line number": [
      711
     ]
    },
    "getrestdoc": {
     "line number": [
      702
     ]
    },
    "getusercode": {
     "line number": [
      705,
      708
     ]
    },
    "getusercode1": {
     "line number": [
      706
     ]
    },
    "hasnote": {
     "line number": [
      703
     ]
    },
    "ismodule": {
     "line number": [
      694
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.capi_maps.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.capi_maps.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.f2py.capi_maps.routsign2map": {
  "data": {
   "lineno": 609,
   "symbols_in_volume": {
    "debugcapi": {
     "line number": [
      671
     ]
    },
    "errmess": {
     "line number": [
      651,
      669,
      681
     ]
    },
    "gentitle": {
     "line number": [
      622,
      623
     ]
    },
    "getcallprotoargument": {
     "line number": [
      653
     ]
    },
    "getcallstatement": {
     "line number": [
      626
     ]
    },
    "getfortranname": {
     "line number": [
      617
     ]
    },
    "getusercode": {
     "line number": [
      627
     ]
    },
    "getusercode1": {
     "line number": [
      628
     ]
    },
    "hasnote": {
     "line number": [
      684
     ]
    },
    "hasresultnote": {
     "line number": [
      662
     ]
    },
    "isfunction": {
     "line number": [
      654
     ]
    },
    "isstringfunction": {
     "line number": [
      675,
      678
     ]
    },
    "numpy.f2py.capi_maps.c2buildvalue_map": {
     "line number": [
      665,
      666
     ]
    },
    "numpy.f2py.capi_maps.cformat_map": {
     "line number": [
      672,
      674
     ]
    },
    "numpy.f2py.capi_maps.getctype": {
     "line number": [
      661
     ]
    },
    "numpy.f2py.capi_maps.getpydocsign": {
     "line number": [
      660
     ]
    },
    "numpy.f2py.capi_maps.getstrlength": {
     "line number": [
      679
     ]
    },
    "numpy.f2py.capi_maps.lcb_map": {
     "line number": [
      638,
      649,
      653
     ]
    },
    "repr": {
     "line number": [
      652,
      670,
      682
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.sign2map": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": {
    "debugcapi": {
     "line number": [
      559
     ]
    },
    "dictappend": {
     "line number": [
      554
     ]
    },
    "errmess": {
     "line number": [
      549
     ]
    },
    "hasinitvalue": {
     "line number": [
      536
     ]
    },
    "hasnote": {
     "line number": [
      604
     ]
    },
    "isarray": {
     "line number": [
      529,
      536,
      553,
      565,
      579
     ]
    },
    "iscomplex": {
     "line number": [
      536,
      563,
      564
     ]
    },
    "iscomplexarray": {
     "line number": [
      566
     ]
    },
    "isexternal": {
     "line number": [
      539,
      569,
      583,
      596
     ]
    },
    "isfunction": {
     "line number": [
      568
     ]
    },
    "isintent_hide": {
     "line number": [
      562
     ]
    },
    "isintent_in": {
     "line number": [
      560
     ]
    },
    "isintent_inout": {
     "line number": [
      561
     ]
    },
    "isintent_out": {
     "line number": [
      514,
      560
     ]
    },
    "isscalar": {
     "line number": [
      564,
      589
     ]
    },
    "isstring": {
     "line number": [
      551,
      565,
      577,
      593,
      601
     ]
    },
    "l_and": {
     "line number": [
      564,
      568
     ]
    },
    "l_not": {
     "line number": [
      564,
      568
     ]
    },
    "len": {
     "line number": [
      574
     ]
    },
    "list": {
     "line number": [
      550
     ]
    },
    "map": {
     "line number": [
      581
     ]
    },
    "markoutercomma": {
     "line number": [
      537
     ]
    },
    "numpy.f2py.capi_maps.c2buildvalue_map": {
     "line number": [
      531,
      532
     ]
    },
    "numpy.f2py.capi_maps.c2capi_map": {
     "line number": [
      556,
      557
     ]
    },
    "numpy.f2py.capi_maps.cformat_map": {
     "line number": [
      590,
      592,
      598,
      599,
      600
     ]
    },
    "numpy.f2py.capi_maps.copy": {
     "line number": [
      555
     ]
    },
    "numpy.f2py.capi_maps.f": {
     "line number": [
      521,
      522
     ]
    },
    "numpy.f2py.capi_maps.getarrdims": {
     "line number": [
      554
     ]
    },
    "numpy.f2py.capi_maps.getctype": {
     "line number": [
      519
     ]
    },
    "numpy.f2py.capi_maps.getinit": {
     "line number": [
      535
     ]
    },
    "numpy.f2py.capi_maps.getpydocsign": {
     "line number": [
      603
     ]
    },
    "numpy.f2py.capi_maps.getstrlength": {
     "line number": [
      552
     ]
    },
    "numpy.f2py.capi_maps.lcb2_map": {
     "line number": [
      543,
      544,
      545,
      546
     ]
    },
    "numpy.f2py.capi_maps.lcb_map": {
     "line number": [
      541,
      542,
      543,
      544,
      545,
      546,
      550
     ]
    },
    "range": {
     "line number": [
      574
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.capi_maps.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.capi_maps.using_newcore": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "numpy.f2py.cb_rules": {
  "data": {
   "symbols_in_volume": {
    "l_and": {
     "line number": [
      201,
      279,
      280,
      282,
      284,
      287,
      288,
      289,
      290,
      295,
      296,
      301,
      302,
      307,
      308,
      320,
      326,
      326,
      328,
      328,
      330,
      330,
      332,
      332,
      350,
      361,
      376,
      407,
      429
     ]
    },
    "l_not": {
     "line number": [
      191,
      201,
      201,
      296,
      302,
      308,
      319,
      326,
      328,
      328,
      332,
      394
     ]
    },
    "l_or": {
     "line number": [
      407
     ]
    },
    "throw_error": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.cb_rules.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.cb_rules.buildcallback": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": {
    "applyrules": {
     "line number": [
      466,
      478,
      490,
      502,
      556
     ]
    },
    "dictappend": {
     "line number": [
      462,
      467,
      479,
      491,
      503
     ]
    },
    "enumerate": {
     "line number": [
      469
     ]
    },
    "getargs": {
     "line number": [
      458
     ]
    },
    "isinstance": {
     "line number": [
      507,
      523,
      542,
      545,
      558
     ]
    },
    "isoptional": {
     "line number": [
      475
     ]
    },
    "isrequired": {
     "line number": [
      487
     ]
    },
    "list": {
     "line number": [
      507,
      523,
      542,
      545
     ]
    },
    "numpy.f2py.cb_rules.cb_arg_rules": {
     "line number": [
      472,
      484,
      496
     ]
    },
    "numpy.f2py.cb_rules.cb_map": {
     "line number": [
      463
     ]
    },
    "numpy.f2py.cb_rules.cb_rout_rules": {
     "line number": [
      464
     ]
    },
    "numpy.f2py.cb_rules.cb_routine_rules": {
     "line number": [
      556
     ]
    },
    "outmess": {
     "line number": [
      456,
      576
     ]
    },
    "replace": {
     "line number": [
      525,
      526,
      531,
      533
     ]
    },
    "str": {
     "line number": [
      558
     ]
    },
    "stripcomma": {
     "line number": [
      524,
      526,
      530
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.cb_rules.buildcallbacks": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": {
    "errmess": {
     "line number": [
      449
     ]
    },
    "numpy.f2py.cb_rules.buildcallback": {
     "line number": [
      447
     ]
    },
    "numpy.f2py.cb_rules.cb_map": {
     "line number": [
      442
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.cb_rules.cb_arg_rules": {
  "data": {
   "lineno": 277
  },
  "type": "constant"
 },
 "numpy.f2py.cb_rules.cb_map": {
  "data": {
   "lineno": 437
  },
  "type": "constant"
 },
 "numpy.f2py.cb_rules.cb_rout_rules": {
  "data": {
   "lineno": 163
  },
  "type": "constant"
 },
 "numpy.f2py.cb_rules.cb_routine_rules": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "numpy.f2py.cb_rules.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.cb_rules.f2py_version": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy.f2py.cb_rules.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.cfuncs": {
  "data": {
   "symbols_in_volume": {
    "numpy.f2py.cfuncs.cfuncs": {
     "line number": [
      264,
      550,
      557,
      564,
      605,
      618,
      687,
      698,
      709,
      719,
      751,
      784,
      821,
      841,
      882,
      894,
      917,
      995,
      1007,
      1010,
      1013,
      1016,
      1019,
      1022,
      1026,
      1029,
      1032,
      1036,
      1040,
      1044
     ]
    },
    "numpy.f2py.cfuncs.cppmacros": {
     "line number": [
      98,
      109,
      145,
      181,
      215,
      220,
      229,
      235,
      250,
      290,
      292,
      295,
      296,
      299,
      308,
      310,
      312,
      315,
      318,
      321,
      324,
      327,
      330,
      367,
      436,
      451,
      459,
      468,
      472,
      481,
      485,
      501,
      505,
      511,
      517,
      525,
      541,
      543
     ]
    },
    "numpy.f2py.cfuncs.includes": {
     "line number": [
      56,
      58,
      61,
      62
     ]
    },
    "numpy.f2py.cfuncs.includes0": {
     "line number": [
      52,
      53,
      54
     ]
    },
    "numpy.f2py.cfuncs.needs": {
     "line number": [
      57,
      249,
      263,
      294,
      298,
      307,
      314,
      317,
      320,
      323,
      326,
      329,
      366,
      435,
      467,
      484,
      500,
      604,
      617,
      686,
      697,
      708,
      783,
      820,
      881,
      892,
      916,
      993,
      1006,
      1009,
      1012,
      1015,
      1018,
      1021,
      1024,
      1028,
      1031,
      1034,
      1038,
      1043
     ]
    },
    "numpy.f2py.cfuncs.sys": {
     "line number": [
      25
     ]
    },
    "numpy.f2py.cfuncs.typedefs": {
     "line number": [
      66,
      67,
      68,
      69,
      70,
      78,
      85,
      90,
      92,
      93,
      94
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.cfuncs.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.cfuncs.append_needs": {
  "data": {
   "lineno": 1163,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1199,
      1215
     ]
    },
    "isinstance": {
     "line number": [
      1165,
      1168,
      1199,
      1215
     ]
    },
    "list": {
     "line number": [
      1165
     ]
    },
    "numpy.f2py.cfuncs.callbacks": {
     "line number": [
      1183
     ]
    },
    "numpy.f2py.cfuncs.cfuncs": {
     "line number": [
      1181
     ]
    },
    "numpy.f2py.cfuncs.commonhooks": {
     "line number": [
      1187
     ]
    },
    "numpy.f2py.cfuncs.cppmacros": {
     "line number": [
      1179
     ]
    },
    "numpy.f2py.cfuncs.errmess": {
     "line number": [
      1190,
      1226
     ]
    },
    "numpy.f2py.cfuncs.f90modhooks": {
     "line number": [
      1185
     ]
    },
    "numpy.f2py.cfuncs.includes": {
     "line number": [
      1173
     ]
    },
    "numpy.f2py.cfuncs.includes0": {
     "line number": [
      1171
     ]
    },
    "numpy.f2py.cfuncs.needs": {
     "line number": [
      1196,
      1197,
      1212,
      1213
     ]
    },
    "numpy.f2py.cfuncs.outneeds": {
     "line number": [
      1192,
      1207,
      1208,
      1208,
      1209
     ]
    },
    "numpy.f2py.cfuncs.typedefs": {
     "line number": [
      1175
     ]
    },
    "numpy.f2py.cfuncs.typedefs_generated": {
     "line number": [
      1177
     ]
    },
    "repr": {
     "line number": [
      1190,
      1227
     ]
    },
    "str": {
     "line number": [
      1168
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.cfuncs.buildcfuncs": {
  "data": {
   "lineno": 1148,
   "symbols_in_volume": {
    "numpy.f2py.cfuncs.cppmacros": {
     "line number": [
      1152,
      1157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.cfuncs.callbacks": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.cfuncs": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.commonhooks": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "numpy.f2py.cfuncs.cppmacros": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.cfuncs.errmess": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.f2py_version": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.f90modhooks": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.get_needs": {
  "data": {
   "lineno": 1230,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1236
     ]
    },
    "map": {
     "line number": [
      1251
     ]
    },
    "numpy.f2py.cfuncs.copy": {
     "line number": [
      1235,
      1258
     ]
    },
    "numpy.f2py.cfuncs.errmess": {
     "line number": [
      1254
     ]
    },
    "numpy.f2py.cfuncs.needs": {
     "line number": [
      1237,
      1243
     ]
    },
    "numpy.f2py.cfuncs.outneeds": {
     "line number": [
      1233,
      1235,
      1236,
      1237,
      1238,
      1239,
      1242,
      1243,
      1247,
      1247,
      1247,
      1249,
      1250,
      1251,
      1252,
      1258
     ]
    },
    "print": {
     "line number": [
      1253
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.cfuncs.includes": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.includes0": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.needs": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.outneeds": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.cfuncs.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.cfuncs.typedefs": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.typedefs_generated": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "numpy.f2py.cfuncs.userincludes": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "numpy.f2py.common_rules": {
  "data": {
   "symbols_in_volume": {
    "numpy.f2py.common_rules.__version__": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.common_rules.__version__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.f2py.common_rules.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.common_rules.buildhooks": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "cadd": {
     "line number": [
      94,
      107,
      108,
      111,
      112,
      114,
      115,
      120,
      123,
      124,
      126
     ]
    },
    "dadd": {
     "line number": [
      130,
      131,
      133,
      139,
      140
     ]
    },
    "fadd": {
     "line number": [
      84,
      85,
      87,
      89,
      91,
      92,
      93
     ]
    },
    "hasnote": {
     "line number": [
      135
     ]
    },
    "iadd": {
     "line number": [
      127
     ]
    },
    "isinstance": {
     "line number": [
      137
     ]
    },
    "isintent_hide": {
     "line number": [
      74
     ]
    },
    "len": {
     "line number": [
      122,
      146
     ]
    },
    "list": {
     "line number": [
      137
     ]
    },
    "map": {
     "line number": [
      142
     ]
    },
    "numpy.f2py.common_rules.findcommonblocks": {
     "line number": [
      70
     ]
    },
    "outmess": {
     "line number": [
      79,
      82
     ]
    },
    "rmbadname": {
     "line number": [
      109
     ]
    },
    "vars": {
     "line number": [
      70,
      74,
      87,
      97,
      99,
      134,
      135,
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.common_rules.buildhooks.cadd": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "numpy.f2py.common_rules.buildhooks.dadd": {
  "data": {
   "lineno": 68
  },
  "type": "function"
 },
 "numpy.f2py.common_rules.buildhooks.fadd": {
  "data": {
   "lineno": 56
  },
  "type": "function"
 },
 "numpy.f2py.common_rules.buildhooks.iadd": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "numpy.f2py.common_rules.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.common_rules.f2py_version": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.f2py.common_rules.findcommonblocks": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "hasbody": {
     "line number": [
      37
     ]
    },
    "hascommon": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.common_rules.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.compile": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "OSError": {
     "line number": [
      106
     ]
    },
    "isinstance": {
     "line number": [
      84,
      92
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      92
     ]
    },
    "numpy.f2py.os": {
     "line number": [
      80,
      93,
      116
     ]
    },
    "numpy.f2py.shlex": {
     "line number": [
      94
     ]
    },
    "numpy.f2py.subprocess": {
     "line number": [
      102,
      103
     ]
    },
    "numpy.f2py.sys": {
     "line number": [
      98
     ]
    },
    "numpy.f2py.tempfile": {
     "line number": [
      77
     ]
    },
    "open": {
     "line number": [
      87
     ]
    },
    "print": {
     "line number": [
      113
     ]
    },
    "str": {
     "line number": [
      84,
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.diagnose": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      155
     ]
    },
    "numpy.f2py.diagnose.run": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.diagnose.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.build_flib": {
  "data": {
   "shadows": "numpy_distutils.command.build_flib"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.cpuinfo": {
  "data": {
   "shadows": "numpy_distutils.cpuinfo.cpuinfo"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.f2py2e": {
  "data": {
   "shadows": "numpy.f2py.f2py2e"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.fcompiler": {
  "data": {
   "shadows": "numpy_distutils.fcompiler"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.numpy.distutils": {
  "data": {
   "shadows": "numpy.distutils"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.numpy_distutils": {
  "data": {
   "shadows": "numpy_distutils"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.run": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      61,
      69,
      84,
      100,
      103,
      120,
      123,
      139,
      151
     ]
    },
    "ImportError": {
     "line number": [
      35,
      42,
      49,
      53
     ]
    },
    "compiler_class": {
     "line number": [
      98
     ]
    },
    "dir": {
     "line number": [
      147
     ]
    },
    "getattr": {
     "line number": [
      148
     ]
    },
    "numpy.f2py.diagnose.numpy": {
     "line number": [
      60,
      60,
      77,
      78
     ]
    },
    "numpy.f2py.diagnose.numpy_distutils": {
     "line number": [
      81,
      82
     ]
    },
    "numpy.f2py.diagnose.os": {
     "line number": [
      16,
      17,
      19,
      154
     ]
    },
    "numpy.f2py.diagnose.sys": {
     "line number": [
      21,
      24,
      27,
      29,
      36,
      43,
      54
     ]
    },
    "numpy.f2py.diagnose.tempfile": {
     "line number": [
      17
     ]
    },
    "numpy.f2py.f2py2e.__file__": {
     "line number": [
      68
     ]
    },
    "numpy.f2py.f2py2e.__version__.version": {
     "line number": [
      68
     ]
    },
    "numpy_distutils.command.build_flib.all_compilers": {
     "line number": [
      97
     ]
    },
    "numpy_distutils.cpuinfo.cpuinfo": {
     "line number": [
      145,
      147
     ]
    },
    "numpy_distutils.fcompiler.show_fcompilers": {
     "line number": [
      118
     ]
    },
    "print": {
     "line number": [
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      36,
      43,
      54,
      59,
      62,
      63,
      67,
      70,
      71,
      76,
      80,
      83,
      85,
      86,
      89,
      92,
      93,
      95,
      99,
      101,
      102,
      104,
      106,
      109,
      112,
      114,
      115,
      117,
      119,
      121,
      122,
      124,
      125,
      128,
      130,
      131,
      134,
      137,
      138,
      140,
      141,
      143,
      144,
      146,
      149,
      150,
      152,
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.diagnose.run_command": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "numpy.f2py.diagnose.os": {
     "line number": [
      11
     ]
    },
    "print": {
     "line number": [
      10,
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.diagnose.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.diagnose.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "numpy.f2py.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      40
     ]
    },
    "numpy.__version__": {
     "line number": [
      41,
      173
     ]
    },
    "numpy.f2py.f2py2e.f2py_version": {
     "line number": [
      173
     ]
    },
    "numpy.f2py.f2py2e.pprint": {
     "line number": [
      35
     ]
    },
    "numpy.f2py.f2py2e.sys": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.f2py2e.Extension": {
  "data": {
   "shadows": "numpy.distutils.core.Extension"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.__usage__": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "numpy.f2py.f2py2e.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.buildmodules": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": {
    "len": {
     "line number": [
      358,
      370
     ]
    },
    "numpy.f2py.f2py2e.dict_append": {
     "line number": [
      384
     ]
    },
    "numpy.f2py.f2py2e.outmess": {
     "line number": [
      356,
      372,
      381
     ]
    },
    "range": {
     "line number": [
      358,
      370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f2py2e.callcrackfortran": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "numpy.f2py.f2py2e.outmess": {
     "line number": [
      331
     ]
    },
    "numpy.f2py.f2py2e.sys": {
     "line number": [
      334
     ]
    },
    "open": {
     "line number": [
      336
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f2py2e.dict_append": {
  "data": {
   "shadows": "numpy.distutils.misc_util.dict_append"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.errmess": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.f2py.f2py2e.f2py_version": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "numpy.f2py.f2py2e.fcompiler": {
  "data": {
   "shadows": "numpy.distutils.fcompiler"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.filter_files": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "len": {
     "line number": [
      471
     ]
    },
    "match": {
     "line number": [
      475
     ]
    },
    "numpy.f2py.f2py2e.re": {
     "line number": [
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f2py2e.get_f2py_modulename": {
  "data": {
   "shadows": "numpy.distutils.command.build_src.get_f2py_modulename"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.get_info": {
  "data": {
   "shadows": "numpy.distutils.system_info.get_info"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.get_prefix": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": {
    "numpy.f2py.f2py2e.os": {
     "line number": [
      483,
      483
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f2py2e.main": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": {
    "numpy.distutils.system_info.show_all": {
     "line number": [
      662
     ]
    },
    "numpy.f2py.f2py2e.run_compile": {
     "line number": [
      683
     ]
    },
    "numpy.f2py.f2py2e.run_main": {
     "line number": [
      685
     ]
    },
    "numpy.f2py.f2py2e.sys": {
     "line number": [
      659,
      660,
      666,
      667,
      668,
      669,
      670,
      671,
      675,
      676,
      677,
      678,
      682,
      685
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f2py2e.numpy_version": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "numpy.f2py.f2py2e.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.outmess": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "numpy.f2py.f2py2e.pprint": {
  "data": {
   "shadows": "pprint"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.run_compile": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      555
     ]
    },
    "ValueError": {
     "line number": [
      499
     ]
    },
    "len": {
     "line number": [
      546,
      550,
      557,
      565,
      604,
      606,
      608
     ]
    },
    "list": {
     "line number": [
      549
     ]
    },
    "numpy.distutils.command.build_src.get_f2py_modulename": {
     "line number": [
      594
     ]
    },
    "numpy.distutils.core.Extension": {
     "line number": [
      639
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      650
     ]
    },
    "numpy.distutils.fcompiler.fcompiler_class.keys": {
     "line number": [
      549
     ]
    },
    "numpy.distutils.fcompiler.load_all_fcompiler_classes": {
     "line number": [
      548
     ]
    },
    "numpy.distutils.misc_util.dict_append": {
     "line number": [
      637
     ]
    },
    "numpy.distutils.system_info.get_info": {
     "line number": [
      633
     ]
    },
    "numpy.f2py.f2py2e.filter_files": {
     "line number": [
      591,
      598,
      599,
      600,
      601,
      602,
      603
     ]
    },
    "numpy.f2py.f2py2e.os": {
     "line number": [
      652
     ]
    },
    "numpy.f2py.f2py2e.outmess": {
     "line number": [
      635,
      654
     ]
    },
    "numpy.f2py.f2py2e.re": {
     "line number": [
      509,
      515,
      533,
      537,
      567
     ]
    },
    "numpy.f2py.f2py2e.shutil": {
     "line number": [
      655
     ]
    },
    "numpy.f2py.f2py2e.sys": {
     "line number": [
      493,
      494,
      498,
      502,
      503,
      504,
      510,
      511,
      511,
      517,
      518,
      518,
      521,
      532,
      532,
      535,
      536,
      536,
      539,
      540,
      540,
      568,
      569,
      569,
      575,
      578,
      579,
      580,
      581,
      581,
      582,
      584,
      585,
      586,
      587,
      587,
      588,
      640,
      640,
      641,
      646,
      648
     ]
    },
    "numpy.f2py.f2py2e.tempfile": {
     "line number": [
      507
     ]
    },
    "print": {
     "line number": [
      557,
      611
     ]
    },
    "range": {
     "line number": [
      604
     ]
    },
    "repr": {
     "line number": [
      565,
      636
     ]
    },
    "tuple": {
     "line number": [
      609
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f2py2e.run_main": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      451
     ]
    },
    "len": {
     "line number": [
      427,
      433,
      446
     ]
    },
    "numpy.f2py.f2py2e.buildmodules": {
     "line number": [
      457
     ]
    },
    "numpy.f2py.f2py2e.callcrackfortran": {
     "line number": [
      425
     ]
    },
    "numpy.f2py.f2py2e.dict_append": {
     "line number": [
      460
     ]
    },
    "numpy.f2py.f2py2e.errmess": {
     "line number": [
      449
     ]
    },
    "numpy.f2py.f2py2e.os": {
     "line number": [
      420,
      420,
      421,
      422,
      444
     ]
    },
    "numpy.f2py.f2py2e.outmess": {
     "line number": [
      437,
      441,
      443
     ]
    },
    "numpy.f2py.f2py2e.scaninputline": {
     "line number": [
      423
     ]
    },
    "numpy.f2py.f2py2e.sys": {
     "line number": [
      444
     ]
    },
    "range": {
     "line number": [
      427,
      433,
      446
     ]
    },
    "repr": {
     "line number": [
      452
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f2py2e.scaninputline": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      274
     ]
    },
    "numpy.f2py.f2py2e.__usage__": {
     "line number": [
      282
     ]
    },
    "numpy.f2py.f2py2e.errmess": {
     "line number": [
      250,
      275,
      291
     ]
    },
    "numpy.f2py.f2py2e.f2py_version": {
     "line number": [
      236
     ]
    },
    "numpy.f2py.f2py2e.os": {
     "line number": [
      263,
      284,
      287,
      289,
      290
     ]
    },
    "numpy.f2py.f2py2e.outmess": {
     "line number": [
      244,
      286
     ]
    },
    "numpy.f2py.f2py2e.sys": {
     "line number": [
      237,
      251,
      283,
      293
     ]
    },
    "open": {
     "line number": [
      272
     ]
    },
    "print": {
     "line number": [
      236,
      282
     ]
    },
    "repr": {
     "line number": [
      250
     ]
    },
    "str": {
     "line number": [
      276
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f2py2e.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.show": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "numpy.f2py.f2py2e.show_all": {
  "data": {
   "shadows": "numpy.distutils.system_info.show_all"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.f2py2e.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "numpy.f2py.f2py_testing": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.f2py_testing.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.f2py_testing.cmdline": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "eval": {
     "line number": [
      15
     ]
    },
    "numpy.f2py.f2py_testing.re": {
     "line number": [
      10
     ]
    },
    "numpy.f2py.f2py_testing.sys": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f2py_testing.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.f2py_testing.jiffies": {
  "data": {
   "shadows": "numpy.testing.jiffies"
  },
  "type": "import"
 },
 "numpy.f2py.f2py_testing.memusage": {
  "data": {
   "shadows": "numpy.testing.memusage"
  },
  "type": "import"
 },
 "numpy.f2py.f2py_testing.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.f2py_testing.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.f2py.f2py_testing.run": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "len": {
     "line number": [
      44
     ]
    },
    "numpy.testing.jiffies": {
     "line number": [
      26,
      45
     ]
    },
    "numpy.testing.memusage": {
     "line number": [
      24,
      35,
      37,
      43
     ]
    },
    "print": {
     "line number": [
      39,
      44,
      47,
      48
     ]
    },
    "repr": {
     "line number": [
      23
     ]
    },
    "runtest": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f2py_testing.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.f90mod_rules": {
  "data": {
   "symbols_in_volume": {
    "numpy.intp": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.f90mod_rules.__version__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.f2py.f90mod_rules.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.f90mod_rules.buildhooks": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "applyrules": {
     "line number": [
      217
     ]
    },
    "cadd": {
     "line number": [
      133,
      155,
      159,
      162,
      221,
      227
     ]
    },
    "dadd": {
     "line number": [
      134,
      139,
      141,
      164,
      170,
      194,
      259
     ]
    },
    "dictappend": {
     "line number": [
      220
     ]
    },
    "eval": {
     "line number": [
      183
     ]
    },
    "fadd": {
     "line number": [
      178,
      179,
      181,
      184,
      187,
      244,
      245,
      248,
      250,
      251,
      252,
      255,
      256,
      257
     ]
    },
    "hasbody": {
     "line number": [
      111,
      195
     ]
    },
    "hasnote": {
     "line number": [
      135,
      166
     ]
    },
    "iadd": {
     "line number": [
      177,
      192,
      225,
      228,
      235,
      237,
      238,
      240
     ]
    },
    "isallocatable": {
     "line number": [
      171
     ]
    },
    "isfunction": {
     "line number": [
      203
     ]
    },
    "isinstance": {
     "line number": [
      137,
      168
     ]
    },
    "isroutine": {
     "line number": [
      197
     ]
    },
    "isstringarray": {
     "line number": [
      153
     ]
    },
    "l_or": {
     "line number": [
      116
     ]
    },
    "len": {
     "line number": [
      270
     ]
    },
    "list": {
     "line number": [
      137,
      168
     ]
    },
    "numpy.f2py.f90mod_rules.fgetdims1": {
     "line number": [
      182
     ]
    },
    "numpy.f2py.f90mod_rules.fgetdims2": {
     "line number": [
      152
     ]
    },
    "numpy.f2py.f90mod_rules.fgetdims2_sa": {
     "line number": [
      157
     ]
    },
    "numpy.f2py.f90mod_rules.findf90modules": {
     "line number": [
      105
     ]
    },
    "outmess": {
     "line number": [
      119,
      122
     ]
    },
    "print": {
     "line number": [
      198
     ]
    },
    "undo_rmbadname": {
     "line number": [
      247,
      254,
      256,
      264
     ]
    },
    "undo_rmbadname1": {
     "line number": [
      156,
      160,
      163,
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f90mod_rules.buildhooks.cadd": {
  "data": {
   "lineno": 125
  },
  "type": "function"
 },
 "numpy.f2py.f90mod_rules.buildhooks.dadd": {
  "data": {
   "lineno": 103
  },
  "type": "function"
 },
 "numpy.f2py.f90mod_rules.buildhooks.fadd": {
  "data": {
   "lineno": 99
  },
  "type": "function"
 },
 "numpy.f2py.f90mod_rules.buildhooks.iadd": {
  "data": {
   "lineno": 129
  },
  "type": "function"
 },
 "numpy.f2py.f90mod_rules.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.f90mod_rules.f2py_version": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.f2py.f90mod_rules.fgetdims1": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "numpy.f2py.f90mod_rules.fgetdims2": {
  "data": {
   "lineno": 67
  },
  "type": "constant"
 },
 "numpy.f2py.f90mod_rules.fgetdims2_sa": {
  "data": {
   "lineno": 77
  },
  "type": "constant"
 },
 "numpy.f2py.f90mod_rules.findf90modules": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "hasbody": {
     "line number": [
      39
     ]
    },
    "ismodule": {
     "line number": [
      37,
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.f90mod_rules.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.f2py.f90mod_rules.options": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.f2py.f90mod_rules.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.func2subr": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.func2subr.__version__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.f2py.func2subr.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.func2subr.assubr": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": {
    "getfortranname": {
     "line number": [
      268,
      293
     ]
    },
    "isfunction_wrap": {
     "line number": [
      267
     ]
    },
    "isintent_out": {
     "line number": [
      279
     ]
    },
    "issubroutine_wrap": {
     "line number": [
      292
     ]
    },
    "numpy.f2py.func2subr.copy": {
     "line number": [
      272,
      297
     ]
    },
    "numpy.f2py.func2subr.createfuncwrapper": {
     "line number": [
      291
     ]
    },
    "numpy.f2py.func2subr.createsubrwrapper": {
     "line number": [
      298
     ]
    },
    "outmess": {
     "line number": [
      270,
      295
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.func2subr.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "numpy.f2py.func2subr.createfuncwrapper": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "add": {
     "line number": [
      124,
      127,
      129,
      131,
      136,
      142,
      148,
      154,
      159,
      161,
      168,
      169,
      170,
      176,
      178,
      180,
      182
     ]
    },
    "bool": {
     "line number": [
      96
     ]
    },
    "dict": {
     "line number": [
      90
     ]
    },
    "enumerate": {
     "line number": [
      87
     ]
    },
    "getfortranname": {
     "line number": [
      103
     ]
    },
    "isexternal": {
     "line number": [
      141
     ]
    },
    "isfunction": {
     "line number": [
      81
     ]
    },
    "isintent_in": {
     "line number": [
      153
     ]
    },
    "islogicalfunction": {
     "line number": [
      175
     ]
    },
    "ismoduleroutine": {
     "line number": [
      104
     ]
    },
    "isscalar": {
     "line number": [
      147
     ]
    },
    "numpy.f2py.func2subr.var2fixfortran": {
     "line number": [
      113,
      148,
      154,
      159
     ]
    },
    "vars": {
     "line number": [
      84,
      93,
      107,
      108,
      108,
      113,
      119,
      141,
      147,
      148,
      153,
      154,
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.func2subr.createfuncwrapper.add": {
  "data": {
   "lineno": 100
  },
  "type": "function"
 },
 "numpy.f2py.func2subr.createsubrwrapper": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "add": {
     "line number": [
      216,
      219,
      221,
      223,
      228,
      233,
      239,
      244,
      251,
      252,
      253,
      258,
      260,
      262
     ]
    },
    "bool": {
     "line number": [
      202
     ]
    },
    "dict": {
     "line number": [
      196
     ]
    },
    "enumerate": {
     "line number": [
      193
     ]
    },
    "getfortranname": {
     "line number": [
      209
     ]
    },
    "isexternal": {
     "line number": [
      232
     ]
    },
    "ismoduleroutine": {
     "line number": [
      210
     ]
    },
    "isscalar": {
     "line number": [
      238
     ]
    },
    "issubroutine": {
     "line number": [
      187
     ]
    },
    "numpy.f2py.func2subr.var2fixfortran": {
     "line number": [
      239,
      244
     ]
    },
    "vars": {
     "line number": [
      190,
      199,
      232,
      238,
      239,
      244
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.func2subr.createsubrwrapper.add": {
  "data": {
   "lineno": 206
  },
  "type": "function"
 },
 "numpy.f2py.func2subr.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.func2subr.f2py_version": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.f2py.func2subr.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.func2subr.var2fixfortran": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "outmess": {
     "line number": [
      36,
      40
     ]
    },
    "show": {
     "line number": [
      35,
      39
     ]
    },
    "vars": {
     "line number": [
      34,
      35,
      38,
      39,
      42,
      43,
      44,
      47,
      48,
      50,
      51,
      75,
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.info": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.info.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.info.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.info.postpone_import": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.f2py.info.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.main": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.f2py.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.f2py.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.rules": {
  "data": {
   "symbols_in_volume": {
    "gentitle": {
     "line number": [
      125,
      129,
      133,
      136,
      139,
      142,
      145,
      148,
      154,
      157,
      160,
      163,
      166,
      168,
      171
     ]
    },
    "int": {
     "line number": [
      110
     ]
    },
    "l_and": {
     "line number": [
      400,
      401,
      406,
      407,
      409,
      425,
      508,
      515,
      519,
      521,
      522,
      525,
      526,
      547,
      549,
      558,
      563,
      599,
      639,
      646,
      673,
      675,
      723,
      724,
      726,
      728,
      731,
      732,
      739,
      745,
      844,
      847,
      859,
      879,
      891,
      896,
      900,
      921,
      924,
      930,
      934,
      937,
      980,
      982,
      1008,
      1011,
      1022,
      1025,
      1037,
      1076,
      1085,
      1087,
      1132
     ]
    },
    "l_not": {
     "line number": [
      264,
      387,
      392,
      400,
      400,
      401,
      401,
      405,
      406,
      406,
      407,
      409,
      409,
      420,
      425,
      428,
      432,
      435,
      447,
      456,
      466,
      470,
      473,
      485,
      494,
      504,
      515,
      519,
      521,
      521,
      522,
      522,
      525,
      525,
      526,
      526,
      530,
      543,
      549,
      551,
      555,
      557,
      558,
      558,
      561,
      563,
      599,
      639,
      646,
      673,
      675,
      739,
      765,
      776,
      781,
      818,
      842,
      844,
      847,
      859,
      879,
      881,
      890,
      891,
      896,
      900,
      906,
      924,
      1073,
      1076,
      1085,
      1087,
      1132
     ]
    },
    "l_or": {
     "line number": [
      400,
      405,
      409,
      420,
      428,
      432,
      435,
      447,
      456,
      466,
      470,
      473,
      485,
      494,
      521,
      525,
      543,
      557,
      561,
      1073
     ]
    },
    "numpy.f2py.rules.__version__": {
     "line number": [
      58
     ]
    },
    "numpy.f2py.rules.generationtime": {
     "line number": [
      117
     ]
    },
    "numpy.f2py.rules.os": {
     "line number": [
      110
     ]
    },
    "numpy.f2py.rules.sepdict": {
     "line number": [
      106,
      269,
      626,
      712
     ]
    },
    "numpy.f2py.rules.time": {
     "line number": [
      110,
      117,
      117
     ]
    },
    "numpy.f2py.rules.typedef_need_dict": {
     "line number": [
      632,
      719,
      895
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.rules.__version__": {
  "data": {
   "lineno": 55
  },
  "type": "constant"
 },
 "numpy.f2py.rules.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.rules.arg_rules": {
  "data": {
   "lineno": 710
  },
  "type": "constant"
 },
 "numpy.f2py.rules.aux_rules": {
  "data": {
   "lineno": 624
  },
  "type": "constant"
 },
 "numpy.f2py.rules.buildapi": {
  "data": {
   "lineno": 1345,
   "symbols_in_volume": {
    "applyrules": {
     "line number": [
      1361,
      1387,
      1401,
      1408,
      1465
     ]
    },
    "dictappend": {
     "line number": [
      1358,
      1362,
      1388,
      1402,
      1409
     ]
    },
    "getargs2": {
     "line number": [
      1347
     ]
    },
    "isinstance": {
     "line number": [
      1410,
      1412,
      1441,
      1447,
      1450,
      1458,
      1461
     ]
    },
    "isintent_aux": {
     "line number": [
      1369,
      1392
     ]
    },
    "isintent_hide": {
     "line number": [
      1373
     ]
    },
    "ismoduleroutine": {
     "line number": [
      1351,
      1466
     ]
    },
    "isoptional": {
     "line number": [
      1374
     ]
    },
    "len": {
     "line number": [
      1435
     ]
    },
    "list": {
     "line number": [
      1410,
      1412,
      1441,
      1447,
      1450,
      1458
     ]
    },
    "numpy.f2py.rules.arg_rules": {
     "line number": [
      1372,
      1395
     ]
    },
    "numpy.f2py.rules.aux_rules": {
     "line number": [
      1370,
      1393
     ]
    },
    "numpy.f2py.rules.check_rules": {
     "line number": [
      1408
     ]
    },
    "numpy.f2py.rules.rout_rules": {
     "line number": [
      1359
     ]
    },
    "numpy.f2py.rules.routine_rules": {
     "line number": [
      1465
     ]
    },
    "numpy.f2py.rules.stnd": {
     "line number": [
      1376,
      1379
     ]
    },
    "outmess": {
     "line number": [
      1352,
      1355,
      1467,
      1469
     ]
    },
    "replace": {
     "line number": [
      1414,
      1418,
      1424,
      1426,
      1433,
      1436,
      1443
     ]
    },
    "repr": {
     "line number": [
      1376,
      1379,
      1461
     ]
    },
    "str": {
     "line number": [
      1461
     ]
    },
    "stripcomma": {
     "line number": [
      1414,
      1418,
      1423,
      1433,
      1436,
      1442
     ]
    },
    "type": {
     "line number": [
      1462
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.rules.buildmodule": {
  "data": {
   "lineno": 1158,
   "symbols_in_volume": {
    "applyrules": {
     "line number": [
      1200,
      1207,
      1214,
      1254,
      1256
     ]
    },
    "dictappend": {
     "line number": [
      1167,
      1201,
      1208,
      1215,
      1219,
      1255
     ]
    },
    "errmess": {
     "line number": [
      1174,
      1182,
      1248
     ]
    },
    "ismoduleroutine": {
     "line number": [
      1196
     ]
    },
    "len": {
     "line number": [
      1302,
      1324,
      1327
     ]
    },
    "numpy.f2py.rules.buildapi": {
     "line number": [
      1194
     ]
    },
    "numpy.f2py.rules.copy": {
     "line number": [
      1188
     ]
    },
    "numpy.f2py.rules.defmod_rules": {
     "line number": [
      1165
     ]
    },
    "numpy.f2py.rules.f2py_version": {
     "line number": [
      1167,
      1280,
      1296,
      1319
     ]
    },
    "numpy.f2py.rules.module_rules": {
     "line number": [
      1256
     ]
    },
    "numpy.f2py.rules.options": {
     "line number": [
      1258,
      1265,
      1267,
      1273,
      1274,
      1276,
      1281,
      1285,
      1289,
      1291,
      1314
     ]
    },
    "numpy.f2py.rules.os": {
     "line number": [
      1258,
      1266,
      1275,
      1291,
      1313
     ]
    },
    "open": {
     "line number": [
      1260,
      1268,
      1278,
      1293,
      1316
     ]
    },
    "outmess": {
     "line number": [
      1163,
      1263,
      1272,
      1288,
      1311,
      1336
     ]
    },
    "repr": {
     "line number": [
      1248
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.rules.check_rules": {
  "data": {
   "lineno": 1124
  },
  "type": "constant"
 },
 "numpy.f2py.rules.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "numpy.f2py.rules.defmod_rules": {
  "data": {
   "lineno": 254
  },
  "type": "constant"
 },
 "numpy.f2py.rules.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.rules.f2py_version": {
  "data": {
   "lineno": 58
  },
  "type": "constant"
 },
 "numpy.f2py.rules.generationtime": {
  "data": {
   "lineno": 110
  },
  "type": "constant"
 },
 "numpy.f2py.rules.module_rules": {
  "data": {
   "lineno": 111
  },
  "type": "constant"
 },
 "numpy.f2py.rules.options": {
  "data": {
   "lineno": 88
  },
  "type": "constant"
 },
 "numpy.f2py.rules.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.rules.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.rules.rout_rules": {
  "data": {
   "lineno": 348
  },
  "type": "constant"
 },
 "numpy.f2py.rules.routine_rules": {
  "data": {
   "lineno": 268
  },
  "type": "constant"
 },
 "numpy.f2py.rules.sepdict": {
  "data": {
   "lineno": 89
  },
  "type": "constant"
 },
 "numpy.f2py.rules.stnd": {
  "data": {
   "lineno": 1341
  },
  "type": "constant"
 },
 "numpy.f2py.rules.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "numpy.f2py.rules.typedef_need_dict": {
  "data": {
   "lineno": 611
  },
  "type": "constant"
 },
 "numpy.f2py.run_main": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.f2py.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      37
     ]
    },
    "__version__.version": {
     "line number": [
      57
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      57
     ]
    },
    "numpy.f2py.setup.config": {
     "line number": [
      42,
      44,
      73
     ]
    },
    "numpy.f2py.setup.configuration": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.f2py.setup.config": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "numpy.f2py.setup.configuration": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.f2py.setup.version": {
  "data": {
   "shadows": "__version__.version"
  },
  "type": "import"
 },
 "numpy.f2py.shlex": {
  "data": {
   "shadows": "shlex"
  },
  "type": "import"
 },
 "numpy.f2py.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.f2py.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "numpy.f2py.test": {
  "data": {
   "lineno": 120
  },
  "type": "constant"
 },
 "numpy.f2py.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_array_from_pyobj": {
  "data": {
   "symbols_in_volume": {
    "numpy.clongdouble": {
     "line number": [
      124
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.Intent": {
     "line number": [
      93
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj._cast_dict": {
     "line number": [
      100,
      100,
      101,
      101,
      102,
      103,
      104,
      104,
      105,
      105,
      106,
      106,
      107,
      107,
      109,
      109,
      110,
      110,
      112,
      112,
      113,
      113,
      115,
      115,
      116,
      116,
      118,
      118,
      127,
      127,
      129,
      129,
      131,
      131
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj._type_names": {
     "line number": [
      126
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.sys": {
     "line number": [
      125
     ]
    },
    "numpy.intp": {
     "line number": [
      124
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Array": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "object": {
     "line number": [
      195
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Array.__init__": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      215
     ]
    },
    "isinstance": {
     "line number": [
      207,
      230,
      271
     ]
    },
    "len": {
     "line number": [
      211,
      240
     ]
    },
    "numpy.array": {
     "line number": [
      231,
      233,
      233
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.Type": {
     "line number": [
      272
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.copy": {
     "line number": [
      201
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.flags2names": {
     "line number": [
      260,
      261
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      200,
      205,
      213,
      219,
      229,
      237,
      261,
      263,
      273
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.wrap": {
     "line number": [
      205,
      209,
      213,
      217,
      219,
      222,
      238,
      244,
      248
     ]
    },
    "numpy.ndarray": {
     "line number": [
      207,
      230,
      271
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      207,
      213,
      214,
      216,
      217,
      219,
      220,
      221,
      222,
      230,
      235,
      237,
      242,
      243,
      244,
      246,
      247,
      248,
      250,
      251,
      253,
      256,
      258,
      264,
      267,
      269,
      274
     ]
    },
    "repr": {
     "line number": [
      207,
      215,
      230,
      236,
      254,
      257,
      259,
      265,
      268
     ]
    },
    "type": {
     "line number": [
      207,
      230
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Array.__str__": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "str": {
     "line number": [
      283
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Array.arr_equal": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": {
    "numpy.alltrue": {
     "line number": [
      280
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      290
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.wrap": {
     "line number": [
      292
     ]
    },
    "numpy.ndarray": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Intent": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "object": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Intent.__getattr__": {
  "data": {
   "lineno": 72
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      69
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.wrap": {
     "line number": [
      67,
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Intent.__repr__": {
  "data": {
   "lineno": 81
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Intent.__str__": {
  "data": {
   "lineno": 78
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent": {
  "data": {
   "lineno": 84
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent_exact": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "len": {
     "line number": [
      91,
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestIntent": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": {
    "object": {
     "line number": [
      296
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestIntent.test_in_out": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      299,
      300,
      301,
      302,
      303,
      304
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      300,
      301,
      302,
      303,
      304
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      299
     ]
    },
    "str": {
     "line number": [
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "object": {
     "line number": [
      307
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.setup_type": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_array_from_pyobj.Array": {
     "line number": [
      315
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.Type": {
     "line number": [
      313,
      315
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj._type_names": {
     "line number": [
      311
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      315
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.pytest": {
     "line number": [
      311
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_copy_in_from_23casttype": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": {
    "len": {
     "line number": [
      417,
      417
     ]
    },
    "numpy.array": {
     "line number": [
      416
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      418
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      419
     ]
    },
    "repr": {
     "line number": [
      419
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_in_from_23casttype": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": {
    "len": {
     "line number": [
      400,
      400
     ]
    },
    "numpy.array": {
     "line number": [
      399
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      401
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      403,
      405
     ]
    },
    "repr": {
     "line number": [
      403,
      405
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_in_from_23seq": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": {
    "len": {
     "line number": [
      376,
      376
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      377
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      378
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_inout_23seq": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": {
    "len": {
     "line number": [
      365,
      365
     ]
    },
    "numpy.array": {
     "line number": [
      364
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      366
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      367
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_cache_hidden": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": {
    "SystemError": {
     "line number": [
      483
     ]
    },
    "ValueError": {
     "line number": [
      478
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      468,
      472,
      477
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      469,
      473
     ]
    },
    "str": {
     "line number": [
      479
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_f_copy_in_from_23casttype": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": {
    "len": {
     "line number": [
      410,
      410
     ]
    },
    "numpy.array": {
     "line number": [
      409
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      411
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      412
     ]
    },
    "repr": {
     "line number": [
      412
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_f_in_from_23casttype": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": {
    "len": {
     "line number": [
      390,
      390
     ]
    },
    "numpy.array": {
     "line number": [
      389
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      391
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      393,
      395
     ]
    },
    "repr": {
     "line number": [
      393,
      395
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_f_inout_23seq": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": {
    "SystemError": {
     "line number": [
      360
     ]
    },
    "ValueError": {
     "line number": [
      355
     ]
    },
    "len": {
     "line number": [
      347,
      347,
      352,
      352
     ]
    },
    "numpy.array": {
     "line number": [
      346,
      351
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      348,
      354
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      349
     ]
    },
    "str": {
     "line number": [
      356
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_hidden": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": {
    "SystemError": {
     "line number": [
      512
     ]
    },
    "ValueError": {
     "line number": [
      507
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      488,
      493,
      499,
      506
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      489,
      490,
      494,
      495,
      496,
      500,
      501,
      502
     ]
    },
    "numpy.zeros": {
     "line number": [
      490,
      495,
      501
     ]
    },
    "str": {
     "line number": [
      508
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_cache_from_2casttype": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": {
    "SystemError": {
     "line number": [
      447
     ]
    },
    "ValueError": {
     "line number": [
      442
     ]
    },
    "len": {
     "line number": [
      426
     ]
    },
    "numpy.array": {
     "line number": [
      425,
      433
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      427,
      430,
      434,
      437,
      441
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      428,
      431,
      435,
      438
     ]
    },
    "repr": {
     "line number": [
      428,
      431,
      435,
      438
     ]
    },
    "str": {
     "line number": [
      443
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_cache_from_2casttype_failure": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": {
    "SystemError": {
     "line number": [
      463
     ]
    },
    "ValueError": {
     "line number": [
      458
     ]
    },
    "len": {
     "line number": [
      455
     ]
    },
    "numpy.array": {
     "line number": [
      454
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      457
     ]
    },
    "str": {
     "line number": [
      459
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_copy_from_2casttype": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": {
    "len": {
     "line number": [
      372
     ]
    },
    "numpy.array": {
     "line number": [
      371
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      372
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      373
     ]
    },
    "repr": {
     "line number": [
      373
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_from_23casttype": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": {
    "len": {
     "line number": [
      383,
      383
     ]
    },
    "numpy.array": {
     "line number": [
      382
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      384
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      385
     ]
    },
    "repr": {
     "line number": [
      385
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_from_2casttype": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": {
    "len": {
     "line number": [
      324
     ]
    },
    "numpy.array": {
     "line number": [
      323
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      324
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      326,
      329
     ]
    },
    "repr": {
     "line number": [
      327,
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_from_2seq": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      318
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      319
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_inout_2seq": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "SystemError": {
     "line number": [
      343
     ]
    },
    "TypeError": {
     "line number": [
      338
     ]
    },
    "len": {
     "line number": [
      333
     ]
    },
    "numpy.array": {
     "line number": [
      332
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      333,
      337
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      334
     ]
    },
    "str": {
     "line number": [
      339
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_inplace": {
  "data": {
   "lineno": 551,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      552,
      559
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      555
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      553,
      556,
      558,
      560,
      561,
      562
     ]
    },
    "repr": {
     "line number": [
      556,
      559
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_inplace_from_casttype": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      568,
      577
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      573
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      569,
      570,
      571,
      574,
      576,
      578,
      579,
      580,
      581
     ]
    },
    "repr": {
     "line number": [
      574,
      577
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_optional_from_23seq": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": {
    "len": {
     "line number": [
      542,
      542
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      543,
      547
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      544,
      545,
      548,
      549
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_optional_from_2seq": {
  "data": {
   "lineno": 533,
   "symbols_in_volume": {
    "len": {
     "line number": [
      535
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      536
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      537,
      538
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_optional_none": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_array_from_pyobj.intent": {
     "line number": [
      517,
      522,
      528
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      518,
      519,
      523,
      524,
      525,
      529,
      530,
      531
     ]
    },
    "numpy.zeros": {
     "line number": [
      519,
      524,
      530
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Type": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "object": {
     "line number": [
      134
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Type.__new__": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      138,
      142
     ]
    },
    "numpy.core.multiarray.typeinfo.items": {
     "line number": [
      141
     ]
    },
    "numpy.dtype": {
     "line number": [
      138
     ]
    },
    "object.__new__": {
     "line number": [
      148
     ]
    },
    "type": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Type._init": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      156
     ]
    },
    "numpy.core.multiarray.typeinfo": {
     "line number": [
      155
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.wrap": {
     "line number": [
      156
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Type.all_types": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_array_from_pyobj._type_names": {
     "line number": [
      166
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Type.cast_types": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_array_from_pyobj._cast_dict": {
     "line number": [
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Type.equal_types": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "numpy.core.multiarray.typeinfo.alignment": {
     "line number": [
      177,
      182
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.Type": {
     "line number": [
      183
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj._type_names": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Type.larger_types": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "numpy.core.multiarray.typeinfo.alignment": {
     "line number": [
      187,
      190
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.Type": {
     "line number": [
      191
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj._type_names": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.Type.smaller_types": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "numpy.core.multiarray.typeinfo.alignment": {
     "line number": [
      169,
      172
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.Type": {
     "line number": [
      173
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj._type_names": {
     "line number": [
      171
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj._cast_dict": {
  "data": {
   "lineno": 99
  },
  "type": "constant"
 },
 "numpy.f2py.tests.test_array_from_pyobj._type_names": {
  "data": {
   "lineno": 95
  },
  "type": "constant"
 },
 "numpy.f2py.tests.test_array_from_pyobj.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.alltrue": {
  "data": {
   "shadows": "numpy.alltrue"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.clongdouble": {
  "data": {
   "shadows": "numpy.clongdouble"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.dtype": {
  "data": {
   "shadows": "numpy.dtype"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.flags2names": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      55
     ]
    },
    "getattr": {
     "line number": [
      55
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.wrap": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.flags_info": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_array_from_pyobj.flags2names": {
     "line number": [
      45
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.wrap": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.intent": {
  "data": {
   "lineno": 93
  },
  "type": "constant"
 },
 "numpy.f2py.tests.test_array_from_pyobj.intp": {
  "data": {
   "shadows": "numpy.intp"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.ndarray": {
  "data": {
   "shadows": "numpy.ndarray"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.setup_module": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_array_from_pyobj.os": {
     "line number": [
      35,
      36,
      37,
      38
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.pytest": {
     "line number": [
      27
     ]
    },
    "numpy.f2py.tests.test_array_from_pyobj.wrap": {
     "line number": [
      29,
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_array_from_pyobj.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.typeinfo": {
  "data": {
   "shadows": "numpy.core.multiarray.typeinfo"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_array_from_pyobj.wrap": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.f2py.tests.test_array_from_pyobj.zeros": {
  "data": {
   "shadows": "numpy.zeros"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_assumed_shape": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_assumed_shape.TestAssumedShapeSumExample": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_assumed_shape._path": {
     "line number": [
      15,
      16,
      17,
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_assumed_shape.TestAssumedShapeSumExample.test_all": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_assumed_shape.pytest": {
     "line number": [
      21
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      24,
      26,
      28,
      31,
      33
     ]
    },
    "repr": {
     "line number": [
      24,
      26,
      28,
      31,
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_assumed_shape._path": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_assumed_shape.os": {
     "line number": [
      11,
      11
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_assumed_shape.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_assumed_shape.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_assumed_shape.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_assumed_shape.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_assumed_shape.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_assumed_shape.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_block_docstring": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_block_docstring.TestBlockDocString": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_block_docstring.TestBlockDocString.test_block_docstring": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_block_docstring.pytest": {
     "line number": [
      19
     ]
    },
    "numpy.f2py.tests.test_block_docstring.sys": {
     "line number": [
      19
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_block_docstring.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_block_docstring.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_block_docstring.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_block_docstring.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_block_docstring.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_block_docstring.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_callback": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_callback.TestF77Callback": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_callback.TestF77Callback.check_function": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "A": {
     "line number": [
      128
     ]
    },
    "getattr": {
     "line number": [
      100
     ]
    },
    "numpy.f2py.tests.test_callback.math": {
     "line number": [
      109,
      109,
      111,
      111
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      102,
      104,
      106,
      108,
      110,
      112,
      115,
      117,
      119,
      130,
      132
     ]
    },
    "repr": {
     "line number": [
      102,
      104,
      106,
      108,
      110,
      112,
      115,
      117,
      119,
      130,
      132
     ]
    },
    "t": {
     "line number": [
      101,
      103,
      105,
      107,
      109,
      111,
      114,
      116,
      118,
      129,
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "object": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A.__call__": {
  "data": {
   "lineno": 123
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A.mth": {
  "data": {
   "lineno": 126
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_callback.TestF77Callback.test_all": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_callback.pytest": {
     "line number": [
      64,
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_callback.TestF77Callback.test_docstring": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_callback.pytest": {
     "line number": [
      69
     ]
    },
    "numpy.f2py.tests.test_callback.textwrap": {
     "line number": [
      97
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "f": {
     "line number": [
      145
     ]
    },
    "getattr": {
     "line number": [
      144
     ]
    },
    "numpy.f2py.tests.test_callback.pytest": {
     "line number": [
      134
     ]
    },
    "numpy.f2py.tests.test_callback.sys": {
     "line number": [
      134
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      146
     ]
    },
    "repr": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback.callback": {
  "data": {
   "lineno": 138
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback_array": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "f": {
     "line number": [
      163,
      164
     ]
    },
    "getattr": {
     "line number": [
      163
     ]
    },
    "len": {
     "line number": [
      164
     ]
    },
    "numpy.f2py.tests.test_callback.pytest": {
     "line number": [
      148
     ]
    },
    "numpy.f2py.tests.test_callback.sys": {
     "line number": [
      148
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      165
     ]
    },
    "numpy.zeros": {
     "line number": [
      152
     ]
    },
    "repr": {
     "line number": [
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback_array.callback": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_callback.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_callback.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_callback.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_callback.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_callback.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_callback.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_callback.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_callback.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_callback.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_callback.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_common": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_common.TestCommonBlock": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_common._path": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_common.TestCommonBlock.test_common_block": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      23,
      25,
      27
     ]
    },
    "numpy.f2py.tests.test_common.pytest": {
     "line number": [
      18
     ]
    },
    "numpy.f2py.tests.test_common.sys": {
     "line number": [
      18
     ]
    },
    "numpy.float64": {
     "line number": [
      23
     ]
    },
    "numpy.int32": {
     "line number": [
      27
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      22,
      24,
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_common._path": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_common.os": {
     "line number": [
      13,
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_common.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_common.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_common.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_common.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_common.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_common.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_common.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_common.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_compile_function": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_compile_function.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_compile_function.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_compile_function.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_compile_function.import_module": {
  "data": {
   "shadows": "importlib.import_module"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_compile_function.numpy.f2py": {
  "data": {
   "shadows": "numpy.f2py"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_compile_function.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_compile_function.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_compile_function.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_compile_function.setup_module": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_compile_function.pytest": {
     "line number": [
      20,
      22,
      24
     ]
    },
    "numpy.f2py.tests.test_compile_function.sys": {
     "line number": [
      19,
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_compile_function.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_compile_function.test_compile_from_strings": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_compile_function.os": {
     "line number": [
      116,
      118,
      125
     ]
    },
    "numpy.f2py.tests.test_compile_function.pytest": {
     "line number": [
      111
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      123
     ]
    },
    "str": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_compile_function.test_f2py_init_compile": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "importlib.import_module": {
     "line number": [
      81
     ]
    },
    "numpy.f2py.tests.test_compile_function.os": {
     "line number": [
      50,
      51,
      61,
      69
     ]
    },
    "numpy.f2py.tests.test_compile_function.pytest": {
     "line number": [
      29
     ]
    },
    "numpy.f2py.tests.test_compile_function.sys": {
     "line number": [
      77
     ]
    },
    "numpy.f2py.tests.test_compile_function.uuid": {
     "line number": [
      51
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      72,
      83
     ]
    },
    "str": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_compile_function.test_f2py_init_compile_bad_cmd": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_compile_function.sys": {
     "line number": [
      101,
      102,
      108
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_compile_function.test_f2py_init_compile_failure": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_compile_function.uuid": {
  "data": {
   "shadows": "uuid"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_kind": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_kind.TestKind": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_kind._path": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_kind.TestKind.test_all": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "numpy.f2py.crackfortran._selected_int_kind_func": {
     "line number": [
      27,
      29
     ]
    },
    "numpy.f2py.crackfortran._selected_real_kind_func": {
     "line number": [
      32,
      34
     ]
    },
    "numpy.f2py.tests.test_kind.pytest": {
     "line number": [
      21
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      27,
      32
     ]
    },
    "range": {
     "line number": [
      26,
      31
     ]
    },
    "selectedintkind": {
     "line number": [
      27,
      29
     ]
    },
    "selectedrealkind": {
     "line number": [
      32,
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_kind._path": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_kind.os": {
     "line number": [
      15,
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_kind.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_kind.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_kind.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_kind.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_kind.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_kind.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_kind.selected_int_kind": {
  "data": {
   "shadows": "numpy.f2py.crackfortran._selected_int_kind_func"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_kind.selected_real_kind": {
  "data": {
   "shadows": "numpy.f2py.crackfortran._selected_real_kind_func"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_mixed": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_mixed.TestMixed": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_mixed._path": {
     "line number": [
      16,
      17,
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_mixed.TestMixed.test_all": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_mixed.pytest": {
     "line number": [
      20
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      22,
      23,
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_mixed.TestMixed.test_docstring": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_mixed.pytest": {
     "line number": [
      26
     ]
    },
    "numpy.f2py.tests.test_mixed.textwrap": {
     "line number": [
      38
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_mixed._path": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_mixed.os": {
     "line number": [
      12,
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_mixed.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_mixed.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_mixed.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_mixed.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_mixed.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_mixed.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_mixed.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_mixed.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_parameter": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_parameter.TestParameters": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_parameter._path": {
     "line number": [
      18,
      19,
      20,
      21,
      22
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_parameter.TestParameters.test_constant_both": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      91
     ]
    },
    "numpy.arange": {
     "line number": [
      90,
      94
     ]
    },
    "numpy.f2py.tests.test_parameter.pytest": {
     "line number": [
      87
     ]
    },
    "numpy.float64": {
     "line number": [
      90,
      94
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      96
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_parameter.TestParameters.test_constant_compound_int": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      51
     ]
    },
    "numpy.arange": {
     "line number": [
      50,
      54
     ]
    },
    "numpy.f2py.tests.test_parameter.pytest": {
     "line number": [
      47
     ]
    },
    "numpy.int32": {
     "line number": [
      50,
      54
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      56
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_parameter.TestParameters.test_constant_integer_int": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      69
     ]
    },
    "numpy.arange": {
     "line number": [
      68,
      72
     ]
    },
    "numpy.f2py.tests.test_parameter.pytest": {
     "line number": [
      65
     ]
    },
    "numpy.int32": {
     "line number": [
      68,
      72
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      74
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_parameter.TestParameters.test_constant_integer_long": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      80
     ]
    },
    "numpy.arange": {
     "line number": [
      79,
      83
     ]
    },
    "numpy.f2py.tests.test_parameter.pytest": {
     "line number": [
      76
     ]
    },
    "numpy.int64": {
     "line number": [
      79,
      83
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      85
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_parameter.TestParameters.test_constant_no": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      102
     ]
    },
    "numpy.arange": {
     "line number": [
      101,
      105
     ]
    },
    "numpy.f2py.tests.test_parameter.pytest": {
     "line number": [
      98
     ]
    },
    "numpy.float64": {
     "line number": [
      101,
      105
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      107
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_parameter.TestParameters.test_constant_non_compound_int": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      61
     ]
    },
    "numpy.f2py.tests.test_parameter.pytest": {
     "line number": [
      58
     ]
    },
    "numpy.int32": {
     "line number": [
      61
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_parameter.TestParameters.test_constant_real_double": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      40
     ]
    },
    "numpy.arange": {
     "line number": [
      39,
      43
     ]
    },
    "numpy.f2py.tests.test_parameter.pytest": {
     "line number": [
      36
     ]
    },
    "numpy.float64": {
     "line number": [
      39,
      43
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      45
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_parameter.TestParameters.test_constant_real_single": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      29
     ]
    },
    "numpy.arange": {
     "line number": [
      28,
      32
     ]
    },
    "numpy.f2py.tests.test_parameter.pytest": {
     "line number": [
      25
     ]
    },
    "numpy.float32": {
     "line number": [
      28,
      32
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      34
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_parameter.TestParameters.test_constant_sum": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      113
     ]
    },
    "numpy.arange": {
     "line number": [
      112,
      116
     ]
    },
    "numpy.f2py.tests.test_parameter.pytest": {
     "line number": [
      109
     ]
    },
    "numpy.float64": {
     "line number": [
      112,
      116
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      118
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_parameter._path": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_parameter.os": {
     "line number": [
      13,
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_parameter.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_parameter.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_parameter.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_parameter.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_parameter.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_parameter.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_parameter.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_parameter.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_quoted_character": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_quoted_character.TestQuotedCharacter": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_quoted_character.TestQuotedCharacter.test_quoted_character": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_quoted_character.pytest": {
     "line number": [
      32
     ]
    },
    "numpy.f2py.tests.test_quoted_character.sys": {
     "line number": [
      32
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_quoted_character.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_quoted_character.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_quoted_character.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_quoted_character.import_module": {
  "data": {
   "shadows": "importlib.import_module"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_quoted_character.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_quoted_character.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_quoted_character.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_regression": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_regression.TestIntentInOut": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_regression._path": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_regression.TestIntentInOut.test_inout": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      24
     ]
    },
    "numpy.arange": {
     "line number": [
      23,
      27
     ]
    },
    "numpy.f2py.tests.test_regression.pytest": {
     "line number": [
      20
     ]
    },
    "numpy.float32": {
     "line number": [
      23,
      27
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      29
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_regression._path": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_regression.os": {
     "line number": [
      13,
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_regression.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_regression.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_regression.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_regression.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_regression.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_regression.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_regression.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_character": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_return_character.TestF77ReturnCharacter": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_return_character.TestReturnCharacter": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_character.TestF77ReturnCharacter.test_all": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      87
     ]
    },
    "numpy.f2py.tests.test_return_character.pytest": {
     "line number": [
      84,
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_character.TestF90ReturnCharacter": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_return_character.TestReturnCharacter": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_character.TestF90ReturnCharacter.test_all": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      146
     ]
    },
    "numpy.f2py.tests.test_return_character.pytest": {
     "line number": [
      143,
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_character.TestReturnCharacter": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_character.TestReturnCharacter.check_function": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      32
     ]
    },
    "numpy.array": {
     "line number": [
      18,
      20
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      15,
      17,
      19,
      21,
      25,
      26,
      28,
      29,
      30
     ]
    },
    "repr": {
     "line number": [
      17,
      19,
      21,
      25,
      28,
      29
     ]
    },
    "t": {
     "line number": [
      15,
      16,
      18,
      20,
      25,
      25,
      26,
      28,
      28,
      29,
      29,
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_character.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_character.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_character.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_character.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_character.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_character.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_complex": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_return_complex.TestF77ReturnComplex": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_return_complex.TestReturnComplex": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_complex.TestF77ReturnComplex.test_all": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      110
     ]
    },
    "numpy.f2py.tests.test_return_complex.pytest": {
     "line number": [
      107,
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_complex.TestF90ReturnComplex": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_return_complex.TestReturnComplex": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_complex.TestF90ReturnComplex.test_all": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      169
     ]
    },
    "numpy.f2py.tests.test_return_complex.pytest": {
     "line number": [
      166,
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_complex.TestReturnComplex": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_complex.TestReturnComplex.check_function": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      45,
      46
     ]
    },
    "OverflowError": {
     "line number": [
      54
     ]
    },
    "TypeError": {
     "line number": [
      43,
      48,
      49
     ]
    },
    "abs": {
     "line number": [
      19,
      20,
      21,
      22,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40
     ]
    },
    "numpy.array": {
     "line number": [
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40
     ]
    },
    "numpy.compat.long": {
     "line number": [
      21
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      19,
      20,
      21,
      22,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      53
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      43,
      45,
      46,
      48,
      49
     ]
    },
    "repr": {
     "line number": [
      53,
      53
     ]
    },
    "t": {
     "line number": [
      19,
      20,
      21,
      22,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      43,
      45,
      46,
      48,
      48,
      49,
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_complex.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_complex.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_complex.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_complex.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_complex.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_complex.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_complex.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_complex.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_integer": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_return_integer.TestF77ReturnInteger": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_return_integer.TestReturnInteger": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_integer.TestF77ReturnInteger.test_all": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      110
     ]
    },
    "numpy.f2py.tests.test_return_integer.pytest": {
     "line number": [
      106,
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_integer.TestF90ReturnInteger": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_return_integer.TestReturnInteger": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_integer.TestF90ReturnInteger.test_all": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      181
     ]
    },
    "numpy.f2py.tests.test_return_integer.pytest": {
     "line number": [
      177,
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_integer.TestReturnInteger": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_integer.TestReturnInteger.check_function": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      38,
      39
     ]
    },
    "IndexError": {
     "line number": [
      35,
      36
     ]
    },
    "OverflowError": {
     "line number": [
      42,
      43
     ]
    },
    "ValueError": {
     "line number": [
      33
     ]
    },
    "numpy.array": {
     "line number": [
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30
     ]
    },
    "numpy.compat.long": {
     "line number": [
      16
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      33,
      35,
      36,
      38,
      39,
      42,
      43
     ]
    },
    "repr": {
     "line number": [
      14
     ]
    },
    "t": {
     "line number": [
      14,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      33,
      35,
      36,
      38,
      38,
      39,
      42,
      43
     ]
    },
    "t.__doc__.split": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_integer.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_integer.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_integer.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_integer.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_integer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_integer.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_integer.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_integer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_logical": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_return_logical.TestF77ReturnLogical": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_return_logical.TestReturnLogical": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_logical.TestF77ReturnLogical.test_all": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      118
     ]
    },
    "numpy.f2py.tests.test_return_logical.pytest": {
     "line number": [
      115,
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_logical.TestF90ReturnLogical": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_return_logical.TestReturnLogical": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_logical.TestF90ReturnLogical.test_all": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      189
     ]
    },
    "numpy.f2py.tests.test_return_logical.pytest": {
     "line number": [
      185,
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_logical.TestReturnLogical": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_logical.TestReturnLogical.check_function": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      52
     ]
    },
    "numpy.array": {
     "line number": [
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52
     ]
    },
    "numpy.compat.long": {
     "line number": [
      23
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      52
     ]
    },
    "repr": {
     "line number": [
      14,
      15
     ]
    },
    "t": {
     "line number": [
      14,
      14,
      15,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_logical.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_logical.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_logical.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_logical.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_logical.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_logical.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_logical.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_logical.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_real": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_return_real.TestCReturnReal": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_return_real.TestReturnReal": {
     "line number": [
      61
     ]
    },
    "numpy.f2py.tests.test_return_real.platform": {
     "line number": [
      58
     ]
    },
    "numpy.f2py.tests.test_return_real.pytest": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_real.TestCReturnReal.test_all": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      96
     ]
    },
    "numpy.f2py.tests.test_return_real.pytest": {
     "line number": [
      93,
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_real.TestF77ReturnReal": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_return_real.TestReturnReal": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_real.TestF77ReturnReal.test_all": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      151
     ]
    },
    "numpy.f2py.tests.test_return_real.pytest": {
     "line number": [
      148,
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_real.TestF90ReturnReal": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_return_real.TestReturnReal": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_real.TestF90ReturnReal.test_all": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      210
     ]
    },
    "numpy.f2py.tests.test_return_real.pytest": {
     "line number": [
      207,
      208
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_real.TestReturnReal": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_return_real.TestReturnReal.check_function": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      46,
      47
     ]
    },
    "IndexError": {
     "line number": [
      43,
      44
     ]
    },
    "OverflowError": {
     "line number": [
      52
     ]
    },
    "ValueError": {
     "line number": [
      41
     ]
    },
    "abs": {
     "line number": [
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36
     ]
    },
    "numpy.array": {
     "line number": [
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36
     ]
    },
    "numpy.compat.long": {
     "line number": [
      21
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      38,
      51
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      41,
      43,
      44,
      46,
      47
     ]
    },
    "repr": {
     "line number": [
      51,
      51
     ]
    },
    "t": {
     "line number": [
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      38,
      38,
      41,
      43,
      44,
      46,
      46,
      47,
      50
     ]
    },
    "t.__doc__.split": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_return_real.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_real.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_real.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_real.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_real.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_real.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_real.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_real.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_return_real.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_semicolon_split": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_semicolon_split.TestCallstatement": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_semicolon_split.platform": {
     "line number": [
      38
     ]
    },
    "numpy.f2py.tests.test_semicolon_split.pytest": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_semicolon_split.TestCallstatement.test_callstatement": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_semicolon_split.TestMultiline": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_semicolon_split.platform": {
     "line number": [
      10
     ]
    },
    "numpy.f2py.tests.test_semicolon_split.pytest": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_semicolon_split.TestMultiline.test_multiline": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_semicolon_split.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_semicolon_split.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_semicolon_split.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_semicolon_split.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_semicolon_split.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_semicolon_split.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_size": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_size.TestSizeSumExample": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_size._path": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_size.TestSizeSumExample.test_all": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_size.pytest": {
     "line number": [
      17
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      20,
      23,
      26,
      29
     ]
    },
    "repr": {
     "line number": [
      20,
      23,
      26,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_size.TestSizeSumExample.test_flatten": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_size.pytest": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      45,
      48,
      51
     ]
    },
    "repr": {
     "line number": [
      45,
      48,
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_size.TestSizeSumExample.test_transpose": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_size.pytest": {
     "line number": [
      31
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      34,
      37,
      40
     ]
    },
    "repr": {
     "line number": [
      34,
      37,
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_size._path": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_size.os": {
     "line number": [
      11,
      11
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_size.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_size.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_size.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_size.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_size.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_size.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_string": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.tests.test_string.TestString": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_string._path": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.test_string.TestString.test_char": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      19
     ]
    },
    "numpy.f2py.tests.test_string.pytest": {
     "line number": [
      17
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      21,
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_string._path": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "numpy.f2py.tests.test_string.os": {
     "line number": [
      12,
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.test_string.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_string.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_string.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_string.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_string.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_string.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.test_string.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.f2py.tests.util.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.F2PyTest": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": {
    "object": {
     "line number": [
      311
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.f2py.tests.util.F2PyTest.setup": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": {
    "numpy.f2py.tests.util.build_code": {
     "line number": [
      352
     ]
    },
    "numpy.f2py.tests.util.build_module": {
     "line number": [
      358
     ]
    },
    "numpy.f2py.tests.util.has_c_compiler": {
     "line number": [
      329
     ]
    },
    "numpy.f2py.tests.util.has_f77_compiler": {
     "line number": [
      345
     ]
    },
    "numpy.f2py.tests.util.has_f90_compiler": {
     "line number": [
      347
     ]
    },
    "numpy.f2py.tests.util.pytest": {
     "line number": [
      323,
      330,
      346,
      348
     ]
    },
    "numpy.f2py.tests.util.sys": {
     "line number": [
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util._cleanup": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      45
     ]
    },
    "OSError": {
     "line number": [
      45
     ]
    },
    "ValueError": {
     "line number": [
      41
     ]
    },
    "numpy.f2py.tests.util._module_dir": {
     "line number": [
      38,
      40,
      44,
      47
     ]
    },
    "numpy.f2py.tests.util.shutil": {
     "line number": [
      44
     ]
    },
    "numpy.f2py.tests.util.sys": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util._compiler_status": {
  "data": {
   "lineno": 171
  },
  "type": "constant"
 },
 "numpy.f2py.tests.util._get_compiler_status": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      217,
      217,
      218
     ]
    },
    "dict": {
     "line number": [
      204
     ]
    },
    "int": {
     "line number": [
      217,
      217,
      218
     ]
    },
    "numpy.f2py.tests.util._compiler_status": {
     "line number": [
      176,
      177,
      179,
      217,
      220
     ]
    },
    "numpy.f2py.tests.util.re": {
     "line number": [
      215
     ]
    },
    "numpy.f2py.tests.util.subprocess": {
     "line number": [
      211,
      211,
      212
     ]
    },
    "numpy.f2py.tests.util.sys": {
     "line number": [
      204,
      210
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      206
     ]
    },
    "open": {
     "line number": [
      207
     ]
    },
    "repr": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util._memoize": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "func.__name__": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util._memoize.wrapper": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      79,
      83
     ]
    },
    "func": {
     "line number": [
      78
     ]
    },
    "isinstance": {
     "line number": [
      83
     ]
    },
    "repr": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util._module_dir": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.f2py.tests.util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.asbytes": {
  "data": {
   "shadows": "numpy.compat.asbytes"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.asstr": {
  "data": {
   "shadows": "numpy.compat.asstr"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.atexit": {
  "data": {
   "shadows": "atexit"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.build_code": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "numpy.f2py.tests.util._memoize": {
     "line number": [
      152
     ]
    },
    "numpy.f2py.tests.util.build_module": {
     "line number": [
      164
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      161
     ]
    },
    "open": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util.build_module": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      110,
      139
     ]
    },
    "importlib.import_module": {
     "line number": [
      149
     ]
    },
    "numpy.compat.asstr": {
     "line number": [
      140
     ]
    },
    "numpy.f2py.tests.util._memoize": {
     "line number": [
      94
     ]
    },
    "numpy.f2py.tests.util.get_module_dir": {
     "line number": [
      104
     ]
    },
    "numpy.f2py.tests.util.get_temp_module_name": {
     "line number": [
      123
     ]
    },
    "numpy.f2py.tests.util.os": {
     "line number": [
      109,
      111,
      111,
      115,
      115,
      116,
      117,
      117,
      118,
      131,
      133,
      142,
      146
     ]
    },
    "numpy.f2py.tests.util.shutil": {
     "line number": [
      112,
      119
     ]
    },
    "numpy.f2py.tests.util.subprocess": {
     "line number": [
      135,
      135,
      136
     ]
    },
    "numpy.f2py.tests.util.sys": {
     "line number": [
      102,
      134
     ]
    },
    "repr": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util.build_module_distutils": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      254,
      293
     ]
    },
    "__import__": {
     "line number": [
      303
     ]
    },
    "dict": {
     "line number": [
      276
     ]
    },
    "numpy.compat.asbytes": {
     "line number": [
      281
     ]
    },
    "numpy.compat.asstr": {
     "line number": [
      294
     ]
    },
    "numpy.f2py.tests.util._memoize": {
     "line number": [
      239
     ]
    },
    "numpy.f2py.tests.util.get_module_dir": {
     "line number": [
      248
     ]
    },
    "numpy.f2py.tests.util.get_temp_module_name": {
     "line number": [
      278
     ]
    },
    "numpy.f2py.tests.util.os": {
     "line number": [
      253,
      255,
      255,
      278,
      285,
      287,
      296,
      300
     ]
    },
    "numpy.f2py.tests.util.shutil": {
     "line number": [
      256
     ]
    },
    "numpy.f2py.tests.util.subprocess": {
     "line number": [
      289,
      289,
      290
     ]
    },
    "numpy.f2py.tests.util.sys": {
     "line number": [
      276,
      288,
      304
     ]
    },
    "numpy.f2py.tests.util.textwrap": {
     "line number": [
      260
     ]
    },
    "open": {
     "line number": [
      280
     ]
    },
    "repr": {
     "line number": [
      276
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.get_module_dir": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "numpy.f2py.tests.util._cleanup": {
     "line number": [
      54
     ]
    },
    "numpy.f2py.tests.util._module_dir": {
     "line number": [
      52,
      53,
      55,
      56,
      57
     ]
    },
    "numpy.f2py.tests.util.atexit": {
     "line number": [
      54
     ]
    },
    "numpy.f2py.tests.util.sys": {
     "line number": [
      55,
      56
     ]
    },
    "numpy.f2py.tests.util.tempfile": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util.get_temp_module_name": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      68
     ]
    },
    "numpy.f2py.tests.util.get_module_dir": {
     "line number": [
      62
     ]
    },
    "numpy.f2py.tests.util.os": {
     "line number": [
      65,
      66
     ]
    },
    "numpy.f2py.tests.util.sys": {
     "line number": [
      66
     ]
    },
    "range": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util.has_c_compiler": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "numpy.f2py.tests.util._get_compiler_status": {
     "line number": [
      224
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util.has_f77_compiler": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": {
    "numpy.f2py.tests.util._get_compiler_status": {
     "line number": [
      228
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util.has_f90_compiler": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "numpy.f2py.tests.util._get_compiler_status": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.tests.util.import_module": {
  "data": {
   "shadows": "importlib.import_module"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.md5": {
  "data": {
   "shadows": "md5.new"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.temppath": {
  "data": {
   "shadows": "numpy.testing.temppath"
  },
  "type": "import"
 },
 "numpy.f2py.tests.util.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "numpy.f2py.use_rules": {
  "data": {},
  "type": "module"
 },
 "numpy.f2py.use_rules.__version__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.f2py.use_rules.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.f2py.use_rules.buildusevar": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "applyrules": {
     "line number": [
      114
     ]
    },
    "dictappend": {
     "line number": [
      111
     ]
    },
    "gentitle": {
     "line number": [
      100,
      101
     ]
    },
    "hasnote": {
     "line number": [
      109
     ]
    },
    "numpy.f2py.use_rules.usemodule_rules": {
     "line number": [
      114
     ]
    },
    "outmess": {
     "line number": [
      91
     ]
    },
    "print": {
     "line number": [
      113
     ]
    },
    "repr": {
     "line number": [
      108
     ]
    },
    "vars": {
     "line number": [
      109,
      110,
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.use_rules.buildusevars": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "dictappend": {
     "line number": [
      86
     ]
    },
    "numpy.f2py.use_rules.buildusevar": {
     "line number": [
      86
     ]
    },
    "outmess": {
     "line number": [
      56,
      63,
      74,
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.f2py.use_rules.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.f2py.use_rules.f2py_version": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.f2py.use_rules.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.f2py.use_rules.usemodule_rules": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "numpy.fft": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      10
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      10,
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.fft.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.fft.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.fft.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.fft.fftpack": {
  "data": {
   "symbols_in_volume": {
    "_FFTCache": {
     "line number": [
      47,
      48
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      52
     ]
    },
    "numpy.fft.fftpack.functools": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.fft.fftpack.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "numpy.fft.fftpack._cook_nd_args": {
  "data": {
   "lineno": 633,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      646
     ]
    },
    "len": {
     "line number": [
      644,
      645,
      645
     ]
    },
    "list": {
     "line number": [
      637,
      642,
      644
     ]
    },
    "numpy.core.take": {
     "line number": [
      639
     ]
    },
    "range": {
     "line number": [
      644
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack._fft_cache": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "numpy.fft.fftpack._fft_dispatcher": {
  "data": {
   "lineno": 111
  },
  "type": "function"
 },
 "numpy.fft.fftpack._fftn_dispatcher": {
  "data": {
   "lineno": 662
  },
  "type": "function"
 },
 "numpy.fft.fftpack._raw_fft": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      64
     ]
    },
    "init_function": {
     "line number": [
      74
     ]
    },
    "len": {
     "line number": [
      79,
      83
     ]
    },
    "list": {
     "line number": [
      77
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      57
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      58
     ]
    },
    "numpy.core.swapaxes": {
     "line number": [
      91,
      94
     ]
    },
    "numpy.core.zeros": {
     "line number": [
      86
     ]
    },
    "numpy.fft.fftpack._fft_cache": {
     "line number": [
      56
     ]
    },
    "slice": {
     "line number": [
      79,
      80,
      83,
      84
     ]
    },
    "tuple": {
     "line number": [
      81,
      87
     ]
    },
    "work_function": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack._raw_fftnd": {
  "data": {
   "lineno": 652,
   "symbols_in_volume": {
    "function": {
     "line number": [
      658
     ]
    },
    "len": {
     "line number": [
      655
     ]
    },
    "list": {
     "line number": [
      655
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      653
     ]
    },
    "numpy.fft.fftpack._cook_nd_args": {
     "line number": [
      654
     ]
    },
    "numpy.fft.fftpack.fft": {
     "line number": [
      652
     ]
    },
    "range": {
     "line number": [
      655
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack._real_fft_cache": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "numpy.fft.fftpack._unitary": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.array": {
  "data": {
   "shadows": "numpy.core.array"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.array_function_dispatch": {
  "data": {
   "lineno": 51
  },
  "type": "constant"
 },
 "numpy.fft.fftpack.asarray": {
  "data": {
   "shadows": "numpy.core.asarray"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.conjugate": {
  "data": {
   "shadows": "numpy.core.conjugate"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.fft": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      203
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      203
     ]
    },
    "numpy.core.sqrt": {
     "line number": [
      208
     ]
    },
    "numpy.fft.fftpack._fft_cache": {
     "line number": [
      206
     ]
    },
    "numpy.fft.fftpack._fft_dispatcher": {
     "line number": [
      115
     ]
    },
    "numpy.fft.fftpack._raw_fft": {
     "line number": [
      206
     ]
    },
    "numpy.fft.fftpack._unitary": {
     "line number": [
      207
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.fft2": {
  "data": {
   "lineno": 862,
   "symbols_in_volume": {
    "numpy.fft.fftpack._fftn_dispatcher": {
     "line number": [
      862
     ]
    },
    "numpy.fft.fftpack._raw_fftnd": {
     "line number": [
      950
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      862
     ]
    },
    "numpy.fft.fftpack.fft": {
     "line number": [
      950
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.fftn": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": {
    "numpy.fft.fftpack._fftn_dispatcher": {
     "line number": [
      666
     ]
    },
    "numpy.fft.fftpack._raw_fftnd": {
     "line number": [
      761
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      666
     ]
    },
    "numpy.fft.fftpack.fft": {
     "line number": [
      761
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.fftpack": {
  "data": {
   "shadows": "fftpack_lite"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.hfft": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      564
     ]
    },
    "numpy.core.array": {
     "line number": [
      564
     ]
    },
    "numpy.core.conjugate": {
     "line number": [
      568
     ]
    },
    "numpy.core.sqrt": {
     "line number": [
      568
     ]
    },
    "numpy.fft.fftpack._fft_dispatcher": {
     "line number": [
      488
     ]
    },
    "numpy.fft.fftpack._unitary": {
     "line number": [
      567
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      488
     ]
    },
    "numpy.fft.fftpack.irfft": {
     "line number": [
      568
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.ifft": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      298
     ]
    },
    "numpy.core.array": {
     "line number": [
      298
     ]
    },
    "numpy.core.sqrt": {
     "line number": [
      303
     ]
    },
    "numpy.fft.fftpack._fft_cache": {
     "line number": [
      302
     ]
    },
    "numpy.fft.fftpack._fft_dispatcher": {
     "line number": [
      212
     ]
    },
    "numpy.fft.fftpack._raw_fft": {
     "line number": [
      302
     ]
    },
    "numpy.fft.fftpack._unitary": {
     "line number": [
      301
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.ifft2": {
  "data": {
   "lineno": 953,
   "symbols_in_volume": {
    "numpy.fft.fftpack._fftn_dispatcher": {
     "line number": [
      953
     ]
    },
    "numpy.fft.fftpack._raw_fftnd": {
     "line number": [
      1038
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      953
     ]
    },
    "numpy.fft.fftpack.ifft": {
     "line number": [
      1038
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.ifftn": {
  "data": {
   "lineno": 764,
   "symbols_in_volume": {
    "numpy.fft.fftpack._fftn_dispatcher": {
     "line number": [
      764
     ]
    },
    "numpy.fft.fftpack._raw_fftnd": {
     "line number": [
      859
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      764
     ]
    },
    "numpy.fft.fftpack.ifft": {
     "line number": [
      859
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.ihfft": {
  "data": {
   "lineno": 571,
   "symbols_in_volume": {
    "float": {
     "line number": [
      625
     ]
    },
    "numpy.core.array": {
     "line number": [
      625
     ]
    },
    "numpy.core.conjugate": {
     "line number": [
      629
     ]
    },
    "numpy.core.sqrt": {
     "line number": [
      630
     ]
    },
    "numpy.fft.fftpack._fft_dispatcher": {
     "line number": [
      571
     ]
    },
    "numpy.fft.fftpack._unitary": {
     "line number": [
      628
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      571
     ]
    },
    "numpy.fft.fftpack.rfft": {
     "line number": [
      629
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.irfft": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      479
     ]
    },
    "numpy.core.array": {
     "line number": [
      479
     ]
    },
    "numpy.core.sqrt": {
     "line number": [
      485
     ]
    },
    "numpy.fft.fftpack._fft_dispatcher": {
     "line number": [
      397
     ]
    },
    "numpy.fft.fftpack._raw_fft": {
     "line number": [
      483
     ]
    },
    "numpy.fft.fftpack._real_fft_cache": {
     "line number": [
      484
     ]
    },
    "numpy.fft.fftpack._unitary": {
     "line number": [
      482
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      397
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.irfft2": {
  "data": {
   "lineno": 1267,
   "symbols_in_volume": {
    "numpy.fft.fftpack._fftn_dispatcher": {
     "line number": [
      1267
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      1267
     ]
    },
    "numpy.fft.fftpack.irfftn": {
     "line number": [
      1302
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.irfftn": {
  "data": {
   "lineno": 1172,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      1259
     ]
    },
    "len": {
     "line number": [
      1261
     ]
    },
    "numpy.core.array": {
     "line number": [
      1259
     ]
    },
    "numpy.fft.fftpack._cook_nd_args": {
     "line number": [
      1260
     ]
    },
    "numpy.fft.fftpack._fftn_dispatcher": {
     "line number": [
      1172
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      1172
     ]
    },
    "numpy.fft.fftpack.ifft": {
     "line number": [
      1262
     ]
    },
    "numpy.fft.fftpack.irfft": {
     "line number": [
      1263
     ]
    },
    "range": {
     "line number": [
      1261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.normalize_axis_index": {
  "data": {
   "shadows": "numpy.core.multiarray.normalize_axis_index"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.overrides": {
  "data": {
   "shadows": "numpy.core.overrides"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.rfft": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "float": {
     "line number": [
      387
     ]
    },
    "numpy.core.array": {
     "line number": [
      387
     ]
    },
    "numpy.core.sqrt": {
     "line number": [
      393
     ]
    },
    "numpy.fft.fftpack._fft_dispatcher": {
     "line number": [
      307
     ]
    },
    "numpy.fft.fftpack._raw_fft": {
     "line number": [
      388
     ]
    },
    "numpy.fft.fftpack._real_fft_cache": {
     "line number": [
      389
     ]
    },
    "numpy.fft.fftpack._unitary": {
     "line number": [
      390
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.rfft2": {
  "data": {
   "lineno": 1134,
   "symbols_in_volume": {
    "numpy.fft.fftpack._fftn_dispatcher": {
     "line number": [
      1134
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      1134
     ]
    },
    "numpy.fft.fftpack.rfftn": {
     "line number": [
      1169
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.rfftn": {
  "data": {
   "lineno": 1041,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1126
     ]
    },
    "len": {
     "line number": [
      1129
     ]
    },
    "numpy.core.array": {
     "line number": [
      1126
     ]
    },
    "numpy.fft.fftpack._cook_nd_args": {
     "line number": [
      1127
     ]
    },
    "numpy.fft.fftpack._fftn_dispatcher": {
     "line number": [
      1041
     ]
    },
    "numpy.fft.fftpack.array_function_dispatch": {
     "line number": [
      1041
     ]
    },
    "numpy.fft.fftpack.fft": {
     "line number": [
      1130
     ]
    },
    "numpy.fft.fftpack.rfft": {
     "line number": [
      1128
     ]
    },
    "range": {
     "line number": [
      1129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.fftpack.shape": {
  "data": {
   "shadows": "numpy.core.shape"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.sqrt": {
  "data": {
   "shadows": "numpy.core.sqrt"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.swapaxes": {
  "data": {
   "shadows": "numpy.core.swapaxes"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.take": {
  "data": {
   "shadows": "numpy.core.take"
  },
  "type": "import"
 },
 "numpy.fft.fftpack.zeros": {
  "data": {
   "shadows": "numpy.core.zeros"
  },
  "type": "import"
 },
 "numpy.fft.helper": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      10
     ]
    },
    "numpy.compat.integer_types": {
     "line number": [
      20,
      20
     ]
    },
    "numpy.core.integer": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.fft.helper._FFTCache": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "object": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.fft.helper._FFTCache.__init__": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": {
    "dummy_threading.Lock": {
     "line number": [
      257
     ]
    },
    "numpy.fft.helper.collections": {
     "line number": [
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.helper._FFTCache._check_size": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": {
    "max": {
     "line number": [
      324,
      324
     ]
    },
    "sum": {
     "line number": [
      320,
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.helper._FFTCache._prune_cache": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "len": {
     "line number": [
      315,
      316
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.helper._FFTCache.pop_twiddle_factors": {
  "data": {
   "lineno": 285
  },
  "type": "function"
 },
 "numpy.fft.helper._FFTCache.put_twiddle_factors": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      279
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.helper.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.fft.helper._fftshift_dispatcher": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "numpy.fft.helper.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.fft.helper.arange": {
  "data": {
   "shadows": "numpy.core.arange"
  },
  "type": "import"
 },
 "numpy.fft.helper.array_function_dispatch": {
  "data": {
   "shadows": "numpy.core.overrides.array_function_dispatch"
  },
  "type": "import"
 },
 "numpy.fft.helper.asarray": {
  "data": {
   "shadows": "numpy.core.asarray"
  },
  "type": "import"
 },
 "numpy.fft.helper.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "numpy.fft.helper.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.fft.helper.empty": {
  "data": {
   "shadows": "numpy.core.empty"
  },
  "type": "import"
 },
 "numpy.fft.helper.fftfreq": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      169
     ]
    },
    "int": {
     "line number": [
      171,
      173,
      175
     ]
    },
    "isinstance": {
     "line number": [
      168
     ]
    },
    "numpy.compat.integer_types": {
     "line number": [
      168
     ]
    },
    "numpy.core.arange": {
     "line number": [
      173,
      175
     ]
    },
    "numpy.core.empty": {
     "line number": [
      171
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.helper.fftshift": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      76
     ]
    },
    "numpy.compat.integer_types": {
     "line number": [
      76
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      72
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      27
     ]
    },
    "numpy.core.roll": {
     "line number": [
      81
     ]
    },
    "numpy.fft.helper._fftshift_dispatcher": {
     "line number": [
      27
     ]
    },
    "range": {
     "line number": [
      74
     ]
    },
    "tuple": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.helper.ifftshift": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      123
     ]
    },
    "numpy.compat.integer_types": {
     "line number": [
      123
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      119
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      84
     ]
    },
    "numpy.core.roll": {
     "line number": [
      128
     ]
    },
    "numpy.fft.helper._fftshift_dispatcher": {
     "line number": [
      84
     ]
    },
    "range": {
     "line number": [
      121
     ]
    },
    "tuple": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.helper.integer": {
  "data": {
   "shadows": "numpy.core.integer"
  },
  "type": "import"
 },
 "numpy.fft.helper.integer_types": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.fft.helper.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.fft.helper.rfftfreq": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      225
     ]
    },
    "int": {
     "line number": [
      228
     ]
    },
    "isinstance": {
     "line number": [
      224
     ]
    },
    "numpy.compat.integer_types": {
     "line number": [
      224
     ]
    },
    "numpy.core.arange": {
     "line number": [
      228
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.helper.roll": {
  "data": {
   "shadows": "numpy.core.roll"
  },
  "type": "import"
 },
 "numpy.fft.helper.set_module": {
  "data": {
   "shadows": "numpy.core.overrides.set_module"
  },
  "type": "import"
 },
 "numpy.fft.helper.threading": {
  "data": {
   "shadows": "dummy_threading"
  },
  "type": "import"
 },
 "numpy.fft.info": {
  "data": {},
  "type": "module"
 },
 "numpy.fft.info.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.fft.info.depends": {
  "data": {
   "lineno": 187
  },
  "type": "constant"
 },
 "numpy.fft.info.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.fft.info.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.fft.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.fft.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      17
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      19
     ]
    },
    "numpy.fft.setup.configuration": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.fft.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.fft.setup.configuration": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.fft.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.fft.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.fft.test": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "numpy.fft.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.fft.tests.test_fftpack": {
  "data": {
   "symbols_in_volume": {
    "numpy.fft.tests.test_fftpack.sys": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "object": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_all_1d_norm_preserving": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "back": {
     "line number": [
      145
     ]
    },
    "forw": {
     "line number": [
      144
     ]
    },
    "numpy.fft.fft": {
     "line number": [
      135
     ]
    },
    "numpy.fft.hfft": {
     "line number": [
      139
     ]
    },
    "numpy.fft.ifft": {
     "line number": [
      135
     ]
    },
    "numpy.fft.ihfft": {
     "line number": [
      139
     ]
    },
    "numpy.fft.irfft": {
     "line number": [
      136
     ]
    },
    "numpy.fft.rfft": {
     "line number": [
      136
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      133,
      147
     ]
    },
    "numpy.random.random": {
     "line number": [
      132
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_fft": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "numpy.fft.fft": {
     "line number": [
      33,
      35
     ]
    },
    "numpy.fft.tests.test_fftpack.fft1": {
     "line number": [
      33,
      34
     ]
    },
    "numpy.random.random": {
     "line number": [
      32,
      32
     ]
    },
    "numpy.sqrt": {
     "line number": [
      34
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      33,
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_fft2": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "numpy.fft.fft": {
     "line number": [
      45,
      45
     ]
    },
    "numpy.fft.fft2": {
     "line number": [
      46,
      47,
      48
     ]
    },
    "numpy.random.random": {
     "line number": [
      44,
      44
     ]
    },
    "numpy.sqrt": {
     "line number": [
      47
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      45,
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_fftn": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "numpy.fft.fft": {
     "line number": [
      60,
      60,
      60
     ]
    },
    "numpy.fft.fftn": {
     "line number": [
      61,
      62,
      63
     ]
    },
    "numpy.random.random": {
     "line number": [
      58,
      58
     ]
    },
    "numpy.sqrt": {
     "line number": [
      62
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      59,
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_hfft": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      115,
      116
     ]
    },
    "numpy.fft.fft": {
     "line number": [
      117
     ]
    },
    "numpy.fft.hfft": {
     "line number": [
      117,
      118,
      119
     ]
    },
    "numpy.random.random": {
     "line number": [
      114,
      114,
      115,
      115
     ]
    },
    "numpy.sqrt": {
     "line number": [
      118
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      117,
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_ifft": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "numpy.fft.fft": {
     "line number": [
      39,
      41
     ]
    },
    "numpy.fft.ifft": {
     "line number": [
      39,
      41
     ]
    },
    "numpy.random.random": {
     "line number": [
      38,
      38
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      39,
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_ifft2": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "numpy.fft.ifft": {
     "line number": [
      52,
      52
     ]
    },
    "numpy.fft.ifft2": {
     "line number": [
      53,
      54,
      55
     ]
    },
    "numpy.random.random": {
     "line number": [
      51,
      51
     ]
    },
    "numpy.sqrt": {
     "line number": [
      54
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      52,
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_ifftn": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "numpy.fft.ifft": {
     "line number": [
      68,
      68,
      68
     ]
    },
    "numpy.fft.ifftn": {
     "line number": [
      69,
      70,
      71
     ]
    },
    "numpy.random.random": {
     "line number": [
      66,
      66
     ]
    },
    "numpy.sqrt": {
     "line number": [
      70
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      67,
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_ihttf": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      123,
      124
     ]
    },
    "numpy.fft.hfft": {
     "line number": [
      125,
      127
     ]
    },
    "numpy.fft.ihfft": {
     "line number": [
      125,
      127
     ]
    },
    "numpy.random.random": {
     "line number": [
      122,
      122,
      123,
      123
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      125,
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_irfft": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "numpy.fft.irfft": {
     "line number": [
      85,
      87
     ]
    },
    "numpy.fft.rfft": {
     "line number": [
      85,
      87
     ]
    },
    "numpy.random.random": {
     "line number": [
      84
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      85,
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_irfft2": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "numpy.fft.irfft2": {
     "line number": [
      97,
      99
     ]
    },
    "numpy.fft.rfft2": {
     "line number": [
      97,
      99
     ]
    },
    "numpy.random.random": {
     "line number": [
      96
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      97,
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_irfftn": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "numpy.fft.irfftn": {
     "line number": [
      109,
      111
     ]
    },
    "numpy.fft.rfftn": {
     "line number": [
      109,
      111
     ]
    },
    "numpy.random.random": {
     "line number": [
      108
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      109,
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_rfft": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "numpy.fft.fft": {
     "line number": [
      78
     ]
    },
    "numpy.fft.rfft": {
     "line number": [
      79,
      80,
      81
     ]
    },
    "numpy.random.random": {
     "line number": [
      74
     ]
    },
    "numpy.sqrt": {
     "line number": [
      80
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      77,
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_rfft2": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "numpy.fft.fft2": {
     "line number": [
      91
     ]
    },
    "numpy.fft.rfft2": {
     "line number": [
      91,
      92,
      93
     ]
    },
    "numpy.random.random": {
     "line number": [
      90
     ]
    },
    "numpy.sqrt": {
     "line number": [
      92
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      91,
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFT1D.test_rfftn": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "numpy.fft.fftn": {
     "line number": [
      103
     ]
    },
    "numpy.fft.rfftn": {
     "line number": [
      103,
      104,
      105
     ]
    },
    "numpy.random.random": {
     "line number": [
      102
     ]
    },
    "numpy.sqrt": {
     "line number": [
      104
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      103,
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFTShift": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "object": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.fft.tests.test_fftpack.TestFFTShift.test_fft_n": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      26
     ]
    },
    "numpy.fft.fft": {
     "line number": [
      26
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFTThreadSafe": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "object": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.fft.tests.test_fftpack.TestFFTThreadSafe._test_mtsame": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "Queue.Queue": {
     "line number": [
      157
     ]
    },
    "func": {
     "line number": [
      158
     ]
    },
    "numpy.fft.tests.test_fftpack.threading": {
     "line number": [
      161
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      168
     ]
    },
    "range": {
     "line number": [
      162,
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFTThreadSafe._test_mtsame.worker": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "func": {
     "line number": [
      155
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_fft": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": {
    "numpy.fft.fft": {
     "line number": [
      173
     ]
    },
    "numpy.ones": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_ifft": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "numpy.fft.ifft": {
     "line number": [
      177
     ]
    },
    "numpy.ones": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_irfft": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "numpy.fft.irfft": {
     "line number": [
      185
     ]
    },
    "numpy.ones": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_rfft": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "numpy.fft.rfft": {
     "line number": [
      181
     ]
    },
    "numpy.ones": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_fftpack.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_fftpack.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_fftpack.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_fftpack.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_fftpack.fft1": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "float": {
     "line number": [
      18
     ]
    },
    "len": {
     "line number": [
      17
     ]
    },
    "numpy.arange": {
     "line number": [
      18,
      19
     ]
    },
    "numpy.exp": {
     "line number": [
      20
     ]
    },
    "numpy.pi": {
     "line number": [
      18
     ]
    },
    "numpy.sum": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_fftpack.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_fftpack.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_fftpack.queue": {
  "data": {
   "shadows": "Queue"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_fftpack.random": {
  "data": {
   "shadows": "numpy.random.random"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_fftpack.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_fftpack.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper": {
  "data": {},
  "type": "module"
 },
 "numpy.fft.tests.test_helper.TestFFTCache": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "object": {
     "line number": [
      173
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.fft.tests.test_helper.TestFFTCache.test_automatic_pruning": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "list": {
     "line number": [
      208,
      212,
      216,
      223,
      228,
      237,
      244,
      248
     ]
    },
    "numpy.empty": {
     "line number": [
      220,
      221,
      225
     ]
    },
    "numpy.fft.helper._FFTCache": {
     "line number": [
      204,
      219,
      232
     ]
    },
    "numpy.float32": {
     "line number": [
      206,
      207,
      211,
      214,
      233,
      234,
      235,
      236,
      242,
      247
     ]
    },
    "numpy.ones": {
     "line number": [
      206,
      207,
      211,
      214,
      233,
      234,
      235,
      236,
      242,
      247
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      208,
      212,
      216,
      223,
      228,
      237,
      244,
      248
     ]
    },
    "range": {
     "line number": [
      241
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper.TestFFTCache.test_basic_behaviour": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "len": {
     "line number": [
      189,
      200
     ]
    },
    "numpy.fft.helper._FFTCache": {
     "line number": [
      176
     ]
    },
    "numpy.float32": {
     "line number": [
      179,
      180,
      184,
      186,
      194,
      195,
      197,
      199
     ]
    },
    "numpy.ones": {
     "line number": [
      179,
      184,
      194,
      197
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      183,
      185,
      196,
      198
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      189,
      200
     ]
    },
    "numpy.zeros": {
     "line number": [
      180,
      186,
      195,
      199
     ]
    },
    "range": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper.TestFFTFreq": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "object": {
     "line number": [
      139
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.fft.tests.test_helper.TestFFTFreq.test_definition": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "numpy.fft.fftfreq": {
     "line number": [
      143,
      144,
      146,
      147
     ]
    },
    "numpy.pi": {
     "line number": [
      144,
      144,
      147,
      147
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      143,
      144,
      146,
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper.TestFFTShift": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "object": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.fft.tests.test_helper.TestFFTShift.test_axes_keyword": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "numpy.fft.fftshift": {
     "line number": [
      33,
      34,
      35,
      40
     ]
    },
    "numpy.fft.ifftshift": {
     "line number": [
      36,
      37,
      38,
      41
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      33,
      34,
      36,
      37,
      40,
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper.TestFFTShift.test_definition": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "numpy.fft.fftshift": {
     "line number": [
      18,
      22
     ]
    },
    "numpy.fft.ifftshift": {
     "line number": [
      19,
      23
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      18,
      19,
      22,
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper.TestFFTShift.test_equal_to_original": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "numpy.fft.fftshift": {
     "line number": [
      132
     ]
    },
    "numpy.fft.ifftshift": {
     "line number": [
      135
     ]
    },
    "numpy.random.rand": {
     "line number": [
      130
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      132,
      135
     ]
    },
    "original_fftshift": {
     "line number": [
      133
     ]
    },
    "original_ifftshift": {
     "line number": [
      136
     ]
    },
    "range": {
     "line number": [
      127,
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper.TestFFTShift.test_equal_to_original.original_fftshift": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      99
     ]
    },
    "list": {
     "line number": [
      98
     ]
    },
    "numpy.compat.integer_types": {
     "line number": [
      99
     ]
    },
    "numpy.core.arange": {
     "line number": [
      105,
      105
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      95
     ]
    },
    "numpy.core.concatenate": {
     "line number": [
      105
     ]
    },
    "numpy.core.take": {
     "line number": [
      106
     ]
    },
    "range": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper.TestFFTShift.test_equal_to_original.original_ifftshift": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      115
     ]
    },
    "list": {
     "line number": [
      114
     ]
    },
    "numpy.compat.integer_types": {
     "line number": [
      115
     ]
    },
    "numpy.core.arange": {
     "line number": [
      121,
      121
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      111
     ]
    },
    "numpy.core.concatenate": {
     "line number": [
      121
     ]
    },
    "numpy.core.take": {
     "line number": [
      122
     ]
    },
    "range": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper.TestFFTShift.test_inverse": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "numpy.fft.fftshift": {
     "line number": [
      28
     ]
    },
    "numpy.fft.ifftshift": {
     "line number": [
      28
     ]
    },
    "numpy.random.random": {
     "line number": [
      27
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper.TestFFTShift.test_uneven_dims": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "numpy.fft.fftshift": {
     "line number": [
      57,
      59,
      68,
      77,
      79,
      83,
      85
     ]
    },
    "numpy.fft.ifftshift": {
     "line number": [
      58,
      60,
      69,
      78,
      80,
      84,
      86
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      57,
      58,
      59,
      60,
      68,
      69,
      77,
      78,
      79,
      80,
      83,
      84,
      85,
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper.TestIRFFTN": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "object": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.fft.tests.test_helper.TestIRFFTN.test_not_last_axis_success": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "numpy.fft.irfftn": {
     "line number": [
      170
     ]
    },
    "numpy.random.random": {
     "line number": [
      164
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper.TestRFFTFreq": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "object": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.fft.tests.test_helper.TestRFFTFreq.test_definition": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "numpy.fft.rfftfreq": {
     "line number": [
      154,
      155,
      157,
      158
     ]
    },
    "numpy.pi": {
     "line number": [
      155,
      155,
      158,
      158
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      154,
      155,
      157,
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.fft.tests.test_helper._FFTCache": {
  "data": {
   "shadows": "numpy.fft.helper._FFTCache"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.arange": {
  "data": {
   "shadows": "numpy.core.arange"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.asarray": {
  "data": {
   "shadows": "numpy.core.asarray"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.concatenate": {
  "data": {
   "shadows": "numpy.core.concatenate"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.fft": {
  "data": {
   "shadows": "numpy.fft"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.integer_types": {
  "data": {
   "shadows": "numpy.compat.integer_types"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.pi": {
  "data": {
   "shadows": "numpy.pi"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.fft.tests.test_helper.take": {
  "data": {
   "shadows": "numpy.core.take"
  },
  "type": "import"
 },
 "numpy.float": {
  "data": {
   "shadows": "__builtin__.float"
  },
  "type": "import"
 },
 "numpy.int": {
  "data": {
   "shadows": "__builtin__.int"
  },
  "type": "import"
 },
 "numpy.lib": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      50
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      50,
      51
     ]
    },
    "numpy.lib.__all__": {
     "line number": [
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.lib.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "numpy.lib.__version__": {
  "data": {
   "shadows": "numpy.version.version"
  },
  "type": "import"
 },
 "numpy.lib._iotools": {
  "data": {
   "symbols_in_volume": {
    "builtins.str": {
     "line number": [
      15
     ]
    },
    "numpy.lib._iotools.sys": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib._iotools.ConversionWarning": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      480
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib._iotools.ConverterError": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib._iotools.ConverterLockError": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": {
    "numpy.lib._iotools.ConverterError": {
     "line number": [
      472
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib._iotools.LineSplitter": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "__builtin__.object": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib._iotools.LineSplitter.__call__": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": {
    "numpy.lib._iotools._decode_line": {
     "line number": [
      267
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.LineSplitter.__init__": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "__builtin__.int": {
     "line number": [
      223,
      225
     ]
    },
    "hasattr": {
     "line number": [
      218
     ]
    },
    "isinstance": {
     "line number": [
      214
     ]
    },
    "list": {
     "line number": [
      220
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      214
     ]
    },
    "numpy.cumsum": {
     "line number": [
      220
     ]
    },
    "numpy.lib._iotools._decode_line": {
     "line number": [
      208,
      209
     ]
    },
    "slice": {
     "line number": [
      221
     ]
    },
    "zip": {
     "line number": [
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.LineSplitter._delimited_splitter": {
  "data": {
   "lineno": 236
  },
  "type": "function"
 },
 "numpy.lib._iotools.LineSplitter._fixedwidth_splitter": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "len": {
     "line number": [
      253
     ]
    },
    "range": {
     "line number": [
      253
     ]
    },
    "slice": {
     "line number": [
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.LineSplitter._variablewidth_splitter": {
  "data": {
   "lineno": 257
  },
  "type": "function"
 },
 "numpy.lib._iotools.LineSplitter.autostrip": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "input": {
     "line number": [
      204
     ]
    },
    "method": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.NameValidator": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": {
    "__builtin__.object": {
     "line number": [
      270
     ]
    },
    "set": {
     "line number": [
      323
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib._iotools.NameValidator.__call__": {
  "data": {
   "lineno": 424
  },
  "type": "function"
 },
 "numpy.lib._iotools.NameValidator.__init__": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      349
     ]
    },
    "set": {
     "line number": [
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.NameValidator.validate": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": {
    "case_converter": {
     "line number": [
      403
     ]
    },
    "dict": {
     "line number": [
      399
     ]
    },
    "isinstance": {
     "line number": [
      384
     ]
    },
    "len": {
     "line number": [
      387
     ]
    },
    "list": {
     "line number": [
      389
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      384
     ]
    },
    "tuple": {
     "line number": [
      421
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.StringConverter": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": {
    "__builtin__.complex": {
     "line number": [
      551
     ]
    },
    "__builtin__.float": {
     "line number": [
      550
     ]
    },
    "__builtin__.int": {
     "line number": [
      543,
      548
     ]
    },
    "__builtin__.object": {
     "line number": [
      493
     ]
    },
    "numpy.compat.asbytes": {
     "line number": [
      554
     ]
    },
    "numpy.compat.asunicode": {
     "line number": [
      553
     ]
    },
    "numpy.core.numeric.bool_": {
     "line number": [
      542
     ]
    },
    "numpy.core.numeric.complexfloating": {
     "line number": [
      551
     ]
    },
    "numpy.core.numeric.dtype": {
     "line number": [
      547,
      547
     ]
    },
    "numpy.core.numeric.floating": {
     "line number": [
      550
     ]
    },
    "numpy.core.numeric.int64": {
     "line number": [
      547,
      548
     ]
    },
    "numpy.core.numeric.integer": {
     "line number": [
      543,
      547
     ]
    },
    "numpy.core.numeric.longdouble": {
     "line number": [
      552,
      552
     ]
    },
    "numpy.core.numeric.nan": {
     "line number": [
      550,
      551,
      552
     ]
    },
    "numpy.core.numeric.string_": {
     "line number": [
      554
     ]
    },
    "numpy.core.numeric.unicode_": {
     "line number": [
      553
     ]
    },
    "numpy.lib._iotools.str2bool": {
     "line number": [
      542
     ]
    },
    "zip": {
     "line number": [
      556
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib._iotools.StringConverter.__call__": {
  "data": {
   "lineno": 741
  },
  "type": "function"
 },
 "numpy.lib._iotools.StringConverter.__init__": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      639,
      644
     ]
    },
    "ValueError": {
     "line number": [
      652
     ]
    },
    "__builtin__.bool": {
     "line number": [
      627
     ]
    },
    "__builtin__.float": {
     "line number": [
      693
     ]
    },
    "__builtin__.int": {
     "line number": [
      693
     ]
    },
    "enumerate": {
     "line number": [
      657,
      667
     ]
    },
    "hasattr": {
     "line number": [
      641
     ]
    },
    "isinstance": {
     "line number": [
      698
     ]
    },
    "issubclass": {
     "line number": [
      688,
      690
     ]
    },
    "list": {
     "line number": [
      700
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      698
     ]
    },
    "numpy.dtype": {
     "line number": [
      633,
      638
     ]
    },
    "numpy.int64": {
     "line number": [
      690,
      691
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      658
     ]
    },
    "numpy.lib._iotools.str2bool": {
     "line number": [
      630
     ]
    },
    "numpy.uint64": {
     "line number": [
      688,
      689
     ]
    },
    "set": {
     "line number": [
      700
     ]
    },
    "type": {
     "line number": [
      644
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.StringConverter._dtypeortype": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      574
     ]
    },
    "numpy.datetime64": {
     "line number": [
      577
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.StringConverter._getdtype": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      558
     ]
    },
    "numpy.array": {
     "line number": [
      561
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.StringConverter._getsubdtype": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      564
     ]
    },
    "numpy.array": {
     "line number": [
      567
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.StringConverter._loose_call": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      711
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.StringConverter._strict_call": {
  "data": {
   "lineno": 715,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      727
     ]
    },
    "ValueError": {
     "line number": [
      728,
      733,
      738
     ]
    },
    "__builtin__.int": {
     "line number": [
      724
     ]
    },
    "numpy.array": {
     "line number": [
      726
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.StringConverter.iterupgrade": {
  "data": {
   "lineno": 790,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      798
     ]
    },
    "_strict_call": {
     "line number": [
      797
     ]
    },
    "hasattr": {
     "line number": [
      792
     ]
    },
    "len": {
     "line number": [
      803
     ]
    },
    "numpy.lib._iotools.ConverterError": {
     "line number": [
      807
     ]
    },
    "numpy.lib._iotools.ConverterLockError": {
     "line number": [
      802
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.StringConverter.update": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      861,
      874
     ]
    },
    "ValueError": {
     "line number": [
      861
     ]
    },
    "all": {
     "line number": [
      873
     ]
    },
    "func": {
     "line number": [
      860
     ]
    },
    "isinstance": {
     "line number": [
      873
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      873
     ]
    },
    "numpy.iterable": {
     "line number": [
      871
     ]
    },
    "set": {
     "line number": [
      869
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.StringConverter.upgrade": {
  "data": {
   "lineno": 745,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      769
     ]
    },
    "len": {
     "line number": [
      774
     ]
    },
    "numpy.lib._iotools.ConverterError": {
     "line number": [
      779
     ]
    },
    "numpy.lib._iotools.ConverterLockError": {
     "line number": [
      773
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.StringConverter.upgrade_mapper": {
  "data": {
   "lineno": 582,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      582
     ]
    },
    "hasattr": {
     "line number": [
      607,
      610
     ]
    },
    "isinstance": {
     "line number": [
      611
     ]
    },
    "len": {
     "line number": [
      616,
      619,
      619
     ]
    },
    "list": {
     "line number": [
      611,
      618
     ]
    },
    "tuple": {
     "line number": [
      611
     ]
    },
    "zip": {
     "line number": [
      620
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.__docformat__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.lib._iotools._decode_line": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.compat.bytes": {
     "line number": [
      37
     ]
    },
    "type": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools._is_bytes_like": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      63
     ]
    },
    "ValueError": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools._is_string_like": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      52
     ]
    },
    "ValueError": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools._to_filehandle": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      96
     ]
    },
    "file": {
     "line number": [
      90
     ]
    },
    "hasattr": {
     "line number": [
      92
     ]
    },
    "numpy.lib._iotools._is_string_like": {
     "line number": [
      82
     ]
    },
    "numpy.lib._iotools.bz2": {
     "line number": [
      88
     ]
    },
    "numpy.lib._iotools.gzip": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib._iotools.asbytes": {
  "data": {
   "shadows": "numpy.compat.asbytes"
  },
  "type": "import"
 },
 "numpy.lib._iotools.asunicode": {
  "data": {
   "shadows": "numpy.compat.asunicode"
  },
  "type": "import"
 },
 "numpy.lib._iotools.basestring": {
  "data": {
   "shadows": "numpy.compat.basestring"
  },
  "type": "import"
 },
 "numpy.lib._iotools.bool": {
  "data": {
   "shadows": "__builtin__.bool"
  },
  "type": "import"
 },
 "numpy.lib._iotools.bytes": {
  "data": {
   "shadows": "numpy.compat.bytes"
  },
  "type": "import"
 },
 "numpy.lib._iotools.bz2": {
  "data": {
   "shadows": "bz2"
  },
  "type": "import"
 },
 "numpy.lib._iotools.complex": {
  "data": {
   "shadows": "__builtin__.complex"
  },
  "type": "import"
 },
 "numpy.lib._iotools.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib._iotools.easy_dtype": {
  "data": {
   "lineno": 878,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      918
     ]
    },
    "dict": {
     "line number": [
      926
     ]
    },
    "isinstance": {
     "line number": [
      923,
      932
     ]
    },
    "len": {
     "line number": [
      920,
      922,
      928,
      936
     ]
    },
    "list": {
     "line number": [
      938
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      923,
      932
     ]
    },
    "numpy.dtype": {
     "line number": [
      917,
      926,
      938
     ]
    },
    "numpy.lib._iotools.NameValidator": {
     "line number": [
      919,
      931,
      945
     ]
    },
    "range": {
     "line number": [
      947
     ]
    },
    "tuple": {
     "line number": [
      936,
      947
     ]
    },
    "validate": {
     "line number": [
      925,
      931,
      937,
      941,
      945,
      949,
      952
     ]
    },
    "zip": {
     "line number": [
      938
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.flatten_dtype": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "__builtin__.int": {
     "line number": [
      159
     ]
    },
    "numpy.prod": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.float": {
  "data": {
   "shadows": "__builtin__.float"
  },
  "type": "import"
 },
 "numpy.lib._iotools.gzip": {
  "data": {
   "shadows": "gzip"
  },
  "type": "import"
 },
 "numpy.lib._iotools.has_nested_fields": {
  "data": {
   "lineno": 102
  },
  "type": "function"
 },
 "numpy.lib._iotools.int": {
  "data": {
   "shadows": "__builtin__.int"
  },
  "type": "import"
 },
 "numpy.lib._iotools.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib._iotools.nx": {
  "data": {
   "shadows": "numpy.core.numeric"
  },
  "type": "import"
 },
 "numpy.lib._iotools.object": {
  "data": {
   "shadows": "__builtin__.object"
  },
  "type": "import"
 },
 "numpy.lib._iotools.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib._iotools.str": {
  "data": {
   "shadows": "__builtin__.str"
  },
  "type": "import"
 },
 "numpy.lib._iotools.str2bool": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      461
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._iotools.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib._iotools.unicode": {
  "data": {
   "shadows": "__builtin__.unicode"
  },
  "type": "import"
 },
 "numpy.lib._version": {
  "data": {},
  "type": "module"
 },
 "numpy.lib._version.NumpyVersion": {
  "data": {
   "lineno": 18
  },
  "type": "class"
 },
 "numpy.lib._version.NumpyVersion.__eq__": {
  "data": {
   "lineno": 143
  },
  "type": "function"
 },
 "numpy.lib._version.NumpyVersion.__ge__": {
  "data": {
   "lineno": 152
  },
  "type": "function"
 },
 "numpy.lib._version.NumpyVersion.__gt__": {
  "data": {
   "lineno": 149
  },
  "type": "function"
 },
 "numpy.lib._version.NumpyVersion.__init__": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      60
     ]
    },
    "bool": {
     "line number": [
      77
     ]
    },
    "int": {
     "line number": [
      63
     ]
    },
    "len": {
     "line number": [
      65
     ]
    },
    "numpy.lib._version.re": {
     "line number": [
      58,
      68,
      69,
      70,
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._version.NumpyVersion.__le__": {
  "data": {
   "lineno": 140
  },
  "type": "function"
 },
 "numpy.lib._version.NumpyVersion.__lt__": {
  "data": {
   "lineno": 137
  },
  "type": "function"
 },
 "numpy.lib._version.NumpyVersion.__ne__": {
  "data": {
   "lineno": 146
  },
  "type": "function"
 },
 "numpy.lib._version.NumpyVersion.__repr": {
  "data": {
   "lineno": 155
  },
  "type": "function"
 },
 "numpy.lib._version.NumpyVersion._compare": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      117
     ]
    },
    "isinstance": {
     "line number": [
      116,
      119
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      116,
      119
     ]
    },
    "numpy.lib._version.NumpyVersion": {
     "line number": [
      116,
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib._version.NumpyVersion._compare_pre_release": {
  "data": {
   "lineno": 100
  },
  "type": "function"
 },
 "numpy.lib._version.NumpyVersion._compare_version": {
  "data": {
   "lineno": 79
  },
  "type": "function"
 },
 "numpy.lib._version.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.lib._version.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib._version.basestring": {
  "data": {
   "shadows": "numpy.compat.basestring"
  },
  "type": "import"
 },
 "numpy.lib._version.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib._version.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib._version.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.lib.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.arraypad": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.arraypad.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.lib.arraypad._append_const": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      161
     ]
    },
    "numpy.full": {
     "line number": [
      162
     ]
    },
    "numpy.lib.arraypad._do_append": {
     "line number": [
      162
     ]
    },
    "tuple": {
     "line number": [
      160
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._append_edge": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": {
    "numpy.lib.arraypad._do_append": {
     "line number": [
      218
     ]
    },
    "numpy.lib.arraypad._slice_last": {
     "line number": [
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._append_max": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": {
    "numpy.lib.arraypad._append_edge": {
     "line number": [
      395
     ]
    },
    "numpy.lib.arraypad._do_append": {
     "line number": [
      412
     ]
    },
    "numpy.lib.arraypad._slice_last": {
     "line number": [
      404
     ]
    },
    "slice": {
     "line number": [
      406
     ]
    },
    "tuple": {
     "line number": [
      406
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._append_mean": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": {
    "numpy.lib.arraypad._append_edge": {
     "line number": [
      489
     ]
    },
    "numpy.lib.arraypad._do_append": {
     "line number": [
      507
     ]
    },
    "numpy.lib.arraypad._round_ifneeded": {
     "line number": [
      504
     ]
    },
    "numpy.lib.arraypad._slice_last": {
     "line number": [
      498
     ]
    },
    "slice": {
     "line number": [
      500
     ]
    },
    "tuple": {
     "line number": [
      500
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._append_med": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": {
    "numpy.lib.arraypad._append_edge": {
     "line number": [
      584
     ]
    },
    "numpy.lib.arraypad._do_append": {
     "line number": [
      602
     ]
    },
    "numpy.lib.arraypad._round_ifneeded": {
     "line number": [
      599
     ]
    },
    "numpy.lib.arraypad._slice_last": {
     "line number": [
      593
     ]
    },
    "numpy.median": {
     "line number": [
      598
     ]
    },
    "slice": {
     "line number": [
      595
     ]
    },
    "tuple": {
     "line number": [
      595
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._append_min": {
  "data": {
   "lineno": 651,
   "symbols_in_volume": {
    "numpy.lib.arraypad._append_edge": {
     "line number": [
      679
     ]
    },
    "numpy.lib.arraypad._do_append": {
     "line number": [
      696
     ]
    },
    "numpy.lib.arraypad._slice_last": {
     "line number": [
      688
     ]
    },
    "slice": {
     "line number": [
      690
     ]
    },
    "tuple": {
     "line number": [
      690
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._append_ramp": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      299
     ]
    },
    "float": {
     "line number": [
      312
     ]
    },
    "numpy.float64": {
     "line number": [
      303
     ]
    },
    "numpy.lib.arraypad._arange_ndarray": {
     "line number": [
      302
     ]
    },
    "numpy.lib.arraypad._do_append": {
     "line number": [
      318
     ]
    },
    "numpy.lib.arraypad._round_ifneeded": {
     "line number": [
      315
     ]
    },
    "numpy.lib.arraypad._slice_last": {
     "line number": [
      306
     ]
    },
    "tuple": {
     "line number": [
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._arange_ndarray": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      50,
      56
     ]
    },
    "numpy.arange": {
     "line number": [
      52,
      54
     ]
    },
    "tuple": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._as_pairs": {
  "data": {
   "lineno": 889,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      935,
      945,
      949
     ]
    },
    "numpy.array": {
     "line number": [
      922
     ]
    },
    "numpy.broadcast_to": {
     "line number": [
      953
     ]
    },
    "numpy.intp": {
     "line number": [
      924
     ]
    },
    "numpy.round": {
     "line number": [
      924
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._do_append": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._do_prepend": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._pad_dispatcher": {
  "data": {
   "lineno": 960
  },
  "type": "function"
 },
 "numpy.lib.arraypad._pad_ref": {
  "data": {
   "lineno": 699,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      767
     ]
    },
    "numpy.lib.arraypad._slice_at_axis": {
     "line number": [
      739,
      756,
      757
     ]
    },
    "numpy.lib.arraypad._slice_first": {
     "line number": [
      745
     ]
    },
    "numpy.lib.arraypad._slice_last": {
     "line number": [
      761
     ]
    },
    "slice": {
     "line number": [
      739,
      756,
      757
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._pad_sym": {
  "data": {
   "lineno": 770,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      835
     ]
    },
    "numpy.lib.arraypad._slice_at_axis": {
     "line number": [
      811
     ]
    },
    "numpy.lib.arraypad._slice_first": {
     "line number": [
      810,
      816
     ]
    },
    "numpy.lib.arraypad._slice_last": {
     "line number": [
      825,
      829
     ]
    },
    "slice": {
     "line number": [
      811
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._pad_wrap": {
  "data": {
   "lineno": 838,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      886
     ]
    },
    "numpy.lib.arraypad._slice_first": {
     "line number": [
      882
     ]
    },
    "numpy.lib.arraypad._slice_last": {
     "line number": [
      875
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._prepend_const": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      132
     ]
    },
    "numpy.full": {
     "line number": [
      133
     ]
    },
    "numpy.lib.arraypad._do_prepend": {
     "line number": [
      133
     ]
    },
    "tuple": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._prepend_edge": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "numpy.lib.arraypad._do_prepend": {
     "line number": [
      190
     ]
    },
    "numpy.lib.arraypad._slice_first": {
     "line number": [
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._prepend_max": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": {
    "numpy.lib.arraypad._do_prepend": {
     "line number": [
      364
     ]
    },
    "numpy.lib.arraypad._prepend_edge": {
     "line number": [
      350
     ]
    },
    "numpy.lib.arraypad._slice_first": {
     "line number": [
      358
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._prepend_mean": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": {
    "numpy.lib.arraypad._do_prepend": {
     "line number": [
      458
     ]
    },
    "numpy.lib.arraypad._prepend_edge": {
     "line number": [
      443
     ]
    },
    "numpy.lib.arraypad._round_ifneeded": {
     "line number": [
      455
     ]
    },
    "numpy.lib.arraypad._slice_first": {
     "line number": [
      451
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._prepend_med": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": {
    "numpy.lib.arraypad._do_prepend": {
     "line number": [
      553
     ]
    },
    "numpy.lib.arraypad._prepend_edge": {
     "line number": [
      538
     ]
    },
    "numpy.lib.arraypad._round_ifneeded": {
     "line number": [
      550
     ]
    },
    "numpy.lib.arraypad._slice_first": {
     "line number": [
      546
     ]
    },
    "numpy.median": {
     "line number": [
      549
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._prepend_min": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": {
    "numpy.lib.arraypad._do_prepend": {
     "line number": [
      648
     ]
    },
    "numpy.lib.arraypad._prepend_edge": {
     "line number": [
      634
     ]
    },
    "numpy.lib.arraypad._slice_first": {
     "line number": [
      642
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._prepend_ramp": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      249
     ]
    },
    "float": {
     "line number": [
      262
     ]
    },
    "numpy.float64": {
     "line number": [
      253
     ]
    },
    "numpy.lib.arraypad._arange_ndarray": {
     "line number": [
      252
     ]
    },
    "numpy.lib.arraypad._do_prepend": {
     "line number": [
      268
     ]
    },
    "numpy.lib.arraypad._round_ifneeded": {
     "line number": [
      265
     ]
    },
    "numpy.lib.arraypad._slice_first": {
     "line number": [
      256
     ]
    },
    "tuple": {
     "line number": [
      248
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._round_ifneeded": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "numpy.integer": {
     "line number": [
      74
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._slice_at_axis": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "len": {
     "line number": [
      83
     ]
    },
    "slice": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._slice_first": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "numpy.lib.arraypad._slice_at_axis": {
     "line number": [
      88
     ]
    },
    "slice": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad._slice_last": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "numpy.lib.arraypad._slice_at_axis": {
     "line number": [
      94
     ]
    },
    "slice": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.arraypad.array_function_dispatch": {
  "data": {
   "shadows": "numpy.core.overrides.array_function_dispatch"
  },
  "type": "import"
 },
 "numpy.lib.arraypad.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.arraypad.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.arraypad.pad": {
  "data": {
   "lineno": 964,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1169
     ]
    },
    "ValueError": {
     "line number": [
      1198,
      1289
     ]
    },
    "enumerate": {
     "line number": [
      1245,
      1250,
      1256,
      1262,
      1268,
      1274,
      1280,
      1285,
      1319,
      1338
     ]
    },
    "isinstance": {
     "line number": [
      1194
     ]
    },
    "list": {
     "line number": [
      1217
     ]
    },
    "min": {
     "line number": [
      1308,
      1310,
      1327,
      1329,
      1345,
      1347
     ]
    },
    "numpy.apply_along_axis": {
     "line number": [
      1230
     ]
    },
    "numpy.array": {
     "line number": [
      1171,
      1222
     ]
    },
    "numpy.asarray": {
     "line number": [
      1168
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      1194
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      964
     ]
    },
    "numpy.lib.arraypad._append_const": {
     "line number": [
      1247
     ]
    },
    "numpy.lib.arraypad._append_edge": {
     "line number": [
      1252,
      1302
     ]
    },
    "numpy.lib.arraypad._append_max": {
     "line number": [
      1264
     ]
    },
    "numpy.lib.arraypad._append_mean": {
     "line number": [
      1270
     ]
    },
    "numpy.lib.arraypad._append_med": {
     "line number": [
      1276
     ]
    },
    "numpy.lib.arraypad._append_min": {
     "line number": [
      1282
     ]
    },
    "numpy.lib.arraypad._append_ramp": {
     "line number": [
      1258
     ]
    },
    "numpy.lib.arraypad._as_pairs": {
     "line number": [
      1172,
      1208,
      1210
     ]
    },
    "numpy.lib.arraypad._pad_dispatcher": {
     "line number": [
      964
     ]
    },
    "numpy.lib.arraypad._pad_ref": {
     "line number": [
      1311,
      1316
     ]
    },
    "numpy.lib.arraypad._pad_sym": {
     "line number": [
      1330,
      1335
     ]
    },
    "numpy.lib.arraypad._pad_wrap": {
     "line number": [
      1348,
      1353
     ]
    },
    "numpy.lib.arraypad._prepend_const": {
     "line number": [
      1246
     ]
    },
    "numpy.lib.arraypad._prepend_edge": {
     "line number": [
      1251,
      1301
     ]
    },
    "numpy.lib.arraypad._prepend_max": {
     "line number": [
      1263
     ]
    },
    "numpy.lib.arraypad._prepend_mean": {
     "line number": [
      1269
     ]
    },
    "numpy.lib.arraypad._prepend_med": {
     "line number": [
      1275
     ]
    },
    "numpy.lib.arraypad._prepend_min": {
     "line number": [
      1281
     ]
    },
    "numpy.lib.arraypad._prepend_ramp": {
     "line number": [
      1257
     ]
    },
    "numpy.sum": {
     "line number": [
      1218
     ]
    },
    "numpy.zeros": {
     "line number": [
      1223
     ]
    },
    "range": {
     "line number": [
      1217
     ]
    },
    "slice": {
     "line number": [
      1220
     ]
    },
    "tuple": {
     "line number": [
      1219
     ]
    },
    "zip": {
     "line number": [
      1245,
      1256,
      1262,
      1268,
      1274,
      1280
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraypad.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.arraysetops": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      37
     ]
    },
    "numpy.lib.arraysetops.functools": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.arraysetops.__all__": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "numpy.lib.arraysetops._ediff1d_dispatcher": {
  "data": {
   "lineno": 46
  },
  "type": "function"
 },
 "numpy.lib.arraysetops._in1d_dispatcher": {
  "data": {
   "lineno": 480
  },
  "type": "function"
 },
 "numpy.lib.arraysetops._intersect1d_dispatcher": {
  "data": {
   "lineno": 332
  },
  "type": "function"
 },
 "numpy.lib.arraysetops._isin_dispatcher": {
  "data": {
   "lineno": 597
  },
  "type": "function"
 },
 "numpy.lib.arraysetops._setdiff1d_dispatcher": {
  "data": {
   "lineno": 741
  },
  "type": "function"
 },
 "numpy.lib.arraysetops._setxor1d_dispatcher": {
  "data": {
   "lineno": 433
  },
  "type": "function"
 },
 "numpy.lib.arraysetops._union1d_dispatcher": {
  "data": {
   "lineno": 700
  },
  "type": "function"
 },
 "numpy.lib.arraysetops._unique1d": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": {
    "numpy.asanyarray": {
     "line number": [
      304
     ]
    },
    "numpy.bool_": {
     "line number": [
      314
     ]
    },
    "numpy.concatenate": {
     "line number": [
      327
     ]
    },
    "numpy.cumsum": {
     "line number": [
      322
     ]
    },
    "numpy.diff": {
     "line number": [
      328
     ]
    },
    "numpy.empty": {
     "line number": [
      314,
      323
     ]
    },
    "numpy.intp": {
     "line number": [
      323
     ]
    },
    "numpy.nonzero": {
     "line number": [
      327
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraysetops._unique_dispatcher": {
  "data": {
   "lineno": 146
  },
  "type": "function"
 },
 "numpy.lib.arraysetops._unpack_tuple": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "len": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraysetops.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.arraysetops.array_function_dispatch": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "numpy.lib.arraysetops.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.arraysetops.ediff1d": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      110,
      121
     ]
    },
    "len": {
     "line number": [
      113,
      124,
      127
     ]
    },
    "max": {
     "line number": [
      127
     ]
    },
    "numpy.all": {
     "line number": [
      109,
      120
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      95,
      108,
      118
     ]
    },
    "numpy.empty": {
     "line number": [
      128
     ]
    },
    "numpy.lib.arraysetops._ediff1d_dispatcher": {
     "line number": [
      50
     ]
    },
    "numpy.lib.arraysetops.array_function_dispatch": {
     "line number": [
      50
     ]
    },
    "numpy.subtract": {
     "line number": [
      134
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraysetops.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.lib.arraysetops.in1d": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      563,
      567,
      588
     ]
    },
    "len": {
     "line number": [
      561,
      561,
      563,
      567,
      592
     ]
    },
    "numpy.asarray": {
     "line number": [
      551,
      552
     ]
    },
    "numpy.concatenate": {
     "line number": [
      577,
      587
     ]
    },
    "numpy.empty": {
     "line number": [
      588
     ]
    },
    "numpy.lib.arraysetops._in1d_dispatcher": {
     "line number": [
      484
     ]
    },
    "numpy.lib.arraysetops.array_function_dispatch": {
     "line number": [
      484
     ]
    },
    "numpy.ones": {
     "line number": [
      563
     ]
    },
    "numpy.unique": {
     "line number": [
      574,
      575
     ]
    },
    "numpy.zeros": {
     "line number": [
      567
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraysetops.intersect1d": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": {
    "numpy.argsort": {
     "line number": [
      413
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      397,
      398
     ]
    },
    "numpy.concatenate": {
     "line number": [
      411
     ]
    },
    "numpy.lib.arraysetops._intersect1d_dispatcher": {
     "line number": [
      337
     ]
    },
    "numpy.lib.arraysetops.array_function_dispatch": {
     "line number": [
      337
     ]
    },
    "numpy.lib.arraysetops.unique": {
     "line number": [
      402,
      403,
      405,
      406
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraysetops.isin": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      695
     ]
    },
    "numpy.lib.arraysetops._isin_dispatcher": {
     "line number": [
      601
     ]
    },
    "numpy.lib.arraysetops.array_function_dispatch": {
     "line number": [
      601
     ]
    },
    "numpy.lib.arraysetops.in1d": {
     "line number": [
      696
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraysetops.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.arraysetops.overrides": {
  "data": {
   "shadows": "numpy.core.overrides"
  },
  "type": "import"
 },
 "numpy.lib.arraysetops.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.arraysetops.setdiff1d": {
  "data": {
   "lineno": 745,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      783
     ]
    },
    "numpy.lib.arraysetops._setdiff1d_dispatcher": {
     "line number": [
      745
     ]
    },
    "numpy.lib.arraysetops.array_function_dispatch": {
     "line number": [
      745
     ]
    },
    "numpy.lib.arraysetops.in1d": {
     "line number": [
      787
     ]
    },
    "numpy.lib.arraysetops.unique": {
     "line number": [
      785,
      786
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraysetops.setxor1d": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      471,
      476
     ]
    },
    "numpy.lib.arraysetops._setxor1d_dispatcher": {
     "line number": [
      437
     ]
    },
    "numpy.lib.arraysetops.array_function_dispatch": {
     "line number": [
      437
     ]
    },
    "numpy.lib.arraysetops.unique": {
     "line number": [
      468,
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraysetops.union1d": {
  "data": {
   "lineno": 704,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      738
     ]
    },
    "numpy.lib.arraysetops._union1d_dispatcher": {
     "line number": [
      704
     ]
    },
    "numpy.lib.arraysetops.array_function_dispatch": {
     "line number": [
      704
     ]
    },
    "numpy.lib.arraysetops.unique": {
     "line number": [
      738
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraysetops.unique": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      282,
      285
     ]
    },
    "numpy.AxisError": {
     "line number": [
      270,
      272
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      262
     ]
    },
    "numpy.ascontiguousarray": {
     "line number": [
      277
     ]
    },
    "numpy.lib.arraysetops._unique1d": {
     "line number": [
      264,
      293
     ]
    },
    "numpy.lib.arraysetops._unique_dispatcher": {
     "line number": [
      151
     ]
    },
    "numpy.lib.arraysetops._unpack_tuple": {
     "line number": [
      265,
      296
     ]
    },
    "numpy.lib.arraysetops.array_function_dispatch": {
     "line number": [
      151
     ]
    },
    "numpy.swapaxes": {
     "line number": [
      269
     ]
    },
    "range": {
     "line number": [
      278
     ]
    },
    "reshape_uniq": {
     "line number": [
      295
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arraysetops.unique.reshape_uniq": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "numpy.swapaxes": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arrayterator": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.arrayterator.Arrayterator": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "object": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.arrayterator.Arrayterator.__array__": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "slice": {
     "line number": [
      137
     ]
    },
    "tuple": {
     "line number": [
      137
     ]
    },
    "zip": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arrayterator.Arrayterator.__getattr__": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arrayterator.Arrayterator.__getitem__": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "Ellipsis": {
     "line number": [
      111
     ]
    },
    "enumerate": {
     "line number": [
      124
     ]
    },
    "int": {
     "line number": [
      114
     ]
    },
    "isinstance": {
     "line number": [
      106,
      114
     ]
    },
    "len": {
     "line number": [
      109,
      113,
      119,
      120
     ]
    },
    "min": {
     "line number": [
      129
     ]
    },
    "numpy.compat.long": {
     "line number": [
      114
     ]
    },
    "slice": {
     "line number": [
      112,
      115,
      120
     ]
    },
    "tuple": {
     "line number": [
      106,
      118
     ]
    },
    "zip": {
     "line number": [
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arrayterator.Arrayterator.__init__": {
  "data": {
   "lineno": 89
  },
  "type": "function"
 },
 "numpy.lib.arrayterator.Arrayterator.__iter__": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      192
     ]
    },
    "min": {
     "line number": [
      210
     ]
    },
    "operator.mul": {
     "line number": [
      192
     ]
    },
    "range": {
     "line number": [
      198,
      220
     ]
    },
    "slice": {
     "line number": [
      214
     ]
    },
    "tuple": {
     "line number": [
      214
     ]
    },
    "zip": {
     "line number": [
      214
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arrayterator.Arrayterator.flat": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "property": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arrayterator.Arrayterator.shape": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "property": {
     "line number": [
      170
     ]
    },
    "tuple": {
     "line number": [
      178
     ]
    },
    "zip": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.arrayterator.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.lib.arrayterator.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.arrayterator.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.arrayterator.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.lib.arrayterator.mul": {
  "data": {
   "shadows": "operator.mul"
  },
  "type": "import"
 },
 "numpy.lib.arrayterator.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.arrayterator.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "numpy.lib.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.emath": {
  "data": {
   "shadows": "scimath"
  },
  "type": "import"
 },
 "numpy.lib.financial": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      23
     ]
    },
    "numpy.lib.financial.functools": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.financial.Decimal": {
  "data": {
   "shadows": "decimal.Decimal"
  },
  "type": "import"
 },
 "numpy.lib.financial.__all__": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "numpy.lib.financial._convert_when": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      43
     ]
    },
    "TypeError": {
     "line number": [
      43
     ]
    },
    "isinstance": {
     "line number": [
      39
     ]
    },
    "numpy.lib.financial._when_to_num": {
     "line number": [
      42,
      44
     ]
    },
    "numpy.ndarray": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial._fv_dispatcher": {
  "data": {
   "lineno": 47
  },
  "type": "function"
 },
 "numpy.lib.financial._g_div_gp": {
  "data": {
   "lineno": 560
  },
  "type": "function"
 },
 "numpy.lib.financial._ipmt_dispatcher": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "numpy.lib.financial.fv": {
     "line number": [
      314
     ]
    },
    "numpy.lib.financial.nper": {
     "line number": [
      314
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial._irr_dispatcher": {
  "data": {
   "lineno": 653
  },
  "type": "function"
 },
 "numpy.lib.financial._mirr_dispatcher": {
  "data": {
   "lineno": 789
  },
  "type": "function"
 },
 "numpy.lib.financial._nper_dispatcher": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "numpy.lib.financial.fv": {
     "line number": [
      240
     ]
    },
    "numpy.lib.financial.pmt": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial._npv_dispatcher": {
  "data": {
   "lineno": 738
  },
  "type": "function"
 },
 "numpy.lib.financial._pmt_dispatcher": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "numpy.lib.financial.fv": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial._ppmt_dispatcher": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": {
    "numpy.lib.financial.fv": {
     "line number": [
      425
     ]
    },
    "numpy.lib.financial.nper": {
     "line number": [
      425
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial._pv_dispatcher": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": {
    "numpy.lib.financial.fv": {
     "line number": [
      459
     ]
    },
    "numpy.lib.financial.nper": {
     "line number": [
      459,
      459
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial._rate_dispatcher": {
  "data": {
   "lineno": 568,
   "symbols_in_volume": {
    "numpy.lib.financial.fv": {
     "line number": [
      570
     ]
    },
    "numpy.lib.financial.nper": {
     "line number": [
      570
     ]
    },
    "numpy.lib.financial.pmt": {
     "line number": [
      570
     ]
    },
    "numpy.lib.financial.pv": {
     "line number": [
      570
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial._rbl": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": {
    "numpy.lib.financial.fv": {
     "line number": [
      421
     ]
    },
    "numpy.lib.financial.pmt": {
     "line number": [
      421
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial._when_to_num": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy.lib.financial.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.financial.array_function_dispatch": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.lib.financial.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.financial.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.lib.financial.fv": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "map": {
     "line number": [
      134
     ]
    },
    "numpy.asarray": {
     "line number": [
      134
     ]
    },
    "numpy.lib.financial._convert_when": {
     "line number": [
      133
     ]
    },
    "numpy.lib.financial._fv_dispatcher": {
     "line number": [
      51
     ]
    },
    "numpy.lib.financial.array_function_dispatch": {
     "line number": [
      51
     ]
    },
    "numpy.where": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial.ipmt": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      409
     ]
    },
    "numpy.broadcast_arrays": {
     "line number": [
      402
     ]
    },
    "numpy.lib.financial._convert_when": {
     "line number": [
      401
     ]
    },
    "numpy.lib.financial._ipmt_dispatcher": {
     "line number": [
      317
     ]
    },
    "numpy.lib.financial._rbl": {
     "line number": [
      405
     ]
    },
    "numpy.lib.financial.array_function_dispatch": {
     "line number": [
      317
     ]
    },
    "numpy.lib.financial.fv": {
     "line number": [
      402,
      403,
      404
     ]
    },
    "numpy.lib.financial.nper": {
     "line number": [
      402,
      402,
      404
     ]
    },
    "numpy.lib.financial.pmt": {
     "line number": [
      404
     ]
    },
    "numpy.logical_and": {
     "line number": [
      408
     ]
    },
    "numpy.where": {
     "line number": [
      407,
      408
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial.irr": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": {
    "numpy.abs": {
     "line number": [
      734
     ]
    },
    "numpy.argmin": {
     "line number": [
      734
     ]
    },
    "numpy.lib.financial._irr_dispatcher": {
     "line number": [
      657
     ]
    },
    "numpy.lib.financial.array_function_dispatch": {
     "line number": [
      657
     ]
    },
    "numpy.lib.financial.rate": {
     "line number": [
      733,
      734,
      734,
      734,
      735
     ]
    },
    "numpy.nan": {
     "line number": [
      729
     ]
    },
    "numpy.roots": {
     "line number": [
      726
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial.mirr": {
  "data": {
   "lineno": 793,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      821,
      822
     ]
    },
    "isinstance": {
     "line number": [
      821
     ]
    },
    "numpy.abs": {
     "line number": [
      828,
      829
     ]
    },
    "numpy.asarray": {
     "line number": [
      815
     ]
    },
    "numpy.lib.financial._mirr_dispatcher": {
     "line number": [
      793
     ]
    },
    "numpy.lib.financial.array_function_dispatch": {
     "line number": [
      793
     ]
    },
    "numpy.lib.financial.npv": {
     "line number": [
      828,
      829
     ]
    },
    "numpy.nan": {
     "line number": [
      827
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.financial.nper": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": {
    "FloatingPointError": {
     "line number": [
      302
     ]
    },
    "map": {
     "line number": [
      296
     ]
    },
    "numpy.asarray": {
     "line number": [
      296
     ]
    },
    "numpy.errstate": {
     "line number": [
      299
     ]
    },
    "numpy.lib.financial._convert_when": {
     "line number": [
      295
     ]
    },
    "numpy.lib.financial._nper_dispatcher": {
     "line number": [
      243
     ]
    },
    "numpy.lib.financial.array_function_dispatch": {
     "line number": [
      243
     ]
    },
    "numpy.lib.financial.fv": {
     "line number": [
      296,
      296,
      306,
      308,
      309
     ]
    },
    "numpy.lib.financial.pmt": {
     "line number": [
      296,
      296,
      301,
      306,
      308
     ]
    },
    "numpy.log": {
     "line number": [
      309,
      309
     ]
    },
    "numpy.where": {
     "line number": [
      310
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial.npv": {
  "data": {
   "lineno": 742,
   "symbols_in_volume": {
    "len": {
     "line number": [
      786
     ]
    },
    "numpy.arange": {
     "line number": [
      786
     ]
    },
    "numpy.asarray": {
     "line number": [
      785
     ]
    },
    "numpy.lib.financial._npv_dispatcher": {
     "line number": [
      742
     ]
    },
    "numpy.lib.financial.array_function_dispatch": {
     "line number": [
      742
     ]
    },
    "numpy.lib.financial.rate": {
     "line number": [
      786
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial.overrides": {
  "data": {
   "shadows": "numpy.core.overrides"
  },
  "type": "import"
 },
 "numpy.lib.financial.pmt": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "map": {
     "line number": [
      230
     ]
    },
    "numpy.array": {
     "line number": [
      230
     ]
    },
    "numpy.lib.financial._convert_when": {
     "line number": [
      229
     ]
    },
    "numpy.lib.financial._pmt_dispatcher": {
     "line number": [
      145
     ]
    },
    "numpy.lib.financial.array_function_dispatch": {
     "line number": [
      145
     ]
    },
    "numpy.lib.financial.fv": {
     "line number": [
      230,
      230,
      236
     ]
    },
    "numpy.where": {
     "line number": [
      233,
      234
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial.ppmt": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": {
    "numpy.lib.financial._ppmt_dispatcher": {
     "line number": [
      428
     ]
    },
    "numpy.lib.financial.array_function_dispatch": {
     "line number": [
      428
     ]
    },
    "numpy.lib.financial.fv": {
     "line number": [
      454,
      455
     ]
    },
    "numpy.lib.financial.ipmt": {
     "line number": [
      455
     ]
    },
    "numpy.lib.financial.nper": {
     "line number": [
      454,
      455
     ]
    },
    "numpy.lib.financial.pmt": {
     "line number": [
      454
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.financial.pv": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": {
    "map": {
     "line number": [
      550
     ]
    },
    "numpy.asarray": {
     "line number": [
      550
     ]
    },
    "numpy.lib.financial._convert_when": {
     "line number": [
      549
     ]
    },
    "numpy.lib.financial._pv_dispatcher": {
     "line number": [
      462
     ]
    },
    "numpy.lib.financial.array_function_dispatch": {
     "line number": [
      462
     ]
    },
    "numpy.lib.financial.fv": {
     "line number": [
      550,
      550,
      553
     ]
    },
    "numpy.lib.financial.nper": {
     "line number": [
      550,
      550,
      551,
      552
     ]
    },
    "numpy.lib.financial.pmt": {
     "line number": [
      550,
      550,
      553
     ]
    },
    "numpy.where": {
     "line number": [
      552
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.financial.rate": {
  "data": {
   "lineno": 580,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      642
     ]
    },
    "decimal.Decimal": {
     "line number": [
      625,
      625
     ]
    },
    "default_type": {
     "line number": [
      630,
      633
     ]
    },
    "float": {
     "line number": [
      625
     ]
    },
    "isinstance": {
     "line number": [
      625
     ]
    },
    "map": {
     "line number": [
      635
     ]
    },
    "numpy.all": {
     "line number": [
      643
     ]
    },
    "numpy.asarray": {
     "line number": [
      635
     ]
    },
    "numpy.lib.financial._convert_when": {
     "line number": [
      624
     ]
    },
    "numpy.lib.financial._g_div_gp": {
     "line number": [
      641
     ]
    },
    "numpy.lib.financial._rate_dispatcher": {
     "line number": [
      580
     ]
    },
    "numpy.lib.financial.array_function_dispatch": {
     "line number": [
      580
     ]
    },
    "numpy.lib.financial.fv": {
     "line number": [
      635,
      635,
      641
     ]
    },
    "numpy.lib.financial.nper": {
     "line number": [
      635,
      635,
      641
     ]
    },
    "numpy.lib.financial.pmt": {
     "line number": [
      625,
      635,
      635,
      641
     ]
    },
    "numpy.lib.financial.pv": {
     "line number": [
      635,
      635,
      641
     ]
    },
    "numpy.nan": {
     "line number": [
      648
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      17
     ]
    },
    "numpy.lib.histograms._hist_bin_auto": {
     "line number": [
      265
     ]
    },
    "numpy.lib.histograms._hist_bin_doane": {
     "line number": [
      266
     ]
    },
    "numpy.lib.histograms._hist_bin_fd": {
     "line number": [
      267
     ]
    },
    "numpy.lib.histograms._hist_bin_rice": {
     "line number": [
      268
     ]
    },
    "numpy.lib.histograms._hist_bin_scott": {
     "line number": [
      269
     ]
    },
    "numpy.lib.histograms._hist_bin_sqrt": {
     "line number": [
      270
     ]
    },
    "numpy.lib.histograms._hist_bin_stone": {
     "line number": [
      264
     ]
    },
    "numpy.lib.histograms._hist_bin_sturges": {
     "line number": [
      271
     ]
    },
    "numpy.lib.histograms.functools": {
     "line number": [
      16
     ]
    },
    "range": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.histograms.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "numpy.lib.histograms._get_bin_edges": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      384,
      411,
      412
     ]
    },
    "ValueError": {
     "line number": [
      381,
      415,
      422,
      426
     ]
    },
    "float": {
     "line number": [
      434
     ]
    },
    "int": {
     "line number": [
      402
     ]
    },
    "isinstance": {
     "line number": [
      376
     ]
    },
    "numpy.any": {
     "line number": [
      421
     ]
    },
    "numpy.asarray": {
     "line number": [
      420
     ]
    },
    "numpy.ceil": {
     "line number": [
      402
     ]
    },
    "numpy.compat.py3k.basestring": {
     "line number": [
      376
     ]
    },
    "numpy.integer": {
     "line number": [
      433
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      433
     ]
    },
    "numpy.lib.histograms._get_outer_edges": {
     "line number": [
      387,
      417
     ]
    },
    "numpy.lib.histograms._hist_bin_selectors": {
     "line number": [
      380,
      400
     ]
    },
    "numpy.lib.histograms._unsigned_subtract": {
     "line number": [
      402
     ]
    },
    "numpy.lib.histograms.operator": {
     "line number": [
      410
     ]
    },
    "numpy.linspace": {
     "line number": [
      437
     ]
    },
    "numpy.logical_and.reduce": {
     "line number": [
      393
     ]
    },
    "numpy.ndim": {
     "line number": [
      408,
      419
     ]
    },
    "numpy.result_type": {
     "line number": [
      432,
      434
     ]
    },
    "range": {
     "line number": [
      387,
      390,
      417
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._get_outer_edges": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      303,
      306,
      314
     ]
    },
    "numpy.isfinite": {
     "line number": [
      305,
      305,
      313,
      313
     ]
    },
    "range": {
     "line number": [
      300,
      301
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._hist_bin_auto": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "min": {
     "line number": [
      258
     ]
    },
    "numpy.lib.histograms._hist_bin_fd": {
     "line number": [
      254
     ]
    },
    "numpy.lib.histograms._hist_bin_sturges": {
     "line number": [
      255
     ]
    },
    "range": {
     "line number": [
      254,
      255,
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._hist_bin_doane": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "numpy.absolute": {
     "line number": [
      186
     ]
    },
    "numpy.log2": {
     "line number": [
      185,
      186
     ]
    },
    "numpy.mean": {
     "line number": [
      181,
      184
     ]
    },
    "numpy.power": {
     "line number": [
      183
     ]
    },
    "numpy.sqrt": {
     "line number": [
      175
     ]
    },
    "numpy.std": {
     "line number": [
      176
     ]
    },
    "numpy.true_divide": {
     "line number": [
      182
     ]
    },
    "range": {
     "line number": [
      173
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._hist_bin_fd": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "numpy.percentile": {
     "line number": [
      216
     ]
    },
    "numpy.subtract": {
     "line number": [
      216
     ]
    },
    "range": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._hist_bin_rice": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "range": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._hist_bin_scott": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "numpy.pi": {
     "line number": [
      111
     ]
    },
    "numpy.std": {
     "line number": [
      111
     ]
    },
    "range": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._hist_bin_selectors": {
  "data": {
   "lineno": 264
  },
  "type": "constant"
 },
 "numpy.lib.histograms._hist_bin_sqrt": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "numpy.sqrt": {
     "line number": [
      42
     ]
    },
    "range": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._hist_bin_stone": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      151
     ]
    },
    "int": {
     "line number": [
      148
     ]
    },
    "max": {
     "line number": [
      148
     ]
    },
    "min": {
     "line number": [
      149
     ]
    },
    "numpy.lib.histograms._range": {
     "line number": [
      149
     ]
    },
    "numpy.lib.histograms.warnings": {
     "line number": [
      151
     ]
    },
    "numpy.ptp": {
     "line number": [
      139
     ]
    },
    "numpy.sqrt": {
     "line number": [
      148
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._hist_bin_stone.jhat": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "numpy.histogram": {
     "line number": [
      145
     ]
    },
    "range": {
     "line number": [
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._hist_bin_sturges": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "numpy.log2": {
     "line number": [
      65
     ]
    },
    "range": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._histogram_bin_edges_dispatcher": {
  "data": {
   "lineno": 457
  },
  "type": "function"
 },
 "numpy.lib.histograms._histogram_dispatcher": {
  "data": {
   "lineno": 661
  },
  "type": "function"
 },
 "numpy.lib.histograms._histogramdd_dispatcher": {
  "data": {
   "lineno": 919
  },
  "type": "function"
 },
 "numpy.lib.histograms._range": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.lib.histograms._ravel_and_check_weights": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      282
     ]
    },
    "ValueError": {
     "line number": [
      288
     ]
    },
    "numpy.asarray": {
     "line number": [
      276,
      286
     ]
    },
    "numpy.bool_": {
     "line number": [
      279
     ]
    },
    "numpy.lib.histograms.warnings": {
     "line number": [
      280
     ]
    },
    "numpy.uint8": {
     "line number": [
      281,
      283
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._search_sorted_inclusive": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      451
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms._unsigned_subtract": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      343
     ]
    },
    "numpy.byte": {
     "line number": [
      334
     ]
    },
    "numpy.int_": {
     "line number": [
      337
     ]
    },
    "numpy.intc": {
     "line number": [
      336
     ]
    },
    "numpy.longlong": {
     "line number": [
      338
     ]
    },
    "numpy.result_type": {
     "line number": [
      340
     ]
    },
    "numpy.short": {
     "line number": [
      335
     ]
    },
    "numpy.subtract": {
     "line number": [
      344,
      348
     ]
    },
    "numpy.ubyte": {
     "line number": [
      334
     ]
    },
    "numpy.uint": {
     "line number": [
      337
     ]
    },
    "numpy.uintc": {
     "line number": [
      336
     ]
    },
    "numpy.ulonglong": {
     "line number": [
      338
     ]
    },
    "numpy.ushort": {
     "line number": [
      335
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.histograms.array_function_dispatch": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.lib.histograms.basestring": {
  "data": {
   "shadows": "numpy.compat.py3k.basestring"
  },
  "type": "import"
 },
 "numpy.lib.histograms.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.histograms.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.lib.histograms.histogram": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      888,
      915
     ]
    },
    "complex": {
     "line number": [
      797
     ]
    },
    "float": {
     "line number": [
      892,
      907
     ]
    },
    "len": {
     "line number": [
      816,
      864,
      869
     ]
    },
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      904
     ]
    },
    "numpy.argsort": {
     "line number": [
      872
     ]
    },
    "numpy.array": {
     "line number": [
      892,
      907
     ]
    },
    "numpy.bincount": {
     "line number": [
      853,
      855,
      858
     ]
    },
    "numpy.can_cast": {
     "line number": [
      796,
      797
     ]
    },
    "numpy.concatenate": {
     "line number": [
      875
     ]
    },
    "numpy.diff": {
     "line number": [
      879,
      892,
      907
     ]
    },
    "numpy.double": {
     "line number": [
      796
     ]
    },
    "numpy.dtype": {
     "line number": [
      784
     ]
    },
    "numpy.intp": {
     "line number": [
      784,
      839
     ]
    },
    "numpy.lib.histograms._get_bin_edges": {
     "line number": [
      780
     ]
    },
    "numpy.lib.histograms._histogram_dispatcher": {
     "line number": [
      666
     ]
    },
    "numpy.lib.histograms._range": {
     "line number": [
      816,
      864,
      869
     ]
    },
    "numpy.lib.histograms._ravel_and_check_weights": {
     "line number": [
      778
     ]
    },
    "numpy.lib.histograms._search_sorted_inclusive": {
     "line number": [
      866,
      876
     ]
    },
    "numpy.lib.histograms._unsigned_subtract": {
     "line number": [
      810,
      838
     ]
    },
    "numpy.lib.histograms.array_function_dispatch": {
     "line number": [
      666
     ]
    },
    "numpy.lib.histograms.warnings": {
     "line number": [
      885,
      896,
      912
     ]
    },
    "numpy.logical_and.reduce": {
     "line number": [
      826
     ]
    },
    "numpy.sort": {
     "line number": [
      865
     ]
    },
    "numpy.zeros": {
     "line number": [
      807,
      862,
      868
     ]
    },
    "range": {
     "line number": [
      780
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms.histogram_bin_edges": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": {
    "numpy.lib.histograms._get_bin_edges": {
     "line number": [
      657
     ]
    },
    "numpy.lib.histograms._histogram_bin_edges_dispatcher": {
     "line number": [
      461
     ]
    },
    "numpy.lib.histograms._ravel_and_check_weights": {
     "line number": [
      656
     ]
    },
    "numpy.lib.histograms.array_function_dispatch": {
     "line number": [
      461
     ]
    },
    "range": {
     "line number": [
      657
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms.histogramdd": {
  "data": {
   "lineno": 924,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      998
     ]
    },
    "RuntimeError": {
     "line number": [
      1100
     ]
    },
    "TypeError": {
     "line number": [
      1015,
      1088
     ]
    },
    "ValueError": {
     "line number": [
      998,
      1012,
      1023,
      1029,
      1036,
      1040
     ]
    },
    "float": {
     "line number": [
      1074
     ]
    },
    "int": {
     "line number": [
      1003,
      1094
     ]
    },
    "len": {
     "line number": [
      1010,
      1022,
      1043
     ]
    },
    "numpy.any": {
     "line number": [
      1035
     ]
    },
    "numpy.asarray": {
     "line number": [
      1007,
      1034
     ]
    },
    "numpy.atleast_2d": {
     "line number": [
      1000
     ]
    },
    "numpy.bincount": {
     "line number": [
      1068
     ]
    },
    "numpy.diff": {
     "line number": [
      1044
     ]
    },
    "numpy.empty": {
     "line number": [
      1003
     ]
    },
    "numpy.lib.histograms._get_outer_edges": {
     "line number": [
      1031
     ]
    },
    "numpy.lib.histograms._histogramdd_dispatcher": {
     "line number": [
      924
     ]
    },
    "numpy.lib.histograms._range": {
     "line number": [
      1026,
      1050,
      1056,
      1093
     ]
    },
    "numpy.lib.histograms.array_function_dispatch": {
     "line number": [
      924
     ]
    },
    "numpy.linspace": {
     "line number": [
      1032
     ]
    },
    "numpy.ndim": {
     "line number": [
      1027,
      1033
     ]
    },
    "numpy.ones": {
     "line number": [
      1094
     ]
    },
    "numpy.ravel_multi_index": {
     "line number": [
      1064
     ]
    },
    "numpy.searchsorted": {
     "line number": [
      1049
     ]
    },
    "range": {
     "line number": [
      1020,
      1021,
      1022,
      1031
     ]
    },
    "slice": {
     "line number": [
      1077
     ]
    },
    "tuple": {
     "line number": [
      1047
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.histograms.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.histograms.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.lib.histograms.overrides": {
  "data": {
   "shadows": "numpy.core.overrides"
  },
  "type": "import"
 },
 "numpy.lib.histograms.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.histograms.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      22
     ]
    },
    "numpy.lib.index_tricks.CClass": {
     "line number": [
      549
     ]
    },
    "numpy.lib.index_tricks.IndexExpression": {
     "line number": [
      735,
      736
     ]
    },
    "numpy.lib.index_tricks.MGridClass": {
     "line number": [
      254
     ]
    },
    "numpy.lib.index_tricks.OGridClass": {
     "line number": [
      297
     ]
    },
    "numpy.lib.index_tricks.RClass": {
     "line number": [
      518
     ]
    },
    "numpy.lib.index_tricks.functools": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.index_tricks.AxisConcatenator": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "numpy.core.numeric.concatenate": {
     "line number": [
      307
     ]
    },
    "numpy.matrixlib.matrix": {
     "line number": [
      308
     ]
    },
    "object": {
     "line number": [
      300
     ]
    },
    "staticmethod": {
     "line number": [
      307,
      308
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.index_tricks.AxisConcatenator.__getitem__": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      371
     ]
    },
    "TypeError": {
     "line number": [
      376
     ]
    },
    "ValueError": {
     "line number": [
      358,
      372,
      376,
      377
     ]
    },
    "abs": {
     "line number": [
      348
     ]
    },
    "complex": {
     "line number": [
      347
     ]
    },
    "enumerate": {
     "line number": [
      337
     ]
    },
    "int": {
     "line number": [
      348,
      367,
      369,
      374
     ]
    },
    "isinstance": {
     "line number": [
      318,
      323,
      339,
      347,
      356,
      395
     ]
    },
    "len": {
     "line number": [
      368,
      380
     ]
    },
    "list": {
     "line number": [
      391
     ]
    },
    "numpy.core.linspace": {
     "line number": [
      349
     ]
    },
    "numpy.core.numeric.ScalarType": {
     "line number": [
      378
     ]
    },
    "numpy.core.numeric.arange": {
     "line number": [
      351
     ]
    },
    "numpy.core.numeric.array": {
     "line number": [
      353,
      379,
      385
     ]
    },
    "numpy.core.numeric.ndarray": {
     "line number": [
      395
     ]
    },
    "numpy.core.numeric.ndim": {
     "line number": [
      384
     ]
    },
    "numpy.core.numerictypes.find_common_type": {
     "line number": [
      399
     ]
    },
    "numpy.lib.index_tricks.sys": {
     "line number": [
      319
     ]
    },
    "numpy.matrixlib.bmat": {
     "line number": [
      320
     ]
    },
    "range": {
     "line number": [
      391
     ]
    },
    "slice": {
     "line number": [
      339
     ]
    },
    "str": {
     "line number": [
      318,
      356
     ]
    },
    "tuple": {
     "line number": [
      323,
      404
     ]
    },
    "type": {
     "line number": [
      378
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.AxisConcatenator.__init__": {
  "data": {
   "lineno": 310
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.AxisConcatenator.__len__": {
  "data": {
   "lineno": 413
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.CClass": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.AxisConcatenator": {
     "line number": [
      520
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.index_tricks.CClass.__init__": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.AxisConcatenator": {
     "line number": [
      546
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.IndexExpression": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": {
    "object": {
     "line number": [
      682
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.index_tricks.IndexExpression.__getitem__": {
  "data": {
   "lineno": 729,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      730
     ]
    },
    "tuple": {
     "line number": [
      730
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.IndexExpression.__init__": {
  "data": {
   "lineno": 726
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.MGridClass": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.nd_grid": {
     "line number": [
      209
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.index_tricks.MGridClass.__init__": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.MGridClass": {
     "line number": [
      252
     ]
    },
    "super": {
     "line number": [
      252
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.OGridClass": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.nd_grid": {
     "line number": [
      256
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.index_tricks.OGridClass.__init__": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.OGridClass": {
     "line number": [
      295
     ]
    },
    "super": {
     "line number": [
      295
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.RClass": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.AxisConcatenator": {
     "line number": [
      420
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.index_tricks.RClass.__init__": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.AxisConcatenator": {
     "line number": [
      516
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.ScalarType": {
  "data": {
   "shadows": "numpy.core.numeric.ScalarType"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "numpy.lib.index_tricks._diag_indices_from": {
  "data": {
   "lineno": 933
  },
  "type": "function"
 },
 "numpy.lib.index_tricks._fill_diagonal_dispatcher": {
  "data": {
   "lineno": 745
  },
  "type": "function"
 },
 "numpy.lib.index_tricks._ix__dispatcher": {
  "data": {
   "lineno": 32
  },
  "type": "function"
 },
 "numpy.lib.index_tricks._nx": {
  "data": {
   "shadows": "numpy.core.numeric"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.alltrue": {
  "data": {
   "shadows": "numpy.core.numeric.alltrue"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.arange": {
  "data": {
   "shadows": "numpy.core.numeric.arange"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.array": {
  "data": {
   "shadows": "numpy.core.numeric.array"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.array_function_dispatch": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.lib.index_tricks.as_strided": {
  "data": {
   "shadows": "numpy.lib.stride_tricks.as_strided"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.asarray": {
  "data": {
   "shadows": "numpy.core.numeric.asarray"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.c_": {
  "data": {
   "lineno": 549
  },
  "type": "constant"
 },
 "numpy.lib.index_tricks.cumprod": {
  "data": {
   "shadows": "numpy.core.numeric.cumprod"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.diag_indices": {
  "data": {
   "lineno": 864,
   "symbols_in_volume": {
    "numpy.core.numeric.arange": {
     "line number": [
      929
     ]
    },
    "numpy.core.numeric.ndim": {
     "line number": [
      930
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      864
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.diag_indices_from": {
  "data": {
   "lineno": 937,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      959,
      963
     ]
    },
    "diff": {
     "line number": [
      962
     ]
    },
    "numpy.core.numeric.alltrue": {
     "line number": [
      962
     ]
    },
    "numpy.lib.index_tricks._diag_indices_from": {
     "line number": [
      937
     ]
    },
    "numpy.lib.index_tricks.array_function_dispatch": {
     "line number": [
      937
     ]
    },
    "numpy.lib.index_tricks.diag_indices": {
     "line number": [
      965
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.fill_diagonal": {
  "data": {
   "lineno": 749,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      844,
      857
     ]
    },
    "diff": {
     "line number": [
      856
     ]
    },
    "numpy.core.numeric.alltrue": {
     "line number": [
      856
     ]
    },
    "numpy.core.numeric.cumprod": {
     "line number": [
      858
     ]
    },
    "numpy.lib.index_tricks._fill_diagonal_dispatcher": {
     "line number": [
      749
     ]
    },
    "numpy.lib.index_tricks.array_function_dispatch": {
     "line number": [
      749
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.find_common_type": {
  "data": {
   "shadows": "numpy.core.numerictypes.find_common_type"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.index_exp": {
  "data": {
   "lineno": 735
  },
  "type": "constant"
 },
 "numpy.lib.index_tricks.issubdtype": {
  "data": {
   "shadows": "numpy.core.numerictypes.issubdtype"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.ix_": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      99
     ]
    },
    "enumerate": {
     "line number": [
      96
     ]
    },
    "len": {
     "line number": [
      95
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      97
     ]
    },
    "numpy.core.numeric.bool_": {
     "line number": [
      103
     ]
    },
    "numpy.core.numeric.intp": {
     "line number": [
      102
     ]
    },
    "numpy.core.numerictypes.issubdtype": {
     "line number": [
      103
     ]
    },
    "numpy.lib.index_tricks._ix__dispatcher": {
     "line number": [
      36
     ]
    },
    "numpy.lib.index_tricks.array_function_dispatch": {
     "line number": [
      36
     ]
    },
    "tuple": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.linspace": {
  "data": {
   "shadows": "numpy.core.linspace"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.matrixlib": {
  "data": {
   "shadows": "numpy.matrixlib"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.mgrid": {
  "data": {
   "lineno": 254
  },
  "type": "constant"
 },
 "numpy.lib.index_tricks.nd_grid": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "object": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.index_tricks.nd_grid.__getitem__": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      192
     ]
    },
    "TypeError": {
     "line number": [
      192
     ]
    },
    "abs": {
     "line number": [
      159,
      181,
      199
     ]
    },
    "complex": {
     "line number": [
      158,
      180,
      198
     ]
    },
    "float": {
     "line number": [
      160,
      164,
      165,
      166,
      167,
      183,
      202,
      204
     ]
    },
    "int": {
     "line number": [
      150,
      159,
      163,
      181,
      200
     ]
    },
    "isinstance": {
     "line number": [
      158,
      164,
      165,
      166,
      180,
      198
     ]
    },
    "len": {
     "line number": [
      151,
      170,
      173,
      186,
      187
     ]
    },
    "numpy.core.numeric.arange": {
     "line number": [
      169,
      204,
      206
     ]
    },
    "numpy.core.numeric.indices": {
     "line number": [
      172
     ]
    },
    "numpy.core.numeric.newaxis": {
     "line number": [
      186,
      190
     ]
    },
    "numpy.lib.index_tricks.math": {
     "line number": [
      163
     ]
    },
    "range": {
     "line number": [
      151,
      173,
      187
     ]
    },
    "slice": {
     "line number": [
      188
     ]
    },
    "tuple": {
     "line number": [
      189
     ]
    },
    "zip": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.nd_grid.__init__": {
  "data": {
   "lineno": 144
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.ndenumerate": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": {
    "next": {
     "line number": [
      600
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      552
     ]
    },
    "object": {
     "line number": [
      553
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.index_tricks.ndenumerate.__init__": {
  "data": {
   "lineno": 580,
   "symbols_in_volume": {
    "numpy.core.numeric.asarray": {
     "line number": [
      581
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.ndenumerate.__iter__": {
  "data": {
   "lineno": 597
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.ndenumerate.__next__": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": {
    "next": {
     "line number": [
      595
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.ndim": {
  "data": {
   "shadows": "numpy.core.numeric.ndim"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.ndindex": {
  "data": {
   "lineno": 603,
   "symbols_in_volume": {
    "next": {
     "line number": [
      668
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      603
     ]
    },
    "object": {
     "line number": [
      604
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.index_tricks.ndindex.__init__": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      635
     ]
    },
    "len": {
     "line number": [
      635
     ]
    },
    "numpy.core.numeric.nditer": {
     "line number": [
      639
     ]
    },
    "numpy.core.numeric.zeros": {
     "line number": [
      637
     ]
    },
    "numpy.core.numeric.zeros_like": {
     "line number": [
      638
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      637
     ]
    },
    "tuple": {
     "line number": [
      635
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.ndindex.__iter__": {
  "data": {
   "lineno": 642
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.ndindex.__next__": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": {
    "next": {
     "line number": [
      665
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.ndindex.ndincr": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": {
    "next": {
     "line number": [
      651
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.index_tricks.ogrid": {
  "data": {
   "lineno": 297
  },
  "type": "constant"
 },
 "numpy.lib.index_tricks.overrides": {
  "data": {
   "shadows": "numpy.core.overrides"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.r_": {
  "data": {
   "lineno": 518
  },
  "type": "constant"
 },
 "numpy.lib.index_tricks.ravel_multi_index": {
  "data": {
   "shadows": "numpy.core.multiarray.ravel_multi_index"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.s_": {
  "data": {
   "lineno": 736
  },
  "type": "constant"
 },
 "numpy.lib.index_tricks.set_module": {
  "data": {
   "shadows": "numpy.core.overrides.set_module"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib.index_tricks.unravel_index": {
  "data": {
   "shadows": "numpy.core.multiarray.unravel_index"
  },
  "type": "import"
 },
 "numpy.lib.info": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.info.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.info.depends": {
  "data": {
   "lineno": 159
  },
  "type": "constant"
 },
 "numpy.lib.info.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.info.global_symbols": {
  "data": {
   "lineno": 160
  },
  "type": "constant"
 },
 "numpy.lib.info.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "numpy.lib.mixins": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.mixins.NDArrayOperatorsMixin": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "numpy.core.umath.absolute": {
     "line number": [
      181
     ]
    },
    "numpy.core.umath.add": {
     "line number": [
      152
     ]
    },
    "numpy.core.umath.bitwise_and": {
     "line number": [
      174
     ]
    },
    "numpy.core.umath.bitwise_or": {
     "line number": [
      176
     ]
    },
    "numpy.core.umath.bitwise_xor": {
     "line number": [
      175
     ]
    },
    "numpy.core.umath.divide": {
     "line number": [
      159
     ]
    },
    "numpy.core.umath.divmod": {
     "line number": [
      165,
      166
     ]
    },
    "numpy.core.umath.equal": {
     "line number": [
      146
     ]
    },
    "numpy.core.umath.floor_divide": {
     "line number": [
      163
     ]
    },
    "numpy.core.umath.greater": {
     "line number": [
      148
     ]
    },
    "numpy.core.umath.greater_equal": {
     "line number": [
      149
     ]
    },
    "numpy.core.umath.invert": {
     "line number": [
      182
     ]
    },
    "numpy.core.umath.left_shift": {
     "line number": [
      171
     ]
    },
    "numpy.core.umath.less": {
     "line number": [
      144
     ]
    },
    "numpy.core.umath.less_equal": {
     "line number": [
      145
     ]
    },
    "numpy.core.umath.matmul": {
     "line number": [
      156
     ]
    },
    "numpy.core.umath.multiply": {
     "line number": [
      154
     ]
    },
    "numpy.core.umath.negative": {
     "line number": [
      179
     ]
    },
    "numpy.core.umath.not_equal": {
     "line number": [
      147
     ]
    },
    "numpy.core.umath.positive": {
     "line number": [
      180
     ]
    },
    "numpy.core.umath.power": {
     "line number": [
      169
     ]
    },
    "numpy.core.umath.remainder": {
     "line number": [
      164
     ]
    },
    "numpy.core.umath.right_shift": {
     "line number": [
      173
     ]
    },
    "numpy.core.umath.subtract": {
     "line number": [
      153
     ]
    },
    "numpy.core.umath.true_divide": {
     "line number": [
      161
     ]
    },
    "numpy.lib.mixins._binary_method": {
     "line number": [
      144,
      145,
      146,
      147,
      148,
      149,
      165
     ]
    },
    "numpy.lib.mixins._numeric_methods": {
     "line number": [
      152,
      153,
      154,
      155,
      159,
      160,
      162,
      164,
      169,
      170,
      172,
      174,
      175,
      176
     ]
    },
    "numpy.lib.mixins._reflected_binary_method": {
     "line number": [
      166
     ]
    },
    "numpy.lib.mixins._unary_method": {
     "line number": [
      179,
      180,
      181,
      182
     ]
    },
    "numpy.lib.mixins.sys": {
     "line number": [
      157
     ]
    },
    "object": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.mixins.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "numpy.lib.mixins._binary_method": {
  "data": {
   "lineno": 20
  },
  "type": "function"
 },
 "numpy.lib.mixins._binary_method.func": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      24
     ]
    },
    "numpy.lib.mixins._disables_array_ufunc": {
     "line number": [
      23
     ]
    },
    "ufunc": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.mixins._disables_array_ufunc": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.mixins._inplace_binary_method": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "numpy.lib.mixins._inplace_binary_method.func": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "ufunc": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.mixins._numeric_methods": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "numpy.lib.mixins._binary_method": {
     "line number": [
      50
     ]
    },
    "numpy.lib.mixins._inplace_binary_method": {
     "line number": [
      52
     ]
    },
    "numpy.lib.mixins._reflected_binary_method": {
     "line number": [
      51
     ]
    },
    "ufunc": {
     "line number": [
      50,
      51,
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.mixins._reflected_binary_method": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "numpy.lib.mixins._reflected_binary_method.func": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      34
     ]
    },
    "numpy.lib.mixins._disables_array_ufunc": {
     "line number": [
      33
     ]
    },
    "ufunc": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.mixins._unary_method": {
  "data": {
   "lineno": 55
  },
  "type": "function"
 },
 "numpy.lib.mixins._unary_method.func": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "ufunc": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.mixins.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.mixins.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.mixins.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.mixins.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib.mixins.um": {
  "data": {
   "shadows": "numpy.core.umath"
  },
  "type": "import"
 },
 "numpy.lib.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions": {
  "data": {
   "symbols_in_volume": {
    "numpy.lib.recfunctions.sys": {
     "line number": [
      22
     ]
    },
    "numpy.ma.core._check_fill_value": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.recfunctions.MaskedArray": {
  "data": {
   "shadows": "numpy.ma.MaskedArray"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.MaskedRecords": {
  "data": {
   "shadows": "numpy.ma.mrecords.MaskedRecords"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "numpy.lib.recfunctions._append_fields_dispatcher": {
  "data": {
   "lineno": 671
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._apply_along_fields_dispatcher": {
  "data": {
   "lineno": 1081
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._assign_fields_by_name_dispatcher": {
  "data": {
   "lineno": 1126
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._check_fill_value": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "numpy.lib.recfunctions._drop_fields_dispatcher": {
  "data": {
   "lineno": 521
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._find_duplicates_dispatcher": {
  "data": {
   "lineno": 1305
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._fix_defaults": {
  "data": {
   "lineno": 364
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._fix_output": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      352
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      352
     ]
    },
    "numpy.ma.filled": {
     "line number": [
      358
     ]
    },
    "numpy.ma.mrecords.MaskedRecords": {
     "line number": [
      356
     ]
    },
    "numpy.recarray": {
     "line number": [
      360
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._get_fields_and_offsets": {
  "data": {
   "lineno": 874
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._is_string_like": {
  "data": {
   "shadows": "numpy.lib._iotools._is_string_like"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions._izip_fields": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      302
     ]
    },
    "isinstance": {
     "line number": [
      303,
      306
     ]
    },
    "len": {
     "line number": [
      306
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      303
     ]
    },
    "numpy.void": {
     "line number": [
      306
     ]
    },
    "tuple": {
     "line number": [
      306
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._izip_fields_flat": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      289
     ]
    },
    "numpy.void": {
     "line number": [
      289
     ]
    },
    "tuple": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._izip_records_dispatcher": {
  "data": {
   "lineno": 313
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._join_by_dispatcher": {
  "data": {
   "lineno": 1365
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._keep_fields": {
  "data": {
   "lineno": 590,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      610
     ]
    },
    "numpy.lib.recfunctions._fix_output": {
     "line number": [
      612
     ]
    },
    "numpy.lib.recfunctions.recursive_fill_fields": {
     "line number": [
      611
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._merge_arrays_dispatcher": {
  "data": {
   "lineno": 378
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._rec_append_fields_dispatcher": {
  "data": {
   "lineno": 749
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._rec_drop_fields_dispatcher": {
  "data": {
   "lineno": 615
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._rec_join_dispatcher": {
  "data": {
   "lineno": 1551
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._recursive_fill_fields_dispatcher": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "input": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._rename_fields_dispatcher": {
  "data": {
   "lineno": 627
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._repack_fields_dispatcher": {
  "data": {
   "lineno": 790
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._require_fields_dispatcher": {
  "data": {
   "lineno": 1167
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._stack_arrays_dispatcher": {
  "data": {
   "lineno": 1213
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._structured_to_unstructured_dispatcher": {
  "data": {
   "lineno": 893
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._unstructured_to_structured_dispatcher": {
  "data": {
   "lineno": 981
  },
  "type": "function"
 },
 "numpy.lib.recfunctions._zip_dtype_dispatcher": {
  "data": {
   "lineno": 199
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.append_fields": {
  "data": {
   "lineno": 678,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      713,
      729
     ]
    },
    "future_builtins.zip": {
     "line number": [
      720,
      731
     ]
    },
    "isinstance": {
     "line number": [
      710,
      714,
      722
     ]
    },
    "len": {
     "line number": [
      711,
      711,
      724,
      724,
      725,
      726,
      734,
      741,
      741
     ]
    },
    "list": {
     "line number": [
      710,
      722
     ]
    },
    "max": {
     "line number": [
      741
     ]
    },
    "numpy.array": {
     "line number": [
      719,
      730
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      714
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      678
     ]
    },
    "numpy.lib.recfunctions._append_fields_dispatcher": {
     "line number": [
      678
     ]
    },
    "numpy.lib.recfunctions._fix_output": {
     "line number": [
      746
     ]
    },
    "numpy.lib.recfunctions.get_fieldspec": {
     "line number": [
      742,
      742
     ]
    },
    "numpy.lib.recfunctions.merge_arrays": {
     "line number": [
      733,
      735
     ]
    },
    "numpy.lib.recfunctions.recursive_fill_fields": {
     "line number": [
      743,
      744
     ]
    },
    "numpy.ma.masked_all": {
     "line number": [
      740
     ]
    },
    "tuple": {
     "line number": [
      710,
      722
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.apply_along_fields": {
  "data": {
   "lineno": 1084,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1119
     ]
    },
    "func": {
     "line number": [
      1122
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      1084
     ]
    },
    "numpy.lib.recfunctions._apply_along_fields_dispatcher": {
     "line number": [
      1084
     ]
    },
    "numpy.lib.recfunctions.structured_to_unstructured": {
     "line number": [
      1121
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.array_function_dispatch": {
  "data": {
   "shadows": "numpy.core.overrides.array_function_dispatch"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.assign_fields_by_name": {
  "data": {
   "lineno": 1129,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      1129
     ]
    },
    "numpy.lib.recfunctions._assign_fields_by_name_dispatcher": {
     "line number": [
      1129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.basestring": {
  "data": {
   "shadows": "numpy.compat.basestring"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.drop_fields": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": {
    "_drop_descr": {
     "line number": [
      581
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      525
     ]
    },
    "numpy.empty": {
     "line number": [
      585
     ]
    },
    "numpy.lib._iotools._is_string_like": {
     "line number": [
      561
     ]
    },
    "numpy.lib.recfunctions._drop_fields_dispatcher": {
     "line number": [
      525
     ]
    },
    "numpy.lib.recfunctions._fix_output": {
     "line number": [
      587
     ]
    },
    "numpy.lib.recfunctions.recursive_fill_fields": {
     "line number": [
      586
     ]
    },
    "set": {
     "line number": [
      564
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.drop_fields._drop_descr": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": {
    "_drop_descr": {
     "line number": [
      574
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.find_duplicates": {
  "data": {
   "lineno": 1310,
   "symbols_in_volume": {
    "numpy.asanyarray": {
     "line number": [
      1336
     ]
    },
    "numpy.concatenate": {
     "line number": [
      1355
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      1310
     ]
    },
    "numpy.lib.recfunctions._find_duplicates_dispatcher": {
     "line number": [
      1310
     ]
    },
    "numpy.lib.recfunctions.get_fieldstructure": {
     "line number": [
      1338
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.flatten_descr": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "tuple": {
     "line number": [
      196
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.get_fieldspec": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "len": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.get_fieldstructure": {
  "data": {
   "lineno": 235
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.get_names": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "tuple": {
     "line number": [
      136,
      139
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.get_names_flat": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "tuple": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.izip_records": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      317
     ]
    },
    "numpy.lib.recfunctions._izip_fields": {
     "line number": [
      336
     ]
    },
    "numpy.lib.recfunctions._izip_fields_flat": {
     "line number": [
      334
     ]
    },
    "numpy.lib.recfunctions._izip_records_dispatcher": {
     "line number": [
      317
     ]
    },
    "numpy.lib.recfunctions.itertools": {
     "line number": [
      339,
      341
     ]
    },
    "numpy.lib.recfunctions.sys": {
     "line number": [
      338
     ]
    },
    "tuple": {
     "line number": [
      344
     ]
    },
    "zip_longest": {
     "line number": [
      343
     ]
    },
    "zipfunc": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.join_by": {
  "data": {
   "lineno": 1371,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1424,
      1435,
      1438,
      1440,
      1455,
      1505
     ]
    },
    "dict": {
     "line number": [
      1547
     ]
    },
    "enumerate": {
     "line number": [
      1434
     ]
    },
    "isinstance": {
     "line number": [
      1429
     ]
    },
    "len": {
     "line number": [
      1433,
      1433,
      1447,
      1474,
      1474,
      1481,
      1481,
      1485
     ]
    },
    "list": {
     "line number": [
      1502
     ]
    },
    "max": {
     "line number": [
      1513,
      1525
     ]
    },
    "next": {
     "line number": [
      1434
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      1429
     ]
    },
    "numpy.concatenate": {
     "line number": [
      1479,
      1480,
      1484
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      1371
     ]
    },
    "numpy.dtype": {
     "line number": [
      1522
     ]
    },
    "numpy.lib.recfunctions._fix_defaults": {
     "line number": [
      1548
     ]
    },
    "numpy.lib.recfunctions._fix_output": {
     "line number": [
      1548
     ]
    },
    "numpy.lib.recfunctions._join_by_dispatcher": {
     "line number": [
      1371
     ]
    },
    "numpy.lib.recfunctions._keep_fields": {
     "line number": [
      1460,
      1461
     ]
    },
    "numpy.lib.recfunctions.get_fieldspec": {
     "line number": [
      1491,
      1494,
      1499
     ]
    },
    "numpy.ma.concatenate": {
     "line number": [
      1464,
      1469
     ]
    },
    "numpy.ma.masked_all": {
     "line number": [
      1527
     ]
    },
    "set": {
     "line number": [
      1433,
      1451,
      1451,
      1451
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.ma": {
  "data": {
   "shadows": "numpy.ma"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.merge_arrays": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "future_builtins.zip": {
     "line number": [
      471,
      500
     ]
    },
    "isinstance": {
     "line number": [
      437,
      479,
      505
     ]
    },
    "len": {
     "line number": [
      434,
      480,
      506
     ]
    },
    "list": {
     "line number": [
      495
     ]
    },
    "max": {
     "line number": [
      463
     ]
    },
    "numpy.array": {
     "line number": [
      484,
      509
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      435,
      460
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      383
     ]
    },
    "numpy.dtype": {
     "line number": [
      441
     ]
    },
    "numpy.fromiter": {
     "line number": [
      494,
      513
     ]
    },
    "numpy.lib.recfunctions._check_fill_value": {
     "line number": [
      478,
      504
     ]
    },
    "numpy.lib.recfunctions._merge_arrays_dispatcher": {
     "line number": [
      383
     ]
    },
    "numpy.lib.recfunctions.itertools": {
     "line number": [
      490,
      491,
      512
     ]
    },
    "numpy.lib.recfunctions.izip_records": {
     "line number": [
      493,
      495,
      513
     ]
    },
    "numpy.lib.recfunctions.zip_dtype": {
     "line number": [
      442,
      465
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      450
     ]
    },
    "numpy.ma.array": {
     "line number": [
      494
     ]
    },
    "numpy.ma.getmaskarray": {
     "line number": [
      475
     ]
    },
    "numpy.ma.mrecords.MaskedRecords": {
     "line number": [
      448,
      497
     ]
    },
    "numpy.ndarray": {
     "line number": [
      437,
      454,
      479,
      505
     ]
    },
    "numpy.ones": {
     "line number": [
      485
     ]
    },
    "numpy.recarray": {
     "line number": [
      452,
      516
     ]
    },
    "numpy.void": {
     "line number": [
      437,
      479,
      505
     ]
    },
    "tuple": {
     "line number": [
      462,
      493,
      513
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.ndarray": {
  "data": {
   "shadows": "numpy.ndarray"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.rec_append_fields": {
  "data": {
   "lineno": 755,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      755
     ]
    },
    "numpy.lib.recfunctions._rec_append_fields_dispatcher": {
     "line number": [
      755
     ]
    },
    "numpy.lib.recfunctions.append_fields": {
     "line number": [
      786
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.rec_drop_fields": {
  "data": {
   "lineno": 619,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      619
     ]
    },
    "numpy.lib.recfunctions._rec_drop_fields_dispatcher": {
     "line number": [
      619
     ]
    },
    "numpy.lib.recfunctions.drop_fields": {
     "line number": [
      624
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.rec_join": {
  "data": {
   "lineno": 1557,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1568
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      1557
     ]
    },
    "numpy.lib.recfunctions._rec_join_dispatcher": {
     "line number": [
      1557
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      1570
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.recarray": {
  "data": {
   "shadows": "numpy.recarray"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.recursive_fill_fields": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      71
     ]
    },
    "input": {
     "line number": [
      70
     ]
    },
    "len": {
     "line number": [
      76
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      40
     ]
    },
    "numpy.lib.recfunctions._recursive_fill_fields_dispatcher": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.rename_fields": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": {
    "_recursive_rename_fields": {
     "line number": [
      667
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      631
     ]
    },
    "numpy.lib.recfunctions._rename_fields_dispatcher": {
     "line number": [
      631
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.rename_fields._recursive_rename_fields": {
  "data": {
   "lineno": 655,
   "symbols_in_volume": {
    "_recursive_rename_fields": {
     "line number": [
      662
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.repack_fields": {
  "data": {
   "lineno": 794,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      851
     ]
    },
    "len": {
     "line number": [
      866
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      794
     ]
    },
    "numpy.dtype": {
     "line number": [
      851,
      871,
      872
     ]
    },
    "numpy.lib.recfunctions._repack_fields_dispatcher": {
     "line number": [
      794
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.require_fields": {
  "data": {
   "lineno": 1170,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      1170
     ]
    },
    "numpy.empty": {
     "line number": [
      1208
     ]
    },
    "numpy.lib.recfunctions._require_fields_dispatcher": {
     "line number": [
      1170
     ]
    },
    "numpy.lib.recfunctions.assign_fields_by_name": {
     "line number": [
      1209
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.stack_arrays": {
  "data": {
   "lineno": 1218,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1281
     ]
    },
    "future_builtins.zip": {
     "line number": [
      1291
     ]
    },
    "isinstance": {
     "line number": [
      1258
     ]
    },
    "len": {
     "line number": [
      1260,
      1263,
      1284,
      1294
     ]
    },
    "max": {
     "line number": [
      1279
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      1262
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      1218
     ]
    },
    "numpy.cumsum": {
     "line number": [
      1289
     ]
    },
    "numpy.lib.recfunctions._fix_defaults": {
     "line number": [
      1301
     ]
    },
    "numpy.lib.recfunctions._fix_output": {
     "line number": [
      1301
     ]
    },
    "numpy.lib.recfunctions._stack_arrays_dispatcher": {
     "line number": [
      1218
     ]
    },
    "numpy.lib.recfunctions.get_fieldspec": {
     "line number": [
      1268,
      1271
     ]
    },
    "numpy.ma.concatenate": {
     "line number": [
      1285
     ]
    },
    "numpy.ma.masked_all": {
     "line number": [
      1288
     ]
    },
    "numpy.ndarray": {
     "line number": [
      1258
     ]
    },
    "numpy.r_": {
     "line number": [
      1289
     ]
    },
    "numpy.sum": {
     "line number": [
      1288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.structured_to_unstructured": {
  "data": {
   "lineno": 897,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      970
     ]
    },
    "ValueError": {
     "line number": [
      949
     ]
    },
    "future_builtins.zip": {
     "line number": [
      953
     ]
    },
    "len": {
     "line number": [
      952
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      897
     ]
    },
    "numpy.dtype": {
     "line number": [
      965,
      974
     ]
    },
    "numpy.lib.recfunctions._get_fields_and_offsets": {
     "line number": [
      951
     ]
    },
    "numpy.lib.recfunctions._structured_to_unstructured_dispatcher": {
     "line number": [
      897
     ]
    },
    "numpy.result_type": {
     "line number": [
      957
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      969
     ]
    },
    "range": {
     "line number": [
      954
     ]
    },
    "sum": {
     "line number": [
      979
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.unstructured_to_structured": {
  "data": {
   "lineno": 985,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1040,
      1051,
      1056,
      1060
     ]
    },
    "future_builtins.zip": {
     "line number": [
      1048,
      1054
     ]
    },
    "len": {
     "line number": [
      1062
     ]
    },
    "numpy.ascontiguousarray": {
     "line number": [
      1069
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      985
     ]
    },
    "numpy.dtype": {
     "line number": [
      1046,
      1067,
      1072
     ]
    },
    "numpy.lib.recfunctions._get_fields_and_offsets": {
     "line number": [
      1047,
      1053
     ]
    },
    "numpy.lib.recfunctions._unstructured_to_structured_dispatcher": {
     "line number": [
      985
     ]
    },
    "range": {
     "line number": [
      1045,
      1062
     ]
    },
    "sum": {
     "line number": [
      1055
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.zip": {
  "data": {
   "shadows": "future_builtins.zip"
  },
  "type": "import"
 },
 "numpy.lib.recfunctions.zip_descr": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      220
     ]
    },
    "numpy.lib.recfunctions._zip_dtype_dispatcher": {
     "line number": [
      220
     ]
    },
    "numpy.lib.recfunctions.zip_dtype": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.recfunctions.zip_dtype": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "len": {
     "line number": [
      212
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      203
     ]
    },
    "numpy.dtype": {
     "line number": [
      217
     ]
    },
    "numpy.lib.recfunctions._zip_dtype_dispatcher": {
     "line number": [
      203
     ]
    },
    "numpy.lib.recfunctions.flatten_descr": {
     "line number": [
      208
     ]
    },
    "numpy.lib.recfunctions.get_fieldspec": {
     "line number": [
      214
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.numeric.log": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.scimath.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "numpy.lib.scimath._fix_int_lt_zero": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "numpy.core.numeric.any": {
     "line number": [
      149
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      148
     ]
    },
    "numpy.lib.type_check.isreal": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath._fix_real_abs_gt_1": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      176
     ]
    },
    "numpy.core.numeric.any": {
     "line number": [
      176
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      175
     ]
    },
    "numpy.lib.scimath._tocomplex": {
     "line number": [
      177
     ]
    },
    "numpy.lib.type_check.isreal": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath._fix_real_lt_zero": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "numpy.core.numeric.any": {
     "line number": [
      122
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      121
     ]
    },
    "numpy.lib.scimath._tocomplex": {
     "line number": [
      123
     ]
    },
    "numpy.lib.type_check.isreal": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath._ln2": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.lib.scimath._logn_dispatcher": {
  "data": {
   "lineno": 327
  },
  "type": "function"
 },
 "numpy.lib.scimath._power_dispatcher": {
  "data": {
   "lineno": 415
  },
  "type": "function"
 },
 "numpy.lib.scimath._tocomplex": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      92
     ]
    },
    "numpy.core.numerictypes.byte": {
     "line number": [
      92
     ]
    },
    "numpy.core.numerictypes.cdouble": {
     "line number": [
      96
     ]
    },
    "numpy.core.numerictypes.csingle": {
     "line number": [
      93,
      94
     ]
    },
    "numpy.core.numerictypes.short": {
     "line number": [
      92
     ]
    },
    "numpy.core.numerictypes.single": {
     "line number": [
      92
     ]
    },
    "numpy.core.numerictypes.ubyte": {
     "line number": [
      92
     ]
    },
    "numpy.core.numerictypes.ushort": {
     "line number": [
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath._unary_dispatcher": {
  "data": {
   "lineno": 181
  },
  "type": "function"
 },
 "numpy.lib.scimath.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.scimath.any": {
  "data": {
   "shadows": "numpy.core.numeric.any"
  },
  "type": "import"
 },
 "numpy.lib.scimath.arccos": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "numpy.core.numeric.arccos": {
     "line number": [
      506
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      464
     ]
    },
    "numpy.lib.scimath._fix_real_abs_gt_1": {
     "line number": [
      505
     ]
    },
    "numpy.lib.scimath._unary_dispatcher": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath.arcsin": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": {
    "numpy.core.numeric.arcsin": {
     "line number": [
      552
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      509
     ]
    },
    "numpy.lib.scimath._fix_real_abs_gt_1": {
     "line number": [
      551
     ]
    },
    "numpy.lib.scimath._unary_dispatcher": {
     "line number": [
      509
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath.arctanh": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": {
    "numpy.core.numeric.arctanh": {
     "line number": [
      600
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      555
     ]
    },
    "numpy.lib.scimath._fix_real_abs_gt_1": {
     "line number": [
      599
     ]
    },
    "numpy.lib.scimath._unary_dispatcher": {
     "line number": [
      555
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath.array_function_dispatch": {
  "data": {
   "shadows": "numpy.core.overrides.array_function_dispatch"
  },
  "type": "import"
 },
 "numpy.lib.scimath.asarray": {
  "data": {
   "shadows": "numpy.core.numeric.asarray"
  },
  "type": "import"
 },
 "numpy.lib.scimath.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.scimath.isreal": {
  "data": {
   "shadows": "numpy.lib.type_check.isreal"
  },
  "type": "import"
 },
 "numpy.lib.scimath.log": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "numpy.core.numeric.log": {
     "line number": [
      274
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      229
     ]
    },
    "numpy.lib.scimath._fix_real_lt_zero": {
     "line number": [
      273
     ]
    },
    "numpy.lib.scimath._unary_dispatcher": {
     "line number": [
      229
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath.log10": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": {
    "numpy.core.numeric.log10": {
     "line number": [
      324
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      277
     ]
    },
    "numpy.lib.scimath._fix_real_lt_zero": {
     "line number": [
      323
     ]
    },
    "numpy.lib.scimath._unary_dispatcher": {
     "line number": [
      277
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath.log2": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": {
    "numpy.core.numeric.log2": {
     "line number": [
      412
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      367
     ]
    },
    "numpy.lib.scimath._fix_real_lt_zero": {
     "line number": [
      411
     ]
    },
    "numpy.lib.scimath._unary_dispatcher": {
     "line number": [
      367
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath.logn": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "numpy.core.numeric.log": {
     "line number": [
      364,
      364
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      331
     ]
    },
    "numpy.lib.scimath._fix_real_lt_zero": {
     "line number": [
      362,
      363
     ]
    },
    "numpy.lib.scimath._logn_dispatcher": {
     "line number": [
      331
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath.nt": {
  "data": {
   "shadows": "numpy.core.numerictypes"
  },
  "type": "import"
 },
 "numpy.lib.scimath.nx": {
  "data": {
   "shadows": "numpy.core.numeric"
  },
  "type": "import"
 },
 "numpy.lib.scimath.power": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": {
    "numpy.core.numeric.power": {
     "line number": [
      461
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      419
     ]
    },
    "numpy.lib.scimath._fix_int_lt_zero": {
     "line number": [
      460
     ]
    },
    "numpy.lib.scimath._fix_real_lt_zero": {
     "line number": [
      459
     ]
    },
    "numpy.lib.scimath._power_dispatcher": {
     "line number": [
      419
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.scimath.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.scimath.sqrt": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "numpy.core.numeric.sqrt": {
     "line number": [
      226
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      185
     ]
    },
    "numpy.lib.scimath._fix_real_lt_zero": {
     "line number": [
      225
     ]
    },
    "numpy.lib.scimath._unary_dispatcher": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      10
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      12
     ]
    },
    "numpy.lib.setup.configuration": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.lib.setup.configuration": {
  "data": {
   "lineno": 3,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.lib.shape_base": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      29
     ]
    },
    "numpy.core.vstack": {
     "line number": [
      592
     ]
    },
    "numpy.lib.shape_base.functools": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.shape_base.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.lib.shape_base._apply_along_axis_dispatcher": {
  "data": {
   "lineno": 266
  },
  "type": "function"
 },
 "numpy.lib.shape_base._apply_over_axes_dispatcher": {
  "data": {
   "lineno": 418
  },
  "type": "function"
 },
 "numpy.lib.shape_base._array_split_dispatcher": {
  "data": {
   "lineno": 711
  },
  "type": "function"
 },
 "numpy.lib.shape_base._arrays_for_stack_dispatcher": {
  "data": {
   "shadows": "numpy.core.shape_base._arrays_for_stack_dispatcher"
  },
  "type": "import"
 },
 "numpy.lib.shape_base._column_stack_dispatcher": {
  "data": {
   "lineno": 595,
   "symbols_in_volume": {
    "numpy.core.shape_base._arrays_for_stack_dispatcher": {
     "line number": [
      596
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base._dstack_dispatcher": {
  "data": {
   "lineno": 643,
   "symbols_in_volume": {
    "numpy.core.shape_base._arrays_for_stack_dispatcher": {
     "line number": [
      644
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base._expand_dims_dispatcher": {
  "data": {
   "lineno": 509
  },
  "type": "function"
 },
 "numpy.lib.shape_base._hvdsplit_dispatcher": {
  "data": {
   "lineno": 854
  },
  "type": "function"
 },
 "numpy.lib.shape_base._kron_dispatcher": {
  "data": {
   "lineno": 1046
  },
  "type": "function"
 },
 "numpy.lib.shape_base._make_along_axis_idx": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      35
     ]
    },
    "ValueError": {
     "line number": [
      37
     ]
    },
    "len": {
     "line number": [
      36
     ]
    },
    "list": {
     "line number": [
      40,
      40
     ]
    },
    "numpy.core.numeric.arange": {
     "line number": [
      50
     ]
    },
    "numpy.core.numeric.integer": {
     "line number": [
      34
     ]
    },
    "numpy.core.numeric.issubdtype": {
     "line number": [
      34
     ]
    },
    "range": {
     "line number": [
      40,
      40
     ]
    },
    "tuple": {
     "line number": [
      52
     ]
    },
    "zip": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base._nx": {
  "data": {
   "shadows": "numpy.core.numeric"
  },
  "type": "import"
 },
 "numpy.lib.shape_base._put_along_axis_dispatcher": {
  "data": {
   "lineno": 176
  },
  "type": "function"
 },
 "numpy.lib.shape_base._replace_zero_by_x_arrays": {
  "data": {
   "lineno": 702,
   "symbols_in_volume": {
    "len": {
     "line number": [
      703
     ]
    },
    "numpy.core.numeric.empty": {
     "line number": [
      705,
      707
     ]
    },
    "numpy.core.numeric.equal": {
     "line number": [
      706
     ]
    },
    "numpy.core.numeric.ndim": {
     "line number": [
      704
     ]
    },
    "numpy.core.numeric.shape": {
     "line number": [
      706
     ]
    },
    "numpy.core.numeric.sometrue": {
     "line number": [
      706
     ]
    },
    "range": {
     "line number": [
      703
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base._split_dispatcher": {
  "data": {
   "lineno": 771
  },
  "type": "function"
 },
 "numpy.lib.shape_base._take_along_axis_dispatcher": {
  "data": {
   "lineno": 55
  },
  "type": "function"
 },
 "numpy.lib.shape_base._tile_dispatcher": {
  "data": {
   "lineno": 1150
  },
  "type": "function"
 },
 "numpy.lib.shape_base._warn_for_nonsequence": {
  "data": {
   "shadows": "numpy.core.shape_base._warn_for_nonsequence"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.apply_along_axis": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": {
    "Ellipsis": {
     "line number": [
      373
     ]
    },
    "StopIteration": {
     "line number": [
      378
     ]
    },
    "ValueError": {
     "line number": [
      379
     ]
    },
    "func1d": {
     "line number": [
      380,
      403
     ]
    },
    "isinstance": {
     "line number": [
      397,
      405
     ]
    },
    "list": {
     "line number": [
      367,
      389
     ]
    },
    "next": {
     "line number": [
      377
     ]
    },
    "numpy.core.fromnumeric.transpose": {
     "line number": [
      368,
      410,
      414
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      364
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      362,
      380,
      403
     ]
    },
    "numpy.core.numeric.zeros": {
     "line number": [
      386
     ]
    },
    "numpy.lib.index_tricks.ndindex": {
     "line number": [
      372
     ]
    },
    "numpy.lib.shape_base._apply_along_axis_dispatcher": {
     "line number": [
      270
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      270
     ]
    },
    "numpy.matrixlib.defmatrix.matrix": {
     "line number": [
      397,
      405
     ]
    },
    "range": {
     "line number": [
      367,
      389
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.apply_over_axes": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      504
     ]
    },
    "func": {
     "line number": [
      496
     ]
    },
    "numpy.core.numeric.array": {
     "line number": [
      490
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      488
     ]
    },
    "numpy.lib.shape_base._apply_over_axes_dispatcher": {
     "line number": [
      422
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      422
     ]
    },
    "numpy.lib.shape_base.expand_dims": {
     "line number": [
      500
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.array": {
  "data": {
   "shadows": "numpy.core.numeric.array"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.array_function_dispatch": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "numpy.lib.shape_base.array_split": {
  "data": {
   "lineno": 715,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      744
     ]
    },
    "TypeError": {
     "line number": [
      750
     ]
    },
    "ValueError": {
     "line number": [
      754
     ]
    },
    "divmod": {
     "line number": [
      755
     ]
    },
    "int": {
     "line number": [
      752
     ]
    },
    "len": {
     "line number": [
      745,
      748
     ]
    },
    "list": {
     "line number": [
      749
     ]
    },
    "numpy.core.numeric.array": {
     "line number": [
      759
     ]
    },
    "numpy.core.numeric.intp": {
     "line number": [
      759
     ]
    },
    "numpy.core.numeric.swapaxes": {
     "line number": [
      762,
      766
     ]
    },
    "numpy.lib.shape_base._array_split_dispatcher": {
     "line number": [
      715
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      715
     ]
    },
    "range": {
     "line number": [
      763
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.asanyarray": {
  "data": {
   "shadows": "numpy.core.numeric.asanyarray"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.asarray": {
  "data": {
   "shadows": "numpy.core.numeric.asarray"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.atleast_3d": {
  "data": {
   "shadows": "numpy.core.atleast_3d"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.column_stack": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": {
    "numpy.core.numeric.array": {
     "line number": [
      636,
      638
     ]
    },
    "numpy.core.numeric.concatenate": {
     "line number": [
      640
     ]
    },
    "numpy.core.shape_base._warn_for_nonsequence": {
     "line number": [
      633
     ]
    },
    "numpy.lib.shape_base._column_stack_dispatcher": {
     "line number": [
      599
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      599
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.concatenate": {
  "data": {
   "shadows": "numpy.core.numeric.concatenate"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.dsplit": {
  "data": {
   "lineno": 975,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1018
     ]
    },
    "numpy.core.numeric.ndim": {
     "line number": [
      1017
     ]
    },
    "numpy.lib.shape_base._hvdsplit_dispatcher": {
     "line number": [
      975
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      975
     ]
    },
    "numpy.lib.shape_base.split": {
     "line number": [
      1019
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.dstack": {
  "data": {
   "lineno": 647,
   "symbols_in_volume": {
    "numpy.core.atleast_3d": {
     "line number": [
      699
     ]
    },
    "numpy.core.numeric.concatenate": {
     "line number": [
      699
     ]
    },
    "numpy.core.shape_base._warn_for_nonsequence": {
     "line number": [
      698
     ]
    },
    "numpy.lib.shape_base._dstack_dispatcher": {
     "line number": [
      647
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      647
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.expand_dims": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      583
     ]
    },
    "isinstance": {
     "line number": [
      573
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      576
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      574
     ]
    },
    "numpy.lib.shape_base._expand_dims_dispatcher": {
     "line number": [
      513
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      513
     ]
    },
    "numpy.lib.shape_base.warnings": {
     "line number": [
      581
     ]
    },
    "numpy.matrixlib.defmatrix.matrix": {
     "line number": [
      573
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.get_array_prepare": {
  "data": {
   "lineno": 1021,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      1027
     ]
    },
    "getattr": {
     "line number": [
      1026
     ]
    },
    "hasattr": {
     "line number": [
      1028
     ]
    },
    "sorted": {
     "line number": [
      1026
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.get_array_wrap": {
  "data": {
   "lineno": 1033,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      1039
     ]
    },
    "getattr": {
     "line number": [
      1038
     ]
    },
    "hasattr": {
     "line number": [
      1040
     ]
    },
    "sorted": {
     "line number": [
      1038
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.hsplit": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      915
     ]
    },
    "numpy.core.numeric.ndim": {
     "line number": [
      914
     ]
    },
    "numpy.lib.shape_base._hvdsplit_dispatcher": {
     "line number": [
      858
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      858
     ]
    },
    "numpy.lib.shape_base.split": {
     "line number": [
      917,
      919
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.kron": {
  "data": {
   "lineno": 1050,
   "symbols_in_volume": {
    "numpy.core.fromnumeric.reshape": {
     "line number": [
      1127,
      1129
     ]
    },
    "numpy.core.numeric.array": {
     "line number": [
      1120
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      1119
     ]
    },
    "numpy.core.numeric.concatenate": {
     "line number": [
      1140
     ]
    },
    "numpy.core.numeric.multiply": {
     "line number": [
      1123
     ]
    },
    "numpy.core.numeric.outer": {
     "line number": [
      1137
     ]
    },
    "numpy.lib.shape_base._kron_dispatcher": {
     "line number": [
      1050
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      1050
     ]
    },
    "numpy.lib.shape_base.get_array_prepare": {
     "line number": [
      1141
     ]
    },
    "numpy.lib.shape_base.get_array_wrap": {
     "line number": [
      1144
     ]
    },
    "range": {
     "line number": [
      1139
     ]
    },
    "wrapper": {
     "line number": [
      1143,
      1144,
      1145,
      1146
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.matrix": {
  "data": {
   "shadows": "numpy.matrixlib.defmatrix.matrix"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.ndindex": {
  "data": {
   "shadows": "numpy.lib.index_tricks.ndindex"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.normalize_axis_index": {
  "data": {
   "shadows": "numpy.core.multiarray.normalize_axis_index"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.outer": {
  "data": {
   "shadows": "numpy.core.numeric.outer"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.overrides": {
  "data": {
   "shadows": "numpy.core.overrides"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.product": {
  "data": {
   "shadows": "numpy.core.fromnumeric.product"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.put_along_axis": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "len": {
     "line number": [
      257
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      259
     ]
    },
    "numpy.lib.shape_base._make_along_axis_idx": {
     "line number": [
      263
     ]
    },
    "numpy.lib.shape_base._put_along_axis_dispatcher": {
     "line number": [
      180
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.reshape": {
  "data": {
   "shadows": "numpy.core.fromnumeric.reshape"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.row_stack": {
  "data": {
   "lineno": 592
  },
  "type": "constant"
 },
 "numpy.lib.shape_base.split": {
  "data": {
   "lineno": 775,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      844
     ]
    },
    "ValueError": {
     "line number": [
      848
     ]
    },
    "len": {
     "line number": [
      843
     ]
    },
    "numpy.lib.shape_base._split_dispatcher": {
     "line number": [
      775
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      775
     ]
    },
    "numpy.lib.shape_base.array_split": {
     "line number": [
      850
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.take_along_axis": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "len": {
     "line number": [
      166
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      169
     ]
    },
    "numpy.lib.shape_base._make_along_axis_idx": {
     "line number": [
      173
     ]
    },
    "numpy.lib.shape_base._take_along_axis_dispatcher": {
     "line number": [
      59
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.tile": {
  "data": {
   "lineno": 1154,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1223
     ]
    },
    "all": {
     "line number": [
      1226
     ]
    },
    "isinstance": {
     "line number": [
      1226
     ]
    },
    "len": {
     "line number": [
      1225
     ]
    },
    "numpy.core.numeric.array": {
     "line number": [
      1229,
      1233
     ]
    },
    "numpy.core.numeric.ndarray": {
     "line number": [
      1226
     ]
    },
    "numpy.lib.shape_base._tile_dispatcher": {
     "line number": [
      1154
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      1154
     ]
    },
    "tuple": {
     "line number": [
      1222,
      1236
     ]
    },
    "zip": {
     "line number": [
      1236,
      1239
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.transpose": {
  "data": {
   "shadows": "numpy.core.fromnumeric.transpose"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.vsplit": {
  "data": {
   "lineno": 922,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      971
     ]
    },
    "numpy.core.numeric.ndim": {
     "line number": [
      970
     ]
    },
    "numpy.lib.shape_base._hvdsplit_dispatcher": {
     "line number": [
      922
     ]
    },
    "numpy.lib.shape_base.array_function_dispatch": {
     "line number": [
      922
     ]
    },
    "numpy.lib.shape_base.split": {
     "line number": [
      972
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.shape_base.vstack": {
  "data": {
   "shadows": "numpy.core.vstack"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.lib.shape_base.zeros": {
  "data": {
   "shadows": "numpy.core.numeric.zeros"
  },
  "type": "import"
 },
 "numpy.lib.stride_tricks": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.stride_tricks.DummyArray": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "object": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.stride_tricks.DummyArray.__init__": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "numpy.lib.stride_tricks.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.lib.stride_tricks._broadcast_arrays_dispatcher": {
  "data": {
   "lineno": 204
  },
  "type": "function"
 },
 "numpy.lib.stride_tricks._broadcast_shape": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "len": {
     "line number": [
      195
     ]
    },
    "numpy.broadcast": {
     "line number": [
      193,
      200
     ]
    },
    "numpy.lib.stride_tricks.broadcast_to": {
     "line number": [
      199
     ]
    },
    "range": {
     "line number": [
      195
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.stride_tricks._broadcast_to": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      120,
      122
     ]
    },
    "any": {
     "line number": [
      121
     ]
    },
    "numpy.array": {
     "line number": [
      118
     ]
    },
    "numpy.iterable": {
     "line number": [
      117
     ]
    },
    "numpy.lib.stride_tricks._maybe_view_as_subclass": {
     "line number": [
      133
     ]
    },
    "numpy.nditer": {
     "line number": [
      127
     ]
    },
    "tuple": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.stride_tricks._broadcast_to_dispatcher": {
  "data": {
   "lineno": 139
  },
  "type": "function"
 },
 "numpy.lib.stride_tricks._maybe_view_as_subclass": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "type": {
     "line number": [
      27,
      27,
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.stride_tricks.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.stride_tricks.array_function_dispatch": {
  "data": {
   "shadows": "numpy.core.overrides.array_function_dispatch"
  },
  "type": "import"
 },
 "numpy.lib.stride_tricks.as_strided": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      97
     ]
    },
    "numpy.array": {
     "line number": [
      96
     ]
    },
    "numpy.asarray": {
     "line number": [
      103
     ]
    },
    "numpy.lib.stride_tricks.DummyArray": {
     "line number": [
      103
     ]
    },
    "numpy.lib.stride_tricks._maybe_view_as_subclass": {
     "line number": [
      108
     ]
    },
    "tuple": {
     "line number": [
      99,
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.stride_tricks.broadcast_arrays": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      255
     ]
    },
    "all": {
     "line number": [
      261
     ]
    },
    "list": {
     "line number": [
      256
     ]
    },
    "numpy.array": {
     "line number": [
      257
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      208
     ]
    },
    "numpy.lib.stride_tricks._broadcast_arrays_dispatcher": {
     "line number": [
      208
     ]
    },
    "numpy.lib.stride_tricks._broadcast_shape": {
     "line number": [
      259
     ]
    },
    "numpy.lib.stride_tricks._broadcast_to": {
     "line number": [
      267
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.stride_tricks.broadcast_to": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      143
     ]
    },
    "numpy.lib.stride_tricks._broadcast_to": {
     "line number": [
      182
     ]
    },
    "numpy.lib.stride_tricks._broadcast_to_dispatcher": {
     "line number": [
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.stride_tricks.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.stride_tricks.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.stride_tricks.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.test": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "numpy.lib.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test__datasource": {
  "data": {
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.sys": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.tests.test__datasource.NamedTemporaryFile": {
  "data": {
   "shadows": "tempfile.NamedTemporaryFile"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceAbspath": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "object": {
     "line number": [
      216
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceAbspath.setup": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "numpy.lib._datasource.DataSource": {
     "line number": [
      219
     ]
    },
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      218
     ]
    },
    "tempfile.mkdtemp": {
     "line number": [
      218
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceAbspath.teardown": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "shutil.rmtree": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidFile": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      248
     ]
    },
    "numpy.lib.tests.test__datasource.valid_textfile": {
     "line number": [
      246,
      247
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      250,
      252
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidHTTP": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.invalid_httpurl": {
     "line number": [
      240
     ]
    },
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      241,
      242
     ]
    },
    "numpy.lib.tests.test__datasource.valid_httpurl": {
     "line number": [
      243
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      243
     ]
    },
    "urlparse.urlparse": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidFile": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      233
     ]
    },
    "numpy.lib.tests.test__datasource.valid_textfile": {
     "line number": [
      232
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      235,
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidHTTP": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      227,
      228
     ]
    },
    "numpy.lib.tests.test__datasource.valid_httpurl": {
     "line number": [
      226,
      229
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      229
     ]
    },
    "urlparse.urlparse": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_sandboxing": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.http_path": {
     "line number": [
      265
     ]
    },
    "numpy.lib.tests.test__datasource.invalid_httpurl": {
     "line number": [
      261
     ]
    },
    "numpy.lib.tests.test__datasource.malicious_files": {
     "line number": [
      264
     ]
    },
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      256,
      258
     ]
    },
    "numpy.lib.tests.test__datasource.valid_httpurl": {
     "line number": [
      260
     ]
    },
    "numpy.lib.tests.test__datasource.valid_textfile": {
     "line number": [
      255
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      260,
      261,
      262,
      263,
      265,
      266
     ]
    },
    "tmp_path": {
     "line number": [
      260,
      261,
      262,
      263,
      265,
      266
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_windows_os_sep": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      269,
      271,
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceExists": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "object": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceExists.setup": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "numpy.lib._datasource.DataSource": {
     "line number": [
      189
     ]
    },
    "tempfile.mkdtemp": {
     "line number": [
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceExists.teardown": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "shutil.rmtree": {
     "line number": [
      192
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceExists.test_InvalidFile": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.invalid_textfile": {
     "line number": [
      212
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceExists.test_InvalidHTTP": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.invalid_httpurl": {
     "line number": [
      199
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      199
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceExists.test_ValidFile": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.valid_textfile": {
     "line number": [
      203,
      207
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      204,
      208
     ]
    },
    "shutil.rmtree": {
     "line number": [
      209
     ]
    },
    "tempfile.mkdtemp": {
     "line number": [
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceExists.test_ValidHTTP": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.valid_httpurl": {
     "line number": [
      196
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      196
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceOpen": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "object": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceOpen.setup": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "numpy.lib._datasource.DataSource": {
     "line number": [
      102
     ]
    },
    "tempfile.mkdtemp": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceOpen.teardown": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "shutil.rmtree": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_Bz2File_text_mode_warning": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      171
     ]
    },
    "RuntimeWarning": {
     "line number": [
      179
     ]
    },
    "numpy.lib.tests.test__datasource.bz2": {
     "line number": [
      176
     ]
    },
    "numpy.lib.tests.test__datasource.magic_line": {
     "line number": [
      177,
      183
     ]
    },
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      175
     ]
    },
    "numpy.lib.tests.test__datasource.pytest": {
     "line number": [
      173,
      167
     ]
    },
    "numpy.lib.tests.test__datasource.sys": {
     "line number": [
      167
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      183
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidFile": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      133
     ]
    },
    "numpy.lib.tests.test__datasource.invalid_textfile": {
     "line number": [
      132
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTP": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      115,
      118
     ]
    },
    "numpy.lib.tests.test__datasource.invalid_httpurl": {
     "line number": [
      114
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      120
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTPCacheURLError": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.invalid_httpurl": {
     "line number": [
      123
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      123
     ]
    },
    "urllib2.URLError": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidBz2File": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      154
     ]
    },
    "numpy.lib.tests.test__datasource.bz2": {
     "line number": [
      159
     ]
    },
    "numpy.lib.tests.test__datasource.magic_line": {
     "line number": [
      160,
      165
     ]
    },
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      158
     ]
    },
    "numpy.lib.tests.test__datasource.pytest": {
     "line number": [
      156
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidFile": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.valid_textfile": {
     "line number": [
      126
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidGzipFile": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      138
     ]
    },
    "numpy.lib.tests.test__datasource.gzip": {
     "line number": [
      143
     ]
    },
    "numpy.lib.tests.test__datasource.magic_line": {
     "line number": [
      144,
      149
     ]
    },
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      142
     ]
    },
    "numpy.lib.tests.test__datasource.pytest": {
     "line number": [
      140
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidHTTP": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.valid_httpurl": {
     "line number": [
      109
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestOpenFunc": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": {
    "object": {
     "line number": [
      347
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test__datasource.TestOpenFunc.setup": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "tempfile.mkdtemp": {
     "line number": [
      349
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestOpenFunc.teardown": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "shutil.rmtree": {
     "line number": [
      352
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestOpenFunc.test_DataSourceOpen": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": {
    "numpy.lib._datasource.open": {
     "line number": [
      357,
      361
     ]
    },
    "numpy.lib.tests.test__datasource.valid_textfile": {
     "line number": [
      355
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      358,
      362
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryAbspath": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": {
    "object": {
     "line number": [
      281
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryAbspath.setup": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "numpy.lib._datasource.Repository": {
     "line number": [
      284
     ]
    },
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      283
     ]
    },
    "numpy.lib.tests.test__datasource.valid_baseurl": {
     "line number": [
      284
     ]
    },
    "tempfile.mkdtemp": {
     "line number": [
      283
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryAbspath.teardown": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": {
    "shutil.rmtree": {
     "line number": [
      287
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_ValidHTTP": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      292,
      293
     ]
    },
    "numpy.lib.tests.test__datasource.valid_httpfile": {
     "line number": [
      294
     ]
    },
    "numpy.lib.tests.test__datasource.valid_httpurl": {
     "line number": [
      291
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      295
     ]
    },
    "urlparse.urlparse": {
     "line number": [
      291
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_sandboxing": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.http_path": {
     "line number": [
      301
     ]
    },
    "numpy.lib.tests.test__datasource.malicious_files": {
     "line number": [
      300
     ]
    },
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      298
     ]
    },
    "numpy.lib.tests.test__datasource.valid_httpfile": {
     "line number": [
      299
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      299,
      301,
      302
     ]
    },
    "tmp_path": {
     "line number": [
      298,
      299,
      301,
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_windows_os_sep": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      305,
      307,
      311
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryExists": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "object": {
     "line number": [
      314
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryExists.setup": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "numpy.lib._datasource.Repository": {
     "line number": [
      317
     ]
    },
    "numpy.lib.tests.test__datasource.valid_baseurl": {
     "line number": [
      317
     ]
    },
    "tempfile.mkdtemp": {
     "line number": [
      316
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryExists.teardown": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": {
    "shutil.rmtree": {
     "line number": [
      320
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryExists.test_CachedHTTPFile": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      341,
      342
     ]
    },
    "numpy.lib.tests.test__datasource.valid_httpurl": {
     "line number": [
      336
     ]
    },
    "numpy.lib.tests.test__datasource.valid_textfile": {
     "line number": [
      343
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      344
     ]
    },
    "urlparse.urlparse": {
     "line number": [
      340
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryExists.test_InvalidFile": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.invalid_textfile": {
     "line number": [
      329
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      330
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryExists.test_RemoveHTTPFile": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.valid_httpurl": {
     "line number": [
      333
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      333
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.TestRepositoryExists.test_ValidFile": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.valid_textfile": {
     "line number": [
      325
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      326
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.URLError": {
  "data": {
   "shadows": "urllib2.URLError"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.bz2": {
  "data": {
   "shadows": "bz2"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.datasource": {
  "data": {
   "shadows": "numpy.lib._datasource"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.gzip": {
  "data": {
   "shadows": "gzip"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.http_fakefile": {
  "data": {
   "lineno": 51
  },
  "type": "constant"
 },
 "numpy.lib.tests.test__datasource.http_fakepath": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "numpy.lib.tests.test__datasource.http_file": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "numpy.lib.tests.test__datasource.http_path": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "numpy.lib.tests.test__datasource.invalid_baseurl": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.http_fakepath": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.invalid_httpfile": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.http_fakefile": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.invalid_httpurl": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.http_fakefile": {
     "line number": [
      80
     ]
    },
    "numpy.lib.tests.test__datasource.http_fakepath": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.invalid_textfile": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      70,
      71
     ]
    },
    "tempfile.mkstemp": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.magic_line": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "numpy.lib.tests.test__datasource.malicious_files": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "numpy.lib.tests.test__datasource.mkdtemp": {
  "data": {
   "shadows": "tempfile.mkdtemp"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.mkstemp": {
  "data": {
   "shadows": "tempfile.mkstemp"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.old_urlopen": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.lib.tests.test__datasource.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.rmtree": {
  "data": {
   "shadows": "shutil.rmtree"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.setup_module": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.old_urlopen": {
     "line number": [
      39
     ]
    },
    "numpy.lib.tests.test__datasource.urlopen_stub": {
     "line number": [
      40
     ]
    },
    "urllib2.urlopen": {
     "line number": [
      39,
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.teardown_module": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.old_urlopen": {
     "line number": [
      44
     ]
    },
    "urllib2.urlopen": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.test_del_attr_handling": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": {
    "numpy.lib._datasource.DataSource": {
     "line number": [
      372
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.urllib_request": {
  "data": {
   "shadows": "urllib2"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.urlopen_stub": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.valid_httpurl": {
     "line number": [
      26
     ]
    },
    "tempfile.NamedTemporaryFile": {
     "line number": [
      27
     ]
    },
    "urllib2.URLError": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.urlparse": {
  "data": {
   "shadows": "urlparse.urlparse"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__datasource.valid_baseurl": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.http_path": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.valid_httpfile": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.http_file": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.valid_httpurl": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.http_file": {
     "line number": [
      76
     ]
    },
    "numpy.lib.tests.test__datasource.http_path": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__datasource.valid_textfile": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "numpy.lib.tests.test__datasource.os": {
     "line number": [
      63
     ]
    },
    "tempfile.mkstemp": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test__iotools.LineSplitter": {
  "data": {
   "shadows": "numpy.lib._iotools.LineSplitter"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.NameValidator": {
  "data": {
   "shadows": "numpy.lib._iotools.NameValidator"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.StringConverter": {
  "data": {
   "shadows": "numpy.lib._iotools.StringConverter"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.TestLineSplitter": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "object": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test__iotools.TestLineSplitter.test_constant_fixed_width": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "numpy.lib._iotools.LineSplitter": {
     "line number": [
      63,
      67,
      71
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      64,
      68,
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestLineSplitter.test_no_delimiter": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.lib._iotools.LineSplitter": {
     "line number": [
      23,
      25
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      24,
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestLineSplitter.test_other_delimiter": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "numpy.lib._iotools.LineSplitter": {
     "line number": [
      48,
      52,
      57
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      49,
      53,
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestLineSplitter.test_space_delimiter": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "numpy.lib._iotools.LineSplitter": {
     "line number": [
      31,
      33
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      32,
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestLineSplitter.test_tab_delimiter": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "numpy.lib._iotools.LineSplitter": {
     "line number": [
      39,
      42
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      40,
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestLineSplitter.test_variable_fixed_width": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "numpy.lib._iotools.LineSplitter": {
     "line number": [
      76,
      80
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      77,
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestMiscFunctions": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "object": {
     "line number": [
      265
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test__iotools.TestMiscFunctions.test_easy_dtype": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": {
    "float": {
     "line number": [
      279,
      280,
      304,
      305,
      308,
      311,
      314,
      316,
      316,
      318,
      318,
      320,
      320,
      322,
      322,
      324,
      326,
      328,
      331
     ]
    },
    "int": {
     "line number": [
      304,
      305,
      308,
      311,
      314,
      316,
      318,
      320,
      322
     ]
    },
    "numpy.dtype": {
     "line number": [
      280,
      284,
      287,
      291,
      295,
      299,
      302,
      305,
      308,
      311,
      314,
      318,
      322,
      324,
      326,
      328,
      331
     ]
    },
    "numpy.lib._iotools.easy_dtype": {
     "line number": [
      280,
      283,
      286,
      290,
      294,
      298,
      301,
      305,
      307,
      310,
      313,
      317,
      321,
      325,
      330
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      280,
      283,
      286,
      290,
      294,
      298,
      301,
      305,
      307,
      310,
      313,
      317,
      321,
      325,
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestMiscFunctions.test_flatten_dtype": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": {
    "float": {
     "line number": [
      338,
      338,
      344,
      346,
      348,
      352,
      352
     ]
    },
    "int": {
     "line number": [
      340,
      342,
      344,
      346,
      348
     ]
    },
    "numpy.dtype": {
     "line number": [
      336,
      340,
      342,
      342,
      344,
      350
     ]
    },
    "numpy.lib._iotools.flatten_dtype": {
     "line number": [
      337,
      341,
      345,
      347,
      351
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      338,
      342,
      346,
      348,
      352
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestMiscFunctions.test_has_nested_dtype": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "float": {
     "line number": [
      269,
      271,
      273
     ]
    },
    "int": {
     "line number": [
      273
     ]
    },
    "numpy.dtype": {
     "line number": [
      269,
      271,
      273
     ]
    },
    "numpy.lib._iotools.has_nested_fields": {
     "line number": [
      270,
      272,
      274
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      270,
      272,
      274
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestNameValidator": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "object": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test__iotools.TestNameValidator.test_case_sensitivity": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      101
     ]
    },
    "numpy.lib._iotools.NameValidator": {
     "line number": [
      91,
      93,
      95,
      97,
      101
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      92,
      94,
      96,
      98
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestNameValidator.test_excludelist": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "numpy.lib._iotools.NameValidator": {
     "line number": [
      106
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestNameValidator.test_missing_names": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "numpy.lib._iotools.NameValidator": {
     "line number": [
      113
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      114,
      116,
      118,
      120
     ]
    },
    "validator": {
     "line number": [
      114,
      116,
      118,
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestNameValidator.test_validate_nb_names": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "numpy.lib._iotools.NameValidator": {
     "line number": [
      125
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      126,
      127
     ]
    },
    "validator": {
     "line number": [
      125,
      126,
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestNameValidator.test_validate_wo_names": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "numpy.lib._iotools.NameValidator": {
     "line number": [
      133
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      134
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      135
     ]
    },
    "validator": {
     "line number": [
      133,
      134,
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestStringConverter": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "object": {
     "line number": [
      144
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test__iotools.TestStringConverter.test_creation": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "int": {
     "line number": [
      149
     ]
    },
    "numpy.lib._iotools.StringConverter": {
     "line number": [
      149
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      150,
      151
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestStringConverter.test_int64_dtype": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "converter": {
     "line number": [
      252,
      254,
      256
     ]
    },
    "numpy.int64": {
     "line number": [
      252
     ]
    },
    "numpy.lib._iotools.StringConverter": {
     "line number": [
      252
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      254,
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestStringConverter.test_keep_default": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "converter": {
     "line number": [
      225,
      231
     ]
    },
    "converter.default": {
     "line number": [
      228,
      234
     ]
    },
    "converter.type": {
     "line number": [
      229,
      235
     ]
    },
    "converter.upgrade": {
     "line number": [
      227,
      233
     ]
    },
    "float": {
     "line number": [
      229,
      235
     ]
    },
    "numpy.dtype": {
     "line number": [
      229,
      235
     ]
    },
    "numpy.lib._iotools.StringConverter": {
     "line number": [
      225,
      231
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      228,
      229,
      234,
      235
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestStringConverter.test_keep_default_zero": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": {
    "converter": {
     "line number": [
      239
     ]
    },
    "converter.default": {
     "line number": [
      241
     ]
    },
    "int": {
     "line number": [
      239
     ]
    },
    "numpy.lib._iotools.StringConverter": {
     "line number": [
      239
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      241
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestStringConverter.test_keep_missing_values": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": {
    "converter": {
     "line number": [
      245
     ]
    },
    "converter.missing_values": {
     "line number": [
      248
     ]
    },
    "int": {
     "line number": [
      245
     ]
    },
    "numpy.lib._iotools.StringConverter": {
     "line number": [
      245
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      247
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestStringConverter.test_missing": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      201
     ]
    },
    "converter": {
     "line number": [
      195,
      196,
      197,
      198,
      200
     ]
    },
    "converter.default": {
     "line number": [
      196,
      197,
      198
     ]
    },
    "numpy.lib._iotools.StringConverter": {
     "line number": [
      192
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      195,
      196,
      197,
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestStringConverter.test_string_to_object": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      221
     ]
    },
    "numpy.lib._iotools.StringConverter": {
     "line number": [
      219
     ]
    },
    "numpy.lib._iotools.StringConverter._mapper": {
     "line number": [
      218
     ]
    },
    "numpy.lib.tests.test__iotools._bytes_to_date": {
     "line number": [
      219
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      221
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      220
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestStringConverter.test_uint64_dtype": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": {
    "converter": {
     "line number": [
      260,
      262
     ]
    },
    "numpy.lib._iotools.StringConverter": {
     "line number": [
      260
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      262
     ]
    },
    "numpy.uint64": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestStringConverter.test_upgrade": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      177
     ]
    },
    "int": {
     "line number": [
      166
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      186
     ]
    },
    "numpy.core.numeric.dtype": {
     "line number": [
      166,
      166
     ]
    },
    "numpy.core.numeric.int64": {
     "line number": [
      166
     ]
    },
    "numpy.core.numeric.int_": {
     "line number": [
      166
     ]
    },
    "numpy.lib._iotools.StringConverter": {
     "line number": [
      156
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      186
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      173
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      157,
      160,
      161,
      169,
      170,
      174,
      177,
      178,
      187,
      188
     ]
    },
    "type": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.TestStringConverter.test_upgrademapper": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "convert": {
     "line number": [
      209,
      211,
      213
     ]
    },
    "datetime.date": {
     "line number": [
      207,
      208,
      210,
      212,
      214
     ]
    },
    "numpy.lib._iotools.StringConverter": {
     "line number": [
      208
     ]
    },
    "numpy.lib._iotools.StringConverter.upgrade_mapper": {
     "line number": [
      207
     ]
    },
    "numpy.lib.tests.test__iotools._bytes_to_date": {
     "line number": [
      206
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      210,
      212,
      214
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools._bytes_to_date": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "datetime.date": {
     "line number": [
      141
     ]
    },
    "numpy.lib.tests.test__iotools.time": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__iotools.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.date": {
  "data": {
   "shadows": "datetime.date"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.easy_dtype": {
  "data": {
   "shadows": "numpy.lib._iotools.easy_dtype"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.flatten_dtype": {
  "data": {
   "shadows": "numpy.lib._iotools.flatten_dtype"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.has_nested_fields": {
  "data": {
   "shadows": "numpy.lib._iotools.has_nested_fields"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.nx": {
  "data": {
   "shadows": "numpy.core.numeric"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__iotools.unicode": {
  "data": {
   "shadows": "numpy.compat.unicode"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__version": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test__version.NumpyVersion": {
  "data": {
   "shadows": "numpy.lib.NumpyVersion"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__version.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__version.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__version.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__version.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__version.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test__version.test_alpha_beta_rc": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "numpy.lib.NumpyVersion": {
     "line number": [
      28,
      30,
      33,
      35
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      28,
      30,
      33,
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__version.test_dev0_a_b_rc_mixed": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "numpy.lib.NumpyVersion": {
     "line number": [
      60,
      61
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      60,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__version.test_dev0_version": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "numpy.lib.NumpyVersion": {
     "line number": [
      52,
      54,
      56
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      52,
      54,
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__version.test_dev_a_b_rc_mixed": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "numpy.lib.NumpyVersion": {
     "line number": [
      47,
      48
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      47,
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__version.test_dev_version": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.lib.NumpyVersion": {
     "line number": [
      39,
      41,
      43
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      39,
      41,
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__version.test_main_versions": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "numpy.lib.NumpyVersion": {
     "line number": [
      11,
      13,
      16
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      11,
      13,
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__version.test_raises": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      66
     ]
    },
    "numpy.lib.NumpyVersion": {
     "line number": [
      66
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test__version.test_version_1_point_10": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "numpy.lib.NumpyVersion": {
     "line number": [
      21,
      22,
      23,
      24
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      21,
      22,
      23,
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_arraypad.Fraction": {
  "data": {
   "shadows": "fractions.Fraction"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraypad.TestAsPairs": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "object": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestAsPairs.test_as_index": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      86
     ]
    },
    "numpy.array": {
     "line number": [
      78,
      82
     ]
    },
    "numpy.intp": {
     "line number": [
      78,
      82
     ]
    },
    "numpy.lib.arraypad._as_pairs": {
     "line number": [
      77,
      81,
      87
     ]
    },
    "numpy.lib.tests.test_arraypad.pytest": {
     "line number": [
      86
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      76,
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestAsPairs.test_exceptions": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      91,
      93,
      95
     ]
    },
    "numpy.lib.arraypad._as_pairs": {
     "line number": [
      92,
      94,
      96
     ]
    },
    "numpy.lib.tests.test_arraypad.pytest": {
     "line number": [
      91,
      93,
      95
     ]
    },
    "numpy.ones": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestAsPairs.test_pass_through": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      68
     ]
    },
    "numpy.lib.arraypad._as_pairs": {
     "line number": [
      70
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestAsPairs.test_single_value": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      19,
      27
     ]
    },
    "numpy.lib.arraypad._as_pairs": {
     "line number": [
      21,
      26
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      22,
      25
     ]
    },
    "object": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestAsPairs.test_two_values": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      33,
      41,
      47,
      52
     ]
    },
    "numpy.lib.arraypad._as_pairs": {
     "line number": [
      35,
      40,
      46,
      51
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36,
      39,
      45,
      50
     ]
    },
    "object": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestAsPairs.test_with_none": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "numpy.lib.arraypad._as_pairs": {
     "line number": [
      58,
      62
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      57,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConditionalShortcuts": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "object": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_clip_statistic_range": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      130
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      138,
      139
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_shallow_statistic_range": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      118
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      126,
      127
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_zero_padding_shortcuts": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      101
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      115
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConstant": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": {
    "object": {
     "line number": [
      450
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      452
     ]
    },
    "numpy.array": {
     "line number": [
      454
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      453
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      473
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      502
     ]
    },
    "numpy.array": {
     "line number": [
      505
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      503
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      517
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float2": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      522
     ]
    },
    "numpy.array": {
     "line number": [
      526
     ]
    },
    "numpy.float64": {
     "line number": [
      523
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      524
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      538
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float3": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": {
    "float": {
     "line number": [
      541
     ]
    },
    "numpy.arange": {
     "line number": [
      541
     ]
    },
    "numpy.array": {
     "line number": [
      543
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      542
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      562
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_odd_pad_amount": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      565
     ]
    },
    "numpy.array": {
     "line number": [
      568
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      566
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      579
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_pad_2d": {
  "data": {
   "lineno": 581,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      582
     ]
    },
    "numpy.array": {
     "line number": [
      585
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      583
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      592
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_zeros": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      476
     ]
    },
    "numpy.array": {
     "line number": [
      478
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      477
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      497
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConstant.test_check_large_integers": {
  "data": {
   "lineno": 594,
   "symbols_in_volume": {
    "numpy.full": {
     "line number": [
      596,
      598,
      602,
      604
     ]
    },
    "numpy.int64": {
     "line number": [
      602,
      604
     ]
    },
    "numpy.pad": {
     "line number": [
      597,
      603
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      599,
      605
     ]
    },
    "numpy.uint64": {
     "line number": [
      596,
      598
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestConstant.test_check_object_array": {
  "data": {
   "lineno": 607,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      608,
      616
     ]
    },
    "numpy.pad": {
     "line number": [
      613
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      621
     ]
    },
    "object": {
     "line number": [
      608,
      609,
      611,
      612,
      616
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestEdge": {
  "data": {
   "lineno": 1056,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1056
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestEdge.test_check_simple": {
  "data": {
   "lineno": 1057,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1058
     ]
    },
    "numpy.array": {
     "line number": [
      1061
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1060
     ]
    },
    "numpy.reshape": {
     "line number": [
      1059
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1074
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestEdge.test_check_width_shape_1_2": {
  "data": {
   "lineno": 1076,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1089
     ]
    },
    "numpy.array": {
     "line number": [
      1079,
      1081,
      1084
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1080,
      1085,
      1086,
      1090,
      1091
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1082,
      1087,
      1092
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestLegacyVectorFunction": {
  "data": {
   "lineno": 1103,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1103
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestLegacyVectorFunction.test_legacy_vector_functionality": {
  "data": {
   "lineno": 1104,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1110
     ]
    },
    "numpy.array": {
     "line number": [
      1112
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1111
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1122
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestLegacyVectorFunction.test_legacy_vector_functionality._padwithtens": {
  "data": {
   "lineno": 1105
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestLinearRamp": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": {
    "object": {
     "line number": [
      624
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestLinearRamp.test_check_2d": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      650
     ]
    },
    "numpy.array": {
     "line number": [
      652
     ]
    },
    "numpy.float64": {
     "line number": [
      650
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      651
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      661
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestLinearRamp.test_check_simple": {
  "data": {
   "lineno": 625,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      626
     ]
    },
    "numpy.array": {
     "line number": [
      628
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      627
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      647
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestLinearRamp.test_object_array": {
  "data": {
   "lineno": 663,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      663
     ]
    },
    "fractions.Fraction": {
     "line number": [
      666,
      666,
      672,
      673,
      674,
      675,
      676,
      677,
      678
     ]
    },
    "numpy.array": {
     "line number": [
      666,
      671
     ]
    },
    "numpy.lib.tests.test_arraypad.pytest": {
     "line number": [
      663
     ]
    },
    "numpy.pad": {
     "line number": [
      667
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      680
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestNdarrayPadWidth": {
  "data": {
   "lineno": 1125,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1125
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestNdarrayPadWidth.test_check_simple": {
  "data": {
   "lineno": 1126,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1127
     ]
    },
    "numpy.array": {
     "line number": [
      1129,
      1130
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1129
     ]
    },
    "numpy.reshape": {
     "line number": [
      1128
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1143
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestObjectInput": {
  "data": {
   "lineno": 1154,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1154
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestObjectInput.test_object_input": {
  "data": {
   "lineno": 1155,
   "symbols_in_volume": {
    "numpy.full": {
     "line number": [
      1157,
      1159
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1166
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1166
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestReflect": {
  "data": {
   "lineno": 683,
   "symbols_in_volume": {
    "object": {
     "line number": [
      683
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestReflect.test_check_01": {
  "data": {
   "lineno": 777,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      779
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      778
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      780
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestReflect.test_check_02": {
  "data": {
   "lineno": 782,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      784
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      783
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      785
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestReflect.test_check_03": {
  "data": {
   "lineno": 787,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      789
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      788
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      790
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestReflect.test_check_large_pad": {
  "data": {
   "lineno": 732,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      735
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      734
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      753
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestReflect.test_check_odd_method": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      709
     ]
    },
    "numpy.array": {
     "line number": [
      711
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      710
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      730
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestReflect.test_check_padding_an_empty_array": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": {
    "numpy.lib.pad": {
     "line number": [
      793
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      795
     ]
    },
    "numpy.zeros": {
     "line number": [
      793,
      794
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestReflect.test_check_shape": {
  "data": {
   "lineno": 755,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      758
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      757
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      775
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestReflect.test_check_simple": {
  "data": {
   "lineno": 684,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      685
     ]
    },
    "numpy.array": {
     "line number": [
      687
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      686
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      706
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatLen": {
  "data": {
   "lineno": 1033,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1033
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestStatLen.test_check_simple": {
  "data": {
   "lineno": 1034,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1035
     ]
    },
    "numpy.array": {
     "line number": [
      1038
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1037
     ]
    },
    "numpy.reshape": {
     "line number": [
      1036
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1053
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "object": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_1": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      168
     ]
    },
    "numpy.array": {
     "line number": [
      170
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      169
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_2": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      192
     ]
    },
    "numpy.array": {
     "line number": [
      194
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      193
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_stat_length": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      216
     ]
    },
    "numpy.array": {
     "line number": [
      218
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      217
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_2": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      412
     ]
    },
    "numpy.array": {
     "line number": [
      414
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      413
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      433
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_shape_one": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      392
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      391
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      409
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_stat_length": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      144
     ]
    },
    "numpy.array": {
     "line number": [
      146
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      145
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_median": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      312
     ]
    },
    "numpy.array": {
     "line number": [
      314
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      313
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      333
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_01": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      336,
      338
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      337
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      347
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_02": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      350,
      352
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      351
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      361
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_stat_length": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      364
     ]
    },
    "numpy.array": {
     "line number": [
      368
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      367
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      387
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_1": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      240
     ]
    },
    "numpy.array": {
     "line number": [
      242
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      241
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_2": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      264
     ]
    },
    "numpy.array": {
     "line number": [
      266
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      265
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      285
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_stat_length": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      288
     ]
    },
    "numpy.array": {
     "line number": [
      290
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      289
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      309
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestStatistic.test_same_prepend_append": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      445,
      445
     ]
    },
    "numpy.float64": {
     "line number": [
      445
     ]
    },
    "numpy.lib.tests.test_arraypad.pytest": {
     "line number": [
      435,
      436,
      436
     ]
    },
    "numpy.pad": {
     "line number": [
      446
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      447
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestSymmetric": {
  "data": {
   "lineno": 798,
   "symbols_in_volume": {
    "object": {
     "line number": [
      798
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_01": {
  "data": {
   "lineno": 916,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      918
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      917
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      919
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_02": {
  "data": {
   "lineno": 921,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      923
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      922
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      924
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_03": {
  "data": {
   "lineno": 926,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      928
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      927
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      929
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_large_pad": {
  "data": {
   "lineno": 847,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      850
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      849
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      869
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_large_pad_odd": {
  "data": {
   "lineno": 871,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      874
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      873
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      892
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_odd_method": {
  "data": {
   "lineno": 823,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      824
     ]
    },
    "numpy.array": {
     "line number": [
      826
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      825
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      845
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_shape": {
  "data": {
   "lineno": 894,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      897
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      896
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      914
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_simple": {
  "data": {
   "lineno": 799,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      800
     ]
    },
    "numpy.array": {
     "line number": [
      802
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      801
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      821
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestTypeError1": {
  "data": {
   "lineno": 1235,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1235
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestTypeError1.test_check_wrong_pad_amount": {
  "data": {
   "lineno": 1257,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1261
     ]
    },
    "dict": {
     "line number": [
      1260
     ]
    },
    "numpy.arange": {
     "line number": [
      1258
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1261
     ]
    },
    "numpy.reshape": {
     "line number": [
      1259
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestTypeError1.test_complex": {
  "data": {
   "lineno": 1252,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1254,
      1255
     ]
    },
    "complex": {
     "line number": [
      1254,
      1255
     ]
    },
    "numpy.arange": {
     "line number": [
      1253
     ]
    },
    "numpy.array": {
     "line number": [
      1255
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1254,
      1255
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1254,
      1255
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestTypeError1.test_float": {
  "data": {
   "lineno": 1236,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1238,
      1239
     ]
    },
    "numpy.arange": {
     "line number": [
      1237
     ]
    },
    "numpy.array": {
     "line number": [
      1239
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1238,
      1239
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1238,
      1239
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestTypeError1.test_object": {
  "data": {
   "lineno": 1246,
   "symbols_in_volume": {
    "FooBar": {
     "line number": [
      1250
     ]
    },
    "TypeError": {
     "line number": [
      1250
     ]
    },
    "numpy.arange": {
     "line number": [
      1249
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1250
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1250
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestTypeError1.test_object.FooBar": {
  "data": {
   "lineno": 1247,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1247
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestTypeError1.test_str": {
  "data": {
   "lineno": 1241,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1243,
      1244
     ]
    },
    "numpy.arange": {
     "line number": [
      1242
     ]
    },
    "numpy.array": {
     "line number": [
      1244
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1243,
      1244
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1243,
      1244
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestUnicodeInput": {
  "data": {
   "lineno": 1146,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1146
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestUnicodeInput.test_unicode_mode": {
  "data": {
   "lineno": 1147,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1150
     ]
    },
    "numpy.pad": {
     "line number": [
      1149
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1151
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestValueError1": {
  "data": {
   "lineno": 1169,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1169
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestValueError1.test_check_empty_array": {
  "data": {
   "lineno": 1191,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1192,
      1193,
      1194
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1192,
      1193,
      1194
     ]
    },
    "numpy.ndarray": {
     "line number": [
      1193
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1192,
      1193,
      1194
     ]
    },
    "numpy.zeros": {
     "line number": [
      1194
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestValueError1.test_check_negative_pad_width": {
  "data": {
   "lineno": 1184,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1188
     ]
    },
    "dict": {
     "line number": [
      1187
     ]
    },
    "numpy.arange": {
     "line number": [
      1185
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1188
     ]
    },
    "numpy.reshape": {
     "line number": [
      1186
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1188
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestValueError1.test_check_negative_stat_length": {
  "data": {
   "lineno": 1177,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1181
     ]
    },
    "dict": {
     "line number": [
      1180
     ]
    },
    "numpy.arange": {
     "line number": [
      1178
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1181
     ]
    },
    "numpy.reshape": {
     "line number": [
      1179
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1181
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestValueError1.test_check_simple": {
  "data": {
   "lineno": 1170,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1174
     ]
    },
    "dict": {
     "line number": [
      1173
     ]
    },
    "numpy.arange": {
     "line number": [
      1171
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1174
     ]
    },
    "numpy.reshape": {
     "line number": [
      1172
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1174
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestValueError2": {
  "data": {
   "lineno": 1198,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1198
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestValueError2.test_check_negative_pad_amount": {
  "data": {
   "lineno": 1199,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1203
     ]
    },
    "dict": {
     "line number": [
      1202
     ]
    },
    "numpy.arange": {
     "line number": [
      1200
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1203
     ]
    },
    "numpy.reshape": {
     "line number": [
      1201
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1203
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestValueError3": {
  "data": {
   "lineno": 1207,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1207
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestValueError3.test_check_kwarg_not_allowed": {
  "data": {
   "lineno": 1208,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1210
     ]
    },
    "numpy.arange": {
     "line number": [
      1209
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1210
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1210
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestValueError3.test_malformed_pad_amount": {
  "data": {
   "lineno": 1217,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1219
     ]
    },
    "numpy.arange": {
     "line number": [
      1218
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1219
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1219
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestValueError3.test_malformed_pad_amount2": {
  "data": {
   "lineno": 1221,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1223
     ]
    },
    "numpy.arange": {
     "line number": [
      1222
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1223
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1223
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestValueError3.test_mode_not_set": {
  "data": {
   "lineno": 1213,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1215
     ]
    },
    "numpy.arange": {
     "line number": [
      1214
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1215
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestValueError3.test_pad_too_many_axes": {
  "data": {
   "lineno": 1226,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1231
     ]
    },
    "numpy.arange": {
     "line number": [
      1227
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1231
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1231
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestWrap": {
  "data": {
   "lineno": 932,
   "symbols_in_volume": {
    "object": {
     "line number": [
      932
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestWrap.test_check_01": {
  "data": {
   "lineno": 1017,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1019
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1018
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1020
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestWrap.test_check_02": {
  "data": {
   "lineno": 1022,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1024
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1023
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1025
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestWrap.test_check_large_pad": {
  "data": {
   "lineno": 957,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      958
     ]
    },
    "numpy.array": {
     "line number": [
      961
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      960
     ]
    },
    "numpy.reshape": {
     "line number": [
      959
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1015
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestWrap.test_check_simple": {
  "data": {
   "lineno": 933,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      934
     ]
    },
    "numpy.array": {
     "line number": [
      936
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      935
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      955
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestWrap.test_pad_with_zero": {
  "data": {
   "lineno": 1027,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      1028
     ]
    },
    "numpy.pad": {
     "line number": [
      1029
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1030
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad.TestZeroPadWidth": {
  "data": {
   "lineno": 1095,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1095
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraypad.TestZeroPadWidth.test_zero_pad_width": {
  "data": {
   "lineno": 1096,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1097
     ]
    },
    "numpy.lib.pad": {
     "line number": [
      1100
     ]
    },
    "numpy.reshape": {
     "line number": [
      1098
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1100
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraypad._as_pairs": {
  "data": {
   "shadows": "numpy.lib.arraypad._as_pairs"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraypad.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraypad.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraypad.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraypad.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraypad.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraypad.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraypad.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraypad.pad": {
  "data": {
   "shadows": "numpy.lib.pad"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraypad.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraypad.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "object": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_ediff1d": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      113,
      114,
      115
     ]
    },
    "numpy.lib.arraysetops.ediff1d": {
     "line number": [
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_ediff1d_forbidden_type_casts": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      156
     ]
    },
    "numpy.array": {
     "line number": [
      134,
      139,
      140,
      145
     ]
    },
    "numpy.int16": {
     "line number": [
      139
     ]
    },
    "numpy.int32": {
     "line number": [
      140
     ]
    },
    "numpy.int64": {
     "line number": [
      134
     ]
    },
    "numpy.int8": {
     "line number": [
      145
     ]
    },
    "numpy.lib.arraysetops.ediff1d": {
     "line number": [
      157
     ]
    },
    "numpy.lib.tests.test_arraysetops.pytest": {
     "line number": [
      130
     ]
    },
    "numpy.nan": {
     "line number": [
      136,
      146,
      147
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_ediff1d_scalar_handling": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      165,
      168,
      169,
      172,
      173,
      176
     ]
    },
    "numpy.ediff1d": {
     "line number": [
      186
     ]
    },
    "numpy.int16": {
     "line number": [
      165,
      168
     ]
    },
    "numpy.int32": {
     "line number": [
      169,
      172
     ]
    },
    "numpy.int64": {
     "line number": [
      173,
      176
     ]
    },
    "numpy.lib.tests.test_arraysetops.pytest": {
     "line number": [
      161
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      239,
      244,
      249,
      253,
      266,
      267,
      268,
      272,
      273,
      274,
      278,
      279,
      280,
      284,
      285,
      286
     ]
    },
    "numpy.lib.arraysetops.in1d": {
     "line number": [
      240,
      245,
      250,
      257,
      263,
      269,
      275,
      281,
      287,
      290
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      241,
      246,
      251,
      258,
      264,
      270,
      276,
      282,
      288,
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_both_arrays_are_object": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      339,
      340
     ]
    },
    "numpy.in1d": {
     "line number": [
      341
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      342
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_both_arrays_have_structured_dtype": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": {
    "int": {
     "line number": [
      347
     ]
    },
    "numpy.array": {
     "line number": [
      348,
      349,
      350
     ]
    },
    "numpy.dtype": {
     "line number": [
      347
     ]
    },
    "numpy.in1d": {
     "line number": [
      351
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      352
     ]
    },
    "object": {
     "line number": [
      347
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_char_array": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      293,
      294,
      296
     ]
    },
    "numpy.lib.arraysetops.in1d": {
     "line number": [
      297
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_first_array_is_object": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      325,
      326
     ]
    },
    "numpy.in1d": {
     "line number": [
      327
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      328
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_invert": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      306
     ]
    },
    "numpy.invert": {
     "line number": [
      308
     ]
    },
    "numpy.lib.arraysetops.in1d": {
     "line number": [
      308,
      308
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      308
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_ravel": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      313,
      314,
      315
     ]
    },
    "numpy.array": {
     "line number": [
      316
     ]
    },
    "numpy.lib.arraysetops.in1d": {
     "line number": [
      318,
      319,
      320,
      321
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      318,
      319,
      320,
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_second_array_is_object": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      332,
      333
     ]
    },
    "numpy.in1d": {
     "line number": [
      334
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      335
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      21,
      22,
      24,
      29,
      30,
      32
     ]
    },
    "numpy.lib.arraysetops.intersect1d": {
     "line number": [
      25,
      33,
      35
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      26,
      34,
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d_array_like": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "Test": {
     "line number": [
      43
     ]
    },
    "numpy.lib.arraysetops.intersect1d": {
     "line number": [
      44,
      46
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      45,
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d_array_like.Test": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "object": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d_array_like.Test.__array__": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d_indices": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      51,
      52,
      54,
      60,
      61,
      63,
      69,
      70,
      74,
      79,
      80,
      84
     ]
    },
    "numpy.lib.arraysetops.intersect1d": {
     "line number": [
      53,
      62,
      71,
      81
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      55,
      56,
      57,
      64,
      65,
      66,
      75,
      76,
      85,
      86
     ]
    },
    "numpy.unravel_index": {
     "line number": [
      72,
      73,
      82,
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_isin": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "assert_isin_equal": {
     "line number": [
      208,
      213,
      217,
      218,
      219,
      222,
      223,
      224,
      228,
      229,
      230
     ]
    },
    "bool": {
     "line number": [
      199
     ]
    },
    "numpy.arange": {
     "line number": [
      206
     ]
    },
    "numpy.array": {
     "line number": [
      207,
      216
     ]
    },
    "numpy.vectorize": {
     "line number": [
      199
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_isin._isin_slow": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_isin.assert_isin_equal": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "isin_slow": {
     "line number": [
      202
     ]
    },
    "numpy.lib.arraysetops.isin": {
     "line number": [
      201
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_manyways": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      403,
      404
     ]
    },
    "numpy.lib.arraysetops.intersect1d": {
     "line number": [
      407
     ]
    },
    "numpy.lib.arraysetops.setdiff1d": {
     "line number": [
      409
     ]
    },
    "numpy.lib.arraysetops.setxor1d": {
     "line number": [
      406
     ]
    },
    "numpy.lib.arraysetops.union1d": {
     "line number": [
      408
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      410
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      380,
      381
     ]
    },
    "numpy.array": {
     "line number": [
      373,
      374,
      376,
      382,
      387
     ]
    },
    "numpy.lib.arraysetops.setdiff1d": {
     "line number": [
      377,
      383,
      386,
      388
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      378,
      384,
      386
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      388
     ]
    },
    "numpy.uint32": {
     "line number": [
      387,
      388
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d_char_array": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      398,
      399,
      400
     ]
    },
    "numpy.lib.arraysetops.setdiff1d": {
     "line number": [
      400
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      400
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d_unique": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      391,
      392,
      393
     ]
    },
    "numpy.lib.arraysetops.setdiff1d": {
     "line number": [
      394
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      395
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_setxor1d": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      89,
      90,
      92,
      96,
      97,
      99,
      103,
      104,
      106
     ]
    },
    "numpy.lib.arraysetops.setxor1d": {
     "line number": [
      93,
      100,
      107,
      110
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      94,
      101,
      108,
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestSetOps.test_union1d": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      355,
      356,
      358,
      364,
      365,
      366
     ]
    },
    "numpy.lib.arraysetops.union1d": {
     "line number": [
      359,
      367,
      370
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      360,
      368,
      370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestUnique": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": {
    "object": {
     "line number": [
      413
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_arraysetops.TestUnique._run_axis_tests": {
  "data": {
   "lineno": 584,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      585,
      591,
      595,
      599,
      614,
      623
     ]
    },
    "numpy.dstack": {
     "line number": [
      603
     ]
    },
    "numpy.lib.arraysetops.unique": {
     "line number": [
      592,
      596,
      600,
      605,
      607,
      616
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      592,
      596,
      600,
      605,
      610,
      612,
      614,
      619,
      621,
      623
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_1d": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": {
    "check_all": {
     "line number": [
      480,
      488,
      494
     ]
    },
    "len": {
     "line number": [
      484,
      486
     ]
    },
    "list": {
     "line number": [
      492,
      493
     ]
    },
    "numpy.array": {
     "line number": [
      478,
      479,
      492,
      493
     ]
    },
    "numpy.chararray": {
     "line number": [
      511
     ]
    },
    "numpy.empty": {
     "line number": [
      484,
      486
     ]
    },
    "numpy.intp": {
     "line number": [
      521,
      522,
      523,
      524
     ]
    },
    "numpy.lib.arraysetops.unique": {
     "line number": [
      504,
      506
     ]
    },
    "numpy.multiply": {
     "line number": [
      469
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      498,
      505,
      507,
      508,
      514
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      521,
      522,
      523,
      524
     ]
    },
    "numpy.typecodes": {
     "line number": [
      473,
      474
     ]
    },
    "numpy.unique": {
     "line number": [
      498,
      513,
      518,
      519,
      520
     ]
    },
    "numpy.zeros": {
     "line number": [
      514
     ]
    },
    "zip": {
     "line number": [
      492,
      493
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_1d.check_all": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": {
    "numpy.lib.arraysetops.unique": {
     "line number": [
      421,
      425,
      430,
      435,
      440,
      446,
      452,
      459
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      422,
      426,
      427,
      431,
      432,
      436,
      437,
      441,
      442,
      443,
      447,
      448,
      449,
      453,
      454,
      455,
      460,
      461,
      462,
      463
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis": {
  "data": {
   "lineno": 541,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      554,
      555
     ]
    },
    "float": {
     "line number": [
      548
     ]
    },
    "int": {
     "line number": [
      547,
      547,
      548
     ]
    },
    "numpy.arange": {
     "line number": [
      554
     ]
    },
    "numpy.array": {
     "line number": [
      555,
      559,
      560
     ]
    },
    "numpy.lib.arraysetops.unique": {
     "line number": [
      556,
      561
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      556,
      561
     ]
    },
    "numpy.typecodes": {
     "line number": [
      543,
      544
     ]
    },
    "numpy.uint8": {
     "line number": [
      554
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis_errors": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      527,
      528
     ]
    },
    "int": {
     "line number": [
      529
     ]
    },
    "numpy.AxisError": {
     "line number": [
      531,
      532
     ]
    },
    "numpy.arange": {
     "line number": [
      531,
      532
     ]
    },
    "numpy.lib.arraysetops.unique": {
     "line number": [
      531,
      532
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      527,
      528,
      531,
      532
     ]
    },
    "object": {
     "line number": [
      527,
      529
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis_list": {
  "data": {
   "lineno": 534,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      537
     ]
    },
    "numpy.lib.arraysetops.unique": {
     "line number": [
      538,
      538,
      539,
      539
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      538,
      539
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_masked": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      565
     ]
    },
    "numpy.ma.masked_equal": {
     "line number": [
      566
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      572,
      573
     ]
    },
    "numpy.unique": {
     "line number": [
      568,
      569
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_sort_order_with_axis": {
  "data": {
   "lineno": 575,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      580
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      582
     ]
    },
    "numpy.unique": {
     "line number": [
      581
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_arraysetops.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.ediff1d": {
  "data": {
   "shadows": "numpy.lib.arraysetops.ediff1d"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.in1d": {
  "data": {
   "shadows": "numpy.lib.arraysetops.in1d"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.intersect1d": {
  "data": {
   "shadows": "numpy.lib.arraysetops.intersect1d"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.isin": {
  "data": {
   "shadows": "numpy.lib.arraysetops.isin"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.setdiff1d": {
  "data": {
   "shadows": "numpy.lib.arraysetops.setdiff1d"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.setxor1d": {
  "data": {
   "shadows": "numpy.lib.arraysetops.setxor1d"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.union1d": {
  "data": {
   "shadows": "numpy.lib.arraysetops.union1d"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arraysetops.unique": {
  "data": {
   "shadows": "numpy.lib.arraysetops.unique"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arrayterator": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_arrayterator.Arrayterator": {
  "data": {
   "shadows": "numpy.lib.Arrayterator"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arrayterator.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arrayterator.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arrayterator.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arrayterator.mul": {
  "data": {
   "shadows": "operator.mul"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arrayterator.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arrayterator.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arrayterator.randint": {
  "data": {
   "shadows": "numpy.random.randint"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arrayterator.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_arrayterator.test": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      18
     ]
    },
    "len": {
     "line number": [
      27,
      42
     ]
    },
    "list": {
     "line number": [
      30,
      30,
      48,
      48
     ]
    },
    "numpy.all": {
     "line number": [
      45
     ]
    },
    "numpy.arange": {
     "line number": [
      13,
      19
     ]
    },
    "numpy.lib.Arrayterator": {
     "line number": [
      23
     ]
    },
    "numpy.random.randint": {
     "line number": [
      16,
      17,
      22,
      33,
      34,
      35
     ]
    },
    "numpy.random.seed": {
     "line number": [
      13
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      27,
      30,
      42,
      45,
      48
     ]
    },
    "operator.mul": {
     "line number": [
      18
     ]
    },
    "range": {
     "line number": [
      17
     ]
    },
    "slice": {
     "line number": [
      36
     ]
    },
    "tuple": {
     "line number": [
      17,
      36
     ]
    },
    "zip": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_financial.Decimal": {
  "data": {
   "shadows": "decimal.Decimal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_financial.TestFinancial": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "object": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_broadcast": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "list": {
     "line number": [
      313,
      317,
      321
     ]
    },
    "numpy.ipmt": {
     "line number": [
      313
     ]
    },
    "numpy.nper": {
     "line number": [
      310
     ]
    },
    "numpy.ppmt": {
     "line number": [
      317,
      321
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      310,
      313,
      317,
      321
     ]
    },
    "range": {
     "line number": [
      313,
      317,
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_broadcast_decimal": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      329,
      329,
      329,
      329,
      330,
      330,
      330,
      331,
      331,
      333,
      333,
      333,
      333,
      334,
      334,
      334,
      335,
      335,
      337,
      337,
      337,
      337,
      338,
      338,
      338,
      338,
      339,
      339,
      339,
      340,
      340
     ]
    },
    "list": {
     "line number": [
      329,
      333,
      337
     ]
    },
    "numpy.ipmt": {
     "line number": [
      329
     ]
    },
    "numpy.ppmt": {
     "line number": [
      333,
      337
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      329,
      333,
      337
     ]
    },
    "range": {
     "line number": [
      329,
      333,
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_decimal_with_when": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      238,
      238,
      238,
      238,
      238,
      239,
      239,
      239,
      239,
      241,
      241,
      241,
      241,
      242,
      242,
      242,
      242,
      243,
      243,
      243,
      243,
      243,
      244,
      244,
      244,
      244,
      247,
      247,
      247,
      247,
      247,
      248,
      248,
      248,
      248,
      250,
      250,
      250,
      250,
      251,
      251,
      251,
      251,
      252,
      252,
      252,
      252,
      252,
      253,
      253,
      253,
      253,
      256,
      256,
      256,
      256,
      256,
      257,
      257,
      257,
      257,
      259,
      259,
      259,
      259,
      260,
      260,
      260,
      260,
      261,
      261,
      261,
      261,
      261,
      262,
      262,
      262,
      262,
      265,
      265,
      265,
      265,
      265,
      266,
      266,
      267,
      267,
      267,
      267,
      267,
      268,
      270,
      270,
      270,
      270,
      270,
      271,
      272,
      272,
      272,
      272,
      272,
      273,
      274,
      274,
      274,
      274,
      274,
      275,
      275,
      276,
      276,
      276,
      276,
      276,
      277,
      280,
      280,
      280,
      280,
      280,
      281,
      281,
      282,
      282,
      282,
      282,
      282,
      283,
      285,
      285,
      285,
      285,
      285,
      286,
      287,
      287,
      287,
      287,
      287,
      288,
      289,
      289,
      289,
      289,
      289,
      290,
      290,
      291,
      291,
      291,
      291,
      291,
      292,
      295,
      295,
      295,
      295,
      295,
      296,
      296,
      297,
      297,
      297,
      297,
      297,
      298,
      300,
      300,
      300,
      300,
      300,
      301,
      302,
      302,
      302,
      302,
      302,
      303,
      304,
      304,
      304,
      304,
      304,
      305,
      305,
      306,
      306,
      306,
      306,
      306,
      307
     ]
    },
    "numpy.fv": {
     "line number": [
      256,
      257,
      259,
      260,
      261,
      262
     ]
    },
    "numpy.ipmt": {
     "line number": [
      295,
      297,
      300,
      302,
      304,
      306
     ]
    },
    "numpy.pmt": {
     "line number": [
      265,
      267,
      270,
      272,
      274,
      276
     ]
    },
    "numpy.ppmt": {
     "line number": [
      280,
      282,
      285,
      287,
      289,
      291
     ]
    },
    "numpy.pv": {
     "line number": [
      247,
      248,
      250,
      251,
      252,
      253
     ]
    },
    "numpy.rate": {
     "line number": [
      238,
      239,
      241,
      242,
      243,
      244
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      238,
      241,
      243,
      247,
      250,
      252,
      256,
      259,
      261,
      265,
      270,
      274,
      280,
      285,
      289,
      295,
      300,
      304
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_fv": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "numpy.fv": {
     "line number": [
      48
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_fv_decimal": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      51,
      51,
      51,
      52
     ]
    },
    "numpy.fv": {
     "line number": [
      51
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_ipmt": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "numpy.ipmt": {
     "line number": [
      116
     ]
    },
    "numpy.round": {
     "line number": [
      116
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_ipmt_decimal": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      119,
      119,
      120
     ]
    },
    "numpy.ipmt": {
     "line number": [
      119
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_irr": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "numpy.irr": {
     "line number": [
      23,
      25,
      27,
      29,
      31,
      33,
      38
     ]
    },
    "numpy.nan": {
     "line number": [
      38
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      23,
      25,
      27,
      29,
      31,
      33
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_mirr": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "numpy.isnan": {
     "line number": [
      151
     ]
    },
    "numpy.mirr": {
     "line number": [
      142,
      145,
      148,
      151
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      151
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      142,
      145,
      148
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_mirr_decimal": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      154,
      154,
      154,
      154,
      155,
      155,
      155,
      155,
      156,
      156,
      157,
      157,
      158,
      160,
      160,
      160,
      161,
      161,
      161,
      162,
      162,
      162,
      164,
      164,
      164,
      165,
      165,
      166,
      166,
      166,
      168,
      168,
      168,
      168,
      168,
      169,
      169
     ]
    },
    "numpy.isnan": {
     "line number": [
      169
     ]
    },
    "numpy.mirr": {
     "line number": [
      157,
      162,
      166,
      169
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      169
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      157,
      162,
      166
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_nper": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "numpy.nper": {
     "line number": [
      123
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_nper2": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "numpy.nper": {
     "line number": [
      127
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_npv": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "numpy.npv": {
     "line number": [
      132
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_npv_decimal": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      137,
      138
     ]
    },
    "numpy.npv": {
     "line number": [
      137
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_pmt": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      65
     ]
    },
    "numpy.pmt": {
     "line number": [
      55,
      59,
      64
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      57,
      61,
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_pmt_decimal": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      69,
      69,
      70,
      73,
      73,
      73,
      78,
      78,
      78,
      78,
      79,
      79,
      79,
      79,
      80,
      80,
      81,
      81
     ]
    },
    "numpy.array": {
     "line number": [
      80
     ]
    },
    "numpy.pmt": {
     "line number": [
      69,
      73,
      78
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      71,
      75,
      86,
      87,
      88,
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_ppmt": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "numpy.ppmt": {
     "line number": [
      92
     ]
    },
    "numpy.round": {
     "line number": [
      92
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_ppmt_decimal": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      95,
      95,
      95,
      95,
      95,
      96
     ]
    },
    "numpy.ppmt": {
     "line number": [
      95
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_ppmt_special_rate": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "numpy.ppmt": {
     "line number": [
      101
     ]
    },
    "numpy.round": {
     "line number": [
      101
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_ppmt_special_rate_decimal": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      111
     ]
    },
    "decimal.Decimal": {
     "line number": [
      112,
      112,
      112,
      113
     ]
    },
    "numpy.ppmt": {
     "line number": [
      112
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      112
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      111
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_ppmt_special_rate_decimal.raise_error_because_not_equal": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      108,
      108,
      108,
      109
     ]
    },
    "numpy.ppmt": {
     "line number": [
      108
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      107
     ]
    },
    "round": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_pv": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "numpy.pv": {
     "line number": [
      41
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_pv_decimal": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      44,
      44,
      44,
      44,
      45
     ]
    },
    "numpy.pv": {
     "line number": [
      44
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_rate": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "numpy.rate": {
     "line number": [
      14
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_rate_decimal": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      18,
      18,
      18,
      18,
      19
     ]
    },
    "numpy.rate": {
     "line number": [
      18
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.TestFinancial.test_when": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": {
    "numpy.fv": {
     "line number": [
      191,
      192,
      194,
      195,
      196,
      197
     ]
    },
    "numpy.ipmt": {
     "line number": [
      218,
      219,
      221,
      222,
      223,
      224
     ]
    },
    "numpy.nper": {
     "line number": [
      227,
      228,
      230,
      231,
      232,
      233
     ]
    },
    "numpy.pmt": {
     "line number": [
      200,
      201,
      203,
      204,
      205,
      206
     ]
    },
    "numpy.ppmt": {
     "line number": [
      209,
      210,
      212,
      213,
      214,
      215
     ]
    },
    "numpy.pv": {
     "line number": [
      182,
      183,
      185,
      186,
      187,
      188
     ]
    },
    "numpy.rate": {
     "line number": [
      173,
      174,
      176,
      177,
      178,
      179
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      173,
      176,
      178,
      182,
      185,
      187,
      191,
      194,
      196,
      200,
      203,
      205,
      209,
      212,
      214,
      218,
      221,
      223,
      227,
      230,
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_financial.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_financial.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_financial.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_financial.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_financial.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_financial.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_financial.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_financial.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_financial.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format": {
  "data": {
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      331
     ]
    },
    "numpy.array": {
     "line number": [
      334,
      336,
      410,
      411,
      412,
      413
     ]
    },
    "numpy.complex128": {
     "line number": [
      324
     ]
    },
    "numpy.complex64": {
     "line number": [
      323
     ]
    },
    "numpy.dtype": {
     "line number": [
      330,
      410,
      411,
      412,
      413,
      527,
      529,
      532,
      534,
      536
     ]
    },
    "numpy.float32": {
     "line number": [
      321
     ]
    },
    "numpy.float64": {
     "line number": [
      322
     ]
    },
    "numpy.int16": {
     "line number": [
      316
     ]
    },
    "numpy.int32": {
     "line number": [
      318
     ]
    },
    "numpy.int64": {
     "line number": [
      320
     ]
    },
    "numpy.int8": {
     "line number": [
      314
     ]
    },
    "numpy.lib.tests.test_format.NbufferT": {
     "line number": [
      411,
      413
     ]
    },
    "numpy.lib.tests.test_format.Ndescr": {
     "line number": [
      411,
      413
     ]
    },
    "numpy.lib.tests.test_format.PbufferT": {
     "line number": [
      410,
      412
     ]
    },
    "numpy.lib.tests.test_format.Pdescr": {
     "line number": [
      410,
      412
     ]
    },
    "numpy.lib.tests.test_format.basic": {
     "line number": [
      338,
      340,
      342,
      344
     ]
    },
    "numpy.lib.tests.test_format.basic_arrays": {
     "line number": [
      332
     ]
    },
    "numpy.lib.tests.test_format.dt2": {
     "line number": [
      532
     ]
    },
    "numpy.lib.tests.test_format.dtype": {
     "line number": [
      331,
      334,
      336
     ]
    },
    "numpy.lib.tests.test_format.scalars": {
     "line number": [
      328
     ]
    },
    "numpy.uint16": {
     "line number": [
      315
     ]
    },
    "numpy.uint32": {
     "line number": [
      317
     ]
    },
    "numpy.uint64": {
     "line number": [
      319
     ]
    },
    "numpy.uint8": {
     "line number": [
      313
     ]
    },
    "object": {
     "line number": [
      325
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.tests.test_format.BytesIO": {
  "data": {
   "shadows": "io.BytesIO"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.BytesIOSRandomSize": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      418
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_format.BytesIOSRandomSize.read": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": {
    "numpy.lib.tests.test_format.BytesIOSRandomSize": {
     "line number": [
      422
     ]
    },
    "numpy.lib.tests.test_format.random": {
     "line number": [
      421
     ]
    },
    "super": {
     "line number": [
      422
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.NbufferT": {
  "data": {
   "lineno": 399
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.Ndescr": {
  "data": {
   "lineno": 380
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.PbufferT": {
  "data": {
   "lineno": 361
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.Pdescr": {
  "data": {
   "lineno": 355
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.__builtin__": {
  "data": {
   "shadows": "__builtin__"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.assert_equal_": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      451
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.bad_version_magic": {
  "data": {
   "lineno": 709
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.basic": {
  "data": {
   "lineno": 331
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.basic_arrays": {
  "data": {
   "lineno": 327
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.dt1": {
  "data": {
   "lineno": 527
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.dt2": {
  "data": {
   "lineno": 529
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.dt3": {
  "data": {
   "lineno": 532
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.dt4": {
  "data": {
   "lineno": 534
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.dt5": {
  "data": {
   "lineno": 536
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.dtype": {
  "data": {
   "lineno": 330
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.format": {
  "data": {
   "shadows": "numpy.lib.format"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.malformed_magic": {
  "data": {
   "lineno": 717
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.record_arrays": {
  "data": {
   "lineno": 409
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.roundtrip": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      426,
      428
     ]
    },
    "numpy.lib.format.read_array": {
     "line number": [
      429
     ]
    },
    "numpy.lib.format.write_array": {
     "line number": [
      427
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.roundtrip_randsize": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      434
     ]
    },
    "numpy.lib.format.read_array": {
     "line number": [
      437
     ]
    },
    "numpy.lib.format.write_array": {
     "line number": [
      435
     ]
    },
    "numpy.lib.tests.test_format.BytesIOSRandomSize": {
     "line number": [
      436
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.roundtrip_truncated": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      442,
      445
     ]
    },
    "numpy.lib.format.read_array": {
     "line number": [
      446
     ]
    },
    "numpy.lib.format.write_array": {
     "line number": [
      443
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.scalars": {
  "data": {
   "lineno": 312
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.setup_module": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": {
    "numpy.lib.tests.test_format.tempdir": {
     "line number": [
      301
     ]
    },
    "numpy.lib.tests.test_format.tempfile": {
     "line number": [
      301
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.sp": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.teardown_module": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "numpy.lib.tests.test_format.os": {
     "line number": [
      306
     ]
    },
    "numpy.lib.tests.test_format.shutil": {
     "line number": [
      307
     ]
    },
    "numpy.lib.tests.test_format.tempdir": {
     "line number": [
      306,
      306,
      307,
      308
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.tempdir": {
  "data": {
   "lineno": 294
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_format.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_format.test_bad_header": {
  "data": {
   "lineno": 803,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      806,
      808,
      812,
      819,
      827
     ]
    },
    "io.BytesIO": {
     "line number": [
      805,
      807,
      811,
      817,
      825
     ]
    },
    "numpy.lib.format.read_array_header_1_0": {
     "line number": [
      806,
      808,
      812,
      819,
      827
     ]
    },
    "numpy.lib.format.write_array_header_1_0": {
     "line number": [
      818,
      826
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      806,
      808,
      812,
      819,
      827
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_bad_magic_args": {
  "data": {
   "lineno": 760,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      761,
      762,
      763,
      764
     ]
    },
    "numpy.lib.format.magic": {
     "line number": [
      761,
      762,
      763,
      764
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      761,
      762,
      763,
      764
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_compressed_roundtrip": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": {
    "numpy.lib.tests.test_format.os": {
     "line number": [
      520
     ]
    },
    "numpy.lib.tests.test_format.tempdir": {
     "line number": [
      520
     ]
    },
    "numpy.load": {
     "line number": [
      522
     ]
    },
    "numpy.random.rand": {
     "line number": [
      519
     ]
    },
    "numpy.savez_compressed": {
     "line number": [
      521
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      523
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_empty_npz": {
  "data": {
   "lineno": 877,
   "symbols_in_volume": {
    "numpy.lib.tests.test_format.os": {
     "line number": [
      879
     ]
    },
    "numpy.lib.tests.test_format.tempdir": {
     "line number": [
      879
     ]
    },
    "numpy.load": {
     "line number": [
      881
     ]
    },
    "numpy.savez": {
     "line number": [
      880
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_large_archive": {
  "data": {
   "lineno": 855,
   "symbols_in_volume": {
    "MemoryError": {
     "line number": [
      863
     ]
    },
    "numpy.dtype": {
     "line number": [
      855
     ]
    },
    "numpy.empty": {
     "line number": [
      862
     ]
    },
    "numpy.intp": {
     "line number": [
      855
     ]
    },
    "numpy.lib.tests.test_format.os": {
     "line number": [
      866
     ]
    },
    "numpy.lib.tests.test_format.pytest": {
     "line number": [
      864,
      855,
      857
     ]
    },
    "numpy.lib.tests.test_format.tempdir": {
     "line number": [
      866
     ]
    },
    "numpy.load": {
     "line number": [
      872
     ]
    },
    "numpy.savez": {
     "line number": [
      869
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      874
     ]
    },
    "numpy.uint8": {
     "line number": [
      862
     ]
    },
    "open": {
     "line number": [
      868,
      871
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_large_file_support": {
  "data": {
   "lineno": 830,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      841
     ]
    },
    "numpy.arange": {
     "line number": [
      846
     ]
    },
    "numpy.lib.tests.test_format.os": {
     "line number": [
      834
     ]
    },
    "numpy.lib.tests.test_format.pytest": {
     "line number": [
      832,
      842
     ]
    },
    "numpy.lib.tests.test_format.sys": {
     "line number": [
      831,
      831
     ]
    },
    "numpy.lib.tests.test_format.tempdir": {
     "line number": [
      834
     ]
    },
    "numpy.load": {
     "line number": [
      851
     ]
    },
    "numpy.save": {
     "line number": [
      847
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      852
     ]
    },
    "open": {
     "line number": [
      844,
      849
     ]
    },
    "subprocess.check_call": {
     "line number": [
      840
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_large_header": {
  "data": {
   "lineno": 767,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      774
     ]
    },
    "io.BytesIO": {
     "line number": [
      768,
      772
     ]
    },
    "numpy.lib.format.write_array_header_1_0": {
     "line number": [
      770,
      774
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      774
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_load_padded_dtype": {
  "data": {
   "lineno": 539,
   "symbols_in_volume": {
    "numpy.lib.tests.test_format.dt1": {
     "line number": [
      539
     ]
    },
    "numpy.lib.tests.test_format.dt2": {
     "line number": [
      539
     ]
    },
    "numpy.lib.tests.test_format.dt3": {
     "line number": [
      539
     ]
    },
    "numpy.lib.tests.test_format.dt4": {
     "line number": [
      539
     ]
    },
    "numpy.lib.tests.test_format.dt5": {
     "line number": [
      539
     ]
    },
    "numpy.lib.tests.test_format.os": {
     "line number": [
      544
     ]
    },
    "numpy.lib.tests.test_format.pytest": {
     "line number": [
      539
     ]
    },
    "numpy.lib.tests.test_format.tempdir": {
     "line number": [
      544
     ]
    },
    "numpy.load": {
     "line number": [
      546
     ]
    },
    "numpy.savez": {
     "line number": [
      545
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      547
     ]
    },
    "numpy.zeros": {
     "line number": [
      541
     ]
    },
    "range": {
     "line number": [
      542
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_long_str": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      475
     ]
    },
    "numpy.lib.format.BUFFER_SIZE": {
     "line number": [
      475
     ]
    },
    "numpy.lib.tests.test_format.roundtrip": {
     "line number": [
      476
     ]
    },
    "numpy.ones": {
     "line number": [
      475
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      477
     ]
    },
    "str": {
     "line number": [
      475
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_memmap_roundtrip": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": {
    "numpy.lib.format.open_memmap": {
     "line number": [
      499,
      514
     ]
    },
    "numpy.lib.format.write_array": {
     "line number": [
      493
     ]
    },
    "numpy.lib.tests.test_format.assert_equal_": {
     "line number": [
      511
     ]
    },
    "numpy.lib.tests.test_format.basic_arrays": {
     "line number": [
      484
     ]
    },
    "numpy.lib.tests.test_format.os": {
     "line number": [
      489,
      490
     ]
    },
    "numpy.lib.tests.test_format.pytest": {
     "line number": [
      480
     ]
    },
    "numpy.lib.tests.test_format.record_arrays": {
     "line number": [
      484
     ]
    },
    "numpy.lib.tests.test_format.sys": {
     "line number": [
      483,
      483
     ]
    },
    "numpy.lib.tests.test_format.tempdir": {
     "line number": [
      489,
      490
     ]
    },
    "open": {
     "line number": [
      491,
      505,
      508
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_pickle_disallow": {
  "data": {
   "lineno": 613,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      617,
      622,
      625
     ]
    },
    "numpy.array": {
     "line number": [
      625
     ]
    },
    "numpy.lib.tests.test_format.os": {
     "line number": [
      614,
      614,
      616,
      620,
      624
     ]
    },
    "numpy.lib.tests.test_format.tempdir": {
     "line number": [
      624
     ]
    },
    "numpy.load": {
     "line number": [
      617,
      621
     ]
    },
    "numpy.save": {
     "line number": [
      625
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      617,
      622,
      625
     ]
    },
    "object": {
     "line number": [
      625
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_pickle_python2_python3": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      605,
      609
     ]
    },
    "UnicodeError": {
     "line number": [
      602,
      608
     ]
    },
    "bytes": {
     "line number": [
      593
     ]
    },
    "isinstance": {
     "line number": [
      588,
      593
     ]
    },
    "numpy.array": {
     "line number": [
      570
     ]
    },
    "numpy.lib.tests.test_format.__builtin__": {
     "line number": [
      568
     ]
    },
    "numpy.lib.tests.test_format.os": {
     "line number": [
      562,
      562,
      576
     ]
    },
    "numpy.lib.tests.test_format.sys": {
     "line number": [
      564,
      586,
      598
     ]
    },
    "numpy.load": {
     "line number": [
      579,
      601,
      604,
      608,
      609
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      588,
      593
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      589,
      591,
      594,
      596
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      602,
      605,
      608,
      609
     ]
    },
    "object": {
     "line number": [
      572
     ]
    },
    "range": {
     "line number": [
      565
     ]
    },
    "str": {
     "line number": [
      588
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_python2_python3_interoperability": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": {
    "numpy.lib.tests.test_format.os": {
     "line number": [
      555,
      555
     ]
    },
    "numpy.lib.tests.test_format.sys": {
     "line number": [
      551
     ]
    },
    "numpy.load": {
     "line number": [
      556
     ]
    },
    "numpy.ones": {
     "line number": [
      557
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      557
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_read_array_header_1_0": {
  "data": {
   "lineno": 777,
   "symbols_in_volume": {
    "float": {
     "line number": [
      780,
      787
     ]
    },
    "io.BytesIO": {
     "line number": [
      778
     ]
    },
    "numpy.lib.format.ARRAY_ALIGN": {
     "line number": [
      786
     ]
    },
    "numpy.lib.format.MAGIC_LEN": {
     "line number": [
      783
     ]
    },
    "numpy.lib.format.read_array_header_1_0": {
     "line number": [
      784
     ]
    },
    "numpy.lib.format.write_array": {
     "line number": [
      781
     ]
    },
    "numpy.lib.tests.test_format.dtype": {
     "line number": [
      784,
      787
     ]
    },
    "numpy.ones": {
     "line number": [
      780
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      786,
      787
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_read_array_header_2_0": {
  "data": {
   "lineno": 790,
   "symbols_in_volume": {
    "float": {
     "line number": [
      793,
      800
     ]
    },
    "io.BytesIO": {
     "line number": [
      791
     ]
    },
    "numpy.lib.format.ARRAY_ALIGN": {
     "line number": [
      799
     ]
    },
    "numpy.lib.format.MAGIC_LEN": {
     "line number": [
      796
     ]
    },
    "numpy.lib.format.read_array_header_2_0": {
     "line number": [
      797
     ]
    },
    "numpy.lib.format.write_array": {
     "line number": [
      794
     ]
    },
    "numpy.lib.tests.test_format.dtype": {
     "line number": [
      797,
      800
     ]
    },
    "numpy.ones": {
     "line number": [
      793
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      799,
      800
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_read_magic": {
  "data": {
   "lineno": 727,
   "symbols_in_volume": {
    "float": {
     "line number": [
      731
     ]
    },
    "io.BytesIO": {
     "line number": [
      728,
      729
     ]
    },
    "numpy.lib.format.MAGIC_LEN": {
     "line number": [
      745,
      746
     ]
    },
    "numpy.lib.format.read_magic": {
     "line number": [
      739,
      740
     ]
    },
    "numpy.lib.format.write_array": {
     "line number": [
      733,
      734
     ]
    },
    "numpy.ones": {
     "line number": [
      731
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      742,
      743,
      745,
      746
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_read_magic_bad_magic": {
  "data": {
   "lineno": 748,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      751
     ]
    },
    "io.BytesIO": {
     "line number": [
      750
     ]
    },
    "numpy.lib.format.read_array": {
     "line number": [
      751
     ]
    },
    "numpy.lib.tests.test_format.malformed_magic": {
     "line number": [
      749
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      751
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_read_version_1_0_bad_magic": {
  "data": {
   "lineno": 754,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      757
     ]
    },
    "io.BytesIO": {
     "line number": [
      756
     ]
    },
    "numpy.lib.format.read_array": {
     "line number": [
      757
     ]
    },
    "numpy.lib.tests.test_format.bad_version_magic": {
     "line number": [
      755
     ]
    },
    "numpy.lib.tests.test_format.malformed_magic": {
     "line number": [
      755
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      757
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_roundtrip": {
  "data": {
   "lineno": 454,
   "symbols_in_volume": {
    "numpy.lib.tests.test_format.basic_arrays": {
     "line number": [
      455
     ]
    },
    "numpy.lib.tests.test_format.record_arrays": {
     "line number": [
      455
     ]
    },
    "numpy.lib.tests.test_format.roundtrip": {
     "line number": [
      456
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      457
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_roundtrip_randsize": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": {
    "numpy.lib.tests.test_format.basic_arrays": {
     "line number": [
      461
     ]
    },
    "numpy.lib.tests.test_format.record_arrays": {
     "line number": [
      461
     ]
    },
    "numpy.lib.tests.test_format.roundtrip_randsize": {
     "line number": [
      463
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      464
     ]
    },
    "object": {
     "line number": [
      462
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_roundtrip_truncated": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      470
     ]
    },
    "numpy.lib.tests.test_format.basic_arrays": {
     "line number": [
      468
     ]
    },
    "numpy.lib.tests.test_format.roundtrip_truncated": {
     "line number": [
      470
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      470
     ]
    },
    "object": {
     "line number": [
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_version_2_0": {
  "data": {
   "lineno": 629,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      637,
      639
     ]
    },
    "ValueError": {
     "line number": [
      651
     ]
    },
    "float": {
     "line number": [
      632
     ]
    },
    "io.BytesIO": {
     "line number": [
      630
     ]
    },
    "len": {
     "line number": [
      644
     ]
    },
    "numpy.lib.format.ARRAY_ALIGN": {
     "line number": [
      644
     ]
    },
    "numpy.lib.format.read_array": {
     "line number": [
      647
     ]
    },
    "numpy.lib.format.write_array": {
     "line number": [
      635,
      638,
      651
     ]
    },
    "numpy.lib.tests.test_format.warnings": {
     "line number": [
      636,
      637
     ]
    },
    "numpy.ones": {
     "line number": [
      633
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      639,
      644
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      648
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      651
     ]
    },
    "range": {
     "line number": [
      632
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_version_2_0_memmap": {
  "data": {
   "lineno": 654,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      671,
      674
     ]
    },
    "ValueError": {
     "line number": [
      662
     ]
    },
    "float": {
     "line number": [
      657
     ]
    },
    "numpy.lib.format.open_memmap": {
     "line number": [
      662,
      665,
      672,
      678
     ]
    },
    "numpy.lib.tests.test_format.pytest": {
     "line number": [
      654
     ]
    },
    "numpy.lib.tests.test_format.tempdir": {
     "line number": [
      659
     ]
    },
    "numpy.lib.tests.test_format.tempfile": {
     "line number": [
      659
     ]
    },
    "numpy.lib.tests.test_format.warnings": {
     "line number": [
      670,
      671
     ]
    },
    "numpy.ones": {
     "line number": [
      658
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      674
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      679
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      662
     ]
    },
    "range": {
     "line number": [
      657
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.test_write_version": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      704
     ]
    },
    "io.BytesIO": {
     "line number": [
      683
     ]
    },
    "numpy.arange": {
     "line number": [
      684
     ]
    },
    "numpy.lib.format.write_array": {
     "line number": [
      686,
      687,
      689,
      690,
      692,
      693,
      706
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      704
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_format.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_function_base.HAS_REFCOUNT": {
  "data": {
   "shadows": "numpy.testing.HAS_REFCOUNT"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.TestAdd_newdoc": {
  "data": {
   "lineno": 3106,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3106
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestAdd_newdoc.test_add_doc": {
  "data": {
   "lineno": 3108,
   "symbols_in_volume": {
    "len": {
     "line number": [
      3112,
      3113,
      3114
     ]
    },
    "numpy.core.flatiter.index.__doc__": {
     "line number": [
      3112
     ]
    },
    "numpy.core.ufunc.identity.__doc__": {
     "line number": [
      3113
     ]
    },
    "numpy.lib.index_tricks.mgrid.__doc__": {
     "line number": [
      3114
     ]
    },
    "numpy.lib.tests.test_function_base.pytest": {
     "line number": [
      3108
     ]
    },
    "numpy.lib.tests.test_function_base.sys": {
     "line number": [
      3108
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3113,
      3114
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3112
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAdd_newdoc_ufunc": {
  "data": {
   "lineno": 3096,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3096
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestAdd_newdoc_ufunc.test_string_arg": {
  "data": {
   "lineno": 3102,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      3103
     ]
    },
    "numpy.add": {
     "line number": [
      3103
     ]
    },
    "numpy.lib.add_newdoc_ufunc": {
     "line number": [
      3103
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      3103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAdd_newdoc_ufunc.test_ufunc_arg": {
  "data": {
   "lineno": 3098,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      3099
     ]
    },
    "ValueError": {
     "line number": [
      3100
     ]
    },
    "numpy.add": {
     "line number": [
      3100
     ]
    },
    "numpy.lib.add_newdoc_ufunc": {
     "line number": [
      3099,
      3100
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      3099,
      3100
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAll": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": {
    "object": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestAll.test_basic": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      228,
      229,
      230,
      231
     ]
    },
    "numpy.array": {
     "line number": [
      231
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      228,
      229,
      230,
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAll.test_nd": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      235
     ]
    },
    "numpy.alltrue": {
     "line number": [
      236,
      237
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      235
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      236,
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAmax": {
  "data": {
   "lineno": 542,
   "symbols_in_volume": {
    "object": {
     "line number": [
      542
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestAmax.test_basic": {
  "data": {
   "lineno": 544,
   "symbols_in_volume": {
    "numpy.amax": {
     "line number": [
      546,
      550,
      551
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      546,
      550,
      551
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAmin": {
  "data": {
   "lineno": 554,
   "symbols_in_volume": {
    "object": {
     "line number": [
      554
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestAmin.test_basic": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": {
    "numpy.amin": {
     "line number": [
      558,
      562,
      563
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      558,
      562,
      563
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAngle": {
  "data": {
   "lineno": 1081,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1081
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestAngle.test_basic": {
  "data": {
   "lineno": 1083,
   "symbols_in_volume": {
    "numpy.arctan": {
     "line number": [
      1088,
      1089,
      1090,
      1090
     ]
    },
    "numpy.array": {
     "line number": [
      1092
     ]
    },
    "numpy.lib.angle": {
     "line number": [
      1086,
      1091
     ]
    },
    "numpy.pi": {
     "line number": [
      1089,
      1089,
      1089,
      1090,
      1092
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1084,
      1084
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1093,
      1094
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAngle.test_subclass": {
  "data": {
   "lineno": 1096,
   "symbols_in_volume": {
    "numpy.arctan": {
     "line number": [
      1099,
      1099
     ]
    },
    "numpy.lib.angle": {
     "line number": [
      1101
     ]
    },
    "numpy.ma.array": {
     "line number": [
      1097,
      1099
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      1098,
      1100
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1097
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1102,
      1103,
      1104
     ]
    },
    "type": {
     "line number": [
      1102,
      1102
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAny": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "object": {
     "line number": [
      205
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestAny.test_basic": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "numpy.any": {
     "line number": [
      211,
      212,
      213
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      211,
      212,
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAny.test_nd": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "numpy.any": {
     "line number": [
      217
     ]
    },
    "numpy.sometrue": {
     "line number": [
      218,
      219
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      217
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      218,
      219
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAverage": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "object": {
     "line number": [
      268
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestAverage.test_basic": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      271,
      273
     ]
    },
    "numpy.lib.average": {
     "line number": [
      272,
      274,
      276,
      281,
      282,
      285,
      286
     ]
    },
    "numpy.ones": {
     "line number": [
      278
     ]
    },
    "numpy.random.rand": {
     "line number": [
      284
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      272,
      274,
      276
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      281,
      282,
      285,
      286
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAverage.test_object_dtype": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      364,
      365
     ]
    },
    "numpy.lib.average": {
     "line number": [
      367
     ]
    },
    "numpy.lib.tests.test_function_base.decimal": {
     "line number": [
      364,
      365
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      367
     ]
    },
    "range": {
     "line number": [
      364,
      365
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAverage.test_returned": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      321,
      328,
      331,
      336,
      340,
      344
     ]
    },
    "numpy.lib.average": {
     "line number": [
      324,
      327,
      330,
      335,
      339,
      343
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      328,
      331,
      336,
      340,
      344
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAverage.test_subclasses": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      349,
      350
     ]
    },
    "numpy.average": {
     "line number": [
      352,
      353
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      352,
      353
     ]
    },
    "type": {
     "line number": [
      352,
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAverage.test_subclasses.subclass": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      347
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestAverage.test_upcasting": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      359,
      360
     ]
    },
    "numpy.average": {
     "line number": [
      361
     ]
    },
    "numpy.dtype": {
     "line number": [
      361
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      361
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestAverage.test_weights": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      289,
      290,
      292,
      292
     ]
    },
    "numpy.array": {
     "line number": [
      295,
      298,
      303,
      311
     ]
    },
    "numpy.average": {
     "line number": [
      318
     ]
    },
    "numpy.float32": {
     "line number": [
      315
     ]
    },
    "numpy.float64": {
     "line number": [
      316
     ]
    },
    "numpy.lib.average": {
     "line number": [
      291,
      297,
      302,
      312,
      313
     ]
    },
    "numpy.random.rand": {
     "line number": [
      315,
      316
     ]
    },
    "numpy.result_type": {
     "line number": [
      318
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      318
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      293,
      299,
      304
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      312
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      313
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestBincount": {
  "data": {
   "lineno": 2158,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2158
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestBincount.test_dtype_reference_leaks": {
  "data": {
   "lineno": 2228,
   "symbols_in_volume": {
    "numpy.bincount": {
     "line number": [
      2235,
      2240
     ]
    },
    "numpy.double": {
     "line number": [
      2232,
      2237,
      2242
     ]
    },
    "numpy.dtype": {
     "line number": [
      2231,
      2232,
      2236,
      2237,
      2241,
      2242
     ]
    },
    "numpy.intp": {
     "line number": [
      2231,
      2236,
      2241
     ]
    },
    "numpy.lib.tests.test_function_base.pytest": {
     "line number": [
      2228
     ]
    },
    "numpy.lib.tests.test_function_base.sys": {
     "line number": [
      2231,
      2232,
      2236,
      2237,
      2241,
      2242
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      2228
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2236,
      2237,
      2241,
      2242
     ]
    },
    "range": {
     "line number": [
      2234,
      2239
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestBincount.test_empty": {
  "data": {
   "lineno": 2201,
   "symbols_in_volume": {
    "int": {
     "line number": [
      2202
     ]
    },
    "numpy.array": {
     "line number": [
      2202
     ]
    },
    "numpy.bincount": {
     "line number": [
      2203
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestBincount.test_empty_with_minlength": {
  "data": {
   "lineno": 2206,
   "symbols_in_volume": {
    "int": {
     "line number": [
      2207,
      2209
     ]
    },
    "numpy.array": {
     "line number": [
      2207
     ]
    },
    "numpy.bincount": {
     "line number": [
      2208
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2209
     ]
    },
    "numpy.zeros": {
     "line number": [
      2209
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestBincount.test_simple": {
  "data": {
   "lineno": 2160,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2161
     ]
    },
    "numpy.bincount": {
     "line number": [
      2161
     ]
    },
    "numpy.ones": {
     "line number": [
      2162
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestBincount.test_simple2": {
  "data": {
   "lineno": 2164,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2165,
      2166
     ]
    },
    "numpy.bincount": {
     "line number": [
      2165
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2166
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestBincount.test_simple_weight": {
  "data": {
   "lineno": 2168,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2169
     ]
    },
    "numpy.array": {
     "line number": [
      2170
     ]
    },
    "numpy.bincount": {
     "line number": [
      2171
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2172
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestBincount.test_simple_weight2": {
  "data": {
   "lineno": 2174,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2175,
      2176,
      2178
     ]
    },
    "numpy.bincount": {
     "line number": [
      2177
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2178
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestBincount.test_with_incorrect_minlength": {
  "data": {
   "lineno": 2211,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      2213,
      2221
     ]
    },
    "ValueError": {
     "line number": [
      2216,
      2224
     ]
    },
    "int": {
     "line number": [
      2212
     ]
    },
    "numpy.arange": {
     "line number": [
      2220
     ]
    },
    "numpy.array": {
     "line number": [
      2212
     ]
    },
    "numpy.bincount": {
     "line number": [
      2215,
      2218,
      2223,
      2226
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      2213,
      2216,
      2221,
      2224
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestBincount.test_with_minlength": {
  "data": {
   "lineno": 2180,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2181,
      2183,
      2186
     ]
    },
    "numpy.bincount": {
     "line number": [
      2182,
      2185
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2183,
      2186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestBincount.test_with_minlength_and_weights": {
  "data": {
   "lineno": 2195,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2196,
      2197,
      2199
     ]
    },
    "numpy.bincount": {
     "line number": [
      2198
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2199
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestBincount.test_with_minlength_smaller_than_maxvalue": {
  "data": {
   "lineno": 2188,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2189,
      2191,
      2193
     ]
    },
    "numpy.bincount": {
     "line number": [
      2190,
      2192
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2191,
      2193
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCheckFinite": {
  "data": {
   "lineno": 1717,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1717
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestCheckFinite.test_dtype_order": {
  "data": {
   "lineno": 1727,
   "symbols_in_volume": {
    "numpy.float64": {
     "line number": [
      1730,
      1731
     ]
    },
    "numpy.lib.asarray_chkfinite": {
     "line number": [
      1730
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1731
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCheckFinite.test_simple": {
  "data": {
   "lineno": 1719,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1724,
      1725
     ]
    },
    "numpy.inf": {
     "line number": [
      1721
     ]
    },
    "numpy.lib.asarray_chkfinite": {
     "line number": [
      1723,
      1724,
      1725
     ]
    },
    "numpy.nan": {
     "line number": [
      1722
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1724,
      1725
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCopy": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "object": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestCopy.test_basic": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      243
     ]
    },
    "numpy.copy": {
     "line number": [
      244
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      245
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      247,
      248
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCopy.test_order": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      254,
      257
     ]
    },
    "numpy.copy": {
     "line number": [
      260,
      263
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      255,
      256,
      258,
      259,
      261,
      262,
      264,
      265
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCorrCoef": {
  "data": {
   "lineno": 1734,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1735,
      1739,
      1743,
      1747
     ]
    },
    "object": {
     "line number": [
      1734
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestCorrCoef.test_bias": {
  "data": {
   "lineno": 1780,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1784,
      1785,
      1786
     ]
    },
    "numpy.lib.corrcoef": {
     "line number": [
      1784,
      1785,
      1788
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      1783
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1788
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      1784,
      1785
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1782
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCorrCoef.test_complex": {
  "data": {
   "lineno": 1790,
   "symbols_in_volume": {
    "numpy.abs": {
     "line number": [
      1795
     ]
    },
    "numpy.all": {
     "line number": [
      1795
     ]
    },
    "numpy.array": {
     "line number": [
      1791,
      1793
     ]
    },
    "numpy.lib.corrcoef": {
     "line number": [
      1792
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1795
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1794
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCorrCoef.test_ddof": {
  "data": {
   "lineno": 1768,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1772,
      1773
     ]
    },
    "numpy.lib.corrcoef": {
     "line number": [
      1772,
      1775,
      1776,
      1777,
      1778
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      1771
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1775,
      1776,
      1777,
      1778
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      1772
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1770
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCorrCoef.test_empty": {
  "data": {
   "lineno": 1802,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      1804
     ]
    },
    "numpy.array": {
     "line number": [
      1805,
      1806,
      1807,
      1808,
      1809
     ]
    },
    "numpy.lib.corrcoef": {
     "line number": [
      1805,
      1806,
      1808
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      1803,
      1804
     ]
    },
    "numpy.nan": {
     "line number": [
      1805,
      1809,
      1809,
      1809,
      1809
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1805,
      1806,
      1808
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCorrCoef.test_extreme": {
  "data": {
   "lineno": 1811,
   "symbols_in_volume": {
    "numpy.abs": {
     "line number": [
      1816
     ]
    },
    "numpy.all": {
     "line number": [
      1816
     ]
    },
    "numpy.array": {
     "line number": [
      1815
     ]
    },
    "numpy.errstate": {
     "line number": [
      1813
     ]
    },
    "numpy.lib.corrcoef": {
     "line number": [
      1814
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1816
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1815
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCorrCoef.test_non_array": {
  "data": {
   "lineno": 1755,
   "symbols_in_volume": {
    "numpy.corrcoef": {
     "line number": [
      1756
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1756
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCorrCoef.test_simple": {
  "data": {
   "lineno": 1759,
   "symbols_in_volume": {
    "numpy.abs": {
     "line number": [
      1762,
      1766
     ]
    },
    "numpy.all": {
     "line number": [
      1762,
      1766
     ]
    },
    "numpy.lib.corrcoef": {
     "line number": [
      1760,
      1764
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1762,
      1766
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1761,
      1765
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCorrCoef.test_xy": {
  "data": {
   "lineno": 1797,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1798,
      1799,
      1800
     ]
    },
    "numpy.corrcoef": {
     "line number": [
      1800
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1800
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCov": {
  "data": {
   "lineno": 1819,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1820,
      1821,
      1822,
      1823,
      1824,
      1825,
      1827,
      1828,
      1830
     ]
    },
    "numpy.integer": {
     "line number": [
      1826
     ]
    },
    "numpy.ones": {
     "line number": [
      1826,
      1829
     ]
    },
    "object": {
     "line number": [
      1819
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestCov.test_1D_rowvar": {
  "data": {
   "lineno": 1862,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1864
     ]
    },
    "numpy.lib.cov": {
     "line number": [
      1863,
      1863,
      1865,
      1865
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1863,
      1865
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCov.test_1D_variance": {
  "data": {
   "lineno": 1867,
   "symbols_in_volume": {
    "numpy.lib.cov": {
     "line number": [
      1868
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1868
     ]
    },
    "numpy.var": {
     "line number": [
      1868
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCov.test_aweights": {
  "data": {
   "lineno": 1886,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      1892,
      1894
     ]
    },
    "ValueError": {
     "line number": [
      1896
     ]
    },
    "numpy.lib.cov": {
     "line number": [
      1887,
      1888,
      1889,
      1890,
      1892,
      1894,
      1896
     ]
    },
    "numpy.ones": {
     "line number": [
      1891,
      1893,
      1895
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1887,
      1888,
      1890
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1892,
      1894,
      1896
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCov.test_basic": {
  "data": {
   "lineno": 1832,
   "symbols_in_volume": {
    "numpy.lib.cov": {
     "line number": [
      1833
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1833
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCov.test_complex": {
  "data": {
   "lineno": 1835,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1836,
      1837
     ]
    },
    "numpy.lib.cov": {
     "line number": [
      1838,
      1839
     ]
    },
    "numpy.ones": {
     "line number": [
      1839
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1838,
      1839
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCov.test_empty": {
  "data": {
   "lineno": 1846,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      1848
     ]
    },
    "numpy.array": {
     "line number": [
      1849,
      1850,
      1851,
      1852,
      1853
     ]
    },
    "numpy.lib.cov": {
     "line number": [
      1849,
      1850,
      1852
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      1847,
      1848
     ]
    },
    "numpy.nan": {
     "line number": [
      1849,
      1853,
      1853,
      1853,
      1853
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1849,
      1850,
      1852
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCov.test_fweights": {
  "data": {
   "lineno": 1870,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      1880,
      1882
     ]
    },
    "TypeError": {
     "line number": [
      1878
     ]
    },
    "ValueError": {
     "line number": [
      1884
     ]
    },
    "f": {
     "line number": [
      1879,
      1880,
      1881,
      1882,
      1883,
      1884
     ]
    },
    "numpy.integer": {
     "line number": [
      1879,
      1881,
      1883
     ]
    },
    "numpy.lib.cov": {
     "line number": [
      1871,
      1872,
      1873,
      1875,
      1878,
      1880,
      1882,
      1884
     ]
    },
    "numpy.ones": {
     "line number": [
      1879,
      1881,
      1883
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1871,
      1873,
      1875
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1878,
      1880,
      1882,
      1884
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCov.test_unit_fweights_and_aweights": {
  "data": {
   "lineno": 1898,
   "symbols_in_volume": {
    "numpy.lib.cov": {
     "line number": [
      1899,
      1901,
      1902,
      1905,
      1908,
      1911,
      1913,
      1914
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1899,
      1902,
      1905,
      1908,
      1911,
      1914
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCov.test_wrong_ddof": {
  "data": {
   "lineno": 1855,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      1857
     ]
    },
    "numpy.array": {
     "line number": [
      1859
     ]
    },
    "numpy.inf": {
     "line number": [
      1859,
      1859,
      1860,
      1860
     ]
    },
    "numpy.lib.cov": {
     "line number": [
      1858
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      1856,
      1857
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1858
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCov.test_xy": {
  "data": {
   "lineno": 1841,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1842,
      1843,
      1844
     ]
    },
    "numpy.lib.cov": {
     "line number": [
      1844
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1844
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCumprod": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": {
    "object": {
     "line number": [
      624
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestCumprod.test_basic": {
  "data": {
   "lineno": 626,
   "symbols_in_volume": {
    "ArithmeticError": {
     "line number": [
      634,
      635,
      636
     ]
    },
    "numpy.array": {
     "line number": [
      631,
      632,
      639,
      642,
      646
     ]
    },
    "numpy.complex128": {
     "line number": [
      630
     ]
    },
    "numpy.complex64": {
     "line number": [
      630
     ]
    },
    "numpy.cumprod": {
     "line number": [
      634,
      635,
      636,
      638,
      641,
      645
     ]
    },
    "numpy.float32": {
     "line number": [
      630
     ]
    },
    "numpy.float64": {
     "line number": [
      630
     ]
    },
    "numpy.int16": {
     "line number": [
      629
     ]
    },
    "numpy.int32": {
     "line number": [
      629
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      638,
      641,
      645
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      634,
      635,
      636
     ]
    },
    "numpy.uint16": {
     "line number": [
      629
     ]
    },
    "numpy.uint32": {
     "line number": [
      629
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestCumsum": {
  "data": {
   "lineno": 581,
   "symbols_in_volume": {
    "object": {
     "line number": [
      581
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestCumsum.test_basic": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      589,
      590,
      592,
      595,
      599
     ]
    },
    "numpy.complex128": {
     "line number": [
      588
     ]
    },
    "numpy.complex64": {
     "line number": [
      587
     ]
    },
    "numpy.cumsum": {
     "line number": [
      593,
      597,
      601
     ]
    },
    "numpy.float32": {
     "line number": [
      587
     ]
    },
    "numpy.float64": {
     "line number": [
      587
     ]
    },
    "numpy.int16": {
     "line number": [
      586
     ]
    },
    "numpy.int32": {
     "line number": [
      586
     ]
    },
    "numpy.int8": {
     "line number": [
      586
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      593,
      597,
      601
     ]
    },
    "numpy.uint16": {
     "line number": [
      586
     ]
    },
    "numpy.uint32": {
     "line number": [
      587
     ]
    },
    "numpy.uint8": {
     "line number": [
      586
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDelete": {
  "data": {
   "lineno": 788,
   "symbols_in_volume": {
    "object": {
     "line number": [
      788
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestDelete._check_inverse_of_slicing": {
  "data": {
   "lineno": 794,
   "symbols_in_volume": {
    "int": {
     "line number": [
      799
     ]
    },
    "isinstance": {
     "line number": [
      799
     ]
    },
    "numpy.asarray": {
     "line number": [
      800
     ]
    },
    "numpy.compat.long": {
     "line number": [
      799
     ]
    },
    "numpy.integer": {
     "line number": [
      799
     ]
    },
    "numpy.intp": {
     "line number": [
      800
     ]
    },
    "numpy.lib.delete": {
     "line number": [
      795,
      796
     ]
    },
    "numpy.lib.setxor1d": {
     "line number": [
      802,
      804
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      802,
      805
     ]
    },
    "slice": {
     "line number": [
      799
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDelete.setup": {
  "data": {
   "lineno": 790,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      791,
      792
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDelete.test_0d": {
  "data": {
   "lineno": 835,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      838,
      840
     ]
    },
    "numpy.array": {
     "line number": [
      836
     ]
    },
    "numpy.lib.delete": {
     "line number": [
      839
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      837,
      838
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      840
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      839
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDelete.test_array_order_preserve": {
  "data": {
   "lineno": 852,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      854
     ]
    },
    "numpy.lib.delete": {
     "line number": [
      855
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      859,
      860
     ]
    },
    "slice": {
     "line number": [
      855
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDelete.test_fancy": {
  "data": {
   "lineno": 816,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      820,
      821,
      822
     ]
    },
    "FutureWarning": {
     "line number": [
      824,
      828,
      829
     ]
    },
    "bool": {
     "line number": [
      826
     ]
    },
    "numpy.array": {
     "line number": [
      818,
      826
     ]
    },
    "numpy.lib.delete": {
     "line number": [
      821,
      822
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      819,
      820,
      823,
      824
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      828,
      829
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      821,
      822
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDelete.test_single": {
  "data": {
   "lineno": 831
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDelete.test_slices": {
  "data": {
   "lineno": 807,
   "symbols_in_volume": {
    "slice": {
     "line number": [
      813
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDelete.test_subclass": {
  "data": {
   "lineno": 842,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      846,
      847,
      848,
      849,
      850
     ]
    },
    "numpy.lib.delete": {
     "line number": [
      846,
      847,
      848,
      849,
      850
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      846,
      847,
      848,
      849,
      850
     ]
    },
    "slice": {
     "line number": [
      849,
      850
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDelete.test_subclass.SubClass": {
  "data": {
   "lineno": 843,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      843
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestDiff": {
  "data": {
   "lineno": 651,
   "symbols_in_volume": {
    "object": {
     "line number": [
      651
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestDiff.test_append": {
  "data": {
   "lineno": 759,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      783
     ]
    },
    "numpy.AxisError": {
     "line number": [
      785
     ]
    },
    "numpy.arange": {
     "line number": [
      760,
      770
     ]
    },
    "numpy.diff": {
     "line number": [
      771,
      774,
      777,
      780,
      783
     ]
    },
    "numpy.lib.diff": {
     "line number": [
      761,
      764,
      766,
      785
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      763,
      765,
      768,
      773,
      775,
      779,
      781
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      783,
      785
     ]
    },
    "numpy.zeros": {
     "line number": [
      783
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDiff.test_axis": {
  "data": {
   "lineno": 672,
   "symbols_in_volume": {
    "numpy.AxisError": {
     "line number": [
      682,
      683
     ]
    },
    "numpy.lib.diff": {
     "line number": [
      677,
      678,
      679,
      680,
      681,
      682,
      683
     ]
    },
    "numpy.ones": {
     "line number": [
      675
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      677,
      678,
      679,
      680,
      681
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      682,
      683
     ]
    },
    "numpy.zeros": {
     "line number": [
      673,
      677,
      678,
      679
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDiff.test_basic": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      655,
      656,
      657,
      663,
      667,
      668
     ]
    },
    "numpy.lib.diff": {
     "line number": [
      658,
      659,
      660,
      664,
      669,
      670
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      664
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      658,
      659,
      660,
      669,
      670
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDiff.test_n": {
  "data": {
   "lineno": 696,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      698
     ]
    },
    "enumerate": {
     "line number": [
      702
     ]
    },
    "len": {
     "line number": [
      706,
      706
     ]
    },
    "list": {
     "line number": [
      697
     ]
    },
    "max": {
     "line number": [
      706
     ]
    },
    "numpy.int_": {
     "line number": [
      705
     ]
    },
    "numpy.lib.diff": {
     "line number": [
      698,
      699,
      701
     ]
    },
    "numpy.ndarray": {
     "line number": [
      703
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      701,
      703
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      704
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      705,
      706
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      698
     ]
    },
    "range": {
     "line number": [
      697,
      699
     ]
    },
    "type": {
     "line number": [
      703
     ]
    },
    "zip": {
     "line number": [
      702
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDiff.test_nd": {
  "data": {
   "lineno": 685,
   "symbols_in_volume": {
    "numpy.lib.diff": {
     "line number": [
      691,
      692,
      693,
      694
     ]
    },
    "numpy.random.rand": {
     "line number": [
      686
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      691,
      692,
      693,
      694
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDiff.test_prepend": {
  "data": {
   "lineno": 735,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      755
     ]
    },
    "numpy.AxisError": {
     "line number": [
      757
     ]
    },
    "numpy.arange": {
     "line number": [
      736,
      742
     ]
    },
    "numpy.cumsum": {
     "line number": [
      739
     ]
    },
    "numpy.diff": {
     "line number": [
      739,
      743,
      746,
      749,
      752,
      755
     ]
    },
    "numpy.lib.diff": {
     "line number": [
      737,
      738,
      740,
      757
     ]
    },
    "numpy.ones": {
     "line number": [
      737,
      738,
      740
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      737,
      738,
      739,
      740,
      745,
      747,
      751,
      753
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      755,
      757
     ]
    },
    "numpy.zeros": {
     "line number": [
      755
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDiff.test_subclass": {
  "data": {
   "lineno": 720,
   "symbols_in_volume": {
    "numpy.lib.diff": {
     "line number": [
      724,
      730
     ]
    },
    "numpy.ma.array": {
     "line number": [
      721
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      728,
      733
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      725,
      726,
      731,
      732
     ]
    },
    "type": {
     "line number": [
      728,
      728,
      733,
      733
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDiff.test_times": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      715
     ]
    },
    "numpy.arange": {
     "line number": [
      709
     ]
    },
    "numpy.array": {
     "line number": [
      711,
      712,
      714
     ]
    },
    "numpy.datetime64": {
     "line number": [
      709
     ]
    },
    "numpy.lib.diff": {
     "line number": [
      716
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      717
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      718
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize": {
  "data": {
   "lineno": 1501,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1501
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_casting_error": {
  "data": {
   "lineno": 1557,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1560,
      1562
     ]
    },
    "numpy.lib.digitize": {
     "line number": [
      1560,
      1562
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1560,
      1562
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_forward": {
  "data": {
   "lineno": 1503,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1504,
      1505,
      1506
     ]
    },
    "numpy.lib.digitize": {
     "line number": [
      1506
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1506
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_large_integers_decreasing": {
  "data": {
   "lineno": 1578,
   "symbols_in_volume": {
    "numpy.digitize": {
     "line number": [
      1583
     ]
    },
    "numpy.lib.tests.test_function_base.pytest": {
     "line number": [
      1578
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1583
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_large_integers_increasing": {
  "data": {
   "lineno": 1573,
   "symbols_in_volume": {
    "numpy.digitize": {
     "line number": [
      1576
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1576
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_monotonic": {
  "data": {
   "lineno": 1541,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1553,
      1555
     ]
    },
    "numpy.lib.digitize": {
     "line number": [
      1544,
      1545,
      1547,
      1548,
      1550,
      1551,
      1553,
      1555
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1544,
      1545,
      1547,
      1548,
      1550,
      1551
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1553,
      1555
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_random": {
  "data": {
   "lineno": 1513,
   "symbols_in_volume": {
    "bin": {
     "line number": [
      1515,
      1516
     ]
    },
    "numpy.all": {
     "line number": [
      1516
     ]
    },
    "numpy.lib.digitize": {
     "line number": [
      1516
     ]
    },
    "numpy.linspace": {
     "line number": [
      1515
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1514
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1516
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_return_type": {
  "data": {
   "lineno": 1564,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1570,
      1571
     ]
    },
    "numpy.arange": {
     "line number": [
      1568,
      1569
     ]
    },
    "numpy.lib.digitize": {
     "line number": [
      1570,
      1571
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1570,
      1571
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_return_type.A": {
  "data": {
   "lineno": 1566,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      1566
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_reverse": {
  "data": {
   "lineno": 1508,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1509,
      1510,
      1511
     ]
    },
    "numpy.lib.digitize": {
     "line number": [
      1511
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1511
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_right_basic": {
  "data": {
   "lineno": 1518,
   "symbols_in_volume": {
    "numpy.lib.digitize": {
     "line number": [
      1522,
      1524
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1522,
      1524
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_right_open": {
  "data": {
   "lineno": 1526,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1527,
      1528,
      1529
     ]
    },
    "numpy.lib.digitize": {
     "line number": [
      1529
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1529
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_right_open_random": {
  "data": {
   "lineno": 1536,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      1539
     ]
    },
    "numpy.lib.digitize": {
     "line number": [
      1539
     ]
    },
    "numpy.linspace": {
     "line number": [
      1538
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1537
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1539
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestDigitize.test_right_open_reverse": {
  "data": {
   "lineno": 1531,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1532,
      1533,
      1534
     ]
    },
    "numpy.lib.digitize": {
     "line number": [
      1534
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1534
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestExtins": {
  "data": {
   "lineno": 1130,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1130
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestExtins.test_basic": {
  "data": {
   "lineno": 1132,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1133
     ]
    },
    "numpy.lib.extract": {
     "line number": [
      1134
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestExtins.test_both": {
  "data": {
   "lineno": 1159,
   "symbols_in_volume": {
    "numpy.lib.extract": {
     "line number": [
      1163
     ]
    },
    "numpy.lib.place": {
     "line number": [
      1164,
      1165
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1160
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1166
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestExtins.test_place": {
  "data": {
   "lineno": 1137,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1140
     ]
    },
    "ValueError": {
     "line number": [
      1151
     ]
    },
    "numpy.arange": {
     "line number": [
      1147
     ]
    },
    "numpy.array": {
     "line number": [
      1142,
      1155
     ]
    },
    "numpy.lib.place": {
     "line number": [
      1140,
      1143,
      1146,
      1149,
      1152,
      1156
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1144,
      1147,
      1150,
      1157
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1140
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      1151
     ]
    },
    "numpy.zeros": {
     "line number": [
      1146
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFilterwindows": {
  "data": {
   "lineno": 1595,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1595
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestFilterwindows.test_bartlett": {
  "data": {
   "lineno": 1611,
   "symbols_in_volume": {
    "numpy.lib.bartlett": {
     "line number": [
      1613
     ]
    },
    "numpy.lib.flipud": {
     "line number": [
      1614
     ]
    },
    "numpy.sum": {
     "line number": [
      1616
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1616
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1614
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFilterwindows.test_blackman": {
  "data": {
   "lineno": 1618,
   "symbols_in_volume": {
    "numpy.lib.blackman": {
     "line number": [
      1620
     ]
    },
    "numpy.lib.flipud": {
     "line number": [
      1621
     ]
    },
    "numpy.sum": {
     "line number": [
      1623
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1623
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1621
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFilterwindows.test_hamming": {
  "data": {
   "lineno": 1604,
   "symbols_in_volume": {
    "numpy.lib.flipud": {
     "line number": [
      1607
     ]
    },
    "numpy.lib.hamming": {
     "line number": [
      1606
     ]
    },
    "numpy.sum": {
     "line number": [
      1609
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1609
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1607
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFilterwindows.test_hanning": {
  "data": {
   "lineno": 1597,
   "symbols_in_volume": {
    "numpy.lib.flipud": {
     "line number": [
      1600
     ]
    },
    "numpy.lib.hanning": {
     "line number": [
      1599
     ]
    },
    "numpy.sum": {
     "line number": [
      1602
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1602
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1600
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFlip": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "object": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis0": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      131,
      136
     ]
    },
    "numpy.flip": {
     "line number": [
      141
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis1": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      144,
      149
     ]
    },
    "numpy.flip": {
     "line number": [
      154
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis2": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      157,
      162
     ]
    },
    "numpy.flip": {
     "line number": [
      167
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFlip.test_4d": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      170
     ]
    },
    "numpy.flip": {
     "line number": [
      172
     ]
    },
    "numpy.flipud": {
     "line number": [
      173
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      172
     ]
    },
    "range": {
     "line number": [
      171
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFlip.test_axes": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "numpy.AxisError": {
     "line number": [
      105,
      106,
      107,
      108
     ]
    },
    "numpy.flip": {
     "line number": [
      105,
      106,
      107,
      108
     ]
    },
    "numpy.ones": {
     "line number": [
      105,
      106,
      107,
      108
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      105,
      106,
      107,
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFlip.test_basic_lr": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "numpy.flip": {
     "line number": [
      113,
      118
     ]
    },
    "numpy.lib.tests.test_function_base.get_mat": {
     "line number": [
      111
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      113,
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFlip.test_basic_ud": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "numpy.flip": {
     "line number": [
      123,
      128
     ]
    },
    "numpy.lib.tests.test_function_base.get_mat": {
     "line number": [
      121
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      123,
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFlip.test_default_axis": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      176,
      178
     ]
    },
    "numpy.flip": {
     "line number": [
      180
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestFlip.test_multiple_axes": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      183,
      190,
      197
     ]
    },
    "numpy.flip": {
     "line number": [
      188,
      195,
      202
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      188,
      195,
      202
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestGradient": {
  "data": {
   "lineno": 863,
   "symbols_in_volume": {
    "object": {
     "line number": [
      863
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestGradient.test_args": {
  "data": {
   "lineno": 873,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      895
     ]
    },
    "numpy.arange": {
     "line number": [
      876,
      879,
      880,
      881
     ]
    },
    "numpy.array": {
     "line number": [
      880,
      884
     ]
    },
    "numpy.cumsum": {
     "line number": [
      874
     ]
    },
    "numpy.lib.gradient": {
     "line number": [
      879,
      880,
      881,
      883,
      884,
      886,
      889,
      892,
      896
     ]
    },
    "numpy.ones": {
     "line number": [
      874
     ]
    },
    "numpy.stack": {
     "line number": [
      896
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      895
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestGradient.test_badargs": {
  "data": {
   "lineno": 898,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      907,
      908,
      909,
      910,
      911,
      912
     ]
    },
    "ValueError": {
     "line number": [
      903,
      904,
      905
     ]
    },
    "numpy.arange": {
     "line number": [
      899
     ]
    },
    "numpy.cumsum": {
     "line number": [
      900
     ]
    },
    "numpy.lib.gradient": {
     "line number": [
      903,
      904,
      905,
      907,
      908,
      909,
      910,
      911,
      912
     ]
    },
    "numpy.ones": {
     "line number": [
      900,
      903,
      904,
      905,
      905
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      903,
      904,
      905,
      907,
      908,
      909,
      910,
      911,
      912
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestGradient.test_basic": {
  "data": {
   "lineno": 865,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      867,
      868,
      869
     ]
    },
    "numpy.lib.gradient": {
     "line number": [
      870,
      871
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      870,
      871
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestGradient.test_datetime64": {
  "data": {
   "lineno": 914,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      916,
      920
     ]
    },
    "numpy.dtype": {
     "line number": [
      924
     ]
    },
    "numpy.lib.gradient": {
     "line number": [
      923
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      924
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      923
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestGradient.test_inexact_dtypes": {
  "data": {
   "lineno": 1062,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1065
     ]
    },
    "numpy.diff": {
     "line number": [
      1066
     ]
    },
    "numpy.float16": {
     "line number": [
      1063
     ]
    },
    "numpy.float32": {
     "line number": [
      1063
     ]
    },
    "numpy.float64": {
     "line number": [
      1063
     ]
    },
    "numpy.lib.gradient": {
     "line number": [
      1066
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1066
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestGradient.test_masked": {
  "data": {
   "lineno": 926,
   "symbols_in_volume": {
    "numpy.gradient": {
     "line number": [
      938
     ]
    },
    "numpy.lib.gradient": {
     "line number": [
      930
     ]
    },
    "numpy.ma.arange": {
     "line number": [
      936
     ]
    },
    "numpy.ma.array": {
     "line number": [
      928
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      937
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      934
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      939
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      931
     ]
    },
    "type": {
     "line number": [
      931,
      931
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestGradient.test_second_order_accurate": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": {
    "numpy.abs": {
     "line number": [
      950,
      958
     ]
    },
    "numpy.all": {
     "line number": [
      951,
      959
     ]
    },
    "numpy.gradient": {
     "line number": [
      950,
      958
     ]
    },
    "numpy.linspace": {
     "line number": [
      946
     ]
    },
    "numpy.random.random": {
     "line number": [
      955
     ]
    },
    "numpy.random.seed": {
     "line number": [
      954
     ]
    },
    "numpy.sort": {
     "line number": [
      955
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      951,
      959
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestGradient.test_spacing": {
  "data": {
   "lineno": 961,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      965
     ]
    },
    "numpy.array": {
     "line number": [
      962,
      964
     ]
    },
    "numpy.lib.gradient": {
     "line number": [
      974,
      975,
      977,
      984,
      985,
      989,
      990,
      996,
      998,
      1004,
      1007,
      1011,
      1012,
      1018,
      1019
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      986,
      991
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      981,
      982,
      987,
      1001,
      1002,
      1005,
      1008,
      1015,
      1016,
      1022,
      1023
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      979,
      980,
      992,
      1000,
      1013,
      1014,
      1020,
      1021
     ]
    },
    "numpy.tile": {
     "line number": [
      963,
      967,
      968,
      969,
      970
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestGradient.test_specific_axes": {
  "data": {
   "lineno": 1025,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1045
     ]
    },
    "numpy.AxisError": {
     "line number": [
      1047,
      1048
     ]
    },
    "numpy.array": {
     "line number": [
      1028,
      1029,
      1030
     ]
    },
    "numpy.lib.gradient": {
     "line number": [
      1031,
      1032,
      1033,
      1034,
      1037,
      1039,
      1039,
      1042,
      1045,
      1047,
      1048
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1037,
      1039
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1031,
      1032,
      1033,
      1034,
      1042
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1045,
      1047,
      1048
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestGradient.test_timedelta64": {
  "data": {
   "lineno": 1051,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1053,
      1056
     ]
    },
    "numpy.dtype": {
     "line number": [
      1060
     ]
    },
    "numpy.lib.gradient": {
     "line number": [
      1059
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1060
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1059
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestGradient.test_values": {
  "data": {
   "lineno": 1068,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1074,
      1075,
      1076,
      1077,
      1078
     ]
    },
    "numpy.arange": {
     "line number": [
      1070,
      1072,
      1074,
      1075,
      1076,
      1077,
      1078
     ]
    },
    "numpy.lib.gradient": {
     "line number": [
      1070,
      1072,
      1074,
      1075,
      1076,
      1077,
      1078
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1074,
      1075,
      1076,
      1077,
      1078
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInsert": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "object": {
     "line number": [
      441
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestInsert.test_0d": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      509,
      511
     ]
    },
    "numpy.array": {
     "line number": [
      507,
      510
     ]
    },
    "numpy.lib.insert": {
     "line number": [
      510
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      508,
      509
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      511
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      510
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInsert.test_basic": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      458,
      461
     ]
    },
    "numpy.array": {
     "line number": [
      452,
      460
     ]
    },
    "numpy.float64": {
     "line number": [
      452
     ]
    },
    "numpy.lib.insert": {
     "line number": [
      445,
      446,
      447,
      448,
      449,
      450,
      451,
      453,
      454,
      460
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      457,
      458
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      461
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      445,
      446,
      447,
      448,
      449,
      450,
      451,
      453,
      454,
      459
     ]
    },
    "slice": {
     "line number": [
      450
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInsert.test_index_array_copied": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      527,
      529
     ]
    },
    "numpy.insert": {
     "line number": [
      528
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      529
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInsert.test_multidim": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": {
    "numpy.AxisError": {
     "line number": [
      495,
      496
     ]
    },
    "numpy.arange": {
     "line number": [
      473,
      475,
      483,
      488,
      499
     ]
    },
    "numpy.array": {
     "line number": [
      472
     ]
    },
    "numpy.concatenate": {
     "line number": [
      474
     ]
    },
    "numpy.lib.insert": {
     "line number": [
      467,
      468,
      469,
      470,
      477,
      478,
      480,
      481,
      484,
      485,
      489,
      490,
      491,
      492,
      495,
      496,
      500,
      501,
      502,
      503
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      467,
      468,
      469,
      470,
      477,
      478,
      480,
      481,
      484,
      485,
      489,
      491,
      500,
      502
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      495,
      496
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInsert.test_structured_array": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      532,
      536,
      539
     ]
    },
    "numpy.insert": {
     "line number": [
      535,
      538
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      536,
      539
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInsert.test_subclass": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      517,
      518,
      519,
      520,
      521,
      524
     ]
    },
    "numpy.arange": {
     "line number": [
      516
     ]
    },
    "numpy.array": {
     "line number": [
      523
     ]
    },
    "numpy.insert": {
     "line number": [
      517,
      518,
      519,
      520,
      521,
      524
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      517,
      518,
      519,
      520,
      521,
      524
     ]
    },
    "slice": {
     "line number": [
      520,
      521
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInsert.test_subclass.SubClass": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      514
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestInterp": {
  "data": {
   "lineno": 2245,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2245
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestInterp.test_basic": {
  "data": {
   "lineno": 2254,
   "symbols_in_volume": {
    "numpy.interp": {
     "line number": [
      2258
     ]
    },
    "numpy.linspace": {
     "line number": [
      2255,
      2256,
      2257
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2258
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInterp.test_complex_interp": {
  "data": {
   "lineno": 2320,
   "symbols_in_volume": {
    "numpy.inf": {
     "line number": [
      2337,
      2338,
      2338
     ]
    },
    "numpy.interp": {
     "line number": [
      2326,
      2330,
      2333,
      2339,
      2346
     ]
    },
    "numpy.linspace": {
     "line number": [
      2322,
      2323,
      2323
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2326,
      2330,
      2333,
      2339,
      2346
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInterp.test_exceptions": {
  "data": {
   "lineno": 2247,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2248,
      2249,
      2250,
      2251,
      2252
     ]
    },
    "numpy.lib.interp": {
     "line number": [
      2248,
      2249,
      2250,
      2251,
      2252
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2248,
      2249,
      2250,
      2251,
      2252
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInterp.test_if_len_x_is_small": {
  "data": {
   "lineno": 2365,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2366
     ]
    },
    "numpy.interp": {
     "line number": [
      2368
     ]
    },
    "numpy.pi": {
     "line number": [
      2368
     ]
    },
    "numpy.sin": {
     "line number": [
      2367
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2368
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInterp.test_non_finite_behavior": {
  "data": {
   "lineno": 2312,
   "symbols_in_volume": {
    "numpy.inf": {
     "line number": [
      2315,
      2316,
      2316
     ]
    },
    "numpy.interp": {
     "line number": [
      2316,
      2318
     ]
    },
    "numpy.nan": {
     "line number": [
      2317,
      2318,
      2318
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2316,
      2318
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInterp.test_period": {
  "data": {
   "lineno": 2370,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2376,
      2377
     ]
    },
    "numpy.interp": {
     "line number": [
      2375,
      2378
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2375,
      2378
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInterp.test_right_left_behavior": {
  "data": {
   "lineno": 2260,
   "symbols_in_volume": {
    "float": {
     "line number": [
      2272,
      2279,
      2286,
      2293
     ]
    },
    "numpy.arange": {
     "line number": [
      2265
     ]
    },
    "numpy.array": {
     "line number": [
      2267,
      2272,
      2279,
      2286,
      2293
     ]
    },
    "numpy.double": {
     "line number": [
      2265,
      2266,
      2267
     ]
    },
    "numpy.lib.interp": {
     "line number": [
      2270,
      2271,
      2277,
      2278,
      2284,
      2285,
      2291,
      2292
     ]
    },
    "numpy.ones": {
     "line number": [
      2266
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2274,
      2275,
      2281,
      2282,
      2288,
      2289,
      2295,
      2296
     ]
    },
    "range": {
     "line number": [
      2264
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInterp.test_scalar_interpolation_point": {
  "data": {
   "lineno": 2298,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      2305
     ]
    },
    "numpy.float64": {
     "line number": [
      2307
     ]
    },
    "numpy.interp": {
     "line number": [
      2302,
      2304,
      2306,
      2308,
      2310
     ]
    },
    "numpy.linspace": {
     "line number": [
      2299,
      2300
     ]
    },
    "numpy.nan": {
     "line number": [
      2309
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2302,
      2304,
      2306,
      2308,
      2310
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestInterp.test_zero_dimensional_interpolation_point": {
  "data": {
   "lineno": 2348,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2359,
      2363
     ]
    },
    "numpy.array": {
     "line number": [
      2351,
      2354,
      2355,
      2357,
      2361
     ]
    },
    "numpy.float64": {
     "line number": [
      2359,
      2363
     ]
    },
    "numpy.interp": {
     "line number": [
      2352,
      2357,
      2361
     ]
    },
    "numpy.linspace": {
     "line number": [
      2349,
      2350
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2359,
      2363
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2352
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2358,
      2362
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestKaiser": {
  "data": {
   "lineno": 1945,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1945
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestKaiser.test_int_beta": {
  "data": {
   "lineno": 1960,
   "symbols_in_volume": {
    "numpy.lib.kaiser": {
     "line number": [
      1961
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestKaiser.test_simple": {
  "data": {
   "lineno": 1947,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1950,
      1952,
      1954,
      1957
     ]
    },
    "numpy.isfinite": {
     "line number": [
      1948
     ]
    },
    "numpy.lib.kaiser": {
     "line number": [
      1948,
      1949,
      1951,
      1953,
      1956
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1948
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1949,
      1951,
      1953,
      1956
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian": {
  "data": {
   "lineno": 2839,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2839
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_array_like": {
  "data": {
   "lineno": 2917,
   "symbols_in_volume": {
    "numpy.median": {
     "line number": [
      2919,
      2921,
      2922
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      2922
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2919,
      2921
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_axis_keyword": {
  "data": {
   "lineno": 2866,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2867
     ]
    },
    "numpy.median": {
     "line number": [
      2873,
      2875,
      2878,
      2879,
      2880,
      2881,
      2882
     ]
    },
    "numpy.random.randint": {
     "line number": [
      2871
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      2878,
      2879,
      2880,
      2881,
      2882
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2876
     ]
    },
    "range": {
     "line number": [
      2874
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_basic": {
  "data": {
   "lineno": 2841,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      2862,
      2864
     ]
    },
    "numpy.arange": {
     "line number": [
      2843,
      2844
     ]
    },
    "numpy.array": {
     "line number": [
      2842,
      2852,
      2854,
      2856
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      2861,
      2862
     ]
    },
    "numpy.median": {
     "line number": [
      2845,
      2846,
      2847,
      2848,
      2849,
      2850,
      2853,
      2855,
      2857,
      2859,
      2863
     ]
    },
    "numpy.nan": {
     "line number": [
      2860
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2864
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      2846,
      2847,
      2848,
      2850
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2853
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2845,
      2849,
      2855,
      2857,
      2859,
      2863
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_empty": {
  "data": {
   "lineno": 3008,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      3012,
      3014,
      3020,
      3022,
      3032,
      3034
     ]
    },
    "float": {
     "line number": [
      3010,
      3017,
      3025,
      3030
     ]
    },
    "numpy.array": {
     "line number": [
      3010,
      3017,
      3025,
      3030
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      3011,
      3012,
      3019,
      3020,
      3031,
      3032
     ]
    },
    "numpy.median": {
     "line number": [
      3013,
      3021,
      3026,
      3027,
      3033
     ]
    },
    "numpy.nan": {
     "line number": [
      3013,
      3021,
      3030
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3014,
      3022,
      3034
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3013,
      3021,
      3026,
      3027,
      3033
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_extended_axis": {
  "data": {
   "lineno": 3042,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      3055
     ]
    },
    "numpy.dstack": {
     "line number": [
      3044
     ]
    },
    "numpy.median": {
     "line number": [
      3045,
      3045,
      3047,
      3047,
      3049,
      3049,
      3051,
      3051,
      3052,
      3052,
      3053,
      3053,
      3057,
      3058,
      3059,
      3060,
      3061,
      3062,
      3063,
      3064,
      3065,
      3066,
      3067,
      3068,
      3069,
      3070
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      3046
     ]
    },
    "numpy.random.normal": {
     "line number": [
      3043
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      3056
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3045,
      3047,
      3049,
      3051,
      3052,
      3053,
      3057,
      3059,
      3061,
      3063,
      3065,
      3067,
      3069
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_extended_axis_invalid": {
  "data": {
   "lineno": 3072,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      3078
     ]
    },
    "numpy.AxisError": {
     "line number": [
      3074,
      3075,
      3076,
      3077
     ]
    },
    "numpy.median": {
     "line number": [
      3074,
      3075,
      3076,
      3077,
      3078
     ]
    },
    "numpy.ones": {
     "line number": [
      3073
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      3074,
      3075,
      3076,
      3077,
      3078
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_keepdims": {
  "data": {
   "lineno": 3080,
   "symbols_in_volume": {
    "numpy.median": {
     "line number": [
      3082,
      3084,
      3086,
      3088,
      3090,
      3092
     ]
    },
    "numpy.ones": {
     "line number": [
      3081
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3082,
      3084,
      3086,
      3088,
      3090,
      3092
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_nan_behavior": {
  "data": {
   "lineno": 2960,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      2964,
      2967,
      2968,
      2976,
      2979,
      2986,
      2995,
      3004
     ]
    },
    "float": {
     "line number": [
      2961,
      2970,
      2982,
      2991,
      3000
     ]
    },
    "len": {
     "line number": [
      2988,
      2997,
      3006
     ]
    },
    "numpy.arange": {
     "line number": [
      2961,
      2970,
      2982,
      2991,
      3000
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      2963,
      2964,
      2975,
      2976,
      2985,
      2986,
      2994,
      2995,
      3003,
      3004
     ]
    },
    "numpy.median": {
     "line number": [
      2965,
      2966,
      2977,
      2978,
      2982,
      2987,
      2991,
      2996,
      3000,
      3005
     ]
    },
    "numpy.nan": {
     "line number": [
      2962,
      2965,
      2966,
      2971,
      2972,
      2977,
      2983,
      2984,
      2992,
      2993,
      3001,
      3002
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2967,
      2968,
      2979
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2965,
      2966,
      2977,
      2978,
      2987,
      2988,
      2996,
      2997,
      3005,
      3006
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_object": {
  "data": {
   "lineno": 3036,
   "symbols_in_volume": {
    "float": {
     "line number": [
      3038,
      3040
     ]
    },
    "numpy.arange": {
     "line number": [
      3037
     ]
    },
    "numpy.median": {
     "line number": [
      3038,
      3040
     ]
    },
    "numpy.nan": {
     "line number": [
      3039
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      3038,
      3040
     ]
    },
    "object": {
     "line number": [
      3038,
      3040
     ]
    },
    "type": {
     "line number": [
      3038,
      3040
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_out": {
  "data": {
   "lineno": 2939,
   "symbols_in_volume": {
    "numpy.median": {
     "line number": [
      2942,
      2944,
      2946
     ]
    },
    "numpy.ones": {
     "line number": [
      2941
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2942,
      2944,
      2946
     ]
    },
    "numpy.zeros": {
     "line number": [
      2940,
      2943,
      2945
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_out_nan": {
  "data": {
   "lineno": 2948,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      2950
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      2949,
      2950
     ]
    },
    "numpy.median": {
     "line number": [
      2954,
      2956,
      2958
     ]
    },
    "numpy.nan": {
     "line number": [
      2953
     ]
    },
    "numpy.ones": {
     "line number": [
      2952
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2954,
      2956,
      2958
     ]
    },
    "numpy.zeros": {
     "line number": [
      2951,
      2955,
      2957
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_overwrite_keyword": {
  "data": {
   "lineno": 2884,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2890,
      2891,
      2906
     ]
    },
    "numpy.array": {
     "line number": [
      2885,
      2889
     ]
    },
    "numpy.float32": {
     "line number": [
      2906
     ]
    },
    "numpy.median": {
     "line number": [
      2892,
      2893,
      2894,
      2895,
      2898,
      2900,
      2902,
      2903,
      2908,
      2909,
      2910,
      2911,
      2912,
      2913,
      2914,
      2915
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      2907
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      2892,
      2893,
      2894,
      2895,
      2897,
      2899,
      2901,
      2903,
      2908,
      2910,
      2912,
      2914
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_subclass": {
  "data": {
   "lineno": 2924,
   "symbols_in_volume": {
    "MySubClass": {
     "line number": [
      2936
     ]
    },
    "numpy.median": {
     "line number": [
      2937
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2937
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass": {
  "data": {
   "lineno": 2926,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      2926
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.__new__": {
  "data": {
   "lineno": 2928,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      2929
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.mean": {
  "data": {
   "lineno": 2933
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMeshgrid": {
  "data": {
   "lineno": 1977,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1977
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestMeshgrid.test_indexing": {
  "data": {
   "lineno": 1999,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2017
     ]
    },
    "numpy.array": {
     "line number": [
      2003,
      2006
     ]
    },
    "numpy.lib.meshgrid": {
     "line number": [
      2002,
      2012,
      2013,
      2014,
      2015,
      2017
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2012,
      2013,
      2014,
      2015
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2003,
      2006
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2017
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMeshgrid.test_invalid_arguments": {
  "data": {
   "lineno": 2024,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      2028
     ]
    },
    "numpy.lib.meshgrid": {
     "line number": [
      2028
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2028
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMeshgrid.test_no_input": {
  "data": {
   "lineno": 1994,
   "symbols_in_volume": {
    "numpy.lib.meshgrid": {
     "line number": [
      1996,
      1997
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1996,
      1997
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMeshgrid.test_return_type": {
  "data": {
   "lineno": 2031,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2035,
      2036
     ]
    },
    "numpy.float32": {
     "line number": [
      2035
     ]
    },
    "numpy.float64": {
     "line number": [
      2036
     ]
    },
    "numpy.meshgrid": {
     "line number": [
      2038,
      2044,
      2050
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2040,
      2041,
      2046,
      2047,
      2052,
      2053
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMeshgrid.test_simple": {
  "data": {
   "lineno": 1979,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1981,
      1985
     ]
    },
    "numpy.lib.meshgrid": {
     "line number": [
      1980
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1981,
      1985
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMeshgrid.test_single_input": {
  "data": {
   "lineno": 1990,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1992
     ]
    },
    "numpy.lib.meshgrid": {
     "line number": [
      1991
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1992
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMeshgrid.test_sparse": {
  "data": {
   "lineno": 2019,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2021,
      2022
     ]
    },
    "numpy.lib.meshgrid": {
     "line number": [
      2020
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2021,
      2022
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMeshgrid.test_writeback": {
  "data": {
   "lineno": 2055,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2057,
      2058
     ]
    },
    "numpy.meshgrid": {
     "line number": [
      2059
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2062,
      2063
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestMsort": {
  "data": {
   "lineno": 1964,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1964
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestMsort.test_simple": {
  "data": {
   "lineno": 1966,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1967,
      1972
     ]
    },
    "numpy.lib.msort": {
     "line number": [
      1971
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1970
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile": {
  "data": {
   "lineno": 2386,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2386
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_2D": {
  "data": {
   "lineno": 2407,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2408
     ]
    },
    "numpy.percentile": {
     "line number": [
      2413
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2413
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_api": {
  "data": {
   "lineno": 2400,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      2401,
      2404
     ]
    },
    "numpy.percentile": {
     "line number": [
      2402,
      2403,
      2405
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_axis": {
  "data": {
   "lineno": 2450,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2451,
      2462
     ]
    },
    "numpy.array": {
     "line number": [
      2459
     ]
    },
    "numpy.percentile": {
     "line number": [
      2453,
      2456,
      2459,
      2463,
      2464,
      2465,
      2466,
      2467,
      2468,
      2470,
      2471,
      2473,
      2475,
      2477,
      2479,
      2481,
      2483
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2453,
      2456,
      2459,
      2463,
      2464,
      2465,
      2466,
      2467,
      2468,
      2469,
      2471,
      2473,
      2475,
      2477,
      2479,
      2481,
      2483
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_basic": {
  "data": {
   "lineno": 2388,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      2395,
      2398
     ]
    },
    "numpy.arange": {
     "line number": [
      2389
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      2394,
      2395
     ]
    },
    "numpy.nan": {
     "line number": [
      2393,
      2396,
      2397
     ]
    },
    "numpy.percentile": {
     "line number": [
      2390,
      2391,
      2392,
      2396,
      2397
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2398
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2390,
      2391,
      2392,
      2396,
      2397
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_exception": {
  "data": {
   "lineno": 2534,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2535,
      2537,
      2538,
      2539,
      2540
     ]
    },
    "list": {
     "line number": [
      2539,
      2540
     ]
    },
    "numpy.percentile": {
     "line number": [
      2535,
      2537,
      2538,
      2539,
      2540
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2535,
      2537,
      2538,
      2539,
      2540
     ]
    },
    "range": {
     "line number": [
      2539,
      2540
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_extended_axis": {
  "data": {
   "lineno": 2639,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2654
     ]
    },
    "numpy.dstack": {
     "line number": [
      2641
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      2643
     ]
    },
    "numpy.percentile": {
     "line number": [
      2642,
      2642,
      2644,
      2644,
      2646,
      2646,
      2649,
      2650,
      2651,
      2652,
      2656,
      2657,
      2658,
      2659,
      2660,
      2661,
      2662,
      2663,
      2664,
      2665,
      2666,
      2667,
      2668,
      2669
     ]
    },
    "numpy.random.normal": {
     "line number": [
      2640
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      2655
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2642,
      2644,
      2646,
      2649,
      2651,
      2656,
      2658,
      2660,
      2662,
      2664,
      2666,
      2668
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_extended_axis_invalid": {
  "data": {
   "lineno": 2671,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2678,
      2679,
      2680
     ]
    },
    "numpy.AxisError": {
     "line number": [
      2673,
      2674,
      2675,
      2676
     ]
    },
    "numpy.ones": {
     "line number": [
      2672
     ]
    },
    "numpy.percentile": {
     "line number": [
      2673,
      2674,
      2675,
      2676,
      2678,
      2679,
      2680
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2673,
      2674,
      2675,
      2676,
      2678,
      2679,
      2680
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_keepdims": {
  "data": {
   "lineno": 2682,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      2683
     ]
    },
    "numpy.percentile": {
     "line number": [
      2684,
      2686,
      2688,
      2690,
      2692,
      2694,
      2697,
      2699
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2684,
      2686,
      2688,
      2690,
      2692,
      2694,
      2697,
      2699
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_linear": {
  "data": {
   "lineno": 2415,
   "symbols_in_volume": {
    "numpy.percentile": {
     "line number": [
      2418,
      2421
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2418,
      2421
     ]
    },
    "range": {
     "line number": [
      2418,
      2421
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_lower_higher": {
  "data": {
   "lineno": 2424,
   "symbols_in_volume": {
    "numpy.percentile": {
     "line number": [
      2427,
      2429
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2427,
      2429
     ]
    },
    "range": {
     "line number": [
      2427,
      2429
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_midpoint": {
  "data": {
   "lineno": 2432,
   "symbols_in_volume": {
    "numpy.percentile": {
     "line number": [
      2433,
      2435,
      2437
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2433,
      2435,
      2437
     ]
    },
    "range": {
     "line number": [
      2433,
      2435,
      2437
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_nan_behavior": {
  "data": {
   "lineno": 2733,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      2737,
      2742,
      2743,
      2744,
      2752,
      2755,
      2762,
      2771,
      2779,
      2787,
      2796,
      2804,
      2812
     ]
    },
    "float": {
     "line number": [
      2734,
      2746,
      2758,
      2766,
      2775,
      2783,
      2792,
      2799,
      2807
     ]
    },
    "numpy.arange": {
     "line number": [
      2734,
      2746,
      2758,
      2766,
      2775,
      2783,
      2792,
      2799,
      2807
     ]
    },
    "numpy.array": {
     "line number": [
      2741
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      2736,
      2737,
      2751,
      2752,
      2761,
      2762,
      2770,
      2771,
      2778,
      2779,
      2786,
      2787,
      2795,
      2796,
      2803,
      2804,
      2811,
      2812
     ]
    },
    "numpy.nan": {
     "line number": [
      2735,
      2738,
      2739,
      2741,
      2747,
      2748,
      2753,
      2759,
      2760,
      2768,
      2769,
      2776,
      2777,
      2784,
      2785,
      2793,
      2794,
      2801,
      2802,
      2809,
      2810
     ]
    },
    "numpy.percentile": {
     "line number": [
      2738,
      2739,
      2740,
      2753,
      2754,
      2758,
      2763,
      2766,
      2772,
      2775,
      2780,
      2782,
      2788,
      2791,
      2797,
      2799,
      2805,
      2807,
      2813
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2742,
      2743,
      2744,
      2755
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2738,
      2739,
      2740,
      2753,
      2754,
      2763,
      2772,
      2780,
      2788,
      2797,
      2805,
      2813
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_nearest": {
  "data": {
   "lineno": 2440,
   "symbols_in_volume": {
    "numpy.percentile": {
     "line number": [
      2441,
      2443
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2441,
      2443
     ]
    },
    "range": {
     "line number": [
      2441,
      2443
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_no_p_overwrite": {
  "data": {
   "lineno": 2623,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2625,
      2628
     ]
    },
    "numpy.linspace": {
     "line number": [
      2624,
      2626,
      2627,
      2629
     ]
    },
    "numpy.percentile": {
     "line number": [
      2625,
      2628
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2626,
      2629
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_out": {
  "data": {
   "lineno": 2702,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      2704
     ]
    },
    "numpy.percentile": {
     "line number": [
      2705,
      2706,
      2708,
      2709,
      2712,
      2713
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2705,
      2706,
      2708,
      2709,
      2712,
      2713
     ]
    },
    "numpy.zeros": {
     "line number": [
      2703,
      2707,
      2711
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_out_nan": {
  "data": {
   "lineno": 2715,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      2717
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      2716,
      2717
     ]
    },
    "numpy.nan": {
     "line number": [
      2720
     ]
    },
    "numpy.ones": {
     "line number": [
      2719
     ]
    },
    "numpy.percentile": {
     "line number": [
      2721,
      2723,
      2725,
      2727,
      2729,
      2731
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2721,
      2722,
      2725,
      2726,
      2729,
      2730
     ]
    },
    "numpy.zeros": {
     "line number": [
      2718,
      2724,
      2728
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_percentile_empty_dim": {
  "data": {
   "lineno": 2586,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2588
     ]
    },
    "numpy.array": {
     "line number": [
      2605,
      2607,
      2609,
      2611
     ]
    },
    "numpy.percentile": {
     "line number": [
      2589,
      2590,
      2591,
      2592,
      2593,
      2594,
      2595,
      2596,
      2598,
      2601,
      2605,
      2607,
      2609,
      2611
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2589,
      2590,
      2591,
      2592,
      2593,
      2594,
      2595,
      2596,
      2598,
      2601,
      2605,
      2607,
      2609,
      2611
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_percentile_list": {
  "data": {
   "lineno": 2542,
   "symbols_in_volume": {
    "numpy.percentile": {
     "line number": [
      2543
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2543
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_percentile_no_overwrite": {
  "data": {
   "lineno": 2614,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2615,
      2617,
      2619,
      2621
     ]
    },
    "numpy.percentile": {
     "line number": [
      2616,
      2620
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2617,
      2621
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_percentile_out": {
  "data": {
   "lineno": 2545,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2563
     ]
    },
    "numpy.array": {
     "line number": [
      2546,
      2552,
      2565,
      2569,
      2575,
      2580
     ]
    },
    "numpy.empty": {
     "line number": [
      2566,
      2570,
      2576,
      2581
     ]
    },
    "numpy.percentile": {
     "line number": [
      2549,
      2550,
      2556,
      2557,
      2560,
      2561,
      2567,
      2571,
      2577,
      2582
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2550,
      2557,
      2561,
      2567,
      2568,
      2571,
      2572,
      2578,
      2579,
      2583,
      2584
     ]
    },
    "numpy.zeros": {
     "line number": [
      2547,
      2555,
      2559
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_percentile_overwrite": {
  "data": {
   "lineno": 2631,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2632,
      2634,
      2637
     ]
    },
    "numpy.percentile": {
     "line number": [
      2633,
      2636
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2634,
      2637
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_scalar_q": {
  "data": {
   "lineno": 2486,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2488,
      2509
     ]
    },
    "numpy.array": {
     "line number": [
      2491,
      2494,
      2512,
      2516
     ]
    },
    "numpy.empty": {
     "line number": [
      2498,
      2501,
      2504,
      2521,
      2525,
      2529
     ]
    },
    "numpy.isscalar": {
     "line number": [
      2490,
      2511
     ]
    },
    "numpy.percentile": {
     "line number": [
      2489,
      2490,
      2492,
      2493,
      2495,
      2496,
      2499,
      2502,
      2505,
      2510,
      2511,
      2513,
      2517,
      2522,
      2526,
      2530
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2490,
      2511
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      2495,
      2518
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2489,
      2492,
      2493,
      2496,
      2499,
      2500,
      2502,
      2503,
      2505,
      2506,
      2510,
      2514,
      2515,
      2519,
      2523,
      2524,
      2527,
      2528,
      2531,
      2532
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPercentile.test_sequence": {
  "data": {
   "lineno": 2446,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2447
     ]
    },
    "numpy.percentile": {
     "line number": [
      2448
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2448
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPiecewise": {
  "data": {
   "lineno": 2066,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2066
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestPiecewise.test_0d": {
  "data": {
   "lineno": 2114,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2115
     ]
    },
    "numpy.lib.piecewise": {
     "line number": [
      2116,
      2121,
      2126
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2117,
      2118,
      2122,
      2123
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2127
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPiecewise.test_0d_0d_condition": {
  "data": {
   "lineno": 2144,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2145,
      2146
     ]
    },
    "numpy.lib.piecewise": {
     "line number": [
      2147
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2148
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPiecewise.test_0d_comparison": {
  "data": {
   "lineno": 2129,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2139,
      2141
     ]
    },
    "numpy.lib.piecewise": {
     "line number": [
      2131,
      2136,
      2140,
      2142
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2137
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2132
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      2139,
      2141
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPiecewise.test_default": {
  "data": {
   "lineno": 2105,
   "symbols_in_volume": {
    "numpy.lib.piecewise": {
     "line number": [
      2107,
      2111
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2108,
      2112
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPiecewise.test_multidimensional_extrafunc": {
  "data": {
   "lineno": 2150,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2151,
      2154
     ]
    },
    "numpy.lib.piecewise": {
     "line number": [
      2153
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2154
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPiecewise.test_scalar_domains_three_conditions": {
  "data": {
   "lineno": 2101,
   "symbols_in_volume": {
    "numpy.lib.piecewise": {
     "line number": [
      2102
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPiecewise.test_simple": {
  "data": {
   "lineno": 2068,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2092,
      2094
     ]
    },
    "numpy.array": {
     "line number": [
      2078,
      2082,
      2086
     ]
    },
    "numpy.lib.piecewise": {
     "line number": [
      2070,
      2074,
      2078,
      2082,
      2086,
      2089,
      2093,
      2095
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2071,
      2075,
      2079,
      2083,
      2087,
      2090
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      2092,
      2094
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPiecewise.test_two_conditions": {
  "data": {
   "lineno": 2097,
   "symbols_in_volume": {
    "numpy.lib.piecewise": {
     "line number": [
      2098
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2099
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestProd": {
  "data": {
   "lineno": 604,
   "symbols_in_volume": {
    "object": {
     "line number": [
      604
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestProd.test_basic": {
  "data": {
   "lineno": 606,
   "symbols_in_volume": {
    "ArithmeticError": {
     "line number": [
      614,
      615
     ]
    },
    "numpy.array": {
     "line number": [
      611,
      612,
      619,
      621
     ]
    },
    "numpy.complex128": {
     "line number": [
      610
     ]
    },
    "numpy.complex64": {
     "line number": [
      610
     ]
    },
    "numpy.float32": {
     "line number": [
      610
     ]
    },
    "numpy.float64": {
     "line number": [
      610
     ]
    },
    "numpy.int16": {
     "line number": [
      609
     ]
    },
    "numpy.int32": {
     "line number": [
      609
     ]
    },
    "numpy.prod": {
     "line number": [
      614,
      615
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      618,
      620
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      617
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      614,
      615
     ]
    },
    "numpy.uint16": {
     "line number": [
      609
     ]
    },
    "numpy.uint32": {
     "line number": [
      609
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestPtp": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": {
    "object": {
     "line number": [
      566
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestPtp.test_basic": {
  "data": {
   "lineno": 568,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      569,
      571
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      570,
      574,
      575,
      577,
      578
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestQuantile": {
  "data": {
   "lineno": 2817,
   "symbols_in_volume": {
    "object": {
     "line number": [
      2817
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestQuantile.test_basic": {
  "data": {
   "lineno": 2820,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2821
     ]
    },
    "numpy.quantile": {
     "line number": [
      2822,
      2823,
      2824
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      2822,
      2823,
      2824
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestQuantile.test_no_p_overwrite": {
  "data": {
   "lineno": 2826,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2830,
      2835
     ]
    },
    "numpy.array": {
     "line number": [
      2828
     ]
    },
    "numpy.quantile": {
     "line number": [
      2830,
      2835
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2831,
      2836
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestRot90": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "object": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestRot90.test_axes": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "numpy.lib.rot90": {
     "line number": [
      69,
      70,
      70,
      71,
      71
     ]
    },
    "numpy.ones": {
     "line number": [
      68
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69,
      70,
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestRot90.test_basic": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      36,
      37,
      38,
      39,
      40
     ]
    },
    "numpy.lib.rot90": {
     "line number": [
      36,
      37,
      38,
      39,
      40,
      56,
      58,
      60,
      62,
      64,
      64,
      65,
      65
     ]
    },
    "numpy.ones": {
     "line number": [
      36,
      37,
      38,
      39,
      40
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      56,
      58,
      60,
      62,
      64,
      65
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      36,
      37,
      38,
      39,
      40
     ]
    },
    "range": {
     "line number": [
      55,
      57,
      59,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestRot90.test_rotation_axes": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      74
     ]
    },
    "numpy.lib.rot90": {
     "line number": [
      93,
      94,
      95,
      98,
      99
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      93,
      94,
      95,
      98
     ]
    },
    "range": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestSelect": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      370,
      371,
      372,
      373,
      374,
      375
     ]
    },
    "object": {
     "line number": [
      369
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestSelect._select": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": {
    "len": {
     "line number": [
      379
     ]
    },
    "range": {
     "line number": [
      379
     ]
    },
    "zip": {
     "line number": [
      380
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestSelect.test_basic": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "len": {
     "line number": [
      389,
      390
     ]
    },
    "numpy.lib.select": {
     "line number": [
      386
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      386
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      389,
      390
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestSelect.test_broadcasting": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      394
     ]
    },
    "numpy.array": {
     "line number": [
      393,
      393
     ]
    },
    "numpy.lib.select": {
     "line number": [
      395,
      397
     ]
    },
    "numpy.ones": {
     "line number": [
      395
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      395
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      397
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestSelect.test_deprecated_empty": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      418,
      420
     ]
    },
    "numpy.lib.select": {
     "line number": [
      414,
      418,
      420
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      412,
      413,
      416,
      417,
      419
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      414
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      420
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      418
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestSelect.test_many_arguments": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      436,
      437
     ]
    },
    "numpy.lib.select": {
     "line number": [
      438
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestSelect.test_non_bool_deprecation": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      428,
      430,
      432
     ]
    },
    "numpy.int_": {
     "line number": [
      427
     ]
    },
    "numpy.lib.select": {
     "line number": [
      428,
      430,
      432
     ]
    },
    "numpy.lib.tests.test_function_base.warnings": {
     "line number": [
      425,
      426,
      431
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      432
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      428,
      430
     ]
    },
    "numpy.uint8": {
     "line number": [
      429
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestSelect.test_return_dtype": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      407
     ]
    },
    "numpy.complex_": {
     "line number": [
      401
     ]
    },
    "numpy.int8": {
     "line number": [
      404,
      405
     ]
    },
    "numpy.isnan": {
     "line number": [
      408
     ]
    },
    "numpy.lib.select": {
     "line number": [
      400,
      405,
      409
     ]
    },
    "numpy.nan": {
     "line number": [
      407,
      409
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      400,
      405,
      409
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestSinc": {
  "data": {
   "lineno": 1688,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1688
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestSinc.test_array_like": {
  "data": {
   "lineno": 1696,
   "symbols_in_volume": {
    "list": {
     "line number": [
      1699
     ]
    },
    "numpy.array": {
     "line number": [
      1698
     ]
    },
    "numpy.lib.sinc": {
     "line number": [
      1698,
      1699,
      1700
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1701,
      1702
     ]
    },
    "tuple": {
     "line number": [
      1700
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestSinc.test_simple": {
  "data": {
   "lineno": 1690,
   "symbols_in_volume": {
    "numpy.lib.flipud": {
     "line number": [
      1694
     ]
    },
    "numpy.lib.sinc": {
     "line number": [
      1691,
      1692
     ]
    },
    "numpy.linspace": {
     "line number": [
      1692
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1691
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1694
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestSortComplex": {
  "data": {
   "lineno": 3116,
   "symbols_in_volume": {
    "object": {
     "line number": [
      3116
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestSortComplex.test_sort_complex": {
  "data": {
   "lineno": 3134,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3136,
      3137
     ]
    },
    "numpy.sort_complex": {
     "line number": [
      3138
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3139,
      3140
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestSortComplex.test_sort_real": {
  "data": {
   "lineno": 3118,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      3128
     ]
    },
    "numpy.lib.tests.test_function_base.pytest": {
     "line number": [
      3118
     ]
    },
    "numpy.sort": {
     "line number": [
      3130
     ]
    },
    "numpy.sort_complex": {
     "line number": [
      3129
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      3131,
      3132
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestTrapz": {
  "data": {
   "lineno": 1626,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1626
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestTrapz.test_masked": {
  "data": {
   "lineno": 1671,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1674
     ]
    },
    "numpy.lib.trapz": {
     "line number": [
      1679,
      1682,
      1685
     ]
    },
    "numpy.ma.array": {
     "line number": [
      1677,
      1681,
      1684
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1679,
      1682,
      1685
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestTrapz.test_ndim": {
  "data": {
   "lineno": 1634,
   "symbols_in_volume": {
    "numpy.lib.trapz": {
     "line number": [
      1656,
      1658,
      1660,
      1664,
      1666,
      1668
     ]
    },
    "numpy.linspace": {
     "line number": [
      1635,
      1636,
      1637
     ]
    },
    "numpy.ones_like": {
     "line number": [
      1639,
      1642,
      1645
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1657,
      1659,
      1661,
      1665,
      1667,
      1669
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestTrapz.test_simple": {
  "data": {
   "lineno": 1628,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1629
     ]
    },
    "numpy.exp": {
     "line number": [
      1630
     ]
    },
    "numpy.lib.trapz": {
     "line number": [
      1630
     ]
    },
    "numpy.pi": {
     "line number": [
      1630
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1630
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1632
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestTrimZeros": {
  "data": {
   "lineno": 1107,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1107
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestTrimZeros.test_basic": {
  "data": {
   "lineno": 1114,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1115,
      1117
     ]
    },
    "numpy.lib.trim_zeros": {
     "line number": [
      1116
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestTrimZeros.test_leading_skip": {
  "data": {
   "lineno": 1119,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1120,
      1122
     ]
    },
    "numpy.lib.trim_zeros": {
     "line number": [
      1121
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1122
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestTrimZeros.test_trailing_skip": {
  "data": {
   "lineno": 1124,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1125,
      1127
     ]
    },
    "numpy.lib.trim_zeros": {
     "line number": [
      1126
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1127
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestUnique": {
  "data": {
   "lineno": 1705,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1705
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestUnique.test_simple": {
  "data": {
   "lineno": 1707,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      1709,
      1712,
      1714
     ]
    },
    "numpy.array": {
     "line number": [
      1708,
      1710,
      1710,
      1713
     ]
    },
    "numpy.lib.unique": {
     "line number": [
      1709,
      1710,
      1712,
      1714
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1709,
      1710,
      1712,
      1714
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestUnwrap": {
  "data": {
   "lineno": 1586,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1586
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestUnwrap.test_simple": {
  "data": {
   "lineno": 1588,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      1592
     ]
    },
    "numpy.lib.diff": {
     "line number": [
      1592
     ]
    },
    "numpy.lib.unwrap": {
     "line number": [
      1590,
      1592
     ]
    },
    "numpy.pi": {
     "line number": [
      1590,
      1592
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1592
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1592
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1590
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize": {
  "data": {
   "lineno": 1169,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1169
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_UnboundMethod_ticket_1156": {
  "data": {
   "lineno": 1301,
   "symbols_in_volume": {
    "Foo": {
     "line number": [
      1309,
      1311
     ]
    },
    "Foo.bar": {
     "line number": [
      1311
     ]
    },
    "numpy.arange": {
     "line number": [
      1309,
      1310,
      1311,
      1312
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1309,
      1311
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1309,
      1311
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_UnboundMethod_ticket_1156.Foo": {
  "data": {
   "lineno": 1303
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_UnboundMethod_ticket_1156.Foo.bar": {
  "data": {
   "lineno": 1306
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring": {
  "data": {
   "lineno": 1289,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1294,
      1298
     ]
    },
    "f.__doc__": {
     "line number": [
      1295,
      1299
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1294,
      1298
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1295,
      1299
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring.foo": {
  "data": {
   "lineno": 1290
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_cache": {
  "data": {
   "lineno": 1331,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1342
     ]
    },
    "f.cache": {
     "line number": [
      1340
     ]
    },
    "len": {
     "line number": [
      1343
     ]
    },
    "numpy.arange": {
     "line number": [
      1341
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1342
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1343
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f": {
  "data": {
   "lineno": 1335,
   "symbols_in_volume": {
    "numpy.lib.vectorize": {
     "line number": [
      1335
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100": {
  "data": {
   "lineno": 1282,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1286,
      1287
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1286
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1287
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100.foo": {
  "data": {
   "lineno": 1283
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_execution_order_ticket_1487": {
  "data": {
   "lineno": 1314,
   "symbols_in_volume": {
    "f1": {
     "line number": [
      1317,
      1318
     ]
    },
    "f2": {
     "line number": [
      1320,
      1321
     ]
    },
    "numpy.arange": {
     "line number": [
      1317,
      1318,
      1320,
      1321
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1316,
      1319
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1322,
      1323
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_keywords": {
  "data": {
   "lineno": 1207,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1212,
      1214,
      1217
     ]
    },
    "numpy.array": {
     "line number": [
      1213,
      1215,
      1218
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1212
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1216,
      1219
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_keywords.foo": {
  "data": {
   "lineno": 1209
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100": {
  "data": {
   "lineno": 1231,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1237,
      1239,
      1242,
      1244
     ]
    },
    "numpy.array": {
     "line number": [
      1238,
      1240,
      1245
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1237
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1241,
      1243,
      1246
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100.foo": {
  "data": {
   "lineno": 1234
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_keywords3_ticket_2100": {
  "data": {
   "lineno": 1248,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      1259,
      1260,
      1261
     ]
    },
    "numpy.vectorize": {
     "line number": [
      1257
     ]
    },
    "vpolyval": {
     "line number": [
      1259,
      1260,
      1261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_keywords3_ticket_2100.mypolyval": {
  "data": {
   "lineno": 1250,
   "symbols_in_volume": {
    "list": {
     "line number": [
      1251
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100": {
  "data": {
   "lineno": 1263,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1272
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1272
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f": {
  "data": {
   "lineno": 1265,
   "symbols_in_volume": {
    "numpy.lib.vectorize": {
     "line number": [
      1265
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100": {
  "data": {
   "lineno": 1274,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1280
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1280
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f": {
  "data": {
   "lineno": 1276,
   "symbols_in_volume": {
    "numpy.lib.vectorize": {
     "line number": [
      1276
     ]
    },
    "numpy.prod": {
     "line number": [
      1278
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_keywords_no_func_code": {
  "data": {
   "lineno": 1221,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      1229
     ]
    },
    "Exception": {
     "line number": [
      1228
     ]
    },
    "numpy.lib.tests.test_function_base.random": {
     "line number": [
      1227
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1227
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_large": {
  "data": {
   "lineno": 1193,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1195,
      1196
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1195
     ]
    },
    "numpy.linspace": {
     "line number": [
      1194
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1197
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_otypes": {
  "data": {
   "lineno": 1345,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1346,
      1349
     ]
    },
    "f.otypes": {
     "line number": [
      1347
     ]
    },
    "numpy.arange": {
     "line number": [
      1348
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1349
     ]
    },
    "numpy.vectorize": {
     "line number": [
      1346
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_parse_gufunc_signature": {
  "data": {
   "lineno": 1351,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1363,
      1365,
      1367
     ]
    },
    "numpy.lib.function_base._parse_gufunc_signature": {
     "line number": [
      1352,
      1353,
      1355,
      1357,
      1359,
      1361,
      1364,
      1366,
      1368
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1352,
      1353,
      1355,
      1357,
      1359,
      1361
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1363,
      1365,
      1367
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_scalar": {
  "data": {
   "lineno": 1182,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1189,
      1190
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1189
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1191
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_scalar.addsubtract": {
  "data": {
   "lineno": 1183
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_center": {
  "data": {
   "lineno": 1389,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1393,
      1394
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1393
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1395
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_center.center": {
  "data": {
   "lineno": 1390
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_computed_size": {
  "data": {
   "lineno": 1420,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1421,
      1422,
      1425
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1421
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1423,
      1426
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded": {
  "data": {
   "lineno": 1428,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1433,
      1434,
      1435
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1433
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1434,
      1435
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded.foo": {
  "data": {
   "lineno": 1430
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_invalid_inputs": {
  "data": {
   "lineno": 1443,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1445,
      1455
     ]
    },
    "ValueError": {
     "line number": [
      1448,
      1451
     ]
    },
    "f": {
     "line number": [
      1444,
      1446,
      1449,
      1452,
      1454,
      1456
     ]
    },
    "numpy.lib.tests.test_function_base.operator": {
     "line number": [
      1444,
      1454
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1444,
      1454
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      1445,
      1447,
      1450,
      1455
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_invalid_outputs": {
  "data": {
   "lineno": 1458,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1462,
      1466,
      1470
     ]
    },
    "f": {
     "line number": [
      1460,
      1463,
      1465,
      1467,
      1469,
      1471
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1460,
      1465,
      1469
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      1461,
      1466,
      1470
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last": {
  "data": {
   "lineno": 1381,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1385,
      1386
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1385
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1387
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last.mean": {
  "data": {
   "lineno": 1382
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_otypes": {
  "data": {
   "lineno": 1437,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1438,
      1439
     ]
    },
    "numpy.dtype": {
     "line number": [
      1440
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1438
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1441
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1440
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_outer": {
  "data": {
   "lineno": 1404,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1405,
      1406,
      1409,
      1412,
      1416
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1405
     ]
    },
    "numpy.outer": {
     "line number": [
      1405
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1407,
      1410,
      1413,
      1417
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_simple": {
  "data": {
   "lineno": 1370,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1377,
      1378
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1377
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1379
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_simple.addsubtract": {
  "data": {
   "lineno": 1371
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_signature_two_outputs": {
  "data": {
   "lineno": 1397,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1398,
      1399
     ]
    },
    "isinstance": {
     "line number": [
      1400
     ]
    },
    "len": {
     "line number": [
      1400
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1398
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1400
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1401,
      1402
     ]
    },
    "tuple": {
     "line number": [
      1400
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_simple": {
  "data": {
   "lineno": 1171,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1179
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1178
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_simple.addsubtract": {
  "data": {
   "lineno": 1172
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_size_zero_output": {
  "data": {
   "lineno": 1473,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1477,
      1484,
      1497
     ]
    },
    "f": {
     "line number": [
      1475,
      1478,
      1481,
      1483,
      1485,
      1487,
      1488,
      1490,
      1491,
      1493,
      1494,
      1496,
      1498
     ]
    },
    "f.otypes": {
     "line number": [
      1480
     ]
    },
    "int": {
     "line number": [
      1476
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1481,
      1488,
      1491,
      1494
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      1477,
      1484,
      1497
     ]
    },
    "numpy.vectorize": {
     "line number": [
      1475,
      1483,
      1487,
      1490,
      1493,
      1496
     ]
    },
    "numpy.zeros": {
     "line number": [
      1476
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_string_ticket_1892": {
  "data": {
   "lineno": 1325,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1327,
      1329
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1329
     ]
    },
    "numpy.vectorize": {
     "line number": [
      1327
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.TestVectorize.test_ufunc": {
  "data": {
   "lineno": 1199,
   "symbols_in_volume": {
    "f": {
     "line number": [
      1201,
      1203
     ]
    },
    "numpy.array": {
     "line number": [
      1202
     ]
    },
    "numpy.cos": {
     "line number": [
      1204
     ]
    },
    "numpy.lib.tests.test_function_base.math": {
     "line number": [
      1201
     ]
    },
    "numpy.lib.vectorize": {
     "line number": [
      1201
     ]
    },
    "numpy.pi": {
     "line number": [
      1202,
      1202,
      1202,
      1202
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1205
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.Test_I0": {
  "data": {
   "lineno": 1919,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1919
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_function_base.Test_I0.test_simple": {
  "data": {
   "lineno": 1921,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1924,
      1926,
      1929,
      1931,
      1938
     ]
    },
    "numpy.lib.i0": {
     "line number": [
      1923,
      1928,
      1937
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1922,
      1927,
      1936
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.add_newdoc_ufunc": {
  "data": {
   "shadows": "numpy.lib.add_newdoc_ufunc"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.angle": {
  "data": {
   "shadows": "numpy.lib.angle"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.average": {
  "data": {
   "shadows": "numpy.lib.average"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.bartlett": {
  "data": {
   "shadows": "numpy.lib.bartlett"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.blackman": {
  "data": {
   "shadows": "numpy.lib.blackman"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.compare_results": {
  "data": {
   "lineno": 2381,
   "symbols_in_volume": {
    "len": {
     "line number": [
      2382
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2383
     ]
    },
    "range": {
     "line number": [
      2382
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.corrcoef": {
  "data": {
   "shadows": "numpy.lib.corrcoef"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.cov": {
  "data": {
   "shadows": "numpy.lib.cov"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.decimal": {
  "data": {
   "shadows": "decimal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.delete": {
  "data": {
   "shadows": "numpy.lib.delete"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.diff": {
  "data": {
   "shadows": "numpy.lib.diff"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.digitize": {
  "data": {
   "shadows": "numpy.lib.digitize"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.extract": {
  "data": {
   "shadows": "numpy.lib.extract"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.flipud": {
  "data": {
   "shadows": "numpy.lib.flipud"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.get_mat": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "numpy.add.outer": {
     "line number": [
      30
     ]
    },
    "numpy.arange": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_function_base.gradient": {
  "data": {
   "shadows": "numpy.lib.gradient"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.hamming": {
  "data": {
   "shadows": "numpy.lib.hamming"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.hanning": {
  "data": {
   "shadows": "numpy.lib.hanning"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.i0": {
  "data": {
   "shadows": "numpy.lib.i0"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.insert": {
  "data": {
   "shadows": "numpy.lib.insert"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.interp": {
  "data": {
   "shadows": "numpy.lib.interp"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.kaiser": {
  "data": {
   "shadows": "numpy.lib.kaiser"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.ma": {
  "data": {
   "shadows": "numpy.ma"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.meshgrid": {
  "data": {
   "shadows": "numpy.lib.meshgrid"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.msort": {
  "data": {
   "shadows": "numpy.lib.msort"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.nfb": {
  "data": {
   "shadows": "numpy.lib.function_base"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.piecewise": {
  "data": {
   "shadows": "numpy.lib.piecewise"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.place": {
  "data": {
   "shadows": "numpy.lib.place"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.rand": {
  "data": {
   "shadows": "numpy.random.rand"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.rot90": {
  "data": {
   "shadows": "numpy.lib.rot90"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.select": {
  "data": {
   "shadows": "numpy.lib.select"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.setxor1d": {
  "data": {
   "shadows": "numpy.lib.setxor1d"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.sinc": {
  "data": {
   "shadows": "numpy.lib.sinc"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.trapz": {
  "data": {
   "shadows": "numpy.lib.trapz"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.trim_zeros": {
  "data": {
   "shadows": "numpy.lib.trim_zeros"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.unique": {
  "data": {
   "shadows": "numpy.lib.unique"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.unwrap": {
  "data": {
   "shadows": "numpy.lib.unwrap"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.vectorize": {
  "data": {
   "shadows": "numpy.lib.vectorize"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_function_base.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_histograms.Decimal": {
  "data": {
   "shadows": "decimal.Decimal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.TestHistogram": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "object": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.do_precision": {
  "data": {
   "lineno": 398
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.do_precision_lower_bound": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      367,
      368
     ]
    },
    "numpy.finfo": {
     "line number": [
      365
     ]
    },
    "numpy.histogram": {
     "line number": [
      375
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      376,
      379
     ]
    },
    "range": {
     "line number": [
      368,
      375
     ]
    },
    "range.astype": {
     "line number": [
      371
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.do_precision_upper_bound": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      384,
      385
     ]
    },
    "numpy.finfo": {
     "line number": [
      382
     ]
    },
    "numpy.histogram": {
     "line number": [
      392
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      393,
      396
     ]
    },
    "range": {
     "line number": [
      385,
      392
     ]
    },
    "range.astype": {
     "line number": [
      388
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.do_signed_overflow_bounds": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      352
     ]
    },
    "numpy.dtype": {
     "line number": [
      351
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      353
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      354,
      355
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.setup": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.teardown": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_arr_weights_mismatch": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      125
     ]
    },
    "numpy.arange": {
     "line number": [
      123,
      124
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      126
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_bin_array_dims": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      278
     ]
    },
    "numpy.array": {
     "line number": [
      277
     ]
    },
    "numpy.histogram": {
     "line number": [
      279
     ]
    },
    "numpy.linspace": {
     "line number": [
      276
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_bin_edge_cases": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      260
     ]
    },
    "numpy.histogram": {
     "line number": [
      261
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      266,
      267
     ]
    },
    "zip": {
     "line number": [
      265
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_bool_conversion": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      161
     ]
    },
    "len": {
     "line number": [
      164
     ]
    },
    "numpy.array": {
     "line number": [
      154
     ]
    },
    "numpy.histogram": {
     "line number": [
      155,
      162
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      165,
      166
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      164
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      160
     ]
    },
    "numpy.uint8": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_datetime": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "int": {
     "line number": [
      344,
      345
     ]
    },
    "numpy.array": {
     "line number": [
      327,
      328
     ]
    },
    "numpy.datetime64": {
     "line number": [
      326
     ]
    },
    "numpy.dtype": {
     "line number": [
      332
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      337,
      338,
      339
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      341,
      342,
      344,
      345,
      347,
      348
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_density": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      75,
      87
     ]
    },
    "numpy.diff": {
     "line number": [
      71,
      79
     ]
    },
    "numpy.histogram": {
     "line number": [
      94
     ]
    },
    "numpy.inf": {
     "line number": [
      88,
      95
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      70,
      77,
      82,
      89
     ]
    },
    "numpy.random.rand": {
     "line number": [
      69
     ]
    },
    "numpy.sum": {
     "line number": [
      71,
      79
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      72
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      78,
      83,
      90
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      79,
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_empty": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      236,
      237
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      235
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      236,
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_error_binnum_type": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      243
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      242,
      243
     ]
    },
    "numpy.linspace": {
     "line number": [
      241
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      243
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_exotic_weights": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      217,
      217,
      217,
      221,
      221,
      225,
      225
     ]
    },
    "numpy.array": {
     "line number": [
      203,
      204,
      204,
      208,
      208,
      212,
      212,
      216,
      217
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      207,
      211,
      220,
      224
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      208,
      212,
      221,
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_f32_rounding": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      146,
      147
     ]
    },
    "numpy.float32": {
     "line number": [
      146,
      147
     ]
    },
    "numpy.histogram2d": {
     "line number": [
      148
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_finite_range": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      249,
      250
     ]
    },
    "numpy.inf": {
     "line number": [
      250
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      248,
      249,
      250
     ]
    },
    "numpy.linspace": {
     "line number": [
      247
     ]
    },
    "numpy.nan": {
     "line number": [
      249
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      249,
      250
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_histogram_bin_edges": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      416
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      412,
      417,
      421
     ]
    },
    "numpy.lib.histograms.histogram_bin_edges": {
     "line number": [
      413,
      418,
      422
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      414,
      419,
      423
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_invalid_range": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      255
     ]
    },
    "numpy.histogram": {
     "line number": [
      256
     ]
    },
    "numpy.linspace": {
     "line number": [
      254
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      255
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_last_bin_inclusive_range": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      270
     ]
    },
    "numpy.histogram": {
     "line number": [
      271
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      272
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_no_side_effects": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      230
     ]
    },
    "numpy.histogram": {
     "line number": [
      231
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_normed": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "len": {
     "line number": [
      52,
      64
     ]
    },
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      45,
      56
     ]
    },
    "numpy.arange": {
     "line number": [
      59
     ]
    },
    "numpy.diff": {
     "line number": [
      50,
      62
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      49,
      61
     ]
    },
    "numpy.random.rand": {
     "line number": [
      48
     ]
    },
    "numpy.sum": {
     "line number": [
      50,
      62
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      51,
      63
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      52,
      64
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      43,
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_object_array_of_0d": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      291,
      293
     ]
    },
    "numpy.array": {
     "line number": [
      292,
      294,
      297,
      298
     ]
    },
    "numpy.histogram": {
     "line number": [
      297,
      298
     ]
    },
    "numpy.inf": {
     "line number": [
      292,
      294
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      292,
      294
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      291,
      293
     ]
    },
    "range": {
     "line number": [
      292,
      294,
      297,
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_one_bin": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      37
     ]
    },
    "numpy.array": {
     "line number": [
      39,
      40
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      34,
      37,
      38
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      40
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      35,
      36
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      39
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_outliers": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      100,
      115
     ]
    },
    "numpy.diff": {
     "line number": [
      112,
      117
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      103,
      107,
      111,
      116,
      119
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      112
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      104,
      108,
      117,
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_precision": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": {
    "numpy.double": {
     "line number": [
      405,
      407,
      409
     ]
    },
    "numpy.half": {
     "line number": [
      404,
      405,
      406
     ]
    },
    "numpy.longdouble": {
     "line number": [
      406,
      408,
      409
     ]
    },
    "numpy.single": {
     "line number": [
      404,
      407,
      408
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_signed_overflow_bounds": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "numpy.byte": {
     "line number": [
      358
     ]
    },
    "numpy.int_": {
     "line number": [
      361
     ]
    },
    "numpy.intc": {
     "line number": [
      360
     ]
    },
    "numpy.longlong": {
     "line number": [
      362
     ]
    },
    "numpy.short": {
     "line number": [
      359
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_simple": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "numpy.lib.histograms.histogram": {
     "line number": [
      24,
      29
     ]
    },
    "numpy.linspace": {
     "line number": [
      29
     ]
    },
    "numpy.random.rand": {
     "line number": [
      23
     ]
    },
    "numpy.sum": {
     "line number": [
      26
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      30
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_some_nan_values": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      307
     ]
    },
    "ValueError": {
     "line number": [
      310,
      311
     ]
    },
    "numpy.array": {
     "line number": [
      302,
      303
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      310,
      311,
      314,
      316,
      320,
      322
     ]
    },
    "numpy.nan": {
     "line number": [
      302,
      303,
      303
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      315,
      317,
      321,
      323
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      310,
      311
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      306
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_type": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "float": {
     "line number": [
      141
     ]
    },
    "int": {
     "line number": [
      138
     ]
    },
    "numpy.arange": {
     "line number": [
      131
     ]
    },
    "numpy.floating": {
     "line number": [
      136,
      142
     ]
    },
    "numpy.integer": {
     "line number": [
      133,
      139
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      133,
      136,
      139,
      142
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      132,
      135,
      138,
      141
     ]
    },
    "numpy.ones": {
     "line number": [
      138,
      141
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      133,
      136,
      139,
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_unsigned_monotonicity_check": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      286
     ]
    },
    "numpy.array": {
     "line number": [
      284,
      285
     ]
    },
    "numpy.histogram": {
     "line number": [
      287
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      286
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogram.test_weights": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      181,
      193
     ]
    },
    "numpy.array": {
     "line number": [
      189
     ]
    },
    "numpy.concatenate": {
     "line number": [
      180
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      171,
      172,
      173,
      174,
      181,
      185,
      187,
      192
     ]
    },
    "numpy.linspace": {
     "line number": [
      179
     ]
    },
    "numpy.ones": {
     "line number": [
      170,
      180
     ]
    },
    "numpy.random.rand": {
     "line number": [
      169
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      195
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      175,
      176,
      182,
      189
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      186
     ]
    },
    "numpy.zeros": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": {
    "object": {
     "line number": [
      426
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_empty": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      438,
      439
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      437
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      438,
      439
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_incorrect_methods": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      493
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      493
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      493
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_limited_variance": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      522
     ]
    },
    "numpy.lib.histograms.histogram_bin_edges": {
     "line number": [
      518,
      521,
      524
     ]
    },
    "numpy.linspace": {
     "line number": [
      519,
      525
     ]
    },
    "numpy.ones": {
     "line number": [
      514
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      519,
      522,
      525
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_novariance": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": {
    "len": {
     "line number": [
      506
     ]
    },
    "numpy.histogram": {
     "line number": [
      505
     ]
    },
    "numpy.ones": {
     "line number": [
      500
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      506
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_outlier": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": {
    "len": {
     "line number": [
      545
     ]
    },
    "numpy.histogram": {
     "line number": [
      544
     ]
    },
    "numpy.hstack": {
     "line number": [
      539
     ]
    },
    "numpy.linspace": {
     "line number": [
      538,
      539
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      545
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_scott_vs_stone": {
  "data": {
   "lineno": 547,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      560
     ]
    },
    "int": {
     "line number": [
      556
     ]
    },
    "nbins_ratio": {
     "line number": [
      556
     ]
    },
    "numpy.geomspace": {
     "line number": [
      556
     ]
    },
    "numpy.mean": {
     "line number": [
      560
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      560
     ]
    },
    "range": {
     "line number": [
      557
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_scott_vs_stone.nbins_ratio": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": {
    "len": {
     "line number": [
      553,
      553
     ]
    },
    "numpy.histogram": {
     "line number": [
      553,
      553
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      551
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "len": {
     "line number": [
      464
     ]
    },
    "numpy.concatenate": {
     "line number": [
      461
     ]
    },
    "numpy.histogram": {
     "line number": [
      463
     ]
    },
    "numpy.linspace": {
     "line number": [
      459,
      460
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple_range": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": {
    "len": {
     "line number": [
      596
     ]
    },
    "numpy.histogram": {
     "line number": [
      593
     ]
    },
    "numpy.hstack": {
     "line number": [
      591
     ]
    },
    "numpy.linspace": {
     "line number": [
      588,
      589,
      590
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      596
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple_weighted": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      604
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      604
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      604
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_small": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": {
    "len": {
     "line number": [
      484
     ]
    },
    "numpy.arange": {
     "line number": [
      481
     ]
    },
    "numpy.histogram": {
     "line number": [
      483
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      484
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": {
    "object": {
     "line number": [
      608
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_bins_errors": {
  "data": {
   "lineno": 692,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      696,
      697,
      699
     ]
    },
    "numpy.arange": {
     "line number": [
      695
     ]
    },
    "numpy.histogramdd": {
     "line number": [
      696,
      697,
      699,
      700
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      700
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      696,
      697,
      698
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_density_non_uniform_1d": {
  "data": {
   "lineno": 809,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      811
     ]
    },
    "numpy.array": {
     "line number": [
      812
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      813
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      814
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      815,
      816
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_density_non_uniform_2d": {
  "data": {
   "lineno": 782,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      791,
      792,
      793,
      798,
      799
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      802,
      806
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      803,
      807
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_density_normed_redundancy": {
  "data": {
   "lineno": 827,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      830
     ]
    },
    "numpy.arange": {
     "line number": [
      828
     ]
    },
    "numpy.array": {
     "line number": [
      829
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      831
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      830
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_density_via_normed": {
  "data": {
   "lineno": 818,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      820
     ]
    },
    "numpy.array": {
     "line number": [
      821
     ]
    },
    "numpy.lib.histograms.histogram": {
     "line number": [
      822
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      823
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      824,
      825
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_edge_dtype": {
  "data": {
   "lineno": 759,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      761,
      763
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      765
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      767,
      768
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_empty": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      688
     ]
    },
    "numpy.histogramdd": {
     "line number": [
      689
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      687
     ]
    },
    "numpy.testing.assert_array_max_ulp": {
     "line number": [
      688,
      690
     ]
    },
    "numpy.zeros": {
     "line number": [
      690
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_equal_edges": {
  "data": {
   "lineno": 745,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      747,
      748,
      749,
      753
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      751
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      757
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_finite_range": {
  "data": {
   "lineno": 737,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      740,
      742
     ]
    },
    "numpy.inf": {
     "line number": [
      741
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      739,
      740,
      742
     ]
    },
    "numpy.nan": {
     "line number": [
      743
     ]
    },
    "numpy.random.random": {
     "line number": [
      738
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      740,
      742
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_identical_samples": {
  "data": {
   "lineno": 681,
   "symbols_in_volume": {
    "int": {
     "line number": [
      682
     ]
    },
    "numpy.array": {
     "line number": [
      684
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      683
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      684
     ]
    },
    "numpy.zeros": {
     "line number": [
      682
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_inf_edges": {
  "data": {
   "lineno": 702,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      705
     ]
    },
    "numpy.array": {
     "line number": [
      706,
      709
     ]
    },
    "numpy.errstate": {
     "line number": [
      704
     ]
    },
    "numpy.histogramdd": {
     "line number": [
      707,
      709,
      711
     ]
    },
    "numpy.inf": {
     "line number": [
      707,
      709,
      711,
      711
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      708,
      710,
      712
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_large_integers": {
  "data": {
   "lineno": 770,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      773,
      774
     ]
    },
    "numpy.int64": {
     "line number": [
      773,
      774
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      778
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      780
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_rightmost_binedge": {
  "data": {
   "lineno": 714,
   "symbols_in_volume": {
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      718,
      723,
      728,
      733
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      719,
      720,
      724,
      725,
      729,
      730,
      734,
      735
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_shape_3d": {
  "data": {
   "lineno": 647,
   "symbols_in_volume": {
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      653
     ]
    },
    "numpy.random.rand": {
     "line number": [
      651
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      654
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_shape_4d": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": {
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      667
     ]
    },
    "numpy.random.rand": {
     "line number": [
      665
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      668
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_simple": {
  "data": {
   "lineno": 610,
   "symbols_in_volume": {
    "list": {
     "line number": [
      643,
      643,
      643
     ]
    },
    "numpy.all": {
     "line number": [
      622
     ]
    },
    "numpy.arange": {
     "line number": [
      644,
      644,
      644
     ]
    },
    "numpy.array": {
     "line number": [
      611,
      615,
      628,
      636
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      613,
      621,
      625,
      634,
      644
     ]
    },
    "numpy.split": {
     "line number": [
      633
     ]
    },
    "numpy.squeeze": {
     "line number": [
      633
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      622
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      630
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      617,
      640,
      645
     ]
    },
    "numpy.zeros": {
     "line number": [
      642
     ]
    },
    "range": {
     "line number": [
      643,
      643,
      643
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.TestHistogramdd.test_weights": {
  "data": {
   "lineno": 670,
   "symbols_in_volume": {
    "int": {
     "line number": [
      678
     ]
    },
    "numpy.lib.histograms.histogramdd": {
     "line number": [
      672,
      673,
      674,
      676,
      678
     ]
    },
    "numpy.ones": {
     "line number": [
      674,
      676,
      678
     ]
    },
    "numpy.random.rand": {
     "line number": [
      671
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      675,
      677,
      679
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_histograms.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.assert_array_max_ulp": {
  "data": {
   "shadows": "numpy.testing.assert_array_max_ulp"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.histogram": {
  "data": {
   "shadows": "numpy.lib.histograms.histogram"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.histogram_bin_edges": {
  "data": {
   "shadows": "numpy.lib.histograms.histogram_bin_edges"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.histogramdd": {
  "data": {
   "shadows": "numpy.lib.histograms.histogramdd"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_histograms.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_index_tricks.TestConcatenator": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": {
    "object": {
     "line number": [
      214
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_index_tricks.TestConcatenator.test_0d": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      247,
      248,
      249
     ]
    },
    "numpy.lib.index_tricks.r_": {
     "line number": [
      247,
      248,
      249
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      247,
      248,
      249
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestConcatenator.test_1d": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      216
     ]
    },
    "numpy.lib.index_tricks.r_": {
     "line number": [
      216,
      218
     ]
    },
    "numpy.ones": {
     "line number": [
      217
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      216,
      219
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestConcatenator.test_2d": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.r_": {
     "line number": [
      237,
      241
     ]
    },
    "numpy.random.rand": {
     "line number": [
      235,
      236
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      238,
      242
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      239,
      240,
      243,
      244
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestConcatenator.test_complex_step": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.r_": {
     "line number": [
      231
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestConcatenator.test_mixed_type": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.r_": {
     "line number": [
      222
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestConcatenator.test_more_mixed_type": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      226,
      226
     ]
    },
    "numpy.lib.index_tricks.r_": {
     "line number": [
      226
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      227
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": {
    "object": {
     "line number": [
      414
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom.test_diag_indices_from": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      419,
      420
     ]
    },
    "numpy.lib.index_tricks.diag_indices_from": {
     "line number": [
      418
     ]
    },
    "numpy.random.random": {
     "line number": [
      417
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      419,
      420
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom.test_error_shape_mismatch": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      429
     ]
    },
    "int": {
     "line number": [
      428
     ]
    },
    "numpy.lib.index_tricks.diag_indices_from": {
     "line number": [
      430
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      429
     ]
    },
    "numpy.zeros": {
     "line number": [
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom.test_error_small_input": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      424
     ]
    },
    "numpy.lib.index_tricks.diag_indices_from": {
     "line number": [
      425
     ]
    },
    "numpy.ones": {
     "line number": [
      423
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      424
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestFillDiagonal": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "object": {
     "line number": [
      315
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_basic": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "int": {
     "line number": [
      317
     ]
    },
    "numpy.array": {
     "line number": [
      320
     ]
    },
    "numpy.lib.index_tricks.fill_diagonal": {
     "line number": [
      318
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      319
     ]
    },
    "numpy.zeros": {
     "line number": [
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_hetero_shape_handling": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      382
     ]
    },
    "int": {
     "line number": [
      381
     ]
    },
    "numpy.lib.index_tricks.fill_diagonal": {
     "line number": [
      383
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      382
     ]
    },
    "numpy.zeros": {
     "line number": [
      381
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_low_dim_handling": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      375
     ]
    },
    "int": {
     "line number": [
      374
     ]
    },
    "numpy.lib.index_tricks.fill_diagonal": {
     "line number": [
      376
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      375
     ]
    },
    "numpy.zeros": {
     "line number": [
      374
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_operate_4d_array": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": {
    "int": {
     "line number": [
      367
     ]
    },
    "numpy.array": {
     "line number": [
      369
     ]
    },
    "numpy.lib.index_tricks.fill_diagonal": {
     "line number": [
      368
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      370
     ]
    },
    "numpy.where": {
     "line number": [
      370
     ]
    },
    "numpy.zeros": {
     "line number": [
      367
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_tall_matrix": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "int": {
     "line number": [
      326
     ]
    },
    "numpy.array": {
     "line number": [
      329
     ]
    },
    "numpy.lib.index_tricks.fill_diagonal": {
     "line number": [
      327
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      328
     ]
    },
    "numpy.zeros": {
     "line number": [
      326
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_tall_matrix_wrap": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "int": {
     "line number": [
      342
     ]
    },
    "numpy.array": {
     "line number": [
      345
     ]
    },
    "numpy.lib.index_tricks.fill_diagonal": {
     "line number": [
      343
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      344
     ]
    },
    "numpy.zeros": {
     "line number": [
      342
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_wide_matrix": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "int": {
     "line number": [
      358
     ]
    },
    "numpy.array": {
     "line number": [
      361
     ]
    },
    "numpy.lib.index_tricks.fill_diagonal": {
     "line number": [
      359
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      360
     ]
    },
    "numpy.zeros": {
     "line number": [
      358
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestGrid": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "object": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_index_tricks.TestGrid.test_basic": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.mgrid": {
     "line number": [
      158,
      159
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      160,
      161,
      162,
      164
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      163,
      165,
      166,
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestGrid.test_linspace_equivalence": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.mgrid": {
     "line number": [
      172
     ]
    },
    "numpy.linspace": {
     "line number": [
      170
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      171
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestGrid.test_mgrid_size_none_handling": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.mgrid": {
     "line number": [
      206,
      209
     ]
    },
    "numpy.lib.tests.test_index_tricks.pytest": {
     "line number": [
      197
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      210,
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestGrid.test_nd": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.mgrid": {
     "line number": [
      175,
      176
     ]
    },
    "numpy.ones": {
     "line number": [
      179,
      180,
      181,
      182,
      184,
      186
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      177,
      178
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      181,
      182,
      183,
      185
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      179,
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestGrid.test_sparse": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "numpy.broadcast_arrays": {
     "line number": [
      193
     ]
    },
    "numpy.lib.index_tricks.mgrid": {
     "line number": [
      189
     ]
    },
    "numpy.lib.index_tricks.ogrid": {
     "line number": [
      190
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      195
     ]
    },
    "zip": {
     "line number": [
      194
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestIndexExpression": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": {
    "object": {
     "line number": [
      259
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_index_tricks.TestIndexExpression.test_regression_1": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      262
     ]
    },
    "numpy.lib.index_tricks.index_exp": {
     "line number": [
      264
     ]
    },
    "numpy.lib.index_tricks.s_": {
     "line number": [
      263
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      263,
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestIndexExpression.test_simple_1": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.index_exp": {
     "line number": [
      269
     ]
    },
    "numpy.lib.index_tricks.s_": {
     "line number": [
      270
     ]
    },
    "numpy.random.rand": {
     "line number": [
      267
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      269,
      270
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestIx_": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": {
    "object": {
     "line number": [
      273
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_index_tricks.TestIx_.test_1d_only": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      298
     ]
    },
    "numpy.ix_": {
     "line number": [
      298
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestIx_.test_bool": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": {
    "numpy.ix_": {
     "line number": [
      294
     ]
    },
    "numpy.nonzero": {
     "line number": [
      293
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      294
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestIx_.test_regression_1": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": {
    "func": {
     "line number": [
      278
     ]
    },
    "numpy.arange": {
     "line number": [
      277
     ]
    },
    "numpy.intp": {
     "line number": [
      279
     ]
    },
    "numpy.ix_": {
     "line number": [
      278
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      279
     ]
    },
    "range": {
     "line number": [
      277
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestIx_.test_repeated_input": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      302
     ]
    },
    "numpy.lib.index_tricks.ix_": {
     "line number": [
      303
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      304,
      305,
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestIx_.test_shape_and_dtype": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": {
    "all": {
     "line number": [
      288
     ]
    },
    "enumerate": {
     "line number": [
      286,
      288
     ]
    },
    "func": {
     "line number": [
      284,
      285
     ]
    },
    "numpy.arange": {
     "line number": [
      284
     ]
    },
    "numpy.integer": {
     "line number": [
      289
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      289
     ]
    },
    "numpy.ix_": {
     "line number": [
      285
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      288,
      289
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      287
     ]
    },
    "range": {
     "line number": [
      284
     ]
    },
    "zip": {
     "line number": [
      286
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestNdenumerate": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "object": {
     "line number": [
      252
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_index_tricks.TestNdenumerate.test_basic": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": {
    "list": {
     "line number": [
      255
     ]
    },
    "numpy.array": {
     "line number": [
      254
     ]
    },
    "numpy.lib.index_tricks.ndenumerate": {
     "line number": [
      255
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      255
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "object": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_0d": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      151,
      153
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      149
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      151,
      152
     ]
    },
    "numpy.unravel_index": {
     "line number": [
      148,
      151,
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_basic": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      23
     ]
    },
    "TypeError": {
     "line number": [
      38,
      41,
      44,
      51,
      57
     ]
    },
    "ValueError": {
     "line number": [
      50,
      52,
      53,
      54,
      55,
      56
     ]
    },
    "numpy.array": {
     "line number": [
      63,
      73,
      76
     ]
    },
    "numpy.ravel_multi_index": {
     "line number": [
      47,
      49,
      53,
      54,
      55,
      56,
      57,
      61,
      64,
      66,
      68,
      69,
      71
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      19,
      27,
      32,
      47,
      48,
      49,
      59,
      60,
      64,
      65,
      67,
      69,
      71,
      73,
      75,
      78
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      38,
      41,
      44,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      23
     ]
    },
    "numpy.unravel_index": {
     "line number": [
      19,
      27,
      32,
      39,
      42,
      45,
      48,
      50,
      51,
      52,
      59,
      73,
      76,
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_big_indices": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      94,
      98
     ]
    },
    "numpy.iinfo": {
     "line number": [
      91
     ]
    },
    "numpy.int64": {
     "line number": [
      82
     ]
    },
    "numpy.intp": {
     "line number": [
      82,
      91
     ]
    },
    "numpy.ravel_multi_index": {
     "line number": [
      86,
      93,
      95,
      97,
      99
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      85,
      92,
      96
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      94,
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_clipmodes": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      138
     ]
    },
    "numpy.ravel_multi_index": {
     "line number": [
      131,
      132,
      133,
      136,
      138
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      130,
      133
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_dtypes": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      105,
      116
     ]
    },
    "numpy.int16": {
     "line number": [
      103
     ]
    },
    "numpy.int32": {
     "line number": [
      103
     ]
    },
    "numpy.int64": {
     "line number": [
      104
     ]
    },
    "numpy.ravel_multi_index": {
     "line number": [
      109,
      113,
      121,
      125
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      109,
      110,
      112,
      114,
      121,
      122,
      124,
      126
     ]
    },
    "numpy.uint16": {
     "line number": [
      103
     ]
    },
    "numpy.uint32": {
     "line number": [
      104
     ]
    },
    "numpy.uint64": {
     "line number": [
      104
     ]
    },
    "numpy.unravel_index": {
     "line number": [
      110,
      114,
      122,
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_writeability": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      143,
      144
     ]
    },
    "numpy.unravel_index": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.diag_indices": {
  "data": {
   "shadows": "numpy.lib.index_tricks.diag_indices"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.diag_indices_from": {
  "data": {
   "shadows": "numpy.lib.index_tricks.diag_indices_from"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.fill_diagonal": {
  "data": {
   "shadows": "numpy.lib.index_tricks.fill_diagonal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.index_exp": {
  "data": {
   "shadows": "numpy.lib.index_tricks.index_exp"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.ix_": {
  "data": {
   "shadows": "numpy.lib.index_tricks.ix_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.mgrid": {
  "data": {
   "shadows": "numpy.lib.index_tricks.mgrid"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.ndenumerate": {
  "data": {
   "shadows": "numpy.lib.index_tricks.ndenumerate"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.ndindex": {
  "data": {
   "shadows": "numpy.lib.index_tricks.ndindex"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.ogrid": {
  "data": {
   "shadows": "numpy.lib.index_tricks.ogrid"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.r_": {
  "data": {
   "shadows": "numpy.lib.index_tricks.r_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.s_": {
  "data": {
   "shadows": "numpy.lib.index_tricks.s_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_index_tricks.test_c_": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      311,
      311
     ]
    },
    "numpy.c_": {
     "line number": [
      311
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.test_diag_indices": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": {
    "int": {
     "line number": [
      404
     ]
    },
    "numpy.array": {
     "line number": [
      388,
      394,
      407
     ]
    },
    "numpy.lib.index_tricks.diag_indices": {
     "line number": [
      387,
      401
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      393,
      406
     ]
    },
    "numpy.zeros": {
     "line number": [
      404
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_index_tricks.test_ndindex": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": {
    "list": {
     "line number": [
      434,
      438,
      442,
      443,
      446,
      449,
      453
     ]
    },
    "numpy.lib.index_tricks.ndenumerate": {
     "line number": [
      435
     ]
    },
    "numpy.lib.index_tricks.ndindex": {
     "line number": [
      434,
      438,
      442,
      443,
      446,
      449,
      453
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      436,
      439,
      443
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      447,
      450,
      454
     ]
    },
    "numpy.zeros": {
     "line number": [
      435
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      53,
      58
     ]
    },
    "numpy.lib.tests.test_io.sys": {
     "line number": [
      48,
      49
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.tests.test_io.BytesIO": {
  "data": {
   "shadows": "io.BytesIO"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.ConversionWarning": {
  "data": {
   "shadows": "numpy.lib._iotools.ConversionWarning"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.ConverterError": {
  "data": {
   "shadows": "numpy.lib._iotools.ConverterError"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.HAS_BZ2": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_io.HAS_LZMA": {
  "data": {
   "lineno": 59
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_io.HAS_REFCOUNT": {
  "data": {
   "shadows": "numpy.testing.HAS_REFCOUNT"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.IS_64BIT": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_io.IS_PYPY": {
  "data": {
   "shadows": "numpy.testing.IS_PYPY"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.LoadTxtBase": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": {
    "object": {
     "line number": [
      555
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.LoadTxtBase.check_compressed": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": {
    "fopen": {
     "line number": [
      564,
      568
     ]
    },
    "numpy.arange": {
     "line number": [
      558
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      567,
      570
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      563
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.LoadTxtBase.test_binary_decode": {
  "data": {
   "lineno": 603,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      605
     ]
    },
    "numpy.array": {
     "line number": [
      606
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      606
     ]
    },
    "numpy.unicode": {
     "line number": [
      605
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.LoadTxtBase.test_compressed_bz2": {
  "data": {
   "lineno": 577,
   "symbols_in_volume": {
    "numpy.lib.tests.test_io.HAS_BZ2": {
     "line number": [
      577
     ]
    },
    "numpy.lib.tests.test_io.bz2": {
     "line number": [
      580
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      577,
      578
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.LoadTxtBase.test_compressed_gzip": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": {
    "numpy.lib.tests.test_io.gzip": {
     "line number": [
      575
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      573
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.LoadTxtBase.test_compressed_lzma": {
  "data": {
   "lineno": 582,
   "symbols_in_volume": {
    "numpy.lib.tests.test_io.HAS_LZMA": {
     "line number": [
      582
     ]
    },
    "numpy.lib.tests.test_io.lzma": {
     "line number": [
      585
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      582,
      583
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.LoadTxtBase.test_converters_decode": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      615
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      610
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      616
     ]
    },
    "numpy.unicode": {
     "line number": [
      613
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.LoadTxtBase.test_converters_nodecode": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      627
     ]
    },
    "numpy.lib.tests.test_io.io": {
     "line number": [
      622
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      628
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      621
     ]
    },
    "numpy.unicode": {
     "line number": [
      624
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.LoadTxtBase.test_encoding": {
  "data": {
   "lineno": 587,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      592
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      588
     ]
    },
    "open": {
     "line number": [
      589
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.LoadTxtBase.test_stringload": {
  "data": {
   "lineno": 594,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      601
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      597
     ]
    },
    "numpy.unicode": {
     "line number": [
      600
     ]
    },
    "open": {
     "line number": [
      598
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.NamedTemporaryFile": {
  "data": {
   "shadows": "tempfile.NamedTemporaryFile"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.Path": {
  "data": {
   "shadows": "numpy.compat.Path"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.RoundtripTest": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "object": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.RoundtripTest.check_roundtrips": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "numpy.asfortranarray": {
     "line number": [
      125,
      126,
      129,
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.RoundtripTest.roundtrip": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      97,
      107,
      115
     ]
    },
    "isinstance": {
     "line number": [
      107,
      115,
      119
     ]
    },
    "locals": {
     "line number": [
      118
     ]
    },
    "numpy.lib.npyio.NpzFile": {
     "line number": [
      119
     ]
    },
    "numpy.lib.tests.test_io.os": {
     "line number": [
      120
     ]
    },
    "numpy.lib.tests.test_io.sys": {
     "line number": [
      107
     ]
    },
    "numpy.load": {
     "line number": [
      110
     ]
    },
    "save_func": {
     "line number": [
      103
     ]
    },
    "tempfile.NamedTemporaryFile": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.RoundtripTest.test_1D": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "int": {
     "line number": [
      156
     ]
    },
    "numpy.array": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.RoundtripTest.test_array": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "float": {
     "line number": [
      133,
      136
     ]
    },
    "int": {
     "line number": [
      139
     ]
    },
    "numpy.array": {
     "line number": [
      133,
      136,
      139,
      142,
      145
     ]
    },
    "numpy.cdouble": {
     "line number": [
      145
     ]
    },
    "numpy.csingle": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.RoundtripTest.test_array_object": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      149,
      152
     ]
    },
    "object": {
     "line number": [
      149,
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.RoundtripTest.test_format_2_0": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      176
     ]
    },
    "float": {
     "line number": [
      173
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      171
     ]
    },
    "numpy.lib.tests.test_io.warnings": {
     "line number": [
      175,
      176
     ]
    },
    "numpy.ones": {
     "line number": [
      174
     ]
    },
    "range": {
     "line number": [
      173
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.RoundtripTest.test_mmap": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      161
     ]
    },
    "numpy.asfortranarray": {
     "line number": [
      164
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      159
     ]
    },
    "numpy.lib.tests.test_io.sys": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.RoundtripTest.test_record": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.StringIO": {
  "data": {
   "shadows": "io.StringIO"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.TestFromTxt": {
  "data": {
   "lineno": 1189,
   "symbols_in_volume": {
    "numpy.genfromtxt": {
     "line number": [
      1190
     ]
    },
    "numpy.lib.tests.test_io.LoadTxtBase": {
     "line number": [
      1189
     ]
    },
    "staticmethod": {
     "line number": [
      1190
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_1D": {
  "data": {
   "lineno": 1219,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1221,
      1224,
      1228
     ]
    },
    "numpy.array": {
     "line number": [
      1221
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1223,
      1227
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1224,
      1228
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1225,
      1229
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_array": {
  "data": {
   "lineno": 1207,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1215,
      1216
     ]
    },
    "int": {
     "line number": [
      1210,
      1211
     ]
    },
    "numpy.array": {
     "line number": [
      1210,
      1215
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1209
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      1216
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1211
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1212,
      1217
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype": {
  "data": {
   "lineno": 1305,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      1318
     ]
    },
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      1309,
      1311
     ]
    },
    "numpy.array": {
     "line number": [
      1312,
      1313,
      1314,
      1315,
      1316
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1307
     ]
    },
    "numpy.lib.tests.test_io.warnings": {
     "line number": [
      1308,
      1309
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1317,
      1319
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1310
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1311
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype_largeint": {
  "data": {
   "lineno": 2268,
   "symbols_in_volume": {
    "float": {
     "line number": [
      2285
     ]
    },
    "numpy.int64": {
     "line number": [
      2286
     ]
    },
    "numpy.integer": {
     "line number": [
      2287
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      2279
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2283,
      2290,
      2291
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      2281
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2285,
      2286,
      2287
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      2289
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype_uniform": {
  "data": {
   "lineno": 1321,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1325
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1323
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1326
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1324
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_autonames_and_usecols": {
  "data": {
   "lineno": 1384,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1393
     ]
    },
    "int": {
     "line number": [
      1393
     ]
    },
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      1388,
      1391
     ]
    },
    "numpy.array": {
     "line number": [
      1392
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1386
     ]
    },
    "numpy.lib.tests.test_io.warnings": {
     "line number": [
      1387,
      1388
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1394
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1389
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1391
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_autostrip": {
  "data": {
   "lineno": 1863,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1866
     ]
    },
    "float": {
     "line number": [
      1872,
      1879
     ]
    },
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      1868,
      1870,
      1875,
      1877
     ]
    },
    "numpy.array": {
     "line number": [
      1871,
      1878
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1869,
      1876
     ]
    },
    "numpy.lib.tests.test_io.warnings": {
     "line number": [
      1867,
      1868,
      1874,
      1875
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1873,
      1880
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1869,
      1876
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1870,
      1877
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_binary_decode_autodtype": {
  "data": {
   "lineno": 2038,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      2040
     ]
    },
    "numpy.array": {
     "line number": [
      2041
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2041
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_commented_header": {
  "data": {
   "lineno": 1348,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1362
     ]
    },
    "int": {
     "line number": [
      1362
     ]
    },
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      1358,
      1360,
      1372,
      1374
     ]
    },
    "numpy.array": {
     "line number": [
      1361
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1359,
      1373
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1350,
      1365
     ]
    },
    "numpy.lib.tests.test_io.warnings": {
     "line number": [
      1357,
      1358,
      1371,
      1372
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1363,
      1375
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1360,
      1374
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_comments": {
  "data": {
   "lineno": 1231,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1233,
      1236,
      1240
     ]
    },
    "numpy.array": {
     "line number": [
      1233
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1235,
      1239
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1237,
      1241
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1236,
      1240
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_comments_is_none": {
  "data": {
   "lineno": 1995,
   "symbols_in_volume": {
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      1998,
      2001,
      2004,
      2007
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1999,
      2005
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1999,
      2005
     ]
    },
    "numpy.lib.tests.test_io.warnings": {
     "line number": [
      1997,
      1998,
      2003,
      2004
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2002,
      2008
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2001,
      2007
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_converters_cornercases": {
  "data": {
   "lineno": 1418,
   "symbols_in_volume": {
    "datetime.datetime": {
     "line number": [
      1425
     ]
    },
    "float": {
     "line number": [
      1426
     ]
    },
    "numpy.array": {
     "line number": [
      1425
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1422
     ]
    },
    "numpy.lib.tests.test_io.strptime": {
     "line number": [
      1421
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1427
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1423
     ]
    },
    "numpy.object_": {
     "line number": [
      1426
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_converters_cornercases2": {
  "data": {
   "lineno": 1429,
   "symbols_in_volume": {
    "datetime.datetime": {
     "line number": [
      1436
     ]
    },
    "float": {
     "line number": [
      1437
     ]
    },
    "numpy.array": {
     "line number": [
      1436
     ]
    },
    "numpy.datetime64": {
     "line number": [
      1432
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1433
     ]
    },
    "numpy.lib.tests.test_io.strptime": {
     "line number": [
      1432
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1438
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1434
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_converters_with_usecols": {
  "data": {
   "lineno": 1396,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1399,
      1400,
      1402
     ]
    },
    "numpy.array": {
     "line number": [
      1402
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1398
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1403
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1399
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_converters_with_usecols_and_names": {
  "data": {
   "lineno": 1405,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1415
     ]
    },
    "int": {
     "line number": [
      1412,
      1415
     ]
    },
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      1409,
      1413
     ]
    },
    "numpy.array": {
     "line number": [
      1414
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1407
     ]
    },
    "numpy.lib.tests.test_io.warnings": {
     "line number": [
      1408,
      1409
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1416
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1410
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1413
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_default_field_format": {
  "data": {
   "lineno": 1819,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1825
     ]
    },
    "int": {
     "line number": [
      1825,
      1825
     ]
    },
    "numpy.array": {
     "line number": [
      1824
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1822
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1826
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1822
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_converters": {
  "data": {
   "lineno": 1473,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1476,
      1478,
      1478,
      1481,
      1481
     ]
    },
    "numpy.array": {
     "line number": [
      1477,
      1482
     ]
    },
    "numpy.compat.bytes": {
     "line number": [
      1476
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1475,
      1480
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1479,
      1483
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1475,
      1480
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_converters_and_usecols": {
  "data": {
   "lineno": 1485,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1489,
      1489,
      1489
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1490,
      1495
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1493,
      1498
     ]
    },
    "numpy.rec.array": {
     "line number": [
      1492,
      1497
     ]
    },
    "numpy.recfromcsv": {
     "line number": [
      1490,
      1495
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_object": {
  "data": {
   "lineno": 1500,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      1515
     ]
    },
    "datetime.datetime": {
     "line number": [
      1510,
      1510
     ]
    },
    "int": {
     "line number": [
      1504,
      1514
     ]
    },
    "numpy.array": {
     "line number": [
      1509
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1507,
      1517
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1507,
      1517
     ]
    },
    "numpy.lib.tests.test_io.strptime": {
     "line number": [
      1505
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1512
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      1515
     ]
    },
    "object": {
     "line number": [
      1504,
      1514
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_easy_structured_dtype": {
  "data": {
   "lineno": 1854,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1858,
      1858,
      1860,
      1860
     ]
    },
    "int": {
     "line number": [
      1858,
      1860
     ]
    },
    "numpy.array": {
     "line number": [
      1859
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1857
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1861
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1857
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_empty_file": {
  "data": {
   "lineno": 1628,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1634
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1633
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1632
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1634
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1630
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_fancy_dtype": {
  "data": {
   "lineno": 1328,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1331
     ]
    },
    "int": {
     "line number": [
      1331,
      1331
     ]
    },
    "numpy.array": {
     "line number": [
      1333
     ]
    },
    "numpy.dtype": {
     "line number": [
      1331
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1330
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1334
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1332
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_fancy_dtype_alt": {
  "data": {
   "lineno": 1636,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1639
     ]
    },
    "int": {
     "line number": [
      1639,
      1639
     ]
    },
    "numpy.dtype": {
     "line number": [
      1639
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1638
     ]
    },
    "numpy.ma.array": {
     "line number": [
      1641
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1642
     ]
    },
    "numpy.mafromtxt": {
     "line number": [
      1640
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_filling_values": {
  "data": {
   "lineno": 1987,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1990
     ]
    },
    "int": {
     "line number": [
      1991
     ]
    },
    "numpy.array": {
     "line number": [
      1991
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1992
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1993
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1992
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_fixed_width_names": {
  "data": {
   "lineno": 1972,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1975,
      1981
     ]
    },
    "float": {
     "line number": [
      1977,
      1983
     ]
    },
    "int": {
     "line number": [
      1977,
      1977,
      1983,
      1983
     ]
    },
    "numpy.array": {
     "line number": [
      1976,
      1982
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1978,
      1984
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1979,
      1985
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1978,
      1984
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_gft_from_gzip": {
  "data": {
   "lineno": 2243,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      2250
     ]
    },
    "numpy.arange": {
     "line number": [
      2245
     ]
    },
    "numpy.compat.asbytes": {
     "line number": [
      2252
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      2257
     ]
    },
    "numpy.lib.tests.test_io.gzip": {
     "line number": [
      2251
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2257
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2254
     ]
    },
    "open": {
     "line number": [
      2255
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_filename": {
  "data": {
   "lineno": 2229,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      2232
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      2240
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2241
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2237
     ]
    },
    "open": {
     "line number": [
      2238
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator": {
  "data": {
   "lineno": 2259,
   "symbols_in_volume": {
    "count": {
     "line number": [
      2265
     ]
    },
    "numpy.arange": {
     "line number": [
      2266
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      2265
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2266
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator.count": {
  "data": {
   "lineno": 2261,
   "symbols_in_volume": {
    "numpy.compat.asbytes": {
     "line number": [
      2263
     ]
    },
    "range": {
     "line number": [
      2262
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_header": {
  "data": {
   "lineno": 1291,
   "symbols_in_volume": {
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      1295,
      1297
     ]
    },
    "numpy.array": {
     "line number": [
      1298,
      1299,
      1300
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1293
     ]
    },
    "numpy.lib.tests.test_io.warnings": {
     "line number": [
      1294,
      1295
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1301,
      1302,
      1303
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1296
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1297
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_incomplete_names": {
  "data": {
   "lineno": 1930,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1933
     ]
    },
    "float": {
     "line number": [
      1941
     ]
    },
    "int": {
     "line number": [
      1936
     ]
    },
    "numpy.array": {
     "line number": [
      1935,
      1940
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1937,
      1942
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1938
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1937,
      1942
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_inconsistent_dtype": {
  "data": {
   "lineno": 1809,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1817
     ]
    },
    "dict": {
     "line number": [
      1815
     ]
    },
    "int": {
     "line number": [
      1816
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1817
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1812
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1817
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_integer_delimiter": {
  "data": {
   "lineno": 1549,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1553
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1552
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1552
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1554
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_invalid_converter": {
  "data": {
   "lineno": 1452,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1460
     ]
    },
    "float": {
     "line number": [
      1453,
      1455
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1463
     ]
    },
    "numpy.lib._iotools.ConverterError": {
     "line number": [
      1463
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1457
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1463
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise": {
  "data": {
   "lineno": 1758,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1779
     ]
    },
    "dict": {
     "line number": [
      1766
     ]
    },
    "int": {
     "line number": [
      1776
     ]
    },
    "len": {
     "line number": [
      1775
     ]
    },
    "numpy.lib._iotools.ConversionWarning": {
     "line number": [
      1773
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1764
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1775,
      1776
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1779
     ]
    },
    "numpy.ones": {
     "line number": [
      1776
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1779
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      1773
     ]
    },
    "range": {
     "line number": [
      1761
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f": {
  "data": {
   "lineno": 1771,
   "symbols_in_volume": {
    "numpy.ndfromtxt": {
     "line number": [
      1772
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols": {
  "data": {
   "lineno": 1782,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1789
     ]
    },
    "int": {
     "line number": [
      1800,
      1805
     ]
    },
    "len": {
     "line number": [
      1799,
      1804
     ]
    },
    "numpy.lib._iotools.ConversionWarning": {
     "line number": [
      1797
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1788
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1799,
      1800,
      1804,
      1807
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1803
     ]
    },
    "numpy.ones": {
     "line number": [
      1800,
      1805
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      1797
     ]
    },
    "range": {
     "line number": [
      1785,
      1806
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f": {
  "data": {
   "lineno": 1795,
   "symbols_in_volume": {
    "numpy.ndfromtxt": {
     "line number": [
      1796
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_latin1": {
  "data": {
   "lineno": 2010,
   "symbols_in_volume": {
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      2016,
      2019,
      2031,
      2034
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      2017,
      2023,
      2032
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      2017,
      2023,
      2032
     ]
    },
    "numpy.lib.tests.test_io.warnings": {
     "line number": [
      2015,
      2016,
      2030,
      2031
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2020,
      2021,
      2022,
      2026,
      2027,
      2028,
      2035,
      2036
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2019,
      2034
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_max_rows": {
  "data": {
   "lineno": 2175,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2185,
      2195,
      2199
     ]
    },
    "numpy.array": {
     "line number": [
      2191,
      2206,
      2210,
      2219,
      2225
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      2179,
      2180,
      2185,
      2190,
      2195,
      2199,
      2205,
      2209,
      2218,
      2224
     ]
    },
    "numpy.lib._iotools.ConversionWarning": {
     "line number": [
      2203
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      2178,
      2185,
      2190,
      2195,
      2199,
      2205,
      2209,
      2217
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2181,
      2182,
      2192,
      2207,
      2211,
      2221,
      2227
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      2185,
      2195,
      2199
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      2202
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_missing": {
  "data": {
   "lineno": 1556,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1558,
      1559,
      1560
     ]
    },
    "numpy.array": {
     "line number": [
      1560
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1557
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1561
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1558
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_missing_with_tabs": {
  "data": {
   "lineno": 1563,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1569
     ]
    },
    "numpy.array": {
     "line number": [
      1568,
      1569
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1566
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1566
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1570,
      1571
     ]
    },
    "numpy.nan": {
     "line number": [
      1568,
      1568,
      1568
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_names_and_comments_none": {
  "data": {
   "lineno": 1377,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1380,
      1380,
      1381,
      1381
     ]
    },
    "numpy.array": {
     "line number": [
      1381
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1380
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1379
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1382
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_names_auto_completion": {
  "data": {
   "lineno": 1944,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1948,
      1950
     ]
    },
    "int": {
     "line number": [
      1948,
      1948,
      1950,
      1950
     ]
    },
    "numpy.array": {
     "line number": [
      1949
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1947
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1947
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1951
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_names_overwrite": {
  "data": {
   "lineno": 1336,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1344
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1340
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1346
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1342
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_names_with_usecols_bug1636": {
  "data": {
   "lineno": 1953,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1958,
      1958,
      1958,
      1963,
      1963,
      1963,
      1968
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1957,
      1962,
      1967
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1957,
      1962,
      1967
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1960,
      1965,
      1970
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_recfromcsv": {
  "data": {
   "lineno": 2134,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      2137
     ]
    },
    "float": {
     "line number": [
      2161
     ]
    },
    "int": {
     "line number": [
      2140,
      2140,
      2148,
      2148,
      2156,
      2156,
      2161
     ]
    },
    "isinstance": {
     "line number": [
      2141,
      2157,
      2165
     ]
    },
    "numpy.array": {
     "line number": [
      2139,
      2155,
      2163,
      2171
     ]
    },
    "numpy.compat.bytes": {
     "line number": [
      2171
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      2136,
      2144,
      2153,
      2160,
      2169
     ]
    },
    "numpy.ma.array": {
     "line number": [
      2146
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2142,
      2149,
      2150,
      2151,
      2158,
      2166,
      2172,
      2173
     ]
    },
    "numpy.recarray": {
     "line number": [
      2141,
      2157,
      2165
     ]
    },
    "numpy.recfromcsv": {
     "line number": [
      2138,
      2145,
      2154,
      2162,
      2170
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2141,
      2157,
      2165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_recfromtxt": {
  "data": {
   "lineno": 2115,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      2118
     ]
    },
    "int": {
     "line number": [
      2121,
      2121,
      2129,
      2129
     ]
    },
    "isinstance": {
     "line number": [
      2122
     ]
    },
    "numpy.array": {
     "line number": [
      2120
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      2117,
      2125
     ]
    },
    "numpy.ma.array": {
     "line number": [
      2127
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2123,
      2130,
      2131,
      2132
     ]
    },
    "numpy.recarray": {
     "line number": [
      2122
     ]
    },
    "numpy.recfromtxt": {
     "line number": [
      2119,
      2126
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2122
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_record": {
  "data": {
   "lineno": 1192,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1196,
      1202
     ]
    },
    "numpy.int32": {
     "line number": [
      1195,
      1195
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1194,
      1199
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1197,
      1205
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1195,
      1204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_replace_space": {
  "data": {
   "lineno": 1882,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1888,
      1895,
      1902
     ]
    },
    "int": {
     "line number": [
      1888,
      1888,
      1895,
      1895,
      1902,
      1902
     ]
    },
    "numpy.array": {
     "line number": [
      1889,
      1896,
      1903
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1886,
      1892,
      1899
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1886,
      1892,
      1899
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1890,
      1897,
      1904
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_replace_space_known_dtype": {
  "data": {
   "lineno": 1906,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1911,
      1912,
      1912,
      1912,
      1917,
      1919,
      1919,
      1919,
      1924,
      1926,
      1926,
      1926
     ]
    },
    "numpy.array": {
     "line number": [
      1913,
      1920,
      1927
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1910,
      1916,
      1923
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1910,
      1916,
      1923
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1914,
      1921,
      1928
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_shaped_dtype": {
  "data": {
   "lineno": 1644,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1646,
      1646
     ]
    },
    "int": {
     "line number": [
      1647
     ]
    },
    "numpy.array": {
     "line number": [
      1649
     ]
    },
    "numpy.dtype": {
     "line number": [
      1646
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1645
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1648
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1651
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_w_explicit_names": {
  "data": {
   "lineno": 1836,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1840,
      1842
     ]
    },
    "numpy.array": {
     "line number": [
      1841
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1839
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1843
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1839
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_w_implicit_names": {
  "data": {
   "lineno": 1845,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1849,
      1851
     ]
    },
    "numpy.array": {
     "line number": [
      1850
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1848
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1852
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1848
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_wo_names": {
  "data": {
   "lineno": 1828,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1832,
      1833
     ]
    },
    "numpy.array": {
     "line number": [
      1833
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1831
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1834
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1831
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_skip_footer": {
  "data": {
   "lineno": 1256,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1261
     ]
    },
    "float": {
     "line number": [
      1264
     ]
    },
    "numpy.array": {
     "line number": [
      1263
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1262
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1262
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1265
     ]
    },
    "range": {
     "line number": [
      1257,
      1259,
      1263
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_skip_footer_with_invalid": {
  "data": {
   "lineno": 1267,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1272
     ]
    },
    "numpy.array": {
     "line number": [
      1278,
      1281,
      1286,
      1289
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1272,
      1276,
      1280,
      1284,
      1287
     ]
    },
    "numpy.lib._iotools.ConversionWarning": {
     "line number": [
      1269
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1273,
      1277,
      1280,
      1285,
      1288
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1278,
      1281,
      1286,
      1289
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1272
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1268
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_skiprows": {
  "data": {
   "lineno": 1243,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1246
     ]
    },
    "int": {
     "line number": [
      1245,
      1246
     ]
    },
    "numpy.array": {
     "line number": [
      1245
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1248,
      1252
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      1253
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1250,
      1254
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1249
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_spacedelimiter": {
  "data": {
   "lineno": 1541,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1545
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1543
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1547
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1544
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_tricky_converter_bug1666": {
  "data": {
   "lineno": 1465,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1468
     ]
    },
    "numpy.array": {
     "line number": [
      1470
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1469
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1467
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1471
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_unused_converter": {
  "data": {
   "lineno": 1440,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1444,
      1449
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1442
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1445,
      1450
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1443,
      1448
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_usecols": {
  "data": {
   "lineno": 1573,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1576,
      1580,
      1583,
      1587,
      1591
     ]
    },
    "numpy.array": {
     "line number": [
      1576,
      1583,
      1591
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1577,
      1584
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1581,
      1588,
      1592
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1580,
      1587,
      1591
     ]
    },
    "numpy.savetxt": {
     "line number": [
      1578,
      1585
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_usecols_as_css": {
  "data": {
   "lineno": 1594,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1599
     ]
    },
    "numpy.array": {
     "line number": [
      1599
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1597
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1597
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1600
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_integer": {
  "data": {
   "lineno": 1612,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1615
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1614
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1614
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1615
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_named_columns": {
  "data": {
   "lineno": 1617,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1621
     ]
    },
    "float": {
     "line number": [
      1619,
      1619
     ]
    },
    "numpy.array": {
     "line number": [
      1619
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1622,
      1624
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1622,
      1624
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1623,
      1626
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_structured_dtype": {
  "data": {
   "lineno": 1602,
   "symbols_in_volume": {
    "list": {
     "line number": [
      1608
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1604
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1609,
      1610
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      1607
     ]
    },
    "zip": {
     "line number": [
      1608
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_user_filling_values": {
  "data": {
   "lineno": 1702,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1706
     ]
    },
    "int": {
     "line number": [
      1704,
      1704,
      1707,
      1713,
      1717,
      1721,
      1725
     ]
    },
    "numpy.array": {
     "line number": [
      1704,
      1712,
      1717,
      1723,
      1727
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1711,
      1716,
      1721,
      1725
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1711,
      1716,
      1721,
      1725
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1714,
      1718,
      1724,
      1728
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_user_missing_values": {
  "data": {
   "lineno": 1671,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      1674
     ]
    },
    "dict": {
     "line number": [
      1673
     ]
    },
    "float": {
     "line number": [
      1674
     ]
    },
    "int": {
     "line number": [
      1674
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1676,
      1685,
      1693
     ]
    },
    "numpy.ma.array": {
     "line number": [
      1678,
      1687,
      1696
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1682,
      1691,
      1700
     ]
    },
    "numpy.mafromtxt": {
     "line number": [
      1676,
      1685,
      1693
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_userconverters_with_explicit_dtype": {
  "data": {
   "lineno": 1520,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1523,
      1526
     ]
    },
    "numpy.array": {
     "line number": [
      1525
     ]
    },
    "numpy.compat.bytes": {
     "line number": [
      1524
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1523
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1522
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1527
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_utf8_byte_encoding": {
  "data": {
   "lineno": 2043,
   "symbols_in_volume": {
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      2049,
      2052
     ]
    },
    "numpy.array": {
     "line number": [
      2053
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      2050
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      2050
     ]
    },
    "numpy.lib.tests.test_io.warnings": {
     "line number": [
      2048,
      2049
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2052
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2057
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_utf8_file": {
  "data": {
   "lineno": 2059,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2066
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      2064,
      2075
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2077,
      2078
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2070
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2061
     ]
    },
    "numpy.unicode": {
     "line number": [
      2069
     ]
    },
    "open": {
     "line number": [
      2062,
      2073
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_utf8_file_nodtype_unicode": {
  "data": {
   "lineno": 2080,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      2092
     ]
    },
    "UnicodeError": {
     "line number": [
      2092
     ]
    },
    "numpy.VisibleDeprecationWarning": {
     "line number": [
      2103,
      2107
     ]
    },
    "numpy.array": {
     "line number": [
      2108
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      2104
     ]
    },
    "numpy.lib.tests.test_io.io": {
     "line number": [
      2097
     ]
    },
    "numpy.lib.tests.test_io.locale": {
     "line number": [
      2090
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      2093
     ]
    },
    "numpy.lib.tests.test_io.warnings": {
     "line number": [
      2101,
      2102
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2107
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2113
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2096
     ]
    },
    "numpy.unicode": {
     "line number": [
      2112
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_utf8_userconverters_with_explicit_dtype": {
  "data": {
   "lineno": 1529,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1534,
      1538
     ]
    },
    "numpy.array": {
     "line number": [
      1537
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1534
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1539
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      1531
     ]
    },
    "numpy.unicode": {
     "line number": [
      1535
     ]
    },
    "open": {
     "line number": [
      1532
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_with_masked_column_uniform": {
  "data": {
   "lineno": 1740,
   "symbols_in_volume": {
    "numpy.genfromtxt": {
     "line number": [
      1743
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1742
     ]
    },
    "numpy.ma.array": {
     "line number": [
      1745
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1746
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_with_masked_column_various": {
  "data": {
   "lineno": 1748,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1755,
      1755
     ]
    },
    "int": {
     "line number": [
      1755
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      1751
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1750
     ]
    },
    "numpy.ma.array": {
     "line number": [
      1753
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1756
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_withmissing": {
  "data": {
   "lineno": 1653,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1655
     ]
    },
    "float": {
     "line number": [
      1667,
      1667
     ]
    },
    "int": {
     "line number": [
      1659,
      1659
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1654
     ]
    },
    "numpy.ma.array": {
     "line number": [
      1657,
      1665
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1660,
      1661,
      1668,
      1669
     ]
    },
    "numpy.mafromtxt": {
     "line number": [
      1656,
      1664
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestFromTxt.test_withmissing_float": {
  "data": {
   "lineno": 1730,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1736
     ]
    },
    "int": {
     "line number": [
      1736
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1731
     ]
    },
    "numpy.ma.array": {
     "line number": [
      1734
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1737,
      1738
     ]
    },
    "numpy.mafromtxt": {
     "line number": [
      1732
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": {
    "numpy.lib.tests.test_io.LoadTxtBase": {
     "line number": [
      631
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      632
     ]
    },
    "staticmethod": {
     "line number": [
      632
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.setup": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": {
    "numpy.lib.npyio._loadtxt_chunksize": {
     "line number": [
      636,
      637
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.teardown": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": {
    "numpy.lib.npyio._loadtxt_chunksize": {
     "line number": [
      639
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_1D": {
  "data": {
   "lineno": 673,
   "symbols_in_volume": {
    "int": {
     "line number": [
      677,
      678,
      684,
      685
     ]
    },
    "numpy.array": {
     "line number": [
      678,
      685
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      674,
      681
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      677,
      684
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      679,
      686
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_3d_shaped_dtype": {
  "data": {
   "lineno": 854,
   "symbols_in_volume": {
    "float": {
     "line number": [
      856,
      856
     ]
    },
    "int": {
     "line number": [
      857
     ]
    },
    "numpy.array": {
     "line number": [
      859
     ]
    },
    "numpy.dtype": {
     "line number": [
      856
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      855
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      858
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      862
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_array": {
  "data": {
   "lineno": 659,
   "symbols_in_volume": {
    "float": {
     "line number": [
      669,
      670
     ]
    },
    "int": {
     "line number": [
      664,
      665
     ]
    },
    "numpy.array": {
     "line number": [
      665,
      670
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      660
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      664,
      669
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      666,
      671
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_bad_line": {
  "data": {
   "lineno": 1046,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1052
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1047
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      1052
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      1052
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_binary_load": {
  "data": {
   "lineno": 1062,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1078
     ]
    },
    "numpy.lib.tests.test_io.locale": {
     "line number": [
      1062
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      1062
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      1072,
      1076
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1073,
      1078
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      1068
     ]
    },
    "numpy.unicode": {
     "line number": [
      1072
     ]
    },
    "open": {
     "line number": [
      1069,
      1071,
      1075
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_comments_byte": {
  "data": {
   "lineno": 716,
   "symbols_in_volume": {
    "int": {
     "line number": [
      720,
      722
     ]
    },
    "numpy.array": {
     "line number": [
      722
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      717
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      720
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      723
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_comments_multi_chars": {
  "data": {
   "lineno": 734,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      747
     ]
    },
    "int": {
     "line number": [
      738,
      740,
      747
     ]
    },
    "numpy.array": {
     "line number": [
      740
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      735,
      744
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      738,
      747
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      741
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      747
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_comments_multiple": {
  "data": {
   "lineno": 725,
   "symbols_in_volume": {
    "int": {
     "line number": [
      729,
      731
     ]
    },
    "numpy.array": {
     "line number": [
      731
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      726
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      729
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      732
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_comments_unicode": {
  "data": {
   "lineno": 707,
   "symbols_in_volume": {
    "int": {
     "line number": [
      711,
      713
     ]
    },
    "numpy.array": {
     "line number": [
      713
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      708
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      711
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      714
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_complex_misformatted": {
  "data": {
   "lineno": 947,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      964
     ]
    },
    "io.BytesIO": {
     "line number": [
      954
     ]
    },
    "numpy.complex128": {
     "line number": [
      950
     ]
    },
    "numpy.e": {
     "line number": [
      952
     ]
    },
    "numpy.lib.tests.test_io.re": {
     "line number": [
      951,
      953
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      964
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      965
     ]
    },
    "numpy.pi": {
     "line number": [
      951
     ]
    },
    "numpy.savetxt": {
     "line number": [
      955
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      961
     ]
    },
    "numpy.zeros": {
     "line number": [
      950
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_converters_with_usecols": {
  "data": {
   "lineno": 697,
   "symbols_in_volume": {
    "int": {
     "line number": [
      701,
      702,
      704
     ]
    },
    "numpy.array": {
     "line number": [
      704
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      698
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      701
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      705
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_dtype_with_object": {
  "data": {
   "lineno": 896,
   "symbols_in_volume": {
    "datetime.datetime": {
     "line number": [
      906,
      906
     ]
    },
    "int": {
     "line number": [
      900
     ]
    },
    "numpy.array": {
     "line number": [
      905
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      903
     ]
    },
    "numpy.lib.tests.test_io.strptime": {
     "line number": [
      901
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      903
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      908
     ]
    },
    "object": {
     "line number": [
      900
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_empty_field_after_tab": {
  "data": {
   "lineno": 974,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      981
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      975
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      980
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      982
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_empty_file": {
  "data": {
   "lineno": 873,
   "symbols_in_volume": {
    "numpy.int64": {
     "line number": [
      879,
      881
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      876
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      877,
      879
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      878,
      880
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      881
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      874
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_fancy_dtype": {
  "data": {
   "lineno": 836,
   "symbols_in_volume": {
    "float": {
     "line number": [
      840
     ]
    },
    "int": {
     "line number": [
      840,
      840
     ]
    },
    "numpy.array": {
     "line number": [
      842
     ]
    },
    "numpy.dtype": {
     "line number": [
      840
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      837
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      841
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      843
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_from_complex": {
  "data": {
   "lineno": 939,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      940,
      940,
      944
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      941
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      944
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      945
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_from_float_hex": {
  "data": {
   "lineno": 926,
   "symbols_in_volume": {
    "float": {
     "line number": [
      930,
      934
     ]
    },
    "float.hex": {
     "line number": [
      931
     ]
    },
    "map": {
     "line number": [
      931
     ]
    },
    "numpy.float32": {
     "line number": [
      929,
      934
     ]
    },
    "numpy.hstack": {
     "line number": [
      930
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      932
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      936
     ]
    },
    "numpy.logspace": {
     "line number": [
      929
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      937
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source": {
  "data": {
   "lineno": 1038,
   "symbols_in_volume": {
    "count": {
     "line number": [
      1043
     ]
    },
    "numpy.arange": {
     "line number": [
      1044
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      1043
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1044
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source.count": {
  "data": {
   "lineno": 1039,
   "symbols_in_volume": {
    "range": {
     "line number": [
      1040
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_int64_type": {
  "data": {
   "lineno": 918,
   "symbols_in_volume": {
    "numpy.int64": {
     "line number": [
      923
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      920
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      923
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      924
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_max_rows": {
  "data": {
   "lineno": 1080,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1084,
      1086
     ]
    },
    "numpy.array": {
     "line number": [
      1086
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1081
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      1084
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1087
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_max_rows_larger": {
  "data": {
   "lineno": 1119,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1124,
      1126
     ]
    },
    "numpy.array": {
     "line number": [
      1126
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1121
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      1124
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1127
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_max_rows_with_read_continuation": {
  "data": {
   "lineno": 1106,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1110,
      1112,
      1115,
      1116
     ]
    },
    "numpy.array": {
     "line number": [
      1112,
      1116
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1107
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      1110,
      1115
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1113,
      1117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_max_rows_with_skiprows": {
  "data": {
   "lineno": 1089,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1093,
      1095,
      1101,
      1103
     ]
    },
    "numpy.array": {
     "line number": [
      1095,
      1103
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1090,
      1098
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      1093,
      1101
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1096,
      1104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_missing": {
  "data": {
   "lineno": 688,
   "symbols_in_volume": {
    "int": {
     "line number": [
      692,
      693,
      694
     ]
    },
    "numpy.array": {
     "line number": [
      694
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      689
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      692
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      695
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_ndmin_keyword": {
  "data": {
   "lineno": 995,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      999,
      1001
     ]
    },
    "int": {
     "line number": [
      1003,
      1010,
      1013,
      1016,
      1022,
      1025,
      1028
     ]
    },
    "numpy.array": {
     "line number": [
      1004
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      996,
      1007,
      1019,
      1034
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      999,
      1001,
      1003,
      1010,
      1013,
      1016,
      1022,
      1025,
      1028,
      1035,
      1036
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1011,
      1014,
      1017,
      1023,
      1026,
      1029,
      1035,
      1036
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1005
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      999,
      1001
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1032
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_none_as_string": {
  "data": {
   "lineno": 1054,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1059,
      1059
     ]
    },
    "numpy.dtype": {
     "line number": [
      1059
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1056
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      1060
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_record": {
  "data": {
   "lineno": 641,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      646,
      654
     ]
    },
    "numpy.int32": {
     "line number": [
      645,
      645
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      642,
      649
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      645,
      656
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      647,
      657
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_shaped_dtype": {
  "data": {
   "lineno": 845,
   "symbols_in_volume": {
    "float": {
     "line number": [
      847,
      847
     ]
    },
    "int": {
     "line number": [
      848
     ]
    },
    "numpy.array": {
     "line number": [
      850
     ]
    },
    "numpy.dtype": {
     "line number": [
      847
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      846
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      849
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      852
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_skiprows": {
  "data": {
   "lineno": 750,
   "symbols_in_volume": {
    "int": {
     "line number": [
      754,
      756,
      762,
      764
     ]
    },
    "numpy.array": {
     "line number": [
      756,
      764
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      751,
      759
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      754,
      762
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      757,
      765
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_str_dtype": {
  "data": {
   "lineno": 864,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      869
     ]
    },
    "numpy.bytes_": {
     "line number": [
      868
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      870
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      871
     ]
    },
    "str": {
     "line number": [
      868
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_structure_unpack": {
  "data": {
   "lineno": 984,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      991,
      992,
      993
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      985
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      987
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      988,
      989,
      990
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      991,
      992,
      993
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_uint64_type": {
  "data": {
   "lineno": 910,
   "symbols_in_volume": {
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      912
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      915
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      916
     ]
    },
    "numpy.uint64": {
     "line number": [
      915
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_universal_newline": {
  "data": {
   "lineno": 967,
   "symbols_in_volume": {
    "numpy.loadtxt": {
     "line number": [
      971
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      972
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      968
     ]
    },
    "open": {
     "line number": [
      969
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_unused_converter": {
  "data": {
   "lineno": 883,
   "symbols_in_volume": {
    "int": {
     "line number": [
      888,
      893
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      884
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      887,
      892
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      889,
      894
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_usecols": {
  "data": {
   "lineno": 767,
   "symbols_in_volume": {
    "CrazyInt": {
     "line number": [
      801
     ]
    },
    "TypeError": {
     "line number": [
      825,
      831
     ]
    },
    "float": {
     "line number": [
      768,
      772,
      775,
      779,
      784,
      793,
      803,
      807
     ]
    },
    "int": {
     "line number": [
      788
     ]
    },
    "int_type": {
     "line number": [
      791
     ]
    },
    "io.BytesIO": {
     "line number": [
      769,
      776
     ]
    },
    "list": {
     "line number": [
      817
     ]
    },
    "numpy.array": {
     "line number": [
      768,
      775,
      784
     ]
    },
    "numpy.int16": {
     "line number": [
      788
     ]
    },
    "numpy.int32": {
     "line number": [
      789
     ]
    },
    "numpy.int64": {
     "line number": [
      789
     ]
    },
    "numpy.int8": {
     "line number": [
      788
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      814
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      772,
      779,
      784,
      793,
      803,
      807,
      817,
      827,
      833
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      818,
      819
     ]
    },
    "numpy.savetxt": {
     "line number": [
      770,
      777
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      773,
      780,
      785,
      794,
      804,
      808
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      824,
      830
     ]
    },
    "numpy.uint16": {
     "line number": [
      789
     ]
    },
    "numpy.uint32": {
     "line number": [
      790
     ]
    },
    "numpy.uint64": {
     "line number": [
      790
     ]
    },
    "numpy.uint8": {
     "line number": [
      789
     ]
    },
    "type": {
     "line number": [
      826,
      832
     ]
    },
    "zip": {
     "line number": [
      817
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_usecols.CrazyInt": {
  "data": {
   "lineno": 797,
   "symbols_in_volume": {
    "object": {
     "line number": [
      797
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.TestLoadTxt.test_usecols.CrazyInt.__index__": {
  "data": {
   "lineno": 798
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestPathUsage": {
  "data": {
   "lineno": 2294,
   "symbols_in_volume": {
    "numpy.compat.Path": {
     "line number": [
      2294
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      2294
     ]
    },
    "object": {
     "line number": [
      2295
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.TestPathUsage.test_genfromtxt": {
  "data": {
   "lineno": 2355,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2358
     ]
    },
    "numpy.compat.Path": {
     "line number": [
      2357
     ]
    },
    "numpy.genfromtxt": {
     "line number": [
      2360
     ]
    },
    "numpy.savetxt": {
     "line number": [
      2359
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2361
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2356
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestPathUsage.test_loadtxt": {
  "data": {
   "lineno": 2297,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2300
     ]
    },
    "numpy.compat.Path": {
     "line number": [
      2299
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      2302
     ]
    },
    "numpy.savetxt": {
     "line number": [
      2301
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2303
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestPathUsage.test_mafromtxt": {
  "data": {
   "lineno": 2374,
   "symbols_in_volume": {
    "numpy.compat.Path": {
     "line number": [
      2377
     ]
    },
    "numpy.ma.array": {
     "line number": [
      2382
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2383
     ]
    },
    "numpy.mafromtxt": {
     "line number": [
      2381
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2376
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestPathUsage.test_ndfromtxt": {
  "data": {
   "lineno": 2363,
   "symbols_in_volume": {
    "int": {
     "line number": [
      2370,
      2371
     ]
    },
    "numpy.array": {
     "line number": [
      2370
     ]
    },
    "numpy.compat.Path": {
     "line number": [
      2366
     ]
    },
    "numpy.ndfromtxt": {
     "line number": [
      2371
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2372
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2365
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestPathUsage.test_recfromcsv": {
  "data": {
   "lineno": 2398,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      2404
     ]
    },
    "int": {
     "line number": [
      2407,
      2407
     ]
    },
    "isinstance": {
     "line number": [
      2408
     ]
    },
    "numpy.array": {
     "line number": [
      2406
     ]
    },
    "numpy.compat.Path": {
     "line number": [
      2400
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2409
     ]
    },
    "numpy.recarray": {
     "line number": [
      2408
     ]
    },
    "numpy.recfromcsv": {
     "line number": [
      2405
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2408
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2399
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestPathUsage.test_recfromtxt": {
  "data": {
   "lineno": 2385,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      2391
     ]
    },
    "int": {
     "line number": [
      2394,
      2394
     ]
    },
    "isinstance": {
     "line number": [
      2395
     ]
    },
    "numpy.array": {
     "line number": [
      2393
     ]
    },
    "numpy.compat.Path": {
     "line number": [
      2387
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2396
     ]
    },
    "numpy.recarray": {
     "line number": [
      2395
     ]
    },
    "numpy.recfromtxt": {
     "line number": [
      2392
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2395
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2386
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestPathUsage.test_save_load": {
  "data": {
   "lineno": 2305,
   "symbols_in_volume": {
    "int": {
     "line number": [
      2309
     ]
    },
    "numpy.array": {
     "line number": [
      2309
     ]
    },
    "numpy.compat.Path": {
     "line number": [
      2308
     ]
    },
    "numpy.load": {
     "line number": [
      2311
     ]
    },
    "numpy.save": {
     "line number": [
      2310
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2312
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestPathUsage.test_save_load_memmap": {
  "data": {
   "lineno": 2314,
   "symbols_in_volume": {
    "int": {
     "line number": [
      2318
     ]
    },
    "numpy.array": {
     "line number": [
      2318
     ]
    },
    "numpy.compat.Path": {
     "line number": [
      2317
     ]
    },
    "numpy.load": {
     "line number": [
      2320
     ]
    },
    "numpy.save": {
     "line number": [
      2319
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2321
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2316
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestPathUsage.test_save_load_memmap_readwrite": {
  "data": {
   "lineno": 2325,
   "symbols_in_volume": {
    "int": {
     "line number": [
      2329
     ]
    },
    "numpy.array": {
     "line number": [
      2329
     ]
    },
    "numpy.compat.Path": {
     "line number": [
      2328
     ]
    },
    "numpy.load": {
     "line number": [
      2331,
      2335
     ]
    },
    "numpy.save": {
     "line number": [
      2330
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2336
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2327
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestPathUsage.test_savez_compressed_load": {
  "data": {
   "lineno": 2346,
   "symbols_in_volume": {
    "numpy.compat.Path": {
     "line number": [
      2349
     ]
    },
    "numpy.load": {
     "line number": [
      2351
     ]
    },
    "numpy.savez_compressed": {
     "line number": [
      2350
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2352
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2348
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestPathUsage.test_savez_load": {
  "data": {
   "lineno": 2338,
   "symbols_in_volume": {
    "numpy.compat.Path": {
     "line number": [
      2341
     ]
    },
    "numpy.load": {
     "line number": [
      2343
     ]
    },
    "numpy.savez": {
     "line number": [
      2342
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2344
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2340
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveLoad": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "numpy.lib.tests.test_io.RoundtripTest": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.TestSaveLoad.roundtrip": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": {
    "numpy.lib.tests.test_io.RoundtripTest": {
     "line number": [
      182
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      183,
      184,
      185
     ]
    },
    "numpy.save": {
     "line number": [
      182
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": {
    "object": {
     "line number": [
      320
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_0D_3D": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      347,
      348
     ]
    },
    "io.BytesIO": {
     "line number": [
      346
     ]
    },
    "numpy.array": {
     "line number": [
      347,
      348
     ]
    },
    "numpy.savetxt": {
     "line number": [
      347,
      348
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      347,
      348
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_1D": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": {
    "int": {
     "line number": [
      338
     ]
    },
    "io.BytesIO": {
     "line number": [
      339
     ]
    },
    "numpy.array": {
     "line number": [
      338
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      343
     ]
    },
    "numpy.savetxt": {
     "line number": [
      340
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_array": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": {
    "float": {
     "line number": [
      322
     ]
    },
    "int": {
     "line number": [
      331
     ]
    },
    "io.BytesIO": {
     "line number": [
      324,
      332
     ]
    },
    "numpy.array": {
     "line number": [
      322,
      331
     ]
    },
    "numpy.compat.asbytes": {
     "line number": [
      328,
      329
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      327,
      335
     ]
    },
    "numpy.savetxt": {
     "line number": [
      325,
      333
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_complex_arrays": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      450,
      460,
      470
     ]
    },
    "numpy.complex128": {
     "line number": [
      444
     ]
    },
    "numpy.e": {
     "line number": [
      446
     ]
    },
    "numpy.lib.tests.test_io.re": {
     "line number": [
      445,
      447
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      454,
      464,
      474
     ]
    },
    "numpy.pi": {
     "line number": [
      445
     ]
    },
    "numpy.savetxt": {
     "line number": [
      451,
      461,
      471
     ]
    },
    "numpy.zeros": {
     "line number": [
      444
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_complex_negative_exponent": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      487
     ]
    },
    "numpy.complex128": {
     "line number": [
      483
     ]
    },
    "numpy.e": {
     "line number": [
      485
     ]
    },
    "numpy.lib.tests.test_io.re": {
     "line number": [
      484,
      486
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      491
     ]
    },
    "numpy.pi": {
     "line number": [
      484
     ]
    },
    "numpy.savetxt": {
     "line number": [
      488
     ]
    },
    "numpy.zeros": {
     "line number": [
      483
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": {
    "CustomWriter": {
     "line number": [
      505
     ]
    },
    "numpy.array": {
     "line number": [
      506
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      508
     ]
    },
    "numpy.savetxt": {
     "line number": [
      507
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      509
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": {
    "list": {
     "line number": [
      501
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write": {
  "data": {
   "lineno": 502
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_delimiter": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      369
     ]
    },
    "numpy.array": {
     "line number": [
      368
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      372
     ]
    },
    "numpy.savetxt": {
     "line number": [
      370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_file_roundtrip": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      436
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      438
     ]
    },
    "numpy.savetxt": {
     "line number": [
      437
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      439
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      435
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_format": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      398
     ]
    },
    "io.BytesIO": {
     "line number": [
      376,
      383,
      390,
      397
     ]
    },
    "numpy.array": {
     "line number": [
      375
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      380,
      387,
      394
     ]
    },
    "numpy.savetxt": {
     "line number": [
      378,
      384,
      391,
      398
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      398
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_header_footer": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": {
    "int": {
     "line number": [
      404
     ]
    },
    "io.BytesIO": {
     "line number": [
      403,
      412,
      418,
      426
     ]
    },
    "numpy.array": {
     "line number": [
      404
     ]
    },
    "numpy.compat.asbytes": {
     "line number": [
      410,
      416,
      424,
      432
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      409,
      415,
      423,
      431
     ]
    },
    "numpy.savetxt": {
     "line number": [
      407,
      413,
      420,
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_multifield_view": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "numpy.compat.Path": {
     "line number": [
      362,
      357
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      357
     ]
    },
    "numpy.load": {
     "line number": [
      364
     ]
    },
    "numpy.ones": {
     "line number": [
      359
     ]
    },
    "numpy.save": {
     "line number": [
      363
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      365
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      361
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_record": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      352
     ]
    },
    "numpy.array": {
     "line number": [
      351
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      355
     ]
    },
    "numpy.savetxt": {
     "line number": [
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_unicode": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      513
     ]
    },
    "numpy.lib.tests.test_io.os": {
     "line number": [
      516
     ]
    },
    "numpy.savetxt": {
     "line number": [
      516
     ]
    },
    "numpy.testing.tempdir": {
     "line number": [
      514
     ]
    },
    "numpy.unicode": {
     "line number": [
      513
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_unicode_bytestream": {
  "data": {
   "lineno": 538,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      541
     ]
    },
    "numpy.array": {
     "line number": [
      540
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      544
     ]
    },
    "numpy.savetxt": {
     "line number": [
      542
     ]
    },
    "numpy.unicode": {
     "line number": [
      540
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_unicode_roundtrip": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      521
     ]
    },
    "numpy.lib.tests.test_io.HAS_BZ2": {
     "line number": [
      526
     ]
    },
    "numpy.lib.tests.test_io.HAS_LZMA": {
     "line number": [
      528
     ]
    },
    "numpy.lib.tests.test_io.os": {
     "line number": [
      532,
      534
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      534
     ]
    },
    "numpy.savetxt": {
     "line number": [
      532
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      536
     ]
    },
    "numpy.testing.tempdir": {
     "line number": [
      530
     ]
    },
    "numpy.unicode": {
     "line number": [
      521,
      535
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSaveTxt.test_unicode_stringstream": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": {
    "io.StringIO": {
     "line number": [
      549
     ]
    },
    "numpy.array": {
     "line number": [
      548
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      552
     ]
    },
    "numpy.savetxt": {
     "line number": [
      550
     ]
    },
    "numpy.unicode": {
     "line number": [
      548
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSavezLoad": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "numpy.lib.tests.test_io.RoundtripTest": {
     "line number": [
      188
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.TestSavezLoad.roundtrip": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      192
     ]
    },
    "numpy.lib.tests.test_io.RoundtripTest": {
     "line number": [
      190
     ]
    },
    "numpy.lib.tests.test_io.os": {
     "line number": [
      201
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      194,
      195,
      196
     ]
    },
    "numpy.savez": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSavezLoad.test_BagObj": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      233
     ]
    },
    "dir": {
     "line number": [
      238
     ]
    },
    "float": {
     "line number": [
      232
     ]
    },
    "io.BytesIO": {
     "line number": [
      234
     ]
    },
    "numpy.array": {
     "line number": [
      232,
      233
     ]
    },
    "numpy.load": {
     "line number": [
      237
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      238,
      239,
      240
     ]
    },
    "numpy.savez": {
     "line number": [
      235
     ]
    },
    "sorted": {
     "line number": [
      238
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSavezLoad.test_big_arrays": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      207
     ]
    },
    "numpy.lib.tests.test_io.IS_64BIT": {
     "line number": [
      203
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      203,
      204
     ]
    },
    "numpy.load": {
     "line number": [
      211
     ]
    },
    "numpy.savez": {
     "line number": [
      209
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      208
     ]
    },
    "numpy.uint8": {
     "line number": [
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSavezLoad.test_closing_fid": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      304
     ]
    },
    "Exception": {
     "line number": [
      302
     ]
    },
    "Warning": {
     "line number": [
      298
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      281
     ]
    },
    "numpy.load": {
     "line number": [
      301
     ]
    },
    "numpy.savez": {
     "line number": [
      289
     ]
    },
    "numpy.testing.IS_PYPY": {
     "line number": [
      281
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      297
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      288
     ]
    },
    "range": {
     "line number": [
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSavezLoad.test_closing_zipfile_after_load": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": {
    "numpy.load": {
     "line number": [
      314
     ]
    },
    "numpy.savez": {
     "line number": [
      313
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      317
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSavezLoad.test_multiple_arrays": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      218
     ]
    },
    "float": {
     "line number": [
      217
     ]
    },
    "numpy.array": {
     "line number": [
      217,
      218
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSavezLoad.test_named_arrays": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      223
     ]
    },
    "float": {
     "line number": [
      222
     ]
    },
    "io.BytesIO": {
     "line number": [
      224
     ]
    },
    "numpy.array": {
     "line number": [
      222,
      223
     ]
    },
    "numpy.load": {
     "line number": [
      227
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      228,
      229
     ]
    },
    "numpy.savez": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSavezLoad.test_not_closing_opened_fid": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "numpy.load": {
     "line number": [
      274
     ]
    },
    "numpy.savez": {
     "line number": [
      270
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      273,
      276,
      278
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      268
     ]
    },
    "open": {
     "line number": [
      269,
      271
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSavezLoad.test_savez_filename_clashes": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      263
     ]
    },
    "numpy.lib.tests.test_io.threading": {
     "line number": [
      255
     ]
    },
    "range": {
     "line number": [
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TestSavezLoad.test_savez_filename_clashes.writer": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "OSError": {
     "line number": [
      251
     ]
    },
    "numpy.random.randn": {
     "line number": [
      248
     ]
    },
    "numpy.savez": {
     "line number": [
      250
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      247
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.Testfromregex": {
  "data": {
   "lineno": 1129,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1129
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.Testfromregex.test_compiled_bytes": {
  "data": {
   "lineno": 1178,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      1180
     ]
    },
    "numpy.array": {
     "line number": [
      1182
     ]
    },
    "numpy.float64": {
     "line number": [
      1181
     ]
    },
    "numpy.fromregex": {
     "line number": [
      1183
     ]
    },
    "numpy.lib.tests.test_io.re": {
     "line number": [
      1179
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1184
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.Testfromregex.test_record": {
  "data": {
   "lineno": 1130,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1137
     ]
    },
    "numpy.float64": {
     "line number": [
      1135
     ]
    },
    "numpy.fromregex": {
     "line number": [
      1136
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1131
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1139
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.Testfromregex.test_record_2": {
  "data": {
   "lineno": 1141,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1148
     ]
    },
    "numpy.fromregex": {
     "line number": [
      1147
     ]
    },
    "numpy.int32": {
     "line number": [
      1146
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1142
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.Testfromregex.test_record_3": {
  "data": {
   "lineno": 1152,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1159
     ]
    },
    "numpy.float64": {
     "line number": [
      1157
     ]
    },
    "numpy.fromregex": {
     "line number": [
      1158
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      1153
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1160
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.Testfromregex.test_record_unicode": {
  "data": {
   "lineno": 1162,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1170
     ]
    },
    "numpy.float64": {
     "line number": [
      1168
     ]
    },
    "numpy.fromregex": {
     "line number": [
      1169,
      1175
     ]
    },
    "numpy.lib.tests.test_io.re": {
     "line number": [
      1174,
      1174
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1172,
      1176
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      1164
     ]
    },
    "open": {
     "line number": [
      1165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TextIO": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_io.TextIO.__init__": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "io.BytesIO.__init__": {
     "line number": [
      39
     ]
    },
    "numpy.compat.asbytes": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TextIO.write": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "io.BytesIO.write": {
     "line number": [
      42
     ]
    },
    "numpy.compat.asbytes": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.TextIO.writelines": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "io.BytesIO.writelines": {
     "line number": [
      45
     ]
    },
    "numpy.compat.asbytes": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.asbytes": {
  "data": {
   "shadows": "numpy.compat.asbytes"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.assert_equal": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.assert_no_gc_cycles": {
  "data": {
   "shadows": "numpy.testing.assert_no_gc_cycles"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.bytes": {
  "data": {
   "shadows": "numpy.compat.bytes"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.bz2": {
  "data": {
   "shadows": "bz2"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.datetime": {
  "data": {
   "shadows": "datetime.datetime"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.gzip": {
  "data": {
   "shadows": "gzip"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.locale": {
  "data": {
   "shadows": "locale"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.lzma": {
  "data": {
   "shadows": "lzma"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.ma": {
  "data": {
   "shadows": "numpy.ma"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.strptime": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "datetime.datetime": {
     "line number": [
      70
     ]
    },
    "numpy.compat.bytes": {
     "line number": [
      68
     ]
    },
    "numpy.lib.tests.test_io.time": {
     "line number": [
      70
     ]
    },
    "type": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.tempdir": {
  "data": {
   "shadows": "numpy.testing.tempdir"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.temppath": {
  "data": {
   "shadows": "numpy.testing.temppath"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.test_gzip_load": {
  "data": {
   "lineno": 2412,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      2415
     ]
    },
    "numpy.lib.tests.test_io.gzip": {
     "line number": [
      2416,
      2422
     ]
    },
    "numpy.load": {
     "line number": [
      2423
     ]
    },
    "numpy.random.random": {
     "line number": [
      2413
     ]
    },
    "numpy.save": {
     "line number": [
      2418
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2423
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.test_gzip_loadtxt": {
  "data": {
   "lineno": 2426,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      2432
     ]
    },
    "numpy.lib.tests.test_io.gzip": {
     "line number": [
      2433
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      2441
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2444
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      2438
     ]
    },
    "open": {
     "line number": [
      2439
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.test_gzip_loadtxt_from_string": {
  "data": {
   "lineno": 2447,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      2448
     ]
    },
    "numpy.lib.tests.test_io.gzip": {
     "line number": [
      2449,
      2454
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      2455
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      2455
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.test_load_refcount": {
  "data": {
   "lineno": 2485,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      2490
     ]
    },
    "numpy.array": {
     "line number": [
      2501
     ]
    },
    "numpy.lib.tests.test_io.TextIO": {
     "line number": [
      2500
     ]
    },
    "numpy.lib.tests.test_io.pytest": {
     "line number": [
      2485
     ]
    },
    "numpy.load": {
     "line number": [
      2495
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      2500
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2501
     ]
    },
    "numpy.savez": {
     "line number": [
      2491
     ]
    },
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      2485
     ]
    },
    "numpy.testing.assert_no_gc_cycles": {
     "line number": [
      2494,
      2499
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.test_npzfile_dict": {
  "data": {
   "lineno": 2458,
   "symbols_in_volume": {
    "io.BytesIO": {
     "line number": [
      2459
     ]
    },
    "len": {
     "line number": [
      2477
     ]
    },
    "numpy.load": {
     "line number": [
      2466
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      2475
     ]
    },
    "numpy.savez": {
     "line number": [
      2463
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      2468,
      2469,
      2470,
      2471,
      2474,
      2477,
      2480,
      2482
     ]
    },
    "numpy.zeros": {
     "line number": [
      2460,
      2461
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_io.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_io.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_mixins": {
  "data": {
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      91
     ]
    },
    "numpy.lib.tests.test_mixins.operator": {
     "line number": [
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      90,
      93,
      94,
      95,
      96,
      97
     ]
    },
    "numpy.lib.tests.test_mixins.sys": {
     "line number": [
      11
     ]
    },
    "pow": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.tests.test_mixins.ArrayLike": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "numpy.lib.mixins.NDArrayOperatorsMixin": {
     "line number": [
      17
     ]
    },
    "numpy.lib.tests.test_mixins.numbers": {
     "line number": [
      23
     ]
    },
    "numpy.ndarray": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_mixins.ArrayLike.__array_ufunc__": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      33
     ]
    },
    "getattr": {
     "line number": [
      42
     ]
    },
    "isinstance": {
     "line number": [
      32,
      36,
      40
     ]
    },
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      32,
      36,
      40
     ]
    },
    "tuple": {
     "line number": [
      36,
      39,
      44,
      46
     ]
    },
    "type": {
     "line number": [
      44,
      46,
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.ArrayLike.__init__": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.ArrayLike.__repr__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "type": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.PY2": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "object": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_array_like_add": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "check": {
     "line number": [
      108,
      109,
      111,
      112,
      114,
      115,
      117,
      118
     ]
    },
    "numpy.array": {
     "line number": [
      111,
      112,
      114,
      115,
      117,
      117,
      118,
      118
     ]
    },
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      108,
      109,
      111,
      112,
      114,
      115,
      117,
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_array_like_add.check": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      106
     ]
    },
    "numpy.lib.tests.test_mixins._assert_equal_type_and_value": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_forward_binary_methods": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      187
     ]
    },
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      188
     ]
    },
    "numpy.lib.tests.test_mixins._ALL_BINARY_OPERATORS": {
     "line number": [
      189
     ]
    },
    "numpy.lib.tests.test_mixins._assert_equal_type_and_value": {
     "line number": [
      193
     ]
    },
    "numpy.lib.tests.test_mixins.wrap_array_like": {
     "line number": [
      190
     ]
    },
    "op": {
     "line number": [
      189,
      190,
      191,
      192
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_inplace": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      121,
      123,
      125,
      127
     ]
    },
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      121,
      123,
      126,
      127
     ]
    },
    "numpy.lib.tests.test_mixins._assert_equal_type_and_value": {
     "line number": [
      123,
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_matmul": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      203
     ]
    },
    "numpy.float64": {
     "line number": [
      203,
      205
     ]
    },
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      204,
      205
     ]
    },
    "numpy.lib.tests.test_mixins.PY2": {
     "line number": [
      207
     ]
    },
    "numpy.lib.tests.test_mixins._assert_equal_type_and_value": {
     "line number": [
      206,
      208,
      210
     ]
    },
    "numpy.lib.tests.test_mixins.operator": {
     "line number": [
      209,
      211
     ]
    },
    "numpy.matmul": {
     "line number": [
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_object": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      170,
      172,
      174
     ]
    },
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      168
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      170,
      172,
      174
     ]
    },
    "object": {
     "line number": [
      169
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_opt_out": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "OptOut": {
     "line number": [
      142
     ]
    },
    "TypeError": {
     "line number": [
      149,
      152,
      154
     ]
    },
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      141
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      145,
      146
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      149,
      152,
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_opt_out.OptOut": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "object": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_opt_out.OptOut.__add__": {
  "data": {
   "lineno": 135
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_opt_out.OptOut.__radd__": {
  "data": {
   "lineno": 138
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_reflected_binary_methods": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      198
     ]
    },
    "numpy.lib.tests.test_mixins._ALL_BINARY_OPERATORS": {
     "line number": [
      196
     ]
    },
    "numpy.lib.tests.test_mixins._assert_equal_type_and_value": {
     "line number": [
      200
     ]
    },
    "numpy.lib.tests.test_mixins.wrap_array_like": {
     "line number": [
      197
     ]
    },
    "op": {
     "line number": [
      196,
      197,
      198,
      199
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_subclass": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "SubArrayLike": {
     "line number": [
      163
     ]
    },
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      162
     ]
    },
    "numpy.lib.tests.test_mixins._assert_equal_type_and_value": {
     "line number": [
      164,
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_subclass.SubArrayLike": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_ufunc_at": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      214,
      215
     ]
    },
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      214,
      216
     ]
    },
    "numpy.lib.tests.test_mixins._assert_equal_type_and_value": {
     "line number": [
      216
     ]
    },
    "numpy.negative.at": {
     "line number": [
      215
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_ufunc_two_outputs": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      224
     ]
    },
    "numpy.frexp": {
     "line number": [
      219,
      222,
      224
     ]
    },
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      220,
      220,
      222,
      224
     ]
    },
    "numpy.lib.tests.test_mixins._assert_equal_type_and_value": {
     "line number": [
      221,
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_unary_methods": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      182
     ]
    },
    "numpy.array": {
     "line number": [
      178
     ]
    },
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      179,
      184
     ]
    },
    "numpy.lib.tests.test_mixins._assert_equal_type_and_value": {
     "line number": [
      184
     ]
    },
    "numpy.lib.tests.test_mixins.operator": {
     "line number": [
      180,
      181,
      183
     ]
    },
    "op": {
     "line number": [
      184,
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins._ALL_BINARY_OPERATORS": {
  "data": {
   "lineno": 77
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_mixins._assert_equal_type_and_value": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      73,
      74
     ]
    },
    "isinstance": {
     "line number": [
      67
     ]
    },
    "len": {
     "line number": [
      68,
      68
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      66,
      68,
      72,
      73
     ]
    },
    "tuple": {
     "line number": [
      67
     ]
    },
    "type": {
     "line number": [
      66,
      66
     ]
    },
    "zip": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_mixins.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_mixins.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_mixins.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_mixins.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_mixins.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_mixins.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_mixins.numbers": {
  "data": {
   "shadows": "numbers"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_mixins.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_mixins.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_mixins.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_mixins.wrap_array_like": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "numpy.lib.tests.test_mixins.ArrayLike": {
     "line number": [
      60,
      62
     ]
    },
    "tuple": {
     "line number": [
      59,
      60
     ]
    },
    "type": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      13,
      20,
      21,
      22,
      23,
      26,
      32
     ]
    },
    "numpy.nan": {
     "line number": [
      13,
      13,
      14,
      15,
      15,
      15,
      15,
      16,
      16,
      16
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "object": {
     "line number": [
      309
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_char": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      354,
      357,
      361,
      365
     ]
    },
    "numpy.ComplexWarning": {
     "line number": [
      359
     ]
    },
    "numpy.eye": {
     "line number": [
      352
     ]
    },
    "numpy.nanstd": {
     "line number": [
      357
     ]
    },
    "numpy.nanvar": {
     "line number": [
      357
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      362,
      366
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      356
     ]
    },
    "rf": {
     "line number": [
      354,
      360,
      364
     ]
    },
    "zip": {
     "line number": [
      354
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_dtype": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      337,
      340,
      344,
      348
     ]
    },
    "numpy.ComplexWarning": {
     "line number": [
      342
     ]
    },
    "numpy.dtype": {
     "line number": [
      343,
      344,
      347,
      348
     ]
    },
    "numpy.eye": {
     "line number": [
      335
     ]
    },
    "numpy.nanstd": {
     "line number": [
      340
     ]
    },
    "numpy.nanvar": {
     "line number": [
      340
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      345,
      349
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      339
     ]
    },
    "rf": {
     "line number": [
      337,
      343,
      347
     ]
    },
    "zip": {
     "line number": [
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_input": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      370,
      374,
      378
     ]
    },
    "numpy.eye": {
     "line number": [
      372
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      375,
      379
     ]
    },
    "rf": {
     "line number": [
      370,
      373,
      377
     ]
    },
    "zip": {
     "line number": [
      370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_keepdims": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      319,
      322
     ]
    },
    "numpy.eye": {
     "line number": [
      318
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      323
     ]
    },
    "rf": {
     "line number": [
      319,
      321
     ]
    },
    "zip": {
     "line number": [
      319
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_mutation": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "f": {
     "line number": [
      313,
      314
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      312,
      315
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      315
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_out": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      327,
      330
     ]
    },
    "numpy.eye": {
     "line number": [
      326
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      331,
      332
     ]
    },
    "numpy.zeros": {
     "line number": [
      328
     ]
    },
    "rf": {
     "line number": [
      327,
      329
     ]
    },
    "zip": {
     "line number": [
      327
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_result_values": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      382,
      384
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      384
     ]
    },
    "numpy.lib.tests.test_nanfunctions._rdat": {
     "line number": [
      383
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      385
     ]
    },
    "rf": {
     "line number": [
      382,
      383
     ]
    },
    "zip": {
     "line number": [
      382
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_scalar": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": {
    "f": {
     "line number": [
      388,
      389
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      389
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_subclass": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": {
    "f": {
     "line number": [
      399,
      400,
      401,
      404,
      405,
      408,
      409
     ]
    },
    "isinstance": {
     "line number": [
      402,
      406,
      410
     ]
    },
    "numpy.eye": {
     "line number": [
      397
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      402,
      403,
      406,
      407,
      410,
      411
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_subclass.MyNDArray": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      392
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": {
    "numpy.nanargmax": {
     "line number": [
      174
     ]
    },
    "numpy.nanargmin": {
     "line number": [
      174
     ]
    },
    "object": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_allnans": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      200,
      201
     ]
    },
    "f": {
     "line number": [
      198,
      200,
      201
     ]
    },
    "numpy.array": {
     "line number": [
      197
     ]
    },
    "numpy.nan": {
     "line number": [
      197,
      201
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      200,
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_empty": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      207
     ]
    },
    "f": {
     "line number": [
      205,
      207,
      209
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      210
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      207
     ]
    },
    "numpy.zeros": {
     "line number": [
      204,
      210
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_mutation": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "f": {
     "line number": [
      179,
      180
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      178,
      181
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_result_values": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      187
     ]
    },
    "f": {
     "line number": [
      184,
      188
     ]
    },
    "fcmp": {
     "line number": [
      193
     ]
    },
    "numpy.equal": {
     "line number": [
      194
     ]
    },
    "numpy.greater": {
     "line number": [
      184
     ]
    },
    "numpy.isnan": {
     "line number": [
      192
     ]
    },
    "numpy.less": {
     "line number": [
      184
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      185
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      192,
      193,
      194
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      186
     ]
    },
    "zip": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_scalar": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": {
    "f": {
     "line number": [
      213,
      214
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      214
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_subclass": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "f": {
     "line number": [
      223,
      224,
      227,
      230
     ]
    },
    "isinstance": {
     "line number": [
      225,
      228
     ]
    },
    "numpy.eye": {
     "line number": [
      222
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      225,
      226,
      228,
      229,
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_subclass.MyNDArray": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      217
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": {
    "numpy.cumprod": {
     "line number": [
      451
     ]
    },
    "numpy.cumsum": {
     "line number": [
      451
     ]
    },
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin": {
     "line number": [
      448
     ]
    },
    "numpy.nancumprod": {
     "line number": [
      450
     ]
    },
    "numpy.nancumsum": {
     "line number": [
      450
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_allnans": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": {
    "f": {
     "line number": [
      454,
      457,
      461,
      465
     ]
    },
    "numpy.array_equal": {
     "line number": [
      459,
      463
     ]
    },
    "numpy.nan": {
     "line number": [
      457,
      461
     ]
    },
    "numpy.ones": {
     "line number": [
      458,
      462
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      459,
      463
     ]
    },
    "numpy.testing.assert_no_warnings": {
     "line number": [
      456
     ]
    },
    "zip": {
     "line number": [
      454
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_empty": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": {
    "f": {
     "line number": [
      468,
      471,
      474,
      477
     ]
    },
    "numpy.ones": {
     "line number": [
      470
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      472,
      475,
      478
     ]
    },
    "numpy.zeros": {
     "line number": [
      469,
      476
     ]
    },
    "zip": {
     "line number": [
      468
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_keepdims": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": {
    "f": {
     "line number": [
      481,
      484,
      488,
      493,
      496
     ]
    },
    "g": {
     "line number": [
      485
     ]
    },
    "numpy.arange": {
     "line number": [
      495
     ]
    },
    "numpy.eye": {
     "line number": [
      482
     ]
    },
    "numpy.nan": {
     "line number": [
      492
     ]
    },
    "numpy.ones": {
     "line number": [
      489
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      491
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      486
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      494,
      497
     ]
    },
    "zip": {
     "line number": [
      481
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_out": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      510,
      514
     ]
    },
    "numpy.eye": {
     "line number": [
      509,
      511
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      515,
      516
     ]
    },
    "rf": {
     "line number": [
      510,
      513
     ]
    },
    "zip": {
     "line number": [
      510
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_result_values": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": {
    "numpy.cumprod": {
     "line number": [
      501
     ]
    },
    "numpy.cumsum": {
     "line number": [
      504
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      502,
      505
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat_ones": {
     "line number": [
      501
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat_zeros": {
     "line number": [
      504
     ]
    },
    "numpy.nancumprod": {
     "line number": [
      502
     ]
    },
    "numpy.nancumsum": {
     "line number": [
      505
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      503,
      506
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      239
     ]
    },
    "numpy.int16": {
     "line number": [
      236
     ]
    },
    "numpy.int32": {
     "line number": [
      236
     ]
    },
    "numpy.int64": {
     "line number": [
      236
     ]
    },
    "numpy.int8": {
     "line number": [
      236
     ]
    },
    "numpy.uint16": {
     "line number": [
      237
     ]
    },
    "numpy.uint32": {
     "line number": [
      237
     ]
    },
    "numpy.uint64": {
     "line number": [
      237
     ]
    },
    "numpy.uint8": {
     "line number": [
      236
     ]
    },
    "object": {
     "line number": [
      234
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays": {
  "data": {
   "lineno": 241
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanargmax": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "numpy.argmax": {
     "line number": [
      261
     ]
    },
    "numpy.nanargmax": {
     "line number": [
      263
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      263
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanargmin": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": {
    "numpy.argmin": {
     "line number": [
      256
     ]
    },
    "numpy.nanargmin": {
     "line number": [
      258
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      258
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nancumprod": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": {
    "numpy.cumprod": {
     "line number": [
      281
     ]
    },
    "numpy.nancumprod": {
     "line number": [
      283
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      283
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nancumsum": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": {
    "numpy.cumsum": {
     "line number": [
      276
     ]
    },
    "numpy.nancumsum": {
     "line number": [
      278
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmax": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "numpy.max": {
     "line number": [
      251
     ]
    },
    "numpy.nanmax": {
     "line number": [
      253
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmean": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": {
    "numpy.mean": {
     "line number": [
      286
     ]
    },
    "numpy.nanmean": {
     "line number": [
      288
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmin": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": {
    "numpy.min": {
     "line number": [
      246
     ]
    },
    "numpy.nanmin": {
     "line number": [
      248
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      248
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanprod": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": {
    "numpy.nanprod": {
     "line number": [
      273
     ]
    },
    "numpy.prod": {
     "line number": [
      271
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      273
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanstd": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": {
    "numpy.nanstd": {
     "line number": [
      302,
      306
     ]
    },
    "numpy.std": {
     "line number": [
      300,
      304
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      302,
      306
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nansum": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "numpy.nansum": {
     "line number": [
      268
     ]
    },
    "numpy.sum": {
     "line number": [
      266
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      268
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanvar": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "numpy.nanvar": {
     "line number": [
      293,
      297
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      293,
      297
     ]
    },
    "numpy.var": {
     "line number": [
      291,
      295
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": {
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin": {
     "line number": [
      519
     ]
    },
    "numpy.mean": {
     "line number": [
      522
     ]
    },
    "numpy.nanmean": {
     "line number": [
      521
     ]
    },
    "numpy.nanstd": {
     "line number": [
      521
     ]
    },
    "numpy.nanvar": {
     "line number": [
      521
     ]
    },
    "numpy.std": {
     "line number": [
      522
     ]
    },
    "numpy.var": {
     "line number": [
      522
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_allnans": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      569,
      573
     ]
    },
    "f": {
     "line number": [
      563,
      567,
      571
     ]
    },
    "issubclass": {
     "line number": [
      569,
      573
     ]
    },
    "len": {
     "line number": [
      568,
      572
     ]
    },
    "numpy.array": {
     "line number": [
      562
     ]
    },
    "numpy.isnan": {
     "line number": [
      567,
      571
     ]
    },
    "numpy.lib.tests.test_nanfunctions.warnings": {
     "line number": [
      565,
      566
     ]
    },
    "numpy.nan": {
     "line number": [
      562,
      571
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      567,
      568,
      569,
      571,
      572,
      573
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_ddof": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      538,
      541
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      541
     ]
    },
    "numpy.lib.tests.test_nanfunctions._rdat": {
     "line number": [
      540
     ]
    },
    "numpy.nanstd": {
     "line number": [
      536
     ]
    },
    "numpy.nanvar": {
     "line number": [
      536
     ]
    },
    "numpy.std": {
     "line number": [
      537
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      542
     ]
    },
    "numpy.var": {
     "line number": [
      537
     ]
    },
    "rf": {
     "line number": [
      538,
      540
     ]
    },
    "zip": {
     "line number": [
      538
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_ddof_too_big": {
  "data": {
   "lineno": 544,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      551
     ]
    },
    "any": {
     "line number": [
      556
     ]
    },
    "len": {
     "line number": [
      547,
      557,
      559
     ]
    },
    "nf": {
     "line number": [
      548,
      554
     ]
    },
    "numpy.ComplexWarning": {
     "line number": [
      552
     ]
    },
    "numpy.isnan": {
     "line number": [
      555
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      554
     ]
    },
    "numpy.lib.tests.test_nanfunctions._rdat": {
     "line number": [
      547
     ]
    },
    "numpy.nanstd": {
     "line number": [
      545
     ]
    },
    "numpy.nanvar": {
     "line number": [
      545
     ]
    },
    "numpy.std": {
     "line number": [
      546
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      557,
      559
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      555
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      550
     ]
    },
    "numpy.var": {
     "line number": [
      546
     ]
    },
    "range": {
     "line number": [
      549
     ]
    },
    "rf": {
     "line number": [
      548
     ]
    },
    "zip": {
     "line number": [
      548
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_dtype_error": {
  "data": {
   "lineno": 524,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      527
     ]
    },
    "f": {
     "line number": [
      525,
      527
     ]
    },
    "numpy.bool_": {
     "line number": [
      526
     ]
    },
    "numpy.int_": {
     "line number": [
      526
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      527
     ]
    },
    "numpy.object_": {
     "line number": [
      526
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      527
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_empty": {
  "data": {
   "lineno": 575,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      583
     ]
    },
    "f": {
     "line number": [
      577,
      581,
      587
     ]
    },
    "issubclass": {
     "line number": [
      583
     ]
    },
    "len": {
     "line number": [
      582,
      588
     ]
    },
    "numpy.isnan": {
     "line number": [
      581
     ]
    },
    "numpy.lib.tests.test_nanfunctions.warnings": {
     "line number": [
      579,
      580,
      585,
      586
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      581,
      582,
      583,
      588
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      587
     ]
    },
    "numpy.zeros": {
     "line number": [
      576,
      587
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_out_dtype_error": {
  "data": {
   "lineno": 529,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      533
     ]
    },
    "f": {
     "line number": [
      530,
      533
     ]
    },
    "numpy.bool_": {
     "line number": [
      531
     ]
    },
    "numpy.empty": {
     "line number": [
      532
     ]
    },
    "numpy.int_": {
     "line number": [
      531
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      532,
      533
     ]
    },
    "numpy.object_": {
     "line number": [
      531
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      533
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median": {
  "data": {
   "lineno": 591,
   "symbols_in_volume": {
    "object": {
     "line number": [
      591
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_allnans": {
  "data": {
   "lineno": 665,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      669
     ]
    },
    "len": {
     "line number": [
      673,
      675,
      679,
      681
     ]
    },
    "numpy.array": {
     "line number": [
      666
     ]
    },
    "numpy.isnan": {
     "line number": [
      671,
      677
     ]
    },
    "numpy.nan": {
     "line number": [
      666,
      677
     ]
    },
    "numpy.nanmedian": {
     "line number": [
      671,
      677
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      671,
      673,
      675,
      677,
      679,
      681
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      668
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_empty": {
  "data": {
   "lineno": 683,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      690
     ]
    },
    "issubclass": {
     "line number": [
      690
     ]
    },
    "len": {
     "line number": [
      689,
      695
     ]
    },
    "numpy.isnan": {
     "line number": [
      688
     ]
    },
    "numpy.lib.tests.test_nanfunctions.warnings": {
     "line number": [
      686,
      687,
      692,
      693
     ]
    },
    "numpy.nanmedian": {
     "line number": [
      688,
      694
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      688,
      689,
      690,
      695
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      694
     ]
    },
    "numpy.zeros": {
     "line number": [
      684,
      694
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_extended_axis_invalid": {
  "data": {
   "lineno": 700,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      706
     ]
    },
    "numpy.AxisError": {
     "line number": [
      702,
      703,
      704,
      705
     ]
    },
    "numpy.nanmedian": {
     "line number": [
      702,
      703,
      704,
      705,
      706
     ]
    },
    "numpy.ones": {
     "line number": [
      701
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      702,
      703,
      704,
      705,
      706
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_float_special": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      710
     ]
    },
    "numpy.array": {
     "line number": [
      712,
      718,
      725,
      728,
      742,
      748
     ]
    },
    "numpy.float32": {
     "line number": [
      731
     ]
    },
    "numpy.inf": {
     "line number": [
      711,
      711
     ]
    },
    "numpy.nan": {
     "line number": [
      712,
      712,
      712,
      713,
      714,
      718,
      718,
      719,
      719,
      721,
      721,
      729,
      729,
      730,
      730,
      742,
      746,
      748,
      752
     ]
    },
    "numpy.nanmedian": {
     "line number": [
      713,
      714,
      715,
      720,
      721,
      722,
      726,
      733,
      734,
      736,
      737,
      738,
      743,
      744,
      745,
      749,
      750,
      751
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      713,
      714,
      715,
      720,
      721,
      722,
      726,
      733,
      734,
      736,
      737,
      738,
      743,
      744,
      745,
      749,
      750,
      751
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      709
     ]
    },
    "range": {
     "line number": [
      740,
      741
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_keepdims": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      612
     ]
    },
    "numpy.array": {
     "line number": [
      608
     ]
    },
    "numpy.eye": {
     "line number": [
      600
     ]
    },
    "numpy.intp": {
     "line number": [
      609
     ]
    },
    "numpy.median": {
     "line number": [
      602
     ]
    },
    "numpy.nan": {
     "line number": [
      610
     ]
    },
    "numpy.nanmedian": {
     "line number": [
      603,
      613,
      615,
      617,
      619,
      621,
      623
     ]
    },
    "numpy.ones": {
     "line number": [
      606
     ]
    },
    "numpy.random.random": {
     "line number": [
      608
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      604
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      614,
      616,
      618,
      620,
      622,
      624
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      611
     ]
    },
    "tuple": {
     "line number": [
      610
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_mutation": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": {
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      595,
      597
     ]
    },
    "numpy.nanmedian": {
     "line number": [
      596
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      597
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_out": {
  "data": {
   "lineno": 626,
   "symbols_in_volume": {
    "numpy.insert": {
     "line number": [
      628
     ]
    },
    "numpy.median": {
     "line number": [
      630,
      636
     ]
    },
    "numpy.nan": {
     "line number": [
      628
     ]
    },
    "numpy.nanmedian": {
     "line number": [
      631,
      637,
      640
     ]
    },
    "numpy.random.rand": {
     "line number": [
      627
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      632,
      633,
      638,
      639,
      641,
      642
     ]
    },
    "numpy.zeros": {
     "line number": [
      629,
      635
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_result_values": {
  "data": {
   "lineno": 660,
   "symbols_in_volume": {
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      662
     ]
    },
    "numpy.lib.tests.test_nanfunctions._rdat": {
     "line number": [
      661
     ]
    },
    "numpy.median": {
     "line number": [
      661
     ]
    },
    "numpy.nanmedian": {
     "line number": [
      662
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      663
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_scalar": {
  "data": {
   "lineno": 697,
   "symbols_in_volume": {
    "numpy.nanmedian": {
     "line number": [
      698
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      698
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_small_large": {
  "data": {
   "lineno": 644,
   "symbols_in_volume": {
    "numpy.compress": {
     "line number": [
      655
     ]
    },
    "numpy.isnan": {
     "line number": [
      655
     ]
    },
    "numpy.median": {
     "line number": [
      656
     ]
    },
    "numpy.nan": {
     "line number": [
      650
     ]
    },
    "numpy.nanmedian": {
     "line number": [
      658
     ]
    },
    "numpy.random.randint": {
     "line number": [
      649
     ]
    },
    "numpy.random.randn": {
     "line number": [
      647
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      658
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.max": {
     "line number": [
      41
     ]
    },
    "numpy.min": {
     "line number": [
      41
     ]
    },
    "numpy.nanmax": {
     "line number": [
      40
     ]
    },
    "numpy.nanmin": {
     "line number": [
      40
     ]
    },
    "object": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_allnans": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      94,
      100
     ]
    },
    "f": {
     "line number": [
      88,
      92,
      98
     ]
    },
    "issubclass": {
     "line number": [
      94,
      100
     ]
    },
    "len": {
     "line number": [
      93,
      99
     ]
    },
    "numpy.array": {
     "line number": [
      87
     ]
    },
    "numpy.isnan": {
     "line number": [
      92,
      98
     ]
    },
    "numpy.lib.tests.test_nanfunctions.warnings": {
     "line number": [
      90,
      91,
      96,
      97
     ]
    },
    "numpy.nan": {
     "line number": [
      87,
      98
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      92,
      93,
      94,
      98,
      99,
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_dtype_from_input": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      69,
      73,
      77
     ]
    },
    "numpy.eye": {
     "line number": [
      71
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      74,
      78
     ]
    },
    "rf": {
     "line number": [
      69,
      72,
      76
     ]
    },
    "zip": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_keepdims": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      55
     ]
    },
    "numpy.eye": {
     "line number": [
      51
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      56
     ]
    },
    "rf": {
     "line number": [
      54
     ]
    },
    "zip": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_masked": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "f": {
     "line number": [
      105,
      106,
      107
     ]
    },
    "numpy.isinf": {
     "line number": [
      110
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      103,
      107
     ]
    },
    "numpy.ma.fix_invalid": {
     "line number": [
      103
     ]
    },
    "numpy.nanmin": {
     "line number": [
      105
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      110
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      108,
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_mutation": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "f": {
     "line number": [
      47
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      45,
      48
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_object_array": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      169
     ]
    },
    "issubclass": {
     "line number": [
      169
     ]
    },
    "len": {
     "line number": [
      168
     ]
    },
    "list": {
     "line number": [
      167
     ]
    },
    "numpy.array": {
     "line number": [
      160
     ]
    },
    "numpy.lib.tests.test_nanfunctions.warnings": {
     "line number": [
      164,
      165
     ]
    },
    "numpy.nan": {
     "line number": [
      160,
      160,
      160,
      167
     ]
    },
    "numpy.nanmin": {
     "line number": [
      161,
      162,
      167
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      168,
      169
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      161,
      162,
      167
     ]
    },
    "object": {
     "line number": [
      160
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_out": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      60,
      63
     ]
    },
    "numpy.eye": {
     "line number": [
      59
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      64,
      65
     ]
    },
    "numpy.zeros": {
     "line number": [
      61
     ]
    },
    "rf": {
     "line number": [
      60,
      62
     ]
    },
    "zip": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_result_values": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "nf": {
     "line number": [
      81,
      83
     ]
    },
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      83
     ]
    },
    "numpy.lib.tests.test_nanfunctions._rdat": {
     "line number": [
      82
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      84
     ]
    },
    "rf": {
     "line number": [
      81,
      82
     ]
    },
    "zip": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_scalar": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "f": {
     "line number": [
      113,
      114
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_subclass": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      150
     ]
    },
    "f": {
     "line number": [
      123,
      124,
      127,
      130,
      135,
      138,
      145,
      154
     ]
    },
    "isinstance": {
     "line number": [
      125,
      128,
      139,
      146
     ]
    },
    "issubclass": {
     "line number": [
      150
     ]
    },
    "len": {
     "line number": [
      141,
      149,
      157
     ]
    },
    "numpy.any": {
     "line number": [
      140
     ]
    },
    "numpy.eye": {
     "line number": [
      122
     ]
    },
    "numpy.isnan": {
     "line number": [
      140,
      147,
      147,
      148
     ]
    },
    "numpy.lib.tests.test_nanfunctions.warnings": {
     "line number": [
      136,
      137,
      143,
      144,
      152,
      153
     ]
    },
    "numpy.nan": {
     "line number": [
      134,
      156
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      125,
      126,
      128,
      129,
      131,
      139,
      140,
      141,
      146,
      147,
      149,
      150,
      155,
      156,
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_subclass.MyNDArray": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile": {
  "data": {
   "lineno": 755,
   "symbols_in_volume": {
    "object": {
     "line number": [
      755
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_allnans": {
  "data": {
   "lineno": 819,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      829,
      836
     ]
    },
    "issubclass": {
     "line number": [
      829,
      836
     ]
    },
    "len": {
     "line number": [
      826,
      828,
      833,
      835
     ]
    },
    "numpy.array": {
     "line number": [
      820
     ]
    },
    "numpy.isnan": {
     "line number": [
      824,
      831
     ]
    },
    "numpy.lib.tests.test_nanfunctions.warnings": {
     "line number": [
      822,
      823
     ]
    },
    "numpy.nan": {
     "line number": [
      820,
      831
     ]
    },
    "numpy.nanpercentile": {
     "line number": [
      824,
      831
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      824,
      826,
      828,
      829,
      831,
      833,
      835,
      836
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_empty": {
  "data": {
   "lineno": 838,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      845
     ]
    },
    "issubclass": {
     "line number": [
      845
     ]
    },
    "len": {
     "line number": [
      844,
      850
     ]
    },
    "numpy.isnan": {
     "line number": [
      843
     ]
    },
    "numpy.lib.tests.test_nanfunctions.warnings": {
     "line number": [
      841,
      842,
      847,
      848
     ]
    },
    "numpy.nanpercentile": {
     "line number": [
      843,
      849
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      843,
      844,
      845,
      850
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      849
     ]
    },
    "numpy.zeros": {
     "line number": [
      839,
      849
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_extended_axis_invalid": {
  "data": {
   "lineno": 859,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      865
     ]
    },
    "numpy.AxisError": {
     "line number": [
      861,
      862,
      863,
      864
     ]
    },
    "numpy.nanpercentile": {
     "line number": [
      861,
      862,
      863,
      864,
      865
     ]
    },
    "numpy.ones": {
     "line number": [
      860
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      861,
      862,
      863,
      864,
      865
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_keepdims": {
  "data": {
   "lineno": 763,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      778
     ]
    },
    "numpy.array": {
     "line number": [
      774
     ]
    },
    "numpy.eye": {
     "line number": [
      764
     ]
    },
    "numpy.intp": {
     "line number": [
      775
     ]
    },
    "numpy.nan": {
     "line number": [
      776
     ]
    },
    "numpy.nanpercentile": {
     "line number": [
      768,
      779,
      781,
      783,
      785,
      787,
      789
     ]
    },
    "numpy.ones": {
     "line number": [
      772
     ]
    },
    "numpy.percentile": {
     "line number": [
      766
     ]
    },
    "numpy.random.random": {
     "line number": [
      774
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      770
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      780,
      782,
      784,
      786,
      788,
      790
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      777
     ]
    },
    "tuple": {
     "line number": [
      776
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_multiple_percentiles": {
  "data": {
   "lineno": 867,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      878
     ]
    },
    "numpy.nan": {
     "line number": [
      870
     ]
    },
    "numpy.nanpercentile": {
     "line number": [
      880,
      886,
      891
     ]
    },
    "numpy.ones": {
     "line number": [
      869,
      872,
      890
     ]
    },
    "numpy.percentile": {
     "line number": [
      879,
      884
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      882,
      888,
      891
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      877
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_mutation": {
  "data": {
   "lineno": 757,
   "symbols_in_volume": {
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      759,
      761
     ]
    },
    "numpy.nanpercentile": {
     "line number": [
      760
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      761
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_out": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": {
    "numpy.insert": {
     "line number": [
      794
     ]
    },
    "numpy.nan": {
     "line number": [
      794
     ]
    },
    "numpy.nanpercentile": {
     "line number": [
      797,
      803,
      806
     ]
    },
    "numpy.percentile": {
     "line number": [
      796,
      802
     ]
    },
    "numpy.random.rand": {
     "line number": [
      793
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      798,
      799,
      804,
      805,
      807,
      808
     ]
    },
    "numpy.zeros": {
     "line number": [
      795,
      801
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_result_values": {
  "data": {
   "lineno": 810,
   "symbols_in_volume": {
    "numpy.lib.tests.test_nanfunctions._ndat": {
     "line number": [
      812,
      816
     ]
    },
    "numpy.lib.tests.test_nanfunctions._rdat": {
     "line number": [
      811,
      815
     ]
    },
    "numpy.nanpercentile": {
     "line number": [
      812,
      816
     ]
    },
    "numpy.percentile": {
     "line number": [
      811,
      815
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      813,
      817
     ]
    },
    "numpy.transpose": {
     "line number": [
      815
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_scalar": {
  "data": {
   "lineno": 852,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      854
     ]
    },
    "numpy.isscalar": {
     "line number": [
      857
     ]
    },
    "numpy.nanpercentile": {
     "line number": [
      853,
      855
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      857
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      853,
      856
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile": {
  "data": {
   "lineno": 894,
   "symbols_in_volume": {
    "object": {
     "line number": [
      894
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_basic": {
  "data": {
   "lineno": 911,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      912
     ]
    },
    "numpy.nanquantile": {
     "line number": [
      913,
      914,
      915
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      913,
      914,
      915
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_no_p_overwrite": {
  "data": {
   "lineno": 917,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      921,
      926
     ]
    },
    "numpy.array": {
     "line number": [
      919
     ]
    },
    "numpy.nanquantile": {
     "line number": [
      921,
      926
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      922,
      927
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_regression": {
  "data": {
   "lineno": 897,
   "symbols_in_volume": {
    "float": {
     "line number": [
      898
     ]
    },
    "numpy.arange": {
     "line number": [
      898
     ]
    },
    "numpy.nan": {
     "line number": [
      899
     ]
    },
    "numpy.nanpercentile": {
     "line number": [
      901,
      903,
      905,
      907,
      909
     ]
    },
    "numpy.nanquantile": {
     "line number": [
      901,
      902,
      904,
      906,
      908
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      901,
      902,
      904,
      906,
      908
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": {
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin": {
     "line number": [
      414
     ]
    },
    "numpy.nanprod": {
     "line number": [
      416
     ]
    },
    "numpy.nansum": {
     "line number": [
      416
     ]
    },
    "numpy.prod": {
     "line number": [
      417
     ]
    },
    "numpy.sum": {
     "line number": [
      417
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd.test_allnans": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": {
    "len": {
     "line number": [
      425,
      429,
      432
     ]
    },
    "numpy.lib.tests.test_nanfunctions.warnings": {
     "line number": [
      421,
      422
     ]
    },
    "numpy.nan": {
     "line number": [
      423,
      427
     ]
    },
    "numpy.nansum": {
     "line number": [
      423,
      427,
      431
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      424,
      425,
      428,
      429,
      432
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd.test_empty": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": {
    "f": {
     "line number": [
      435,
      438,
      441,
      444
     ]
    },
    "numpy.nanprod": {
     "line number": [
      435
     ]
    },
    "numpy.nansum": {
     "line number": [
      435
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      439,
      442,
      445
     ]
    },
    "numpy.zeros": {
     "line number": [
      436
     ]
    },
    "zip": {
     "line number": [
      435
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_nanfunctions._ndat": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_nanfunctions._ndat_ones": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_nanfunctions._ndat_zeros": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_nanfunctions._rdat": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_nanfunctions.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_nanfunctions.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_nanfunctions.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_nanfunctions.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_nanfunctions.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_nanfunctions.assert_no_warnings": {
  "data": {
   "shadows": "numpy.testing.assert_no_warnings"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_nanfunctions.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_nanfunctions.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_nanfunctions.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_nanfunctions.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_nanfunctions.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_nanfunctions.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_packbits": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_packbits.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_packbits.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_packbits.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_packbits.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_packbits.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_packbits.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_packbits.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_packbits.test_packbits": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      17
     ]
    },
    "float": {
     "line number": [
      17
     ]
    },
    "numpy.array": {
     "line number": [
      12,
      15,
      17
     ]
    },
    "numpy.packbits": {
     "line number": [
      13,
      17
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      15
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      14
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      17
     ]
    },
    "numpy.uint8": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_packbits.test_packbits_empty": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      27
     ]
    },
    "numpy.packbits": {
     "line number": [
      28
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      29,
      30
     ]
    },
    "numpy.uint8": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_packbits.test_packbits_empty_with_axis": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      47
     ]
    },
    "numpy.empty": {
     "line number": [
      48
     ]
    },
    "numpy.packbits": {
     "line number": [
      49
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      50,
      51
     ]
    },
    "numpy.uint8": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_packbits.test_packbits_large": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      211
     ]
    },
    "float": {
     "line number": [
      211
     ]
    },
    "numpy.array": {
     "line number": [
      56,
      73,
      202,
      211
     ]
    },
    "numpy.iinfo": {
     "line number": [
      203,
      204
     ]
    },
    "numpy.packbits": {
     "line number": [
      74,
      89,
      95,
      113,
      153,
      171,
      208,
      211
     ]
    },
    "numpy.random.randint": {
     "line number": [
      203
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      84,
      86,
      90,
      97,
      115,
      155,
      173,
      209
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      75,
      96,
      114,
      154,
      172
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      211
     ]
    },
    "numpy.uint8": {
     "line number": [
      75,
      96,
      114,
      154,
      172
     ]
    },
    "numpy.unpackbits": {
     "line number": [
      86,
      209
     ]
    },
    "range": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_packbits.test_packbits_very_large": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      219
     ]
    },
    "numpy.ones": {
     "line number": [
      219
     ]
    },
    "numpy.packbits": {
     "line number": [
      220
     ]
    },
    "range": {
     "line number": [
      217
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_packbits.test_unpackbits": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      225,
      228
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      228
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      227
     ]
    },
    "numpy.uint8": {
     "line number": [
      225,
      227
     ]
    },
    "numpy.unpackbits": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_packbits.test_unpackbits_empty": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      234,
      237
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      237
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      236
     ]
    },
    "numpy.uint8": {
     "line number": [
      234,
      236
     ]
    },
    "numpy.unpackbits": {
     "line number": [
      235
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_packbits.test_unpackbits_empty_with_axis": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      253
     ]
    },
    "numpy.empty": {
     "line number": [
      254
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      256,
      257
     ]
    },
    "numpy.uint8": {
     "line number": [
      254,
      256
     ]
    },
    "numpy.unpackbits": {
     "line number": [
      255
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_packbits.test_unpackbits_large": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      262
     ]
    },
    "numpy.packbits": {
     "line number": [
      263,
      264,
      266,
      268
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      263,
      264,
      266,
      268
     ]
    },
    "numpy.tile": {
     "line number": [
      265
     ]
    },
    "numpy.uint8": {
     "line number": [
      262
     ]
    },
    "numpy.unpackbits": {
     "line number": [
      263,
      264,
      266,
      268
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_polynomial.Decimal": {
  "data": {
   "shadows": "decimal.Decimal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "object": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_complex": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": {
    "numpy.poly1d": {
     "line number": [
      207
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      209,
      211
     ]
    },
    "p": {
     "line number": [
      207
     ]
    },
    "p.deriv": {
     "line number": [
      210
     ]
    },
    "p.integ": {
     "line number": [
      208
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_integ_coeffs": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": {
    "numpy.poly1d": {
     "line number": [
      214
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      216
     ]
    },
    "p": {
     "line number": [
      214
     ]
    },
    "p.integ": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_objects": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "decimal.Decimal": {
     "line number": [
      193,
      193,
      193,
      194,
      195,
      197,
      199,
      200,
      202,
      202,
      203,
      203,
      204,
      204
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      201
     ]
    },
    "numpy.object_": {
     "line number": [
      201
     ]
    },
    "numpy.poly": {
     "line number": [
      202,
      203
     ]
    },
    "numpy.poly1d": {
     "line number": [
      193
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      195,
      197,
      199,
      200,
      201
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      203
     ]
    },
    "p": {
     "line number": [
      193,
      194,
      202
     ]
    },
    "p.deriv": {
     "line number": [
      196
     ]
    },
    "p.integ": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_poly": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "numpy.concatenate": {
     "line number": [
      100
     ]
    },
    "numpy.conjugate": {
     "line number": [
      100
     ]
    },
    "numpy.iscomplexobj": {
     "line number": [
      96
     ]
    },
    "numpy.isrealobj": {
     "line number": [
      87,
      88,
      90,
      91,
      92,
      93,
      94,
      100
     ]
    },
    "numpy.poly": {
     "line number": [
      79,
      84,
      87,
      88,
      90,
      91,
      92,
      93,
      94,
      96,
      100
     ]
    },
    "numpy.random.randn": {
     "line number": [
      99,
      99
     ]
    },
    "numpy.random.seed": {
     "line number": [
      98
     ]
    },
    "numpy.sqrt": {
     "line number": [
      79,
      79
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      87,
      88,
      90,
      91,
      92,
      93,
      94,
      96,
      100
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      79,
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_math": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.poly1d": {
     "line number": [
      43,
      44,
      45,
      45,
      46,
      47,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      59,
      60,
      60
     ]
    },
    "numpy.polydiv": {
     "line number": [
      59
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      45,
      46,
      47,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59
     ]
    },
    "p": {
     "line number": [
      43,
      45,
      49,
      51,
      52,
      53,
      54,
      55,
      56
     ]
    },
    "p.deriv": {
     "line number": [
      57,
      58
     ]
    },
    "p.integ": {
     "line number": [
      46,
      47
     ]
    },
    "q": {
     "line number": [
      44,
      45,
      50,
      51,
      52,
      53,
      55,
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_misc": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "len": {
     "line number": [
      65
     ]
    },
    "numpy.array": {
     "line number": [
      64
     ]
    },
    "numpy.asarray": {
     "line number": [
      64
     ]
    },
    "numpy.poly1d": {
     "line number": [
      63
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      64,
      65,
      66
     ]
    },
    "p": {
     "line number": [
      63,
      64,
      65,
      66,
      66,
      66,
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_resolution": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "numpy.poly1d": {
     "line number": [
      34,
      35
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36,
      37,
      38,
      39
     ]
    },
    "p": {
     "line number": [
      36,
      37
     ]
    },
    "q": {
     "line number": [
      38,
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_str_and_repr": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "numpy.poly1d": {
     "line number": [
      12,
      18,
      24,
      29
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      13,
      14,
      19,
      20,
      25,
      29
     ]
    },
    "repr": {
     "line number": [
      13,
      19
     ]
    },
    "str": {
     "line number": [
      14,
      20,
      25,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_variable_arg": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "numpy.poly1d": {
     "line number": [
      69,
      73
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      70,
      74
     ]
    },
    "q": {
     "line number": [
      69,
      70,
      73,
      74
     ]
    },
    "str": {
     "line number": [
      70,
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_poly_coeffs_immutable": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      256
     ]
    },
    "numpy.poly1d": {
     "line number": [
      251
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      258,
      261
     ]
    },
    "p": {
     "line number": [
      251
     ]
    },
    "p.coeffs": {
     "line number": [
      255,
      258,
      260,
      261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_poly_eq": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "numpy.poly1d": {
     "line number": [
      233,
      234
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      235,
      236,
      237,
      238,
      239
     ]
    },
    "p": {
     "line number": [
      233,
      235,
      236,
      237,
      237,
      238,
      239
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_poly_int_overflow": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      229
     ]
    },
    "numpy.diag": {
     "line number": [
      230
     ]
    },
    "numpy.poly": {
     "line number": [
      230,
      230
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      230
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_polydiv": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": {
    "numpy.complex128": {
     "line number": [
      245,
      246
     ]
    },
    "numpy.poly1d": {
     "line number": [
      242,
      243
     ]
    },
    "numpy.polydiv": {
     "line number": [
      244
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      245,
      246,
      247
     ]
    },
    "q": {
     "line number": [
      244,
      247
     ]
    },
    "q.coeffs.dtype": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_polyfit": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      127
     ]
    },
    "numpy.arange": {
     "line number": [
      122
     ]
    },
    "numpy.array": {
     "line number": [
      118,
      162
     ]
    },
    "numpy.concatenate": {
     "line number": [
      158,
      159
     ]
    },
    "numpy.full": {
     "line number": [
      181
     ]
    },
    "numpy.linspace": {
     "line number": [
      119
     ]
    },
    "numpy.newaxis": {
     "line number": [
      154,
      155,
      162
     ]
    },
    "numpy.ones": {
     "line number": [
      176
     ]
    },
    "numpy.polyfit": {
     "line number": [
      127,
      131,
      139,
      146,
      156,
      160,
      162,
      171,
      176,
      182,
      187
     ]
    },
    "numpy.polyval": {
     "line number": [
      120
     ]
    },
    "numpy.random.normal": {
     "line number": [
      170
     ]
    },
    "numpy.random.seed": {
     "line number": [
      169
     ]
    },
    "numpy.sqrt": {
     "line number": [
      174,
      179,
      184,
      189
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      173,
      174,
      178,
      183,
      184,
      188
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      133,
      137,
      140,
      144,
      147,
      151,
      156,
      160,
      163,
      164,
      165,
      166,
      179,
      189
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      127
     ]
    },
    "numpy.zeros": {
     "line number": [
      171,
      176,
      182,
      187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_roots": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "numpy.roots": {
     "line number": [
      103
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_str_leading_zeros": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "numpy.poly1d": {
     "line number": [
      106,
      112
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      108,
      115
     ]
    },
    "p": {
     "line number": [
      106,
      107,
      108,
      112,
      113,
      114,
      115
     ]
    },
    "str": {
     "line number": [
      108,
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.TestPolynomial.test_zero_dims": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      222
     ]
    },
    "numpy.poly": {
     "line number": [
      221
     ]
    },
    "numpy.zeros": {
     "line number": [
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_polynomial.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_polynomial.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_polynomial.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_polynomial.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_polynomial.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_polynomial.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_polynomial.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_polynomial.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_polynomial.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_polynomial.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_polynomial.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions": {
  "data": {
   "symbols_in_volume": {
    "numpy.lib.recfunctions.get_names": {
     "line number": [
      15
     ]
    },
    "numpy.lib.recfunctions.get_names_flat": {
     "line number": [
      16
     ]
    },
    "numpy.lib.recfunctions.zip_descr": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.tests.test_recfunctions.MaskedRecords": {
  "data": {
   "shadows": "numpy.ma.mrecords.MaskedRecords"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.TestAppendFields": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "object": {
     "line number": [
      436
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_recfunctions.TestAppendFields.setup": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": {
    "float": {
     "line number": [
      443,
      445
     ]
    },
    "int": {
     "line number": [
      445,
      445
     ]
    },
    "numpy.array": {
     "line number": [
      440,
      441,
      442,
      444
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_double": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": {
    "int": {
     "line number": [
      463,
      463,
      463
     ]
    },
    "numpy.lib.recfunctions.append_fields": {
     "line number": [
      460
     ]
    },
    "numpy.ma.array": {
     "line number": [
      461
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_on_flex": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": {
    "float": {
     "line number": [
      472
     ]
    },
    "int": {
     "line number": [
      472
     ]
    },
    "numpy.lib.recfunctions.append_fields": {
     "line number": [
      469
     ]
    },
    "numpy.ma.array": {
     "line number": [
      470
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      473
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_on_nested": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": {
    "float": {
     "line number": [
      485
     ]
    },
    "int": {
     "line number": [
      484,
      485,
      486
     ]
    },
    "numpy.lib.recfunctions.append_fields": {
     "line number": [
      478
     ]
    },
    "numpy.ma.array": {
     "line number": [
      479
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      487
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_single": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": {
    "int": {
     "line number": [
      454,
      454
     ]
    },
    "numpy.lib.recfunctions.append_fields": {
     "line number": [
      451
     ]
    },
    "numpy.ma.array": {
     "line number": [
      452
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      455
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestAppendFieldsObj": {
  "data": {
   "lineno": 892,
   "symbols_in_volume": {
    "object": {
     "line number": [
      892
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_recfunctions.TestAppendFieldsObj.setup": {
  "data": {
   "lineno": 898,
   "symbols_in_volume": {
    "datetime.date": {
     "line number": [
      900
     ]
    },
    "dict": {
     "line number": [
      900
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestAppendFieldsObj.test_append_to_objects": {
  "data": {
   "lineno": 902,
   "symbols_in_volume": {
    "float": {
     "line number": [
      906,
      910
     ]
    },
    "int": {
     "line number": [
      907,
      910
     ]
    },
    "numpy.array": {
     "line number": [
      905,
      907,
      909
     ]
    },
    "numpy.lib.recfunctions.append_fields": {
     "line number": [
      908
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      911
     ]
    },
    "object": {
     "line number": [
      906,
      910
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy": {
  "data": {
   "lineno": 661,
   "symbols_in_volume": {
    "object": {
     "line number": [
      661
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.setup": {
  "data": {
   "lineno": 662,
   "symbols_in_volume": {
    "int": {
     "line number": [
      665,
      665,
      665,
      668,
      668,
      668
     ]
    },
    "list": {
     "line number": [
      663,
      666
     ]
    },
    "numpy.arange": {
     "line number": [
      663,
      663,
      664,
      666,
      666,
      667
     ]
    },
    "numpy.array": {
     "line number": [
      663,
      666
     ]
    },
    "zip": {
     "line number": [
      663,
      666
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.test_different_field_order": {
  "data": {
   "lineno": 757,
   "symbols_in_volume": {
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      762
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      763
     ]
    },
    "numpy.ones": {
     "line number": [
      760
     ]
    },
    "numpy.zeros": {
     "line number": [
      759
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.test_duplicate_keys": {
  "data": {
   "lineno": 765,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      768
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      768
     ]
    },
    "numpy.ones": {
     "line number": [
      767
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      768
     ]
    },
    "numpy.zeros": {
     "line number": [
      766
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.test_inner_join": {
  "data": {
   "lineno": 670,
   "symbols_in_volume": {
    "int": {
     "line number": [
      678,
      678,
      678,
      679,
      679
     ]
    },
    "numpy.array": {
     "line number": [
      675
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      674
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      680
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.test_join": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": {
    "int": {
     "line number": [
      699,
      699,
      700,
      700
     ]
    },
    "numpy.array": {
     "line number": [
      696
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      695
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.test_join_subdtype": {
  "data": {
   "lineno": 702,
   "symbols_in_volume": {
    "int": {
     "line number": [
      706,
      708
     ]
    },
    "numpy.array": {
     "line number": [
      705,
      707,
      707
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      709
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      710
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      710
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.test_leftouter_join": {
  "data": {
   "lineno": 740,
   "symbols_in_volume": {
    "int": {
     "line number": [
      754,
      754,
      754,
      754
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      743
     ]
    },
    "numpy.ma.array": {
     "line number": [
      744
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      755
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.test_outer_join": {
  "data": {
   "lineno": 712,
   "symbols_in_volume": {
    "int": {
     "line number": [
      736,
      736,
      737,
      737
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      715
     ]
    },
    "numpy.ma.array": {
     "line number": [
      716
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      738
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.test_padded_dtype": {
  "data": {
   "lineno": 810,
   "symbols_in_volume": {
    "len": {
     "line number": [
      813
     ]
    },
    "numpy.array": {
     "line number": [
      815,
      816
     ]
    },
    "numpy.dtype": {
     "line number": [
      811,
      820
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      817
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      824
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      813
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.test_same_name_different_dtypes": {
  "data": {
   "lineno": 783,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      790,
      791
     ]
    },
    "numpy.dtype": {
     "line number": [
      785,
      786,
      787
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      792
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      794
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.test_same_name_different_dtypes_key": {
  "data": {
   "lineno": 770,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      777,
      778
     ]
    },
    "numpy.dtype": {
     "line number": [
      772,
      773,
      774
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      779
     ]
    },
    "numpy.lib.tests.test_recfunctions.pytest": {
     "line number": [
      770
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      781
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy.test_subarray_key": {
  "data": {
   "lineno": 796,
   "symbols_in_volume": {
    "int": {
     "line number": [
      797,
      800,
      803
     ]
    },
    "numpy.array": {
     "line number": [
      798,
      801,
      804
     ]
    },
    "numpy.dtype": {
     "line number": [
      797,
      800,
      803
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      806
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      807,
      808
     ]
    },
    "numpy.pi": {
     "line number": [
      798,
      804
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy2": {
  "data": {
   "lineno": 827,
   "symbols_in_volume": {
    "object": {
     "line number": [
      827
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy2.setup": {
  "data": {
   "lineno": 828,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      828
     ]
    },
    "int": {
     "line number": [
      832,
      832,
      832,
      835,
      835,
      835
     ]
    },
    "list": {
     "line number": [
      830,
      833
     ]
    },
    "numpy.arange": {
     "line number": [
      830,
      830,
      831,
      833,
      833,
      834
     ]
    },
    "numpy.array": {
     "line number": [
      830,
      833
     ]
    },
    "zip": {
     "line number": [
      830,
      833
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_postfix": {
  "data": {
   "lineno": 852,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      853
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      853
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      853
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_r1postfix": {
  "data": {
   "lineno": 837,
   "symbols_in_volume": {
    "int": {
     "line number": [
      848,
      848,
      848,
      849,
      849
     ]
    },
    "numpy.array": {
     "line number": [
      843
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      841
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      850
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_r2postfix": {
  "data": {
   "lineno": 856,
   "symbols_in_volume": {
    "int": {
     "line number": [
      867,
      867,
      867,
      868,
      868
     ]
    },
    "numpy.array": {
     "line number": [
      862
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      860
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      869
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestJoinBy2.test_two_keys_two_vars": {
  "data": {
   "lineno": 871,
   "symbols_in_volume": {
    "int": {
     "line number": [
      874,
      874,
      874,
      874,
      878,
      878,
      878,
      878,
      885,
      885,
      885,
      886,
      886,
      886
     ]
    },
    "list": {
     "line number": [
      872,
      876
     ]
    },
    "numpy.arange": {
     "line number": [
      872,
      873,
      873,
      876,
      877,
      877
     ]
    },
    "numpy.array": {
     "line number": [
      872,
      876,
      880
     ]
    },
    "numpy.lib.recfunctions.join_by": {
     "line number": [
      887
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      889,
      890
     ]
    },
    "numpy.repeat": {
     "line number": [
      872,
      876
     ]
    },
    "numpy.tile": {
     "line number": [
      872,
      876
     ]
    },
    "zip": {
     "line number": [
      872,
      876
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestMergeArrays": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": {
    "object": {
     "line number": [
      303
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_recfunctions.TestMergeArrays.setup": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": {
    "float": {
     "line number": [
      310,
      313
     ]
    },
    "int": {
     "line number": [
      313,
      313
     ]
    },
    "numpy.array": {
     "line number": [
      307,
      308,
      309,
      311
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_flatten": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": {
    "float": {
     "line number": [
      363,
      369
     ]
    },
    "int": {
     "line number": [
      363,
      368
     ]
    },
    "numpy.array": {
     "line number": [
      362,
      367
     ]
    },
    "numpy.lib.recfunctions.merge_arrays": {
     "line number": [
      361,
      366
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      364,
      370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_flatten_wflexible": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": {
    "float": {
     "line number": [
      378,
      384
     ]
    },
    "int": {
     "line number": [
      377,
      378,
      378,
      382,
      383,
      384
     ]
    },
    "numpy.array": {
     "line number": [
      376,
      385
     ]
    },
    "numpy.lib.recfunctions.merge_arrays": {
     "line number": [
      375,
      381
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      379,
      387
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_singlerecord": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": {
    "float": {
     "line number": [
      432
     ]
    },
    "int": {
     "line number": [
      430,
      431
     ]
    },
    "numpy.array": {
     "line number": [
      429
     ]
    },
    "numpy.lib.recfunctions.merge_arrays": {
     "line number": [
      428
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      433
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_solo": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "int": {
     "line number": [
      321
     ]
    },
    "numpy.array": {
     "line number": [
      321
     ]
    },
    "numpy.lib.recfunctions.merge_arrays": {
     "line number": [
      320,
      323,
      326,
      328
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      322,
      324,
      327,
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_solo_w_flatten": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "float": {
     "line number": [
      339
     ]
    },
    "int": {
     "line number": [
      339,
      339
     ]
    },
    "numpy.array": {
     "line number": [
      338
     ]
    },
    "numpy.lib.recfunctions.merge_arrays": {
     "line number": [
      334,
      337
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      335,
      340
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_standard": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": {
    "int": {
     "line number": [
      348,
      348,
      354,
      354
     ]
    },
    "numpy.array": {
     "line number": [
      347
     ]
    },
    "numpy.lib.recfunctions.merge_arrays": {
     "line number": [
      346,
      351
     ]
    },
    "numpy.ma.array": {
     "line number": [
      352
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      349,
      355,
      356
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_w_shorter_flex": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": {
    "float": {
     "line number": [
      424
     ]
    },
    "int": {
     "line number": [
      422,
      424
     ]
    },
    "numpy.array": {
     "line number": [
      422,
      423
     ]
    },
    "numpy.lib.recfunctions.merge_arrays": {
     "line number": [
      422
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_w_singlefield": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": {
    "float": {
     "line number": [
      408
     ]
    },
    "int": {
     "line number": [
      404,
      408
     ]
    },
    "numpy.array": {
     "line number": [
      404,
      405
     ]
    },
    "numpy.lib.recfunctions.merge_arrays": {
     "line number": [
      404
     ]
    },
    "numpy.ma.array": {
     "line number": [
      406
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      409
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_wmasked_arrays": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": {
    "int": {
     "line number": [
      396,
      396
     ]
    },
    "isinstance": {
     "line number": [
      400
     ]
    },
    "numpy.lib.recfunctions.merge_arrays": {
     "line number": [
      393,
      398
     ]
    },
    "numpy.ma.array": {
     "line number": [
      392,
      394
     ]
    },
    "numpy.ma.mrecords.MaskedRecords": {
     "line number": [
      400
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      397,
      399
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      400
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "object": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.setup": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "float": {
     "line number": [
      27,
      29
     ]
    },
    "int": {
     "line number": [
      29,
      29
     ]
    },
    "numpy.array": {
     "line number": [
      24,
      25,
      26,
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_drop_fields": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "float": {
     "line number": [
      68,
      73
     ]
    },
    "int": {
     "line number": [
      68,
      68,
      73,
      78,
      84,
      84,
      89
     ]
    },
    "numpy.array": {
     "line number": [
      67,
      72,
      78,
      83,
      89
     ]
    },
    "numpy.lib.recfunctions.drop_fields": {
     "line number": [
      71,
      77,
      82,
      88,
      92
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      74,
      79,
      85,
      90
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_field_assignment_by_name": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      258,
      260,
      262,
      268,
      270,
      272,
      275,
      275
     ]
    },
    "numpy.lib.recfunctions.assign_fields_by_name": {
     "line number": [
      259,
      261,
      269,
      271,
      276
     ]
    },
    "numpy.lib.recfunctions.require_fields": {
     "line number": [
      256,
      267
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      256,
      260,
      262,
      267,
      270,
      272,
      277
     ]
    },
    "numpy.ones": {
     "line number": [
      253,
      256,
      265,
      267
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_find_duplicates": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "float": {
     "line number": [
      154
     ]
    },
    "int": {
     "line number": [
      154
     ]
    },
    "numpy.lib.recfunctions.find_duplicates": {
     "line number": [
      156,
      161,
      166,
      171,
      176
     ]
    },
    "numpy.ma.array": {
     "line number": [
      150
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      158,
      159,
      163,
      164,
      168,
      169,
      173,
      174,
      178,
      179
     ]
    },
    "sorted": {
     "line number": [
      158,
      163,
      168,
      173,
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_find_duplicates_ignoremask": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": {
    "int": {
     "line number": [
      183
     ]
    },
    "numpy.lib.recfunctions.find_duplicates": {
     "line number": [
      186,
      191
     ]
    },
    "numpy.ma.array": {
     "line number": [
      184
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      188,
      189,
      193,
      194
     ]
    },
    "sorted": {
     "line number": [
      188,
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_fieldstructure": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "float": {
     "line number": [
      130,
      135
     ]
    },
    "int": {
     "line number": [
      135,
      140,
      141,
      142,
      142
     ]
    },
    "numpy.dtype": {
     "line number": [
      130,
      135,
      140
     ]
    },
    "numpy.lib.recfunctions.get_fieldstructure": {
     "line number": [
      131,
      136,
      143
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      132,
      137,
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_names": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "float": {
     "line number": [
      108,
      112
     ]
    },
    "int": {
     "line number": [
      112,
      112
     ]
    },
    "numpy.dtype": {
     "line number": [
      108,
      112
     ]
    },
    "numpy.lib.tests.test_recfunctions.get_names": {
     "line number": [
      109,
      113
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      110,
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_names_flat": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "float": {
     "line number": [
      118,
      122
     ]
    },
    "int": {
     "line number": [
      122,
      122
     ]
    },
    "numpy.dtype": {
     "line number": [
      118,
      122
     ]
    },
    "numpy.lib.tests.test_recfunctions.get_names_flat": {
     "line number": [
      119,
      123
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      120,
      124
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_rename_fields": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "float": {
     "line number": [
      99,
      99,
      101,
      101
     ]
    },
    "int": {
     "line number": [
      98,
      101
     ]
    },
    "numpy.array": {
     "line number": [
      97
     ]
    },
    "numpy.lib.recfunctions.rename_fields": {
     "line number": [
      100
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      103,
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_repack_fields": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      197,
      200,
      205
     ]
    },
    "numpy.lib.recfunctions.repack_fields": {
     "line number": [
      200,
      201,
      202,
      202,
      206
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      200,
      201,
      202
     ]
    },
    "numpy.record": {
     "line number": [
      205,
      206
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      206
     ]
    },
    "numpy.zeros": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_structured_to_unstructured": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "int": {
     "line number": [
      245,
      245,
      248,
      249
     ]
    },
    "numpy.arange": {
     "line number": [
      218
     ]
    },
    "numpy.array": {
     "line number": [
      213,
      216,
      220,
      229,
      232,
      234,
      237
     ]
    },
    "numpy.dtype": {
     "line number": [
      245,
      246
     ]
    },
    "numpy.lib.recfunctions.apply_along_fields": {
     "line number": [
      231,
      233
     ]
    },
    "numpy.lib.recfunctions.structured_to_unstructured": {
     "line number": [
      210,
      215,
      239,
      248
     ]
    },
    "numpy.lib.recfunctions.unstructured_to_structured": {
     "line number": [
      219,
      240
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      211,
      216,
      227,
      231,
      233,
      249
     ]
    },
    "numpy.mean": {
     "line number": [
      215,
      231,
      233
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      241,
      242
     ]
    },
    "numpy.zeros": {
     "line number": [
      209,
      211,
      247,
      249
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_zip_descr": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "float": {
     "line number": [
      47,
      51,
      58,
      63
     ]
    },
    "int": {
     "line number": [
      39,
      39,
      42,
      42,
      47,
      50,
      56,
      57,
      58,
      61,
      62,
      63
     ]
    },
    "numpy.dtype": {
     "line number": [
      39,
      42,
      47,
      50,
      56,
      61
     ]
    },
    "numpy.lib.tests.test_recfunctions.zip_descr": {
     "line number": [
      37,
      40,
      45,
      48,
      54,
      59
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      38,
      41,
      46,
      49,
      55,
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecursiveFillFields": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": {
    "object": {
     "line number": [
      280
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_recfunctions.TestRecursiveFillFields.test_masked_flexible": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": {
    "float": {
     "line number": [
      294,
      299
     ]
    },
    "int": {
     "line number": [
      294,
      299
     ]
    },
    "numpy.lib.recfunctions.recursive_fill_fields": {
     "line number": [
      296
     ]
    },
    "numpy.ma.array": {
     "line number": [
      293,
      297
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      300
     ]
    },
    "numpy.ma.zeros": {
     "line number": [
      295
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestRecursiveFillFields.test_simple_flexible": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "float": {
     "line number": [
      284,
      288
     ]
    },
    "int": {
     "line number": [
      284,
      288
     ]
    },
    "numpy.array": {
     "line number": [
      284,
      287
     ]
    },
    "numpy.lib.recfunctions.recursive_fill_fields": {
     "line number": [
      286
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      289
     ]
    },
    "numpy.zeros": {
     "line number": [
      285
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestStackArrays": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": {
    "object": {
     "line number": [
      490
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_recfunctions.TestStackArrays.setup": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": {
    "float": {
     "line number": [
      496,
      498
     ]
    },
    "int": {
     "line number": [
      498,
      498
     ]
    },
    "numpy.array": {
     "line number": [
      493,
      494,
      495,
      497
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestStackArrays.test_autoconversion": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      616
     ]
    },
    "bool": {
     "line number": [
      607
     ]
    },
    "float": {
     "line number": [
      607,
      609,
      609
     ]
    },
    "int": {
     "line number": [
      607,
      609
     ]
    },
    "numpy.lib.recfunctions.stack_arrays": {
     "line number": [
      613,
      617
     ]
    },
    "numpy.ma.array": {
     "line number": [
      608,
      610,
      611
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      614,
      615
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      616
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestStackArrays.test_checktitles": {
  "data": {
   "lineno": 619,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      621,
      623
     ]
    },
    "float": {
     "line number": [
      621,
      623
     ]
    },
    "int": {
     "line number": [
      621,
      623
     ]
    },
    "numpy.lib.recfunctions.stack_arrays": {
     "line number": [
      625
     ]
    },
    "numpy.ma.array": {
     "line number": [
      622,
      624,
      626
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      628,
      629
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestStackArrays.test_defaults": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": {
    "float": {
     "line number": [
      592,
      592,
      598,
      598
     ]
    },
    "numpy.array": {
     "line number": [
      591
     ]
    },
    "numpy.lib.recfunctions.stack_arrays": {
     "line number": [
      594
     ]
    },
    "numpy.ma.array": {
     "line number": [
      595
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      601,
      602,
      603
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestStackArrays.test_matching_named_fields": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": {
    "float": {
     "line number": [
      564,
      564,
      569,
      569,
      576,
      576
     ]
    },
    "int": {
     "line number": [
      576
     ]
    },
    "numpy.array": {
     "line number": [
      563
     ]
    },
    "numpy.lib.recfunctions.stack_arrays": {
     "line number": [
      565,
      575
     ]
    },
    "numpy.ma.array": {
     "line number": [
      566,
      577
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      572,
      573,
      585,
      586
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestStackArrays.test_solo": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": {
    "numpy.lib.recfunctions.stack_arrays": {
     "line number": [
      504,
      508
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      505,
      509
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      506,
      510
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestStackArrays.test_subdtype": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": {
    "float": {
     "line number": [
      634,
      637,
      637
     ]
    },
    "numpy.array": {
     "line number": [
      632,
      635
     ]
    },
    "numpy.lib.recfunctions.stack_arrays": {
     "line number": [
      639
     ]
    },
    "numpy.ma.array": {
     "line number": [
      640
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      656,
      657,
      658
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestStackArrays.test_unnamed_and_named_fields": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": {
    "float": {
     "line number": [
      537,
      546,
      557
     ]
    },
    "int": {
     "line number": [
      537,
      546,
      557
     ]
    },
    "numpy.lib.recfunctions.stack_arrays": {
     "line number": [
      532,
      541,
      550
     ]
    },
    "numpy.ma.array": {
     "line number": [
      533,
      542,
      551
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      538,
      539,
      547,
      548,
      558
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.TestStackArrays.test_unnamed_fields": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      517,
      521,
      525
     ]
    },
    "numpy.lib.recfunctions.stack_arrays": {
     "line number": [
      516,
      520,
      524
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      518,
      522,
      526
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_recfunctions.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.append_fields": {
  "data": {
   "shadows": "numpy.lib.recfunctions.append_fields"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.apply_along_fields": {
  "data": {
   "shadows": "numpy.lib.recfunctions.apply_along_fields"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.assert_equal": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.assign_fields_by_name": {
  "data": {
   "shadows": "numpy.lib.recfunctions.assign_fields_by_name"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.date": {
  "data": {
   "shadows": "datetime.date"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.drop_fields": {
  "data": {
   "shadows": "numpy.lib.recfunctions.drop_fields"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.find_duplicates": {
  "data": {
   "shadows": "numpy.lib.recfunctions.find_duplicates"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.get_fieldstructure": {
  "data": {
   "shadows": "numpy.lib.recfunctions.get_fieldstructure"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.get_names": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_recfunctions.get_names_flat": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_recfunctions.join_by": {
  "data": {
   "shadows": "numpy.lib.recfunctions.join_by"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.ma": {
  "data": {
   "shadows": "numpy.ma"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.merge_arrays": {
  "data": {
   "shadows": "numpy.lib.recfunctions.merge_arrays"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.recursive_fill_fields": {
  "data": {
   "shadows": "numpy.lib.recfunctions.recursive_fill_fields"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.rename_fields": {
  "data": {
   "shadows": "numpy.lib.recfunctions.rename_fields"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.repack_fields": {
  "data": {
   "shadows": "numpy.lib.recfunctions.repack_fields"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.require_fields": {
  "data": {
   "shadows": "numpy.lib.recfunctions.require_fields"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.rfn": {
  "data": {
   "shadows": "numpy.lib.recfunctions"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.stack_arrays": {
  "data": {
   "shadows": "numpy.lib.recfunctions.stack_arrays"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.structured_to_unstructured": {
  "data": {
   "shadows": "numpy.lib.recfunctions.structured_to_unstructured"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.unstructured_to_structured": {
  "data": {
   "shadows": "numpy.lib.recfunctions.unstructured_to_structured"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_recfunctions.zip_descr": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_regression": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_regression.StringIO": {
  "data": {
   "shadows": "StringIO.StringIO"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.TestRegression": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "object": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_append_fields_dtype_list": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      207
     ]
    },
    "Exception": {
     "line number": [
      206
     ]
    },
    "numpy.array": {
     "line number": [
      200
     ]
    },
    "numpy.eye": {
     "line number": [
      202
     ]
    },
    "numpy.float64": {
     "line number": [
      203
     ]
    },
    "numpy.int32": {
     "line number": [
      200,
      202,
      203,
      203
     ]
    },
    "numpy.lib.recfunctions.append_fields": {
     "line number": [
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_asfarray_none": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      137
     ]
    },
    "numpy.asfarray": {
     "line number": [
      137
     ]
    },
    "numpy.nan": {
     "line number": [
      137
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_cov_parameters": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.cov": {
     "line number": [
      24,
      25
     ]
    },
    "numpy.random.random": {
     "line number": [
      22
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_histogramdd_too_many_bins": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      119
     ]
    },
    "numpy.histogramdd": {
     "line number": [
      119
     ]
    },
    "numpy.ones": {
     "line number": [
      119
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_include_dirs": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      186
     ]
    },
    "numpy.compat.unicode": {
     "line number": [
      186
     ]
    },
    "numpy.get_include": {
     "line number": [
      184
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      186,
      187
     ]
    },
    "str": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_large_fancy_indexing": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      156,
      157
     ]
    },
    "int": {
     "line number": [
      142
     ]
    },
    "numpy.dtype": {
     "line number": [
      141
     ]
    },
    "numpy.intp": {
     "line number": [
      141
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      156,
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_large_fancy_indexing.dp": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "numpy.ix_": {
     "line number": [
      148
     ]
    },
    "numpy.ones": {
     "line number": [
      146
     ]
    },
    "numpy.random.randint": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_large_fancy_indexing.dp2": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "numpy.ix_": {
     "line number": [
      154
     ]
    },
    "numpy.ones": {
     "line number": [
      152
     ]
    },
    "numpy.random.randint": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_loadtxt_fields_subarrays": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "StringIO.StringIO": {
     "line number": [
      217,
      221,
      225,
      229
     ]
    },
    "numpy.array": {
     "line number": [
      218,
      222,
      226,
      231
     ]
    },
    "numpy.lib.tests.test_regression.sys": {
     "line number": [
      211
     ]
    },
    "numpy.loadtxt": {
     "line number": [
      217,
      221,
      225,
      229
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      218,
      222,
      226,
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_mem_digitize": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "numpy.digitize": {
     "line number": [
      31,
      32
     ]
    },
    "range": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_mem_polymul": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "numpy.polymul": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_mem_string_concat": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "numpy.append": {
     "line number": [
      69
     ]
    },
    "numpy.array": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_mem_vectorise": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.vectorize": {
     "line number": [
      40
     ]
    },
    "numpy.zeros": {
     "line number": [
      41,
      41,
      41,
      42,
      42,
      42,
      43
     ]
    },
    "vt": {
     "line number": [
      41,
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_mgrid_single_element": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "numpy.mgrid": {
     "line number": [
      47,
      48
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      47,
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_nansum_with_boolean": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      239
     ]
    },
    "Exception": {
     "line number": [
      238
     ]
    },
    "bool": {
     "line number": [
      235
     ]
    },
    "numpy.nansum": {
     "line number": [
      237
     ]
    },
    "numpy.zeros": {
     "line number": [
      235
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_ndenumerate_crash": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "list": {
     "line number": [
      133
     ]
    },
    "numpy.array": {
     "line number": [
      133
     ]
    },
    "numpy.ndenumerate": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_poly1d": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "numpy.poly1d": {
     "line number": [
      17,
      17,
      18
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_poly1d_nan_roots": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      60
     ]
    },
    "numpy.linalg.LinAlgError": {
     "line number": [
      60
     ]
    },
    "numpy.nan": {
     "line number": [
      59,
      59
     ]
    },
    "numpy.poly1d": {
     "line number": [
      59
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_poly_div": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "numpy.poly1d": {
     "line number": [
      73,
      74
     ]
    },
    "numpy.polydiv": {
     "line number": [
      75
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_poly_eq": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "numpy.poly1d": {
     "line number": [
      80,
      81
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      82,
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_polyder_return_type": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      191,
      192,
      193,
      194
     ]
    },
    "numpy.ndarray": {
     "line number": [
      192,
      194
     ]
    },
    "numpy.poly1d": {
     "line number": [
      191,
      191,
      193,
      193
     ]
    },
    "numpy.polyder": {
     "line number": [
      191,
      192,
      193,
      194
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      191,
      192,
      193,
      194
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_polydiv_type": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      109,
      111
     ]
    },
    "float": {
     "line number": [
      115
     ]
    },
    "int": {
     "line number": [
      113
     ]
    },
    "numpy.ones": {
     "line number": [
      109,
      113
     ]
    },
    "numpy.polydiv": {
     "line number": [
      110,
      114
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      111,
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_polyfit_build": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "numpy.polyfit": {
     "line number": [
      103
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_polyint_type": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      124,
      125
     ]
    },
    "float": {
     "line number": [
      128
     ]
    },
    "int": {
     "line number": [
      127
     ]
    },
    "numpy.ones": {
     "line number": [
      124,
      127
     ]
    },
    "numpy.polyint": {
     "line number": [
      125,
      128
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      125,
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_py3_compat": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      252
     ]
    },
    "AttributeError": {
     "line number": [
      251
     ]
    },
    "C": {
     "line number": [
      250
     ]
    },
    "numpy.info": {
     "line number": [
      250
     ]
    },
    "numpy.lib.tests.test_regression.os": {
     "line number": [
      248
     ]
    },
    "open": {
     "line number": [
      248
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_py3_compat.C": {
  "data": {
   "lineno": 244
  },
  "type": "class"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "numpy.testing._assert_valid_refcount": {
     "line number": [
      55
     ]
    },
    "numpy.vectorize": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p": {
  "data": {
   "lineno": 52
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_unique_zero_sized": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      36
     ]
    },
    "numpy.unique": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_void_coercion": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      160
     ]
    },
    "numpy.r_.dtype": {
     "line number": [
      162
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      162
     ]
    },
    "numpy.zeros": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression.TestRegression.test_who_with_0dim_array": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      175
     ]
    },
    "Exception": {
     "line number": [
      174
     ]
    },
    "numpy.array": {
     "line number": [
      173
     ]
    },
    "numpy.lib.tests.test_regression.os": {
     "line number": [
      170
     ]
    },
    "numpy.lib.tests.test_regression.sys": {
     "line number": [
      169,
      170,
      177,
      178
     ]
    },
    "numpy.who": {
     "line number": [
      173
     ]
    },
    "open": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_regression._assert_valid_refcount": {
  "data": {
   "shadows": "numpy.testing._assert_valid_refcount"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.append_fields": {
  "data": {
   "shadows": "numpy.lib.recfunctions.append_fields"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_regression.unicode": {
  "data": {
   "shadows": "numpy.compat.unicode"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_stride_tricks.SimpleSubClass": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": {
    "numpy.lib.tests.test_stride_tricks.VerySimpleSubClass": {
     "line number": [
      363
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_stride_tricks.SimpleSubClass.__array_finalize__": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      371
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.SimpleSubClass.__new__": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      366
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.VerySimpleSubClass": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      357
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_stride_tricks.VerySimpleSubClass.__new__": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      360
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks._broadcast_shape": {
  "data": {
   "shadows": "numpy.lib.stride_tricks._broadcast_shape"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.as_strided": {
  "data": {
   "shadows": "numpy.lib.stride_tricks.as_strided"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.as_strided_writeable": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": {
    "numpy.full_like": {
     "line number": [
      348
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      341,
      345,
      352,
      353
     ]
    },
    "numpy.ones": {
     "line number": [
      340
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      342,
      346,
      354
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      348
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.assert_incompatible_shapes_raise": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      29
     ]
    },
    "numpy.lib.stride_tricks.broadcast_arrays": {
     "line number": [
      29
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      29
     ]
    },
    "numpy.zeros": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.assert_same_as_ufunc": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "int": {
     "line number": [
      36,
      39
     ]
    },
    "numpy.arange": {
     "line number": [
      40
     ]
    },
    "numpy.lib.stride_tricks.broadcast_arrays": {
     "line number": [
      50
     ]
    },
    "numpy.multiply.reduce": {
     "line number": [
      39
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      51
     ]
    },
    "numpy.zeros": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.assert_shapes_correct": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "len": {
     "line number": [
      20
     ]
    },
    "numpy.lib.stride_tricks.broadcast_arrays": {
     "line number": [
      18
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      21
     ]
    },
    "numpy.zeros": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.broadcast_arrays": {
  "data": {
   "shadows": "numpy.lib.stride_tricks.broadcast_arrays"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.broadcast_to": {
  "data": {
   "shadows": "numpy.lib.stride_tricks.broadcast_to"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.rational": {
  "data": {
   "shadows": "numpy.core._rational_tests.rational"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_stride_tricks.test_as_strided": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      313
     ]
    },
    "numpy.array": {
     "line number": [
      295,
      297,
      298,
      300,
      302,
      305,
      307,
      334
     ]
    },
    "numpy.core._rational_tests.rational": {
     "line number": [
      333,
      334
     ]
    },
    "numpy.dtype": {
     "line number": [
      311,
      327
     ]
    },
    "numpy.empty": {
     "line number": [
      312,
      322,
      328
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      296,
      301,
      306,
      314,
      323,
      329,
      335
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      298,
      303,
      308,
      318,
      319,
      337
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      317,
      324,
      330,
      336
     ]
    },
    "range": {
     "line number": [
      333
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_broadcast_kwargs": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      68
     ]
    },
    "numpy.arange": {
     "line number": [
      65,
      66
     ]
    },
    "numpy.lib.stride_tricks.broadcast_arrays": {
     "line number": [
      70
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_broadcast_shape": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      291
     ]
    },
    "numpy.lib.stride_tricks._broadcast_shape": {
     "line number": [
      281,
      282,
      283,
      284,
      285,
      286,
      289,
      291
     ]
    },
    "numpy.ones": {
     "line number": [
      283,
      284,
      284,
      285,
      286,
      289,
      290,
      290
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      281,
      282,
      283,
      284,
      285,
      286,
      289
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      291
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_broadcast_to_raises": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      276
     ]
    },
    "numpy.lib.stride_tricks.broadcast_to": {
     "line number": [
      276
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      276
     ]
    },
    "numpy.zeros": {
     "line number": [
      275
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_broadcast_to_succeeds": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      242,
      242,
      243,
      243,
      244
     ]
    },
    "numpy.array": {
     "line number": [
      236,
      236,
      237,
      238,
      244
     ]
    },
    "numpy.lib.stride_tricks.broadcast_to": {
     "line number": [
      256
     ]
    },
    "numpy.ones": {
     "line number": [
      239,
      239,
      240,
      240,
      241,
      241,
      246,
      246,
      247,
      247,
      248,
      248,
      251,
      251,
      252,
      252,
      253,
      253
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      257
     ]
    },
    "numpy.zeros": {
     "line number": [
      237,
      238
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_incompatible_shapes_raise_valueerror": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "numpy.lib.tests.test_stride_tricks.assert_incompatible_shapes_raise": {
     "line number": [
      177,
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_one_off": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      74,
      75,
      77
     ]
    },
    "numpy.lib.stride_tricks.broadcast_arrays": {
     "line number": [
      76
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      79,
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_reference_types": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      439,
      440
     ]
    },
    "numpy.lib.stride_tricks.broadcast_arrays": {
     "line number": [
      444
     ]
    },
    "numpy.lib.stride_tricks.broadcast_to": {
     "line number": [
      441
     ]
    },
    "numpy.ones": {
     "line number": [
      444
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      442,
      445
     ]
    },
    "object": {
     "line number": [
      439,
      440
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_same": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      55,
      56
     ]
    },
    "numpy.lib.stride_tricks.broadcast_arrays": {
     "line number": [
      57
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      58,
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_same_as_ufunc": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "numpy.lib.tests.test_stride_tricks.assert_same_as_ufunc": {
     "line number": [
      221,
      224,
      226,
      230,
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_same_input_shapes": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "numpy.lib.tests.test_stride_tricks.assert_shapes_correct": {
     "line number": [
      101,
      104,
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_subclasses": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": {
    "len": {
     "line number": [
      389
     ]
    },
    "numpy.arange": {
     "line number": [
      389
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      378,
      380,
      384
     ]
    },
    "numpy.lib.stride_tricks.broadcast_arrays": {
     "line number": [
      390,
      394
     ]
    },
    "numpy.lib.stride_tricks.broadcast_to": {
     "line number": [
      402,
      405
     ]
    },
    "numpy.lib.tests.test_stride_tricks.SimpleSubClass": {
     "line number": [
      383,
      385,
      395,
      406
     ]
    },
    "numpy.lib.tests.test_stride_tricks.VerySimpleSubClass": {
     "line number": [
      376,
      377,
      381
     ]
    },
    "numpy.ndarray": {
     "line number": [
      379,
      391,
      392,
      397,
      403
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      377,
      379,
      381,
      385,
      386,
      391,
      392,
      393,
      395,
      396,
      397,
      398,
      403,
      404,
      406,
      407,
      408
     ]
    },
    "type": {
     "line number": [
      377,
      379,
      381,
      385,
      391,
      392,
      395,
      397,
      403,
      406
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_two_compatible_by_ones_input_shapes": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "numpy.lib.tests.test_stride_tricks.assert_shapes_correct": {
     "line number": [
      130,
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_two_compatible_by_prepending_ones_input_shapes": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "numpy.lib.tests.test_stride_tricks.assert_shapes_correct": {
     "line number": [
      162,
      164
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_stride_tricks.test_writeable": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      416
     ]
    },
    "numpy.array": {
     "line number": [
      413,
      432
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      432
     ]
    },
    "numpy.lib.stride_tricks.broadcast_arrays": {
     "line number": [
      420,
      421,
      426,
      434
     ]
    },
    "numpy.lib.stride_tricks.broadcast_to": {
     "line number": [
      414
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      435
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      415,
      423,
      427
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      416
     ]
    },
    "numpy.zeros": {
     "line number": [
      433
     ]
    },
    "slice": {
     "line number": [
      416
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_twodim_base.TestDiag": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "object": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_twodim_base.TestDiag.test_diag_bounds": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "numpy.diag": {
     "line number": [
      144,
      145,
      146,
      147,
      148,
      149
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      144,
      145,
      146,
      147,
      148,
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestDiag.test_failure": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      152
     ]
    },
    "numpy.diag": {
     "line number": [
      152
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestDiag.test_fortran_order": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      139
     ]
    },
    "numpy.lib.tests.test_twodim_base.get_mat": {
     "line number": [
      139
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestDiag.test_matrix": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "numpy.diag": {
     "line number": [
      129,
      133,
      136
     ]
    },
    "numpy.lib.tests.test_twodim_base.get_mat": {
     "line number": [
      125
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      129,
      133,
      136
     ]
    },
    "numpy.zeros": {
     "line number": [
      126
     ]
    },
    "range": {
     "line number": [
      127,
      131,
      134
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestDiag.test_vector": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      110
     ]
    },
    "numpy.diag": {
     "line number": [
      114,
      120,
      121
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      114,
      120,
      121
     ]
    },
    "numpy.zeros": {
     "line number": [
      111,
      115
     ]
    },
    "range": {
     "line number": [
      112,
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestEye": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "object": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_twodim_base.TestEye.test_2d": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      58,
      64
     ]
    },
    "numpy.eye": {
     "line number": [
      57,
      63
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      57,
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestEye.test_basic": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      41
     ]
    },
    "numpy.array": {
     "line number": [
      29,
      35
     ]
    },
    "numpy.eye": {
     "line number": [
      28,
      34,
      40,
      41
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      28,
      34,
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestEye.test_bool": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      96
     ]
    },
    "numpy.eye": {
     "line number": [
      96
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestEye.test_diag": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      45,
      51
     ]
    },
    "numpy.eye": {
     "line number": [
      44,
      50
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      44,
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestEye.test_diag2d": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      70,
      75
     ]
    },
    "numpy.eye": {
     "line number": [
      69,
      74
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69,
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestEye.test_eye_bounds": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestEye.test_order": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      99,
      100
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestEye.test_strings": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      92
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestFliplr": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "object": {
     "line number": [
      155
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_twodim_base.TestFliplr.test_basic": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      157
     ]
    },
    "numpy.fliplr": {
     "line number": [
      157,
      160,
      165
     ]
    },
    "numpy.lib.tests.test_twodim_base.get_mat": {
     "line number": [
      158
     ]
    },
    "numpy.ones": {
     "line number": [
      157
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      160,
      165
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestFlipud": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "object": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_twodim_base.TestFlipud.test_basic": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": {
    "numpy.flipud": {
     "line number": [
      172,
      177
     ]
    },
    "numpy.lib.tests.test_twodim_base.get_mat": {
     "line number": [
      170
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      172,
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestHistogram2d": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "object": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_all_outliers": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "numpy.histogram2d": {
     "line number": [
      235
     ]
    },
    "numpy.random.rand": {
     "line number": [
      234
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      236
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_asym": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      208,
      209,
      212
     ]
    },
    "numpy.histogram2d": {
     "line number": [
      210
     ]
    },
    "numpy.linspace": {
     "line number": [
      220,
      221
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      219
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      220,
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_binparameter_combination": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      246,
      249,
      254,
      266,
      268,
      274
     ]
    },
    "numpy.histogram2d": {
     "line number": [
      253,
      267
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      265,
      266,
      273,
      274
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_density": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      224,
      225,
      228
     ]
    },
    "numpy.histogram2d": {
     "line number": [
      226
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_empty": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      240
     ]
    },
    "numpy.histogram2d": {
     "line number": [
      239,
      242
     ]
    },
    "numpy.testing.assert_array_max_ulp": {
     "line number": [
      240,
      243
     ]
    },
    "numpy.zeros": {
     "line number": [
      243
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_simple": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": {
    "list": {
     "line number": [
      202,
      202
     ]
    },
    "numpy.array": {
     "line number": [
      182,
      184,
      189
     ]
    },
    "numpy.eye": {
     "line number": [
      203
     ]
    },
    "numpy.histogram2d": {
     "line number": [
      188,
      200,
      202
     ]
    },
    "numpy.linspace": {
     "line number": [
      186,
      187,
      204,
      205
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      199,
      201,
      203,
      204,
      205
     ]
    },
    "range": {
     "line number": [
      202,
      202
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestTri": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": {
    "object": {
     "line number": [
      277
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_twodim_base.TestTri.test_dtype": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      283,
      283
     ]
    },
    "numpy.array": {
     "line number": [
      279
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      282,
      283
     ]
    },
    "numpy.tri": {
     "line number": [
      282,
      283
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestTrilIndicesFrom": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": {
    "object": {
     "line number": [
      465
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_twodim_base.TestTrilIndicesFrom.test_exceptions": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      467,
      468
     ]
    },
    "numpy.ones": {
     "line number": [
      467,
      468
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      467,
      468
     ]
    },
    "numpy.tril_indices_from": {
     "line number": [
      467,
      468
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestTriuIndices": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": {
    "object": {
     "line number": [
      415
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_twodim_base.TestTriuIndices.test_triu_indices": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      426
     ]
    },
    "numpy.array": {
     "line number": [
      422,
      430,
      432,
      438,
      444,
      453,
      459
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      429,
      431,
      437,
      443,
      452,
      458
     ]
    },
    "numpy.triu_indices": {
     "line number": [
      417,
      418,
      419,
      420
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestTriuIndicesFrom": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": {
    "object": {
     "line number": [
      472
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_twodim_base.TestTriuIndicesFrom.test_exceptions": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      474,
      475
     ]
    },
    "numpy.ones": {
     "line number": [
      474,
      475
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      474,
      475
     ]
    },
    "numpy.triu_indices_from": {
     "line number": [
      474,
      475
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestVander": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": {
    "object": {
     "line number": [
      479
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_twodim_base.TestVander.test_basic": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      481,
      483
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      488,
      493
     ]
    },
    "numpy.vander": {
     "line number": [
      482,
      492
     ]
    },
    "range": {
     "line number": [
      491
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.TestVander.test_dtypes": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      496,
      498,
      503,
      505
     ]
    },
    "numpy.int8": {
     "line number": [
      496
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      501,
      510
     ]
    },
    "numpy.vander": {
     "line number": [
      497,
      504
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.add": {
  "data": {
   "shadows": "numpy.add"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.arange": {
  "data": {
   "shadows": "numpy.arange"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.assert_array_max_ulp": {
  "data": {
   "shadows": "numpy.testing.assert_array_max_ulp"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.diag": {
  "data": {
   "shadows": "numpy.diag"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.eye": {
  "data": {
   "shadows": "numpy.eye"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.fliplr": {
  "data": {
   "shadows": "numpy.fliplr"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.flipud": {
  "data": {
   "shadows": "numpy.flipud"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.get_mat": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.add.outer": {
     "line number": [
      22
     ]
    },
    "numpy.arange": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.histogram2d": {
  "data": {
   "shadows": "numpy.histogram2d"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.mask_indices": {
  "data": {
   "shadows": "numpy.mask_indices"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.ones": {
  "data": {
   "shadows": "numpy.ones"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.test_mask_indices": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      361
     ]
    },
    "numpy.array": {
     "line number": [
      362,
      365
     ]
    },
    "numpy.mask_indices": {
     "line number": [
      360,
      364
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      362,
      365
     ]
    },
    "numpy.triu": {
     "line number": [
      360,
      364
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.test_tril_indices": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      379
     ]
    },
    "numpy.array": {
     "line number": [
      375,
      383,
      385,
      390,
      396,
      403,
      409
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      382,
      384,
      389,
      395,
      402,
      408
     ]
    },
    "numpy.tril_indices": {
     "line number": [
      370,
      371,
      372,
      373
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.test_tril_triu_dtype": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      347
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      343,
      344,
      350,
      351,
      354,
      355
     ]
    },
    "numpy.tril": {
     "line number": [
      344,
      351,
      355
     ]
    },
    "numpy.triu": {
     "line number": [
      343,
      350,
      354
     ]
    },
    "numpy.typecodes": {
     "line number": [
      339
     ]
    },
    "numpy.zeros": {
     "line number": [
      342,
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.test_tril_triu_ndim2": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      288
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      291,
      292
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      294,
      295
     ]
    },
    "numpy.tril": {
     "line number": [
      289
     ]
    },
    "numpy.triu": {
     "line number": [
      290
     ]
    },
    "numpy.typecodes": {
     "line number": [
      287,
      287
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.test_tril_triu_ndim3": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      300,
      305,
      310
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      317,
      318
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      319,
      320
     ]
    },
    "numpy.tril": {
     "line number": [
      316
     ]
    },
    "numpy.triu": {
     "line number": [
      315
     ]
    },
    "numpy.typecodes": {
     "line number": [
      299,
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.test_tril_triu_with_inf": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      325,
      328
     ]
    },
    "numpy.inf": {
     "line number": [
      325,
      327,
      330
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      332,
      333
     ]
    },
    "numpy.tril": {
     "line number": [
      333
     ]
    },
    "numpy.triu": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_twodim_base.tri": {
  "data": {
   "shadows": "numpy.tri"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.tril_indices": {
  "data": {
   "shadows": "numpy.tril_indices"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.tril_indices_from": {
  "data": {
   "shadows": "numpy.tril_indices_from"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.triu_indices": {
  "data": {
   "shadows": "numpy.triu_indices"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.triu_indices_from": {
  "data": {
   "shadows": "numpy.triu_indices_from"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.vander": {
  "data": {
   "shadows": "numpy.vander"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_twodim_base.zeros": {
  "data": {
   "shadows": "numpy.zeros"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_type_check.TestArrayConversion": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": {
    "object": {
     "line number": [
      432
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestArrayConversion.test_asfarray": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      441
     ]
    },
    "numpy.array": {
     "line number": [
      435,
      442,
      442
     ]
    },
    "numpy.floating": {
     "line number": [
      437
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      437
     ]
    },
    "numpy.lib.type_check.asfarray": {
     "line number": [
      435,
      442
     ]
    },
    "numpy.ndarray": {
     "line number": [
      436
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      437
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      436
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      441
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestCommonType": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "object": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestCommonType.test_basic": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      20,
      21,
      22,
      23,
      24,
      25
     ]
    },
    "numpy.cdouble": {
     "line number": [
      25,
      31
     ]
    },
    "numpy.csingle": {
     "line number": [
      24,
      30
     ]
    },
    "numpy.float16": {
     "line number": [
      21,
      27
     ]
    },
    "numpy.float32": {
     "line number": [
      22,
      28
     ]
    },
    "numpy.float64": {
     "line number": [
      23,
      26,
      29
     ]
    },
    "numpy.int32": {
     "line number": [
      20
     ]
    },
    "numpy.lib.type_check.common_type": {
     "line number": [
      26,
      27,
      28,
      29,
      30,
      31
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      26,
      27,
      28,
      29,
      30,
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestImag": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "object": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestImag.test_cmplx": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      149,
      154
     ]
    },
    "numpy.array": {
     "line number": [
      146
     ]
    },
    "numpy.imag": {
     "line number": [
      144,
      147,
      152
     ]
    },
    "numpy.ndarray": {
     "line number": [
      149,
      154
     ]
    },
    "numpy.random.rand": {
     "line number": [
      143,
      143
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      149,
      154
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      144,
      148
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestImag.test_real": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      135,
      140
     ]
    },
    "numpy.array": {
     "line number": [
      132
     ]
    },
    "numpy.imag": {
     "line number": [
      130,
      133,
      138
     ]
    },
    "numpy.ndarray": {
     "line number": [
      135,
      140
     ]
    },
    "numpy.random.rand": {
     "line number": [
      129
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      135,
      140
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      130,
      134
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      139
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIscomplex": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "object": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIscomplex.test_fail": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      160
     ]
    },
    "numpy.lib.type_check.iscomplex": {
     "line number": [
      161
     ]
    },
    "numpy.sometrue": {
     "line number": [
      162
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIscomplex.test_pass": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      165
     ]
    },
    "numpy.lib.type_check.iscomplex": {
     "line number": [
      166
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "object": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_basic": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      186,
      188
     ]
    },
    "numpy.lib.type_check.iscomplexobj": {
     "line number": [
      187,
      189
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      187,
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": {
    "MyArray": {
     "line number": [
      232
     ]
    },
    "numpy.lib.type_check.iscomplexobj": {
     "line number": [
      233
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      233
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": {
    "list": {
     "line number": [
      227
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      230
     ]
    },
    "property": {
     "line number": [
      228
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "DummyComplexArray": {
     "line number": [
      204
     ]
    },
    "numpy.lib.type_check.iscomplexobj": {
     "line number": [
      205
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray": {
  "data": {
   "lineno": 200
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      203
     ]
    },
    "numpy.dtype": {
     "line number": [
      203
     ]
    },
    "property": {
     "line number": [
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_list": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "numpy.lib.type_check.iscomplexobj": {
     "line number": [
      196,
      197
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      196,
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "DummyPd": {
     "line number": [
      223
     ]
    },
    "numpy.lib.type_check.iscomplexobj": {
     "line number": [
      224
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      224
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd": {
  "data": {
   "lineno": 219
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "property": {
     "line number": [
      220
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.PdComplex": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "numpy.complex128": {
     "line number": [
      210
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.PdDtype": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      218
     ]
    },
    "object": {
     "line number": [
      212
     ]
    },
    "str": {
     "line number": [
      217
     ]
    },
    "type": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIscomplexobj.test_scalar": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "numpy.lib.type_check.iscomplexobj": {
     "line number": [
      192,
      193
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      192,
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsfinite": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": {
    "object": {
     "line number": [
      274
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIsfinite.test_complex": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "numpy.isfinite": {
     "line number": [
      298
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsfinite.test_complex1": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      302
     ]
    },
    "numpy.errstate": {
     "line number": [
      301
     ]
    },
    "numpy.isfinite": {
     "line number": [
      302
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsfinite.test_goodvalues": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      280
     ]
    },
    "numpy.array": {
     "line number": [
      278
     ]
    },
    "numpy.isfinite": {
     "line number": [
      279
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      280
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsfinite.test_ind": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      292
     ]
    },
    "numpy.errstate": {
     "line number": [
      291
     ]
    },
    "numpy.isfinite": {
     "line number": [
      292
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      292
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsfinite.test_integer": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": {
    "numpy.isfinite": {
     "line number": [
      295
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      295
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsfinite.test_neginf": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      288
     ]
    },
    "numpy.errstate": {
     "line number": [
      287
     ]
    },
    "numpy.isfinite": {
     "line number": [
      288
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsfinite.test_posinf": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      284
     ]
    },
    "numpy.errstate": {
     "line number": [
      283
     ]
    },
    "numpy.isfinite": {
     "line number": [
      284
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      284
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsinf": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": {
    "object": {
     "line number": [
      305
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIsinf.test_goodvalues": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      311
     ]
    },
    "numpy.array": {
     "line number": [
      309
     ]
    },
    "numpy.isinf": {
     "line number": [
      310
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      311
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsinf.test_ind": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      331
     ]
    },
    "numpy.errstate": {
     "line number": [
      330
     ]
    },
    "numpy.isinf": {
     "line number": [
      331
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      331
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsinf.test_neginf": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      323
     ]
    },
    "numpy.errstate": {
     "line number": [
      322
     ]
    },
    "numpy.isinf": {
     "line number": [
      323
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      323
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsinf.test_neginf_scalar": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      327
     ]
    },
    "numpy.errstate": {
     "line number": [
      326
     ]
    },
    "numpy.isinf": {
     "line number": [
      327
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      327
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsinf.test_posinf": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      315
     ]
    },
    "numpy.errstate": {
     "line number": [
      314
     ]
    },
    "numpy.isinf": {
     "line number": [
      315
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      315
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsinf.test_posinf_scalar": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      319
     ]
    },
    "numpy.errstate": {
     "line number": [
      318
     ]
    },
    "numpy.isinf": {
     "line number": [
      319
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      319
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsnan": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "object": {
     "line number": [
      244
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIsnan.test_complex": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": {
    "numpy.isnan": {
     "line number": [
      267
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      267
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsnan.test_complex1": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      271
     ]
    },
    "numpy.errstate": {
     "line number": [
      270
     ]
    },
    "numpy.isnan": {
     "line number": [
      271
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      271
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsnan.test_goodvalues": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      249
     ]
    },
    "numpy.array": {
     "line number": [
      247
     ]
    },
    "numpy.isnan": {
     "line number": [
      248
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      249
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsnan.test_ind": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      261
     ]
    },
    "numpy.errstate": {
     "line number": [
      260
     ]
    },
    "numpy.isnan": {
     "line number": [
      261
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsnan.test_integer": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "numpy.isnan": {
     "line number": [
      264
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsnan.test_neginf": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      257
     ]
    },
    "numpy.errstate": {
     "line number": [
      256
     ]
    },
    "numpy.isnan": {
     "line number": [
      257
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      257
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsnan.test_posinf": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      253
     ]
    },
    "numpy.errstate": {
     "line number": [
      252
     ]
    },
    "numpy.isnan": {
     "line number": [
      253
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsneginf": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": {
    "object": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIsneginf.test_generic": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      348
     ]
    },
    "numpy.errstate": {
     "line number": [
      347
     ]
    },
    "numpy.lib.type_check.isneginf": {
     "line number": [
      348
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      349,
      350,
      351
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsposinf": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": {
    "object": {
     "line number": [
      334
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIsposinf.test_generic": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      338
     ]
    },
    "numpy.errstate": {
     "line number": [
      337
     ]
    },
    "numpy.lib.type_check.isposinf": {
     "line number": [
      338
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      339,
      340,
      341
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsreal": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "object": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIsreal.test_fail": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      178
     ]
    },
    "numpy.lib.type_check.isreal": {
     "line number": [
      179
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsreal.test_pass": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      173
     ]
    },
    "numpy.lib.type_check.isreal": {
     "line number": [
      174
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      175
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsrealobj": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "object": {
     "line number": [
      236
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIsrealobj.test_basic": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      238,
      240
     ]
    },
    "numpy.lib.type_check.isrealobj": {
     "line number": [
      239,
      241
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      239,
      241
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestIsscalar": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "object": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestIsscalar.test_basic": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "numpy.compat.long": {
     "line number": [
      91
     ]
    },
    "numpy.isscalar": {
     "line number": [
      87,
      88,
      89,
      90,
      91,
      92
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      87,
      88,
      89,
      90,
      91,
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestMintypecode": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "object": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestMintypecode.test_default_1": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "numpy.lib.type_check.mintypecode": {
     "line number": [
      38,
      39,
      40,
      41,
      42
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      38,
      39,
      40,
      41,
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestMintypecode.test_default_2": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "numpy.lib.type_check.mintypecode": {
     "line number": [
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      57,
      58,
      59,
      61,
      62,
      63,
      64,
      65,
      66,
      67
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      57,
      58,
      59,
      61,
      62,
      63,
      64,
      65,
      66,
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestMintypecode.test_default_3": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "numpy.lib.type_check.mintypecode": {
     "line number": [
      70,
      72,
      73,
      74,
      76,
      77,
      78,
      79,
      81
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      70,
      72,
      73,
      74,
      76,
      77,
      78,
      79,
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestNanToNum": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": {
    "object": {
     "line number": [
      354
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestNanToNum.test_array": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": {
    "int": {
     "line number": [
      377
     ]
    },
    "numpy.array": {
     "line number": [
      377
     ]
    },
    "numpy.lib.type_check.nan_to_num": {
     "line number": [
      376
     ]
    },
    "numpy.ndarray": {
     "line number": [
      378
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      377
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      378
     ]
    },
    "type": {
     "line number": [
      378
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestNanToNum.test_complex_bad": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      398
     ]
    },
    "numpy.complex_": {
     "line number": [
      402
     ]
    },
    "numpy.errstate": {
     "line number": [
      396
     ]
    },
    "numpy.isfinite": {
     "line number": [
      401
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      401
     ]
    },
    "numpy.lib.type_check.nan_to_num": {
     "line number": [
      399
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      402
     ]
    },
    "type": {
     "line number": [
      402
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestNanToNum.test_complex_bad2": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      407
     ]
    },
    "numpy.complex_": {
     "line number": [
      410
     ]
    },
    "numpy.errstate": {
     "line number": [
      405
     ]
    },
    "numpy.isfinite": {
     "line number": [
      409
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      409
     ]
    },
    "numpy.lib.type_check.nan_to_num": {
     "line number": [
      408
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      410
     ]
    },
    "type": {
     "line number": [
      410
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestNanToNum.test_complex_good": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": {
    "numpy.complex_": {
     "line number": [
      393
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      392
     ]
    },
    "numpy.lib.type_check.nan_to_num": {
     "line number": [
      391
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      393
     ]
    },
    "type": {
     "line number": [
      393
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestNanToNum.test_float": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": {
    "numpy.float_": {
     "line number": [
      388
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      387
     ]
    },
    "numpy.lib.type_check.nan_to_num": {
     "line number": [
      386
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      388
     ]
    },
    "type": {
     "line number": [
      388
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestNanToNum.test_generic": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      358,
      366
     ]
    },
    "numpy.errstate": {
     "line number": [
      357,
      365
     ]
    },
    "numpy.isfinite": {
     "line number": [
      359,
      361,
      370,
      372
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      359,
      359,
      361,
      361,
      370,
      370,
      372,
      372
     ]
    },
    "numpy.lib.type_check.nan_to_num": {
     "line number": [
      358,
      367
     ]
    },
    "numpy.ndarray": {
     "line number": [
      362,
      373
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      360,
      369,
      371
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      362,
      373
     ]
    },
    "type": {
     "line number": [
      362,
      373
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestNanToNum.test_integer": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": {
    "numpy.int_": {
     "line number": [
      383
     ]
    },
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      382
     ]
    },
    "numpy.lib.type_check.nan_to_num": {
     "line number": [
      381
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      383
     ]
    },
    "type": {
     "line number": [
      383
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestReal": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "object": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestReal.test_cmplx": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      118,
      123
     ]
    },
    "numpy.array": {
     "line number": [
      115
     ]
    },
    "numpy.ndarray": {
     "line number": [
      118,
      123
     ]
    },
    "numpy.random.rand": {
     "line number": [
      112,
      112
     ]
    },
    "numpy.real": {
     "line number": [
      113,
      116,
      121
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      118,
      123
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      113,
      117
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestReal.test_real": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      104,
      109
     ]
    },
    "numpy.array": {
     "line number": [
      101
     ]
    },
    "numpy.ndarray": {
     "line number": [
      104,
      109
     ]
    },
    "numpy.random.rand": {
     "line number": [
      98
     ]
    },
    "numpy.real": {
     "line number": [
      99,
      102,
      107
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      104,
      109
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      99,
      103
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.TestRealIfClose": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": {
    "object": {
     "line number": [
      419
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_type_check.TestRealIfClose.test_basic": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": {
    "numpy.lib.tests.test_type_check.assert_all": {
     "line number": [
      424,
      427,
      429
     ]
    },
    "numpy.lib.type_check.iscomplexobj": {
     "line number": [
      427
     ]
    },
    "numpy.lib.type_check.isrealobj": {
     "line number": [
      424,
      429
     ]
    },
    "numpy.lib.type_check.real_if_close": {
     "line number": [
      423,
      426,
      428
     ]
    },
    "numpy.random.rand": {
     "line number": [
      422
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      425
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.asfarray": {
  "data": {
   "shadows": "numpy.lib.type_check.asfarray"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.assert_all": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      15
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_type_check.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.common_type": {
  "data": {
   "shadows": "numpy.lib.type_check.common_type"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.iscomplex": {
  "data": {
   "shadows": "numpy.lib.type_check.iscomplex"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.iscomplexobj": {
  "data": {
   "shadows": "numpy.lib.type_check.iscomplexobj"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.isneginf": {
  "data": {
   "shadows": "numpy.lib.type_check.isneginf"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.isposinf": {
  "data": {
   "shadows": "numpy.lib.type_check.isposinf"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.isreal": {
  "data": {
   "shadows": "numpy.lib.type_check.isreal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.isrealobj": {
  "data": {
   "shadows": "numpy.lib.type_check.isrealobj"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.mintypecode": {
  "data": {
   "shadows": "numpy.lib.type_check.mintypecode"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.nan_to_num": {
  "data": {
   "shadows": "numpy.lib.type_check.nan_to_num"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_type_check.real_if_close": {
  "data": {
   "shadows": "numpy.lib.type_check.real_if_close"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_ufunclike": {
  "data": {},
  "type": "module"
 },
 "numpy.lib.tests.test_ufunclike.TestUfunclike": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "object": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_ufunclike.TestUfunclike.test_deprecated": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      87,
      88,
      89
     ]
    },
    "numpy.core.empty": {
     "line number": [
      87,
      88,
      89
     ]
    },
    "numpy.lib.ufunclike.fix": {
     "line number": [
      87
     ]
    },
    "numpy.lib.ufunclike.isneginf": {
     "line number": [
      89
     ]
    },
    "numpy.lib.ufunclike.isposinf": {
     "line number": [
      88
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      87,
      88,
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "float": {
     "line number": [
      45
     ]
    },
    "numpy.core.array": {
     "line number": [
      44,
      46
     ]
    },
    "numpy.core.zeros": {
     "line number": [
      45
     ]
    },
    "numpy.lib.ufunclike.fix": {
     "line number": [
      48,
      50,
      53
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      49,
      51,
      52,
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "MyArray": {
     "line number": [
      72,
      75,
      82
     ]
    },
    "isinstance": {
     "line number": [
      75,
      82
     ]
    },
    "numpy.core.array": {
     "line number": [
      71,
      74
     ]
    },
    "numpy.lib.ufunclike.fix": {
     "line number": [
      73,
      81
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      75,
      82
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      74
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      76,
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "numpy.core.ndarray": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__array_finalize__": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__array_wrap__": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__new__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_ufunclike.TestUfunclike.test_isneginf": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      40
     ]
    },
    "bool": {
     "line number": [
      30
     ]
    },
    "numpy.complex": {
     "line number": [
      39
     ]
    },
    "numpy.core.array": {
     "line number": [
      29,
      31
     ]
    },
    "numpy.core.inf": {
     "line number": [
      29,
      29
     ]
    },
    "numpy.core.nan": {
     "line number": [
      29
     ]
    },
    "numpy.core.zeros": {
     "line number": [
      30
     ]
    },
    "numpy.lib.ufunclike.isneginf": {
     "line number": [
      33,
      35,
      41
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      34,
      36,
      37
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_ufunclike.TestUfunclike.test_isposinf": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      25
     ]
    },
    "bool": {
     "line number": [
      15
     ]
    },
    "numpy.complex": {
     "line number": [
      24
     ]
    },
    "numpy.core.array": {
     "line number": [
      14,
      16
     ]
    },
    "numpy.core.inf": {
     "line number": [
      14,
      14
     ]
    },
    "numpy.core.nan": {
     "line number": [
      14
     ]
    },
    "numpy.core.zeros": {
     "line number": [
      15
     ]
    },
    "numpy.lib.ufunclike.isposinf": {
     "line number": [
      18,
      20,
      26
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      19,
      21,
      22
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_ufunclike.TestUfunclike.test_scalar": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "numpy.True_": {
     "line number": [
      94
     ]
    },
    "numpy.array": {
     "line number": [
      104
     ]
    },
    "numpy.fix": {
     "line number": [
      99,
      105
     ]
    },
    "numpy.float64": {
     "line number": [
      100
     ]
    },
    "numpy.inf": {
     "line number": [
      92
     ]
    },
    "numpy.isposinf": {
     "line number": [
      93
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      106
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      95,
      96,
      101,
      102
     ]
    },
    "type": {
     "line number": [
      96,
      96,
      102,
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_ufunclike.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_ufunclike.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_ufunclike.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_ufunclike.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_ufunclike.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_ufunclike.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_ufunclike.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_ufunclike.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_ufunclike.nx": {
  "data": {
   "shadows": "numpy.core"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_ufunclike.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_ufunclike.ufl": {
  "data": {
   "shadows": "numpy.lib.ufunclike"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils": {
  "data": {
   "symbols_in_volume": {
    "numpy.lib.deprecate": {
     "line number": [
      38
     ]
    },
    "numpy.lib.tests.test_utils.old_func3": {
     "line number": [
      38
     ]
    },
    "numpy.lib.tests.test_utils.sys": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.tests.test_utils.StringIO": {
  "data": {
   "shadows": "StringIO.StringIO"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils.TestByteBounds": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "object": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.tests.test_utils.TestByteBounds.test_byte_bounds": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "numpy.core.arange": {
     "line number": [
      64
     ]
    },
    "numpy.lib.utils.byte_bounds": {
     "line number": [
      65
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.TestByteBounds.test_strided": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "numpy.core.arange": {
     "line number": [
      81
     ]
    },
    "numpy.lib.utils.byte_bounds": {
     "line number": [
      83
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.TestByteBounds.test_unusual_order_negative_stride": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "numpy.core.arange": {
     "line number": [
      75
     ]
    },
    "numpy.lib.utils.byte_bounds": {
     "line number": [
      77
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.TestByteBounds.test_unusual_order_positive_stride": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "numpy.core.arange": {
     "line number": [
      69
     ]
    },
    "numpy.lib.utils.byte_bounds": {
     "line number": [
      71
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils.arange": {
  "data": {
   "shadows": "numpy.core.arange"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils.deprecate": {
  "data": {
   "shadows": "numpy.lib.deprecate"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils.new_func3": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "numpy.lib.tests.test_utils.old_func": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "numpy.lib.deprecate": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.old_func2": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "numpy.lib.deprecate": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.old_func3": {
  "data": {
   "lineno": 36
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib.tests.test_utils.test_assert_raises_regex_context_manager": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      90,
      91
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.test_deprecate_decorator": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.lib.tests.test_utils.old_func": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.test_deprecate_decorator_message": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "numpy.lib.tests.test_utils.old_func2": {
     "line number": [
      46
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.test_deprecate_fn": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "numpy.lib.tests.test_utils.new_func3": {
     "line number": [
      50,
      51
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      50,
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.test_lookfor": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "StringIO.StringIO": {
     "line number": [
      19
     ]
    },
    "numpy.lib.tests.test_utils.pytest": {
     "line number": [
      17
     ]
    },
    "numpy.lib.tests.test_utils.sys": {
     "line number": [
      17
     ]
    },
    "numpy.lib.utils.lookfor": {
     "line number": [
      20
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.test_safe_eval_nameconstant": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "numpy.lib.utils.safe_eval": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.tests.test_utils.utils": {
  "data": {
   "shadows": "numpy.lib.utils"
  },
  "type": "import"
 },
 "numpy.lib.tracemalloc_domain": {
  "data": {
   "shadows": "numpy.core._multiarray_umath.tracemalloc_domain"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.iinfo": {
     "line number": [
      28,
      29,
      30
     ]
    },
    "numpy.core.numeric.int16": {
     "line number": [
      29
     ]
    },
    "numpy.core.numeric.int32": {
     "line number": [
      30
     ]
    },
    "numpy.core.numeric.int8": {
     "line number": [
      28
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      25
     ]
    },
    "numpy.lib.twodim_base.functools": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.twodim_base.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.lib.twodim_base._diag_dispatcher": {
  "data": {
   "lineno": 212
  },
  "type": "function"
 },
 "numpy.lib.twodim_base._flip_dispatcher": {
  "data": {
   "lineno": 44
  },
  "type": "function"
 },
 "numpy.lib.twodim_base._histogram2d_dispatcher": {
  "data": {
   "lineno": 566
  },
  "type": "function"
 },
 "numpy.lib.twodim_base._min_int": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "numpy.core.numeric.int16": {
     "line number": [
      38
     ]
    },
    "numpy.core.numeric.int32": {
     "line number": [
      40
     ]
    },
    "numpy.core.numeric.int64": {
     "line number": [
      41
     ]
    },
    "numpy.core.numeric.int8": {
     "line number": [
      36
     ]
    },
    "numpy.lib.twodim_base.i1": {
     "line number": [
      35,
      35
     ]
    },
    "numpy.lib.twodim_base.i2": {
     "line number": [
      37,
      37
     ]
    },
    "numpy.lib.twodim_base.i4": {
     "line number": [
      39,
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base._trilu_dispatcher": {
  "data": {
   "lineno": 398
  },
  "type": "function"
 },
 "numpy.lib.twodim_base._trilu_indices_form_dispatcher": {
  "data": {
   "lineno": 856
  },
  "type": "function"
 },
 "numpy.lib.twodim_base._vander_dispatcher": {
  "data": {
   "lineno": 470
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.absolute": {
  "data": {
   "shadows": "numpy.core.numeric.absolute"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.arange": {
  "data": {
   "shadows": "numpy.core.numeric.arange"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.array_function_dispatch": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "numpy.lib.twodim_base.asanyarray": {
  "data": {
   "shadows": "numpy.core.numeric.asanyarray"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.asarray": {
  "data": {
   "shadows": "numpy.core.numeric.asarray"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.diag": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      285
     ]
    },
    "abs": {
     "line number": [
      274
     ]
    },
    "len": {
     "line number": [
      273,
      282
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      271
     ]
    },
    "numpy.core.numeric.diagonal": {
     "line number": [
      283
     ]
    },
    "numpy.core.numeric.zeros": {
     "line number": [
      275
     ]
    },
    "numpy.lib.twodim_base._diag_dispatcher": {
     "line number": [
      216
     ]
    },
    "numpy.lib.twodim_base.array_function_dispatch": {
     "line number": [
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.diagflat": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      330
     ]
    },
    "abs": {
     "line number": [
      334
     ]
    },
    "len": {
     "line number": [
      333
     ]
    },
    "numpy.core.numeric.arange": {
     "line number": [
      337,
      340
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      332
     ]
    },
    "numpy.core.numeric.zeros": {
     "line number": [
      335
     ]
    },
    "numpy.lib.twodim_base._diag_dispatcher": {
     "line number": [
      288
     ]
    },
    "numpy.lib.twodim_base.array_function_dispatch": {
     "line number": [
      288
     ]
    },
    "wrap": {
     "line number": [
      345
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.diagonal": {
  "data": {
   "shadows": "numpy.core.numeric.diagonal"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.empty": {
  "data": {
   "shadows": "numpy.core.numeric.empty"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.eye": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "float": {
     "line number": [
      155
     ]
    },
    "numpy.core.numeric.zeros": {
     "line number": [
      201
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.fliplr": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      95
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      93
     ]
    },
    "numpy.lib.twodim_base._flip_dispatcher": {
     "line number": [
      48
     ]
    },
    "numpy.lib.twodim_base.array_function_dispatch": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.flipud": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      150
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      148
     ]
    },
    "numpy.lib.twodim_base._flip_dispatcher": {
     "line number": [
      99
     ]
    },
    "numpy.lib.twodim_base.array_function_dispatch": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.greater_equal": {
  "data": {
   "shadows": "numpy.core.numeric.greater_equal"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.histogram2d": {
  "data": {
   "lineno": 571,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      694
     ]
    },
    "len": {
     "line number": [
      693
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      698
     ]
    },
    "numpy.histogramdd": {
     "line number": [
      700
     ]
    },
    "numpy.lib.twodim_base._histogram2d_dispatcher": {
     "line number": [
      571
     ]
    },
    "numpy.lib.twodim_base.array_function_dispatch": {
     "line number": [
      571
     ]
    },
    "range": {
     "line number": [
      700
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.histogramdd": {
  "data": {
   "shadows": "numpy.histogramdd"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.i1": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "numpy.lib.twodim_base.i2": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy.lib.twodim_base.i4": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "numpy.lib.twodim_base.iinfo": {
  "data": {
   "shadows": "numpy.core.iinfo"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.int16": {
  "data": {
   "shadows": "numpy.core.numeric.int16"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.int32": {
  "data": {
   "shadows": "numpy.core.numeric.int32"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.int64": {
  "data": {
   "shadows": "numpy.core.numeric.int64"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.int8": {
  "data": {
   "shadows": "numpy.core.numeric.int8"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.mask_indices": {
  "data": {
   "lineno": 704,
   "symbols_in_volume": {
    "int": {
     "line number": [
      770
     ]
    },
    "mask_func": {
     "line number": [
      771
     ]
    },
    "numpy.core.numeric.nonzero": {
     "line number": [
      772
     ]
    },
    "numpy.core.numeric.ones": {
     "line number": [
      770
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      704
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.multiply": {
  "data": {
   "shadows": "numpy.core.numeric.multiply"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.nonzero": {
  "data": {
   "shadows": "numpy.core.numeric.nonzero"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.ones": {
  "data": {
   "shadows": "numpy.core.numeric.ones"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.overrides": {
  "data": {
   "shadows": "numpy.core.overrides"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.promote_types": {
  "data": {
   "shadows": "numpy.core.numeric.promote_types"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.set_module": {
  "data": {
   "shadows": "numpy.core.overrides.set_module"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.transpose": {
  "data": {
   "shadows": "numpy.core.transpose"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.tri": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "float": {
     "line number": [
      349
     ]
    },
    "numpy.core.numeric.arange": {
     "line number": [
      389,
      390
     ]
    },
    "numpy.core.numeric.greater_equal.outer": {
     "line number": [
      389
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      348
     ]
    },
    "numpy.lib.twodim_base._min_int": {
     "line number": [
      389,
      390
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.tril": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      436
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      435
     ]
    },
    "numpy.core.numeric.where": {
     "line number": [
      438
     ]
    },
    "numpy.core.numeric.zeros": {
     "line number": [
      438
     ]
    },
    "numpy.lib.twodim_base._trilu_dispatcher": {
     "line number": [
      402
     ]
    },
    "numpy.lib.twodim_base.array_function_dispatch": {
     "line number": [
      402
     ]
    },
    "numpy.lib.twodim_base.tri": {
     "line number": [
      436
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.tril_indices": {
  "data": {
   "lineno": 775,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      853
     ]
    },
    "numpy.core.numeric.nonzero": {
     "line number": [
      853
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      775
     ]
    },
    "numpy.lib.twodim_base.tri": {
     "line number": [
      853
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.tril_indices_from": {
  "data": {
   "lineno": 860,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      885
     ]
    },
    "numpy.lib.twodim_base._trilu_indices_form_dispatcher": {
     "line number": [
      860
     ]
    },
    "numpy.lib.twodim_base.array_function_dispatch": {
     "line number": [
      860
     ]
    },
    "numpy.lib.twodim_base.tril_indices": {
     "line number": [
      886
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.triu": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      465
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      464
     ]
    },
    "numpy.core.numeric.where": {
     "line number": [
      467
     ]
    },
    "numpy.core.numeric.zeros": {
     "line number": [
      467
     ]
    },
    "numpy.lib.twodim_base._trilu_dispatcher": {
     "line number": [
      441
     ]
    },
    "numpy.lib.twodim_base.array_function_dispatch": {
     "line number": [
      441
     ]
    },
    "numpy.lib.twodim_base.tri": {
     "line number": [
      465
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.triu_indices": {
  "data": {
   "lineno": 889,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      969
     ]
    },
    "numpy.core.numeric.nonzero": {
     "line number": [
      969
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      889
     ]
    },
    "numpy.lib.twodim_base.tri": {
     "line number": [
      969
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.triu_indices_from": {
  "data": {
   "lineno": 972,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1001
     ]
    },
    "numpy.lib.twodim_base._trilu_indices_form_dispatcher": {
     "line number": [
      972
     ]
    },
    "numpy.lib.twodim_base.array_function_dispatch": {
     "line number": [
      972
     ]
    },
    "numpy.lib.twodim_base.triu_indices": {
     "line number": [
      1002
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.vander": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      550
     ]
    },
    "int": {
     "line number": [
      554
     ]
    },
    "len": {
     "line number": [
      552,
      554
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      548
     ]
    },
    "numpy.core.numeric.empty": {
     "line number": [
      554
     ]
    },
    "numpy.core.numeric.multiply.accumulate": {
     "line number": [
      561
     ]
    },
    "numpy.core.numeric.promote_types": {
     "line number": [
      554
     ]
    },
    "numpy.lib.twodim_base._vander_dispatcher": {
     "line number": [
      475
     ]
    },
    "numpy.lib.twodim_base.array_function_dispatch": {
     "line number": [
      475
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.twodim_base.where": {
  "data": {
   "shadows": "numpy.core.numeric.where"
  },
  "type": "import"
 },
 "numpy.lib.twodim_base.zeros": {
  "data": {
   "shadows": "numpy.core.numeric.zeros"
  },
  "type": "import"
 },
 "numpy.lib.type_check": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.numeric.cdouble": {
     "line number": [
      631,
      637
     ]
    },
    "numpy.core.numeric.clongdouble": {
     "line number": [
      631,
      638
     ]
    },
    "numpy.core.numeric.csingle": {
     "line number": [
      631,
      636
     ]
    },
    "numpy.core.numeric.double": {
     "line number": [
      630,
      634
     ]
    },
    "numpy.core.numeric.half": {
     "line number": [
      630,
      632
     ]
    },
    "numpy.core.numeric.longdouble": {
     "line number": [
      630,
      635
     ]
    },
    "numpy.core.numeric.single": {
     "line number": [
      630,
      633
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      21
     ]
    },
    "numpy.lib.type_check.functools": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.type_check.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "numpy.lib.type_check._asfarray_dispatcher": {
  "data": {
   "lineno": 83
  },
  "type": "function"
 },
 "numpy.lib.type_check._asscalar_dispatcher": {
  "data": {
   "lineno": 513
  },
  "type": "function"
 },
 "numpy.lib.type_check._common_type_dispatcher": {
  "data": {
   "lineno": 641
  },
  "type": "function"
 },
 "numpy.lib.type_check._getmaxmin": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": {
    "numpy.core.getlimits.finfo": {
     "line number": [
      362
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check._imag_dispatcher": {
  "data": {
   "lineno": 166
  },
  "type": "function"
 },
 "numpy.lib.type_check._is_type_dispatcher": {
  "data": {
   "lineno": 209
  },
  "type": "function"
 },
 "numpy.lib.type_check._namefromtype": {
  "data": {
   "lineno": 551
  },
  "type": "constant"
 },
 "numpy.lib.type_check._nan_to_num_dispatcher": {
  "data": {
   "lineno": 366
  },
  "type": "function"
 },
 "numpy.lib.type_check._nx": {
  "data": {
   "shadows": "numpy.core.numeric"
  },
  "type": "import"
 },
 "numpy.lib.type_check._real_dispatcher": {
  "data": {
   "lineno": 120
  },
  "type": "function"
 },
 "numpy.lib.type_check._real_if_close_dispatcher": {
  "data": {
   "lineno": 453
  },
  "type": "function"
 },
 "numpy.lib.type_check._typecodes_by_elsize": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "numpy.lib.type_check.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.type_check.array_function_dispatch": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.lib.type_check.array_precision": {
  "data": {
   "lineno": 632
  },
  "type": "constant"
 },
 "numpy.lib.type_check.array_type": {
  "data": {
   "lineno": 630
  },
  "type": "constant"
 },
 "numpy.lib.type_check.asanyarray": {
  "data": {
   "shadows": "numpy.core.numeric.asanyarray"
  },
  "type": "import"
 },
 "numpy.lib.type_check.asarray": {
  "data": {
   "shadows": "numpy.core.numeric.asarray"
  },
  "type": "import"
 },
 "numpy.lib.type_check.asfarray": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "numpy.core.numeric.asarray": {
     "line number": [
      117
     ]
    },
    "numpy.core.numeric.float_": {
     "line number": [
      88,
      116
     ]
    },
    "numpy.core.numeric.inexact": {
     "line number": [
      115
     ]
    },
    "numpy.core.numeric.issubdtype": {
     "line number": [
      115
     ]
    },
    "numpy.lib.type_check._asfarray_dispatcher": {
     "line number": [
      87
     ]
    },
    "numpy.lib.type_check.array_function_dispatch": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.asscalar": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      546
     ]
    },
    "numpy.lib.type_check._asscalar_dispatcher": {
     "line number": [
      517
     ]
    },
    "numpy.lib.type_check.array_function_dispatch": {
     "line number": [
      517
     ]
    },
    "numpy.lib.type_check.warnings": {
     "line number": [
      545
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.common_type": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      693
     ]
    },
    "issubclass": {
     "line number": [
      688
     ]
    },
    "max": {
     "line number": [
      694
     ]
    },
    "numpy.core.numeric.integer": {
     "line number": [
      688
     ]
    },
    "numpy.lib.type_check._common_type_dispatcher": {
     "line number": [
      645
     ]
    },
    "numpy.lib.type_check.array_function_dispatch": {
     "line number": [
      645
     ]
    },
    "numpy.lib.type_check.array_precision": {
     "line number": [
      691
     ]
    },
    "numpy.lib.type_check.array_type": {
     "line number": [
      696,
      698
     ]
    },
    "numpy.lib.type_check.iscomplexobj": {
     "line number": [
      686
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.type_check.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.lib.type_check.getlimits": {
  "data": {
   "shadows": "numpy.core.getlimits"
  },
  "type": "import"
 },
 "numpy.lib.type_check.imag": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      205
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      206
     ]
    },
    "numpy.lib.type_check._imag_dispatcher": {
     "line number": [
      170
     ]
    },
    "numpy.lib.type_check.array_function_dispatch": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.iscomplex": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      246
     ]
    },
    "issubclass": {
     "line number": [
      244
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      243
     ]
    },
    "numpy.core.numeric.complexfloating": {
     "line number": [
      244
     ]
    },
    "numpy.core.numeric.zeros": {
     "line number": [
      246
     ]
    },
    "numpy.lib.type_check._is_type_dispatcher": {
     "line number": [
      213
     ]
    },
    "numpy.lib.type_check.array_function_dispatch": {
     "line number": [
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.iscomplexobj": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      318
     ]
    },
    "issubclass": {
     "line number": [
      320
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      319
     ]
    },
    "numpy.core.numeric.complexfloating": {
     "line number": [
      320
     ]
    },
    "numpy.lib.type_check._is_type_dispatcher": {
     "line number": [
      282
     ]
    },
    "numpy.lib.type_check.array_function_dispatch": {
     "line number": [
      282
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.isnan": {
  "data": {
   "shadows": "numpy.core.numeric.isnan"
  },
  "type": "import"
 },
 "numpy.lib.type_check.isreal": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "numpy.lib.type_check._is_type_dispatcher": {
     "line number": [
      250
     ]
    },
    "numpy.lib.type_check.array_function_dispatch": {
     "line number": [
      250
     ]
    },
    "numpy.lib.type_check.imag": {
     "line number": [
      279
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.isrealobj": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": {
    "numpy.lib.type_check._is_type_dispatcher": {
     "line number": [
      323
     ]
    },
    "numpy.lib.type_check.array_function_dispatch": {
     "line number": [
      323
     ]
    },
    "numpy.lib.type_check.iscomplexobj": {
     "line number": [
      356
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.mintypecode": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      71
     ]
    },
    "numpy.core.numeric.asarray": {
     "line number": [
      71
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      27
     ]
    },
    "numpy.lib.type_check._typecodes_by_elsize": {
     "line number": [
      78
     ]
    },
    "str": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.nan_to_num": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": {
    "isneginf": {
     "line number": [
      448
     ]
    },
    "isposinf": {
     "line number": [
      447
     ]
    },
    "issubclass": {
     "line number": [
      438,
      441
     ]
    },
    "numpy.core.numeric.array": {
     "line number": [
      433
     ]
    },
    "numpy.core.numeric.complexfloating": {
     "line number": [
      441
     ]
    },
    "numpy.core.numeric.copyto": {
     "line number": [
      446,
      447,
      448
     ]
    },
    "numpy.core.numeric.inexact": {
     "line number": [
      438
     ]
    },
    "numpy.core.numeric.isnan": {
     "line number": [
      446
     ]
    },
    "numpy.lib.type_check._getmaxmin": {
     "line number": [
      444
     ]
    },
    "numpy.lib.type_check._nan_to_num_dispatcher": {
     "line number": [
      370
     ]
    },
    "numpy.lib.type_check.array_function_dispatch": {
     "line number": [
      370
     ]
    },
    "numpy.lib.type_check.iscomplex": {
     "line number": [
      441,
      443
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.overrides": {
  "data": {
   "shadows": "numpy.core.overrides"
  },
  "type": "import"
 },
 "numpy.lib.type_check.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.type_check.real": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      162
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      163
     ]
    },
    "numpy.lib.type_check._real_dispatcher": {
     "line number": [
      124
     ]
    },
    "numpy.lib.type_check.array_function_dispatch": {
     "line number": [
      124
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.real_if_close": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      502
     ]
    },
    "numpy.core.getlimits.finfo": {
     "line number": [
      506
     ]
    },
    "numpy.core.numeric.absolute": {
     "line number": [
      508
     ]
    },
    "numpy.core.numeric.all": {
     "line number": [
      508
     ]
    },
    "numpy.core.numeric.asanyarray": {
     "line number": [
      501
     ]
    },
    "numpy.core.numeric.complexfloating": {
     "line number": [
      502
     ]
    },
    "numpy.lib.type_check._real_if_close_dispatcher": {
     "line number": [
      457
     ]
    },
    "numpy.lib.type_check.array_function_dispatch": {
     "line number": [
      457
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.set_module": {
  "data": {
   "shadows": "numpy.core.overrides.set_module"
  },
  "type": "import"
 },
 "numpy.lib.type_check.typename": {
  "data": {
   "lineno": 575,
   "symbols_in_volume": {
    "numpy.core.overrides.set_module": {
     "line number": [
      575
     ]
    },
    "numpy.lib.type_check._namefromtype": {
     "line number": [
      625
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.type_check.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.lib.type_check.zeros": {
  "data": {
   "shadows": "numpy.core.numeric.zeros"
  },
  "type": "import"
 },
 "numpy.lib.ufunclike": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.overrides.ENABLE_ARRAY_FUNCTION": {
     "line number": [
      58
     ]
    },
    "numpy.lib.ufunclike._deprecate_out_named_y": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.ufunclike.ENABLE_ARRAY_FUNCTION": {
  "data": {
   "shadows": "numpy.core.overrides.ENABLE_ARRAY_FUNCTION"
  },
  "type": "import"
 },
 "numpy.lib.ufunclike.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "numpy.lib.ufunclike._deprecate_out_named_y": {
  "data": {
   "lineno": 16
  },
  "type": "function"
 },
 "numpy.lib.ufunclike._deprecate_out_named_y.func": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      35
     ]
    },
    "TypeError": {
     "line number": [
      26
     ]
    },
    "f": {
     "line number": [
      36,
      22
     ]
    },
    "numpy.lib.ufunclike.functools": {
     "line number": [
      22
     ]
    },
    "numpy.lib.ufunclike.warnings": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.ufunclike._dispatcher": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "numpy.lib.ufunclike._deprecate_out_named_y": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.ufunclike._fix_out_named_y": {
  "data": {
   "lineno": 59
  },
  "type": "constant"
 },
 "numpy.lib.ufunclike._fix_out_named_y.func": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "f": {
     "line number": [
      53,
      48
     ]
    },
    "numpy.lib.ufunclike.functools": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.ufunclike.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.ufunclike.array_function_dispatch": {
  "data": {
   "shadows": "numpy.core.overrides.array_function_dispatch"
  },
  "type": "import"
 },
 "numpy.lib.ufunclike.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.ufunclike.fix": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "numpy.core.numeric.asanyarray": {
     "line number": [
      104
     ]
    },
    "numpy.core.numeric.ceil": {
     "line number": [
      104
     ]
    },
    "numpy.core.numeric.floor": {
     "line number": [
      105
     ]
    },
    "numpy.core.numeric.greater_equal": {
     "line number": [
      105
     ]
    },
    "numpy.core.numeric.ndarray": {
     "line number": [
      109
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      67
     ]
    },
    "numpy.lib.ufunclike._dispatcher": {
     "line number": [
      67
     ]
    },
    "numpy.lib.ufunclike._fix_out_named_y": {
     "line number": [
      68
     ]
    },
    "type": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.ufunclike.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.lib.ufunclike.isneginf": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      246,
      247
     ]
    },
    "numpy.core.numeric.isinf": {
     "line number": [
      243
     ]
    },
    "numpy.core.numeric.logical_and": {
     "line number": [
      250
     ]
    },
    "numpy.core.numeric.signbit": {
     "line number": [
      245
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      183
     ]
    },
    "numpy.lib.ufunclike._dispatcher": {
     "line number": [
      183
     ]
    },
    "numpy.lib.ufunclike._fix_out_named_y": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.ufunclike.isposinf": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      176,
      177
     ]
    },
    "numpy.core.numeric.isinf": {
     "line number": [
      173
     ]
    },
    "numpy.core.numeric.logical_and": {
     "line number": [
      180
     ]
    },
    "numpy.core.numeric.signbit": {
     "line number": [
      175
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      114
     ]
    },
    "numpy.lib.ufunclike._dispatcher": {
     "line number": [
      114
     ]
    },
    "numpy.lib.ufunclike._fix_out_named_y": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.ufunclike.nx": {
  "data": {
   "shadows": "numpy.core.numeric"
  },
  "type": "import"
 },
 "numpy.lib.ufunclike.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.ufunclike.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.lib.user_array": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      271
     ]
    },
    "dir": {
     "line number": [
      276
     ]
    },
    "numpy.core.arange": {
     "line number": [
      272,
      286
     ]
    },
    "numpy.core.less": {
     "line number": [
      285,
      285
     ]
    },
    "numpy.core.reshape": {
     "line number": [
      272,
      286,
      287
     ]
    },
    "numpy.core.shape": {
     "line number": [
      277,
      286
     ]
    },
    "numpy.core.sin": {
     "line number": [
      284
     ]
    },
    "numpy.core.sqrt": {
     "line number": [
      284
     ]
    },
    "numpy.core.transpose": {
     "line number": [
      288
     ]
    },
    "numpy.lib.user_array.container": {
     "line number": [
      274
     ]
    },
    "numpy.lib.user_array.temp": {
     "line number": [
      274
     ]
    },
    "numpy.lib.user_array.ua": {
     "line number": [
      276,
      277,
      277,
      279,
      283
     ]
    },
    "numpy.lib.user_array.ua_small": {
     "line number": [
      280,
      282,
      283,
      284,
      284,
      285,
      285,
      286,
      286,
      287,
      288
     ]
    },
    "print": {
     "line number": [
      276,
      277,
      280,
      283,
      284,
      285,
      286,
      287,
      288
     ]
    },
    "type": {
     "line number": [
      285,
      286
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.user_array.absolute": {
  "data": {
   "shadows": "numpy.core.absolute"
  },
  "type": "import"
 },
 "numpy.lib.user_array.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.user_array.add": {
  "data": {
   "shadows": "numpy.core.add"
  },
  "type": "import"
 },
 "numpy.lib.user_array.arange": {
  "data": {
   "shadows": "numpy.core.arange"
  },
  "type": "import"
 },
 "numpy.lib.user_array.array": {
  "data": {
   "shadows": "numpy.core.array"
  },
  "type": "import"
 },
 "numpy.lib.user_array.asarray": {
  "data": {
   "shadows": "numpy.core.asarray"
  },
  "type": "import"
 },
 "numpy.lib.user_array.bitwise_and": {
  "data": {
   "shadows": "numpy.core.bitwise_and"
  },
  "type": "import"
 },
 "numpy.lib.user_array.bitwise_or": {
  "data": {
   "shadows": "numpy.core.bitwise_or"
  },
  "type": "import"
 },
 "numpy.lib.user_array.bitwise_xor": {
  "data": {
   "shadows": "numpy.core.bitwise_xor"
  },
  "type": "import"
 },
 "numpy.lib.user_array.container": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "object": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.user_array.container.__abs__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "numpy.core.absolute": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__add__": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__and__": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "numpy.core.bitwise_and": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__array__": {
  "data": {
   "lineno": 42
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__array_wrap__": {
  "data": {
   "lineno": 250
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__complex__": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__div__": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      92
     ]
    },
    "numpy.core.divide": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__divmod__": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "numpy.core.divide": {
     "line number": [
      112
     ]
    },
    "numpy.core.remainder": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__eq__": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "numpy.core.equal": {
     "line number": [
      217
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__float__": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "float": {
     "line number": [
      196
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__ge__": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "numpy.core.greater_equal": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__getattr__": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "object.__getattribute__": {
     "line number": [
      265
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__getitem__": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__gt__": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": {
    "numpy.core.greater": {
     "line number": [
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__hex__": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "hex": {
     "line number": [
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__iadd__": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "numpy.core.add": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__iand__": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "numpy.core.bitwise_and": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__idiv__": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "numpy.core.divide": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__ilshift__": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "numpy.core.left_shift": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__imod__": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "numpy.core.remainder": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__imul__": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "numpy.core.multiply": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__init__": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "numpy.core.array": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__int__": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "int": {
     "line number": [
      199
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__invert__": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "numpy.core.invert": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__ior__": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "numpy.core.bitwise_or": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__ipow__": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "numpy.core.power": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__irshift__": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "numpy.core.right_shift": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__isub__": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "numpy.core.subtract": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__ixor__": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": {
    "numpy.core.bitwise_xor": {
     "line number": [
      166
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__le__": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": {
    "numpy.core.less_equal": {
     "line number": [
      214
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__len__": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "len": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__long__": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "numpy.compat.long": {
     "line number": [
      202
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__lshift__": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "numpy.core.left_shift": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__lt__": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "numpy.core.less": {
     "line number": [
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__mod__": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "numpy.core.remainder": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__mul__": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      83
     ]
    },
    "numpy.core.multiply": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__ne__": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": {
    "numpy.core.not_equal": {
     "line number": [
      220
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__neg__": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__oct__": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "oct": {
     "line number": [
      208
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__or__": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": {
    "numpy.core.bitwise_or": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__pos__": {
  "data": {
   "lineno": 179
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__pow__": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      120
     ]
    },
    "numpy.core.power": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__rand__": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "numpy.core.bitwise_and": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__rdiv__": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      95
     ]
    },
    "numpy.core.divide": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__rdivmod__": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "numpy.core.divide": {
     "line number": [
      116
     ]
    },
    "numpy.core.remainder": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__repr__": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "len": {
     "line number": [
      38
     ]
    },
    "repr": {
     "line number": [
      38,
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__rlshift__": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "numpy.core.left_shift": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__rmod__": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "numpy.core.remainder": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__ror__": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": {
    "numpy.core.bitwise_or": {
     "line number": [
      173
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__rpow__": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      123
     ]
    },
    "numpy.core.power": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__rrshift__": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "numpy.core.right_shift": {
     "line number": [
      139
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__rshift__": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "numpy.core.right_shift": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__rsub__": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__rxor__": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "numpy.core.bitwise_xor": {
     "line number": [
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__setattr__": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      259
     ]
    },
    "object.__setattr__": {
     "line number": [
      255,
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__setitem__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__sub__": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.__xor__": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "numpy.core.bitwise_xor": {
     "line number": [
      160
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container._rc": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "len": {
     "line number": [
      245
     ]
    },
    "numpy.core.shape": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container._scalarfunc": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      189
     ]
    },
    "func": {
     "line number": [
      187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.astype": {
  "data": {
   "lineno": 240
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.byteswap": {
  "data": {
   "lineno": 236
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.copy": {
  "data": {
   "lineno": 228
  },
  "type": "function"
 },
 "numpy.lib.user_array.container.tostring": {
  "data": {
   "lineno": 232
  },
  "type": "function"
 },
 "numpy.lib.user_array.divide": {
  "data": {
   "shadows": "numpy.core.divide"
  },
  "type": "import"
 },
 "numpy.lib.user_array.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.user_array.equal": {
  "data": {
   "shadows": "numpy.core.equal"
  },
  "type": "import"
 },
 "numpy.lib.user_array.greater": {
  "data": {
   "shadows": "numpy.core.greater"
  },
  "type": "import"
 },
 "numpy.lib.user_array.greater_equal": {
  "data": {
   "shadows": "numpy.core.greater_equal"
  },
  "type": "import"
 },
 "numpy.lib.user_array.invert": {
  "data": {
   "shadows": "numpy.core.invert"
  },
  "type": "import"
 },
 "numpy.lib.user_array.left_shift": {
  "data": {
   "shadows": "numpy.core.left_shift"
  },
  "type": "import"
 },
 "numpy.lib.user_array.less": {
  "data": {
   "shadows": "numpy.core.less"
  },
  "type": "import"
 },
 "numpy.lib.user_array.less_equal": {
  "data": {
   "shadows": "numpy.core.less_equal"
  },
  "type": "import"
 },
 "numpy.lib.user_array.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.lib.user_array.multiply": {
  "data": {
   "shadows": "numpy.core.multiply"
  },
  "type": "import"
 },
 "numpy.lib.user_array.not_equal": {
  "data": {
   "shadows": "numpy.core.not_equal"
  },
  "type": "import"
 },
 "numpy.lib.user_array.power": {
  "data": {
   "shadows": "numpy.core.power"
  },
  "type": "import"
 },
 "numpy.lib.user_array.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.user_array.remainder": {
  "data": {
   "shadows": "numpy.core.remainder"
  },
  "type": "import"
 },
 "numpy.lib.user_array.reshape": {
  "data": {
   "shadows": "numpy.core.reshape"
  },
  "type": "import"
 },
 "numpy.lib.user_array.right_shift": {
  "data": {
   "shadows": "numpy.core.right_shift"
  },
  "type": "import"
 },
 "numpy.lib.user_array.shape": {
  "data": {
   "shadows": "numpy.core.shape"
  },
  "type": "import"
 },
 "numpy.lib.user_array.sin": {
  "data": {
   "shadows": "numpy.core.sin"
  },
  "type": "import"
 },
 "numpy.lib.user_array.sqrt": {
  "data": {
   "shadows": "numpy.core.sqrt"
  },
  "type": "import"
 },
 "numpy.lib.user_array.subtract": {
  "data": {
   "shadows": "numpy.core.subtract"
  },
  "type": "import"
 },
 "numpy.lib.user_array.temp": {
  "data": {
   "lineno": 272
  },
  "type": "constant"
 },
 "numpy.lib.user_array.transpose": {
  "data": {
   "shadows": "numpy.core.transpose"
  },
  "type": "import"
 },
 "numpy.lib.user_array.ua": {
  "data": {
   "lineno": 274
  },
  "type": "constant"
 },
 "numpy.lib.user_array.ua_small": {
  "data": {
   "lineno": 279
  },
  "type": "constant"
 },
 "numpy.lib.utils": {
  "data": {
   "symbols_in_volume": {
    "numpy.lib.utils._Deprecate": {
     "line number": [
      172
     ]
    },
    "numpy.lib.utils.re": {
     "line number": [
      698,
      698
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.lib.utils.SafeEval": {
  "data": {
   "lineno": 994,
   "symbols_in_volume": {
    "object": {
     "line number": [
      994
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.utils.SafeEval.__init__": {
  "data": {
   "lineno": 1008,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1011
     ]
    },
    "numpy.lib.utils.warnings": {
     "line number": [
      1010
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.default": {
  "data": {
   "lineno": 1018,
   "symbols_in_volume": {
    "SyntaxError": {
     "line number": [
      1019
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.visit": {
  "data": {
   "lineno": 1013,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      1015
     ]
    },
    "meth": {
     "line number": [
      1016
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.visitBytes": {
  "data": {
   "lineno": 1031
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.visitDict": {
  "data": {
   "lineno": 1034,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      1035
     ]
    },
    "zip": {
     "line number": [
      1036
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.visitExpression": {
  "data": {
   "lineno": 1022
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.visitList": {
  "data": {
   "lineno": 1041
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.visitName": {
  "data": {
   "lineno": 1053,
   "symbols_in_volume": {
    "SyntaxError": {
     "line number": [
      1061
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.visitNameConstant": {
  "data": {
   "lineno": 1063
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.visitNum": {
  "data": {
   "lineno": 1025
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.visitStr": {
  "data": {
   "lineno": 1028
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.visitTuple": {
  "data": {
   "lineno": 1038,
   "symbols_in_volume": {
    "tuple": {
     "line number": [
      1039
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.SafeEval.visitUnaryOp": {
  "data": {
   "lineno": 1044,
   "symbols_in_volume": {
    "SyntaxError": {
     "line number": [
      1051
     ]
    },
    "isinstance": {
     "line number": [
      1046,
      1048
     ]
    },
    "numpy.lib.utils.ast": {
     "line number": [
      1046,
      1048
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.StringIO": {
  "data": {
   "shadows": "StringIO.StringIO"
  },
  "type": "import"
 },
 "numpy.lib.utils._Deprecate": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "object": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.lib.utils._Deprecate.__call__": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      87,
      112
     ]
    },
    "func.__dict__": {
     "line number": [
      111
     ]
    },
    "func.__doc__": {
     "line number": [
      104
     ]
    },
    "numpy.lib.utils._set_function_name": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils._Deprecate.__call__.newfunc": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      100
     ]
    },
    "func": {
     "line number": [
      101
     ]
    },
    "numpy.lib.utils.warnings": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils._Deprecate.__init__": {
  "data": {
   "lineno": 70
  },
  "type": "function"
 },
 "numpy.lib.utils.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.lib.utils._dictlist": {
  "data": {
   "lineno": 361
  },
  "type": "constant"
 },
 "numpy.lib.utils._function_signature_re": {
  "data": {
   "lineno": 698
  },
  "type": "constant"
 },
 "numpy.lib.utils._getmembers": {
  "data": {
   "lineno": 970,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      974
     ]
    },
    "dir": {
     "line number": [
      975
     ]
    },
    "getattr": {
     "line number": [
      975
     ]
    },
    "hasattr": {
     "line number": [
      976
     ]
    },
    "numpy.lib.utils.inspect": {
     "line number": [
      973
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils._info": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": {
    "bp": {
     "line number": [
      415,
      416,
      432
     ]
    },
    "getattr": {
     "line number": [
      406,
      407
     ]
    },
    "hex": {
     "line number": [
      419
     ]
    },
    "numpy.lib.utils.sys": {
     "line number": [
      385,
      424,
      428,
      431
     ]
    },
    "print": {
     "line number": [
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      422,
      424,
      427,
      430,
      432,
      433
     ]
    },
    "type": {
     "line number": [
      406
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils._lookfor_caches": {
  "data": {
   "lineno": 694
  },
  "type": "constant"
 },
 "numpy.lib.utils._lookfor_generate_cache": {
  "data": {
   "lineno": 830,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      898
     ]
    },
    "BaseException": {
     "line number": [
      928
     ]
    },
    "ImportError": {
     "line number": [
      866
     ]
    },
    "NameError": {
     "line number": [
      935,
      962
     ]
    },
    "StringIO.StringIO": {
     "line number": [
      921,
      922
     ]
    },
    "__import__": {
     "line number": [
      865,
      923
     ]
    },
    "getattr": {
     "line number": [
      933,
      934
     ]
    },
    "hasattr": {
     "line number": [
      902,
      957
     ]
    },
    "id": {
     "line number": [
      876,
      877,
      881,
      887,
      889
     ]
    },
    "isinstance": {
     "line number": [
      863,
      869,
      869,
      945
     ]
    },
    "list": {
     "line number": [
      869
     ]
    },
    "numpy.core.ufunc": {
     "line number": [
      945
     ]
    },
    "numpy.lib.utils._getmembers": {
     "line number": [
      931,
      955
     ]
    },
    "numpy.lib.utils._lookfor_caches": {
     "line number": [
      876,
      877,
      881
     ]
    },
    "numpy.lib.utils.inspect": {
     "line number": [
      894,
      950,
      953,
      961
     ]
    },
    "numpy.lib.utils.os": {
     "line number": [
      904,
      905,
      906,
      907,
      910
     ]
    },
    "numpy.lib.utils.sys": {
     "line number": [
      854,
      868,
      918,
      919,
      921,
      922,
      925,
      926
     ]
    },
    "str": {
     "line number": [
      863
     ]
    },
    "tuple": {
     "line number": [
      869
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils._makenamedict": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": {
    "__import__": {
     "line number": [
      366
     ]
    },
    "globals": {
     "line number": [
      366
     ]
    },
    "isinstance": {
     "line number": [
      375
     ]
    },
    "len": {
     "line number": [
      371
     ]
    },
    "locals": {
     "line number": [
      366
     ]
    },
    "numpy.lib.utils.types": {
     "line number": [
      375
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils._median_nancheck": {
  "data": {
   "lineno": 1116,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      1146,
      1155
     ]
    },
    "numpy.lib.utils.numpy": {
     "line number": [
      1138,
      1139,
      1141,
      1148,
      1151,
      1152,
      1154,
      1156
     ]
    },
    "numpy.lib.utils.warnings": {
     "line number": [
      1145,
      1153
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils._namedict": {
  "data": {
   "lineno": 360
  },
  "type": "constant"
 },
 "numpy.lib.utils._set_function_name": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "numpy.lib.utils._split_line": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "len": {
     "line number": [
      342,
      352,
      352,
      354
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.lib.utils.asarray": {
  "data": {
   "shadows": "numpy.core.asarray"
  },
  "type": "import"
 },
 "numpy.lib.utils.ast": {
  "data": {
   "shadows": "ast"
  },
  "type": "import"
 },
 "numpy.lib.utils.byte_bounds": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      215
     ]
    },
    "zip": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.core": {
  "data": {
   "shadows": "numpy.core"
  },
  "type": "import"
 },
 "numpy.lib.utils.deprecate": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "numpy.lib.utils._Deprecate": {
     "line number": [
      168,
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.deprecate_with_doc": {
  "data": {
   "lineno": 172
  },
  "type": "constant"
 },
 "numpy.lib.utils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.lib.utils.formatargspec": {
  "data": {
   "shadows": "numpy.compat.formatargspec"
  },
  "type": "import"
 },
 "numpy.lib.utils.get_include": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "numpy.core.__file__": {
     "line number": [
      49
     ]
    },
    "numpy.lib.utils.numpy": {
     "line number": [
      43,
      45
     ]
    },
    "numpy.lib.utils.os": {
     "line number": [
      45,
      45,
      49,
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.getargspec": {
  "data": {
   "shadows": "numpy.compat.getargspec"
  },
  "type": "import"
 },
 "numpy.lib.utils.info": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      554
     ]
    },
    "KeyError": {
     "line number": [
      520
     ]
    },
    "getattr": {
     "line number": [
      576
     ]
    },
    "hasattr": {
     "line number": [
      491,
      492,
      494,
      546,
      565,
      589,
      600,
      638
     ]
    },
    "id": {
     "line number": [
      509,
      515
     ]
    },
    "isinstance": {
     "line number": [
      499,
      501,
      584
     ]
    },
    "len": {
     "line number": [
      534,
      551,
      557,
      594,
      604,
      624,
      630
     ]
    },
    "numpy.compat.formatargspec": {
     "line number": [
      532,
      547,
      590,
      620
     ]
    },
    "numpy.compat.getargspec": {
     "line number": [
      532,
      548,
      591,
      621
     ]
    },
    "numpy.core.ndarray": {
     "line number": [
      499
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      436
     ]
    },
    "numpy.lib.utils._dictlist": {
     "line number": [
      503,
      506
     ]
    },
    "numpy.lib.utils._info": {
     "line number": [
      500
     ]
    },
    "numpy.lib.utils._makenamedict": {
     "line number": [
      503
     ]
    },
    "numpy.lib.utils._namedict": {
     "line number": [
      502,
      503,
      508
     ]
    },
    "numpy.lib.utils._split_line": {
     "line number": [
      535,
      558,
      605,
      631
     ]
    },
    "numpy.lib.utils.inspect": {
     "line number": [
      530,
      540,
      542,
      563,
      566,
      568,
      579,
      610,
      612,
      613,
      616,
      618,
      636,
      639
     ]
    },
    "numpy.lib.utils.pydoc": {
     "line number": [
      570,
      578
     ]
    },
    "numpy.lib.utils.sys": {
     "line number": [
      437,
      583
     ]
    },
    "numpy.lib.utils.types": {
     "line number": [
      584
     ]
    },
    "object": {
     "line number": [
      491,
      492,
      493,
      494,
      495,
      497,
      499,
      500,
      501,
      508,
      523,
      530,
      532,
      540,
      542,
      546,
      563,
      565,
      568,
      570,
      576,
      584,
      589,
      600,
      613,
      616,
      618,
      636,
      638,
      639
     ]
    },
    "object.__call__": {
     "line number": [
      610,
      612
     ]
    },
    "object.__call__.__func__": {
     "line number": [
      591
     ]
    },
    "object.__class__.__name__": {
     "line number": [
      587
     ]
    },
    "object.__func__": {
     "line number": [
      621
     ]
    },
    "object.__init__": {
     "line number": [
      566
     ]
    },
    "object.__init__.__func__": {
     "line number": [
      548
     ]
    },
    "object.__name__": {
     "line number": [
      531,
      543,
      619
     ]
    },
    "object._ppimport_attr": {
     "line number": [
      495
     ]
    },
    "object._ppimport_module": {
     "line number": [
      493
     ]
    },
    "object.name": {
     "line number": [
      601
     ]
    },
    "print": {
     "line number": [
      510,
      516,
      518,
      523,
      525,
      539,
      540,
      562,
      566,
      568,
      572,
      581,
      587,
      588,
      609,
      612,
      613,
      616,
      635,
      636,
      639
     ]
    },
    "str": {
     "line number": [
      501
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "numpy.lib.utils.issubclass_": {
  "data": {
   "shadows": "numpy.core.numerictypes.issubclass_"
  },
  "type": "import"
 },
 "numpy.lib.utils.issubdtype": {
  "data": {
   "shadows": "numpy.core.numerictypes.issubdtype"
  },
  "type": "import"
 },
 "numpy.lib.utils.issubsctype": {
  "data": {
   "shadows": "numpy.core.numerictypes.issubsctype"
  },
  "type": "import"
 },
 "numpy.lib.utils.lookfor": {
  "data": {
   "lineno": 701,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      814
     ]
    },
    "len": {
     "line number": [
      802,
      824
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      701
     ]
    },
    "numpy.lib.utils._function_signature_re": {
     "line number": [
      812
     ]
    },
    "numpy.lib.utils._lookfor_generate_cache": {
     "line number": [
      751
     ]
    },
    "numpy.lib.utils.pydoc": {
     "line number": [
      825
     ]
    },
    "pager": {
     "line number": [
      826
     ]
    },
    "print": {
     "line number": [
      828
     ]
    },
    "str": {
     "line number": [
      756
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.lookfor.relevance": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": {
    "len": {
     "line number": [
      788
     ]
    },
    "max": {
     "line number": [
      793
     ]
    },
    "sum": {
     "line number": [
      784,
      786
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.lookfor.relevance_value": {
  "data": {
   "lineno": 796,
   "symbols_in_volume": {
    "relevance": {
     "line number": [
      797
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.ndarray": {
  "data": {
   "shadows": "numpy.core.ndarray"
  },
  "type": "import"
 },
 "numpy.lib.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.utils.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.lib.utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.lib.utils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.lib.utils.pydoc": {
  "data": {
   "shadows": "pydoc"
  },
  "type": "import"
 },
 "numpy.lib.utils.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.lib.utils.safe_eval": {
  "data": {
   "lineno": 1067,
   "symbols_in_volume": {
    "numpy.lib.utils.ast": {
     "line number": [
      1113
     ]
    },
    "numpy.lib.utils.source": {
     "line number": [
      1113
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.set_module": {
  "data": {
   "shadows": "numpy.core.overrides.set_module"
  },
  "type": "import"
 },
 "numpy.lib.utils.source": {
  "data": {
   "lineno": 642,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      687
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      642
     ]
    },
    "numpy.lib.utils.inspect": {
     "line number": [
      685,
      686
     ]
    },
    "numpy.lib.utils.sys": {
     "line number": [
      643
     ]
    },
    "object": {
     "line number": [
      685,
      686
     ]
    },
    "print": {
     "line number": [
      685,
      686,
      688
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.lib.utils.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.lib.utils.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "numpy.lib.utils.ufunc": {
  "data": {
   "shadows": "numpy.core.ufunc"
  },
  "type": "import"
 },
 "numpy.lib.utils.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.lib.utils.who": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "id": {
     "line number": [
      288
     ]
    },
    "int": {
     "line number": [
      314
     ]
    },
    "isinstance": {
     "line number": [
      286
     ]
    },
    "len": {
     "line number": [
      305,
      307,
      308,
      309,
      310,
      311,
      312,
      316,
      321,
      323,
      325,
      326,
      327
     ]
    },
    "map": {
     "line number": [
      296
     ]
    },
    "max": {
     "line number": [
      317,
      318,
      319
     ]
    },
    "numpy.core.ndarray": {
     "line number": [
      286
     ]
    },
    "numpy.lib.utils.sys": {
     "line number": [
      281
     ]
    },
    "print": {
     "line number": [
      321,
      325,
      329
     ]
    },
    "range": {
     "line number": [
      305,
      323
     ]
    },
    "str": {
     "line number": [
      296,
      297
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      54
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      54,
      55
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.linalg.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.linalg.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.linalg.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.linalg.info": {
  "data": {},
  "type": "module"
 },
 "numpy.linalg.info.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.linalg.info.depends": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "numpy.linalg.info.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.linalg.info.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.linalg.linalg": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.cdouble": {
     "line number": [
      127,
      132,
      130,
      132
     ]
    },
    "numpy.core.csingle": {
     "line number": [
      126,
      131,
      129,
      131
     ]
    },
    "numpy.core.double": {
     "line number": [
      125,
      125,
      127,
      130
     ]
    },
    "numpy.core.fastCopyAndTranspose": {
     "line number": [
      171
     ]
    },
    "numpy.core.intc": {
     "line number": [
      49
     ]
    },
    "numpy.core.overrides.array_function_dispatch": {
     "line number": [
      39
     ]
    },
    "numpy.core.single": {
     "line number": [
      124,
      124,
      126,
      129
     ]
    },
    "numpy.linalg.linalg._determine_error_states": {
     "line number": [
      93,
      94
     ]
    },
    "numpy.linalg.linalg.functools": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.linalg.linalg.Inf": {
  "data": {
   "shadows": "numpy.core.Inf"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.LinAlgError": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      53
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.linalg._A": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "numpy.linalg.linalg._L": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "numpy.linalg.linalg._N": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "numpy.linalg.linalg._S": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "numpy.linalg.linalg._V": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "numpy.linalg.linalg.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "numpy.linalg.linalg._assertFinite": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "numpy.core.isfinite": {
     "line number": [
      217
     ]
    },
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      218
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._assertNdSquareness": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._assertNoEmpty2d": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": {
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      227
     ]
    },
    "numpy.linalg.linalg._isEmpty2d": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._assertRank2": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._assertRankAtLeast2": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._commonType": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      155
     ]
    },
    "issubclass": {
     "line number": [
      149
     ]
    },
    "numpy.core.cdouble": {
     "line number": [
      162
     ]
    },
    "numpy.core.double": {
     "line number": [
      158,
      159,
      160,
      165
     ]
    },
    "numpy.core.inexact": {
     "line number": [
      149
     ]
    },
    "numpy.core.single": {
     "line number": [
      146
     ]
    },
    "numpy.linalg.linalg._complex_types_map": {
     "line number": [
      163
     ]
    },
    "numpy.linalg.linalg._realType": {
     "line number": [
      152
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._complexType": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "numpy.core.cdouble": {
     "line number": [
      137
     ]
    },
    "numpy.linalg.linalg._complex_types_map": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._complex_types_map": {
  "data": {
   "lineno": 129
  },
  "type": "constant"
 },
 "numpy.linalg.linalg._cond_dispatcher": {
  "data": {
   "lineno": 1629
  },
  "type": "function"
 },
 "numpy.linalg.linalg._convertarray": {
  "data": {
   "lineno": 1173,
   "symbols_in_volume": {
    "numpy.linalg.linalg._commonType": {
     "line number": [
      1174
     ]
    },
    "numpy.linalg.linalg._fastCT": {
     "line number": [
      1175
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._determine_error_states": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "numpy.core.errstate": {
     "line number": [
      86
     ]
    },
    "numpy.core.geterrobj": {
     "line number": [
      83,
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._eigvalsh_dispatcher": {
  "data": {
   "lineno": 1076
  },
  "type": "function"
 },
 "numpy.linalg.linalg._fastCT": {
  "data": {
   "lineno": 171
  },
  "type": "constant"
 },
 "numpy.linalg.linalg._fastCopyAndTranspose": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "len": {
     "line number": [
      192
     ]
    },
    "numpy.linalg.linalg._fastCT": {
     "line number": [
      189,
      191
     ]
    },
    "type": {
     "line number": [
      188,
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._isEmpty2d": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "numpy.core.product": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._linalgRealType": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "numpy.core.double": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._linalg_error_extobj": {
  "data": {
   "lineno": 93
  },
  "type": "constant"
 },
 "numpy.linalg.linalg._lstsq_dispatcher": {
  "data": {
   "lineno": 2100
  },
  "type": "function"
 },
 "numpy.linalg.linalg._makearray": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      118
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._matrix_power_dispatcher": {
  "data": {
   "lineno": 555
  },
  "type": "function"
 },
 "numpy.linalg.linalg._matrix_rank_dispatcher": {
  "data": {
   "lineno": 1751
  },
  "type": "function"
 },
 "numpy.linalg.linalg._multi_dot": {
  "data": {
   "lineno": 2714,
   "symbols_in_volume": {
    "numpy.core.dot": {
     "line number": [
      2719
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._multi_dot_matrix_chain_order": {
  "data": {
   "lineno": 2673,
   "symbols_in_volume": {
    "len": {
     "line number": [
      2690
     ]
    },
    "numpy.core.Inf": {
     "line number": [
      2704
     ]
    },
    "numpy.core.double": {
     "line number": [
      2696
     ]
    },
    "numpy.core.empty": {
     "line number": [
      2699
     ]
    },
    "numpy.core.intp": {
     "line number": [
      2699
     ]
    },
    "numpy.core.zeros": {
     "line number": [
      2696
     ]
    },
    "range": {
     "line number": [
      2701,
      2702,
      2705
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._multi_dot_three": {
  "data": {
   "lineno": 2652,
   "symbols_in_volume": {
    "numpy.core.dot": {
     "line number": [
      2668,
      2668,
      2670,
      2670
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._multi_svd_norm": {
  "data": {
   "lineno": 2261,
   "symbols_in_volume": {
    "numpy.core.moveaxis": {
     "line number": [
      2284
     ]
    },
    "numpy.linalg.linalg.svd": {
     "line number": [
      2285
     ]
    },
    "op": {
     "line number": [
      2285
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._multidot_dispatcher": {
  "data": {
   "lineno": 2536
  },
  "type": "function"
 },
 "numpy.linalg.linalg._norm_dispatcher": {
  "data": {
   "lineno": 2289
  },
  "type": "function"
 },
 "numpy.linalg.linalg._pinv_dispatcher": {
  "data": {
   "lineno": 1860
  },
  "type": "function"
 },
 "numpy.linalg.linalg._qr_dispatcher": {
  "data": {
   "lineno": 765
  },
  "type": "function"
 },
 "numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._raise_linalgerror_lstsq": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._raise_linalgerror_nonposdef": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._raise_linalgerror_singular": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._raise_linalgerror_svd_nonconvergence": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._realType": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "numpy.core.double": {
     "line number": [
      134
     ]
    },
    "numpy.linalg.linalg._real_types_map": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._real_types_map": {
  "data": {
   "lineno": 124
  },
  "type": "constant"
 },
 "numpy.linalg.linalg._solve_dispatcher": {
  "data": {
   "lineno": 323
  },
  "type": "function"
 },
 "numpy.linalg.linalg._svd_dispatcher": {
  "data": {
   "lineno": 1464
  },
  "type": "function"
 },
 "numpy.linalg.linalg._tensorinv_dispatcher": {
  "data": {
   "lineno": 408
  },
  "type": "function"
 },
 "numpy.linalg.linalg._tensorsolve_dispatcher": {
  "data": {
   "lineno": 248
  },
  "type": "function"
 },
 "numpy.linalg.linalg._to_native_byte_order": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "len": {
     "line number": [
      180
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg._umath_linalg": {
  "data": {
   "shadows": "numpy.linalg._umath_linalg"
  },
  "type": "import"
 },
 "numpy.linalg.linalg._unary_dispatcher": {
  "data": {
   "lineno": 482
  },
  "type": "function"
 },
 "numpy.linalg.linalg.abs": {
  "data": {
   "shadows": "numpy.core.abs"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.add": {
  "data": {
   "shadows": "numpy.core.add"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.all": {
  "data": {
   "shadows": "numpy.core.all"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.amax": {
  "data": {
   "shadows": "numpy.core.amax"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.amin": {
  "data": {
   "shadows": "numpy.core.amin"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.array": {
  "data": {
   "shadows": "numpy.core.array"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.array_function_dispatch": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "numpy.linalg.linalg.asanyarray": {
  "data": {
   "shadows": "numpy.core.asanyarray"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.asarray": {
  "data": {
   "shadows": "numpy.core.asarray"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.atleast_2d": {
  "data": {
   "shadows": "numpy.core.atleast_2d"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.cdouble": {
  "data": {
   "shadows": "numpy.core.cdouble"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.cholesky": {
  "data": {
   "lineno": 678,
   "symbols_in_volume": {
    "gufunc": {
     "line number": [
      753,
      759
     ]
    },
    "numpy.linalg._umath_linalg.cholesky_lo": {
     "line number": [
      753
     ]
    },
    "numpy.linalg.linalg._assertNdSquareness": {
     "line number": [
      756
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      755
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      757
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      754
     ]
    },
    "numpy.linalg.linalg._raise_linalgerror_nonposdef": {
     "line number": [
      752
     ]
    },
    "numpy.linalg.linalg._unary_dispatcher": {
     "line number": [
      678
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      678
     ]
    },
    "numpy.linalg.linalg.get_linalg_error_extobj": {
     "line number": [
      752
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      758
     ]
    },
    "wrap": {
     "line number": [
      754,
      760
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.complexfloating": {
  "data": {
   "shadows": "numpy.core.complexfloating"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.cond": {
  "data": {
   "lineno": 1633,
   "symbols_in_volume": {
    "numpy.core.Inf": {
     "line number": [
      1740,
      1742
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      1713,
      1735
     ]
    },
    "numpy.core.errstate": {
     "line number": [
      1717,
      1729
     ]
    },
    "numpy.core.isnan": {
     "line number": [
      1736,
      1738
     ]
    },
    "numpy.linalg._umath_linalg.inv": {
     "line number": [
      1730
     ]
    },
    "numpy.linalg.linalg._assertNdSquareness": {
     "line number": [
      1726
     ]
    },
    "numpy.linalg.linalg._assertNoEmpty2d": {
     "line number": [
      1714
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      1725
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      1727
     ]
    },
    "numpy.linalg.linalg._cond_dispatcher": {
     "line number": [
      1633
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      1633
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      1728
     ]
    },
    "numpy.linalg.linalg.norm": {
     "line number": [
      1731,
      1731
     ]
    },
    "numpy.linalg.linalg.svd": {
     "line number": [
      1716
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.count_nonzero": {
  "data": {
   "shadows": "numpy.core.count_nonzero"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.csingle": {
  "data": {
   "shadows": "numpy.core.csingle"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.det": {
  "data": {
   "lineno": 2040,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      2088
     ]
    },
    "numpy.linalg._umath_linalg.det": {
     "line number": [
      2093
     ]
    },
    "numpy.linalg.linalg._assertNdSquareness": {
     "line number": [
      2090
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      2089
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      2091
     ]
    },
    "numpy.linalg.linalg._unary_dispatcher": {
     "line number": [
      2040
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      2040
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      2092
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.divide": {
  "data": {
   "shadows": "numpy.core.divide"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.dot": {
  "data": {
   "shadows": "numpy.core.dot"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.double": {
  "data": {
   "shadows": "numpy.core.double"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.eig": {
  "data": {
   "lineno": 1182,
   "symbols_in_volume": {
    "numpy.core.all": {
     "line number": [
      1313
     ]
    },
    "numpy.linalg._umath_linalg.eig": {
     "line number": [
      1311
     ]
    },
    "numpy.linalg.linalg._assertFinite": {
     "line number": [
      1305
     ]
    },
    "numpy.linalg.linalg._assertNdSquareness": {
     "line number": [
      1304
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      1303
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      1306
     ]
    },
    "numpy.linalg.linalg._complexType": {
     "line number": [
      1318
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      1302
     ]
    },
    "numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence": {
     "line number": [
      1309
     ]
    },
    "numpy.linalg.linalg._realType": {
     "line number": [
      1316
     ]
    },
    "numpy.linalg.linalg._unary_dispatcher": {
     "line number": [
      1182
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      1182
     ]
    },
    "numpy.linalg.linalg.get_linalg_error_extobj": {
     "line number": [
      1308
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      1310,
      1313
     ]
    },
    "wrap": {
     "line number": [
      1302,
      1321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.eigh": {
  "data": {
   "lineno": 1324,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1441
     ]
    },
    "gufunc": {
     "line number": [
      1451,
      1453,
      1456
     ]
    },
    "numpy.linalg._umath_linalg.eigh_lo": {
     "line number": [
      1451
     ]
    },
    "numpy.linalg._umath_linalg.eigh_up": {
     "line number": [
      1453
     ]
    },
    "numpy.linalg.linalg._assertNdSquareness": {
     "line number": [
      1445
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      1444
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      1446
     ]
    },
    "numpy.linalg.linalg._eigvalsh_dispatcher": {
     "line number": [
      1324
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      1443
     ]
    },
    "numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence": {
     "line number": [
      1449
     ]
    },
    "numpy.linalg.linalg._realType": {
     "line number": [
      1457
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      1324
     ]
    },
    "numpy.linalg.linalg.get_linalg_error_extobj": {
     "line number": [
      1448
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      1455
     ]
    },
    "wrap": {
     "line number": [
      1443,
      1459
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.eigvals": {
  "data": {
   "lineno": 985,
   "symbols_in_volume": {
    "numpy.core.all": {
     "line number": [
      1067
     ]
    },
    "numpy.linalg._umath_linalg.eigvals": {
     "line number": [
      1064
     ]
    },
    "numpy.linalg.linalg._assertFinite": {
     "line number": [
      1058
     ]
    },
    "numpy.linalg.linalg._assertNdSquareness": {
     "line number": [
      1057
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      1056
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      1059
     ]
    },
    "numpy.linalg.linalg._complexType": {
     "line number": [
      1071
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      1055
     ]
    },
    "numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence": {
     "line number": [
      1062
     ]
    },
    "numpy.linalg.linalg._realType": {
     "line number": [
      1069
     ]
    },
    "numpy.linalg.linalg._unary_dispatcher": {
     "line number": [
      985
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      985
     ]
    },
    "numpy.linalg.linalg.get_linalg_error_extobj": {
     "line number": [
      1061
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      1063,
      1066
     ]
    },
    "wrap": {
     "line number": [
      1055
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.eigvalsh": {
  "data": {
   "lineno": 1080,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1156
     ]
    },
    "gufunc": {
     "line number": [
      1161,
      1163,
      1170
     ]
    },
    "numpy.linalg._umath_linalg.eigvalsh_lo": {
     "line number": [
      1161
     ]
    },
    "numpy.linalg._umath_linalg.eigvalsh_up": {
     "line number": [
      1163
     ]
    },
    "numpy.linalg.linalg._assertNdSquareness": {
     "line number": [
      1167
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      1166
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      1168
     ]
    },
    "numpy.linalg.linalg._eigvalsh_dispatcher": {
     "line number": [
      1080
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      1165
     ]
    },
    "numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence": {
     "line number": [
      1159
     ]
    },
    "numpy.linalg.linalg._realType": {
     "line number": [
      1171
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      1080
     ]
    },
    "numpy.linalg.linalg.get_linalg_error_extobj": {
     "line number": [
      1158
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      1169
     ]
    },
    "wrap": {
     "line number": [
      1165
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.empty": {
  "data": {
   "shadows": "numpy.core.empty"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.empty_like": {
  "data": {
   "shadows": "numpy.core.empty_like"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.errstate": {
  "data": {
   "shadows": "numpy.core.errstate"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.eye": {
  "data": {
   "shadows": "numpy.lib.twodim_base.eye"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.fastCopyAndTranspose": {
  "data": {
   "shadows": "numpy.core.fastCopyAndTranspose"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.finfo": {
  "data": {
   "shadows": "numpy.core.finfo"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.fortran_int": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "numpy.linalg.linalg.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.get_linalg_error_extobj": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "list": {
     "line number": [
      112
     ]
    },
    "numpy.linalg.linalg._linalg_error_extobj": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.geterrobj": {
  "data": {
   "shadows": "numpy.core.geterrobj"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.inexact": {
  "data": {
   "shadows": "numpy.core.inexact"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.intc": {
  "data": {
   "shadows": "numpy.core.intc"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.intp": {
  "data": {
   "shadows": "numpy.core.intp"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.inv": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": {
    "numpy.linalg._umath_linalg.inv": {
     "line number": [
      551
     ]
    },
    "numpy.linalg.linalg._assertNdSquareness": {
     "line number": [
      546
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      545
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      547
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      544
     ]
    },
    "numpy.linalg.linalg._raise_linalgerror_singular": {
     "line number": [
      550
     ]
    },
    "numpy.linalg.linalg._unary_dispatcher": {
     "line number": [
      486
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      486
     ]
    },
    "numpy.linalg.linalg.get_linalg_error_extobj": {
     "line number": [
      550
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      549
     ]
    },
    "wrap": {
     "line number": [
      544,
      552
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.isComplexType": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      122
     ]
    },
    "numpy.core.complexfloating": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.isfinite": {
  "data": {
   "shadows": "numpy.core.isfinite"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.isnan": {
  "data": {
   "shadows": "numpy.core.isnan"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.lapack_lite": {
  "data": {
   "shadows": "numpy.linalg.lapack_lite"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.lstsq": {
  "data": {
   "lineno": 2104,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      2221
     ]
    },
    "gufunc": {
     "line number": [
      2227,
      2229,
      2236
     ]
    },
    "max": {
     "line number": [
      2224
     ]
    },
    "numpy.core.array": {
     "line number": [
      2252
     ]
    },
    "numpy.core.finfo": {
     "line number": [
      2224
     ]
    },
    "numpy.core.newaxis": {
     "line number": [
      2200
     ]
    },
    "numpy.core.zeros": {
     "line number": [
      2235
     ]
    },
    "numpy.linalg._umath_linalg.lstsq_m": {
     "line number": [
      2227
     ]
    },
    "numpy.linalg._umath_linalg.lstsq_n": {
     "line number": [
      2229
     ]
    },
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      2205
     ]
    },
    "numpy.linalg.linalg._assertRank2": {
     "line number": [
      2201
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      2207
     ]
    },
    "numpy.linalg.linalg._linalgRealType": {
     "line number": [
      2209
     ]
    },
    "numpy.linalg.linalg._lstsq_dispatcher": {
     "line number": [
      2104
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      2196,
      2197
     ]
    },
    "numpy.linalg.linalg._raise_linalgerror_lstsq": {
     "line number": [
      2232
     ]
    },
    "numpy.linalg.linalg._realType": {
     "line number": [
      2210
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      2104
     ]
    },
    "numpy.linalg.linalg.get_linalg_error_extobj": {
     "line number": [
      2232
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      2231
     ]
    },
    "numpy.linalg.linalg.warnings": {
     "line number": [
      2215
     ]
    },
    "wrap": {
     "line number": [
      2197,
      2258,
      2258
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.matmul": {
  "data": {
   "shadows": "numpy.core.matmul"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.matrix_power": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      640
     ]
    },
    "TypeError": {
     "line number": [
      630,
      631
     ]
    },
    "divmod": {
     "line number": [
      668
     ]
    },
    "fmatmul": {
     "line number": [
      657,
      660,
      660,
      667,
      670
     ]
    },
    "numpy.core.abs": {
     "line number": [
      650
     ]
    },
    "numpy.core.asanyarray": {
     "line number": [
      624
     ]
    },
    "numpy.core.dot": {
     "line number": [
      638
     ]
    },
    "numpy.core.empty_like": {
     "line number": [
      644
     ]
    },
    "numpy.core.matmul": {
     "line number": [
      636
     ]
    },
    "numpy.lib.twodim_base.eye": {
     "line number": [
      645
     ]
    },
    "numpy.linalg.linalg._assertNdSquareness": {
     "line number": [
      626
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      625
     ]
    },
    "numpy.linalg.linalg._matrix_power_dispatcher": {
     "line number": [
      559
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      559
     ]
    },
    "numpy.linalg.linalg.inv": {
     "line number": [
      649
     ]
    },
    "numpy.linalg.linalg.operator": {
     "line number": [
      629
     ]
    },
    "object": {
     "line number": [
      635
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.matrix_rank": {
  "data": {
   "lineno": 1755,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1846
     ]
    },
    "max": {
     "line number": [
      1852
     ]
    },
    "numpy.core.abs": {
     "line number": [
      1848
     ]
    },
    "numpy.core.all": {
     "line number": [
      1846
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      1844,
      1854
     ]
    },
    "numpy.core.count_nonzero": {
     "line number": [
      1855
     ]
    },
    "numpy.core.finfo": {
     "line number": [
      1852
     ]
    },
    "numpy.core.newaxis": {
     "line number": [
      1854
     ]
    },
    "numpy.linalg.linalg._matrix_rank_dispatcher": {
     "line number": [
      1755
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      1755
     ]
    },
    "numpy.linalg.linalg.eigvalsh": {
     "line number": [
      1848
     ]
    },
    "numpy.linalg.linalg.svd": {
     "line number": [
      1850
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.moveaxis": {
  "data": {
   "shadows": "numpy.core.moveaxis"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.multi_dot": {
  "data": {
   "lineno": 2540,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2620
     ]
    },
    "len": {
     "line number": [
      2617
     ]
    },
    "numpy.core.asanyarray": {
     "line number": [
      2624
     ]
    },
    "numpy.core.atleast_2d": {
     "line number": [
      2631,
      2633
     ]
    },
    "numpy.core.dot": {
     "line number": [
      2622
     ]
    },
    "numpy.linalg.linalg._assertRank2": {
     "line number": [
      2634
     ]
    },
    "numpy.linalg.linalg._multi_dot": {
     "line number": [
      2641
     ]
    },
    "numpy.linalg.linalg._multi_dot_matrix_chain_order": {
     "line number": [
      2640
     ]
    },
    "numpy.linalg.linalg._multi_dot_three": {
     "line number": [
      2638
     ]
    },
    "numpy.linalg.linalg._multidot_dispatcher": {
     "line number": [
      2540
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      2540
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.multiply": {
  "data": {
   "shadows": "numpy.core.multiply"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.newaxis": {
  "data": {
   "shadows": "numpy.core.newaxis"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.norm": {
  "data": {
   "lineno": 2293,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      2463
     ]
    },
    "TypeError": {
     "line number": [
      2464,
      2485
     ]
    },
    "ValueError": {
     "line number": [
      2486,
      2497,
      2523,
      2531
     ]
    },
    "float": {
     "line number": [
      2437
     ]
    },
    "int": {
     "line number": [
      2462
     ]
    },
    "isinstance": {
     "line number": [
      2460
     ]
    },
    "issubclass": {
     "line number": [
      2436
     ]
    },
    "len": {
     "line number": [
      2467,
      2492
     ]
    },
    "list": {
     "line number": [
      2525
     ]
    },
    "numpy.core.Inf": {
     "line number": [
      2468,
      2470,
      2506,
      2514
     ]
    },
    "numpy.core.abs": {
     "line number": [
      2469,
      2471,
      2477,
      2487,
      2505,
      2509,
      2513,
      2517
     ]
    },
    "numpy.core.add.reduce": {
     "line number": [
      2477,
      2481,
      2489,
      2505,
      2509,
      2513,
      2517,
      2519
     ]
    },
    "numpy.core.amax": {
     "line number": [
      2499
     ]
    },
    "numpy.core.amin": {
     "line number": [
      2501
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      2434
     ]
    },
    "numpy.core.dot": {
     "line number": [
      2448,
      2448,
      2450
     ]
    },
    "numpy.core.inexact": {
     "line number": [
      2436
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      2494,
      2495
     ]
    },
    "numpy.core.object_": {
     "line number": [
      2436
     ]
    },
    "numpy.core.sqrt": {
     "line number": [
      2451,
      2481,
      2519
     ]
    },
    "numpy.core.sum": {
     "line number": [
      2521
     ]
    },
    "numpy.linalg.linalg._multi_svd_norm": {
     "line number": [
      2499,
      2501,
      2521
     ]
    },
    "numpy.linalg.linalg._norm_dispatcher": {
     "line number": [
      2293
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      2293
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      2447
     ]
    },
    "ord": {
     "line number": [
      2442,
      2443,
      2444,
      2468,
      2470,
      2472,
      2475,
      2478,
      2478,
      2484,
      2488,
      2490,
      2498,
      2500,
      2502,
      2506,
      2510,
      2514,
      2518,
      2520
     ]
    },
    "range": {
     "line number": [
      2459
     ]
    },
    "tuple": {
     "line number": [
      2459,
      2460
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.normalize_axis_index": {
  "data": {
   "shadows": "numpy.core.multiarray.normalize_axis_index"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.object_": {
  "data": {
   "shadows": "numpy.core.object_"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.overrides": {
  "data": {
   "shadows": "numpy.core.overrides"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.pinv": {
  "data": {
   "lineno": 1864,
   "symbols_in_volume": {
    "numpy.core.amax": {
     "line number": [
      1941
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      1932
     ]
    },
    "numpy.core.divide": {
     "line number": [
      1943
     ]
    },
    "numpy.core.empty": {
     "line number": [
      1935
     ]
    },
    "numpy.core.matmul": {
     "line number": [
      1946
     ]
    },
    "numpy.core.multiply": {
     "line number": [
      1946
     ]
    },
    "numpy.core.newaxis": {
     "line number": [
      1941,
      1946
     ]
    },
    "numpy.linalg.linalg._isEmpty2d": {
     "line number": [
      1933
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      1931
     ]
    },
    "numpy.linalg.linalg._pinv_dispatcher": {
     "line number": [
      1864
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      1864
     ]
    },
    "numpy.linalg.linalg.svd": {
     "line number": [
      1938
     ]
    },
    "numpy.linalg.linalg.transpose": {
     "line number": [
      1946,
      1946
     ]
    },
    "wrap": {
     "line number": [
      1931,
      1936,
      1947
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.product": {
  "data": {
   "shadows": "numpy.core.product"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.qr": {
  "data": {
   "lineno": 769,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      893,
      898
     ]
    },
    "ValueError": {
     "line number": [
      901
     ]
    },
    "int": {
     "line number": [
      927,
      970
     ]
    },
    "lapack_routine": {
     "line number": [
      922,
      929,
      956,
      959,
      965,
      972
     ]
    },
    "max": {
     "line number": [
      922,
      927,
      929,
      965,
      970,
      972
     ]
    },
    "min": {
     "line number": [
      909
     ]
    },
    "numpy.core.abs": {
     "line number": [
      927,
      970
     ]
    },
    "numpy.core.empty": {
     "line number": [
      949,
      952
     ]
    },
    "numpy.core.zeros": {
     "line number": [
      910,
      921,
      928,
      964,
      971
     ]
    },
    "numpy.lib.twodim_base.triu": {
     "line number": [
      936,
      979
     ]
    },
    "numpy.linalg.lapack_lite.dgeqrf": {
     "line number": [
      916
     ]
    },
    "numpy.linalg.lapack_lite.dorgqr": {
     "line number": [
      959
     ]
    },
    "numpy.linalg.lapack_lite.zgeqrf": {
     "line number": [
      913
     ]
    },
    "numpy.linalg.lapack_lite.zungqr": {
     "line number": [
      956
     ]
    },
    "numpy.linalg.linalg.LinAlgError": {
     "line number": [
      924,
      931,
      967,
      974
     ]
    },
    "numpy.linalg.linalg._assertRank2": {
     "line number": [
      904
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      906
     ]
    },
    "numpy.linalg.linalg._fastCopyAndTranspose": {
     "line number": [
      907,
      935,
      976,
      977
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      903
     ]
    },
    "numpy.linalg.linalg._qr_dispatcher": {
     "line number": [
      769
     ]
    },
    "numpy.linalg.linalg._to_native_byte_order": {
     "line number": [
      908
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      769
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      912,
      955
     ]
    },
    "numpy.linalg.linalg.warnings": {
     "line number": [
      893,
      898
     ]
    },
    "wrap": {
     "line number": [
      903,
      936,
      944,
      979,
      979
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.set_module": {
  "data": {
   "shadows": "numpy.core.overrides.set_module"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.single": {
  "data": {
   "shadows": "numpy.core.single"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.slogdet": {
  "data": {
   "lineno": 1953,
   "symbols_in_volume": {
    "numpy.core.asarray": {
     "line number": [
      2028
     ]
    },
    "numpy.linalg._umath_linalg.slogdet": {
     "line number": [
      2034
     ]
    },
    "numpy.linalg.linalg._assertNdSquareness": {
     "line number": [
      2030
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      2029
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      2031
     ]
    },
    "numpy.linalg.linalg._realType": {
     "line number": [
      2032
     ]
    },
    "numpy.linalg.linalg._unary_dispatcher": {
     "line number": [
      1953
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      1953
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      2033
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.solve": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": {
    "gufunc": {
     "line number": [
      403
     ]
    },
    "numpy.linalg._umath_linalg.solve": {
     "line number": [
      399
     ]
    },
    "numpy.linalg._umath_linalg.solve1": {
     "line number": [
      397
     ]
    },
    "numpy.linalg.linalg._assertNdSquareness": {
     "line number": [
      390
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      389
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      392
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      388,
      391
     ]
    },
    "numpy.linalg.linalg._raise_linalgerror_singular": {
     "line number": [
      402
     ]
    },
    "numpy.linalg.linalg._solve_dispatcher": {
     "line number": [
      327
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      327
     ]
    },
    "numpy.linalg.linalg.get_linalg_error_extobj": {
     "line number": [
      402
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      401
     ]
    },
    "wrap": {
     "line number": [
      391,
      405
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.sqrt": {
  "data": {
   "shadows": "numpy.core.sqrt"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.sum": {
  "data": {
   "shadows": "numpy.core.sum"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.svd": {
  "data": {
   "lineno": 1468,
   "symbols_in_volume": {
    "gufunc": {
     "line number": [
      1602,
      1604,
      1607,
      1609,
      1612,
      1619,
      1621,
      1624
     ]
    },
    "numpy.linalg._umath_linalg.svd_m": {
     "line number": [
      1619
     ]
    },
    "numpy.linalg._umath_linalg.svd_m_f": {
     "line number": [
      1602
     ]
    },
    "numpy.linalg._umath_linalg.svd_m_s": {
     "line number": [
      1607
     ]
    },
    "numpy.linalg._umath_linalg.svd_n": {
     "line number": [
      1621
     ]
    },
    "numpy.linalg._umath_linalg.svd_n_f": {
     "line number": [
      1604
     ]
    },
    "numpy.linalg._umath_linalg.svd_n_s": {
     "line number": [
      1609
     ]
    },
    "numpy.linalg.linalg._assertRankAtLeast2": {
     "line number": [
      1593
     ]
    },
    "numpy.linalg.linalg._commonType": {
     "line number": [
      1594
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      1592
     ]
    },
    "numpy.linalg.linalg._raise_linalgerror_svd_nonconvergence": {
     "line number": [
      1596
     ]
    },
    "numpy.linalg.linalg._realType": {
     "line number": [
      1614,
      1625
     ]
    },
    "numpy.linalg.linalg._svd_dispatcher": {
     "line number": [
      1468
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      1468
     ]
    },
    "numpy.linalg.linalg.get_linalg_error_extobj": {
     "line number": [
      1596
     ]
    },
    "numpy.linalg.linalg.isComplexType": {
     "line number": [
      1611,
      1623
     ]
    },
    "wrap": {
     "line number": [
      1592,
      1616,
      1616
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.swapaxes": {
  "data": {
   "shadows": "numpy.core.swapaxes"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.tensorinv": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      474
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      466
     ]
    },
    "numpy.linalg.linalg._tensorinv_dispatcher": {
     "line number": [
      412
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      412
     ]
    },
    "numpy.linalg.linalg.inv": {
     "line number": [
      476
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.tensorsolve": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "list": {
     "line number": [
      305
     ]
    },
    "numpy.core.asarray": {
     "line number": [
      301
     ]
    },
    "numpy.linalg.linalg._makearray": {
     "line number": [
      300
     ]
    },
    "numpy.linalg.linalg._tensorsolve_dispatcher": {
     "line number": [
      252
     ]
    },
    "numpy.linalg.linalg.array_function_dispatch": {
     "line number": [
      252
     ]
    },
    "numpy.linalg.linalg.solve": {
     "line number": [
      318
     ]
    },
    "range": {
     "line number": [
      305
     ]
    },
    "wrap": {
     "line number": [
      318
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.transpose": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "numpy.core.swapaxes": {
     "line number": [
      244
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.linalg.triu": {
  "data": {
   "shadows": "numpy.lib.twodim_base.triu"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.linalg.linalg.zeros": {
  "data": {
   "shadows": "numpy.core.zeros"
  },
  "type": "import"
 },
 "numpy.linalg.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.linalg.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      58
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      60
     ]
    },
    "numpy.linalg.setup.configuration": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.linalg.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.linalg.setup.configuration": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      9
     ]
    },
    "numpy.distutils.system_info.get_info": {
     "line number": [
      29
     ]
    },
    "numpy.linalg.setup.os": {
     "line number": [
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.setup.configuration.get_lapack_lite_sources": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "numpy.linalg.setup.sys": {
     "line number": [
      36
     ]
    },
    "print": {
     "line number": [
      33,
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.linalg.setup.get_info": {
  "data": {
   "shadows": "numpy.distutils.system_info.get_info"
  },
  "type": "import"
 },
 "numpy.linalg.setup.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.linalg.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.linalg.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.linalg.setup.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.linalg.test": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "numpy.linalg.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.linalg.tests.test_build": {
  "data": {},
  "type": "module"
 },
 "numpy.linalg.tests.test_build.FindDependenciesLdd": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "object": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "OSError": {
     "line number": [
      20
     ]
    },
    "RuntimeError": {
     "line number": [
      21
     ]
    },
    "subprocess.PIPE": {
     "line number": [
      18,
      18
     ]
    },
    "subprocess.Popen": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_build.FindDependenciesLdd.get_dependencies": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      27
     ]
    },
    "subprocess.PIPE": {
     "line number": [
      24,
      24
     ]
    },
    "subprocess.Popen": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_build.FindDependenciesLdd.grep_dependencies": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      34
     ]
    },
    "numpy.linalg.tests.test_build.re": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_build.PIPE": {
  "data": {
   "shadows": "subprocess.PIPE"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_build.Popen": {
  "data": {
   "shadows": "subprocess.Popen"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_build.TestF77Mismatch": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "object": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_build.TestF77Mismatch.test_lapack": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "len": {
     "line number": [
      52
     ]
    },
    "numpy.linalg.lapack_lite.__file__": {
     "line number": [
      50
     ]
    },
    "numpy.linalg.tests.test_build.FindDependenciesLdd": {
     "line number": [
      49
     ]
    },
    "numpy.linalg.tests.test_build.pytest": {
     "line number": [
      46
     ]
    },
    "numpy.linalg.tests.test_build.sys": {
     "line number": [
      46
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_build.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_build.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_build.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_build.lapack_lite": {
  "data": {
   "shadows": "numpy.linalg.lapack_lite"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_build.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_build.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_build.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_build.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_deprecations": {
  "data": {},
  "type": "module"
 },
 "numpy.linalg.tests.test_deprecations.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_deprecations.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_deprecations.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_deprecations.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_deprecations.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_deprecations.test_qr_mode_full_future_warning": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      19,
      20,
      21,
      22
     ]
    },
    "numpy.eye": {
     "line number": [
      18
     ]
    },
    "numpy.linalg.qr": {
     "line number": [
      19,
      20,
      21,
      22
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      19,
      20,
      21,
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      114,
      115,
      117,
      118,
      120,
      121,
      123,
      124,
      126,
      127,
      129,
      130,
      149,
      150,
      152,
      153,
      155,
      156,
      158,
      159,
      161,
      163,
      165,
      167,
      169,
      171,
      173,
      175,
      177,
      179,
      181,
      183,
      206,
      209,
      212,
      215,
      225
     ]
    },
    "numpy.cdouble": {
     "line number": [
      126,
      127,
      129,
      130,
      170,
      171,
      174,
      175,
      178,
      179,
      182,
      183,
      215
     ]
    },
    "numpy.csingle": {
     "line number": [
      123,
      124,
      162,
      163,
      166,
      167,
      212
     ]
    },
    "numpy.double": {
     "line number": [
      117,
      118,
      120,
      121,
      132,
      133,
      155,
      156,
      158,
      159,
      209,
      218
     ]
    },
    "numpy.empty": {
     "line number": [
      132,
      133,
      218
     ]
    },
    "numpy.linalg.tests.test_linalg.CASES": {
     "line number": [
      112,
      147,
      204,
      264,
      329
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgCase": {
     "line number": [
      113,
      116,
      119,
      122,
      125,
      128,
      131,
      135,
      138,
      141,
      148,
      151,
      154,
      157,
      160,
      164,
      168,
      172,
      176,
      180,
      184,
      187,
      190,
      193,
      197,
      205,
      208,
      211,
      214,
      217,
      221,
      224,
      227
     ]
    },
    "numpy.linalg.tests.test_linalg._make_generalized_cases": {
     "line number": [
      264
     ]
    },
    "numpy.linalg.tests.test_linalg._make_strided_cases": {
     "line number": [
      329
     ]
    },
    "numpy.linalg.tests.test_linalg.apply_tag": {
     "line number": [
      112,
      147,
      204
     ]
    },
    "numpy.random.rand": {
     "line number": [
      136,
      137,
      139,
      140,
      185,
      186,
      188,
      189,
      191,
      192,
      194,
      195,
      198,
      199,
      228
     ]
    },
    "numpy.random.seed": {
     "line number": [
      107
     ]
    },
    "numpy.single": {
     "line number": [
      114,
      115,
      149,
      150,
      152,
      153,
      206
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.linalg.tests.test_linalg.CASES": {
  "data": {
   "lineno": 109
  },
  "type": "constant"
 },
 "numpy.linalg.tests.test_linalg.CondCases": {
  "data": {
   "lineno": 673,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase": {
     "line number": [
      673
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase": {
     "line number": [
      673
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.CondCases.do": {
  "data": {
   "lineno": 676,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      698,
      698,
      702,
      702,
      706,
      706,
      710,
      710,
      714,
      715
     ]
    },
    "numpy.asarray": {
     "line number": [
      677
     ]
    },
    "numpy.inf": {
     "line number": [
      705,
      709
     ]
    },
    "numpy.linalg.LinAlgError": {
     "line number": [
      679
     ]
    },
    "numpy.linalg.cond": {
     "line number": [
      679,
      685,
      688,
      691,
      697,
      701,
      705,
      709,
      713
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      695
     ]
    },
    "numpy.linalg.svd": {
     "line number": [
      683
     ]
    },
    "numpy.sqrt": {
     "line number": [
      714
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      684,
      687,
      690,
      696,
      700,
      704,
      708,
      712
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      679
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.DetCases": {
  "data": {
   "lineno": 800,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase": {
     "line number": [
      800
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase": {
     "line number": [
      800
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.DetCases.do": {
  "data": {
   "lineno": 802,
   "symbols_in_volume": {
    "numpy.abs": {
     "line number": [
      816
     ]
    },
    "numpy.asarray": {
     "line number": [
      805,
      806,
      808
     ]
    },
    "numpy.atleast_1d": {
     "line number": [
      813,
      814
     ]
    },
    "numpy.cdouble": {
     "line number": [
      808
     ]
    },
    "numpy.double": {
     "line number": [
      805,
      806
     ]
    },
    "numpy.exp": {
     "line number": [
      811
     ]
    },
    "numpy.inf": {
     "line number": [
      817
     ]
    },
    "numpy.linalg.det": {
     "line number": [
      803
     ]
    },
    "numpy.linalg.eigvals": {
     "line number": [
      809
     ]
    },
    "numpy.linalg.slogdet": {
     "line number": [
      804
     ]
    },
    "numpy.multiply.reduce": {
     "line number": [
      810,
      811
     ]
    },
    "numpy.single": {
     "line number": [
      805
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      810,
      811,
      816
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      817
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.EigCases": {
  "data": {
   "lineno": 590,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase": {
     "line number": [
      590
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase": {
     "line number": [
      590
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.EigCases.do": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      595,
      595
     ]
    },
    "numpy.linalg.eig": {
     "line number": [
      593
     ]
    },
    "numpy.linalg.tests.test_linalg.consistent_subclass": {
     "line number": [
      597
     ]
    },
    "numpy.linalg.tests.test_linalg.dot_generalized": {
     "line number": [
      594
     ]
    },
    "numpy.linalg.tests.test_linalg.get_rtol": {
     "line number": [
      596
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      597
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      594
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.EigvalsCases": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase": {
     "line number": [
      555
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase": {
     "line number": [
      555
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.EigvalsCases.do": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": {
    "numpy.linalg.eig": {
     "line number": [
      559
     ]
    },
    "numpy.linalg.eigvals": {
     "line number": [
      558
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      560
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgTestCase": {
     "line number": [
      415
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase.test_generalized_empty_herm_cases": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      422
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase.test_generalized_herm_cases": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      417
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.HermitianTestCase": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgTestCase": {
     "line number": [
      380
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.HermitianTestCase.test_empty_herm_cases": {
  "data": {
   "lineno": 386
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.HermitianTestCase.test_herm_cases": {
  "data": {
   "lineno": 382
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.InvCases": {
  "data": {
   "lineno": 523,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase": {
     "line number": [
      523
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase": {
     "line number": [
      523
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.InvCases.do": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": {
    "numpy.linalg.inv": {
     "line number": [
      526
     ]
    },
    "numpy.linalg.tests.test_linalg.consistent_subclass": {
     "line number": [
      529
     ]
    },
    "numpy.linalg.tests.test_linalg.dot_generalized": {
     "line number": [
      527
     ]
    },
    "numpy.linalg.tests.test_linalg.identity_like_generalized": {
     "line number": [
      528
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      529
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      527
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinAlgError": {
  "data": {
   "shadows": "numpy.linalg.LinAlgError"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.LinalgCase": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "object": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.LinalgCase.__init__": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "frozenset": {
     "line number": [
      80
     ]
    },
    "isinstance": {
     "line number": [
      76
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      76
     ]
    },
    "set": {
     "line number": [
      71
     ]
    },
    "str": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinalgCase.__repr__": {
  "data": {
   "lineno": 88
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinalgCase.check": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "do": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgTestCase": {
     "line number": [
      403
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase.test_generalized_empty_nonsq_cases": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      410
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase.test_generalized_nonsq_cases": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      405
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgTestCase": {
     "line number": [
      391
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase.test_generalized_empty_sq_cases": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      398
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase.test_generalized_sq_cases": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      393
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgTestCase": {
     "line number": [
      369
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase.test_empty_nonsq_cases": {
  "data": {
   "lineno": 375
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase.test_nonsq_cases": {
  "data": {
   "lineno": 371
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinalgSquareTestCase": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgTestCase": {
     "line number": [
      358
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.LinalgSquareTestCase.test_empty_sq_cases": {
  "data": {
   "lineno": 364
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinalgSquareTestCase.test_sq_cases": {
  "data": {
   "lineno": 360
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LinalgTestCase": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.CASES": {
     "line number": [
      336
     ]
    },
    "object": {
     "line number": [
      335
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      355
     ]
    },
    "Exception": {
     "line number": [
      352
     ]
    },
    "numpy.linalg.tests.test_linalg.traceback": {
     "line number": [
      354
     ]
    },
    "set": {
     "line number": [
      338,
      338
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.LstsqCases": {
  "data": {
   "lineno": 862,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase": {
     "line number": [
      862
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase": {
     "line number": [
      862
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.LstsqCases.do": {
  "data": {
   "lineno": 864,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      879
     ]
    },
    "numpy.array": {
     "line number": [
      885
     ]
    },
    "numpy.asarray": {
     "line number": [
      865,
      879,
      880,
      881
     ]
    },
    "numpy.dot": {
     "line number": [
      872,
      879
     ]
    },
    "numpy.floating": {
     "line number": [
      887
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      887
     ]
    },
    "numpy.linalg.lstsq": {
     "line number": [
      868
     ]
    },
    "numpy.linalg.svd": {
     "line number": [
      867
     ]
    },
    "numpy.linalg.tests.test_linalg.consistent_subclass": {
     "line number": [
      888,
      889
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      870,
      887,
      888,
      889
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      872,
      876,
      886
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      873,
      875,
      883
     ]
    },
    "type": {
     "line number": [
      885
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.PinvCases": {
  "data": {
   "lineno": 783,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase": {
     "line number": [
      786
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase": {
     "line number": [
      785
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase": {
     "line number": [
      784
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase": {
     "line number": [
      783
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.PinvCases.do": {
  "data": {
   "lineno": 788,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      791,
      792,
      792
     ]
    },
    "numpy.linalg.pinv": {
     "line number": [
      789
     ]
    },
    "numpy.linalg.tests.test_linalg.consistent_subclass": {
     "line number": [
      793
     ]
    },
    "numpy.linalg.tests.test_linalg.dot_generalized": {
     "line number": [
      791
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      793
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      792
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.SVDCases": {
  "data": {
   "lineno": 636,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase": {
     "line number": [
      636
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase": {
     "line number": [
      636
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.SVDCases.do": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      640,
      640,
      641
     ]
    },
    "numpy.linalg.svd": {
     "line number": [
      639
     ]
    },
    "numpy.linalg.tests.test_linalg.consistent_subclass": {
     "line number": [
      643,
      644
     ]
    },
    "numpy.linalg.tests.test_linalg.dot_generalized": {
     "line number": [
      640
     ]
    },
    "numpy.linalg.tests.test_linalg.get_rtol": {
     "line number": [
      642
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      643,
      644
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      640
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.SolveCases": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase": {
     "line number": [
      457
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase": {
     "line number": [
      457
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.SolveCases.do": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": {
    "numpy.linalg.solve": {
     "line number": [
      460
     ]
    },
    "numpy.linalg.tests.test_linalg.consistent_subclass": {
     "line number": [
      462
     ]
    },
    "numpy.linalg.tests.test_linalg.dot_generalized": {
     "line number": [
      461
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      462
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      461
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestCholesky": {
  "data": {
   "lineno": 1670,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1670
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestCholesky.test_0_size": {
  "data": {
   "lineno": 1697,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1705,
      1711
     ]
    },
    "numpy.complex64": {
     "line number": [
      1707,
      1710
     ]
    },
    "numpy.float64": {
     "line number": [
      1703
     ]
    },
    "numpy.int_": {
     "line number": [
      1700
     ]
    },
    "numpy.linalg.cholesky": {
     "line number": [
      1701,
      1708
     ]
    },
    "numpy.ndarray": {
     "line number": [
      1705,
      1711
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1703,
      1705,
      1710,
      1711
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1702,
      1709
     ]
    },
    "numpy.zeros": {
     "line number": [
      1700,
      1707
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestCholesky.test_0_size.ArraySubclass": {
  "data": {
   "lineno": 1698,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      1698
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestCholesky.test_basic_property": {
  "data": {
   "lineno": 1673,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1684
     ]
    },
    "list": {
     "line number": [
      1684
     ]
    },
    "numpy.asarray": {
     "line number": [
      1688
     ]
    },
    "numpy.complex128": {
     "line number": [
      1676
     ]
    },
    "numpy.complex64": {
     "line number": [
      1676
     ]
    },
    "numpy.complexfloating": {
     "line number": [
      1681
     ]
    },
    "numpy.finfo": {
     "line number": [
      1695
     ]
    },
    "numpy.float32": {
     "line number": [
      1676
     ]
    },
    "numpy.float64": {
     "line number": [
      1676
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      1681
     ]
    },
    "numpy.linalg.cholesky": {
     "line number": [
      1690
     ]
    },
    "numpy.linalg.tests.test_linalg.itertools": {
     "line number": [
      1678
     ]
    },
    "numpy.matmul": {
     "line number": [
      1687,
      1692
     ]
    },
    "numpy.random.randn": {
     "line number": [
      1680,
      1682
     ]
    },
    "numpy.random.seed": {
     "line number": [
      1679
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1693
     ]
    },
    "range": {
     "line number": [
      1684
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestCond": {
  "data": {
   "lineno": 719,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.CondCases": {
     "line number": [
      719
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestCond.test_basic_nonsvd": {
  "data": {
   "lineno": 720,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      722
     ]
    },
    "numpy.inf": {
     "line number": [
      723,
      724
     ]
    },
    "numpy.linalg.cond": {
     "line number": [
      723,
      724,
      725,
      726,
      727
     ]
    },
    "numpy.sqrt": {
     "line number": [
      727
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      723,
      724,
      725,
      726,
      727
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestCond.test_nan": {
  "data": {
   "lineno": 743,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      752
     ]
    },
    "numpy.float_": {
     "line number": [
      752
     ]
    },
    "numpy.isnan": {
     "line number": [
      753,
      759,
      764,
      765
     ]
    },
    "numpy.linalg.cond": {
     "line number": [
      751,
      758
     ]
    },
    "numpy.nan": {
     "line number": [
      749,
      756
     ]
    },
    "numpy.ones": {
     "line number": [
      748,
      755
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      752,
      753,
      759,
      761,
      762,
      764,
      765
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestCond.test_singular": {
  "data": {
   "lineno": 729,
   "symbols_in_volume": {
    "numpy.linalg.cond": {
     "line number": [
      739,
      741
     ]
    },
    "numpy.linalg.tests.test_linalg.itertools": {
     "line number": [
      736,
      740
     ]
    },
    "numpy.ones": {
     "line number": [
      733
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      739
     ]
    },
    "numpy.zeros": {
     "line number": [
      733
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestCond.test_stacked_singular": {
  "data": {
   "lineno": 767,
   "symbols_in_volume": {
    "numpy.inf": {
     "line number": [
      777,
      778
     ]
    },
    "numpy.isfinite": {
     "line number": [
      779,
      780
     ]
    },
    "numpy.linalg.cond": {
     "line number": [
      776
     ]
    },
    "numpy.random.rand": {
     "line number": [
      771
     ]
    },
    "numpy.random.seed": {
     "line number": [
      770
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      779,
      780
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      777,
      778
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestDet": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.DetCases": {
     "line number": [
      820
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestDet.test_0_size": {
  "data": {
   "lineno": 842,
   "symbols_in_volume": {
    "numpy.complex64": {
     "line number": [
      843,
      846,
      849
     ]
    },
    "numpy.float32": {
     "line number": [
      850
     ]
    },
    "numpy.float64": {
     "line number": [
      852,
      855,
      858,
      859
     ]
    },
    "numpy.linalg.det": {
     "line number": [
      844,
      853
     ]
    },
    "numpy.linalg.slogdet": {
     "line number": [
      847,
      856
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      846,
      849,
      850,
      855,
      858,
      859
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      845,
      848,
      854,
      857
     ]
    },
    "numpy.zeros": {
     "line number": [
      843,
      852
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestDet.test_types": {
  "data": {
   "lineno": 834,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      836
     ]
    },
    "numpy.cdouble": {
     "line number": [
      834
     ]
    },
    "numpy.csingle": {
     "line number": [
      834
     ]
    },
    "numpy.double": {
     "line number": [
      834
     ]
    },
    "numpy.linalg.det": {
     "line number": [
      837
     ]
    },
    "numpy.linalg.slogdet": {
     "line number": [
      838
     ]
    },
    "numpy.linalg.tests.test_linalg.get_real_dtype": {
     "line number": [
      839
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      834
     ]
    },
    "numpy.single": {
     "line number": [
      834
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      837,
      839,
      840
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestDet.test_zero": {
  "data": {
   "lineno": 821,
   "symbols_in_volume": {
    "numpy.cdouble": {
     "line number": [
      825,
      831
     ]
    },
    "numpy.double": {
     "line number": [
      823,
      828,
      829,
      832
     ]
    },
    "numpy.inf": {
     "line number": [
      827,
      830
     ]
    },
    "numpy.linalg.det": {
     "line number": [
      822,
      823,
      824,
      825
     ]
    },
    "numpy.linalg.slogdet": {
     "line number": [
      827,
      828,
      829,
      830,
      831,
      832
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      822,
      823,
      824,
      825,
      827,
      828,
      829,
      830,
      831,
      832
     ]
    },
    "type": {
     "line number": [
      823,
      825,
      828,
      829,
      831,
      832
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEig": {
  "data": {
   "lineno": 600,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.EigCases": {
     "line number": [
      600
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestEig.test_0_size": {
  "data": {
   "lineno": 613,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      624,
      633
     ]
    },
    "numpy.complex64": {
     "line number": [
      626,
      628,
      629
     ]
    },
    "numpy.float64": {
     "line number": [
      619,
      620
     ]
    },
    "numpy.int_": {
     "line number": [
      617
     ]
    },
    "numpy.linalg.eig": {
     "line number": [
      618,
      627
     ]
    },
    "numpy.ndarray": {
     "line number": [
      624,
      633
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      619,
      620,
      624,
      628,
      629,
      633
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      621,
      622,
      630,
      631
     ]
    },
    "numpy.zeros": {
     "line number": [
      617,
      626
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEig.test_0_size.ArraySubclass": {
  "data": {
   "lineno": 615,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      615
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestEig.test_types": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      603,
      608
     ]
    },
    "numpy.cdouble": {
     "line number": [
      601
     ]
    },
    "numpy.csingle": {
     "line number": [
      601
     ]
    },
    "numpy.double": {
     "line number": [
      601
     ]
    },
    "numpy.linalg.eig": {
     "line number": [
      604,
      609
     ]
    },
    "numpy.linalg.tests.test_linalg.get_complex_dtype": {
     "line number": [
      610,
      611
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      601
     ]
    },
    "numpy.single": {
     "line number": [
      601
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      605,
      606,
      610,
      611
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEigh": {
  "data": {
   "lineno": 1121,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1121
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestEigh.test_0_size": {
  "data": {
   "lineno": 1157,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1168,
      1177
     ]
    },
    "numpy.complex64": {
     "line number": [
      1170,
      1172
     ]
    },
    "numpy.float32": {
     "line number": [
      1173
     ]
    },
    "numpy.float64": {
     "line number": [
      1163,
      1164
     ]
    },
    "numpy.int_": {
     "line number": [
      1161
     ]
    },
    "numpy.linalg.eigh": {
     "line number": [
      1162,
      1171
     ]
    },
    "numpy.ndarray": {
     "line number": [
      1168,
      1177
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1163,
      1164,
      1168,
      1172,
      1173,
      1177
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1165,
      1166,
      1174,
      1175
     ]
    },
    "numpy.zeros": {
     "line number": [
      1161,
      1170
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEigh.test_0_size.ArraySubclass": {
  "data": {
   "lineno": 1159,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      1159
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestEigh.test_UPLO": {
  "data": {
   "lineno": 1135,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1136,
      1137,
      1138
     ]
    },
    "numpy.double": {
     "line number": [
      1136,
      1137,
      1138,
      1139
     ]
    },
    "numpy.linalg.eigh": {
     "line number": [
      1142,
      1145,
      1148,
      1151,
      1154
     ]
    },
    "numpy.linalg.tests.test_linalg.get_rtol": {
     "line number": [
      1139
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1143,
      1146,
      1149,
      1152,
      1155
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEigh.test_invalid": {
  "data": {
   "lineno": 1129,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1131,
      1132,
      1133
     ]
    },
    "numpy.array": {
     "line number": [
      1130
     ]
    },
    "numpy.float32": {
     "line number": [
      1130
     ]
    },
    "numpy.linalg.eigh": {
     "line number": [
      1131,
      1132,
      1133
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1131,
      1132,
      1133
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEigh.test_types": {
  "data": {
   "lineno": 1122,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1124
     ]
    },
    "numpy.cdouble": {
     "line number": [
      1122
     ]
    },
    "numpy.csingle": {
     "line number": [
      1122
     ]
    },
    "numpy.double": {
     "line number": [
      1122
     ]
    },
    "numpy.linalg.eigh": {
     "line number": [
      1125
     ]
    },
    "numpy.linalg.tests.test_linalg.get_real_dtype": {
     "line number": [
      1126
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      1122
     ]
    },
    "numpy.single": {
     "line number": [
      1122
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1126,
      1127
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEighCases": {
  "data": {
   "lineno": 1099,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase": {
     "line number": [
      1099
     ]
    },
    "numpy.linalg.tests.test_linalg.HermitianTestCase": {
     "line number": [
      1099
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestEighCases.do": {
  "data": {
   "lineno": 1101,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      1110,
      1110,
      1117,
      1117
     ]
    },
    "numpy.linalg.eig": {
     "line number": [
      1105
     ]
    },
    "numpy.linalg.eigh": {
     "line number": [
      1104,
      1113
     ]
    },
    "numpy.linalg.tests.test_linalg.dot_generalized": {
     "line number": [
      1109,
      1116
     ]
    },
    "numpy.linalg.tests.test_linalg.get_rtol": {
     "line number": [
      1111,
      1118
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1109,
      1116
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1107,
      1114
     ]
    },
    "repr": {
     "line number": [
      1118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEigvals": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.EigvalsCases": {
     "line number": [
      563
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestEigvals.test_0_size": {
  "data": {
   "lineno": 571,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      580,
      587
     ]
    },
    "numpy.complex64": {
     "line number": [
      582,
      584
     ]
    },
    "numpy.float64": {
     "line number": [
      577
     ]
    },
    "numpy.int_": {
     "line number": [
      575
     ]
    },
    "numpy.linalg.eigvals": {
     "line number": [
      576,
      583
     ]
    },
    "numpy.ndarray": {
     "line number": [
      580,
      587
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      577,
      580,
      584,
      587
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      578,
      585
     ]
    },
    "numpy.zeros": {
     "line number": [
      575,
      582
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEigvals.test_0_size.ArraySubclass": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      573
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestEigvals.test_types": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      566,
      568
     ]
    },
    "numpy.cdouble": {
     "line number": [
      564
     ]
    },
    "numpy.csingle": {
     "line number": [
      564
     ]
    },
    "numpy.double": {
     "line number": [
      564
     ]
    },
    "numpy.linalg.eigvals": {
     "line number": [
      567,
      569
     ]
    },
    "numpy.linalg.tests.test_linalg.get_complex_dtype": {
     "line number": [
      569
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      564
     ]
    },
    "numpy.single": {
     "line number": [
      564
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      567,
      569
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEigvalsh": {
  "data": {
   "lineno": 1045,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1045
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestEigvalsh.test_0_size": {
  "data": {
   "lineno": 1080,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1089,
      1096
     ]
    },
    "numpy.complex64": {
     "line number": [
      1091
     ]
    },
    "numpy.float32": {
     "line number": [
      1093
     ]
    },
    "numpy.float64": {
     "line number": [
      1086
     ]
    },
    "numpy.int_": {
     "line number": [
      1084
     ]
    },
    "numpy.linalg.eigvalsh": {
     "line number": [
      1085,
      1092
     ]
    },
    "numpy.ndarray": {
     "line number": [
      1089,
      1096
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1086,
      1089,
      1093,
      1096
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1087,
      1094
     ]
    },
    "numpy.zeros": {
     "line number": [
      1084,
      1091
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEigvalsh.test_0_size.ArraySubclass": {
  "data": {
   "lineno": 1082,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      1082
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestEigvalsh.test_UPLO": {
  "data": {
   "lineno": 1058,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1059,
      1060,
      1061
     ]
    },
    "numpy.double": {
     "line number": [
      1059,
      1060,
      1061,
      1062
     ]
    },
    "numpy.linalg.eigvalsh": {
     "line number": [
      1065,
      1068,
      1071,
      1074,
      1077
     ]
    },
    "numpy.linalg.tests.test_linalg.get_rtol": {
     "line number": [
      1062
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1066,
      1069,
      1072,
      1075,
      1078
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEigvalsh.test_invalid": {
  "data": {
   "lineno": 1052,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1054,
      1055,
      1056
     ]
    },
    "numpy.array": {
     "line number": [
      1053
     ]
    },
    "numpy.float32": {
     "line number": [
      1053
     ]
    },
    "numpy.linalg.eigvalsh": {
     "line number": [
      1054,
      1055,
      1056
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1054,
      1055,
      1056
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEigvalsh.test_types": {
  "data": {
   "lineno": 1046,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1048
     ]
    },
    "numpy.cdouble": {
     "line number": [
      1046
     ]
    },
    "numpy.csingle": {
     "line number": [
      1046
     ]
    },
    "numpy.double": {
     "line number": [
      1046
     ]
    },
    "numpy.linalg.eigvalsh": {
     "line number": [
      1049
     ]
    },
    "numpy.linalg.tests.test_linalg.get_real_dtype": {
     "line number": [
      1050
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      1046
     ]
    },
    "numpy.single": {
     "line number": [
      1046
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1050
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestEigvalshCases": {
  "data": {
   "lineno": 1031,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase": {
     "line number": [
      1031
     ]
    },
    "numpy.linalg.tests.test_linalg.HermitianTestCase": {
     "line number": [
      1031
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestEigvalshCases.do": {
  "data": {
   "lineno": 1033,
   "symbols_in_volume": {
    "numpy.linalg.eig": {
     "line number": [
      1037
     ]
    },
    "numpy.linalg.eigvalsh": {
     "line number": [
      1036,
      1041
     ]
    },
    "numpy.linalg.tests.test_linalg.get_rtol": {
     "line number": [
      1039,
      1042
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1039,
      1042
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestInv": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.InvCases": {
     "line number": [
      532
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestInv.test_0_size": {
  "data": {
   "lineno": 538,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      546,
      552
     ]
    },
    "numpy.complex64": {
     "line number": [
      548,
      550
     ]
    },
    "numpy.float64": {
     "line number": [
      544
     ]
    },
    "numpy.int_": {
     "line number": [
      542
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      543,
      549
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      544,
      546,
      550,
      552
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      545,
      551
     ]
    },
    "numpy.zeros": {
     "line number": [
      542,
      548
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestInv.test_0_size.ArraySubclass": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      540
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestInv.test_types": {
  "data": {
   "lineno": 533,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      535
     ]
    },
    "numpy.cdouble": {
     "line number": [
      533
     ]
    },
    "numpy.csingle": {
     "line number": [
      533
     ]
    },
    "numpy.double": {
     "line number": [
      533
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      536
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      533
     ]
    },
    "numpy.single": {
     "line number": [
      533
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      536
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestLstsq": {
  "data": {
   "lineno": 892,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LstsqCases": {
     "line number": [
      892
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestLstsq.test_empty_a_b": {
  "data": {
   "lineno": 911,
   "symbols_in_volume": {
    "min": {
     "line number": [
      932,
      933
     ]
    },
    "numpy.arange": {
     "line number": [
      921
     ]
    },
    "numpy.dot": {
     "line number": [
      930
     ]
    },
    "numpy.linalg.lstsq": {
     "line number": [
      923
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      911
     ]
    },
    "numpy.ones": {
     "line number": [
      922
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      925
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      931
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      926,
      927,
      932,
      933
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestLstsq.test_future_rcond": {
  "data": {
   "lineno": 893,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      901
     ]
    },
    "len": {
     "line number": [
      909
     ]
    },
    "numpy.array": {
     "line number": [
      894,
      899
     ]
    },
    "numpy.linalg.lstsq": {
     "line number": [
      902,
      904,
      906
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      903,
      905,
      907,
      909
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      900
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestLstsq.test_incompatible_dims": {
  "data": {
   "lineno": 935,
   "symbols_in_volume": {
    "len": {
     "line number": [
      939
     ]
    },
    "numpy.array": {
     "line number": [
      937,
      938
     ]
    },
    "numpy.linalg.LinAlgError": {
     "line number": [
      940
     ]
    },
    "numpy.linalg.lstsq": {
     "line number": [
      941
     ]
    },
    "numpy.ones": {
     "line number": [
      939
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      940
     ]
    },
    "numpy.vstack": {
     "line number": [
      939
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower": {
  "data": {
   "lineno": 944,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      952
     ]
    },
    "numpy.block": {
     "line number": [
      953
     ]
    },
    "numpy.dtype": {
     "line number": [
      955,
      955,
      955,
      944
     ]
    },
    "numpy.eye": {
     "line number": [
      947
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      944
     ]
    },
    "object": {
     "line number": [
      945,
      955
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_exceptions_bad_power": {
  "data": {
   "lineno": 1013,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1015,
      1016
     ]
    },
    "numpy.linalg.matrix_power": {
     "line number": [
      1015,
      1016
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1015,
      1016
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_exceptions_non_square": {
  "data": {
   "lineno": 1018,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1019,
      1020
     ]
    },
    "numpy.linalg.LinAlgError": {
     "line number": [
      1019,
      1020,
      1021
     ]
    },
    "numpy.linalg.matrix_power": {
     "line number": [
      1019,
      1020,
      1021
     ]
    },
    "numpy.ones": {
     "line number": [
      1021
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1019,
      1020,
      1021
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_exceptions_not_invertible": {
  "data": {
   "lineno": 1023,
   "symbols_in_volume": {
    "numpy.linalg.LinAlgError": {
     "line number": [
      1027
     ]
    },
    "numpy.linalg.matrix_power": {
     "line number": [
      1027
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1027
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_large_power": {
  "data": {
   "lineno": 957,
   "symbols_in_volume": {
    "numpy.linalg.matrix_power": {
     "line number": [
      960,
      962,
      964,
      966
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      959,
      961,
      963,
      965
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_minus_one": {
  "data": {
   "lineno": 1002,
   "symbols_in_volume": {
    "tz": {
     "line number": [
      1011
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_minus_one.tz": {
  "data": {
   "lineno": 1003,
   "symbols_in_volume": {
    "mmul": {
     "line number": [
      1005,
      1007
     ]
    },
    "numpy.dot": {
     "line number": [
      1005
     ]
    },
    "numpy.linalg.matrix_power": {
     "line number": [
      1004
     ]
    },
    "numpy.linalg.tests.test_linalg.identity_like_generalized": {
     "line number": [
      1007
     ]
    },
    "numpy.matmul": {
     "line number": [
      1005
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1006
     ]
    },
    "object": {
     "line number": [
      1005
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_one": {
  "data": {
   "lineno": 979,
   "symbols_in_volume": {
    "object": {
     "line number": [
      987
     ]
    },
    "tz": {
     "line number": [
      986,
      988
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_one.tz": {
  "data": {
   "lineno": 980,
   "symbols_in_volume": {
    "numpy.linalg.matrix_power": {
     "line number": [
      981
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      982,
      983
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_two": {
  "data": {
   "lineno": 990,
   "symbols_in_volume": {
    "object": {
     "line number": [
      999
     ]
    },
    "tz": {
     "line number": [
      998,
      1000
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_two.tz": {
  "data": {
   "lineno": 991,
   "symbols_in_volume": {
    "mmul": {
     "line number": [
      994
     ]
    },
    "numpy.dot": {
     "line number": [
      993
     ]
    },
    "numpy.linalg.matrix_power": {
     "line number": [
      992
     ]
    },
    "numpy.matmul": {
     "line number": [
      993
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      994,
      995
     ]
    },
    "object": {
     "line number": [
      993
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_zero": {
  "data": {
   "lineno": 968,
   "symbols_in_volume": {
    "object": {
     "line number": [
      976
     ]
    },
    "tz": {
     "line number": [
      975,
      977
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_zero.tz": {
  "data": {
   "lineno": 969,
   "symbols_in_volume": {
    "numpy.linalg.matrix_power": {
     "line number": [
      970
     ]
    },
    "numpy.linalg.tests.test_linalg.identity_like_generalized": {
     "line number": [
      971
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      971,
      972
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixRank": {
  "data": {
   "lineno": 1521,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1521
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixRank.test_matrix_rank": {
  "data": {
   "lineno": 1523,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1538,
      1539
     ]
    },
    "numpy.eye": {
     "line number": [
      1525,
      1527,
      1538
     ]
    },
    "numpy.linalg.matrix_rank": {
     "line number": [
      1525,
      1529,
      1531,
      1533,
      1534,
      1536,
      1539,
      1541
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1525,
      1529,
      1531,
      1533,
      1534,
      1536,
      1539,
      1541
     ]
    },
    "numpy.zeros": {
     "line number": [
      1531,
      1534,
      1538
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMatrixRank.test_symmetric_rank": {
  "data": {
   "lineno": 1543,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      1544,
      1548
     ]
    },
    "numpy.linalg.matrix_rank": {
     "line number": [
      1544,
      1545,
      1546,
      1550,
      1553,
      1554
     ]
    },
    "numpy.ones": {
     "line number": [
      1545
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1544,
      1545,
      1546,
      1550,
      1553,
      1554
     ]
    },
    "numpy.zeros": {
     "line number": [
      1546
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMultiDot": {
  "data": {
   "lineno": 1832,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1832
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestMultiDot.test_basic_function_with_dynamic_programing_optimization": {
  "data": {
   "lineno": 1852,
   "symbols_in_volume": {
    "numpy.linalg.multi_dot": {
     "line number": [
      1859
     ]
    },
    "numpy.random.random": {
     "line number": [
      1855,
      1856,
      1857,
      1858
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1859
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMultiDot.test_basic_function_with_three_arguments": {
  "data": {
   "lineno": 1834,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      1842,
      1842
     ]
    },
    "numpy.linalg.multi_dot": {
     "line number": [
      1841,
      1842
     ]
    },
    "numpy.random.random": {
     "line number": [
      1837,
      1838,
      1839
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1841,
      1842
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMultiDot.test_basic_function_with_two_arguments": {
  "data": {
   "lineno": 1844,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      1850
     ]
    },
    "numpy.linalg.multi_dot": {
     "line number": [
      1849,
      1850
     ]
    },
    "numpy.random.random": {
     "line number": [
      1846,
      1847
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1849,
      1850
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMultiDot.test_dynamic_programming_logic": {
  "data": {
   "lineno": 1891,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1911
     ]
    },
    "numpy.array": {
     "line number": [
      1900,
      1906
     ]
    },
    "numpy.linalg.linalg._multi_dot_matrix_chain_order": {
     "line number": [
      1914
     ]
    },
    "numpy.random.random": {
     "line number": [
      1894,
      1895,
      1896,
      1897,
      1898,
      1899
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1917,
      1919
     ]
    },
    "numpy.triu": {
     "line number": [
      1917,
      1918,
      1919,
      1919
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMultiDot.test_too_few_input_arrays": {
  "data": {
   "lineno": 1921,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1922,
      1923
     ]
    },
    "numpy.linalg.multi_dot": {
     "line number": [
      1922,
      1923
     ]
    },
    "numpy.random.random": {
     "line number": [
      1923
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1922,
      1923
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_first_and_last_argument": {
  "data": {
   "lineno": 1881,
   "symbols_in_volume": {
    "numpy.linalg.multi_dot": {
     "line number": [
      1889
     ]
    },
    "numpy.random.random": {
     "line number": [
      1883,
      1884,
      1885,
      1886
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1889
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_first_argument": {
  "data": {
   "lineno": 1861,
   "symbols_in_volume": {
    "numpy.linalg.multi_dot": {
     "line number": [
      1869
     ]
    },
    "numpy.random.random": {
     "line number": [
      1863,
      1864,
      1865,
      1866
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1869
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_last_argument": {
  "data": {
   "lineno": 1871,
   "symbols_in_volume": {
    "numpy.linalg.multi_dot": {
     "line number": [
      1879
     ]
    },
    "numpy.random.random": {
     "line number": [
      1873,
      1874,
      1875,
      1876
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1879
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestNormDouble": {
  "data": {
   "lineno": 1509,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg._TestNorm": {
     "line number": [
      1509
     ]
    },
    "numpy.linalg.tests.test_linalg._TestNormDoubleBase": {
     "line number": [
      1509
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestNormInt64": {
  "data": {
   "lineno": 1517,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg._TestNorm": {
     "line number": [
      1517
     ]
    },
    "numpy.linalg.tests.test_linalg._TestNormInt64Base": {
     "line number": [
      1517
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestNormSingle": {
  "data": {
   "lineno": 1513,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg._TestNorm": {
     "line number": [
      1513
     ]
    },
    "numpy.linalg.tests.test_linalg._TestNormSingleBase": {
     "line number": [
      1513
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestNorm_NonSystematic": {
  "data": {
   "lineno": 1466,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1466
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_complex_high_ord": {
  "data": {
   "lineno": 1480,
   "symbols_in_volume": {
    "numpy.clongdouble": {
     "line number": [
      1482
     ]
    },
    "numpy.complex128": {
     "line number": [
      1487
     ]
    },
    "numpy.complex64": {
     "line number": [
      1489
     ]
    },
    "numpy.empty": {
     "line number": [
      1482
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1486,
      1488,
      1490
     ]
    },
    "numpy.linalg.tests.test_linalg.old_assert_almost_equal": {
     "line number": [
      1486,
      1488,
      1490
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_intmin": {
  "data": {
   "lineno": 1474,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1477
     ]
    },
    "numpy.int32": {
     "line number": [
      1477
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1478
     ]
    },
    "numpy.linalg.tests.test_linalg.old_assert_almost_equal": {
     "line number": [
      1478
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_longdouble_norm": {
  "data": {
   "lineno": 1468,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1471
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1472
     ]
    },
    "numpy.linalg.tests.test_linalg.old_assert_almost_equal": {
     "line number": [
      1472
     ]
    },
    "numpy.longdouble": {
     "line number": [
      1471
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestPinv": {
  "data": {
   "lineno": 796,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.PinvCases": {
     "line number": [
      796
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestQR": {
  "data": {
   "lineno": 1570,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1572,
      1572
     ]
    },
    "object": {
     "line number": [
      1570
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestQR.check_qr": {
  "data": {
   "lineno": 1574,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1586,
      1587,
      1598,
      1599,
      1609
     ]
    },
    "min": {
     "line number": [
      1580
     ]
    },
    "numpy.dot": {
     "line number": [
      1590,
      1591,
      1602,
      1603
     ]
    },
    "numpy.eye": {
     "line number": [
      1591,
      1603
     ]
    },
    "numpy.linalg.qr": {
     "line number": [
      1583,
      1595,
      1607
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1584,
      1585,
      1586,
      1587,
      1588,
      1589,
      1596,
      1597,
      1598,
      1599,
      1600,
      1601,
      1608,
      1609
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1590,
      1591,
      1592,
      1602,
      1603,
      1604,
      1610
     ]
    },
    "numpy.triu": {
     "line number": [
      1592,
      1604
     ]
    },
    "type": {
     "line number": [
      1577
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestQR.test_mode_all_but_economic": {
  "data": {
   "lineno": 1652
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestQR.test_mode_raw": {
  "data": {
   "lineno": 1630,
   "symbols_in_volume": {
    "numpy.double": {
     "line number": [
      1637,
      1641,
      1642,
      1647,
      1648
     ]
    },
    "numpy.linalg.qr": {
     "line number": [
      1640,
      1646
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1641,
      1642,
      1643,
      1644,
      1647,
      1648,
      1649,
      1650
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestQR.test_qr_empty": {
  "data": {
   "lineno": 1613,
   "symbols_in_volume": {
    "min": {
     "line number": [
      1619
     ]
    },
    "numpy.double": {
     "line number": [
      1625,
      1626
     ]
    },
    "numpy.empty": {
     "line number": [
      1620
     ]
    },
    "numpy.linalg.qr": {
     "line number": [
      1624
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      1613
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1625,
      1626,
      1627,
      1628
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestSVD": {
  "data": {
   "lineno": 647,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.SVDCases": {
     "line number": [
      647
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestSVD.test_empty_identity": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      660,
      666
     ]
    },
    "numpy.eye": {
     "line number": [
      664,
      670
     ]
    },
    "numpy.linalg.svd": {
     "line number": [
      661,
      667
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      662,
      663,
      664,
      668,
      669,
      670
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestSVD.test_types": {
  "data": {
   "lineno": 648,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      650
     ]
    },
    "numpy.cdouble": {
     "line number": [
      648
     ]
    },
    "numpy.csingle": {
     "line number": [
      648
     ]
    },
    "numpy.double": {
     "line number": [
      648
     ]
    },
    "numpy.linalg.svd": {
     "line number": [
      651,
      655
     ]
    },
    "numpy.linalg.tests.test_linalg.get_real_dtype": {
     "line number": [
      653,
      656
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      648
     ]
    },
    "numpy.single": {
     "line number": [
      648
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      652,
      653,
      654,
      656
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestSolve": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.SolveCases": {
     "line number": [
      465
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestSolve.test_0_size": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      485,
      489,
      490,
      500,
      501,
      502
     ]
    },
    "isinstance": {
     "line number": [
      481,
      497
     ]
    },
    "numpy.arange": {
     "line number": [
      475,
      476,
      488,
      493,
      499
     ]
    },
    "numpy.linalg.LinAlgError": {
     "line number": [
      484
     ]
    },
    "numpy.linalg.solve": {
     "line number": [
      478,
      479,
      484,
      485,
      489,
      490,
      494,
      495,
      500,
      501,
      502
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      481,
      497
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      480,
      496
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      484,
      485,
      489,
      490,
      500,
      501,
      502
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestSolve.test_0_size.ArraySubclass": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      472
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestSolve.test_0_size_k": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      514,
      520
     ]
    },
    "numpy.arange": {
     "line number": [
      508,
      509
     ]
    },
    "numpy.linalg.solve": {
     "line number": [
      511,
      512,
      517,
      518
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      514,
      520
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      513,
      519
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestSolve.test_0_size_k.ArraySubclass": {
  "data": {
   "lineno": 506,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      506
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestSolve.test_types": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      468
     ]
    },
    "numpy.cdouble": {
     "line number": [
      466
     ]
    },
    "numpy.csingle": {
     "line number": [
      466
     ]
    },
    "numpy.double": {
     "line number": [
      466
     ]
    },
    "numpy.linalg.solve": {
     "line number": [
      469
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      466
     ]
    },
    "numpy.single": {
     "line number": [
      466
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestTensorinv": {
  "data": {
   "lineno": 1926,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1926
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg.TestTensorinv.test_non_square_handling": {
  "data": {
   "lineno": 1928,
   "symbols_in_volume": {
    "numpy.linalg.LinAlgError": {
     "line number": [
      1933
     ]
    },
    "numpy.linalg.tensorinv": {
     "line number": [
      1934
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      1928
     ]
    },
    "numpy.ones": {
     "line number": [
      1929,
      1930
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1933
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestTensorinv.test_tensorinv_ind_limit": {
  "data": {
   "lineno": 1949,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1955
     ]
    },
    "numpy.eye": {
     "line number": [
      1953
     ]
    },
    "numpy.linalg.tensorinv": {
     "line number": [
      1956
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      1949
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1955
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestTensorinv.test_tensorinv_result": {
  "data": {
   "lineno": 1958,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      1960
     ]
    },
    "numpy.linalg.tensorinv": {
     "line number": [
      1962
     ]
    },
    "numpy.linalg.tensorsolve": {
     "line number": [
      1964
     ]
    },
    "numpy.ones": {
     "line number": [
      1963
     ]
    },
    "numpy.tensordot": {
     "line number": [
      1964
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1964
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.TestTensorinv.test_tensorinv_shape": {
  "data": {
   "lineno": 1936,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      1942
     ]
    },
    "numpy.linalg.tensorinv": {
     "line number": [
      1944
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      1936
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1947
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNorm": {
  "data": {
   "lineno": 1462,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg._TestNorm2D": {
     "line number": [
      1462
     ]
    },
    "numpy.linalg.tests.test_linalg._TestNormGeneral": {
     "line number": [
      1462
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg._TestNorm2D": {
  "data": {
   "lineno": 1343,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1346,
      1346
     ]
    },
    "numpy.linalg.tests.test_linalg._TestNormBase": {
     "line number": [
      1343
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg._TestNorm2D.test_bad_args": {
  "data": {
   "lineno": 1435,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1444,
      1445,
      1446,
      1447,
      1452,
      1453,
      1454,
      1459
     ]
    },
    "numpy.AxisError": {
     "line number": [
      1457,
      1458
     ]
    },
    "numpy.arange": {
     "line number": [
      1439
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1444,
      1445,
      1446,
      1447,
      1452,
      1453,
      1454,
      1457,
      1458,
      1459
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1444,
      1445,
      1446,
      1447,
      1452,
      1453,
      1454,
      1457,
      1458,
      1459
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_2x2": {
  "data": {
   "lineno": 1402,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1414,
      1415,
      1416
     ]
    },
    "numpy.inf": {
     "line number": [
      1407,
      1408
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1404,
      1405,
      1406,
      1407,
      1408,
      1409,
      1410,
      1411,
      1412,
      1414,
      1415,
      1416
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1404,
      1405,
      1406,
      1407,
      1408,
      1409,
      1410,
      1411,
      1412
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1414,
      1415,
      1416
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_3x3": {
  "data": {
   "lineno": 1418,
   "symbols_in_volume": {
    "numpy.inf": {
     "line number": [
      1428,
      1429
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1425,
      1426,
      1427,
      1428,
      1429,
      1430,
      1431,
      1432,
      1433
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1425,
      1426,
      1427,
      1428,
      1429,
      1430,
      1431,
      1432,
      1433
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_empty": {
  "data": {
   "lineno": 1348,
   "symbols_in_volume": {
    "numpy.linalg.norm": {
     "line number": [
      1349
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1349
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_return_type": {
  "data": {
   "lineno": 1351,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      1371
     ]
    },
    "issubclass": {
     "line number": [
      1367,
      1373,
      1377,
      1381,
      1385,
      1389,
      1393,
      1397
     ]
    },
    "numpy.floating": {
     "line number": [
      1367,
      1373,
      1377,
      1381,
      1385,
      1389,
      1393,
      1397
     ]
    },
    "numpy.inf": {
     "line number": [
      1366,
      1388
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1366,
      1372,
      1376,
      1380,
      1384,
      1388,
      1392,
      1396
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1367,
      1373,
      1377,
      1381,
      1385,
      1389,
      1393,
      1397
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1368,
      1374,
      1378,
      1382,
      1386,
      1390,
      1394,
      1400
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1370
     ]
    },
    "numpy.typecodes": {
     "line number": [
      1354
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNormBase": {
  "data": {
   "lineno": 1180,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1180
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg._TestNormDoubleBase": {
  "data": {
   "lineno": 1494,
   "symbols_in_volume": {
    "numpy.double": {
     "line number": [
      1495
     ]
    },
    "numpy.linalg.tests.test_linalg._TestNormBase": {
     "line number": [
      1494
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg._TestNormGeneral": {
  "data": {
   "lineno": 1185,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg._TestNormBase": {
     "line number": [
      1185
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg._TestNormGeneral.test_axis": {
  "data": {
   "lineno": 1263,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1285
     ]
    },
    "numpy.Inf": {
     "line number": [
      1268,
      1268,
      1277,
      1277
     ]
    },
    "numpy.arange": {
     "line number": [
      1275
     ]
    },
    "numpy.array": {
     "line number": [
      1267
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1269,
      1270,
      1271,
      1272,
      1285,
      1287,
      1293,
      1296
     ]
    },
    "numpy.linalg.tests.test_linalg.itertools": {
     "line number": [
      1278
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1270,
      1272,
      1298
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1285
     ]
    },
    "range": {
     "line number": [
      1269,
      1271,
      1278,
      1294,
      1297
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNormGeneral.test_empty": {
  "data": {
   "lineno": 1187,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1189,
      1190
     ]
    },
    "numpy.atleast_2d": {
     "line number": [
      1190
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1188,
      1189,
      1190
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1188,
      1189,
      1190
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNormGeneral.test_keepdims": {
  "data": {
   "lineno": 1300,
   "symbols_in_volume": {
    "list": {
     "line number": [
      1322,
      1335
     ]
    },
    "numpy.Inf": {
     "line number": [
      1316,
      1316,
      1329,
      1329
     ]
    },
    "numpy.arange": {
     "line number": [
      1301
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1307,
      1308,
      1318,
      1319,
      1331,
      1332
     ]
    },
    "numpy.linalg.tests.test_linalg.itertools": {
     "line number": [
      1330
     ]
    },
    "numpy.squeeze": {
     "line number": [
      1309,
      1320,
      1333
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1312,
      1325,
      1339
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      1309,
      1320,
      1333
     ]
    },
    "range": {
     "line number": [
      1317,
      1330
     ]
    },
    "tuple": {
     "line number": [
      1324,
      1338
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNormGeneral.test_vector": {
  "data": {
   "lineno": 1233,
   "symbols_in_volume": {
    "_test": {
     "line number": [
      1257,
      1261
     ]
    },
    "numpy.array": {
     "line number": [
      1259,
      1259,
      1260
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNormGeneral.test_vector._test": {
  "data": {
   "lineno": 1238,
   "symbols_in_volume": {
    "numpy.inf": {
     "line number": [
      1241,
      1243
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1239,
      1241,
      1243,
      1245,
      1247,
      1249,
      1251,
      1253
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1239,
      1241,
      1243,
      1245,
      1247,
      1249,
      1251,
      1253
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNormGeneral.test_vector_return_type": {
  "data": {
   "lineno": 1192,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      1208
     ]
    },
    "issubclass": {
     "line number": [
      1204,
      1210,
      1214,
      1218,
      1222,
      1226,
      1230
     ]
    },
    "numpy.array": {
     "line number": [
      1193
     ]
    },
    "numpy.floating": {
     "line number": [
      1204,
      1210,
      1214,
      1218,
      1222,
      1226,
      1230
     ]
    },
    "numpy.inf": {
     "line number": [
      1203,
      1229
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      1203,
      1209,
      1213,
      1217,
      1221,
      1225,
      1229
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1204,
      1210,
      1214,
      1218,
      1222,
      1226,
      1230
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      1205,
      1211,
      1215,
      1219,
      1223,
      1227,
      1231
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1207
     ]
    },
    "numpy.typecodes": {
     "line number": [
      1195,
      1196
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._TestNormInt64Base": {
  "data": {
   "lineno": 1504,
   "symbols_in_volume": {
    "numpy.int64": {
     "line number": [
      1505
     ]
    },
    "numpy.linalg.tests.test_linalg._TestNormBase": {
     "line number": [
      1504
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg._TestNormSingleBase": {
  "data": {
   "lineno": 1499,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      1500
     ]
    },
    "numpy.linalg.tests.test_linalg._TestNormBase": {
     "line number": [
      1499
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_linalg._make_generalized_cases": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      240
     ]
    },
    "numpy.array": {
     "line number": [
      243,
      247,
      252,
      256
     ]
    },
    "numpy.linalg.tests.test_linalg.CASES": {
     "line number": [
      239
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgCase": {
     "line number": [
      248,
      257
     ]
    },
    "numpy.ndarray": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._make_strided_cases": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.CASES": {
     "line number": [
      320
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgCase": {
     "line number": [
      323
     ]
    },
    "numpy.linalg.tests.test_linalg._stride_comb_iter": {
     "line number": [
      321,
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg._multi_dot_matrix_chain_order": {
  "data": {
   "shadows": "numpy.linalg.linalg._multi_dot_matrix_chain_order"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg._stride_comb_iter": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      287
     ]
    },
    "isinstance": {
     "line number": [
      275
     ]
    },
    "list": {
     "line number": [
      301,
      306,
      311
     ]
    },
    "numpy.all": {
     "line number": [
      296
     ]
    },
    "numpy.empty": {
     "line number": [
      291
     ]
    },
    "numpy.lib.stride_tricks.as_strided": {
     "line number": [
      303,
      308,
      314
     ]
    },
    "numpy.linalg.tests.test_linalg.itertools": {
     "line number": [
      286
     ]
    },
    "numpy.ndarray": {
     "line number": [
      275
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      296
     ]
    },
    "numpy.uint32": {
     "line number": [
      292
     ]
    },
    "slice": {
     "line number": [
      288
     ]
    },
    "tuple": {
     "line number": [
      286,
      288
     ]
    },
    "zip": {
     "line number": [
      287
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.all_tags": {
  "data": {
   "lineno": 64
  },
  "type": "constant"
 },
 "numpy.linalg.tests.test_linalg.apply_tag": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.all_tags": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.asarray": {
  "data": {
   "shadows": "numpy.asarray"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.assert_almost_equal": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      38
     ]
    },
    "numpy.csingle": {
     "line number": [
      38
     ]
    },
    "numpy.linalg.tests.test_linalg.old_assert_almost_equal": {
     "line number": [
      42
     ]
    },
    "numpy.single": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.atleast_2d": {
  "data": {
   "shadows": "numpy.atleast_2d"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.cdouble": {
  "data": {
   "shadows": "numpy.cdouble"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.consistent_subclass": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      30
     ]
    },
    "numpy.ndarray": {
     "line number": [
      30,
      31
     ]
    },
    "type": {
     "line number": [
      30,
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.csingle": {
  "data": {
   "shadows": "numpy.csingle"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.dot": {
  "data": {
   "shadows": "numpy.dot"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.dot_generalized": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      438
     ]
    },
    "map": {
     "line number": [
      440
     ]
    },
    "numpy.asarray": {
     "line number": [
      429
     ]
    },
    "numpy.common_type": {
     "line number": [
      439
     ]
    },
    "numpy.dot": {
     "line number": [
      441,
      444
     ]
    },
    "numpy.empty": {
     "line number": [
      439
     ]
    },
    "numpy.linalg.tests.test_linalg.itertools": {
     "line number": [
      440
     ]
    },
    "range": {
     "line number": [
      440
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.double": {
  "data": {
   "shadows": "numpy.double"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.get_complex_dtype": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "numpy.cdouble": {
     "line number": [
      52,
      51,
      52
     ]
    },
    "numpy.csingle": {
     "line number": [
      52,
      51,
      52
     ]
    },
    "numpy.double": {
     "line number": [
      51
     ]
    },
    "numpy.single": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.get_real_dtype": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "numpy.cdouble": {
     "line number": [
      47
     ]
    },
    "numpy.csingle": {
     "line number": [
      47
     ]
    },
    "numpy.double": {
     "line number": [
      46,
      46,
      47
     ]
    },
    "numpy.single": {
     "line number": [
      46,
      46,
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.get_rtol": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "numpy.csingle": {
     "line number": [
      57
     ]
    },
    "numpy.single": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.identity": {
  "data": {
   "shadows": "numpy.identity"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.identity_like_generalized": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      448
     ]
    },
    "numpy.empty": {
     "line number": [
      450
     ]
    },
    "numpy.identity": {
     "line number": [
      451,
      454
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.inf": {
  "data": {
   "shadows": "numpy.inf"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.linalg": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.matmul": {
  "data": {
   "shadows": "numpy.matmul"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.matrix_power": {
  "data": {
   "shadows": "numpy.linalg.matrix_power"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.matrix_rank": {
  "data": {
   "shadows": "numpy.linalg.matrix_rank"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.multi_dot": {
  "data": {
   "shadows": "numpy.linalg.multi_dot"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.multiply": {
  "data": {
   "shadows": "numpy.multiply"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.norm": {
  "data": {
   "shadows": "numpy.linalg.norm"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.old_assert_almost_equal": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "numpy.linalg.tests.test_linalg.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.resource": {
  "data": {
   "shadows": "resource"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.single": {
  "data": {
   "shadows": "numpy.single"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.test_byteorder_check": {
  "data": {
   "lineno": 1714,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      1722
     ]
    },
    "numpy.float32": {
     "line number": [
      1721
     ]
    },
    "numpy.float64": {
     "line number": [
      1721
     ]
    },
    "numpy.linalg.det": {
     "line number": [
      1726
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      1726
     ]
    },
    "numpy.linalg.pinv": {
     "line number": [
      1726
     ]
    },
    "numpy.linalg.tests.test_linalg.sys": {
     "line number": [
      1716
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1730,
      1732
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1725
     ]
    },
    "routine": {
     "line number": [
      1728,
      1730,
      1732
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.test_generalized_raise_multiloop": {
  "data": {
   "lineno": 1735,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1739,
      1740
     ]
    },
    "numpy.linalg.LinAlgError": {
     "line number": [
      1746
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      1746
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1746
     ]
    },
    "numpy.zeros": {
     "line number": [
      1742
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.test_reduced_rank": {
  "data": {
   "lineno": 1557,
   "symbols_in_volume": {
    "numpy.linalg.matrix_rank": {
     "line number": [
      1565,
      1567
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      1559
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1565,
      1567
     ]
    },
    "range": {
     "line number": [
      1560
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.test_sdot_bug_8577": {
  "data": {
   "lineno": 1798,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.subprocess": {
     "line number": [
      1824,
      1829
     ]
    },
    "numpy.linalg.tests.test_linalg.sys": {
     "line number": [
      1824,
      1829
     ]
    },
    "numpy.linalg.tests.test_linalg.textwrap": {
     "line number": [
      1809
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.test_xerbla_override": {
  "data": {
   "lineno": 1749,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      1758
     ]
    },
    "Exception": {
     "line number": [
      1774
     ]
    },
    "OSError": {
     "line number": [
      1758
     ]
    },
    "ValueError": {
     "line number": [
      1772,
      1783
     ]
    },
    "numpy.array": {
     "line number": [
      1778
     ]
    },
    "numpy.linalg.lapack_lite.dorgqr": {
     "line number": [
      1779
     ]
    },
    "numpy.linalg.lapack_lite.xerbla": {
     "line number": [
      1771
     ]
    },
    "numpy.linalg.tests.test_linalg.os": {
     "line number": [
      1757,
      1764,
      1765,
      1775,
      1775,
      1787,
      1790,
      1790,
      1793,
      1794
     ]
    },
    "numpy.linalg.tests.test_linalg.pytest": {
     "line number": [
      1760,
      1795
     ]
    },
    "numpy.linalg.tests.test_linalg.resource": {
     "line number": [
      1768,
      1768
     ]
    },
    "str": {
     "line number": [
      1784
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_linalg.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_linalg.traceback": {
  "data": {
   "shadows": "traceback"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression": {
  "data": {},
  "type": "module"
 },
 "numpy.linalg.tests.test_regression.TestRegression": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "object": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.linalg.tests.test_regression.TestRegression.test_eig_build": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      32
     ]
    },
    "numpy.array": {
     "line number": [
      19
     ]
    },
    "numpy.float64": {
     "line number": [
      32
     ]
    },
    "numpy.linalg.eig": {
     "line number": [
      35
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_regression.TestRegression.test_eigh_build": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      44
     ]
    },
    "numpy.linalg.eigh": {
     "line number": [
      48
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_regression.TestRegression.test_lapack_endian": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      68,
      70
     ]
    },
    "numpy.linalg.cholesky": {
     "line number": [
      72,
      73
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_regression.TestRegression.test_large_svd_32bit": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      78
     ]
    },
    "numpy.linalg.svd": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_regression.TestRegression.test_lstsq_complex_larger_rhs": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "numpy.linalg.lstsq": {
     "line number": [
      148
     ]
    },
    "numpy.random.randn": {
     "line number": [
      144,
      144,
      145,
      145
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_regression.TestRegression.test_norm_object_array": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      114
     ]
    },
    "DeprecationWarning": {
     "line number": [
      113,
      114
     ]
    },
    "TypeError": {
     "line number": [
      130,
      136,
      137
     ]
    },
    "ValueError": {
     "line number": [
      108,
      109,
      110,
      111,
      116,
      117,
      131,
      132,
      133,
      134,
      135,
      138
     ]
    },
    "numpy.array": {
     "line number": [
      94,
      94,
      119,
      119
     ]
    },
    "numpy.dtype": {
     "line number": [
      98,
      102,
      106,
      124,
      128
     ]
    },
    "numpy.inf": {
     "line number": [
      110,
      111,
      131,
      132
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      96,
      100,
      104,
      108,
      109,
      110,
      111,
      115,
      116,
      117,
      122,
      126,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138
     ]
    },
    "numpy.linalg.tests.test_regression.warnings": {
     "line number": [
      112,
      113
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      98,
      102,
      106,
      124,
      128
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      97,
      101,
      105,
      123,
      127
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      108,
      109,
      110,
      111,
      114,
      116,
      117,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138
     ]
    },
    "object": {
     "line number": [
      94,
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_regression.TestRegression.test_norm_vector_badarg": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      64
     ]
    },
    "numpy.array": {
     "line number": [
      64
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      64
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_regression.TestRegression.test_svd_build": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      53
     ]
    },
    "numpy.dot": {
     "line number": [
      57
     ]
    },
    "numpy.linalg.svd": {
     "line number": [
      55
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      59
     ]
    },
    "numpy.transpose": {
     "line number": [
      57
     ]
    },
    "numpy.zeros": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_regression.TestRegression.test_svd_no_uv": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      84
     ]
    },
    "float": {
     "line number": [
      84
     ]
    },
    "numpy.absolute": {
     "line number": [
      87
     ]
    },
    "numpy.count_nonzero": {
     "line number": [
      87
     ]
    },
    "numpy.linalg.matrix_rank": {
     "line number": [
      89
     ]
    },
    "numpy.linalg.norm": {
     "line number": [
      90
     ]
    },
    "numpy.linalg.svd": {
     "line number": [
      86
     ]
    },
    "numpy.ones": {
     "line number": [
      85
     ]
    },
    "numpy.testing.assert_array_less": {
     "line number": [
      90
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      88,
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.linalg.tests.test_regression.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.arange": {
  "data": {
   "shadows": "numpy.arange"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.assert_array_less": {
  "data": {
   "shadows": "numpy.testing.assert_array_less"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.dot": {
  "data": {
   "shadows": "numpy.dot"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.float64": {
  "data": {
   "shadows": "numpy.float64"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.linalg": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.transpose": {
  "data": {
   "shadows": "numpy.transpose"
  },
  "type": "import"
 },
 "numpy.linalg.tests.test_regression.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.ma": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      55
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      55,
      56
     ]
    },
    "numpy.ma.__all__": {
     "line number": [
      51,
      52
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.ma.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.ma.__all__": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "numpy.ma.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.ma.bench": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      101
     ]
    },
    "numpy.ma.bench.compare_functions_1v": {
     "line number": [
      102,
      103,
      104
     ]
    },
    "numpy.ma.bench.compare_functions_2v": {
     "line number": [
      106,
      107,
      108
     ]
    },
    "numpy.ma.bench.compare_methods": {
     "line number": [
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118
     ]
    },
    "numpy.ma.bench.m1": {
     "line number": [
      21,
      23
     ]
    },
    "numpy.ma.bench.m2": {
     "line number": [
      22
     ]
    },
    "numpy.ma.bench.maskx": {
     "line number": [
      31,
      33
     ]
    },
    "numpy.ma.bench.masky": {
     "line number": [
      32
     ]
    },
    "numpy.ma.bench.numpy": {
     "line number": [
      16,
      17,
      21,
      22,
      23,
      26,
      27,
      31,
      32,
      33,
      102,
      103,
      104,
      106,
      107,
      108
     ]
    },
    "numpy.ma.bench.timer": {
     "line number": [
      122,
      126,
      130,
      133
     ]
    },
    "numpy.ma.bench.xl": {
     "line number": [
      28,
      29,
      31
     ]
    },
    "numpy.ma.bench.xs": {
     "line number": [
      18,
      21
     ]
    },
    "numpy.ma.bench.yl": {
     "line number": [
      28,
      30,
      32
     ]
    },
    "numpy.ma.bench.ys": {
     "line number": [
      18,
      22
     ]
    },
    "numpy.ma.bench.zl": {
     "line number": [
      33
     ]
    },
    "numpy.ma.bench.zs": {
     "line number": [
      23
     ]
    },
    "print": {
     "line number": [
      120,
      121,
      124,
      125,
      128,
      129,
      131,
      132
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.ma.bench.compare_functions_1v": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "locals": {
     "line number": [
      65,
      69
     ]
    },
    "numpy.ma.bench.nmxl": {
     "line number": [
      60
     ]
    },
    "numpy.ma.bench.nmxs": {
     "line number": [
      60
     ]
    },
    "numpy.ma.bench.timer": {
     "line number": [
      65,
      69
     ]
    },
    "numpy.ma.bench.xl": {
     "line number": [
      60
     ]
    },
    "numpy.ma.bench.xs": {
     "line number": [
      60
     ]
    },
    "print": {
     "line number": [
      62,
      63,
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.bench.compare_functions_2v": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "locals": {
     "line number": [
      93,
      97
     ]
    },
    "numpy.ma.bench.nmxl": {
     "line number": [
      87
     ]
    },
    "numpy.ma.bench.nmxs": {
     "line number": [
      85
     ]
    },
    "numpy.ma.bench.nmyl": {
     "line number": [
      88
     ]
    },
    "numpy.ma.bench.nmys": {
     "line number": [
      86
     ]
    },
    "numpy.ma.bench.timer": {
     "line number": [
      93,
      97
     ]
    },
    "numpy.ma.bench.xl": {
     "line number": [
      87
     ]
    },
    "numpy.ma.bench.xs": {
     "line number": [
      85
     ]
    },
    "numpy.ma.bench.yl": {
     "line number": [
      88
     ]
    },
    "numpy.ma.bench.ys": {
     "line number": [
      86
     ]
    },
    "print": {
     "line number": [
      90,
      91,
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.bench.compare_methods": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "locals": {
     "line number": [
      77,
      81
     ]
    },
    "numpy.ma.bench.nmxl": {
     "line number": [
      73
     ]
    },
    "numpy.ma.bench.nmxs": {
     "line number": [
      73
     ]
    },
    "numpy.ma.bench.timer": {
     "line number": [
      77,
      81
     ]
    },
    "numpy.ma.bench.xl": {
     "line number": [
      73
     ]
    },
    "numpy.ma.bench.xs": {
     "line number": [
      73
     ]
    },
    "print": {
     "line number": [
      74,
      75,
      79
     ]
    },
    "vars": {
     "line number": [
      76,
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.bench.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.bench.m1": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.ma.bench.m2": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.ma.bench.maskx": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy.ma.bench.masky": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "numpy.ma.bench.nmxl": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "numpy.ma.bench.nmxs": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.ma.bench.nmyl": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "numpy.ma.bench.nmys": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.ma.bench.nmzl": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.ma.bench.nmzs": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.ma.bench.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.ma.bench.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.bench.timeit": {
  "data": {
   "shadows": "timeit"
  },
  "type": "import"
 },
 "numpy.ma.bench.timer": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "int": {
     "line number": [
      50
     ]
    },
    "min": {
     "line number": [
      48,
      50
     ]
    },
    "numpy.ma.bench.numpy": {
     "line number": [
      50,
      50
     ]
    },
    "numpy.ma.bench.timeit": {
     "line number": [
      47
     ]
    },
    "print": {
     "line number": [
      44,
      53
     ]
    },
    "tuple": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.bench.xl": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "numpy.ma.bench.xs": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.ma.bench.yl": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "numpy.ma.bench.ys": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.ma.bench.zl": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "numpy.ma.bench.zs": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.ma.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.extras": {
  "data": {
   "symbols_in_volume": {
    "numpy.apply_along_axis.__doc__": {
     "line number": [
      461
     ]
    },
    "numpy.apply_over_axes.__doc__.find": {
     "line number": [
      490
     ]
    },
    "numpy.apply_over_axes.__doc__.rstrip": {
     "line number": [
      489
     ]
    },
    "numpy.ma.extras._fromnxfunction_allargs": {
     "line number": [
      352,
      353,
      354
     ]
    },
    "numpy.ma.extras._fromnxfunction_seq": {
     "line number": [
      356,
      357,
      358,
      359,
      360
     ]
    },
    "numpy.ma.extras._fromnxfunction_single": {
     "line number": [
      362,
      364
     ]
    },
    "numpy.ma.extras.apply_along_axis": {
     "line number": [
      461
     ]
    },
    "numpy.ma.extras.apply_over_axes": {
     "line number": [
      488,
      489
     ]
    },
    "numpy.ma.extras.mr_class": {
     "line number": [
      1492
     ]
    },
    "numpy.ma.extras.polyfit": {
     "line number": [
      1901,
      1901
     ]
    },
    "numpy.ma.extras.vander": {
     "line number": [
      1864,
      1864
     ]
    },
    "numpy.polyfit.__doc__": {
     "line number": [
      1901
     ]
    },
    "numpy.vander.__doc__": {
     "line number": [
      1864
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.ma.extras.AxisConcatenator": {
  "data": {
   "shadows": "numpy.lib.index_tricks.AxisConcatenator"
  },
  "type": "import"
 },
 "numpy.ma.extras.MAxisConcatenator": {
  "data": {
   "lineno": 1443,
   "symbols_in_volume": {
    "numpy.lib.index_tricks.AxisConcatenator": {
     "line number": [
      1443
     ]
    },
    "staticmethod": {
     "line number": [
      1454
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.extras.MAxisConcatenator.__getitem__": {
  "data": {
   "lineno": 1465,
   "symbols_in_volume": {
    "MAError": {
     "line number": [
      1468
     ]
    },
    "isinstance": {
     "line number": [
      1467
     ]
    },
    "numpy.ma.extras.MAxisConcatenator": {
     "line number": [
      1470
     ]
    },
    "str": {
     "line number": [
      1467
     ]
    },
    "super": {
     "line number": [
      1470
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.MAxisConcatenator.makemat": {
  "data": {
   "lineno": 1456,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      1456
     ]
    },
    "numpy.array": {
     "line number": [
      1463
     ]
    },
    "numpy.ma.extras.MAxisConcatenator": {
     "line number": [
      1462
     ]
    },
    "super": {
     "line number": [
      1462
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.ma.extras._covhelper": {
  "data": {
   "lineno": 1237,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1247,
      1265
     ]
    },
    "bool": {
     "line number": [
      1252
     ]
    },
    "float": {
     "line number": [
      1243,
      1262
     ]
    },
    "int": {
     "line number": [
      1252,
      1260,
      1275
     ]
    },
    "numpy.array": {
     "line number": [
      1262
     ]
    },
    "numpy.concatenate": {
     "line number": [
      1275
     ]
    },
    "numpy.logical_not": {
     "line number": [
      1260,
      1275
     ]
    },
    "numpy.logical_or": {
     "line number": [
      1269
     ]
    },
    "slice": {
     "line number": [
      1255,
      1257
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras._ezclump": {
  "data": {
   "lineno": 1741,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1753,
      1760
     ]
    },
    "slice": {
     "line number": [
      1754,
      1756,
      1757,
      1763,
      1766
     ]
    },
    "zip": {
     "line number": [
      1758,
      1763
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras._fromnxfunction": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "object": {
     "line number": [
      218
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.extras._fromnxfunction.__call__": {
  "data": {
   "lineno": 269
  },
  "type": "function"
 },
 "numpy.ma.extras._fromnxfunction.__init__": {
  "data": {
   "lineno": 238
  },
  "type": "function"
 },
 "numpy.ma.extras._fromnxfunction.getdoc": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      260,
      261
     ]
    },
    "numpy": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras._fromnxfunction_allargs": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "numpy.ma.extras._fromnxfunction": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.extras._fromnxfunction_allargs.__call__": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": {
    "func": {
     "line number": [
      341,
      344,
      345
     ]
    },
    "getattr": {
     "line number": [
      341
     ]
    },
    "getmaskarray": {
     "line number": [
      345
     ]
    },
    "len": {
     "line number": [
      347
     ]
    },
    "masked_array": {
     "line number": [
      346
     ]
    },
    "numpy": {
     "line number": [
      341
     ]
    },
    "numpy.asarray": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras._fromnxfunction_args": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "numpy.ma.extras._fromnxfunction": {
     "line number": [
      304
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.extras._fromnxfunction_args.__call__": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "func": {
     "line number": [
      314,
      321,
      322
     ]
    },
    "getattr": {
     "line number": [
      314
     ]
    },
    "getmaskarray": {
     "line number": [
      322
     ]
    },
    "len": {
     "line number": [
      317,
      324
     ]
    },
    "list": {
     "line number": [
      316
     ]
    },
    "masked_array": {
     "line number": [
      323
     ]
    },
    "numpy": {
     "line number": [
      314
     ]
    },
    "numpy.asarray": {
     "line number": [
      321
     ]
    },
    "numpy.ma.extras.issequence": {
     "line number": [
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras._fromnxfunction_seq": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": {
    "numpy.ma.extras._fromnxfunction": {
     "line number": [
      291
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.extras._fromnxfunction_seq.__call__": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "func": {
     "line number": [
      298,
      299,
      300
     ]
    },
    "getattr": {
     "line number": [
      298
     ]
    },
    "getmaskarray": {
     "line number": [
      300
     ]
    },
    "masked_array": {
     "line number": [
      301
     ]
    },
    "numpy": {
     "line number": [
      298
     ]
    },
    "numpy.asarray": {
     "line number": [
      299
     ]
    },
    "tuple": {
     "line number": [
      299,
      300
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras._fromnxfunction_single": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": {
    "numpy.ma.extras._fromnxfunction": {
     "line number": [
      273
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.extras._fromnxfunction_single.__call__": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": {
    "func": {
     "line number": [
      282,
      283,
      286,
      287
     ]
    },
    "getattr": {
     "line number": [
      280
     ]
    },
    "getmaskarray": {
     "line number": [
      283,
      287
     ]
    },
    "isinstance": {
     "line number": [
      281
     ]
    },
    "masked_array": {
     "line number": [
      284,
      288
     ]
    },
    "numpy": {
     "line number": [
      280
     ]
    },
    "numpy.asarray": {
     "line number": [
      286
     ]
    },
    "numpy.ndarray": {
     "line number": [
      281
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras._median": {
  "data": {
   "lineno": 700,
   "symbols_in_volume": {
    "count": {
     "line number": [
      731,
      732,
      750
     ]
    },
    "divmod": {
     "line number": [
      732
     ]
    },
    "numpy.all": {
     "line number": [
      746
     ]
    },
    "numpy.concatenate": {
     "line number": [
      757
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      720
     ]
    },
    "numpy.inexact": {
     "line number": [
      703,
      734,
      774
     ]
    },
    "numpy.inf": {
     "line number": [
      704
     ]
    },
    "numpy.issubdtype": {
     "line number": [
      703,
      734,
      774
     ]
    },
    "numpy.lib.utils._median_nancheck": {
     "line number": [
      739,
      779
     ]
    },
    "numpy.ma.is_masked": {
     "line number": [
      746
     ]
    },
    "numpy.ma.mean": {
     "line number": [
      728,
      781
     ]
    },
    "numpy.ma.minimum_fill_value": {
     "line number": [
      747
     ]
    },
    "numpy.ma.sum": {
     "line number": [
      776
     ]
    },
    "numpy.take_along_axis": {
     "line number": [
      760
     ]
    },
    "numpy.true_divide": {
     "line number": [
      738,
      777
     ]
    },
    "numpy.where": {
     "line number": [
      755
     ]
    },
    "replace_masked": {
     "line number": [
      772
     ]
    },
    "slice": {
     "line number": [
      725,
      726
     ]
    },
    "sort": {
     "line number": [
      715
     ]
    },
    "tuple": {
     "line number": [
      727
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras._median.replace_masked": {
  "data": {
   "lineno": 762,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      768
     ]
    },
    "numpy.ma.is_masked": {
     "line number": [
      767
     ]
    },
    "numpy.ma.minimum_fill_value": {
     "line number": [
      769
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras._ureduce": {
  "data": {
   "shadows": "numpy.lib.function_base._ureduce"
  },
  "type": "import"
 },
 "numpy.ma.extras.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.ma.extras.apply_along_axis": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      401
     ]
    },
    "asarray": {
     "line number": [
      424,
      435,
      452,
      458
     ]
    },
    "func1d": {
     "line number": [
      395,
      422,
      450
     ]
    },
    "hasattr": {
     "line number": [
      455
     ]
    },
    "len": {
     "line number": [
      400
     ]
    },
    "list": {
     "line number": [
      389,
      433
     ]
    },
    "numpy.array": {
     "line number": [
      384,
      427
     ]
    },
    "numpy.asarray": {
     "line number": [
      392,
      408,
      454,
      456
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      386
     ]
    },
    "numpy.dtype": {
     "line number": [
      454
     ]
    },
    "numpy.isscalar": {
     "line number": [
      397
     ]
    },
    "numpy.ma.extras.flatten_inplace": {
     "line number": [
      436,
      438,
      451
     ]
    },
    "numpy.product": {
     "line number": [
      411,
      431
     ]
    },
    "numpy.zeros": {
     "line number": [
      388
     ]
    },
    "object": {
     "line number": [
      409,
      437
     ]
    },
    "range": {
     "line number": [
      389
     ]
    },
    "slice": {
     "line number": [
      391,
      429
     ]
    },
    "tuple": {
     "line number": [
      395,
      410,
      422,
      423,
      438,
      450,
      451
     ]
    },
    "zeros": {
     "line number": [
      409,
      437
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.apply_over_axes": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      484
     ]
    },
    "asarray": {
     "line number": [
      468
     ]
    },
    "func": {
     "line number": [
      476
     ]
    },
    "numpy.array": {
     "line number": [
      470
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.atleast_1d": {
  "data": {
   "lineno": 352
  },
  "type": "constant"
 },
 "numpy.ma.extras.atleast_2d": {
  "data": {
   "lineno": 353
  },
  "type": "constant"
 },
 "numpy.ma.extras.atleast_3d": {
  "data": {
   "lineno": 354
  },
  "type": "constant"
 },
 "numpy.ma.extras.average": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      590,
      594
     ]
    },
    "ValueError": {
     "line number": [
      597
     ]
    },
    "asarray": {
     "line number": [
      571
     ]
    },
    "getmask": {
     "line number": [
      572
     ]
    },
    "issubclass": {
     "line number": [
      582
     ]
    },
    "numpy.asanyarray": {
     "line number": [
      580
     ]
    },
    "numpy.bool_": {
     "line number": [
      582
     ]
    },
    "numpy.broadcast_to": {
     "line number": [
      601,
      612
     ]
    },
    "numpy.integer": {
     "line number": [
      582
     ]
    },
    "numpy.multiply": {
     "line number": [
      608
     ]
    },
    "numpy.result_type": {
     "line number": [
      583,
      585
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.clump_masked": {
  "data": {
   "lineno": 1809,
   "symbols_in_volume": {
    "numpy.ma.extras._ezclump": {
     "line number": [
      1845
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.clump_unmasked": {
  "data": {
   "lineno": 1770,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      1803
     ]
    },
    "numpy.ma.extras._ezclump": {
     "line number": [
      1806
     ]
    },
    "slice": {
     "line number": [
      1805
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.column_stack": {
  "data": {
   "lineno": 358
  },
  "type": "constant"
 },
 "numpy.ma.extras.compress_cols": {
  "data": {
   "lineno": 901,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      915
     ]
    },
    "asarray": {
     "line number": [
      913
     ]
    },
    "numpy.ma.extras.compress_rowcols": {
     "line number": [
      916
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.compress_nd": {
  "data": {
   "lineno": 786,
   "symbols_in_volume": {
    "asarray": {
     "line number": [
      807
     ]
    },
    "getmask": {
     "line number": [
      808
     ]
    },
    "list": {
     "line number": [
      824,
      824
     ]
    },
    "numpy.array": {
     "line number": [
      820
     ]
    },
    "numpy.core.numeric.normalize_axis_tuple": {
     "line number": [
      813
     ]
    },
    "range": {
     "line number": [
      811,
      824,
      824
     ]
    },
    "slice": {
     "line number": [
      825
     ]
    },
    "tuple": {
     "line number": [
      811,
      824
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.compress_rowcols": {
  "data": {
   "lineno": 828,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      880
     ]
    },
    "asarray": {
     "line number": [
      879
     ]
    },
    "numpy.ma.extras.compress_nd": {
     "line number": [
      881
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.compress_rows": {
  "data": {
   "lineno": 884,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      898
     ]
    },
    "asarray": {
     "line number": [
      896
     ]
    },
    "numpy.ma.extras.compress_rowcols": {
     "line number": [
      899
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.corrcoef": {
  "data": {
   "lineno": 1353,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1404
     ]
    },
    "ValueError": {
     "line number": [
      1417
     ]
    },
    "dot": {
     "line number": [
      1410,
      1413
     ]
    },
    "numpy._NoValue": {
     "line number": [
      1353,
      1354,
      1402,
      1402
     ]
    },
    "numpy.dot": {
     "line number": [
      1409,
      1412
     ]
    },
    "numpy.ma.extras._covhelper": {
     "line number": [
      1406
     ]
    },
    "numpy.ma.extras.diagflat": {
     "line number": [
      1423
     ]
    },
    "numpy.ma.extras.mask_cols": {
     "line number": [
      1429,
      1434
     ]
    },
    "numpy.ma.extras.warnings": {
     "line number": [
      1404
     ]
    },
    "range": {
     "line number": [
      1427,
      1428,
      1432,
      1433
     ]
    },
    "vstack": {
     "line number": [
      1429,
      1435
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.count_masked": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "getmaskarray": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.cov": {
  "data": {
   "lineno": 1280,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1335
     ]
    },
    "dot": {
     "line number": [
      1346,
      1349
     ]
    },
    "int": {
     "line number": [
      1334
     ]
    },
    "numpy.dot": {
     "line number": [
      1345,
      1348
     ]
    },
    "numpy.ma.extras._covhelper": {
     "line number": [
      1343
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.diagflat": {
  "data": {
   "lineno": 364
  },
  "type": "constant"
 },
 "numpy.ma.extras.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.extras.dstack": {
  "data": {
   "lineno": 359
  },
  "type": "constant"
 },
 "numpy.ma.extras.ediff1d": {
  "data": {
   "lineno": 1013,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1034
     ]
    },
    "numpy.ma.extras.hstack": {
     "line number": [
      1037
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.flatnotmasked_contiguous": {
  "data": {
   "lineno": 1604,
   "symbols_in_volume": {
    "getmask": {
     "line number": [
      1648
     ]
    },
    "len": {
     "line number": [
      1654
     ]
    },
    "list": {
     "line number": [
      1654
     ]
    },
    "numpy.ma.extras.itertools": {
     "line number": [
      1653
     ]
    },
    "slice": {
     "line number": [
      1650,
      1656
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.flatnotmasked_edges": {
  "data": {
   "lineno": 1498,
   "symbols_in_volume": {
    "getmask": {
     "line number": [
      1543
     ]
    },
    "len": {
     "line number": [
      1547
     ]
    },
    "numpy.any": {
     "line number": [
      1544
     ]
    },
    "numpy.array": {
     "line number": [
      1545
     ]
    },
    "numpy.flatnonzero": {
     "line number": [
      1546
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.flatten_inplace": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      374
     ]
    },
    "len": {
     "line number": [
      373
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.hsplit": {
  "data": {
   "lineno": 362
  },
  "type": "constant"
 },
 "numpy.ma.extras.hstack": {
  "data": {
   "lineno": 357
  },
  "type": "constant"
 },
 "numpy.ma.extras.in1d": {
  "data": {
   "lineno": 1125,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1159
     ]
    },
    "numpy.ma.extras.unique": {
     "line number": [
      1145,
      1146
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.intersect1d": {
  "data": {
   "lineno": 1066,
   "symbols_in_volume": {
    "numpy.ma.extras.unique": {
     "line number": [
      1093,
      1093
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.isin": {
  "data": {
   "lineno": 1167,
   "symbols_in_volume": {
    "numpy.ma.extras.in1d": {
     "line number": [
      1186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.issequence": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      50
     ]
    },
    "list": {
     "line number": [
      50
     ]
    },
    "numpy.ndarray": {
     "line number": [
      50
     ]
    },
    "tuple": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.ma.extras.ma": {
  "data": {
   "shadows": "core"
  },
  "type": "import"
 },
 "numpy.ma.extras.mask_cols": {
  "data": {
   "lineno": 963,
   "symbols_in_volume": {
    "mask_rowcols": {
     "line number": [
      1006
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.mask_rows": {
  "data": {
   "lineno": 918,
   "symbols_in_volume": {
    "mask_rowcols": {
     "line number": [
      961
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.masked_all": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "float": {
     "line number": [
      108
     ]
    },
    "make_mask_descr": {
     "line number": [
      156
     ]
    },
    "masked_array": {
     "line number": [
      155
     ]
    },
    "numpy.empty": {
     "line number": [
      155
     ]
    },
    "numpy.ones": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.masked_all_like": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "make_mask_descr": {
     "line number": [
      211
     ]
    },
    "numpy.empty_like": {
     "line number": [
      210
     ]
    },
    "numpy.ones": {
     "line number": [
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.median": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": {
    "getdata": {
     "line number": [
      685
     ]
    },
    "hasattr": {
     "line number": [
      684
     ]
    },
    "isinstance": {
     "line number": [
      688
     ]
    },
    "masked_array": {
     "line number": [
      689
     ]
    },
    "numpy.lib.function_base._ureduce": {
     "line number": [
      693
     ]
    },
    "numpy.median": {
     "line number": [
      685
     ]
    },
    "numpy.ndarray": {
     "line number": [
      688
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.mr_": {
  "data": {
   "lineno": 1492
  },
  "type": "constant"
 },
 "numpy.ma.extras.mr_class": {
  "data": {
   "lineno": 1473,
   "symbols_in_volume": {
    "numpy.ma.extras.MAxisConcatenator": {
     "line number": [
      1473
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.extras.mr_class.__init__": {
  "data": {
   "lineno": 1489,
   "symbols_in_volume": {
    "numpy.ma.extras.MAxisConcatenator": {
     "line number": [
      1490
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.ndarray": {
  "data": {
   "shadows": "numpy.ndarray"
  },
  "type": "import"
 },
 "numpy.ma.extras.normalize_axis_index": {
  "data": {
   "shadows": "numpy.core.multiarray.normalize_axis_index"
  },
  "type": "import"
 },
 "numpy.ma.extras.normalize_axis_tuple": {
  "data": {
   "shadows": "numpy.core.numeric.normalize_axis_tuple"
  },
  "type": "import"
 },
 "numpy.ma.extras.notmasked_contiguous": {
  "data": {
   "lineno": 1660,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      1725
     ]
    },
    "asarray": {
     "line number": [
      1722
     ]
    },
    "numpy.ma.extras.flatnotmasked_contiguous": {
     "line number": [
      1727,
      1737
     ]
    },
    "range": {
     "line number": [
      1735
     ]
    },
    "slice": {
     "line number": [
      1733
     ]
    },
    "tuple": {
     "line number": [
      1737
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.notmasked_edges": {
  "data": {
   "lineno": 1553,
   "symbols_in_volume": {
    "asarray": {
     "line number": [
      1595
     ]
    },
    "getmaskarray": {
     "line number": [
      1598
     ]
    },
    "numpy.array": {
     "line number": [
      1599
     ]
    },
    "numpy.asarray": {
     "line number": [
      1599
     ]
    },
    "numpy.indices": {
     "line number": [
      1599
     ]
    },
    "numpy.ma.extras.flatnotmasked_edges": {
     "line number": [
      1597
     ]
    },
    "range": {
     "line number": [
      1600,
      1601
     ]
    },
    "tuple": {
     "line number": [
      1600,
      1601
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.ma.extras.nxarray": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.ma.extras.polyfit": {
  "data": {
   "lineno": 1867,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1883,
      1888,
      1890
     ]
    },
    "asarray": {
     "line number": [
      1872,
      1873,
      1886
     ]
    },
    "getmask": {
     "line number": [
      1875,
      1877,
      1879,
      1891
     ]
    },
    "mask_or": {
     "line number": [
      1877,
      1881,
      1891
     ]
    },
    "numpy.ma.extras.cov": {
     "line number": [
      1897,
      1899
     ]
    },
    "numpy.ma.extras.mask_rows": {
     "line number": [
      1879
     ]
    },
    "numpy.polyfit": {
     "line number": [
      1897,
      1899
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.extras.setdiff1d": {
  "data": {
   "lineno": 1204,
   "symbols_in_volume": {
    "numpy.ma.extras.in1d": {
     "line number": [
      1229
     ]
    },
    "numpy.ma.extras.unique": {
     "line number": [
      1227,
      1228
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.setxor1d": {
  "data": {
   "lineno": 1098,
   "symbols_in_volume": {
    "numpy.ma.extras.unique": {
     "line number": [
      1110,
      1111
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.stack": {
  "data": {
   "lineno": 360
  },
  "type": "constant"
 },
 "numpy.ma.extras.umath": {
  "data": {
   "shadows": "numpy.core.umath"
  },
  "type": "import"
 },
 "numpy.ma.extras.union1d": {
  "data": {
   "lineno": 1190,
   "symbols_in_volume": {
    "numpy.ma.extras.unique": {
     "line number": [
      1201
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.unique": {
  "data": {
   "lineno": 1042,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1057
     ]
    },
    "list": {
     "line number": [
      1058
     ]
    },
    "numpy.unique": {
     "line number": [
      1054
     ]
    },
    "tuple": {
     "line number": [
      1057,
      1060
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.vander": {
  "data": {
   "lineno": 1853,
   "symbols_in_volume": {
    "getmask": {
     "line number": [
      1859
     ]
    },
    "numpy.vander": {
     "line number": [
      1858
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.extras.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.ma.mrecords": {
  "data": {
   "symbols_in_volume": {
    "numpy.core.records._byteorderconv": {
     "line number": [
      31
     ]
    },
    "numpy.ma.core._check_fill_value": {
     "line number": [
      39
     ]
    },
    "numpy.ma.mrecords.MaskedRecords": {
     "line number": [
      502
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.ma.mrecords.MAError": {
  "data": {
   "shadows": "numpy.ma.MAError"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.MaskedArray": {
  "data": {
   "shadows": "numpy.ma.MaskedArray"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.MaskedRecords": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "numpy.ma.MaskedArray": {
     "line number": [
      91
     ]
    },
    "object": {
     "line number": [
      91
     ]
    },
    "property": {
     "line number": [
      177,
      186
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.mrecords.MaskedRecords.__array_finalize__": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      152,
      154
     ]
    },
    "len": {
     "line number": [
      160
     ]
    },
    "numpy.array": {
     "line number": [
      160
     ]
    },
    "numpy.ma.make_mask_descr": {
     "line number": [
      159
     ]
    },
    "numpy.ma.make_mask_none": {
     "line number": [
      157
     ]
    },
    "numpy.ma.nomask": {
     "line number": [
      154,
      156
     ]
    },
    "numpy.ndarray": {
     "line number": [
      166
     ]
    },
    "numpy.ndarray.__getattribute__": {
     "line number": [
      155
     ]
    },
    "numpy.recarray": {
     "line number": [
      161,
      167
     ]
    },
    "tuple": {
     "line number": [
      160
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.__getattribute__": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      202,
      209
     ]
    },
    "IndexError": {
     "line number": [
      224
     ]
    },
    "KeyError": {
     "line number": [
      208
     ]
    },
    "NotImplementedError": {
     "line number": [
      215
     ]
    },
    "TypeError": {
     "line number": [
      208
     ]
    },
    "ValueError": {
     "line number": [
      238
     ]
    },
    "bool": {
     "line number": [
      227
     ]
    },
    "len": {
     "line number": [
      227
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      229
     ]
    },
    "numpy.ndarray": {
     "line number": [
      230
     ]
    },
    "numpy.ndarray.__getattribute__": {
     "line number": [
      205,
      211
     ]
    },
    "numpy.ndarray.view": {
     "line number": [
      212
     ]
    },
    "object.__getattribute__": {
     "line number": [
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.__getitem__": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      311
     ]
    },
    "numpy.array": {
     "line number": [
      328,
      329
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      311
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      316
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      324
     ]
    },
    "numpy.ndarray.__getattribute__": {
     "line number": [
      308
     ]
    },
    "numpy.ndarray.view": {
     "line number": [
      309
     ]
    },
    "numpy.recarray": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.__getstate__": {
  "data": {
   "lineno": 448
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.__len__": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "len": {
     "line number": [
      195,
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.__new__": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "len": {
     "line number": [
      124,
      145
     ]
    },
    "numpy.array": {
     "line number": [
      126,
      145
     ]
    },
    "numpy.dtype": {
     "line number": [
      116
     ]
    },
    "numpy.ma.MAError": {
     "line number": [
      136
     ]
    },
    "numpy.ma.make_mask_descr": {
     "line number": [
      121
     ]
    },
    "numpy.ma.nomask": {
     "line number": [
      112,
      122
     ]
    },
    "numpy.recarray.__new__": {
     "line number": [
      116
     ]
    },
    "numpy.reshape": {
     "line number": [
      132
     ]
    },
    "numpy.resize": {
     "line number": [
      130
     ]
    },
    "numpy.size": {
     "line number": [
      122
     ]
    },
    "tuple": {
     "line number": [
      124,
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.__reduce__": {
  "data": {
   "lineno": 484
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.__repr__": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      362
     ]
    },
    "len": {
     "line number": [
      361
     ]
    },
    "max": {
     "line number": [
      361
     ]
    },
    "str": {
     "line number": [
      366
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.__setattr__": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      284
     ]
    },
    "Exception": {
     "line number": [
      260,
      278
     ]
    },
    "KeyError": {
     "line number": [
      283
     ]
    },
    "TypeError": {
     "line number": [
      283
     ]
    },
    "exctype": {
     "line number": [
      266
     ]
    },
    "numpy.ma.filled": {
     "line number": [
      294
     ]
    },
    "numpy.ma.getmaskarray": {
     "line number": [
      295
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      286
     ]
    },
    "numpy.ma.mrecords.sys": {
     "line number": [
      265
     ]
    },
    "numpy.ndarray.__getattribute__": {
     "line number": [
      262,
      263,
      269,
      296
     ]
    },
    "object.__delattr__": {
     "line number": [
      277
     ]
    },
    "object.__getattribute__": {
     "line number": [
      254
     ]
    },
    "object.__setattr__": {
     "line number": [
      259
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.__setitem__": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      338
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      338
     ]
    },
    "numpy.ma.MaskedArray.__setitem__": {
     "line number": [
      337
     ]
    },
    "numpy.ma.getmaskarray": {
     "line number": [
      339
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.__setstate__": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      480
     ]
    },
    "numpy.dtype": {
     "line number": [
      480
     ]
    },
    "numpy.ndarray.__setstate__": {
     "line number": [
      479
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.__str__": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      348,
      352
     ]
    },
    "str": {
     "line number": [
      347,
      351
     ]
    },
    "zip": {
     "line number": [
      348,
      352
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords._getdata": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "numpy.ndarray.view": {
     "line number": [
      175
     ]
    },
    "numpy.recarray": {
     "line number": [
      175
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords._getfieldmask": {
  "data": {
   "lineno": 179
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.copy": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": {
    "type": {
     "line number": [
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.harden_mask": {
  "data": {
   "lineno": 409
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.soften_mask": {
  "data": {
   "lineno": 416
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.tolist": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      443,
      444
     ]
    },
    "object": {
     "line number": [
      443
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.MaskedRecords.view": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      388
     ]
    },
    "getattr": {
     "line number": [
      403
     ]
    },
    "issubclass": {
     "line number": [
      382
     ]
    },
    "numpy.dtype": {
     "line number": [
      374,
      382,
      383,
      384,
      386,
      389,
      389,
      389,
      395,
      398,
      401
     ]
    },
    "numpy.dtype.fields": {
     "line number": [
      393
     ]
    },
    "numpy.ma.make_mask_descr": {
     "line number": [
      404
     ]
    },
    "numpy.ma.nomask": {
     "line number": [
      403,
      403
     ]
    },
    "numpy.ndarray": {
     "line number": [
      382,
      405
     ]
    },
    "numpy.ndarray.view": {
     "line number": [
      376,
      378,
      383,
      386,
      398,
      401
     ]
    },
    "type": {
     "line number": [
      375,
      378,
      380,
      401
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.__all__": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "numpy.ma.mrecords._byteorderconv": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "numpy.ma.mrecords._check_fill_value": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "numpy.ma.mrecords._checknames": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "NameError": {
     "line number": [
      68
     ]
    },
    "isinstance": {
     "line number": [
      63,
      65
     ]
    },
    "len": {
     "line number": [
      58,
      69
     ]
    },
    "list": {
     "line number": [
      63
     ]
    },
    "numpy.dtype": {
     "line number": [
      81
     ]
    },
    "numpy.ma.mrecords.reserved_fields": {
     "line number": [
      74,
      75
     ]
    },
    "range": {
     "line number": [
      59
     ]
    },
    "repr": {
     "line number": [
      68
     ]
    },
    "str": {
     "line number": [
      65
     ]
    },
    "tuple": {
     "line number": [
      63
     ]
    },
    "zip": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords._get_fieldmask": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "len": {
     "line number": [
      87
     ]
    },
    "numpy.empty": {
     "line number": [
      86
     ]
    },
    "tuple": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords._guessvartypes": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      638,
      641,
      644
     ]
    },
    "ValueError": {
     "line number": [
      633,
      638,
      641,
      644
     ]
    },
    "complex": {
     "line number": [
      643,
      647
     ]
    },
    "float": {
     "line number": [
      640,
      649
     ]
    },
    "int": {
     "line number": [
      637,
      651
     ]
    },
    "numpy.asarray": {
     "line number": [
      629
     ]
    },
    "numpy.dtype": {
     "line number": [
      647,
      649,
      651
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords._mrreconstruct": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      499
     ]
    },
    "numpy.ndarray.__new__": {
     "line number": [
      498,
      499
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.addfield": {
  "data": {
   "lineno": 743,
   "symbols_in_volume": {
    "len": {
     "line number": [
      754
     ]
    },
    "numpy.bool_": {
     "line number": [
      768
     ]
    },
    "numpy.dtype": {
     "line number": [
      758,
      768
     ]
    },
    "numpy.ma.array": {
     "line number": [
      755
     ]
    },
    "numpy.ma.getmaskarray": {
     "line number": [
      774
     ]
    },
    "numpy.ma.mrecords.MaskedRecords": {
     "line number": [
      765
     ]
    },
    "numpy.ma.mrecords.reserved_fields": {
     "line number": [
      753
     ]
    },
    "numpy.recarray": {
     "line number": [
      759,
      769
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.basestring": {
  "data": {
   "shadows": "numpy.compat.basestring"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.bool_": {
  "data": {
   "shadows": "numpy.bool_"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.dtype": {
  "data": {
   "shadows": "numpy.dtype"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.filled": {
  "data": {
   "shadows": "numpy.ma.filled"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.fromarrays": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": {
    "list": {
     "line number": [
      547
     ]
    },
    "numpy.atleast_1d": {
     "line number": [
      542
     ]
    },
    "numpy.core.records.fromarrays": {
     "line number": [
      543
     ]
    },
    "numpy.dtype": {
     "line number": [
      544
     ]
    },
    "numpy.ma.getdata": {
     "line number": [
      541
     ]
    },
    "numpy.ma.getmaskarray": {
     "line number": [
      542
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      546
     ]
    },
    "zip": {
     "line number": [
      547
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.fromrecords": {
  "data": {
   "lineno": 553,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      587
     ]
    },
    "isinstance": {
     "line number": [
      589,
      591
     ]
    },
    "len": {
     "line number": [
      606
     ]
    },
    "numpy.array": {
     "line number": [
      605
     ]
    },
    "numpy.core.records.fromrecords": {
     "line number": [
      597
     ]
    },
    "numpy.dtype": {
     "line number": [
      594,
      595,
      597
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      591
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      599
     ]
    },
    "numpy.ma.nomask": {
     "line number": [
      555,
      604
     ]
    },
    "numpy.ndarray": {
     "line number": [
      589,
      592
     ]
    },
    "tuple": {
     "line number": [
      610
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.fromtextfile": {
  "data": {
   "lineno": 675,
   "symbols_in_volume": {
    "len": {
     "line number": [
      708,
      715,
      724,
      727
     ]
    },
    "numpy.core.records.fromarrays": {
     "line number": [
      740
     ]
    },
    "numpy.dtype": {
     "line number": [
      723
     ]
    },
    "numpy.ma.default_fill_value": {
     "line number": [
      732
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      714,
      737
     ]
    },
    "numpy.ma.mrecords._guessvartypes": {
     "line number": [
      721,
      728
     ]
    },
    "numpy.ma.mrecords.openfile": {
     "line number": [
      701
     ]
    },
    "numpy.ma.mrecords.warnings": {
     "line number": [
      727
     ]
    },
    "zip": {
     "line number": [
      731,
      738
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.getdata": {
  "data": {
   "shadows": "numpy.ma.getdata"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.getmaskarray": {
  "data": {
   "shadows": "numpy.ma.getmaskarray"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.ma": {
  "data": {
   "shadows": "numpy.ma"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.masked": {
  "data": {
   "shadows": "numpy.ma.masked"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.masked_array": {
  "data": {
   "shadows": "numpy.ma.masked_array"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.mrecarray": {
  "data": {
   "lineno": 502
  },
  "type": "constant"
 },
 "numpy.ma.mrecords.narray": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.ndarray": {
  "data": {
   "shadows": "numpy.ndarray"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.nomask": {
  "data": {
   "shadows": "numpy.ma.nomask"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.ntypes": {
  "data": {
   "shadows": "numpy.core.numerictypes"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.openfile": {
  "data": {
   "lineno": 655,
   "symbols_in_volume": {
    "IOError": {
     "line number": [
      666,
      667
     ]
    },
    "NotImplementedError": {
     "line number": [
      672
     ]
    },
    "hasattr": {
     "line number": [
      661
     ]
    },
    "open": {
     "line number": [
      665
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.mrecords.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.recarray": {
  "data": {
   "shadows": "numpy.recarray"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.recfromarrays": {
  "data": {
   "shadows": "numpy.core.records.fromarrays"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.recfromrecords": {
  "data": {
   "shadows": "numpy.core.records.fromrecords"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.reserved_fields": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "numpy.ma.mrecords.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.ma.mrecords.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.ma.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      10
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      13
     ]
    },
    "numpy.ma.setup.config": {
     "line number": [
      13
     ]
    },
    "numpy.ma.setup.configuration": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.ma.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.ma.setup.config": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.ma.setup.configuration": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.ma.test": {
  "data": {
   "lineno": 55
  },
  "type": "constant"
 },
 "numpy.ma.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.ma.tests.test_deprecations": {
  "data": {},
  "type": "module"
 },
 "numpy.ma.tests.test_deprecations.MaskedArrayFutureWarning": {
  "data": {
   "shadows": "numpy.ma.core.MaskedArrayFutureWarning"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_deprecations.TestArgsort": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "object": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_deprecations.TestArgsort._test_base": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "argsort": {
     "line number": [
      15,
      18,
      23,
      24,
      27,
      28
     ]
    },
    "numpy.array": {
     "line number": [
      14,
      17,
      21
     ]
    },
    "numpy.ma.core.MaskedArrayFutureWarning": {
     "line number": [
      23
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      24
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_deprecations.TestArgsort.test_function_maskedarray": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "numpy.ma.MaskedArray": {
     "line number": [
      34
     ]
    },
    "numpy.ma.argsort": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_deprecations.TestArgsort.test_function_ndarray": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "numpy.ma.argsort": {
     "line number": [
      31
     ]
    },
    "numpy.ndarray": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_deprecations.TestArgsort.test_method": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "numpy.ma.MaskedArray": {
     "line number": [
      37
     ]
    },
    "numpy.ma.MaskedArray.argsort": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_deprecations.TestMinimumMaximum": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "object": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_deprecations.TestMinimumMaximum.test_axis_default": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "ma_max": {
     "line number": [
      58,
      68,
      69,
      70
     ]
    },
    "ma_min": {
     "line number": [
      61,
      64,
      65,
      66
     ]
    },
    "numpy.ma.arange": {
     "line number": [
      50
     ]
    },
    "numpy.ma.core.MaskedArrayFutureWarning": {
     "line number": [
      57,
      60
     ]
    },
    "numpy.ma.maximum.reduce": {
     "line number": [
      54
     ]
    },
    "numpy.ma.minimum.reduce": {
     "line number": [
      53
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      58,
      61,
      65,
      66,
      69,
      70
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      57,
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_deprecations.TestMinimumMaximum.test_maximum": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      45
     ]
    },
    "numpy.ma.array": {
     "line number": [
      45
     ]
    },
    "numpy.ma.maximum": {
     "line number": [
      45
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_deprecations.TestMinimumMaximum.test_minimum": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      42
     ]
    },
    "numpy.ma.array": {
     "line number": [
      42
     ]
    },
    "numpy.ma.minimum": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_deprecations.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_deprecations.assert_equal": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_deprecations.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_deprecations.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_deprecations.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_deprecations.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras": {
  "data": {},
  "type": "module"
 },
 "numpy.ma.tests.test_extras.MaskedArray": {
  "data": {
   "shadows": "numpy.ma.core.MaskedArray"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.TestApplyAlongAxis": {
  "data": {
   "lineno": 642,
   "symbols_in_volume": {
    "object": {
     "line number": [
      642
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d": {
  "data": {
   "lineno": 644,
   "symbols_in_volume": {
    "numpy.ma.core.arange": {
     "line number": [
      645
     ]
    },
    "numpy.ma.extras.apply_along_axis": {
     "line number": [
      650
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      651
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d.myfunc": {
  "data": {
   "lineno": 647
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d_kwargs": {
  "data": {
   "lineno": 654,
   "symbols_in_volume": {
    "numpy.ma.core.arange": {
     "line number": [
      655
     ]
    },
    "numpy.ma.extras.apply_along_axis": {
     "line number": [
      660
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      661
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d_kwargs.myfunc": {
  "data": {
   "lineno": 657
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestApplyOverAxes": {
  "data": {
   "lineno": 664,
   "symbols_in_volume": {
    "object": {
     "line number": [
      664
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestApplyOverAxes.test_basic": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      671
     ]
    },
    "numpy.array": {
     "line number": [
      669,
      673
     ]
    },
    "numpy.ma.core.arange": {
     "line number": [
      667
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      671
     ]
    },
    "numpy.ma.extras.apply_over_axes": {
     "line number": [
      668,
      672
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      670,
      674
     ]
    },
    "numpy.sum": {
     "line number": [
      668,
      672
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps": {
  "data": {
   "lineno": 1311,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1311
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d": {
  "data": {
   "lineno": 1353,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1355
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      1356
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      1355
     ]
    },
    "numpy.ma.extras.ediff1d": {
     "line number": [
      1357
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1358,
      1359,
      1360
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_ndarray": {
  "data": {
   "lineno": 1408,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1414,
      1420
     ]
    },
    "numpy.arange": {
     "line number": [
      1410
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      1414,
      1420
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      1412,
      1419
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      1418,
      1418
     ]
    },
    "numpy.ma.extras.ediff1d": {
     "line number": [
      1411,
      1418
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      1414,
      1420
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1413,
      1415,
      1416,
      1421,
      1422
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_tobegin": {
  "data": {
   "lineno": 1362,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1364
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      1366,
      1372
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      1365
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      1364
     ]
    },
    "numpy.ma.extras.ediff1d": {
     "line number": [
      1365,
      1371
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1367,
      1368,
      1369,
      1373,
      1374,
      1375
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_tobegin_toend": {
  "data": {
   "lineno": 1392,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1394
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      1396,
      1402
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      1395,
      1395,
      1401
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      1394
     ]
    },
    "numpy.ma.extras.ediff1d": {
     "line number": [
      1395,
      1401
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1397,
      1398,
      1399,
      1404,
      1405,
      1406
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_toend": {
  "data": {
   "lineno": 1377,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      1379
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      1381,
      1387
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      1380
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      1379
     ]
    },
    "numpy.ma.extras.ediff1d": {
     "line number": [
      1380,
      1386
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1382,
      1383,
      1384,
      1388,
      1389,
      1390
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_in1d": {
  "data": {
   "lineno": 1479,
   "symbols_in_volume": {
    "numpy.ma.core.array": {
     "line number": [
      1481,
      1482,
      1486,
      1487
     ]
    },
    "numpy.ma.extras.in1d": {
     "line number": [
      1483,
      1488,
      1491
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      1491
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1484,
      1489
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_in1d_invert": {
  "data": {
   "lineno": 1493,
   "symbols_in_volume": {
    "numpy.invert": {
     "line number": [
      1497,
      1501
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      1495,
      1496,
      1499,
      1500
     ]
    },
    "numpy.ma.extras.in1d": {
     "line number": [
      1497,
      1497,
      1501,
      1501,
      1503
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      1503
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1497,
      1501
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_intersect1d": {
  "data": {
   "lineno": 1424,
   "symbols_in_volume": {
    "numpy.ma.core.array": {
     "line number": [
      1426,
      1427,
      1429
     ]
    },
    "numpy.ma.extras.intersect1d": {
     "line number": [
      1428
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1430
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_isin": {
  "data": {
   "lineno": 1458,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1468
     ]
    },
    "isinstance": {
     "line number": [
      1473
     ]
    },
    "numpy.arange": {
     "line number": [
      1462
     ]
    },
    "numpy.isin": {
     "line number": [
      1476
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      1473
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      1465,
      1466
     ]
    },
    "numpy.ma.core.zeros": {
     "line number": [
      1468
     ]
    },
    "numpy.ma.extras.isin": {
     "line number": [
      1472
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      1473
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      1474,
      1477
     ]
    },
    "numpy.zeros": {
     "line number": [
      1463
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_setdiff1d": {
  "data": {
   "lineno": 1523,
   "symbols_in_volume": {
    "numpy.ma.core.arange": {
     "line number": [
      1530,
      1531
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      1525,
      1526,
      1528,
      1532,
      1533
     ]
    },
    "numpy.ma.extras.setdiff1d": {
     "line number": [
      1527,
      1532,
      1534
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1528,
      1532,
      1534
     ]
    },
    "numpy.uint32": {
     "line number": [
      1533,
      1534
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_setdiff1d_char_array": {
  "data": {
   "lineno": 1536,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1538,
      1539,
      1540
     ]
    },
    "numpy.ma.extras.setdiff1d": {
     "line number": [
      1540
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      1540
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_setxor1d": {
  "data": {
   "lineno": 1432,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1447,
      1453
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      1447,
      1453
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      1434,
      1435,
      1437,
      1439,
      1442,
      1444,
      1445,
      1450,
      1451
     ]
    },
    "numpy.ma.extras.setxor1d": {
     "line number": [
      1436,
      1441,
      1446,
      1452,
      1456
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      1447,
      1453
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      1456
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1437,
      1442,
      1448,
      1454
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_union1d": {
  "data": {
   "lineno": 1505,
   "symbols_in_volume": {
    "numpy.ma.core.array": {
     "line number": [
      1507,
      1508,
      1510,
      1515,
      1516,
      1517
     ]
    },
    "numpy.ma.extras.union1d": {
     "line number": [
      1509,
      1518,
      1521
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      1521
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1511,
      1519
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_unique_allmasked": {
  "data": {
   "lineno": 1338,
   "symbols_in_volume": {
    "numpy.ma.core.masked": {
     "line number": [
      1347,
      1349
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      1340,
      1342,
      1349
     ]
    },
    "numpy.ma.extras.unique": {
     "line number": [
      1341,
      1348
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1342,
      1343,
      1344,
      1349,
      1350,
      1351
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_unique_onlist": {
  "data": {
   "lineno": 1313,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1317
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      1317
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      1318
     ]
    },
    "numpy.ma.extras.unique": {
     "line number": [
      1316
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      1317
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1318,
      1319,
      1320
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestArraySetOps.test_unique_onmaskedarray": {
  "data": {
   "lineno": 1322,
   "symbols_in_volume": {
    "numpy.ma.core.masked_array": {
     "line number": [
      1324,
      1326,
      1331,
      1334
     ]
    },
    "numpy.ma.extras.unique": {
     "line number": [
      1325,
      1333
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1326,
      1327,
      1328,
      1334,
      1335,
      1336
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestAverage": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "object": {
     "line number": [
      144
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestAverage.test_complex": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      234
     ]
    },
    "numpy.array": {
     "line number": [
      233,
      255
     ]
    },
    "numpy.average": {
     "line number": [
      240,
      258
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      235
     ]
    },
    "numpy.ma.extras.average": {
     "line number": [
      239,
      244,
      245,
      245,
      249,
      250,
      250,
      257,
      262,
      263,
      264,
      268,
      269,
      270
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      241,
      242,
      246,
      247,
      251,
      252,
      259,
      260,
      265,
      266,
      271,
      272
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestAverage.test_onintegers_with_mask": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "numpy.ma.core.array": {
     "line number": [
      225,
      227
     ]
    },
    "numpy.ma.extras.average": {
     "line number": [
      225,
      227
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      226,
      228
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestAverage.test_testAverage1": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "numpy.ma.core.array": {
     "line number": [
      148,
      156
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      154,
      158
     ]
    },
    "numpy.ma.extras.average": {
     "line number": [
      149,
      150,
      151,
      155,
      159,
      160,
      161,
      162
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      153
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      149,
      150,
      152,
      155,
      159,
      160,
      161,
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestAverage.test_testAverage2": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": {
    "numpy.add.reduce": {
     "line number": [
      173
     ]
    },
    "numpy.arange": {
     "line number": [
      173,
      174
     ]
    },
    "numpy.float_": {
     "line number": [
      169,
      172
     ]
    },
    "numpy.ma.core.arange": {
     "line number": [
      169,
      172,
      172
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      172
     ]
    },
    "numpy.ma.core.count": {
     "line number": [
      191
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      187,
      188,
      189,
      190,
      191,
      192
     ]
    },
    "numpy.ma.core.ones": {
     "line number": [
      185
     ]
    },
    "numpy.ma.core.zeros": {
     "line number": [
      182
     ]
    },
    "numpy.ma.extras.average": {
     "line number": [
      170,
      171,
      173,
      174,
      175,
      176,
      176,
      177,
      178,
      180,
      181,
      181,
      187,
      188,
      189,
      190,
      191,
      193,
      194,
      195,
      196
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      170,
      171,
      173,
      174,
      175,
      177,
      178,
      180,
      187,
      188,
      189,
      190,
      191,
      193,
      194,
      195,
      196
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestAverage.test_testAverage3": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "float": {
     "line number": [
      212
     ]
    },
    "numpy.ma.core.arange": {
     "line number": [
      201,
      202
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      212
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      213
     ]
    },
    "numpy.ma.core.ones": {
     "line number": [
      206,
      208,
      210,
      210
     ]
    },
    "numpy.ma.core.shape": {
     "line number": [
      204,
      204,
      207,
      207,
      209,
      209,
      211,
      211
     ]
    },
    "numpy.ma.extras.average": {
     "line number": [
      203,
      206,
      208,
      210,
      214,
      216,
      218,
      220
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      204,
      205,
      207,
      209,
      211,
      215,
      217,
      219,
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCompressFunctions": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": {
    "object": {
     "line number": [
      389
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestCompressFunctions.test_compress_nd": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      394
     ]
    },
    "list": {
     "line number": [
      393
     ]
    },
    "numpy.array": {
     "line number": [
      393
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      396
     ]
    },
    "numpy.ma.extras.compress_nd": {
     "line number": [
      399,
      408,
      419,
      430,
      431,
      432,
      438,
      452,
      453,
      454,
      460,
      467,
      471,
      482,
      483,
      484,
      490,
      500
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      400,
      409,
      420,
      433,
      434,
      435,
      439,
      455,
      456,
      457,
      461,
      468,
      472,
      485,
      486,
      487,
      491,
      501
     ]
    },
    "numpy.zeros": {
     "line number": [
      394
     ]
    },
    "range": {
     "line number": [
      393
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCompressFunctions.test_compress_rowcols": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      505
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      505,
      510,
      514,
      518
     ]
    },
    "numpy.ma.extras.compress_rowcols": {
     "line number": [
      507,
      508,
      509,
      511,
      512,
      513,
      515,
      516,
      517,
      519,
      520,
      521
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      507,
      508,
      509,
      511,
      512,
      513,
      515,
      516,
      517,
      519,
      520,
      521
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCompressFunctions.test_dot": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      557
     ]
    },
    "numpy.dot": {
     "line number": [
      567,
      569,
      579,
      582,
      597,
      601,
      608,
      612,
      619,
      623
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      560,
      561,
      572,
      573,
      585,
      586,
      592,
      593,
      603,
      604,
      614,
      615
     ]
    },
    "numpy.ma.core.nomask": {
     "line number": [
      588,
      590
     ]
    },
    "numpy.ma.extras.dot": {
     "line number": [
      562,
      564,
      566,
      568,
      574,
      576,
      578,
      580,
      581,
      587,
      589,
      594,
      596,
      598,
      600,
      605,
      607,
      609,
      611,
      616,
      618,
      620,
      622
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      563,
      565,
      567,
      569,
      575,
      577,
      579,
      580,
      582,
      588,
      590,
      595,
      597,
      599,
      601,
      606,
      608,
      610,
      612,
      617,
      619,
      621,
      623
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCompressFunctions.test_dot_out": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      635
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      635,
      636
     ]
    },
    "numpy.ma.extras.dot": {
     "line number": [
      637
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      638
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      639
     ]
    },
    "numpy.zeros": {
     "line number": [
      636
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCompressFunctions.test_dot_returns_maskedarray": {
  "data": {
   "lineno": 625,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      627
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      629,
      630,
      631,
      632
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      628
     ]
    },
    "numpy.ma.extras.dot": {
     "line number": [
      629,
      630,
      631,
      632
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      629,
      630,
      631,
      632
     ]
    },
    "type": {
     "line number": [
      629,
      630,
      631,
      632
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCompressFunctions.test_mask_rowcols": {
  "data": {
   "lineno": 523,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      525
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      525,
      533,
      540,
      547
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      548,
      549,
      550
     ]
    },
    "numpy.ma.extras.mask_rowcols": {
     "line number": [
      527,
      529,
      531,
      534,
      536,
      538,
      541,
      543,
      545,
      548,
      549,
      550,
      551,
      552,
      553
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      548,
      549,
      550,
      551,
      552,
      553
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      527,
      529,
      531,
      534,
      536,
      538,
      541,
      543,
      545
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestConcatenator": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": {
    "object": {
     "line number": [
      275
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestConcatenator.test_1d": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      285
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      285
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      280
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      283
     ]
    },
    "numpy.ma.core.ones": {
     "line number": [
      281
     ]
    },
    "numpy.ma.extras.mr_": {
     "line number": [
      280,
      284,
      287
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      285
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      280,
      286,
      287
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestConcatenator.test_2d": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "numpy.ma.core.masked_array": {
     "line number": [
      295,
      296
     ]
    },
    "numpy.ma.extras.mr_": {
     "line number": [
      298,
      303
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      299,
      304
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      300,
      301,
      302,
      305,
      306,
      307
     ]
    },
    "numpy.r_": {
     "line number": [
      302,
      307
     ]
    },
    "numpy.random.rand": {
     "line number": [
      291,
      292,
      293,
      294
     ]
    },
    "numpy.round_": {
     "line number": [
      293,
      294
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestConcatenator.test_masked_constant": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "numpy.ma.extras.mr_": {
     "line number": [
      310,
      314
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      310,
      314
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      311,
      312,
      315,
      316
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCorrcoef": {
  "data": {
   "lineno": 1146,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1146
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestCorrcoef.setup": {
  "data": {
   "lineno": 1148,
   "symbols_in_volume": {
    "numpy.ma.core.array": {
     "line number": [
      1149,
      1150
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1149,
      1150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCorrcoef.test_1d_with_missing": {
  "data": {
   "lineno": 1203,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1213,
      1226
     ]
    },
    "ValueError": {
     "line number": [
      1218
     ]
    },
    "numpy.corrcoef": {
     "line number": [
      1209,
      1210,
      1214,
      1222,
      1223,
      1228,
      1230
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      1206
     ]
    },
    "numpy.ma.extras.corrcoef": {
     "line number": [
      1209,
      1211,
      1215,
      1217,
      1222,
      1224,
      1229,
      1231
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1209,
      1210,
      1214,
      1222,
      1223,
      1228,
      1230
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1212,
      1225
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCorrcoef.test_1d_without_missing": {
  "data": {
   "lineno": 1181,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1188
     ]
    },
    "numpy.corrcoef": {
     "line number": [
      1184,
      1185,
      1189
     ]
    },
    "numpy.ma.extras.corrcoef": {
     "line number": [
      1184,
      1186,
      1190
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1184,
      1185,
      1189
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCorrcoef.test_2d_with_missing": {
  "data": {
   "lineno": 1233,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1243
     ]
    },
    "numpy.corrcoef": {
     "line number": [
      1240
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      1236
     ]
    },
    "numpy.ma.extras.corrcoef": {
     "line number": [
      1239,
      1245,
      1247,
      1249
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1241,
      1245,
      1247,
      1249
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1242
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCorrcoef.test_2d_without_missing": {
  "data": {
   "lineno": 1192,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1199
     ]
    },
    "numpy.corrcoef": {
     "line number": [
      1195,
      1196,
      1200
     ]
    },
    "numpy.ma.extras.corrcoef": {
     "line number": [
      1195,
      1197,
      1201
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1195,
      1196,
      1200
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1198
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCorrcoef.test_bias": {
  "data": {
   "lineno": 1168,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1174,
      1175,
      1176,
      1177
     ]
    },
    "numpy.corrcoef": {
     "line number": [
      1170
     ]
    },
    "numpy.ma.extras.corrcoef": {
     "line number": [
      1174,
      1175,
      1176,
      1179
     ]
    },
    "numpy.ma.tests.test_extras.warnings": {
     "line number": [
      1173
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1179
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      1174,
      1175,
      1176
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1172
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCorrcoef.test_ddof": {
  "data": {
   "lineno": 1152,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      1159,
      1160
     ]
    },
    "numpy.corrcoef": {
     "line number": [
      1155,
      1156,
      1162
     ]
    },
    "numpy.ma.extras.corrcoef": {
     "line number": [
      1159,
      1162,
      1163,
      1164,
      1165,
      1166
     ]
    },
    "numpy.ma.tests.test_extras.warnings": {
     "line number": [
      1158
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1162,
      1163,
      1164,
      1165,
      1166
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      1159
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCov": {
  "data": {
   "lineno": 1079,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1079
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestCov.setup": {
  "data": {
   "lineno": 1081,
   "symbols_in_volume": {
    "numpy.ma.core.array": {
     "line number": [
      1082
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1082
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCov.test_1d_with_missing": {
  "data": {
   "lineno": 1100,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1113
     ]
    },
    "numpy.cov": {
     "line number": [
      1106,
      1107,
      1108,
      1118,
      1119,
      1121
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      1103
     ]
    },
    "numpy.ma.extras.cov": {
     "line number": [
      1106,
      1107,
      1109,
      1112,
      1118,
      1120,
      1122
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1106,
      1107,
      1108,
      1118,
      1119,
      1121
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCov.test_1d_without_missing": {
  "data": {
   "lineno": 1084,
   "symbols_in_volume": {
    "numpy.cov": {
     "line number": [
      1087,
      1088,
      1089
     ]
    },
    "numpy.ma.extras.cov": {
     "line number": [
      1087,
      1088,
      1090
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1087,
      1088,
      1089
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCov.test_2d_with_missing": {
  "data": {
   "lineno": 1124,
   "symbols_in_volume": {
    "int": {
     "line number": [
      1129
     ]
    },
    "numpy.cov": {
     "line number": [
      1133,
      1135,
      1139,
      1142
     ]
    },
    "numpy.dot": {
     "line number": [
      1130,
      1136
     ]
    },
    "numpy.logical_not": {
     "line number": [
      1129
     ]
    },
    "numpy.ma.core.getmaskarray": {
     "line number": [
      1129
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      1127
     ]
    },
    "numpy.ma.extras.cov": {
     "line number": [
      1132,
      1134,
      1138,
      1141
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1132,
      1134,
      1138,
      1141
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestCov.test_2d_without_missing": {
  "data": {
   "lineno": 1092,
   "symbols_in_volume": {
    "numpy.cov": {
     "line number": [
      1095,
      1096,
      1097
     ]
    },
    "numpy.ma.extras.cov": {
     "line number": [
      1095,
      1096,
      1098
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1095,
      1096,
      1097
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestGeneric": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "object": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestGeneric.check_clump": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "f": {
     "line number": [
      96,
      98
     ]
    },
    "int": {
     "line number": [
      91,
      92
     ]
    },
    "numpy.arange": {
     "line number": [
      91
     ]
    },
    "numpy.full": {
     "line number": [
      92
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      93
     ]
    },
    "numpy.ma.extras.clump_unmasked": {
     "line number": [
      98
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      99,
      102
     ]
    },
    "range": {
     "line number": [
      89,
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestGeneric.test_clump_masked": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      106
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      107
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      106
     ]
    },
    "numpy.ma.extras.clump_masked": {
     "line number": [
      109,
      113
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      111
     ]
    },
    "slice": {
     "line number": [
      110,
      110,
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestGeneric.test_clump_unmasked": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      117
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      118
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      117
     ]
    },
    "numpy.ma.extras.clump_unmasked": {
     "line number": [
      119,
      123
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      121
     ]
    },
    "slice": {
     "line number": [
      120,
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestGeneric.test_flatnotmasked_contiguous": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      132
     ]
    },
    "numpy.ma.core.arange": {
     "line number": [
      127
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      135,
      139
     ]
    },
    "numpy.ma.extras.flatnotmasked_contiguous": {
     "line number": [
      129,
      136,
      140
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      130,
      133,
      137,
      141
     ]
    },
    "numpy.zeros": {
     "line number": [
      132
     ]
    },
    "slice": {
     "line number": [
      130,
      133,
      137,
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestGeneric.test_masked_all": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "float": {
     "line number": [
      41,
      42
     ]
    },
    "numpy.dtype": {
     "line number": [
      45,
      55
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      42,
      47,
      50,
      57,
      61,
      65
     ]
    },
    "numpy.ma.extras.masked_all": {
     "line number": [
      41,
      46,
      49,
      56,
      60,
      64
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      43,
      48,
      53,
      59,
      63,
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestGeneric.test_masked_all_like": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "float": {
     "line number": [
      71,
      73
     ]
    },
    "numpy.dtype": {
     "line number": [
      76,
      82
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      71,
      73,
      77,
      79,
      83
     ]
    },
    "numpy.ma.extras.masked_all_like": {
     "line number": [
      72,
      78,
      85
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      74,
      80,
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian": {
  "data": {
   "lineno": 677,
   "symbols_in_volume": {
    "object": {
     "line number": [
      677
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_1d_shape_consistency": {
  "data": {
   "lineno": 805,
   "symbols_in_volume": {
    "numpy.ma.core.array": {
     "line number": [
      806,
      807
     ]
    },
    "numpy.ma.median": {
     "line number": [
      806,
      807
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      806
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_2d": {
  "data": {
   "lineno": 809,
   "symbols_in_volume": {
    "float": {
     "line number": [
      814
     ]
    },
    "len": {
     "line number": [
      816
     ]
    },
    "numpy.arange": {
     "line number": [
      816
     ]
    },
    "numpy.empty": {
     "line number": [
      814
     ]
    },
    "numpy.linspace": {
     "line number": [
      812
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      813
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      812,
      814
     ]
    },
    "numpy.ma.extras.median": {
     "line number": [
      820,
      821,
      822,
      823
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      820,
      821,
      822,
      823
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      818
     ]
    },
    "numpy.zeros": {
     "line number": [
      822,
      823
     ]
    },
    "range": {
     "line number": [
      817
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_2d_waxis": {
  "data": {
   "lineno": 825,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      827
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      830,
      832,
      834
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      828
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      827
     ]
    },
    "numpy.ma.extras.median": {
     "line number": [
      829,
      831,
      833,
      835
     ]
    },
    "numpy.ma.median": {
     "line number": [
      830,
      832,
      834
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      830,
      832,
      834
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      829,
      831,
      833,
      835
     ]
    },
    "type": {
     "line number": [
      830,
      832,
      834
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_3d": {
  "data": {
   "lineno": 837,
   "symbols_in_volume": {
    "numpy.ma.arange": {
     "line number": [
      839,
      844
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      840,
      845
     ]
    },
    "numpy.ma.extras.median": {
     "line number": [
      841,
      843,
      846
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      841,
      843,
      846
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_ambigous_fill": {
  "data": {
   "lineno": 991,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      993
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      994
     ]
    },
    "numpy.ma.median": {
     "line number": [
      995,
      996,
      997,
      998
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      995,
      996,
      997,
      998
     ]
    },
    "numpy.uint8": {
     "line number": [
      993
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_axis_argument_errors": {
  "data": {
   "lineno": 736,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      748,
      758
     ]
    },
    "Exception": {
     "line number": [
      747
     ]
    },
    "numpy.AxisError": {
     "line number": [
      755
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      740
     ]
    },
    "numpy.ma.median": {
     "line number": [
      746,
      754
     ]
    },
    "numpy.ma.tests.test_extras.itertools": {
     "line number": [
      743,
      751
     ]
    },
    "range": {
     "line number": [
      738,
      743
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_docstring_examples": {
  "data": {
   "lineno": 721,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      723,
      727
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      726,
      730,
      734
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      723,
      727
     ]
    },
    "numpy.ma.median": {
     "line number": [
      724,
      725,
      726,
      728,
      729,
      730,
      731
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      726,
      730,
      734
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      724,
      725,
      728,
      729,
      732,
      733
     ]
    },
    "type": {
     "line number": [
      726,
      730,
      734
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_empty": {
  "data": {
   "lineno": 1043,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      1047,
      1049,
      1055,
      1056,
      1058,
      1068,
      1070
     ]
    },
    "float": {
     "line number": [
      1045,
      1052,
      1061,
      1066
     ]
    },
    "numpy.array": {
     "line number": [
      1045,
      1052,
      1061,
      1066
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      1045,
      1052,
      1061,
      1066
     ]
    },
    "numpy.ma.median": {
     "line number": [
      1048,
      1057,
      1062,
      1063,
      1069
     ]
    },
    "numpy.ma.tests.test_extras.warnings": {
     "line number": [
      1056,
      1067,
      1068
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      1049,
      1058,
      1070
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      1048,
      1057
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1062,
      1063,
      1069
     ]
    },
    "numpy.nan": {
     "line number": [
      1048,
      1057,
      1066
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1046,
      1054
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_inf": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": {
    "numpy.inf": {
     "line number": [
      684,
      684,
      685,
      685,
      686,
      687,
      687,
      688,
      688,
      689,
      691,
      691,
      692,
      692,
      695,
      695,
      696,
      696
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      684,
      687,
      691,
      695
     ]
    },
    "numpy.ma.median": {
     "line number": [
      684,
      687,
      691,
      695
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      686,
      689,
      694,
      698
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_masked_0d": {
  "data": {
   "lineno": 760,
   "symbols_in_volume": {
    "numpy.ma.core.array": {
     "line number": [
      762,
      764
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      765
     ]
    },
    "numpy.ma.median": {
     "line number": [
      763,
      765
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      763,
      765
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_masked_1d": {
  "data": {
   "lineno": 767,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      768,
      772,
      776,
      780,
      785,
      790,
      795,
      800
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      775,
      779,
      783,
      788,
      793,
      798,
      803
     ]
    },
    "numpy.ma.core.MaskedConstant": {
     "line number": [
      771
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      768,
      772,
      776,
      780,
      785,
      790,
      795,
      800
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      769
     ]
    },
    "numpy.ma.median": {
     "line number": [
      769,
      770,
      771,
      773,
      774,
      775,
      777,
      778,
      779,
      781,
      782,
      783,
      786,
      787,
      788,
      791,
      792,
      793,
      796,
      797,
      798,
      801,
      802,
      803
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      771,
      775,
      779,
      783,
      788,
      793,
      798,
      803
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      769,
      770,
      773,
      774,
      777,
      778,
      781,
      782,
      786,
      787,
      791,
      792,
      796,
      797,
      801,
      802
     ]
    },
    "type": {
     "line number": [
      771,
      775,
      779,
      783,
      788,
      793,
      798,
      803
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_nan": {
  "data": {
   "lineno": 893,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      895,
      923
     ]
    },
    "bool": {
     "line number": [
      896
     ]
    },
    "numpy.isscalar": {
     "line number": [
      902,
      905
     ]
    },
    "numpy.ma.array": {
     "line number": [
      897,
      918
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      909,
      912,
      915
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      919
     ]
    },
    "numpy.ma.median": {
     "line number": [
      901,
      904,
      908,
      911,
      914,
      920,
      921,
      922
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      902,
      905
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      903,
      906,
      910,
      913,
      916,
      920,
      921,
      922
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      909,
      912,
      915,
      923
     ]
    },
    "numpy.nan": {
     "line number": [
      897,
      903,
      906,
      910,
      913,
      916,
      918,
      920,
      921,
      922
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      894
     ]
    },
    "numpy.zeros": {
     "line number": [
      896
     ]
    },
    "type": {
     "line number": [
      909,
      912,
      915
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_nan_behavior": {
  "data": {
   "lineno": 939,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      944,
      947,
      948,
      958,
      959,
      962,
      969,
      978,
      987
     ]
    },
    "float": {
     "line number": [
      940,
      950
     ]
    },
    "len": {
     "line number": [
      971,
      980,
      989
     ]
    },
    "numpy.arange": {
     "line number": [
      940,
      950,
      951
     ]
    },
    "numpy.isscalar": {
     "line number": [
      961
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      941
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      940,
      950
     ]
    },
    "numpy.ma.median": {
     "line number": [
      945,
      946,
      960,
      961,
      965,
      970,
      974,
      979,
      983,
      988
     ]
    },
    "numpy.ma.tests.test_extras.warnings": {
     "line number": [
      959,
      968,
      969,
      977,
      978,
      986,
      987
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      947,
      948,
      961,
      962
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      945,
      946,
      960
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      970,
      971,
      979,
      980,
      988,
      989
     ]
    },
    "numpy.nan": {
     "line number": [
      942,
      945,
      946,
      953,
      954,
      960,
      966,
      967,
      975,
      976,
      984,
      985
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      943,
      957
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_neg_axis": {
  "data": {
   "lineno": 848,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      849
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      850
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      849
     ]
    },
    "numpy.ma.extras.median": {
     "line number": [
      851,
      851
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      851
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_non_masked": {
  "data": {
   "lineno": 700,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      701,
      711,
      716
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      703,
      706,
      709,
      714,
      719
     ]
    },
    "numpy.ma.median": {
     "line number": [
      702,
      703,
      705,
      706,
      708,
      709,
      712,
      713,
      714,
      717,
      718,
      719
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      703,
      706,
      709,
      714,
      719
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      702,
      705,
      708,
      712,
      713,
      717,
      718
     ]
    },
    "numpy.median": {
     "line number": [
      712,
      713,
      717,
      718
     ]
    },
    "range": {
     "line number": [
      704
     ]
    },
    "type": {
     "line number": [
      703,
      706,
      709
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_object": {
  "data": {
   "lineno": 1072,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1074,
      1076
     ]
    },
    "numpy.arange": {
     "line number": [
      1073
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      1073
     ]
    },
    "numpy.ma.median": {
     "line number": [
      1074,
      1076
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      1074,
      1076
     ]
    },
    "numpy.nan": {
     "line number": [
      1075
     ]
    },
    "object": {
     "line number": [
      1074,
      1076
     ]
    },
    "type": {
     "line number": [
      1074,
      1076
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_out": {
  "data": {
   "lineno": 867,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      870
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      882
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      871
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      870,
      872,
      875,
      878
     ]
    },
    "numpy.ma.extras.median": {
     "line number": [
      873
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      881,
      882
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      880
     ]
    },
    "numpy.ones": {
     "line number": [
      872
     ]
    },
    "type": {
     "line number": [
      882
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_out_1d": {
  "data": {
   "lineno": 853,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      856
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      865
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      857
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      856,
      858
     ]
    },
    "numpy.ma.extras.median": {
     "line number": [
      859
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      864,
      865
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      861,
      863
     ]
    },
    "numpy.ones": {
     "line number": [
      858
     ]
    },
    "type": {
     "line number": [
      865
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_out_nan": {
  "data": {
   "lineno": 926,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      928
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      932
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      929,
      930,
      934,
      936
     ]
    },
    "numpy.ma.median": {
     "line number": [
      933,
      935,
      937
     ]
    },
    "numpy.ma.tests.test_extras.warnings": {
     "line number": [
      927,
      928
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      933,
      935,
      937
     ]
    },
    "numpy.nan": {
     "line number": [
      931
     ]
    },
    "numpy.ones": {
     "line number": [
      930
     ]
    },
    "numpy.zeros": {
     "line number": [
      929,
      934,
      936
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_pytype": {
  "data": {
   "lineno": 678,
   "symbols_in_volume": {
    "numpy.inf": {
     "line number": [
      679,
      679,
      679,
      679,
      680
     ]
    },
    "numpy.ma.median": {
     "line number": [
      679
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      680
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_single_non_masked_value_on_axis": {
  "data": {
   "lineno": 884,
   "symbols_in_volume": {
    "numpy.ma.masked_equal": {
     "line number": [
      888
     ]
    },
    "numpy.ma.median": {
     "line number": [
      890
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      890
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestMedian.test_special": {
  "data": {
   "lineno": 1000,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1002,
      1008,
      1016,
      1021,
      1036
     ]
    },
    "numpy.float32": {
     "line number": [
      1024
     ]
    },
    "numpy.inf": {
     "line number": [
      1001,
      1001
     ]
    },
    "numpy.isnan": {
     "line number": [
      1003,
      1009,
      1025,
      1037
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      1003,
      1009,
      1025,
      1037
     ]
    },
    "numpy.ma.median": {
     "line number": [
      1004,
      1005,
      1006,
      1010,
      1011,
      1012,
      1013,
      1017,
      1018,
      1019,
      1027,
      1028,
      1030,
      1031,
      1032,
      1038,
      1039,
      1040
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      1010,
      1011,
      1012,
      1013
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1004,
      1005,
      1006,
      1017,
      1018,
      1019,
      1027,
      1028,
      1030,
      1031,
      1032,
      1038,
      1039,
      1040
     ]
    },
    "numpy.nan": {
     "line number": [
      1002,
      1002,
      1002,
      1004,
      1005,
      1008,
      1008,
      1008,
      1008,
      1022,
      1022,
      1023,
      1023,
      1036,
      1041
     ]
    },
    "range": {
     "line number": [
      1034,
      1035
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestNotMasked": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": {
    "object": {
     "line number": [
      319
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestNotMasked.test_contiguous": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      358
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      358
     ]
    },
    "numpy.ma.extras.notmasked_contiguous": {
     "line number": [
      362,
      369,
      381
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      363,
      370,
      382
     ]
    },
    "slice": {
     "line number": [
      364,
      365,
      366,
      371,
      371,
      372,
      372,
      373,
      373,
      374,
      374,
      375,
      376,
      378,
      383,
      385,
      385
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestNotMasked.test_edges": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      324
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      348
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      324
     ]
    },
    "numpy.ma.extras.notmasked_edges": {
     "line number": [
      330,
      332,
      335,
      339,
      341,
      344,
      349,
      352
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      331,
      333,
      334,
      336,
      337,
      340,
      342,
      343,
      345,
      346,
      350,
      351,
      353,
      354
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestPolynomial": {
  "data": {
   "lineno": 1253,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1253
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestPolynomial.test_polyfit": {
  "data": {
   "lineno": 1255,
   "symbols_in_volume": {
    "numpy.ma.core.MaskedArray": {
     "line number": [
      1262,
      1264
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      1263,
      1265
     ]
    },
    "numpy.ma.extras.polyfit": {
     "line number": [
      1260,
      1267,
      1273,
      1278,
      1288
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1260,
      1271,
      1276,
      1281,
      1292
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1290
     ]
    },
    "numpy.polyfit": {
     "line number": [
      1260,
      1268,
      1274,
      1279,
      1289
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1258,
      1259,
      1283
     ]
    },
    "zip": {
     "line number": [
      1270,
      1275,
      1280,
      1291
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestPolynomial.test_polyfit_with_masked_NaNs": {
  "data": {
   "lineno": 1294,
   "symbols_in_volume": {
    "numpy.ma.core.MaskedArray": {
     "line number": [
      1300,
      1301
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      1302,
      1303
     ]
    },
    "numpy.ma.extras.polyfit": {
     "line number": [
      1305
     ]
    },
    "numpy.ma.testutils.assert_almost_equal": {
     "line number": [
      1308
     ]
    },
    "numpy.nan": {
     "line number": [
      1298,
      1299
     ]
    },
    "numpy.polyfit": {
     "line number": [
      1306
     ]
    },
    "numpy.random.rand": {
     "line number": [
      1295,
      1296
     ]
    },
    "zip": {
     "line number": [
      1307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestShapeBase": {
  "data": {
   "lineno": 1543,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1543
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestShapeBase.test_atleast_2d": {
  "data": {
   "lineno": 1545,
   "symbols_in_volume": {
    "numpy.ma.core.masked_array": {
     "line number": [
      1547
     ]
    },
    "numpy.ma.extras.atleast_2d": {
     "line number": [
      1548
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1549,
      1550,
      1551,
      1552,
      1553
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestShapeBase.test_shape_scalar": {
  "data": {
   "lineno": 1555,
   "symbols_in_volume": {
    "numpy.ma.extras.atleast_1d": {
     "line number": [
      1560,
      1565
     ]
    },
    "numpy.ma.extras.atleast_2d": {
     "line number": [
      1571,
      1576
     ]
    },
    "numpy.ma.extras.atleast_3d": {
     "line number": [
      1582,
      1587
     ]
    },
    "numpy.ma.extras.diagflat": {
     "line number": [
      1594
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1561,
      1562,
      1563,
      1567,
      1568,
      1569,
      1572,
      1573,
      1574,
      1578,
      1579,
      1580,
      1583,
      1584,
      1585,
      1589,
      1590,
      1591,
      1595,
      1596
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestStack": {
  "data": {
   "lineno": 1599,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1599
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_extras.TestStack.test_stack_1d": {
  "data": {
   "lineno": 1601,
   "symbols_in_volume": {
    "numpy.ma.core.masked_array": {
     "line number": [
      1602,
      1603
     ]
    },
    "numpy.ma.extras.stack": {
     "line number": [
      1605,
      1614
     ]
    },
    "numpy.ma.extras.vstack": {
     "line number": [
      1610
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      1607,
      1608,
      1611,
      1612,
      1616,
      1617
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1606,
      1615
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestStack.test_stack_masks": {
  "data": {
   "lineno": 1619,
   "symbols_in_volume": {
    "numpy.ma.core.masked_array": {
     "line number": [
      1620,
      1621
     ]
    },
    "numpy.ma.extras.stack": {
     "line number": [
      1623,
      1632
     ]
    },
    "numpy.ma.extras.vstack": {
     "line number": [
      1628
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      1625,
      1626,
      1629,
      1630,
      1634,
      1635
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1624,
      1633
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.TestStack.test_stack_nd": {
  "data": {
   "lineno": 1637,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1642,
      1643,
      1663,
      1664
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      1644,
      1645,
      1665,
      1666
     ]
    },
    "numpy.ma.extras.stack": {
     "line number": [
      1647,
      1653,
      1668,
      1674
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      1650,
      1651,
      1656,
      1657,
      1671,
      1672,
      1677,
      1678
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      1649,
      1655,
      1670,
      1676
     ]
    },
    "numpy.random.randint": {
     "line number": [
      1640,
      1641,
      1642,
      1643,
      1661,
      1662,
      1663,
      1664
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_extras.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.apply_along_axis": {
  "data": {
   "shadows": "numpy.ma.extras.apply_along_axis"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.apply_over_axes": {
  "data": {
   "shadows": "numpy.ma.extras.apply_over_axes"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.arange": {
  "data": {
   "shadows": "numpy.ma.core.arange"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.array": {
  "data": {
   "shadows": "numpy.ma.core.array"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.assert_": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.assert_almost_equal": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.assert_array_equal": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.assert_equal": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.atleast_1d": {
  "data": {
   "shadows": "numpy.ma.extras.atleast_1d"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.atleast_2d": {
  "data": {
   "shadows": "numpy.ma.extras.atleast_2d"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.atleast_3d": {
  "data": {
   "shadows": "numpy.ma.extras.atleast_3d"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.average": {
  "data": {
   "shadows": "numpy.ma.extras.average"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.clump_masked": {
  "data": {
   "shadows": "numpy.ma.extras.clump_masked"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.clump_unmasked": {
  "data": {
   "shadows": "numpy.ma.extras.clump_unmasked"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.compress_nd": {
  "data": {
   "shadows": "numpy.ma.extras.compress_nd"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.compress_rowcols": {
  "data": {
   "shadows": "numpy.ma.extras.compress_rowcols"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.corrcoef": {
  "data": {
   "shadows": "numpy.ma.extras.corrcoef"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.count": {
  "data": {
   "shadows": "numpy.ma.core.count"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.cov": {
  "data": {
   "shadows": "numpy.ma.extras.cov"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.diagflat": {
  "data": {
   "shadows": "numpy.ma.extras.diagflat"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.dot": {
  "data": {
   "shadows": "numpy.ma.extras.dot"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.ediff1d": {
  "data": {
   "shadows": "numpy.ma.extras.ediff1d"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.flatnotmasked_contiguous": {
  "data": {
   "shadows": "numpy.ma.extras.flatnotmasked_contiguous"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.getmaskarray": {
  "data": {
   "shadows": "numpy.ma.core.getmaskarray"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.in1d": {
  "data": {
   "shadows": "numpy.ma.extras.in1d"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.intersect1d": {
  "data": {
   "shadows": "numpy.ma.extras.intersect1d"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.isin": {
  "data": {
   "shadows": "numpy.ma.extras.isin"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.mask_rowcols": {
  "data": {
   "shadows": "numpy.ma.extras.mask_rowcols"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.masked": {
  "data": {
   "shadows": "numpy.ma.core.masked"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.masked_all": {
  "data": {
   "shadows": "numpy.ma.extras.masked_all"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.masked_all_like": {
  "data": {
   "shadows": "numpy.ma.extras.masked_all_like"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.masked_array": {
  "data": {
   "shadows": "numpy.ma.core.masked_array"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.median": {
  "data": {
   "shadows": "numpy.ma.extras.median"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.mr_": {
  "data": {
   "shadows": "numpy.ma.extras.mr_"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.nomask": {
  "data": {
   "shadows": "numpy.ma.core.nomask"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.notmasked_contiguous": {
  "data": {
   "shadows": "numpy.ma.extras.notmasked_contiguous"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.notmasked_edges": {
  "data": {
   "shadows": "numpy.ma.extras.notmasked_edges"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.ones": {
  "data": {
   "shadows": "numpy.ma.core.ones"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.polyfit": {
  "data": {
   "shadows": "numpy.ma.extras.polyfit"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.setdiff1d": {
  "data": {
   "shadows": "numpy.ma.extras.setdiff1d"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.setxor1d": {
  "data": {
   "shadows": "numpy.ma.extras.setxor1d"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.shape": {
  "data": {
   "shadows": "numpy.ma.core.shape"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.stack": {
  "data": {
   "shadows": "numpy.ma.extras.stack"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.union1d": {
  "data": {
   "shadows": "numpy.ma.extras.union1d"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.unique": {
  "data": {
   "shadows": "numpy.ma.extras.unique"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.vstack": {
  "data": {
   "shadows": "numpy.ma.extras.vstack"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_extras.zeros": {
  "data": {
   "shadows": "numpy.ma.core.zeros"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords": {
  "data": {},
  "type": "module"
 },
 "numpy.ma.tests.test_mrecords.MaskedRecords": {
  "data": {
   "shadows": "numpy.ma.mrecords.MaskedRecords"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "float": {
     "line number": [
      34
     ]
    },
    "int": {
     "line number": [
      34
     ]
    },
    "list": {
     "line number": [
      36
     ]
    },
    "numpy.ma.array": {
     "line number": [
      36
     ]
    },
    "object": {
     "line number": [
      29
     ]
    },
    "zip": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_byview": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      44
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      41,
      48
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      44
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      42,
      47
     ]
    },
    "numpy.ma.testutils.assert_equal_records": {
     "line number": [
      43,
      45,
      48
     ]
    },
    "numpy.recarray": {
     "line number": [
      44,
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_exotic_formats": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "float": {
     "line number": [
      333
     ]
    },
    "int": {
     "line number": [
      333
     ]
    },
    "numpy.array": {
     "line number": [
      340,
      347
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      334,
      338,
      343
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      333,
      337,
      342
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      335,
      339
     ]
    },
    "numpy.ma.testutils.assert_equal_records": {
     "line number": [
      346
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_filled": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "float": {
     "line number": [
      300,
      302,
      308
     ]
    },
    "int": {
     "line number": [
      299,
      302,
      306
     ]
    },
    "numpy.array": {
     "line number": [
      306,
      307,
      309
     ]
    },
    "numpy.ma.array": {
     "line number": [
      299,
      300,
      301
     ]
    },
    "numpy.ma.mrecords.fromarrays": {
     "line number": [
      303
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      306,
      307,
      309
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_get": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      56,
      88
     ]
    },
    "isinstance": {
     "line number": [
      60,
      68,
      78
     ]
    },
    "numpy.array": {
     "line number": [
      83
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      75
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      53,
      60,
      68,
      78,
      86
     ]
    },
    "numpy.ma.nomask": {
     "line number": [
      64
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      60,
      68,
      75,
      78
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      56,
      57,
      61,
      62,
      64,
      65,
      66,
      69,
      70,
      72,
      73,
      74,
      79,
      81,
      88
     ]
    },
    "numpy.ma.testutils.assert_equal_records": {
     "line number": [
      82,
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_hardmask": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "numpy.ma.make_mask": {
     "line number": [
      282
     ]
    },
    "numpy.ma.make_mask_none": {
     "line number": [
      281
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      271
     ]
    },
    "numpy.ma.nomask": {
     "line number": [
      274,
      278,
      282
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      273,
      277,
      282
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      283
     ]
    },
    "numpy.ma.testutils.assert_equal_records": {
     "line number": [
      275,
      280
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_pickling": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": {
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      289
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      290
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      291
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      288
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      292,
      294
     ]
    },
    "numpy.ma.testutils.assert_equal_records": {
     "line number": [
      293,
      295
     ]
    },
    "range": {
     "line number": [
      289
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_set_elements": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      215
     ]
    },
    "numpy.array": {
     "line number": [
      214
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      211,
      230
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      210,
      219,
      229
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      212,
      217,
      221,
      222,
      223,
      224,
      225,
      227,
      231,
      232,
      233,
      234,
      235,
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_set_fields": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      112,
      126
     ]
    },
    "int": {
     "line number": [
      136
     ]
    },
    "numpy.array": {
     "line number": [
      107,
      121
     ]
    },
    "numpy.ma.array": {
     "line number": [
      137,
      139
     ]
    },
    "numpy.ma.getdata": {
     "line number": [
      119
     ]
    },
    "numpy.ma.getmaskarray": {
     "line number": [
      103,
      118
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      114,
      132
     ]
    },
    "numpy.ma.mrecords.MaskedRecords": {
     "line number": [
      138
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      93,
      128
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      98,
      99,
      102,
      103,
      105,
      106,
      116,
      117,
      118,
      119,
      120,
      130,
      131,
      133,
      134,
      142,
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_set_fields_mask": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "float": {
     "line number": [
      155
     ]
    },
    "int": {
     "line number": [
      155
     ]
    },
    "numpy.arange": {
     "line number": [
      154
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      150,
      156
     ]
    },
    "numpy.ma.mrecords.fromarrays": {
     "line number": [
      154
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      149
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      151,
      152,
      157,
      158
     ]
    },
    "numpy.random.rand": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      169,
      174
     ]
    },
    "numpy.array": {
     "line number": [
      169,
      174
     ]
    },
    "numpy.ma.getmaskarray": {
     "line number": [
      165,
      172
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      164
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      162
     ]
    },
    "numpy.ma.nomask": {
     "line number": [
      171
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      165,
      166,
      167,
      168,
      172,
      173
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask_fromarray": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      178
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      181,
      182,
      183,
      186,
      187,
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask_fromfields": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      195,
      195,
      195
     ]
    },
    "numpy.array": {
     "line number": [
      193
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      191
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      197,
      198,
      199,
      203,
      204,
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_setslices_hardmask": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      256
     ]
    },
    "Exception": {
     "line number": [
      259
     ]
    },
    "NotImplementedError": {
     "line number": [
      253,
      263
     ]
    },
    "TypeError": {
     "line number": [
      263,
      266
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      242
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      246,
      247,
      248,
      250,
      251,
      252
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_tolist": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": {
    "float": {
     "line number": [
      315,
      317
     ]
    },
    "int": {
     "line number": [
      314,
      317
     ]
    },
    "numpy.ma.array": {
     "line number": [
      314,
      315,
      316
     ]
    },
    "numpy.ma.mrecords.fromarrays": {
     "line number": [
      318
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecords.test_withnames": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "float": {
     "line number": [
      327
     ]
    },
    "numpy.ma.mrecords.mrecarray": {
     "line number": [
      327
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecordsImport": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": {
    "float": {
     "line number": [
      392,
      395
     ]
    },
    "int": {
     "line number": [
      391,
      395
     ]
    },
    "numpy.core.records.fromarrays": {
     "line number": [
      399
     ]
    },
    "numpy.ma.array": {
     "line number": [
      391,
      392,
      393
     ]
    },
    "numpy.ma.mrecords.fromarrays": {
     "line number": [
      396
     ]
    },
    "object": {
     "line number": [
      389
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_mrecords.TestMRecordsImport.test_addfield": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": {
    "numpy.ma.array": {
     "line number": [
      483
     ]
    },
    "numpy.ma.mrecords.addfield": {
     "line number": [
      483
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      484,
      485
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromarrays": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": {
    "float": {
     "line number": [
      404
     ]
    },
    "getattr": {
     "line number": [
      408
     ]
    },
    "int": {
     "line number": [
      403
     ]
    },
    "numpy.ma.array": {
     "line number": [
      403,
      404,
      405,
      410
     ]
    },
    "numpy.ma.mrecords.fromarrays": {
     "line number": [
      411
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      408
     ]
    },
    "numpy.ma.testutils.assert_equal_records": {
     "line number": [
      411
     ]
    },
    "zip": {
     "line number": [
      407
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromrecords": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": {
    "float": {
     "line number": [
      430
     ]
    },
    "getattr": {
     "line number": [
      427,
      427,
      432,
      432
     ]
    },
    "int": {
     "line number": [
      430
     ]
    },
    "numpy.core.records.fromrecords": {
     "line number": [
      420
     ]
    },
    "numpy.ma.mrecords.fromrecords": {
     "line number": [
      421,
      424,
      429,
      434
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      425,
      427,
      430,
      432,
      435
     ]
    },
    "numpy.ma.testutils.assert_equal_records": {
     "line number": [
      422,
      436,
      437
     ]
    },
    "zip": {
     "line number": [
      431
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromrecords_wmask": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": {
    "numpy.ma.mrecords.fromrecords": {
     "line number": [
      443,
      447,
      451,
      455
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      445,
      449,
      453,
      458
     ]
    },
    "numpy.ma.testutils.assert_equal_records": {
     "line number": [
      444,
      448,
      452,
      457
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromtextfile": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      474
     ]
    },
    "numpy.ma.mrecords.MaskedRecords": {
     "line number": [
      474
     ]
    },
    "numpy.ma.mrecords.fromtextfile": {
     "line number": [
      473
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      474
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      475,
      476,
      477
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      470
     ]
    },
    "open": {
     "line number": [
      471
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestView": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "object": {
     "line number": [
      351
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_mrecords.TestView.setup": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": {
    "float": {
     "line number": [
      355,
      355
     ]
    },
    "list": {
     "line number": [
      356
     ]
    },
    "numpy.arange": {
     "line number": [
      354
     ]
    },
    "numpy.array": {
     "line number": [
      356
     ]
    },
    "numpy.ma.mrecords.fromarrays": {
     "line number": [
      358
     ]
    },
    "numpy.random.rand": {
     "line number": [
      354
     ]
    },
    "zip": {
     "line number": [
      356
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestView.test_view_by_itself": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      365
     ]
    },
    "numpy.ma.mrecords.MaskedRecords": {
     "line number": [
      365
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      365
     ]
    },
    "numpy.ma.testutils.assert_equal_records": {
     "line number": [
      366,
      367
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestView.test_view_flexible_type": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": {
    "float": {
     "line number": [
      379,
      379
     ]
    },
    "isinstance": {
     "line number": [
      381
     ]
    },
    "numpy.dtype": {
     "line number": [
      384
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      383
     ]
    },
    "numpy.ma.mrecords.MaskedRecords": {
     "line number": [
      381
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      381,
      383,
      385
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      384
     ]
    },
    "numpy.ma.testutils.assert_equal_records": {
     "line number": [
      382
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.TestView.test_view_simple_dtype": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": {
    "float": {
     "line number": [
      371,
      374
     ]
    },
    "isinstance": {
     "line number": [
      373
     ]
    },
    "list": {
     "line number": [
      374
     ]
    },
    "numpy.array": {
     "line number": [
      374
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      373
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      375
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      373,
      375
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      374
     ]
    },
    "zip": {
     "line number": [
      374
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_mrecords.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.addfield": {
  "data": {
   "shadows": "numpy.ma.mrecords.addfield"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.assert_": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.assert_equal": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.assert_equal_records": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_equal_records"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.fromarrays": {
  "data": {
   "shadows": "numpy.ma.mrecords.fromarrays"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.fromrecords": {
  "data": {
   "shadows": "numpy.ma.mrecords.fromrecords"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.fromtextfile": {
  "data": {
   "shadows": "numpy.ma.mrecords.fromtextfile"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.ma": {
  "data": {
   "shadows": "numpy.ma"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.masked": {
  "data": {
   "shadows": "numpy.ma.masked"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.mrecarray": {
  "data": {
   "shadows": "numpy.ma.mrecords.mrecarray"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.nomask": {
  "data": {
   "shadows": "numpy.ma.nomask"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.pickle": {
  "data": {
   "shadows": "numpy.core.numeric.pickle"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.recarray": {
  "data": {
   "shadows": "numpy.recarray"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.recfromarrays": {
  "data": {
   "shadows": "numpy.core.records.fromarrays"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.recfromrecords": {
  "data": {
   "shadows": "numpy.core.records.fromrecords"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.temppath": {
  "data": {
   "shadows": "numpy.testing.temppath"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_mrecords.test_record_array_with_object_field": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "int": {
     "line number": [
      493
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      490
     ]
    },
    "object": {
     "line number": [
      493
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma": {
  "data": {
   "symbols_in_volume": {
    "numpy.pi": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.ma.tests.test_old_ma.MaskType": {
  "data": {
   "shadows": "numpy.ma.MaskType"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.MaskedArray": {
  "data": {
   "shadows": "numpy.ma.MaskedArray"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.TestArrayMethods": {
  "data": {
   "lineno": 768,
   "symbols_in_volume": {
    "object": {
     "line number": [
      768
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_old_ma.TestArrayMethods.setup": {
  "data": {
   "lineno": 770,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      771,
      780
     ]
    },
    "numpy.ma.array": {
     "line number": [
      786,
      787,
      788
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestArrayMethods.test_clip": {
  "data": {
   "lineno": 800,
   "symbols_in_volume": {
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      803,
      804,
      805
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      803,
      804,
      805
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestArrayMethods.test_cumprod": {
  "data": {
   "lineno": 827,
   "symbols_in_volume": {
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      830,
      832
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      830,
      832
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestArrayMethods.test_cumsum": {
  "data": {
   "lineno": 834,
   "symbols_in_volume": {
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      837,
      839
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      837,
      839
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestArrayMethods.test_ptp": {
  "data": {
   "lineno": 807,
   "symbols_in_volume": {
    "numpy.float_": {
     "line number": [
      811,
      812
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      817,
      818
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      817,
      818
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      810
     ]
    },
    "numpy.zeros": {
     "line number": [
      811,
      812
     ]
    },
    "range": {
     "line number": [
      813,
      815
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestArrayMethods.test_swapaxes": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": {
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      823
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      823
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      825
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestArrayMethods.test_trace": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": {
    "numpy.ma.sum": {
     "line number": [
      797
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      796
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      796
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      795
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestArrayMethods.test_varstd": {
  "data": {
   "lineno": 841,
   "symbols_in_volume": {
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      843,
      844,
      845,
      846,
      849,
      850,
      851
     ]
    },
    "numpy.sqrt": {
     "line number": [
      851
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      843,
      844,
      845,
      846,
      849,
      850,
      851
     ]
    },
    "range": {
     "line number": [
      848
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "object": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_old_ma.TestMa.setup": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      39,
      40,
      46
     ]
    },
    "numpy.ma.array": {
     "line number": [
      44,
      45,
      47
     ]
    },
    "numpy.ma.tests.test_old_ma.pi": {
     "line number": [
      39
     ]
    },
    "numpy.where": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testAPI": {
  "data": {
   "lineno": 690,
   "symbols_in_volume": {
    "dir": {
     "line number": [
      691,
      692
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      692
     ]
    },
    "numpy.ndarray": {
     "line number": [
      691
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      691
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testAddSumProd": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "len": {
     "line number": [
      203
     ]
    },
    "numpy.add.accumulate": {
     "line number": [
      193
     ]
    },
    "numpy.add.reduce": {
     "line number": [
      192,
      206
     ]
    },
    "numpy.concatenate": {
     "line number": [
      204
     ]
    },
    "numpy.ma.add.accumulate": {
     "line number": [
      193
     ]
    },
    "numpy.ma.add.reduce": {
     "line number": [
      192,
      206
     ]
    },
    "numpy.ma.array": {
     "line number": [
      194,
      195
     ]
    },
    "numpy.ma.concatenate": {
     "line number": [
      205
     ]
    },
    "numpy.ma.filled": {
     "line number": [
      197,
      201
     ]
    },
    "numpy.ma.product": {
     "line number": [
      199,
      200,
      202,
      208
     ]
    },
    "numpy.ma.sum": {
     "line number": [
      194,
      195,
      196,
      197,
      198,
      207
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200,
      201,
      204,
      206,
      207,
      208
     ]
    },
    "numpy.product": {
     "line number": [
      199,
      200,
      201,
      208
     ]
    },
    "numpy.sum": {
     "line number": [
      196,
      197,
      198,
      207
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200,
      201,
      204,
      206,
      207,
      208
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testArithmetic": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      119,
      119
     ]
    },
    "numpy.add": {
     "line number": [
      121
     ]
    },
    "numpy.divide": {
     "line number": [
      125
     ]
    },
    "numpy.errstate": {
     "line number": [
      107,
      112,
      124
     ]
    },
    "numpy.ma.add": {
     "line number": [
      121
     ]
    },
    "numpy.ma.array": {
     "line number": [
      92
     ]
    },
    "numpy.ma.divide": {
     "line number": [
      125
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      93
     ]
    },
    "numpy.ma.multiply": {
     "line number": [
      123
     ]
    },
    "numpy.ma.subtract": {
     "line number": [
      122
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      94,
      95,
      96,
      103,
      104,
      105,
      106,
      108,
      109,
      110,
      111,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      125
     ]
    },
    "numpy.multiply": {
     "line number": [
      123
     ]
    },
    "numpy.subtract": {
     "line number": [
      122
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      94,
      95,
      96,
      103,
      104,
      105,
      106,
      108,
      109,
      110,
      111,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testArrayAttributes": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": {
    "numpy.ma.array": {
     "line number": [
      687
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      688
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testArrayMethods": {
  "data": {
   "lineno": 669,
   "symbols_in_volume": {
    "numpy.ma.array": {
     "line number": [
      670,
      680
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      671,
      672,
      673,
      674,
      675,
      677,
      678,
      679,
      681,
      682,
      683,
      684
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      671,
      672,
      673,
      674,
      675,
      677,
      678,
      679,
      681,
      682,
      683,
      684
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testAverage1": {
  "data": {
   "lineno": 568,
   "symbols_in_volume": {
    "numpy.ma.array": {
     "line number": [
      570,
      578
     ]
    },
    "numpy.ma.average": {
     "line number": [
      571,
      572,
      573,
      577,
      581,
      582,
      583,
      584
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      576,
      577,
      580,
      582
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      571,
      572,
      574,
      581,
      583,
      585
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      571,
      572,
      574,
      575,
      577,
      581,
      582,
      583,
      585
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testAverage2": {
  "data": {
   "lineno": 587,
   "symbols_in_volume": {
    "float": {
     "line number": [
      634
     ]
    },
    "numpy.add.reduce": {
     "line number": [
      596
     ]
    },
    "numpy.arange": {
     "line number": [
      596,
      597
     ]
    },
    "numpy.ma.allclose": {
     "line number": [
      592,
      593,
      595,
      597,
      598,
      600,
      601,
      603,
      610,
      611,
      616,
      617,
      619,
      620
     ]
    },
    "numpy.ma.arange": {
     "line number": [
      591,
      594,
      594,
      623,
      624
     ]
    },
    "numpy.ma.array": {
     "line number": [
      594,
      634
     ]
    },
    "numpy.ma.average": {
     "line number": [
      592,
      593,
      595,
      597,
      598,
      599,
      599,
      600,
      601,
      603,
      604,
      604,
      610,
      611,
      612,
      613,
      614,
      616,
      617,
      619,
      620,
      625,
      628,
      630,
      632,
      636,
      638,
      640,
      642
     ]
    },
    "numpy.ma.count": {
     "line number": [
      614
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      612
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      610,
      611,
      612,
      613,
      614,
      615,
      635
     ]
    },
    "numpy.ma.ones": {
     "line number": [
      608,
      628,
      630,
      632,
      632
     ]
    },
    "numpy.ma.shape": {
     "line number": [
      626,
      626,
      629,
      629,
      631,
      631,
      633,
      633
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      637,
      639,
      641,
      643
     ]
    },
    "numpy.ma.zeros": {
     "line number": [
      605
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      592,
      593,
      595,
      597,
      598,
      600,
      601,
      603,
      610,
      611,
      612,
      616,
      617,
      619,
      620,
      633,
      637,
      639,
      641,
      643
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      613,
      614,
      626,
      627,
      629,
      631
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testBasic1d": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      61,
      62
     ]
    },
    "len": {
     "line number": [
      62
     ]
    },
    "numpy.ma.count": {
     "line number": [
      62
     ]
    },
    "numpy.ma.filled": {
     "line number": [
      64
     ]
    },
    "numpy.ma.isMaskedArray": {
     "line number": [
      56,
      57
     ]
    },
    "numpy.ma.shape": {
     "line number": [
      58
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      63,
      64,
      65
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      56,
      57,
      63,
      64,
      65
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      58,
      59,
      60,
      61,
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testBasic2d": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      81,
      83
     ]
    },
    "len": {
     "line number": [
      83
     ]
    },
    "numpy.ma.count": {
     "line number": [
      82
     ]
    },
    "numpy.ma.filled": {
     "line number": [
      85
     ]
    },
    "numpy.ma.isMaskedArray": {
     "line number": [
      77,
      78
     ]
    },
    "numpy.ma.shape": {
     "line number": [
      79
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      84,
      85,
      86
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      77,
      78,
      84,
      85,
      86
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      79,
      80,
      81,
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testCI": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      246
     ]
    },
    "numpy.array": {
     "line number": [
      212,
      252
     ]
    },
    "numpy.ma.MaskType": {
     "line number": [
      249
     ]
    },
    "numpy.ma.allequal": {
     "line number": [
      240,
      242,
      244,
      245,
      249
     ]
    },
    "numpy.ma.array": {
     "line number": [
      213,
      214,
      215,
      240,
      242,
      244,
      245,
      249,
      251
     ]
    },
    "numpy.ma.getmask": {
     "line number": [
      240,
      242,
      244
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      223,
      234,
      236,
      239
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      241,
      243
     ]
    },
    "numpy.ma.masked_values": {
     "line number": [
      247
     ]
    },
    "numpy.ma.sort": {
     "line number": [
      219
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      219,
      224,
      225,
      226,
      227,
      230,
      233,
      235,
      237,
      248,
      250
     ]
    },
    "numpy.sort": {
     "line number": [
      219
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      219,
      221,
      222,
      223,
      224,
      225,
      226,
      227,
      230,
      233,
      235,
      237,
      240,
      242,
      244,
      245,
      248,
      249,
      250,
      258
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      255,
      256,
      257
     ]
    },
    "object": {
     "line number": [
      251,
      252
     ]
    },
    "repr": {
     "line number": [
      218
     ]
    },
    "str": {
     "line number": [
      217,
      255,
      256
     ]
    },
    "type": {
     "line number": [
      221,
      221,
      255,
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testCopySize": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      269
     ]
    },
    "numpy.ma.allequal": {
     "line number": [
      272,
      288,
      296
     ]
    },
    "numpy.ma.arange": {
     "line number": [
      301
     ]
    },
    "numpy.ma.array": {
     "line number": [
      270,
      275,
      282,
      290,
      298
     ]
    },
    "numpy.ma.concatenate": {
     "line number": [
      304
     ]
    },
    "numpy.ma.filled": {
     "line number": [
      299
     ]
    },
    "numpy.ma.getmask": {
     "line number": [
      305
     ]
    },
    "numpy.ma.make_mask": {
     "line number": [
      263,
      264,
      266
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      284,
      286,
      292,
      294,
      302
     ]
    },
    "numpy.ma.repeat": {
     "line number": [
      306,
      308
     ]
    },
    "numpy.ma.resize": {
     "line number": [
      303
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      304,
      305,
      307,
      309
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      265,
      267,
      271,
      272,
      273,
      279,
      283,
      284,
      286,
      287,
      288,
      291,
      292,
      294,
      295,
      296,
      299,
      304,
      305,
      307,
      309
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testInplace": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": {
    "numpy.float32": {
     "line number": [
      544
     ]
    },
    "numpy.ma.arange": {
     "line number": [
      502,
      504,
      505,
      512,
      513,
      520,
      521,
      528,
      529,
      536,
      537,
      541,
      544,
      545
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      506,
      514,
      522,
      530,
      538,
      546
     ]
    },
    "numpy.ma.ones": {
     "line number": [
      542
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      508,
      510,
      516,
      518,
      524,
      526,
      532,
      534,
      540,
      542,
      548
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      508,
      510,
      516,
      518,
      524,
      526,
      532,
      534,
      540,
      542,
      548
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testMaPut": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": {
    "numpy.ma.all": {
     "line number": [
      364
     ]
    },
    "numpy.ma.put": {
     "line number": [
      363
     ]
    },
    "numpy.ma.take": {
     "line number": [
      364
     ]
    },
    "numpy.nonzero": {
     "line number": [
      362
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      364
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testMasked": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": {
    "numpy.ma.arange": {
     "line number": [
      562
     ]
    },
    "numpy.ma.filled": {
     "line number": [
      566
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      563,
      564,
      565
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      564,
      565
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      566
     ]
    },
    "str": {
     "line number": [
      564
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testMinMax": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "max": {
     "line number": [
      186
     ]
    },
    "min": {
     "line number": [
      187
     ]
    },
    "numpy.ma.maximum.reduce": {
     "line number": [
      186
     ]
    },
    "numpy.ma.minimum.reduce": {
     "line number": [
      187
     ]
    },
    "numpy.ma.ravel": {
     "line number": [
      183
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      186,
      187
     ]
    },
    "numpy.ravel": {
     "line number": [
      182
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      186,
      187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testMinMax2": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": {
    "numpy.ma.arange": {
     "line number": [
      471,
      472
     ]
    },
    "numpy.ma.greater": {
     "line number": [
      476
     ]
    },
    "numpy.ma.less": {
     "line number": [
      475
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      473,
      474
     ]
    },
    "numpy.ma.maximum": {
     "line number": [
      470,
      476
     ]
    },
    "numpy.ma.maximum.reduce": {
     "line number": [
      478
     ]
    },
    "numpy.ma.minimum": {
     "line number": [
      469,
      475
     ]
    },
    "numpy.ma.minimum.reduce": {
     "line number": [
      477
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      469,
      470,
      475,
      476
     ]
    },
    "numpy.ma.where": {
     "line number": [
      475,
      476
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      469,
      470,
      475,
      476,
      477,
      478
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testMixedArithmetic": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      130,
      131
     ]
    },
    "numpy.array": {
     "line number": [
      128
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      130,
      131
     ]
    },
    "numpy.ma.array": {
     "line number": [
      129
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      130,
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testOddFeatures": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": {
    "list": {
     "line number": [
      426,
      427,
      428,
      431,
      434
     ]
    },
    "numpy.float32": {
     "line number": [
      442
     ]
    },
    "numpy.ma.MaskType": {
     "line number": [
      443
     ]
    },
    "numpy.ma.arange": {
     "line number": [
      368,
      378,
      451,
      453
     ]
    },
    "numpy.ma.array": {
     "line number": [
      407,
      408,
      428,
      431,
      434,
      437,
      455
     ]
    },
    "numpy.ma.choose": {
     "line number": [
      446
     ]
    },
    "numpy.ma.conjugate": {
     "line number": [
      375
     ]
    },
    "numpy.ma.count": {
     "line number": [
      382
     ]
    },
    "numpy.ma.equal": {
     "line number": [
      424
     ]
    },
    "numpy.ma.getmask": {
     "line number": [
      460
     ]
    },
    "numpy.ma.greater": {
     "line number": [
      418
     ]
    },
    "numpy.ma.greater_equal": {
     "line number": [
      419
     ]
    },
    "numpy.ma.less": {
     "line number": [
      421
     ]
    },
    "numpy.ma.less_equal": {
     "line number": [
      422
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      379,
      380,
      382,
      382,
      383,
      383,
      384,
      386,
      387,
      388,
      389,
      390,
      392,
      394,
      395,
      396,
      397,
      398,
      401,
      402,
      403,
      404,
      405,
      409,
      412,
      415,
      416,
      417,
      448,
      449,
      450,
      452,
      454,
      462,
      464
     ]
    },
    "numpy.ma.masked_equal": {
     "line number": [
      424,
      434
     ]
    },
    "numpy.ma.masked_greater": {
     "line number": [
      418
     ]
    },
    "numpy.ma.masked_greater_equal": {
     "line number": [
      420
     ]
    },
    "numpy.ma.masked_inside": {
     "line number": [
      426,
      428
     ]
    },
    "numpy.ma.masked_less": {
     "line number": [
      421
     ]
    },
    "numpy.ma.masked_less_equal": {
     "line number": [
      422
     ]
    },
    "numpy.ma.masked_not_equal": {
     "line number": [
      423,
      425,
      437
     ]
    },
    "numpy.ma.masked_outside": {
     "line number": [
      427,
      431
     ]
    },
    "numpy.ma.masked_where": {
     "line number": [
      399,
      418,
      419,
      421,
      422,
      423,
      424,
      425,
      440,
      444
     ]
    },
    "numpy.ma.nomask": {
     "line number": [
      460
     ]
    },
    "numpy.ma.not_equal": {
     "line number": [
      423,
      425
     ]
    },
    "numpy.ma.ones": {
     "line number": [
      442
     ]
    },
    "numpy.ma.shape": {
     "line number": [
      383
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      373,
      374,
      375,
      391,
      406,
      411,
      414,
      418,
      419,
      421,
      422,
      423,
      424,
      425,
      426,
      427,
      428,
      431,
      434,
      437,
      440,
      445,
      447,
      459,
      461,
      463,
      465
     ]
    },
    "numpy.ma.where": {
     "line number": [
      382,
      383,
      384,
      392,
      410,
      413,
      457,
      458,
      462,
      464
     ]
    },
    "numpy.ma.zeros": {
     "line number": [
      443
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      371,
      373,
      374,
      375,
      380,
      382,
      383,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      393,
      394,
      395,
      396,
      397,
      398,
      400,
      401,
      402,
      403,
      404,
      405,
      406,
      411,
      414,
      415,
      416,
      417,
      418,
      419,
      421,
      422,
      423,
      424,
      425,
      426,
      427,
      428,
      431,
      434,
      437,
      440,
      445,
      447,
      448,
      449,
      450,
      459,
      460,
      461,
      463,
      465
     ]
    },
    "range": {
     "line number": [
      426,
      427,
      428,
      431,
      434
     ]
    },
    "str": {
     "line number": [
      380,
      380
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testPickle": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": {
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      555
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      556
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      557
     ]
    },
    "numpy.ma.arange": {
     "line number": [
      552
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      553
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      558
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      558
     ]
    },
    "range": {
     "line number": [
      555
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testPut": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": {
    "numpy.ma.arange": {
     "line number": [
      313
     ]
    },
    "numpy.ma.array": {
     "line number": [
      317,
      326
     ]
    },
    "numpy.ma.make_mask": {
     "line number": [
      315
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      318,
      319,
      322,
      323,
      329,
      330
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      324,
      331
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      318,
      319,
      321,
      322,
      323,
      324,
      328,
      329,
      330,
      331
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testPut2": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": {
    "numpy.ma.arange": {
     "line number": [
      335,
      345
     ]
    },
    "numpy.ma.array": {
     "line number": [
      336,
      337,
      346,
      348
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      338,
      339,
      341,
      342,
      349,
      350,
      352,
      353,
      355,
      356
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      343,
      354,
      357
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      338,
      339,
      341,
      342,
      343,
      349,
      350,
      352,
      353,
      354,
      355,
      356,
      357
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testScalarArithmetic": {
  "data": {
   "lineno": 654,
   "symbols_in_volume": {
    "numpy.errstate": {
     "line number": [
      657
     ]
    },
    "numpy.ma.array": {
     "line number": [
      655,
      658,
      665
     ]
    },
    "numpy.ma.masked_print_option": {
     "line number": [
      667
     ]
    },
    "numpy.ma.maximum": {
     "line number": [
      662
     ]
    },
    "numpy.ma.minimum": {
     "line number": [
      663
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      658,
      659,
      660,
      661,
      662,
      663,
      664,
      666
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      667
     ]
    },
    "str": {
     "line number": [
      667,
      667
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testSingleElementSubscript": {
  "data": {
   "lineno": 695,
   "symbols_in_volume": {
    "numpy.ma.array": {
     "line number": [
      696,
      697
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      698,
      699,
      700
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testTakeTransposeInnerOuter": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      483
     ]
    },
    "numpy.inner": {
     "line number": [
      489
     ]
    },
    "numpy.ma.arange": {
     "line number": [
      482
     ]
    },
    "numpy.ma.array": {
     "line number": [
      493
     ]
    },
    "numpy.ma.filled": {
     "line number": [
      489,
      489,
      491,
      491
     ]
    },
    "numpy.ma.inner": {
     "line number": [
      490
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      484,
      494
     ]
    },
    "numpy.ma.outer": {
     "line number": [
      492
     ]
    },
    "numpy.ma.take": {
     "line number": [
      488,
      495
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      487,
      488,
      489,
      491
     ]
    },
    "numpy.ma.transpose": {
     "line number": [
      487
     ]
    },
    "numpy.outer": {
     "line number": [
      491
     ]
    },
    "numpy.take": {
     "line number": [
      488
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      487,
      488,
      489,
      491,
      496,
      497,
      498
     ]
    },
    "numpy.transpose": {
     "line number": [
      487
     ]
    },
    "object": {
     "line number": [
      493
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testToPython": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      650
     ]
    },
    "ValueError": {
     "line number": [
      651,
      652
     ]
    },
    "bool": {
     "line number": [
      651,
      652
     ]
    },
    "float": {
     "line number": [
      647,
      649,
      650
     ]
    },
    "int": {
     "line number": [
      646,
      648
     ]
    },
    "numpy.ma.array": {
     "line number": [
      646,
      647,
      648,
      649,
      650,
      651,
      652
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      646,
      647,
      648,
      649
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      650,
      651,
      652
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_testUfuncs1": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      143,
      144,
      145
     ]
    },
    "numpy.absolute": {
     "line number": [
      151
     ]
    },
    "numpy.arccos": {
     "line number": [
      148
     ]
    },
    "numpy.arcsin": {
     "line number": [
      147
     ]
    },
    "numpy.arctan": {
     "line number": [
      149
     ]
    },
    "numpy.arctan2": {
     "line number": [
      150
     ]
    },
    "numpy.concatenate": {
     "line number": [
      159,
      160,
      161,
      162
     ]
    },
    "numpy.conjugate": {
     "line number": [
      158
     ]
    },
    "numpy.cos": {
     "line number": [
      136
     ]
    },
    "numpy.cosh": {
     "line number": [
      137
     ]
    },
    "numpy.equal": {
     "line number": [
      152
     ]
    },
    "numpy.errstate": {
     "line number": [
      142
     ]
    },
    "numpy.exp": {
     "line number": [
      146
     ]
    },
    "numpy.greater": {
     "line number": [
      155
     ]
    },
    "numpy.greater_equal": {
     "line number": [
      157
     ]
    },
    "numpy.less": {
     "line number": [
      154
     ]
    },
    "numpy.less_equal": {
     "line number": [
      156
     ]
    },
    "numpy.log": {
     "line number": [
      144
     ]
    },
    "numpy.log10": {
     "line number": [
      145
     ]
    },
    "numpy.ma.absolute": {
     "line number": [
      151
     ]
    },
    "numpy.ma.arccos": {
     "line number": [
      148
     ]
    },
    "numpy.ma.arcsin": {
     "line number": [
      147
     ]
    },
    "numpy.ma.arctan": {
     "line number": [
      149
     ]
    },
    "numpy.ma.arctan2": {
     "line number": [
      150
     ]
    },
    "numpy.ma.concatenate": {
     "line number": [
      159,
      160,
      161,
      162
     ]
    },
    "numpy.ma.conjugate": {
     "line number": [
      158
     ]
    },
    "numpy.ma.cos": {
     "line number": [
      136
     ]
    },
    "numpy.ma.cosh": {
     "line number": [
      137
     ]
    },
    "numpy.ma.equal": {
     "line number": [
      152
     ]
    },
    "numpy.ma.exp": {
     "line number": [
      146
     ]
    },
    "numpy.ma.greater": {
     "line number": [
      155
     ]
    },
    "numpy.ma.greater_equal": {
     "line number": [
      157
     ]
    },
    "numpy.ma.less": {
     "line number": [
      154
     ]
    },
    "numpy.ma.less_equal": {
     "line number": [
      156
     ]
    },
    "numpy.ma.log": {
     "line number": [
      144
     ]
    },
    "numpy.ma.log10": {
     "line number": [
      145
     ]
    },
    "numpy.ma.not_equal": {
     "line number": [
      153
     ]
    },
    "numpy.ma.sin": {
     "line number": [
      138
     ]
    },
    "numpy.ma.sinh": {
     "line number": [
      139
     ]
    },
    "numpy.ma.sqrt": {
     "line number": [
      143
     ]
    },
    "numpy.ma.tan": {
     "line number": [
      140
     ]
    },
    "numpy.ma.tanh": {
     "line number": [
      141
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      136,
      137,
      138,
      139,
      140,
      141,
      143,
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      160,
      161,
      162
     ]
    },
    "numpy.not_equal": {
     "line number": [
      153
     ]
    },
    "numpy.sin": {
     "line number": [
      138
     ]
    },
    "numpy.sinh": {
     "line number": [
      139
     ]
    },
    "numpy.sqrt": {
     "line number": [
      143
     ]
    },
    "numpy.tan": {
     "line number": [
      140
     ]
    },
    "numpy.tanh": {
     "line number": [
      141
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      136,
      137,
      138,
      139,
      140,
      141,
      143,
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      160,
      161,
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestMa.test_xtestCount": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      173
     ]
    },
    "numpy.intp": {
     "line number": [
      167,
      172,
      174
     ]
    },
    "numpy.ma.array": {
     "line number": [
      166,
      170
     ]
    },
    "numpy.ma.count": {
     "line number": [
      167,
      168,
      169,
      172,
      173,
      174,
      175,
      176,
      177
     ]
    },
    "numpy.ma.getmask": {
     "line number": [
      176
     ]
    },
    "numpy.ma.nomask": {
     "line number": [
      176
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      170,
      175,
      177
     ]
    },
    "numpy.ndarray": {
     "line number": [
      173
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      167,
      170,
      172,
      173,
      174,
      175,
      176,
      177
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      168,
      169
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestUfuncs": {
  "data": {
   "lineno": 703,
   "symbols_in_volume": {
    "object": {
     "line number": [
      703
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_old_ma.TestUfuncs.setup": {
  "data": {
   "lineno": 704,
   "symbols_in_volume": {
    "numpy.ma.array": {
     "line number": [
      705,
      706
     ]
    },
    "numpy.ma.tests.test_old_ma.pi": {
     "line number": [
      705,
      706
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestUfuncs.test_minmax": {
  "data": {
   "lineno": 752,
   "symbols_in_volume": {
    "numpy.ma.arange": {
     "line number": [
      753
     ]
    },
    "numpy.ma.masked_where": {
     "line number": [
      754
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      757,
      758,
      759,
      760
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      755,
      756
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestUfuncs.test_nonzero": {
  "data": {
   "lineno": 762,
   "symbols_in_volume": {
    "numpy.ma.array": {
     "line number": [
      764
     ]
    },
    "numpy.ma.nonzero": {
     "line number": [
      765
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      765
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      765
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestUfuncs.test_reduce": {
  "data": {
   "lineno": 745,
   "symbols_in_volume": {
    "numpy.ma.alltrue": {
     "line number": [
      747
     ]
    },
    "numpy.ma.product": {
     "line number": [
      750
     ]
    },
    "numpy.ma.sometrue": {
     "line number": [
      748
     ]
    },
    "numpy.ma.sum": {
     "line number": [
      749
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      747,
      748
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      749,
      750
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.TestUfuncs.test_testUfuncRegression": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      731
     ]
    },
    "getattr": {
     "line number": [
      730,
      732,
      733
     ]
    },
    "mf": {
     "line number": [
      741
     ]
    },
    "numpy.core.fromnumeric": {
     "line number": [
      732
     ]
    },
    "numpy.core.umath": {
     "line number": [
      730
     ]
    },
    "numpy.errstate": {
     "line number": [
      735
     ]
    },
    "numpy.ma": {
     "line number": [
      733
     ]
    },
    "numpy.ma.tests.test_old_ma.eq": {
     "line number": [
      742
     ]
    },
    "numpy.ma.tests.test_old_ma.eqmask": {
     "line number": [
      743
     ]
    },
    "numpy.seterr": {
     "line number": [
      737,
      739
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      742,
      743
     ]
    },
    "uf": {
     "line number": [
      740
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.absolute": {
  "data": {
   "shadows": "numpy.ma.absolute"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.add": {
  "data": {
   "shadows": "numpy.ma.add"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.all": {
  "data": {
   "shadows": "numpy.ma.all"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.allclose": {
  "data": {
   "shadows": "numpy.ma.allclose"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.allequal": {
  "data": {
   "shadows": "numpy.ma.allequal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.alltrue": {
  "data": {
   "shadows": "numpy.ma.alltrue"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.arange": {
  "data": {
   "shadows": "numpy.ma.arange"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.arccos": {
  "data": {
   "shadows": "numpy.ma.arccos"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.arcsin": {
  "data": {
   "shadows": "numpy.ma.arcsin"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.arctan": {
  "data": {
   "shadows": "numpy.ma.arctan"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.arctan2": {
  "data": {
   "shadows": "numpy.ma.arctan2"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.array": {
  "data": {
   "shadows": "numpy.ma.array"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.average": {
  "data": {
   "shadows": "numpy.ma.average"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.choose": {
  "data": {
   "shadows": "numpy.ma.choose"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.concatenate": {
  "data": {
   "shadows": "numpy.ma.concatenate"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.conjugate": {
  "data": {
   "shadows": "numpy.ma.conjugate"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.cos": {
  "data": {
   "shadows": "numpy.ma.cos"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.cosh": {
  "data": {
   "shadows": "numpy.ma.cosh"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.count": {
  "data": {
   "shadows": "numpy.ma.count"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.divide": {
  "data": {
   "shadows": "numpy.ma.divide"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.eq": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "numpy.ma.allclose": {
     "line number": [
      30
     ]
    },
    "print": {
     "line number": [
      32
     ]
    },
    "str": {
     "line number": [
      32,
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.eqmask": {
  "data": {
   "lineno": 855,
   "symbols_in_volume": {
    "numpy.ma.nomask": {
     "line number": [
      856,
      857,
      858,
      859
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_old_ma.equal": {
  "data": {
   "shadows": "numpy.ma.equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.exp": {
  "data": {
   "shadows": "numpy.ma.exp"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.filled": {
  "data": {
   "shadows": "numpy.ma.filled"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.fromnumeric": {
  "data": {
   "shadows": "numpy.core.fromnumeric"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.getmask": {
  "data": {
   "shadows": "numpy.ma.getmask"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.greater": {
  "data": {
   "shadows": "numpy.ma.greater"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.greater_equal": {
  "data": {
   "shadows": "numpy.ma.greater_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.inner": {
  "data": {
   "shadows": "numpy.ma.inner"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.isMaskedArray": {
  "data": {
   "shadows": "numpy.ma.isMaskedArray"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.less": {
  "data": {
   "shadows": "numpy.ma.less"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.less_equal": {
  "data": {
   "shadows": "numpy.ma.less_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.log": {
  "data": {
   "shadows": "numpy.ma.log"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.log10": {
  "data": {
   "shadows": "numpy.ma.log10"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.make_mask": {
  "data": {
   "shadows": "numpy.ma.make_mask"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked": {
  "data": {
   "shadows": "numpy.ma.masked"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_array": {
  "data": {
   "shadows": "numpy.ma.masked_array"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_equal": {
  "data": {
   "shadows": "numpy.ma.masked_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_greater": {
  "data": {
   "shadows": "numpy.ma.masked_greater"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_greater_equal": {
  "data": {
   "shadows": "numpy.ma.masked_greater_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_inside": {
  "data": {
   "shadows": "numpy.ma.masked_inside"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_less": {
  "data": {
   "shadows": "numpy.ma.masked_less"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_less_equal": {
  "data": {
   "shadows": "numpy.ma.masked_less_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_not_equal": {
  "data": {
   "shadows": "numpy.ma.masked_not_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_outside": {
  "data": {
   "shadows": "numpy.ma.masked_outside"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_print_option": {
  "data": {
   "shadows": "numpy.ma.masked_print_option"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_values": {
  "data": {
   "shadows": "numpy.ma.masked_values"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.masked_where": {
  "data": {
   "shadows": "numpy.ma.masked_where"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.maximum": {
  "data": {
   "shadows": "numpy.ma.maximum"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.minimum": {
  "data": {
   "shadows": "numpy.ma.minimum"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.multiply": {
  "data": {
   "shadows": "numpy.ma.multiply"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.nomask": {
  "data": {
   "shadows": "numpy.ma.nomask"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.nonzero": {
  "data": {
   "shadows": "numpy.ma.nonzero"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.not_equal": {
  "data": {
   "shadows": "numpy.ma.not_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.ones": {
  "data": {
   "shadows": "numpy.ma.ones"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.outer": {
  "data": {
   "shadows": "numpy.ma.outer"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.pi": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "numpy.ma.tests.test_old_ma.pickle": {
  "data": {
   "shadows": "numpy.core.numeric.pickle"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.product": {
  "data": {
   "shadows": "numpy.ma.product"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.put": {
  "data": {
   "shadows": "numpy.ma.put"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.ravel": {
  "data": {
   "shadows": "numpy.ma.ravel"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.repeat": {
  "data": {
   "shadows": "numpy.ma.repeat"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.resize": {
  "data": {
   "shadows": "numpy.ma.resize"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.shape": {
  "data": {
   "shadows": "numpy.ma.shape"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.sin": {
  "data": {
   "shadows": "numpy.ma.sin"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.sinh": {
  "data": {
   "shadows": "numpy.ma.sinh"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.sometrue": {
  "data": {
   "shadows": "numpy.ma.sometrue"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.sort": {
  "data": {
   "shadows": "numpy.ma.sort"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.sqrt": {
  "data": {
   "shadows": "numpy.ma.sqrt"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.subtract": {
  "data": {
   "shadows": "numpy.ma.subtract"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.sum": {
  "data": {
   "shadows": "numpy.ma.sum"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.take": {
  "data": {
   "shadows": "numpy.ma.take"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.tan": {
  "data": {
   "shadows": "numpy.ma.tan"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.tanh": {
  "data": {
   "shadows": "numpy.ma.tanh"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.transpose": {
  "data": {
   "shadows": "numpy.ma.transpose"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.umath": {
  "data": {
   "shadows": "numpy.core.umath"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.where": {
  "data": {
   "shadows": "numpy.ma.where"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_old_ma.zeros": {
  "data": {
   "shadows": "numpy.ma.zeros"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_regression": {
  "data": {},
  "type": "module"
 },
 "numpy.ma.tests.test_regression.MaskType": {
  "data": {
   "shadows": "numpy.ma.MaskType"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_regression.TestRegression": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "object": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_atleast_2d": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "numpy.atleast_2d": {
     "line number": [
      47
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      46
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      48,
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_ddof_corrcoef": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      70
     ]
    },
    "numpy.array": {
     "line number": [
      67
     ]
    },
    "numpy.ma.corrcoef": {
     "line number": [
      71,
      72
     ]
    },
    "numpy.ma.masked_equal": {
     "line number": [
      66
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      74
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_empty_list_on_structured": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "numpy.ma.MaskedArray": {
     "line number": [
      88
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_mask_not_backmangled": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "numpy.ma.MaskedArray": {
     "line number": [
      78
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      79,
      82,
      83,
      84
     ]
    },
    "numpy.tile": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_masked_array": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.ma.array": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_masked_array_create": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "numpy.ma.masked_array": {
     "line number": [
      12
     ]
    },
    "numpy.ma.nonzero": {
     "line number": [
      14
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_masked_array_multiply": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "numpy.ma.masked": {
     "line number": [
      31
     ]
    },
    "numpy.ma.zeros": {
     "line number": [
      30
     ]
    },
    "numpy.zeros": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_masked_array_repeat": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "numpy.ma.array": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_masked_array_repr_unicode": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "numpy.ma.array": {
     "line number": [
      42
     ]
    },
    "repr": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_mem_masked_where": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.ma.MaskType": {
     "line number": [
      24
     ]
    },
    "numpy.ma.masked_where": {
     "line number": [
      25
     ]
    },
    "numpy.zeros": {
     "line number": [
      23,
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_set_fill_value_unicode_py3": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "numpy.ma.masked_array": {
     "line number": [
      53
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.TestRegression.test_var_sets_maskedarray_scalar": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "float": {
     "line number": [
      60
     ]
    },
    "numpy.arange": {
     "line number": [
      59
     ]
    },
    "numpy.ma.array": {
     "line number": [
      59,
      60
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_regression.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_regression.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_regression.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_regression.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_regression.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_regression.masked_where": {
  "data": {
   "shadows": "numpy.ma.masked_where"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_regression.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_regression.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing": {
  "data": {
   "symbols_in_volume": {
    "numpy.ma.tests.test_subclassing.MSubArray": {
     "line number": [
      75
     ]
    },
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.ma.tests.test_subclassing.CSAIterator": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "next": {
     "line number": [
      110
     ]
    },
    "object": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_subclassing.CSAIterator.__getitem__": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      99
     ]
    },
    "numpy.ndarray": {
     "line number": [
      99
     ]
    },
    "type": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.CSAIterator.__init__": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.CSAIterator.__iter__": {
  "data": {
   "lineno": 94
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.CSAIterator.__next__": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "next": {
     "line number": [
      108
     ]
    },
    "type": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.CSAIterator.__setitem__": {
  "data": {
   "lineno": 104
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.ComplicatedSubArray": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__array_wrap__": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray": {
     "line number": [
      150
     ]
    },
    "numpy.multiply": {
     "line number": [
      151
     ]
    },
    "super": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      136
     ]
    },
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray": {
     "line number": [
      135,
      137
     ]
    },
    "numpy.ndarray": {
     "line number": [
      136
     ]
    },
    "super": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__repr__": {
  "data": {
   "lineno": 118
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__setitem__": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray": {
     "line number": [
      130
     ]
    },
    "super": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__str__": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.ComplicatedSubArray._validate_input": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      124
     ]
    },
    "isinstance": {
     "line number": [
      123
     ]
    },
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat": {
  "data": {
   "lineno": 144
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.MSubArray": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "numpy.ma.core.MaskedArray": {
     "line number": [
      61
     ]
    },
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      61
     ]
    },
    "property": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_subclassing.MSubArray.__new__": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "numpy.ma.core.MaskedArray.__new__": {
     "line number": [
      65
     ]
    },
    "numpy.ma.core.nomask": {
     "line number": [
      63
     ]
    },
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.MSubArray._get_series": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "numpy.ma.core.MaskedArray": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.MaskedArray": {
  "data": {
   "shadows": "numpy.ma.core.MaskedArray"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.SubArray": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_subclassing.SubArray.__add__": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      40
     ]
    },
    "super": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.SubArray.__array_finalize__": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "callable": {
     "line number": [
      33
     ]
    },
    "getattr": {
     "line number": [
      33,
      36
     ]
    },
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      33,
      35
     ]
    },
    "super": {
     "line number": [
      33,
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.SubArray.__iadd__": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      45
     ]
    },
    "super": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.SubArray.__new__": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "numpy.asanyarray": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.SubMaskedArray": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "numpy.ma.core.MaskedArray": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_subclassing.SubMaskedArray.__new__": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "numpy.ma.tests.test_subclassing.SubMaskedArray": {
     "line number": [
      56
     ]
    },
    "super": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "object": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.setup": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      161
     ]
    },
    "numpy.ma.tests.test_subclassing.msubarray": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_attributepropagation": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      238
     ]
    },
    "isinstance": {
     "line number": [
      214,
      215,
      216,
      220,
      221,
      222,
      226,
      227,
      228
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      214,
      220,
      226
     ]
    },
    "numpy.ma.core.arange": {
     "line number": [
      209
     ]
    },
    "numpy.ma.core.array": {
     "line number": [
      209
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      210,
      237
     ]
    },
    "numpy.ma.tests.test_subclassing.MSubArray": {
     "line number": [
      215,
      221,
      227
     ]
    },
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      216,
      222,
      228
     ]
    },
    "numpy.ma.tests.test_subclassing.msubarray": {
     "line number": [
      211
     ]
    },
    "numpy.ma.tests.test_subclassing.subarray": {
     "line number": [
      210,
      236
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      217,
      232,
      234,
      239
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      214,
      215,
      216,
      220,
      221,
      222,
      223,
      226,
      227,
      228,
      229,
      238
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_data_subclassing": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      171,
      173
     ]
    },
    "numpy.arange": {
     "line number": [
      167
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      171
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      170
     ]
    },
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      169,
      173
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      172
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      171,
      173
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_binary_operations": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      191,
      192,
      195,
      196,
      197,
      198
     ]
    },
    "numpy.ma.core.add": {
     "line number": [
      191,
      192,
      194,
      195
     ]
    },
    "numpy.ma.core.add.outer": {
     "line number": [
      196
     ]
    },
    "numpy.ma.core.hypot": {
     "line number": [
      197,
      198
     ]
    },
    "numpy.ma.tests.test_subclassing.msubarray": {
     "line number": [
      191,
      192,
      196,
      197,
      198
     ]
    },
    "numpy.ma.tests.test_subclassing.subarray": {
     "line number": [
      195
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      194
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      191,
      192,
      195,
      196,
      197,
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_binary_operations2": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      204,
      205
     ]
    },
    "numpy.ma.core.divide": {
     "line number": [
      204,
      205,
      206,
      206
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      203
     ]
    },
    "numpy.ma.tests.test_subclassing.msubarray": {
     "line number": [
      204,
      205
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      206
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      204,
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_unary_operations": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      184
     ]
    },
    "numpy.errstate": {
     "line number": [
      183
     ]
    },
    "numpy.log": {
     "line number": [
      185
     ]
    },
    "numpy.ma.core.log": {
     "line number": [
      184,
      185
     ]
    },
    "numpy.ma.tests.test_subclassing.msubarray": {
     "line number": [
      184
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      185
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_maskedarray_subclassing": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      178
     ]
    },
    "numpy.ma.tests.test_subclassing.subarray": {
     "line number": [
      178
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_pure_subclass_info_preservation": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "numpy.ma.tests.test_subclassing.SubMaskedArray": {
     "line number": [
      344,
      345
     ]
    },
    "numpy.subtract": {
     "line number": [
      346
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      347,
      348,
      350,
      351
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_items": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      293,
      295,
      296,
      300,
      301
     ]
    },
    "isinstance": {
     "line number": [
      275,
      276,
      277,
      280,
      281,
      283,
      284,
      287,
      289
     ]
    },
    "numpy.arange": {
     "line number": [
      270
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      282,
      288
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      272
     ]
    },
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray": {
     "line number": [
      271,
      275,
      276,
      277,
      280,
      281,
      283,
      284,
      287,
      289
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      275,
      276,
      277,
      280,
      281,
      282,
      283,
      284,
      287,
      288,
      289
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      293,
      295,
      296,
      300,
      301
     ]
    },
    "slice": {
     "line number": [
      296,
      301
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_nomask_items": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      310,
      311,
      313,
      314
     ]
    },
    "numpy.arange": {
     "line number": [
      306
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      308
     ]
    },
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray": {
     "line number": [
      307,
      310,
      311,
      313,
      314
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      310,
      311,
      313,
      314
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_repr": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      319
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      320,
      323
     ]
    },
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      322,
      325
     ]
    },
    "numpy.ma.tests.test_subclassing.assert_startswith": {
     "line number": [
      321,
      324
     ]
    },
    "repr": {
     "line number": [
      321,
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_str": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      336
     ]
    },
    "numpy.arange": {
     "line number": [
      330
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      332,
      338
     ]
    },
    "numpy.ma.core.masked_print_option": {
     "line number": [
      337
     ]
    },
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray": {
     "line number": [
      335
     ]
    },
    "numpy.ma.tests.test_subclassing.SubArray": {
     "line number": [
      331
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      333,
      339
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      336
     ]
    },
    "str": {
     "line number": [
      333,
      339
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.TestSubclassing.test_subclasspreservation": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      249,
      250,
      254,
      255,
      259,
      264
     ]
    },
    "numpy.arange": {
     "line number": [
      243
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      250,
      255
     ]
    },
    "numpy.ma.core.asanyarray": {
     "line number": [
      263
     ]
    },
    "numpy.ma.core.asarray": {
     "line number": [
      253
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      248,
      258
     ]
    },
    "numpy.ma.tests.test_subclassing.MSubArray": {
     "line number": [
      246,
      249,
      254,
      259,
      264
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      251,
      256,
      260,
      261,
      265,
      266
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      249,
      250,
      254,
      255,
      259,
      264
     ]
    },
    "zip": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.add": {
  "data": {
   "shadows": "numpy.ma.core.add"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.arange": {
  "data": {
   "shadows": "numpy.ma.core.arange"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.array": {
  "data": {
   "shadows": "numpy.ma.core.array"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.asanyarray": {
  "data": {
   "shadows": "numpy.ma.core.asanyarray"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.asarray": {
  "data": {
   "shadows": "numpy.ma.core.asarray"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.assert_equal": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_equal"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.assert_startswith": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "len": {
     "line number": [
      22
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.tests.test_subclassing.divide": {
  "data": {
   "shadows": "numpy.ma.core.divide"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.hypot": {
  "data": {
   "shadows": "numpy.ma.core.hypot"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.log": {
  "data": {
   "shadows": "numpy.ma.core.log"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.masked": {
  "data": {
   "shadows": "numpy.ma.core.masked"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.masked_array": {
  "data": {
   "shadows": "numpy.ma.core.masked_array"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.msubarray": {
  "data": {
   "lineno": 75
  },
  "type": "constant"
 },
 "numpy.ma.tests.test_subclassing.nomask": {
  "data": {
   "shadows": "numpy.ma.core.nomask"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.tests.test_subclassing.subarray": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "numpy.ma.timer_comparison": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      426
     ]
    },
    "eval": {
     "line number": [
      439
     ]
    },
    "numpy.ma.timer_comparison.cur": {
     "line number": [
      440,
      440
     ]
    },
    "numpy.ma.timer_comparison.func": {
     "line number": [
      436
     ]
    },
    "numpy.ma.timer_comparison.setup_base": {
     "line number": [
      430
     ]
    },
    "numpy.ma.timer_comparison.setup_cur": {
     "line number": [
      436
     ]
    },
    "numpy.ma.timer_comparison.timeit": {
     "line number": [
      436
     ]
    },
    "numpy.pi": {
     "line number": [
      15
     ]
    },
    "numpy.seterr": {
     "line number": [
      13
     ]
    },
    "numpy.sort": {
     "line number": [
      437
     ]
    },
    "print": {
     "line number": [
      438,
      439,
      440
     ]
    },
    "range": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.ma.timer_comparison.ModuleTester": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "object": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.ma.timer_comparison.ModuleTester.__init__": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      49
     ]
    },
    "id": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.assert_array_compare": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      105,
      107
     ]
    },
    "bool": {
     "line number": [
      90
     ]
    },
    "comparison": {
     "line number": [
      87
     ]
    },
    "isinstance": {
     "line number": [
      67,
      73,
      90
     ]
    },
    "len": {
     "line number": [
      98
     ]
    },
    "numpy.float_": {
     "line number": [
      66,
      72
     ]
    },
    "numpy.isnan": {
     "line number": [
      68,
      69,
      74,
      75
     ]
    },
    "numpy.ndarray": {
     "line number": [
      67,
      73
     ]
    },
    "numpy.testing.build_err_msg": {
     "line number": [
      80,
      99,
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.assert_array_equal": {
  "data": {
   "lineno": 109
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.test_0": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      122
     ]
    },
    "numpy.ma.timer_comparison.pi": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.test_1": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      143,
      144,
      152
     ]
    },
    "len": {
     "line number": [
      144,
      152
     ]
    },
    "numpy.array": {
     "line number": [
      132,
      133
     ]
    },
    "numpy.ma.timer_comparison.pi": {
     "line number": [
      132
     ]
    },
    "numpy.where": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.test_2": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      180
     ]
    },
    "numpy.array": {
     "line number": [
      159,
      183
     ]
    },
    "object": {
     "line number": [
      182,
      183
     ]
    },
    "repr": {
     "line number": [
      165
     ]
    },
    "str": {
     "line number": [
      164
     ]
    },
    "type": {
     "line number": [
      167,
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.test_3": {
  "data": {
   "lineno": 196
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.test_4": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      221
     ]
    },
    "numpy.inner": {
     "line number": [
      227
     ]
    },
    "numpy.outer": {
     "line number": [
      229
     ]
    },
    "numpy.take": {
     "line number": [
      226
     ]
    },
    "numpy.transpose": {
     "line number": [
      225
     ]
    },
    "object": {
     "line number": [
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.test_5": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": {
    "numpy.float_": {
     "line number": [
      284
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.test_6": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "numpy.float_": {
     "line number": [
      295,
      297,
      300,
      308,
      309,
      312,
      320,
      321,
      324,
      332,
      333,
      336
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.test_7": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      366
     ]
    },
    "getattr": {
     "line number": [
      365,
      367,
      368
     ]
    },
    "mf": {
     "line number": [
      371
     ]
    },
    "numpy.core.fromnumeric": {
     "line number": [
      367
     ]
    },
    "numpy.ma.timer_comparison.pi": {
     "line number": [
      343,
      344
     ]
    },
    "uf": {
     "line number": [
      370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.test_99": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": {
    "numpy.add.reduce": {
     "line number": [
      399
     ]
    },
    "numpy.arange": {
     "line number": [
      399,
      400
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.ModuleTester.test_A": {
  "data": {
   "lineno": 420
  },
  "type": "function"
 },
 "numpy.ma.timer_comparison.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.ma.timer_comparison.build_err_msg": {
  "data": {
   "shadows": "numpy.testing.build_err_msg"
  },
  "type": "import"
 },
 "numpy.ma.timer_comparison.cur": {
  "data": {
   "lineno": 437
  },
  "type": "constant"
 },
 "numpy.ma.timer_comparison.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.timer_comparison.float_": {
  "data": {
   "shadows": "numpy.float_"
  },
  "type": "import"
 },
 "numpy.ma.timer_comparison.fromnumeric": {
  "data": {
   "shadows": "numpy.core.fromnumeric"
  },
  "type": "import"
 },
 "numpy.ma.timer_comparison.func": {
  "data": {
   "lineno": 435
  },
  "type": "constant"
 },
 "numpy.ma.timer_comparison.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.ma.timer_comparison.pi": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.ma.timer_comparison.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.timer_comparison.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "numpy.ma.timer_comparison.setup_base": {
  "data": {
   "lineno": 427
  },
  "type": "constant"
 },
 "numpy.ma.timer_comparison.setup_cur": {
  "data": {
   "lineno": 430
  },
  "type": "constant"
 },
 "numpy.ma.timer_comparison.timeit": {
  "data": {
   "shadows": "timeit"
  },
  "type": "import"
 },
 "numpy.ma.version": {
  "data": {
   "symbols_in_volume": {
    "int": {
     "line number": [
      14
     ]
    },
    "max": {
     "line number": [
      14
     ]
    },
    "numpy.ma.version.release": {
     "line number": [
      9
     ]
    },
    "numpy.ma.version.revision": {
     "line number": [
      14
     ]
    },
    "numpy.ma.version.version": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.ma.version.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.ma.version.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.ma.version.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.ma.version.release": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.ma.version.revision": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.ma.version.version": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.matlib": {
  "data": {
   "symbols_in_volume": {
    "numpy.__all__": {
     "line number": [
      10
     ]
    },
    "numpy.__version__": {
     "line number": [
      8
     ]
    },
    "numpy.matlib.__all__": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.matlib.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "numpy.matlib.__version__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "numpy.matlib.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.matlib.asmatrix": {
  "data": {
   "shadows": "numpy.matrixlib.defmatrix.asmatrix"
  },
  "type": "import"
 },
 "numpy.matlib.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.matlib.empty": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "numpy.matrixlib.defmatrix.matrix": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matlib.eye": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "float": {
     "line number": [
      176
     ]
    },
    "numpy.eye": {
     "line number": [
      218
     ]
    },
    "numpy.matrixlib.defmatrix.asmatrix": {
     "line number": [
      218
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matlib.identity": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "array": {
     "line number": [
      171
     ]
    },
    "numpy.matlib.empty": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matlib.matrix": {
  "data": {
   "shadows": "numpy.matrixlib.defmatrix.matrix"
  },
  "type": "import"
 },
 "numpy.matlib.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.matlib.ones": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "numpy.matrixlib.defmatrix.matrix": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matlib.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.matlib.rand": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      261
     ]
    },
    "numpy.matrixlib.defmatrix.asmatrix": {
     "line number": [
      263
     ]
    },
    "numpy.random.rand": {
     "line number": [
      263
     ]
    },
    "tuple": {
     "line number": [
      261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matlib.randn": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      311
     ]
    },
    "numpy.matrixlib.defmatrix.asmatrix": {
     "line number": [
      313
     ]
    },
    "numpy.random.randn": {
     "line number": [
      313
     ]
    },
    "tuple": {
     "line number": [
      311
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matlib.repmat": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "asanyarray": {
     "line number": [
      352
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matlib.zeros": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "numpy.matrixlib.defmatrix.matrix": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      11
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      11,
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.matrixlib.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.matrixlib.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "numpy.matrixlib.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix": {
  "data": {
   "symbols_in_volume": {
    "numpy.matrixlib.defmatrix.asmatrix": {
     "line number": [
      1109
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.matrixlib.defmatrix.N": {
  "data": {
   "shadows": "numpy.core.numeric"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "numpy.matrixlib.defmatrix._convert_from_string": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      32
     ]
    },
    "len": {
     "line number": [
      30,
      31
     ]
    },
    "map": {
     "line number": [
      28
     ]
    },
    "numpy.matrixlib.defmatrix.ast": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix._from_string": {
  "data": {
   "lineno": 1006,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      1020,
      1023,
      1024
     ]
    },
    "numpy.core.numeric.concatenate": {
     "line number": [
      1027,
      1028
     ]
    },
    "str.split": {
     "line number": [
      1007
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix.asmatrix": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.core.overrides.set_module": {
     "line number": [
      38
     ]
    },
    "numpy.matrixlib.defmatrix.matrix": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.ast": {
  "data": {
   "shadows": "ast"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix.bmat": {
  "data": {
   "lineno": 1031,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1085,
      1097,
      1101,
      1106
     ]
    },
    "list": {
     "line number": [
      1097
     ]
    },
    "numpy.core.numeric.concatenate": {
     "line number": [
      1102,
      1104,
      1105
     ]
    },
    "numpy.core.numeric.ndarray": {
     "line number": [
      1101,
      1106
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      1031
     ]
    },
    "numpy.matrixlib.defmatrix._from_string": {
     "line number": [
      1095
     ]
    },
    "numpy.matrixlib.defmatrix.matrix": {
     "line number": [
      1095,
      1102,
      1105,
      1107
     ]
    },
    "numpy.matrixlib.defmatrix.sys": {
     "line number": [
      1088
     ]
    },
    "str": {
     "line number": [
      1085
     ]
    },
    "tuple": {
     "line number": [
      1097
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.concatenate": {
  "data": {
   "shadows": "numpy.core.numeric.concatenate"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix.func": {
  "data": {
   "shadows": "numpy.dual.pinv"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix.isscalar": {
  "data": {
   "shadows": "numpy.core.numeric.isscalar"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix.mat": {
  "data": {
   "lineno": 1109
  },
  "type": "constant"
 },
 "numpy.matrixlib.defmatrix.matrix": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray": {
     "line number": [
      75
     ]
    },
    "numpy.core.overrides.set_module": {
     "line number": [
      74
     ]
    },
    "property": {
     "line number": [
      1000,
      1001,
      1002,
      1003,
      1004
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.defmatrix.matrix.__array_finalize__": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      182
     ]
    },
    "isinstance": {
     "line number": [
      171
     ]
    },
    "len": {
     "line number": [
      177
     ]
    },
    "numpy.matrixlib.defmatrix.matrix": {
     "line number": [
      171
     ]
    },
    "tuple": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.__getitem__": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      209
     ]
    },
    "isinstance": {
     "line number": [
      199
     ]
    },
    "len": {
     "line number": [
      208
     ]
    },
    "numpy.core.numeric.isscalar": {
     "line number": [
      211
     ]
    },
    "numpy.core.numeric.ndarray": {
     "line number": [
      199
     ]
    },
    "numpy.core.numeric.ndarray.__getitem__": {
     "line number": [
      195
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.__imul__": {
  "data": {
   "lineno": 228
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.__ipow__": {
  "data": {
   "lineno": 235
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.__mul__": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      223
     ]
    },
    "hasattr": {
     "line number": [
      221
     ]
    },
    "isinstance": {
     "line number": [
      218
     ]
    },
    "list": {
     "line number": [
      218
     ]
    },
    "numpy.core.numeric.dot": {
     "line number": [
      220,
      222
     ]
    },
    "numpy.core.numeric.isscalar": {
     "line number": [
      221
     ]
    },
    "numpy.core.numeric.ndarray": {
     "line number": [
      218
     ]
    },
    "numpy.matrixlib.defmatrix.asmatrix": {
     "line number": [
      220
     ]
    },
    "tuple": {
     "line number": [
      218
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.__new__": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "PendingDeprecationWarning": {
     "line number": [
      123
     ]
    },
    "ValueError": {
     "line number": [
      151
     ]
    },
    "isinstance": {
     "line number": [
      124,
      132,
      143
     ]
    },
    "numpy.core.numeric.array": {
     "line number": [
      147
     ]
    },
    "numpy.core.numeric.dtype": {
     "line number": [
      136
     ]
    },
    "numpy.core.numeric.ndarray": {
     "line number": [
      132
     ]
    },
    "numpy.core.numeric.ndarray.__new__": {
     "line number": [
      164
     ]
    },
    "numpy.matrixlib.defmatrix._convert_from_string": {
     "line number": [
      144
     ]
    },
    "numpy.matrixlib.defmatrix.matrix": {
     "line number": [
      124
     ]
    },
    "numpy.matrixlib.defmatrix.warnings": {
     "line number": [
      118
     ]
    },
    "str": {
     "line number": [
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.__pow__": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "numpy.linalg.matrix_power": {
     "line number": [
      233
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.__rmul__": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "numpy.core.numeric.dot": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.__rpow__": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix._align": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix._collapse": {
  "data": {
   "lineno": 255
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.all": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.all": {
     "line number": [
      611
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.any": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.any": {
     "line number": [
      571
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.argmax": {
  "data": {
   "lineno": 648,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.argmax": {
     "line number": [
      685
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.argmin": {
  "data": {
   "lineno": 722,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.argmin": {
     "line number": [
      759
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.flatten": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.flatten": {
     "line number": [
      413
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.getA": {
  "data": {
   "lineno": 838
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.getA1": {
  "data": {
   "lineno": 867
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.getH": {
  "data": {
   "lineno": 966,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      995
     ]
    },
    "numpy.core.numeric.complexfloating": {
     "line number": [
      995
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.getI": {
  "data": {
   "lineno": 794,
   "symbols_in_volume": {
    "numpy.core.numeric": {
     "line number": [
      831,
      832
     ]
    },
    "numpy.dual.pinv": {
     "line number": [
      836
     ]
    },
    "numpy.matrixlib.defmatrix.asmatrix": {
     "line number": [
      836
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.getT": {
  "data": {
   "lineno": 934
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.max": {
  "data": {
   "lineno": 613,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.max": {
     "line number": [
      646
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.mean": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.mean": {
     "line number": [
      447
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.min": {
  "data": {
   "lineno": 687,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.min": {
     "line number": [
      720
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.prod": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.prod": {
     "line number": [
      548
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.ptp": {
  "data": {
   "lineno": 761,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.ptp": {
     "line number": [
      792
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.ravel": {
  "data": {
   "lineno": 895,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.ravel": {
     "line number": [
      931
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.squeeze": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.squeeze": {
     "line number": [
      374
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.std": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.std": {
     "line number": [
      481
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.sum": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.sum": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.tolist": {
  "data": {
   "lineno": 266
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix.var": {
  "data": {
   "lineno": 483,
   "symbols_in_volume": {
    "numpy.core.numeric.ndarray.var": {
     "line number": [
      515
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.defmatrix.matrix_power": {
  "data": {
   "shadows": "numpy.linalg.matrix_power"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix.set_module": {
  "data": {
   "shadows": "numpy.core.overrides.set_module"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.matrixlib.defmatrix.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.matrixlib.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.matrixlib.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.matrixlib.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      10
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      13
     ]
    },
    "numpy.matrixlib.setup.config": {
     "line number": [
      13
     ]
    },
    "numpy.matrixlib.setup.configuration": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.matrixlib.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.matrixlib.setup.config": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.matrixlib.setup.configuration": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.matrixlib.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.matrixlib.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.matrixlib.test": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "numpy.matrixlib.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.matrixlib.tests.test_defmatrix": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestAlgebra": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "object": {
     "line number": [
      218
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_basic": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": {
    "numpy.allclose": {
     "line number": [
      227,
      233,
      236,
      237,
      238,
      242
     ]
    },
    "numpy.array": {
     "line number": [
      222
     ]
    },
    "numpy.dot": {
     "line number": [
      228,
      234,
      236
     ]
    },
    "numpy.identity": {
     "line number": [
      225,
      231
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      230
     ]
    },
    "numpy.matrix": {
     "line number": [
      223,
      240
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      227,
      233,
      236,
      237,
      238,
      242
     ]
    },
    "range": {
     "line number": [
      226,
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_notimplemented": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      269,
      273
     ]
    },
    "numpy.matrix": {
     "line number": [
      265
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      269,
      273
     ]
    },
    "object": {
     "line number": [
      274
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_pow": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      254,
      255
     ]
    },
    "numpy.eye": {
     "line number": [
      255
     ]
    },
    "numpy.matrix": {
     "line number": [
      246
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      253,
      254,
      255
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_scalar_type_pow": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": {
    "numpy.int8": {
     "line number": [
      259
     ]
    },
    "numpy.matrix": {
     "line number": [
      258
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      261
     ]
    },
    "numpy.uint8": {
     "line number": [
      259
     ]
    },
    "scalar_t": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestCasting": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "object": {
     "line number": [
      199
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestCasting.test_basic": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      208,
      209,
      215
     ]
    },
    "numpy.arange": {
     "line number": [
      201
     ]
    },
    "numpy.complex128": {
     "line number": [
      212,
      214
     ]
    },
    "numpy.float64": {
     "line number": [
      205,
      207
     ]
    },
    "numpy.matrix": {
     "line number": [
      202
     ]
    },
    "numpy.ones": {
     "line number": [
      205,
      212
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      207,
      208,
      209,
      214,
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestCtor": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "object": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestCtor.test_basic": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      23,
      31,
      32,
      36
     ]
    },
    "numpy.arange": {
     "line number": [
      38
     ]
    },
    "numpy.array": {
     "line number": [
      21,
      27,
      34
     ]
    },
    "numpy.bmat": {
     "line number": [
      25,
      26,
      36
     ]
    },
    "numpy.matrix": {
     "line number": [
      22,
      35,
      39
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      23,
      31,
      32,
      36,
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestCtor.test_bmat_nondefault_str": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      59
     ]
    },
    "numpy.all": {
     "line number": [
      57,
      58,
      61,
      63
     ]
    },
    "numpy.array": {
     "line number": [
      47,
      48,
      49,
      53
     ]
    },
    "numpy.bmat": {
     "line number": [
      57,
      58,
      59,
      61,
      62
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      57,
      58,
      60,
      63
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestCtor.test_exceptions": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      44
     ]
    },
    "numpy.matrix": {
     "line number": [
      44
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestIndexing": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": {
    "object": {
     "line number": [
      319
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestIndexing.test_basic": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": {
    "float": {
     "line number": [
      321,
      322
     ]
    },
    "numpy.asmatrix": {
     "line number": [
      321
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      325
     ]
    },
    "numpy.zeros": {
     "line number": [
      321,
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestMatrixReturn": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": {
    "object": {
     "line number": [
      277
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestMatrixReturn.test_instance_methods": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "collections.Callable": {
     "line number": [
      302
     ]
    },
    "dir": {
     "line number": [
      298
     ]
    },
    "f": {
     "line number": [
      310
     ]
    },
    "getattr": {
     "line number": [
      301
     ]
    },
    "isinstance": {
     "line number": [
      302
     ]
    },
    "numpy.array": {
     "line number": [
      287
     ]
    },
    "numpy.matrix": {
     "line number": [
      279,
      311,
      312,
      313,
      314
     ]
    },
    "numpy.ndarray": {
     "line number": [
      315,
      316
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      311,
      312,
      313,
      315,
      316
     ]
    },
    "type": {
     "line number": [
      311,
      312,
      313,
      315,
      316
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      329
     ]
    },
    "object": {
     "line number": [
      328
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_array_from_matrix_list": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      338
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      339
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_array_to_list": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      343
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_boolean_indexing": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      381
     ]
    },
    "numpy.array": {
     "line number": [
      384,
      385
     ]
    },
    "numpy.asmatrix": {
     "line number": [
      383
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      384,
      385
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_dimesions": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      334
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_fancy_indexing": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      348,
      351,
      354
     ]
    },
    "numpy.matrix": {
     "line number": [
      348,
      349,
      351,
      352,
      354,
      355
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      348,
      351,
      354
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      349,
      352,
      355
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_list_indexing": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      388
     ]
    },
    "numpy.asmatrix": {
     "line number": [
      390
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      391,
      392
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_matrix_element": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      358,
      359,
      364
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      359,
      360,
      361,
      362,
      365,
      366,
      367
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_row_column_indexing": {
  "data": {
   "lineno": 373,
   "symbols_in_volume": {
    "numpy.asmatrix": {
     "line number": [
      374
     ]
    },
    "numpy.eye": {
     "line number": [
      374
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      375,
      376,
      377,
      378
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_scalar_indexing": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": {
    "float": {
     "line number": [
      370
     ]
    },
    "numpy.asmatrix": {
     "line number": [
      370
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      371
     ]
    },
    "numpy.zeros": {
     "line number": [
      370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestPower": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": {
    "object": {
     "line number": [
      395
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestPower.test_list": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": {
    "numpy.linalg.matrix_power": {
     "line number": [
      403
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      403
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestPower.test_returntype": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      397
     ]
    },
    "numpy.linalg.matrix_power": {
     "line number": [
      398,
      400
     ]
    },
    "numpy.matrix": {
     "line number": [
      400
     ]
    },
    "numpy.matrixlib.mat": {
     "line number": [
      399
     ]
    },
    "numpy.ndarray": {
     "line number": [
      398
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      398,
      400
     ]
    },
    "type": {
     "line number": [
      398,
      400
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "object": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_asmatrix": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      180
     ]
    },
    "numpy.asmatrix": {
     "line number": [
      181
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_basic": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      138,
      139,
      140,
      145,
      146
     ]
    },
    "numpy.allclose": {
     "line number": [
      137,
      144
     ]
    },
    "numpy.array": {
     "line number": [
      134,
      138,
      139,
      145,
      146
     ]
    },
    "numpy.linalg.inv": {
     "line number": [
      137,
      144
     ]
    },
    "numpy.matrix": {
     "line number": [
      136,
      143
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      137,
      138,
      139,
      140,
      144,
      145,
      146
     ]
    },
    "numpy.transpose": {
     "line number": [
      138,
      139,
      145,
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_comparisons": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      176,
      177
     ]
    },
    "numpy.all": {
     "line number": [
      159,
      160,
      162,
      163,
      164,
      168,
      169,
      172,
      174,
      176,
      177
     ]
    },
    "numpy.any": {
     "line number": [
      161,
      165,
      167,
      170,
      173
     ]
    },
    "numpy.arange": {
     "line number": [
      156
     ]
    },
    "numpy.matrix": {
     "line number": [
      157,
      158,
      160,
      161
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      159,
      160,
      161,
      162,
      163,
      164,
      165,
      167,
      168,
      169,
      170,
      172,
      173,
      174,
      176,
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_make_bool_matrix_from_str": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      195,
      196
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_max": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      100,
      102,
      103,
      106,
      107
     ]
    },
    "numpy.max": {
     "line number": [
      105,
      106,
      107
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      101,
      102,
      103,
      105,
      106,
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_min": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      110,
      112,
      113,
      116,
      117
     ]
    },
    "numpy.min": {
     "line number": [
      115,
      116,
      117
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      111,
      112,
      113,
      115,
      116,
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_noaxis": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      186,
      187,
      188
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      187,
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_pinv": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      149
     ]
    },
    "numpy.matrix": {
     "line number": [
      149,
      150
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_prod": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      87,
      89,
      90,
      93,
      94,
      96
     ]
    },
    "numpy.prod": {
     "line number": [
      92,
      93,
      94
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      97
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      88,
      89,
      90,
      92,
      93,
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_ptp": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      122,
      123
     ]
    },
    "numpy.arange": {
     "line number": [
      120
     ]
    },
    "numpy.array": {
     "line number": [
      122,
      123
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      121,
      122,
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_repr": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      191
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      192
     ]
    },
    "repr": {
     "line number": [
      192
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_sum": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      71,
      75,
      76
     ]
    },
    "numpy.sum": {
     "line number": [
      82,
      83,
      84
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      78,
      79,
      82,
      83
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      80,
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_var": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      126
     ]
    },
    "numpy.matrix": {
     "line number": [
      127
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      128,
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestShape": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      408
     ]
    },
    "numpy.matrix": {
     "line number": [
      409
     ]
    },
    "object": {
     "line number": [
      406
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestShape.test_array_memory_sharing": {
  "data": {
   "lineno": 446,
   "symbols_in_volume": {
    "numpy.may_share_memory": {
     "line number": [
      447,
      448
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      447,
      448
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestShape.test_expand_dims_matrix": {
  "data": {
   "lineno": 454,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      460
     ]
    },
    "numpy.arange": {
     "line number": [
      457
     ]
    },
    "numpy.expand_dims": {
     "line number": [
      458
     ]
    },
    "numpy.matrix": {
     "line number": [
      457,
      460
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      460
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      459
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestShape.test_matrix_memory_sharing": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": {
    "numpy.may_share_memory": {
     "line number": [
      451,
      452
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      451,
      452
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestShape.test_matrix_ravel_order": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      440
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      441,
      442,
      443,
      444
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestShape.test_member_flatten": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      424,
      425
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestShape.test_member_ravel": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      420,
      421
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestShape.test_numpy_ravel": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": {
    "numpy.ravel": {
     "line number": [
      416,
      417
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      416,
      417
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestShape.test_numpy_ravel_order": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      428
     ]
    },
    "numpy.matrix": {
     "line number": [
      433
     ]
    },
    "numpy.ravel": {
     "line number": [
      429,
      430,
      431,
      432,
      434,
      435,
      436,
      437
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      429,
      430,
      431,
      432,
      434,
      435,
      436,
      437
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.TestShape.test_shape": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      412,
      413
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_defmatrix.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.asmatrix": {
  "data": {
   "shadows": "numpy.asmatrix"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.bmat": {
  "data": {
   "shadows": "numpy.bmat"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.collections_abc": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.linalg": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.mat": {
  "data": {
   "shadows": "numpy.matrixlib.mat"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.matrix": {
  "data": {
   "shadows": "numpy.matrix"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.matrix_power": {
  "data": {
   "shadows": "numpy.linalg.matrix_power"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_defmatrix.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction": {
  "data": {},
  "type": "module"
 },
 "numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": {
    "object": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      308
     ]
    },
    "numpy.array": {
     "line number": [
      305,
      306
     ]
    },
    "numpy.matrix": {
     "line number": [
      302,
      303
     ]
    },
    "numpy.r_": {
     "line number": [
      299,
      300,
      308
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      302,
      303,
      305,
      306
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      308
     ]
    },
    "type": {
     "line number": [
      302,
      303
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix_builder": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      316,
      317,
      318,
      319
     ]
    },
    "numpy.bmat": {
     "line number": [
      321
     ]
    },
    "numpy.r_": {
     "line number": [
      320
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      323,
      324
     ]
    },
    "type": {
     "line number": [
      324,
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix_scalar": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      313
     ]
    },
    "numpy.matrix": {
     "line number": [
      312
     ]
    },
    "numpy.r_": {
     "line number": [
      311
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      312,
      313
     ]
    },
    "type": {
     "line number": [
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.assert_raises_regex": {
  "data": {
   "shadows": "numpy.testing.assert_raises_regex"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.like_function": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "numpy.empty_like": {
     "line number": [
      120
     ]
    },
    "numpy.matrix": {
     "line number": [
      119,
      122,
      125
     ]
    },
    "numpy.ones_like": {
     "line number": [
      120
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      122,
      125
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      120
     ]
    },
    "type": {
     "line number": [
      122,
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.test_apply_along_axis_matrix": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      275,
      279
     ]
    },
    "numpy.apply_along_axis": {
     "line number": [
      274,
      278
     ]
    },
    "numpy.matrix": {
     "line number": [
      271,
      272,
      275,
      279
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      275,
      279
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      276,
      280
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_apply_along_axis_matrix.double": {
  "data": {
   "lineno": 268
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_array_almost_equal_matrix": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": {
    "assert_func": {
     "line number": [
      360,
      362,
      363
     ]
    },
    "numpy.array": {
     "line number": [
      361
     ]
    },
    "numpy.inf": {
     "line number": [
      355,
      356,
      357
     ]
    },
    "numpy.matrix": {
     "line number": [
      353,
      354,
      355,
      356,
      357
     ]
    },
    "numpy.nan": {
     "line number": [
      354,
      356,
      357
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      358
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      358
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_array_astype": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      131,
      138,
      144
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      133,
      143,
      144
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      137,
      138,
      142
     ]
    },
    "type": {
     "line number": [
      138,
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_array_equal_error_message_matrix": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      331,
      343,
      346
     ]
    },
    "numpy.array": {
     "line number": [
      330
     ]
    },
    "numpy.matrix": {
     "line number": [
      330
     ]
    },
    "numpy.matrixlib.tests.test_interaction.textwrap": {
     "line number": [
      334
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      330,
      342,
      344
     ]
    },
    "str": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_average_matrix": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "numpy.average": {
     "line number": [
      236,
      241
     ]
    },
    "numpy.matrix": {
     "line number": [
      235,
      238,
      239,
      242
     ]
    },
    "numpy.random.rand": {
     "line number": [
      235
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      236
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      242,
      243
     ]
    },
    "type": {
     "line number": [
      242
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_dot_scalar_and_matrix_of_objects": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      67,
      68
     ]
    },
    "numpy.matrix": {
     "line number": [
      65,
      66
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      67,
      68
     ]
    },
    "object": {
     "line number": [
      65,
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_ediff1d_matrix": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      260,
      261
     ]
    },
    "numpy.ediff1d": {
     "line number": [
      260,
      261
     ]
    },
    "numpy.matrix": {
     "line number": [
      260,
      260,
      261,
      261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_fancy_indexing": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      25
     ]
    },
    "numpy.arange": {
     "line number": [
      29
     ]
    },
    "numpy.array": {
     "line number": [
      30
     ]
    },
    "numpy.asmatrix": {
     "line number": [
      29
     ]
    },
    "numpy.matrix": {
     "line number": [
      23,
      25
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      25
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_inner_scalar_and_matrix": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      74
     ]
    },
    "numpy.inner": {
     "line number": [
      77,
      78
     ]
    },
    "numpy.matrix": {
     "line number": [
      75,
      76
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      77,
      78
     ]
    },
    "numpy.typecodes": {
     "line number": [
      73,
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_inner_scalar_and_matrix_of_objects": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "numpy.inner": {
     "line number": [
      86,
      87
     ]
    },
    "numpy.matrix": {
     "line number": [
      84,
      85
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      86,
      87
     ]
    },
    "object": {
     "line number": [
      84,
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_iter_allocate_output_subtype": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "RuntimeError": {
     "line number": [
      106
     ]
    },
    "numpy.arange": {
     "line number": [
      97,
      105
     ]
    },
    "numpy.matrix": {
     "line number": [
      96,
      100,
      113
     ]
    },
    "numpy.ndarray": {
     "line number": [
      101,
      112
     ]
    },
    "numpy.nditer": {
     "line number": [
      98,
      106,
      109
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      100,
      101,
      112,
      113
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      102,
      114
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      106
     ]
    },
    "type": {
     "line number": [
      100,
      101,
      112,
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_kron_matrix": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": {
    "numpy.asmatrix": {
     "line number": [
      286
     ]
    },
    "numpy.kron": {
     "line number": [
      287,
      288,
      289,
      290
     ]
    },
    "numpy.matrix": {
     "line number": [
      288,
      289,
      290
     ]
    },
    "numpy.ndarray": {
     "line number": [
      287
     ]
    },
    "numpy.ones": {
     "line number": [
      285
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      287,
      288,
      289,
      290
     ]
    },
    "type": {
     "line number": [
      287,
      288,
      289,
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_nanfunctions_matrices": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      195
     ]
    },
    "f": {
     "line number": [
      170,
      173,
      176,
      180,
      183,
      190,
      199
     ]
    },
    "isinstance": {
     "line number": [
      171,
      174,
      184,
      191
     ]
    },
    "issubclass": {
     "line number": [
      195
     ]
    },
    "len": {
     "line number": [
      186,
      194,
      202
     ]
    },
    "numpy.any": {
     "line number": [
      185
     ]
    },
    "numpy.eye": {
     "line number": [
      168
     ]
    },
    "numpy.isnan": {
     "line number": [
      185,
      192,
      192,
      193
     ]
    },
    "numpy.isscalar": {
     "line number": [
      177,
      200
     ]
    },
    "numpy.matrix": {
     "line number": [
      168,
      171,
      174,
      184,
      191
     ]
    },
    "numpy.matrixlib.tests.test_interaction.warnings": {
     "line number": [
      181,
      182,
      188,
      189,
      197,
      198
     ]
    },
    "numpy.nan": {
     "line number": [
      179,
      201
     ]
    },
    "numpy.nanmax": {
     "line number": [
      169,
      180
     ]
    },
    "numpy.nanmin": {
     "line number": [
      169,
      180
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      171,
      172,
      174,
      175,
      177,
      184,
      185,
      186,
      191,
      192,
      194,
      195,
      200,
      201,
      202
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_nanfunctions_matrices_general": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "f": {
     "line number": [
      210,
      212,
      215,
      218,
      221,
      222,
      225,
      228
     ]
    },
    "isinstance": {
     "line number": [
      213,
      216,
      223,
      226,
      229
     ]
    },
    "numpy.eye": {
     "line number": [
      209
     ]
    },
    "numpy.isscalar": {
     "line number": [
      219
     ]
    },
    "numpy.matrix": {
     "line number": [
      209,
      213,
      216,
      223,
      226,
      229
     ]
    },
    "numpy.nanargmax": {
     "line number": [
      210
     ]
    },
    "numpy.nanargmin": {
     "line number": [
      210
     ]
    },
    "numpy.nancumprod": {
     "line number": [
      221
     ]
    },
    "numpy.nancumsum": {
     "line number": [
      221
     ]
    },
    "numpy.nanmean": {
     "line number": [
      211
     ]
    },
    "numpy.nanprod": {
     "line number": [
      210
     ]
    },
    "numpy.nanstd": {
     "line number": [
      211
     ]
    },
    "numpy.nansum": {
     "line number": [
      210
     ]
    },
    "numpy.nanvar": {
     "line number": [
      211
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      213,
      214,
      216,
      217,
      219,
      223,
      224,
      226,
      227,
      229,
      230
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_object_scalar_multiply": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      158,
      159
     ]
    },
    "numpy.multiply": {
     "line number": [
      160,
      161
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      160,
      161
     ]
    },
    "object": {
     "line number": [
      158,
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_partition_matrix_none": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      55,
      57,
      59
     ]
    },
    "numpy.partition": {
     "line number": [
      56
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      59
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      58
     ]
    },
    "type": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_polynomial_mapdomain": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      40
     ]
    },
    "numpy.matrix": {
     "line number": [
      38,
      40
     ]
    },
    "numpy.polynomial.polyutils.mapdomain": {
     "line number": [
      39
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_sort_matrix_none": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "numpy.matrix": {
     "line number": [
      45,
      47,
      49
     ]
    },
    "numpy.sort": {
     "line number": [
      46
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      49
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      48
     ]
    },
    "type": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_stack": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      151
     ]
    },
    "numpy.matrix": {
     "line number": [
      150
     ]
    },
    "numpy.stack": {
     "line number": [
      152
     ]
    },
    "numpy.testing.assert_raises_regex": {
     "line number": [
      151
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.test_trapz_matrix": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      249
     ]
    },
    "numpy.matrix": {
     "line number": [
      252,
      253
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      255
     ]
    },
    "numpy.trapz": {
     "line number": [
      251,
      254
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_interaction.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_interaction.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix": {
  "data": {},
  "type": "module"
 },
 "numpy.matrixlib.tests.test_masked_matrix.MMatrix": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "numpy.ma.core.MaskedArray": {
     "line number": [
      13
     ]
    },
    "numpy.matrix": {
     "line number": [
      13
     ]
    },
    "property": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_masked_matrix.MMatrix.__array_finalize__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.ma.core.MaskedArray.__array_finalize__": {
     "line number": [
      22
     ]
    },
    "numpy.matrix.__array_finalize__": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.MMatrix.__new__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "numpy.ma.core.MaskedArray.__new__": {
     "line number": [
      17
     ]
    },
    "numpy.ma.core.nomask": {
     "line number": [
      15
     ]
    },
    "numpy.matrix": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.MMatrix._get_series": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "numpy.ma.core.MaskedArray": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.MaskType": {
  "data": {
   "shadows": "numpy.ma.core.MaskType"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.MaskedArray": {
  "data": {
   "shadows": "numpy.ma.core.MaskedArray"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestConcatenator": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "object": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestConcatenator.test_matrix": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "numpy.ma.array": {
     "line number": [
      226
     ]
    },
    "numpy.ma.extras.mr_": {
     "line number": [
      225
     ]
    },
    "numpy.ma.testutils.assert_array_equal": {
     "line number": [
      227
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      230,
      231
     ]
    },
    "numpy.r_": {
     "line number": [
      226
     ]
    },
    "type": {
     "line number": [
      230,
      230,
      231,
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestConcatenator.test_matrix_builder": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "numpy.ma.MAError": {
     "line number": [
      219
     ]
    },
    "numpy.ma.extras.mr_": {
     "line number": [
      219
     ]
    },
    "numpy.ma.testutils.assert_raises": {
     "line number": [
      219
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "object": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_allany_onmatrices": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      122,
      126
     ]
    },
    "numpy.bool_": {
     "line number": [
      128
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      129
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      133,
      134,
      140,
      141
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      135,
      136,
      137,
      138,
      142,
      143,
      144,
      145
     ]
    },
    "numpy.matrix": {
     "line number": [
      125,
      135,
      136,
      137,
      138,
      142,
      143,
      144,
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_compressed": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      151
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      152
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      148
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      151
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      150,
      154
     ]
    },
    "numpy.matrix": {
     "line number": [
      148,
      151
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_count_mean_with_matrix": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "numpy.ma.core.masked_array": {
     "line number": [
      87
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      89,
      90,
      93,
      94
     ]
    },
    "numpy.matrix": {
     "line number": [
      87
     ]
    },
    "numpy.zeros": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_flat": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      102
     ]
    },
    "numpy.array": {
     "line number": [
      118,
      119
     ]
    },
    "numpy.eye": {
     "line number": [
      115
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      101
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      99,
      104,
      105,
      106,
      109,
      115
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      102
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      100,
      101,
      107,
      112,
      118,
      119
     ]
    },
    "numpy.matrix": {
     "line number": [
      99,
      104,
      106,
      109,
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_matrix_indexing": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      70
     ]
    },
    "numpy.array": {
     "line number": [
      63
     ]
    },
    "numpy.ma.core.MaskType": {
     "line number": [
      73
     ]
    },
    "numpy.ma.core.allequal": {
     "line number": [
      63,
      65,
      66,
      68,
      69,
      73
     ]
    },
    "numpy.ma.core.getmask": {
     "line number": [
      63,
      65,
      66,
      68
     ]
    },
    "numpy.ma.core.masked": {
     "line number": [
      45,
      57,
      59,
      62
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      36,
      37,
      38,
      64,
      65,
      66,
      67,
      68,
      69,
      73
     ]
    },
    "numpy.ma.core.masked_values": {
     "line number": [
      71
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      43,
      44,
      45,
      63,
      65,
      66,
      68,
      69,
      73
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      46,
      47,
      48,
      49,
      50,
      53,
      56,
      58,
      60,
      72,
      75
     ]
    },
    "numpy.matrix": {
     "line number": [
      35,
      70
     ]
    },
    "repr": {
     "line number": [
      41
     ]
    },
    "str": {
     "line number": [
      40
     ]
    },
    "type": {
     "line number": [
      43,
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_pickling_subbaseclass": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      84
     ]
    },
    "list": {
     "line number": [
      79
     ]
    },
    "numpy.core.numeric.pickle.HIGHEST_PROTOCOL": {
     "line number": [
      80
     ]
    },
    "numpy.core.numeric.pickle.dumps": {
     "line number": [
      81
     ]
    },
    "numpy.core.numeric.pickle.loads": {
     "line number": [
      81
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      79
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      84
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      82,
      83
     ]
    },
    "numpy.matrix": {
     "line number": [
      79,
      84
     ]
    },
    "range": {
     "line number": [
      79,
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_ravel": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "numpy.ma.core.masked_array": {
     "line number": [
      157
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      159,
      160
     ]
    },
    "numpy.matrix": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_view": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "float": {
     "line number": [
      166,
      166,
      168
     ]
    },
    "isinstance": {
     "line number": [
      170,
      171
     ]
    },
    "list": {
     "line number": [
      164
     ]
    },
    "numpy.arange": {
     "line number": [
      164
     ]
    },
    "numpy.array": {
     "line number": [
      165
     ]
    },
    "numpy.ma.core.MaskedArray": {
     "line number": [
      171
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      166
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      170,
      171
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      169
     ]
    },
    "numpy.matrix": {
     "line number": [
      168,
      170
     ]
    },
    "numpy.random.rand": {
     "line number": [
      164
     ]
    },
    "zip": {
     "line number": [
      164
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestSubclassing": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "object": {
     "line number": [
      174
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.setup": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      178
     ]
    },
    "numpy.matrixlib.tests.test_masked_matrix.MMatrix": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_binary_operations": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      198,
      199,
      202,
      203,
      204,
      205
     ]
    },
    "numpy.ma.core.add": {
     "line number": [
      198,
      199,
      201,
      202
     ]
    },
    "numpy.ma.core.add.outer": {
     "line number": [
      203
     ]
    },
    "numpy.ma.core.hypot": {
     "line number": [
      204,
      205
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      198,
      199,
      202,
      203,
      204,
      205
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      201
     ]
    },
    "numpy.matrix": {
     "line number": [
      202
     ]
    },
    "numpy.matrixlib.tests.test_masked_matrix.MMatrix": {
     "line number": [
      198,
      199,
      203,
      204,
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_binary_operations2": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      211,
      212
     ]
    },
    "numpy.ma.core.divide": {
     "line number": [
      211,
      212,
      213,
      213
     ]
    },
    "numpy.ma.core.masked_array": {
     "line number": [
      210
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      211,
      212
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      213
     ]
    },
    "numpy.matrixlib.tests.test_masked_matrix.MMatrix": {
     "line number": [
      211,
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_unary_operations": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      191
     ]
    },
    "numpy.errstate": {
     "line number": [
      190
     ]
    },
    "numpy.log": {
     "line number": [
      192
     ]
    },
    "numpy.ma.core.log": {
     "line number": [
      191,
      192
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      191
     ]
    },
    "numpy.ma.testutils.assert_equal": {
     "line number": [
      192
     ]
    },
    "numpy.matrixlib.tests.test_masked_matrix.MMatrix": {
     "line number": [
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_maskedarray_subclassing": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      185
     ]
    },
    "numpy.ma.testutils.assert_": {
     "line number": [
      185
     ]
    },
    "numpy.matrix": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_masked_matrix.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.add": {
  "data": {
   "shadows": "numpy.ma.core.add"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.allequal": {
  "data": {
   "shadows": "numpy.ma.core.allequal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.assert_": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.assert_array_equal": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.assert_equal": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.assert_raises": {
  "data": {
   "shadows": "numpy.ma.testutils.assert_raises"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.divide": {
  "data": {
   "shadows": "numpy.ma.core.divide"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.getmask": {
  "data": {
   "shadows": "numpy.ma.core.getmask"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.hypot": {
  "data": {
   "shadows": "numpy.ma.core.hypot"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.log": {
  "data": {
   "shadows": "numpy.ma.core.log"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.masked": {
  "data": {
   "shadows": "numpy.ma.core.masked"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.masked_array": {
  "data": {
   "shadows": "numpy.ma.core.masked_array"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.masked_values": {
  "data": {
   "shadows": "numpy.ma.core.masked_values"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.mr_": {
  "data": {
   "shadows": "numpy.ma.extras.mr_"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.nomask": {
  "data": {
   "shadows": "numpy.ma.core.nomask"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.pickle": {
  "data": {
   "shadows": "numpy.core.numeric.pickle"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_masked_matrix.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      22
     ]
    },
    "numpy.double": {
     "line number": [
      18,
      19
     ]
    },
    "numpy.empty": {
     "line number": [
      18,
      19
     ]
    },
    "numpy.linalg.tests.test_linalg.LinalgCase": {
     "line number": [
      17,
      21,
      24,
      31
     ]
    },
    "numpy.linalg.tests.test_linalg.apply_tag": {
     "line number": [
      16,
      30
     ]
    },
    "numpy.matrix": {
     "line number": [
      18,
      19,
      23,
      25,
      26,
      32
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg.CASES": {
     "line number": [
      16,
      30
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.CASES": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.CondCases": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.CondCases"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.DetCases": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.DetCases"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.EigCases": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.EigCases"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.EigvalsCases": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.EigvalsCases"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.InvCases": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.InvCases"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.LinalgCase": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.LinalgCase"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.LinalgTestCase": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.LinalgTestCase"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.LstsqCases": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.LstsqCases"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LinalgTestCase": {
     "line number": [
      38
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg.CASES": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.PinvCases": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.PinvCases"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.SVDCases": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.SVDCases"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.SolveCases": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.SolveCases"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestCondMatrix": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.CondCases": {
     "line number": [
      62
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestDetMatrix": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.DetCases": {
     "line number": [
      70
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestEigMatrix": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.EigCases": {
     "line number": [
      54
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestEigvalsMatrix": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.EigvalsCases": {
     "line number": [
      50
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestInvMatrix": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.InvCases": {
     "line number": [
      46
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestLstsqMatrix": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.LstsqCases": {
     "line number": [
      74
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestNormDoubleMatrix": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg._TestNormDoubleBase": {
     "line number": [
      82
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg._TestNorm2DMatrix": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestNormInt64Matrix": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg._TestNormInt64Base": {
     "line number": [
      90
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg._TestNorm2DMatrix": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestNormSingleMatrix": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg._TestNormSingleBase": {
     "line number": [
      86
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg._TestNorm2DMatrix": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestPinvMatrix": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.PinvCases": {
     "line number": [
      66
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestQRMatrix": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.TestQR": {
     "line number": [
      94
     ]
    },
    "numpy.matrix": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestSVDMatrix": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.SVDCases": {
     "line number": [
      58
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.TestSolveMatrix": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg.SolveCases": {
     "line number": [
      42
     ]
    },
    "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg._TestNorm2D": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg._TestNorm2D"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg._TestNorm2DMatrix": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "numpy.linalg.tests.test_linalg._TestNorm2D": {
     "line number": [
      78
     ]
    },
    "numpy.matrix": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_matrix_linalg._TestNormDoubleBase": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg._TestNormDoubleBase"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg._TestNormInt64Base": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg._TestNormInt64Base"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg._TestNormSingleBase": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg._TestNormSingleBase"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg._TestQR": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.TestQR"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.apply_tag": {
  "data": {
   "shadows": "numpy.linalg.tests.test_linalg.apply_tag"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_matrix_linalg.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_multiarray": {
  "data": {},
  "type": "module"
 },
 "numpy.matrixlib.tests.test_multiarray.TestView": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_multiarray.TestView.test_keywords": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      17
     ]
    },
    "numpy.array": {
     "line number": [
      12
     ]
    },
    "numpy.dtype": {
     "line number": [
      18
     ]
    },
    "numpy.int8": {
     "line number": [
      12,
      12
     ]
    },
    "numpy.matrix": {
     "line number": [
      14,
      17
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      17
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      15
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_multiarray.TestView.test_type": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      9
     ]
    },
    "numpy.array": {
     "line number": [
      8
     ]
    },
    "numpy.matrix": {
     "line number": [
      9,
      9
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_multiarray.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_multiarray.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_multiarray.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_multiarray.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_multiarray.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_multiarray.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_multiarray.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_numeric": {
  "data": {},
  "type": "module"
 },
 "numpy.matrixlib.tests.test_numeric.TestDot": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": {
    "object": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_numeric.TestDot.test_matscalar": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      8
     ]
    },
    "numpy.matrix": {
     "line number": [
      8
     ]
    },
    "numpy.ones": {
     "line number": [
      8
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_numeric.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_numeric.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_numeric.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_numeric.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_numeric.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_numeric.test_diagonal": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      15
     ]
    },
    "numpy.diag": {
     "line number": [
      19
     ]
    },
    "numpy.diagonal": {
     "line number": [
      18
     ]
    },
    "numpy.matrix": {
     "line number": [
      13,
      14
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      17,
      18,
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_regression": {
  "data": {},
  "type": "module"
 },
 "numpy.matrixlib.tests.test_regression.TestRegression": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.matrixlib.tests.test_regression.TestRegression.test_kron_matrix": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "numpy.kron": {
     "line number": [
      11
     ]
    },
    "numpy.matrix": {
     "line number": [
      10
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      11
     ]
    },
    "type": {
     "line number": [
      11,
      11
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_multiply_by_1d_vector": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      27
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_multiply_by_1d_vector.mul": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "numpy.eye": {
     "line number": [
      25
     ]
    },
    "numpy.mat": {
     "line number": [
      25
     ]
    },
    "numpy.ones": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_properties": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "float": {
     "line number": [
      15
     ]
    },
    "numpy.matrix": {
     "line number": [
      15,
      16,
      17,
      18
     ]
    },
    "numpy.ndarray": {
     "line number": [
      19,
      20
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      16,
      17,
      19,
      20
     ]
    },
    "type": {
     "line number": [
      16,
      17,
      19,
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_std_argmax": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "numpy.asmatrix": {
     "line number": [
      31
     ]
    },
    "numpy.random.uniform": {
     "line number": [
      31
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      32,
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.matrixlib.tests.test_regression.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_regression.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_regression.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_regression.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_regression.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.matrixlib.tests.test_regression.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.msg": {
  "data": {
   "lineno": 128
  },
  "type": "constant"
 },
 "numpy.numarray": {
  "data": {
   "lineno": 183
  },
  "type": "constant"
 },
 "numpy.object": {
  "data": {
   "shadows": "__builtin__.object"
  },
  "type": "import"
 },
 "numpy.oldnumeric": {
  "data": {
   "lineno": 182
  },
  "type": "constant"
 },
 "numpy.polynomial": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      26
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      26,
      27
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.polynomial._polybase": {
  "data": {},
  "type": "module"
 },
 "numpy.polynomial._polybase.ABCMeta": {
  "data": {
   "shadows": "abc.ABCMeta"
  },
  "type": "import"
 },
 "numpy.polynomial._polybase.ABCPolyBase": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "abc.ABCMeta": {
     "line number": [
      62
     ]
    },
    "object": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__add__": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      393
     ]
    },
    "NotImplemented": {
     "line number": [
      394
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__call__": {
  "data": {
   "lineno": 370
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__div__": {
  "data": {
   "lineno": 413
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__divmod__": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      444
     ]
    },
    "NotImplemented": {
     "line number": [
      445
     ]
    },
    "ZeroDivisionError": {
     "line number": [
      442
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__eq__": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      509
     ]
    },
    "numpy.all": {
     "line number": [
      510,
      511,
      513
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__floordiv__": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__getstate__": {
  "data": {
   "lineno": 358
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__init__": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      257,
      263
     ]
    },
    "len": {
     "line number": [
      256,
      262
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__iter__": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": {
    "iter": {
     "line number": [
      376
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__len__": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": {
    "len": {
     "line number": [
      379
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__mod__": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__mul__": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      409
     ]
    },
    "NotImplemented": {
     "line number": [
      410
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__ne__": {
  "data": {
   "lineno": 516
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__neg__": {
  "data": {
   "lineno": 383
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__pos__": {
  "data": {
   "lineno": 386
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__pow__": {
  "data": {
   "lineno": 450
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__radd__": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      458
     ]
    },
    "NotImplemented": {
     "line number": [
      459
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__rdiv__": {
  "data": {
   "lineno": 476
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__rdivmod__": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      502
     ]
    },
    "NotImplemented": {
     "line number": [
      503
     ]
    },
    "ZeroDivisionError": {
     "line number": [
      500
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__repr__": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": {
    "format": {
     "line number": [
      267,
      272
     ]
    },
    "repr": {
     "line number": [
      268,
      269,
      270
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__rfloordiv__": {
  "data": {
   "lineno": 485,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      487
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__rmod__": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      493
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__rmul__": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      472
     ]
    },
    "NotImplemented": {
     "line number": [
      473
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__rsub__": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      465
     ]
    },
    "NotImplemented": {
     "line number": [
      466
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__rtruediv__": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      483
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__setstate__": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      366
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__str__": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": {
    "format": {
     "line number": [
      275,
      278
     ]
    },
    "str": {
     "line number": [
      276
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__sub__": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      401
     ]
    },
    "NotImplemented": {
     "line number": [
      402
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.__truediv__": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      423
     ]
    },
    "bool": {
     "line number": [
      421
     ]
    },
    "isinstance": {
     "line number": [
      421,
      421
     ]
    },
    "numpy.polynomial._polybase.numbers": {
     "line number": [
      421
     ]
    },
    "type": {
     "line number": [
      423,
      423
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._add": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._der": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._div": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._fit": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._fromroots": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._get_coefficients": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      242,
      244,
      246
     ]
    },
    "isinstance": {
     "line number": [
      240,
      241
     ]
    },
    "numpy.all": {
     "line number": [
      243,
      245
     ]
    },
    "numpy.polynomial._polybase.ABCPolyBase": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._int": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._line": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._mul": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._pow": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._repr_latex_": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      323
     ]
    },
    "isinstance": {
     "line number": [
      327
     ]
    },
    "mute": {
     "line number": [
      342
     ]
    },
    "numpy.polynomial._polybase.numbers": {
     "line number": [
      327
     ]
    },
    "numpy.signbit": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._repr_latex_scalar": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": {
    "staticmethod": {
     "line number": [
      291
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._repr_latex_term": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      283
     ]
    },
    "classmethod": {
     "line number": [
      280
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._roots": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._sub": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase._val": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.basis": {
  "data": {
   "lineno": 959,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      995
     ]
    },
    "classmethod": {
     "line number": [
      959
     ]
    },
    "cls": {
     "line number": [
      996
     ]
    },
    "cls.domain": {
     "line number": [
      989
     ]
    },
    "cls.window": {
     "line number": [
      991
     ]
    },
    "int": {
     "line number": [
      992
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.basis_name": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "abc.abstractproperty": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.cast": {
  "data": {
   "lineno": 998,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      998
     ]
    },
    "cls": {
     "line number": [
      1038
     ]
    },
    "cls.domain": {
     "line number": [
      1035
     ]
    },
    "cls.window": {
     "line number": [
      1037
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.convert": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": {
    "self": {
     "line number": [
      662
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.copy": {
  "data": {
   "lineno": 523
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.cutdeg": {
  "data": {
   "lineno": 547
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.degree": {
  "data": {
   "lineno": 534,
   "symbols_in_volume": {
    "len": {
     "line number": [
      545
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.deriv": {
  "data": {
   "lineno": 726,
   "symbols_in_volume": {
    "self.__class__": {
     "line number": [
      746
     ]
    },
    "self._der": {
     "line number": [
      745
     ]
    },
    "self.coef": {
     "line number": [
      745
     ]
    },
    "self.domain": {
     "line number": [
      746
     ]
    },
    "self.mapparms": {
     "line number": [
      744
     ]
    },
    "self.window": {
     "line number": [
      746
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.domain": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "abc.abstractproperty": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.fit": {
  "data": {
   "lineno": 795,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      795
     ]
    },
    "cls": {
     "line number": [
      880,
      883
     ]
    },
    "len": {
     "line number": [
      870
     ]
    },
    "list": {
     "line number": [
      870
     ]
    },
    "type": {
     "line number": [
      870
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.fromroots": {
  "data": {
   "lineno": 885,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      885
     ]
    },
    "cls": {
     "line number": [
      924
     ]
    },
    "cls._fromroots": {
     "line number": [
      923
     ]
    },
    "cls.domain": {
     "line number": [
      915
     ]
    },
    "cls.window": {
     "line number": [
      918
     ]
    },
    "len": {
     "line number": [
      914,
      920
     ]
    },
    "list": {
     "line number": [
      914
     ]
    },
    "type": {
     "line number": [
      914
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.has_samecoef": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "len": {
     "line number": [
      153,
      153
     ]
    },
    "numpy.all": {
     "line number": [
      155
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.has_samedomain": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.has_sametype": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.has_samewindow": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      194
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.identity": {
  "data": {
   "lineno": 926,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      926
     ]
    },
    "cls": {
     "line number": [
      957
     ]
    },
    "cls._line": {
     "line number": [
      956
     ]
    },
    "cls.domain": {
     "line number": [
      952
     ]
    },
    "cls.window": {
     "line number": [
      954
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.integ": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": {
    "self.__class__": {
     "line number": [
      724
     ]
    },
    "self._int": {
     "line number": [
      723
     ]
    },
    "self.coef": {
     "line number": [
      723
     ]
    },
    "self.domain": {
     "line number": [
      724
     ]
    },
    "self.mapparms": {
     "line number": [
      718
     ]
    },
    "self.window": {
     "line number": [
      724
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.linspace": {
  "data": {
   "lineno": 763,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      791
     ]
    },
    "self": {
     "line number": [
      792
     ]
    },
    "self.domain": {
     "line number": [
      790
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.mapparms": {
  "data": {
   "lineno": 664,
   "symbols_in_volume": {
    "self.domain": {
     "line number": [
      691
     ]
    },
    "self.window": {
     "line number": [
      691
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.nickname": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "abc.abstractproperty": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.roots": {
  "data": {
   "lineno": 748,
   "symbols_in_volume": {
    "self._roots": {
     "line number": [
      760
     ]
    },
    "self.coef": {
     "line number": [
      760
     ]
    },
    "self.domain": {
     "line number": [
      761
     ]
    },
    "self.window": {
     "line number": [
      761
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.trim": {
  "data": {
   "lineno": 572
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.truncate": {
  "data": {
   "lineno": 595,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      617
     ]
    },
    "int": {
     "line number": [
      615
     ]
    },
    "len": {
     "line number": [
      618
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.ABCPolyBase.window": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "abc.abstractproperty": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial._polybase.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.polynomial._polybase.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial._polybase.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "numpy.polynomial._polybase.abstractproperty": {
  "data": {
   "shadows": "abc.abstractproperty"
  },
  "type": "import"
 },
 "numpy.polynomial._polybase.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial._polybase.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial._polybase.numbers": {
  "data": {
   "shadows": "numbers"
  },
  "type": "import"
 },
 "numpy.polynomial._polybase.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial._polybase.pu": {
  "data": {
   "shadows": "polyutils"
  },
  "type": "import"
 },
 "numpy.polynomial.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.chebyshev": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      447,
      450,
      453,
      456
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.chebyshev.Chebyshev": {
  "data": {
   "lineno": 2118,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      2198,
      2199
     ]
    },
    "numpy.polynomial.chebyshev.chebadd": {
     "line number": [
      2141
     ]
    },
    "numpy.polynomial.chebyshev.chebder": {
     "line number": [
      2148
     ]
    },
    "numpy.polynomial.chebyshev.chebdiv": {
     "line number": [
      2144
     ]
    },
    "numpy.polynomial.chebyshev.chebdomain": {
     "line number": [
      2198,
      2199
     ]
    },
    "numpy.polynomial.chebyshev.chebfit": {
     "line number": [
      2149
     ]
    },
    "numpy.polynomial.chebyshev.chebfromroots": {
     "line number": [
      2152
     ]
    },
    "numpy.polynomial.chebyshev.chebint": {
     "line number": [
      2147
     ]
    },
    "numpy.polynomial.chebyshev.chebline": {
     "line number": [
      2150
     ]
    },
    "numpy.polynomial.chebyshev.chebmul": {
     "line number": [
      2143
     ]
    },
    "numpy.polynomial.chebyshev.chebpow": {
     "line number": [
      2145
     ]
    },
    "numpy.polynomial.chebyshev.chebroots": {
     "line number": [
      2151
     ]
    },
    "numpy.polynomial.chebyshev.chebsub": {
     "line number": [
      2142
     ]
    },
    "numpy.polynomial.chebyshev.chebval": {
     "line number": [
      2146
     ]
    },
    "staticmethod": {
     "line number": [
      2141,
      2142,
      2143,
      2144,
      2145,
      2146,
      2147,
      2148,
      2149,
      2150,
      2151,
      2152
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.chebyshev.Chebyshev.interpolate": {
  "data": {
   "lineno": 2154,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      2154
     ]
    },
    "cls": {
     "line number": [
      2194
     ]
    },
    "func": {
     "line number": [
      2192
     ]
    },
    "numpy.polynomial.chebyshev.chebinterpolate": {
     "line number": [
      2193
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.__all__": {
  "data": {
   "lineno": 100
  },
  "type": "constant"
 },
 "numpy.polynomial.chebyshev._cseries_to_zseries": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "numpy.zeros": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev._zseries_der": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "len": {
     "line number": [
      285
     ]
    },
    "numpy.arange": {
     "line number": [
      287
     ]
    },
    "numpy.array": {
     "line number": [
      286
     ]
    },
    "numpy.polynomial.chebyshev._zseries_div": {
     "line number": [
      288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev._zseries_div": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": {
    "len": {
     "line number": [
      228,
      229
     ]
    },
    "numpy.empty": {
     "line number": [
      239
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev._zseries_int": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "len": {
     "line number": [
      316
     ]
    },
    "numpy.arange": {
     "line number": [
      319
     ]
    },
    "numpy.array": {
     "line number": [
      317
     ]
    },
    "numpy.polynomial.chebyshev._zseries_mul": {
     "line number": [
      318
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev._zseries_mul": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "numpy.convolve": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev._zseries_to_cseries": {
  "data": {
   "lineno": 141
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.chebyshev.cheb2poly": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": {
    "len": {
     "line number": [
      427
     ]
    },
    "polyadd": {
     "line number": [
      437,
      438
     ]
    },
    "polymulx": {
     "line number": [
      437,
      438
     ]
    },
    "polysub": {
     "line number": [
      436
     ]
    },
    "range": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebadd": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": {
    "len": {
     "line number": [
      602,
      602
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebcompanion": {
  "data": {
   "lineno": 1803,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1832
     ]
    },
    "len": {
     "line number": [
      1831,
      1833,
      1836
     ]
    },
    "numpy.array": {
     "line number": [
      1834,
      1838
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1838,
      1841
     ]
    },
    "numpy.zeros": {
     "line number": [
      1837
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebder": {
  "data": {
   "lineno": 880,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      946,
      948,
      950
     ]
    },
    "int": {
     "line number": [
      943
     ]
    },
    "len": {
     "line number": [
      957
     ]
    },
    "numpy.array": {
     "line number": [
      940
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      951
     ]
    },
    "numpy.double": {
     "line number": [
      942
     ]
    },
    "numpy.empty": {
     "line number": [
      964
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      956,
      972
     ]
    },
    "range": {
     "line number": [
      961,
      965
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebdiv": {
  "data": {
   "lineno": 759,
   "symbols_in_volume": {
    "ZeroDivisionError": {
     "line number": [
      808
     ]
    },
    "len": {
     "line number": [
      810,
      811
     ]
    },
    "numpy.polynomial.chebyshev._cseries_to_zseries": {
     "line number": [
      817,
      818
     ]
    },
    "numpy.polynomial.chebyshev._zseries_div": {
     "line number": [
      819
     ]
    },
    "numpy.polynomial.chebyshev._zseries_to_cseries": {
     "line number": [
      820,
      821
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebdomain": {
  "data": {
   "lineno": 447
  },
  "type": "constant"
 },
 "numpy.polynomial.chebyshev.chebfit": {
  "data": {
   "lineno": 1607,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1732,
      1736,
      1738,
      1740,
      1742,
      1760,
      1762
     ]
    },
    "ValueError": {
     "line number": [
      1734
     ]
    },
    "issubclass": {
     "line number": [
      1773
     ]
    },
    "len": {
     "line number": [
      1741,
      1741,
      1751,
      1761,
      1761,
      1770
     ]
    },
    "numpy.asarray": {
     "line number": [
      1726,
      1727,
      1728,
      1758
     ]
    },
    "numpy.complexfloating": {
     "line number": [
      1773
     ]
    },
    "numpy.finfo": {
     "line number": [
      1770
     ]
    },
    "numpy.linalg.lstsq": {
     "line number": [
      1780
     ]
    },
    "numpy.polynomial.chebyshev.chebvander": {
     "line number": [
      1747,
      1752
     ]
    },
    "numpy.polynomial.chebyshev.warnings": {
     "line number": [
      1795
     ]
    },
    "numpy.sort": {
     "line number": [
      1749
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1774,
      1776
     ]
    },
    "numpy.square": {
     "line number": [
      1774,
      1774,
      1776
     ]
    },
    "numpy.zeros": {
     "line number": [
      1786,
      1788
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebfromroots": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      552
     ]
    },
    "len": {
     "line number": [
      544,
      550
     ]
    },
    "numpy.ones": {
     "line number": [
      545
     ]
    },
    "numpy.polynomial.chebyshev.chebline": {
     "line number": [
      549
     ]
    },
    "numpy.polynomial.chebyshev.chebmul": {
     "line number": [
      553,
      555
     ]
    },
    "range": {
     "line number": [
      553
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebgauss": {
  "data": {
   "lineno": 1971,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2008
     ]
    },
    "int": {
     "line number": [
      2006
     ]
    },
    "numpy.arange": {
     "line number": [
      2010
     ]
    },
    "numpy.cos": {
     "line number": [
      2010
     ]
    },
    "numpy.ones": {
     "line number": [
      2011
     ]
    },
    "numpy.pi": {
     "line number": [
      2010,
      2011
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebgrid2d": {
  "data": {
   "lineno": 1251,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebval": {
     "line number": [
      1301,
      1302
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebgrid3d": {
  "data": {
   "lineno": 1365,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebval": {
     "line number": [
      1418,
      1419,
      1420
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebint": {
  "data": {
   "lineno": 976,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1069,
      1071,
      1073,
      1075,
      1077,
      1079
     ]
    },
    "int": {
     "line number": [
      1066
     ]
    },
    "len": {
     "line number": [
      1072,
      1086,
      1088
     ]
    },
    "list": {
     "line number": [
      1086
     ]
    },
    "numpy.all": {
     "line number": [
      1090
     ]
    },
    "numpy.array": {
     "line number": [
      1061
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      1080
     ]
    },
    "numpy.double": {
     "line number": [
      1063
     ]
    },
    "numpy.empty": {
     "line number": [
      1093
     ]
    },
    "numpy.iterable": {
     "line number": [
      1064
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      1085,
      1104
     ]
    },
    "numpy.ndim": {
     "line number": [
      1074,
      1076
     ]
    },
    "numpy.polynomial.chebyshev.chebval": {
     "line number": [
      1102
     ]
    },
    "range": {
     "line number": [
      1087,
      1098
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebinterpolate": {
  "data": {
   "lineno": 1904,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1956
     ]
    },
    "ValueError": {
     "line number": [
      1958
     ]
    },
    "func": {
     "line number": [
      1962
     ]
    },
    "numpy.asarray": {
     "line number": [
      1952
     ]
    },
    "numpy.dot": {
     "line number": [
      1964
     ]
    },
    "numpy.polynomial.chebyshev.chebpts1": {
     "line number": [
      1961
     ]
    },
    "numpy.polynomial.chebyshev.chebvander": {
     "line number": [
      1963
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebline": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      490,
      492
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebmul": {
  "data": {
   "lineno": 710,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev._cseries_to_zseries": {
     "line number": [
      752,
      753
     ]
    },
    "numpy.polynomial.chebyshev._zseries_mul": {
     "line number": [
      754
     ]
    },
    "numpy.polynomial.chebyshev._zseries_to_cseries": {
     "line number": [
      755
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebmulx": {
  "data": {
   "lineno": 664,
   "symbols_in_volume": {
    "len": {
     "line number": [
      697,
      700,
      703
     ]
    },
    "numpy.empty": {
     "line number": [
      700
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebone": {
  "data": {
   "lineno": 453
  },
  "type": "constant"
 },
 "numpy.polynomial.chebyshev.chebpow": {
  "data": {
   "lineno": 825,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      863,
      865
     ]
    },
    "int": {
     "line number": [
      861
     ]
    },
    "numpy.array": {
     "line number": [
      867
     ]
    },
    "numpy.convolve": {
     "line number": [
      876
     ]
    },
    "numpy.polynomial.chebyshev._cseries_to_zseries": {
     "line number": [
      873
     ]
    },
    "numpy.polynomial.chebyshev._zseries_to_cseries": {
     "line number": [
      877
     ]
    },
    "pow": {
     "line number": [
      861,
      862
     ]
    },
    "range": {
     "line number": [
      875
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebpts1": {
  "data": {
   "lineno": 2044,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2073,
      2075
     ]
    },
    "int": {
     "line number": [
      2071
     ]
    },
    "numpy.cos": {
     "line number": [
      2078
     ]
    },
    "numpy.linspace": {
     "line number": [
      2077
     ]
    },
    "numpy.pi": {
     "line number": [
      2077,
      2077
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebpts2": {
  "data": {
   "lineno": 2081,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      2106,
      2108
     ]
    },
    "int": {
     "line number": [
      2104
     ]
    },
    "numpy.cos": {
     "line number": [
      2111
     ]
    },
    "numpy.linspace": {
     "line number": [
      2110
     ]
    },
    "numpy.pi": {
     "line number": [
      2110
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebroots": {
  "data": {
   "lineno": 1848,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1893,
      1895
     ]
    },
    "numpy.array": {
     "line number": [
      1894,
      1896
     ]
    },
    "numpy.linalg.eigvals": {
     "line number": [
      1899
     ]
    },
    "numpy.polynomial.chebyshev.chebcompanion": {
     "line number": [
      1898
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebsub": {
  "data": {
   "lineno": 611,
   "symbols_in_volume": {
    "len": {
     "line number": [
      654,
      654
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebtrim": {
  "data": {
   "lineno": 109
  },
  "type": "constant"
 },
 "numpy.polynomial.chebyshev.chebval": {
  "data": {
   "lineno": 1108,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1173,
      1175
     ]
    },
    "len": {
     "line number": [
      1178,
      1181,
      1188
     ]
    },
    "list": {
     "line number": [
      1173
     ]
    },
    "numpy.array": {
     "line number": [
      1170
     ]
    },
    "numpy.asarray": {
     "line number": [
      1174
     ]
    },
    "numpy.double": {
     "line number": [
      1172
     ]
    },
    "numpy.ndarray": {
     "line number": [
      1175
     ]
    },
    "range": {
     "line number": [
      1188
     ]
    },
    "tuple": {
     "line number": [
      1173
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebval2d": {
  "data": {
   "lineno": 1195,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1243
     ]
    },
    "ValueError": {
     "line number": [
      1244
     ]
    },
    "numpy.array": {
     "line number": [
      1242
     ]
    },
    "numpy.polynomial.chebyshev.chebval": {
     "line number": [
      1246,
      1247
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebval3d": {
  "data": {
   "lineno": 1306,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1356
     ]
    },
    "ValueError": {
     "line number": [
      1357
     ]
    },
    "numpy.array": {
     "line number": [
      1355
     ]
    },
    "numpy.polynomial.chebyshev.chebval": {
     "line number": [
      1359,
      1360,
      1361
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebvander": {
  "data": {
   "lineno": 1424,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1461,
      1463
     ]
    },
    "int": {
     "line number": [
      1459
     ]
    },
    "numpy.array": {
     "line number": [
      1465
     ]
    },
    "numpy.empty": {
     "line number": [
      1468
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      1476
     ]
    },
    "range": {
     "line number": [
      1474
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebvander2d": {
  "data": {
   "lineno": 1479,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1532
     ]
    },
    "id": {
     "line number": [
      1530,
      1530,
      1530
     ]
    },
    "int": {
     "line number": [
      1529
     ]
    },
    "numpy.array": {
     "line number": [
      1534
     ]
    },
    "numpy.polynomial.chebyshev.chebvander": {
     "line number": [
      1536,
      1537
     ]
    },
    "zip": {
     "line number": [
      1530
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebvander3d": {
  "data": {
   "lineno": 1542,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1596
     ]
    },
    "id": {
     "line number": [
      1594,
      1594,
      1594
     ]
    },
    "int": {
     "line number": [
      1593
     ]
    },
    "numpy.array": {
     "line number": [
      1598
     ]
    },
    "numpy.polynomial.chebyshev.chebvander": {
     "line number": [
      1600,
      1601,
      1602
     ]
    },
    "zip": {
     "line number": [
      1594
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebweight": {
  "data": {
   "lineno": 2016,
   "symbols_in_volume": {
    "numpy.sqrt": {
     "line number": [
      2040,
      2040
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.chebx": {
  "data": {
   "lineno": 456
  },
  "type": "constant"
 },
 "numpy.polynomial.chebyshev.chebzero": {
  "data": {
   "lineno": 450
  },
  "type": "constant"
 },
 "numpy.polynomial.chebyshev.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.chebyshev.la": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "numpy.polynomial.chebyshev.normalize_axis_index": {
  "data": {
   "shadows": "numpy.core.multiarray.normalize_axis_index"
  },
  "type": "import"
 },
 "numpy.polynomial.chebyshev.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.chebyshev.poly2cheb": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": {
    "len": {
     "line number": [
      373
     ]
    },
    "numpy.polynomial.chebyshev.chebadd": {
     "line number": [
      376
     ]
    },
    "numpy.polynomial.chebyshev.chebmulx": {
     "line number": [
      376
     ]
    },
    "range": {
     "line number": [
      375
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.chebyshev.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.chebyshev.pu": {
  "data": {
   "shadows": "polyutils"
  },
  "type": "import"
 },
 "numpy.polynomial.chebyshev.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.polynomial.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      191,
      194,
      197,
      200
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.hermite.Hermite": {
  "data": {
   "lineno": 1819,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1857,
      1858
     ]
    },
    "numpy.polynomial.hermite.hermadd": {
     "line number": [
      1842
     ]
    },
    "numpy.polynomial.hermite.hermder": {
     "line number": [
      1849
     ]
    },
    "numpy.polynomial.hermite.hermdiv": {
     "line number": [
      1845
     ]
    },
    "numpy.polynomial.hermite.hermdomain": {
     "line number": [
      1857,
      1858
     ]
    },
    "numpy.polynomial.hermite.hermfit": {
     "line number": [
      1850
     ]
    },
    "numpy.polynomial.hermite.hermfromroots": {
     "line number": [
      1853
     ]
    },
    "numpy.polynomial.hermite.hermint": {
     "line number": [
      1848
     ]
    },
    "numpy.polynomial.hermite.hermline": {
     "line number": [
      1851
     ]
    },
    "numpy.polynomial.hermite.hermmul": {
     "line number": [
      1844
     ]
    },
    "numpy.polynomial.hermite.hermpow": {
     "line number": [
      1846
     ]
    },
    "numpy.polynomial.hermite.hermroots": {
     "line number": [
      1852
     ]
    },
    "numpy.polynomial.hermite.hermsub": {
     "line number": [
      1843
     ]
    },
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      1847
     ]
    },
    "staticmethod": {
     "line number": [
      1842,
      1843,
      1844,
      1845,
      1846,
      1847,
      1848,
      1849,
      1850,
      1851,
      1852,
      1853
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.hermite.__all__": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite._normed_hermite_n": {
  "data": {
   "lineno": 1677,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1711
     ]
    },
    "numpy.full": {
     "line number": [
      1707
     ]
    },
    "numpy.pi": {
     "line number": [
      1707,
      1710
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1707,
      1707,
      1710,
      1710,
      1714,
      1715,
      1717
     ]
    },
    "range": {
     "line number": [
      1712
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite.herm2poly": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "len": {
     "line number": [
      169
     ]
    },
    "polyadd": {
     "line number": [
      182,
      183
     ]
    },
    "polymulx": {
     "line number": [
      182,
      183
     ]
    },
    "polysub": {
     "line number": [
      181
     ]
    },
    "range": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermadd": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": {
    "len": {
     "line number": [
      345,
      345
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermcompanion": {
  "data": {
   "lineno": 1573,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1602
     ]
    },
    "len": {
     "line number": [
      1601,
      1603,
      1606
     ]
    },
    "numpy.arange": {
     "line number": [
      1608,
      1612
     ]
    },
    "numpy.array": {
     "line number": [
      1604
     ]
    },
    "numpy.hstack": {
     "line number": [
      1608
     ]
    },
    "numpy.multiply.accumulate": {
     "line number": [
      1609
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1608,
      1612
     ]
    },
    "numpy.zeros": {
     "line number": [
      1607
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermder": {
  "data": {
   "lineno": 643,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      704,
      706,
      708
     ]
    },
    "int": {
     "line number": [
      701
     ]
    },
    "len": {
     "line number": [
      715
     ]
    },
    "numpy.array": {
     "line number": [
      698
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      709
     ]
    },
    "numpy.double": {
     "line number": [
      700
     ]
    },
    "numpy.empty": {
     "line number": [
      722
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      714,
      726
     ]
    },
    "range": {
     "line number": [
      719,
      723
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermdiv": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": {
    "ZeroDivisionError": {
     "line number": [
      570
     ]
    },
    "len": {
     "line number": [
      572,
      573
     ]
    },
    "numpy.empty": {
     "line number": [
      579
     ]
    },
    "numpy.polynomial.hermite.hermmul": {
     "line number": [
      582
     ]
    },
    "range": {
     "line number": [
      581
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermdomain": {
  "data": {
   "lineno": 191
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite.hermfit": {
  "data": {
   "lineno": 1372,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1502,
      1506,
      1508,
      1510,
      1512,
      1530,
      1532
     ]
    },
    "ValueError": {
     "line number": [
      1504
     ]
    },
    "issubclass": {
     "line number": [
      1543
     ]
    },
    "len": {
     "line number": [
      1511,
      1511,
      1521,
      1531,
      1531,
      1540
     ]
    },
    "numpy.asarray": {
     "line number": [
      1496,
      1497,
      1498,
      1528
     ]
    },
    "numpy.complexfloating": {
     "line number": [
      1543
     ]
    },
    "numpy.finfo": {
     "line number": [
      1540
     ]
    },
    "numpy.linalg.lstsq": {
     "line number": [
      1550
     ]
    },
    "numpy.polynomial.hermite.hermvander": {
     "line number": [
      1517,
      1522
     ]
    },
    "numpy.polynomial.hermite.warnings": {
     "line number": [
      1565
     ]
    },
    "numpy.sort": {
     "line number": [
      1519
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1544,
      1546
     ]
    },
    "numpy.square": {
     "line number": [
      1544,
      1544,
      1546
     ]
    },
    "numpy.zeros": {
     "line number": [
      1556,
      1558
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermfromroots": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      297
     ]
    },
    "len": {
     "line number": [
      289,
      295
     ]
    },
    "numpy.ones": {
     "line number": [
      290
     ]
    },
    "numpy.polynomial.hermite.hermline": {
     "line number": [
      294
     ]
    },
    "numpy.polynomial.hermite.hermmul": {
     "line number": [
      298,
      300
     ]
    },
    "range": {
     "line number": [
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermgauss": {
  "data": {
   "lineno": 1720,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1758
     ]
    },
    "int": {
     "line number": [
      1756
     ]
    },
    "numpy.abs": {
     "line number": [
      1774
     ]
    },
    "numpy.array": {
     "line number": [
      1762
     ]
    },
    "numpy.float64": {
     "line number": [
      1762
     ]
    },
    "numpy.linalg.eigvalsh": {
     "line number": [
      1764
     ]
    },
    "numpy.pi": {
     "line number": [
      1782
     ]
    },
    "numpy.polynomial.hermite._normed_hermite_n": {
     "line number": [
      1767,
      1768,
      1773
     ]
    },
    "numpy.polynomial.hermite.hermcompanion": {
     "line number": [
      1763
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1768,
      1782
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermgrid2d": {
  "data": {
   "lineno": 1008,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      1058,
      1059
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermgrid3d": {
  "data": {
   "lineno": 1122,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      1175,
      1176,
      1177
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermint": {
  "data": {
   "lineno": 730,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      821,
      823,
      825,
      827,
      829,
      831
     ]
    },
    "int": {
     "line number": [
      818
     ]
    },
    "len": {
     "line number": [
      824,
      838,
      840
     ]
    },
    "list": {
     "line number": [
      838
     ]
    },
    "numpy.all": {
     "line number": [
      842
     ]
    },
    "numpy.array": {
     "line number": [
      813
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      832
     ]
    },
    "numpy.double": {
     "line number": [
      815
     ]
    },
    "numpy.empty": {
     "line number": [
      845
     ]
    },
    "numpy.iterable": {
     "line number": [
      816
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      837,
      852
     ]
    },
    "numpy.ndim": {
     "line number": [
      826,
      828
     ]
    },
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      850
     ]
    },
    "range": {
     "line number": [
      839,
      848
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermline": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      234,
      236
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermmul": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": {
    "len": {
     "line number": [
      497,
      497,
      504,
      507,
      511,
      514
     ]
    },
    "numpy.polynomial.hermite.hermadd": {
     "line number": [
      518,
      519
     ]
    },
    "numpy.polynomial.hermite.hermmulx": {
     "line number": [
      518,
      519
     ]
    },
    "numpy.polynomial.hermite.hermsub": {
     "line number": [
      517
     ]
    },
    "range": {
     "line number": [
      514
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermmulx": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": {
    "len": {
     "line number": [
      444,
      447,
      450
     ]
    },
    "numpy.empty": {
     "line number": [
      447
     ]
    },
    "range": {
     "line number": [
      450
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermone": {
  "data": {
   "lineno": 197
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite.hermpow": {
  "data": {
   "lineno": 589,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      627,
      629
     ]
    },
    "int": {
     "line number": [
      625
     ]
    },
    "numpy.array": {
     "line number": [
      631
     ]
    },
    "numpy.polynomial.hermite.hermmul": {
     "line number": [
      639
     ]
    },
    "pow": {
     "line number": [
      625,
      626
     ]
    },
    "range": {
     "line number": [
      638
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermroots": {
  "data": {
   "lineno": 1618,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1666,
      1668
     ]
    },
    "numpy.array": {
     "line number": [
      1667,
      1669
     ]
    },
    "numpy.linalg.eigvals": {
     "line number": [
      1672
     ]
    },
    "numpy.polynomial.hermite.hermcompanion": {
     "line number": [
      1671
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermsub": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": {
    "len": {
     "line number": [
      393,
      393
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermtrim": {
  "data": {
   "lineno": 79
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite.hermval": {
  "data": {
   "lineno": 856,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      928,
      930
     ]
    },
    "len": {
     "line number": [
      934,
      937,
      941,
      944
     ]
    },
    "list": {
     "line number": [
      928
     ]
    },
    "numpy.array": {
     "line number": [
      925
     ]
    },
    "numpy.asarray": {
     "line number": [
      929
     ]
    },
    "numpy.double": {
     "line number": [
      927
     ]
    },
    "numpy.ndarray": {
     "line number": [
      930
     ]
    },
    "range": {
     "line number": [
      944
     ]
    },
    "tuple": {
     "line number": [
      928
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermval2d": {
  "data": {
   "lineno": 952,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1000
     ]
    },
    "ValueError": {
     "line number": [
      1001
     ]
    },
    "numpy.array": {
     "line number": [
      999
     ]
    },
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      1003,
      1004
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermval3d": {
  "data": {
   "lineno": 1063,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1113
     ]
    },
    "ValueError": {
     "line number": [
      1114
     ]
    },
    "numpy.array": {
     "line number": [
      1112
     ]
    },
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      1116,
      1117,
      1118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermvander": {
  "data": {
   "lineno": 1181,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1227,
      1229
     ]
    },
    "int": {
     "line number": [
      1225
     ]
    },
    "numpy.array": {
     "line number": [
      1231
     ]
    },
    "numpy.empty": {
     "line number": [
      1234
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      1241
     ]
    },
    "range": {
     "line number": [
      1239
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermvander2d": {
  "data": {
   "lineno": 1244,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1297
     ]
    },
    "id": {
     "line number": [
      1295,
      1295,
      1295
     ]
    },
    "int": {
     "line number": [
      1294
     ]
    },
    "numpy.array": {
     "line number": [
      1299
     ]
    },
    "numpy.polynomial.hermite.hermvander": {
     "line number": [
      1301,
      1302
     ]
    },
    "zip": {
     "line number": [
      1295
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermvander3d": {
  "data": {
   "lineno": 1307,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1361
     ]
    },
    "id": {
     "line number": [
      1359,
      1359,
      1359
     ]
    },
    "int": {
     "line number": [
      1358
     ]
    },
    "numpy.array": {
     "line number": [
      1363
     ]
    },
    "numpy.polynomial.hermite.hermvander": {
     "line number": [
      1365,
      1366,
      1367
     ]
    },
    "zip": {
     "line number": [
      1359
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermweight": {
  "data": {
   "lineno": 1787,
   "symbols_in_volume": {
    "numpy.exp": {
     "line number": [
      1811
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.hermx": {
  "data": {
   "lineno": 200
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite.hermzero": {
  "data": {
   "lineno": 194
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite.la": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite.normalize_axis_index": {
  "data": {
   "shadows": "numpy.core.multiarray.normalize_axis_index"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite.poly2herm": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "len": {
     "line number": [
      121
     ]
    },
    "numpy.polynomial.hermite.hermadd": {
     "line number": [
      124
     ]
    },
    "numpy.polynomial.hermite.hermmulx": {
     "line number": [
      124
     ]
    },
    "range": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite.pu": {
  "data": {
   "shadows": "polyutils"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite_e": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      191,
      194,
      197,
      200
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.hermite_e.HermiteE": {
  "data": {
   "lineno": 1812,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1850,
      1851
     ]
    },
    "numpy.polynomial.hermite_e.hermeadd": {
     "line number": [
      1835
     ]
    },
    "numpy.polynomial.hermite_e.hermeder": {
     "line number": [
      1842
     ]
    },
    "numpy.polynomial.hermite_e.hermediv": {
     "line number": [
      1838
     ]
    },
    "numpy.polynomial.hermite_e.hermedomain": {
     "line number": [
      1850,
      1851
     ]
    },
    "numpy.polynomial.hermite_e.hermefit": {
     "line number": [
      1843
     ]
    },
    "numpy.polynomial.hermite_e.hermefromroots": {
     "line number": [
      1846
     ]
    },
    "numpy.polynomial.hermite_e.hermeint": {
     "line number": [
      1841
     ]
    },
    "numpy.polynomial.hermite_e.hermeline": {
     "line number": [
      1844
     ]
    },
    "numpy.polynomial.hermite_e.hermemul": {
     "line number": [
      1837
     ]
    },
    "numpy.polynomial.hermite_e.hermepow": {
     "line number": [
      1839
     ]
    },
    "numpy.polynomial.hermite_e.hermeroots": {
     "line number": [
      1845
     ]
    },
    "numpy.polynomial.hermite_e.hermesub": {
     "line number": [
      1836
     ]
    },
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      1840
     ]
    },
    "staticmethod": {
     "line number": [
      1835,
      1836,
      1837,
      1838,
      1839,
      1840,
      1841,
      1842,
      1843,
      1844,
      1845,
      1846
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.hermite_e.__all__": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite_e._normed_hermite_e_n": {
  "data": {
   "lineno": 1671,
   "symbols_in_volume": {
    "float": {
     "line number": [
      1705
     ]
    },
    "numpy.full": {
     "line number": [
      1701
     ]
    },
    "numpy.pi": {
     "line number": [
      1701,
      1704
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1701,
      1701,
      1704,
      1704,
      1708,
      1709
     ]
    },
    "range": {
     "line number": [
      1706
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite_e.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite_e.herme2poly": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "len": {
     "line number": [
      170
     ]
    },
    "polyadd": {
     "line number": [
      182,
      183
     ]
    },
    "polymulx": {
     "line number": [
      182,
      183
     ]
    },
    "polysub": {
     "line number": [
      181
     ]
    },
    "range": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermeadd": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "len": {
     "line number": [
      346,
      346
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermecompanion": {
  "data": {
   "lineno": 1566,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1596
     ]
    },
    "len": {
     "line number": [
      1595,
      1597,
      1600
     ]
    },
    "numpy.arange": {
     "line number": [
      1602,
      1606
     ]
    },
    "numpy.array": {
     "line number": [
      1598
     ]
    },
    "numpy.hstack": {
     "line number": [
      1602
     ]
    },
    "numpy.multiply.accumulate": {
     "line number": [
      1603
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1602,
      1606
     ]
    },
    "numpy.zeros": {
     "line number": [
      1601
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermeder": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      699,
      701,
      703
     ]
    },
    "int": {
     "line number": [
      696
     ]
    },
    "len": {
     "line number": [
      710
     ]
    },
    "numpy.array": {
     "line number": [
      693
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      704
     ]
    },
    "numpy.double": {
     "line number": [
      695
     ]
    },
    "numpy.empty": {
     "line number": [
      717
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      709,
      721
     ]
    },
    "range": {
     "line number": [
      714,
      718
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermediv": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": {
    "ZeroDivisionError": {
     "line number": [
      565
     ]
    },
    "len": {
     "line number": [
      567,
      568
     ]
    },
    "numpy.empty": {
     "line number": [
      574
     ]
    },
    "numpy.polynomial.hermite_e.hermemul": {
     "line number": [
      577
     ]
    },
    "range": {
     "line number": [
      576
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermedomain": {
  "data": {
   "lineno": 191
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite_e.hermefit": {
  "data": {
   "lineno": 1365,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1495,
      1499,
      1501,
      1503,
      1505,
      1523,
      1525
     ]
    },
    "ValueError": {
     "line number": [
      1497
     ]
    },
    "issubclass": {
     "line number": [
      1536
     ]
    },
    "len": {
     "line number": [
      1504,
      1504,
      1514,
      1524,
      1524,
      1533
     ]
    },
    "numpy.asarray": {
     "line number": [
      1489,
      1490,
      1491,
      1521
     ]
    },
    "numpy.complexfloating": {
     "line number": [
      1536
     ]
    },
    "numpy.finfo": {
     "line number": [
      1533
     ]
    },
    "numpy.linalg.lstsq": {
     "line number": [
      1543
     ]
    },
    "numpy.polynomial.hermite_e.hermevander": {
     "line number": [
      1510,
      1515
     ]
    },
    "numpy.polynomial.hermite_e.warnings": {
     "line number": [
      1558
     ]
    },
    "numpy.sort": {
     "line number": [
      1512
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1537,
      1539
     ]
    },
    "numpy.square": {
     "line number": [
      1537,
      1537,
      1539
     ]
    },
    "numpy.zeros": {
     "line number": [
      1549,
      1551
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermefromroots": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      298
     ]
    },
    "len": {
     "line number": [
      290,
      296
     ]
    },
    "numpy.ones": {
     "line number": [
      291
     ]
    },
    "numpy.polynomial.hermite_e.hermeline": {
     "line number": [
      295
     ]
    },
    "numpy.polynomial.hermite_e.hermemul": {
     "line number": [
      299,
      301
     ]
    },
    "range": {
     "line number": [
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermegauss": {
  "data": {
   "lineno": 1714,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1752
     ]
    },
    "int": {
     "line number": [
      1750
     ]
    },
    "numpy.abs": {
     "line number": [
      1768
     ]
    },
    "numpy.array": {
     "line number": [
      1756
     ]
    },
    "numpy.linalg.eigvalsh": {
     "line number": [
      1758
     ]
    },
    "numpy.pi": {
     "line number": [
      1776
     ]
    },
    "numpy.polynomial.hermite_e._normed_hermite_e_n": {
     "line number": [
      1761,
      1762,
      1767
     ]
    },
    "numpy.polynomial.hermite_e.hermecompanion": {
     "line number": [
      1757
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1762,
      1776
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermegrid2d": {
  "data": {
   "lineno": 1002,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      1052,
      1053
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermegrid3d": {
  "data": {
   "lineno": 1116,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      1169,
      1170,
      1171
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermeint": {
  "data": {
   "lineno": 725,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      816,
      818,
      820,
      822,
      824,
      826
     ]
    },
    "int": {
     "line number": [
      813
     ]
    },
    "len": {
     "line number": [
      819,
      833,
      835
     ]
    },
    "list": {
     "line number": [
      833
     ]
    },
    "numpy.all": {
     "line number": [
      837
     ]
    },
    "numpy.array": {
     "line number": [
      808
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      827
     ]
    },
    "numpy.double": {
     "line number": [
      810
     ]
    },
    "numpy.empty": {
     "line number": [
      840
     ]
    },
    "numpy.iterable": {
     "line number": [
      811
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      832,
      847
     ]
    },
    "numpy.ndim": {
     "line number": [
      821,
      823
     ]
    },
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      845
     ]
    },
    "range": {
     "line number": [
      834,
      843
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermeline": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      235,
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermemul": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": {
    "len": {
     "line number": [
      494,
      494,
      501,
      504,
      508,
      511
     ]
    },
    "numpy.polynomial.hermite_e.hermeadd": {
     "line number": [
      515,
      516
     ]
    },
    "numpy.polynomial.hermite_e.hermemulx": {
     "line number": [
      515,
      516
     ]
    },
    "numpy.polynomial.hermite_e.hermesub": {
     "line number": [
      514
     ]
    },
    "range": {
     "line number": [
      511
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermemulx": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": {
    "len": {
     "line number": [
      441,
      444,
      447
     ]
    },
    "numpy.empty": {
     "line number": [
      444
     ]
    },
    "range": {
     "line number": [
      447
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermeone": {
  "data": {
   "lineno": 197
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite_e.hermepow": {
  "data": {
   "lineno": 584,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      622,
      624
     ]
    },
    "int": {
     "line number": [
      620
     ]
    },
    "numpy.array": {
     "line number": [
      626
     ]
    },
    "numpy.polynomial.hermite_e.hermemul": {
     "line number": [
      634
     ]
    },
    "pow": {
     "line number": [
      620,
      621
     ]
    },
    "range": {
     "line number": [
      633
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermeroots": {
  "data": {
   "lineno": 1612,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1660,
      1662
     ]
    },
    "numpy.array": {
     "line number": [
      1661,
      1663
     ]
    },
    "numpy.linalg.eigvals": {
     "line number": [
      1666
     ]
    },
    "numpy.polynomial.hermite_e.hermecompanion": {
     "line number": [
      1665
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermesub": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": {
    "len": {
     "line number": [
      394,
      394
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermetrim": {
  "data": {
   "lineno": 80
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite_e.hermeval": {
  "data": {
   "lineno": 851,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      923,
      925
     ]
    },
    "len": {
     "line number": [
      928,
      931,
      935,
      938
     ]
    },
    "list": {
     "line number": [
      923
     ]
    },
    "numpy.array": {
     "line number": [
      920
     ]
    },
    "numpy.asarray": {
     "line number": [
      924
     ]
    },
    "numpy.double": {
     "line number": [
      922
     ]
    },
    "numpy.ndarray": {
     "line number": [
      925
     ]
    },
    "range": {
     "line number": [
      938
     ]
    },
    "tuple": {
     "line number": [
      923
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermeval2d": {
  "data": {
   "lineno": 946,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      994
     ]
    },
    "ValueError": {
     "line number": [
      995
     ]
    },
    "numpy.array": {
     "line number": [
      993
     ]
    },
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      997,
      998
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermeval3d": {
  "data": {
   "lineno": 1057,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1107
     ]
    },
    "ValueError": {
     "line number": [
      1108
     ]
    },
    "numpy.array": {
     "line number": [
      1106
     ]
    },
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      1110,
      1111,
      1112
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermevander": {
  "data": {
   "lineno": 1175,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1221,
      1223
     ]
    },
    "int": {
     "line number": [
      1219
     ]
    },
    "numpy.array": {
     "line number": [
      1225
     ]
    },
    "numpy.empty": {
     "line number": [
      1228
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      1234
     ]
    },
    "range": {
     "line number": [
      1232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermevander2d": {
  "data": {
   "lineno": 1237,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1290
     ]
    },
    "id": {
     "line number": [
      1288,
      1288,
      1288
     ]
    },
    "int": {
     "line number": [
      1287
     ]
    },
    "numpy.array": {
     "line number": [
      1292
     ]
    },
    "numpy.polynomial.hermite_e.hermevander": {
     "line number": [
      1294,
      1295
     ]
    },
    "zip": {
     "line number": [
      1288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermevander3d": {
  "data": {
   "lineno": 1300,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1354
     ]
    },
    "id": {
     "line number": [
      1352,
      1352,
      1352
     ]
    },
    "int": {
     "line number": [
      1351
     ]
    },
    "numpy.array": {
     "line number": [
      1356
     ]
    },
    "numpy.polynomial.hermite_e.hermevander": {
     "line number": [
      1358,
      1359,
      1360
     ]
    },
    "zip": {
     "line number": [
      1352
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermeweight": {
  "data": {
   "lineno": 1781,
   "symbols_in_volume": {
    "numpy.exp": {
     "line number": [
      1804
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.hermex": {
  "data": {
   "lineno": 200
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite_e.hermezero": {
  "data": {
   "lineno": 194
  },
  "type": "constant"
 },
 "numpy.polynomial.hermite_e.la": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite_e.normalize_axis_index": {
  "data": {
   "shadows": "numpy.core.multiarray.normalize_axis_index"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite_e.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite_e.poly2herme": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "len": {
     "line number": [
      122
     ]
    },
    "numpy.polynomial.hermite_e.hermeadd": {
     "line number": [
      125
     ]
    },
    "numpy.polynomial.hermite_e.hermemulx": {
     "line number": [
      125
     ]
    },
    "range": {
     "line number": [
      124
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.hermite_e.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite_e.pu": {
  "data": {
   "shadows": "polyutils"
  },
  "type": "import"
 },
 "numpy.polynomial.hermite_e.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.polynomial.laguerre": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      188,
      191,
      194,
      197
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.laguerre.Laguerre": {
  "data": {
   "lineno": 1769,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1807,
      1808
     ]
    },
    "numpy.polynomial.laguerre.lagadd": {
     "line number": [
      1792
     ]
    },
    "numpy.polynomial.laguerre.lagder": {
     "line number": [
      1799
     ]
    },
    "numpy.polynomial.laguerre.lagdiv": {
     "line number": [
      1795
     ]
    },
    "numpy.polynomial.laguerre.lagdomain": {
     "line number": [
      1807,
      1808
     ]
    },
    "numpy.polynomial.laguerre.lagfit": {
     "line number": [
      1800
     ]
    },
    "numpy.polynomial.laguerre.lagfromroots": {
     "line number": [
      1803
     ]
    },
    "numpy.polynomial.laguerre.lagint": {
     "line number": [
      1798
     ]
    },
    "numpy.polynomial.laguerre.lagline": {
     "line number": [
      1801
     ]
    },
    "numpy.polynomial.laguerre.lagmul": {
     "line number": [
      1794
     ]
    },
    "numpy.polynomial.laguerre.lagpow": {
     "line number": [
      1796
     ]
    },
    "numpy.polynomial.laguerre.lagroots": {
     "line number": [
      1802
     ]
    },
    "numpy.polynomial.laguerre.lagsub": {
     "line number": [
      1793
     ]
    },
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      1797
     ]
    },
    "staticmethod": {
     "line number": [
      1792,
      1793,
      1794,
      1795,
      1796,
      1797,
      1798,
      1799,
      1800,
      1801,
      1802,
      1803
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.laguerre.__all__": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "numpy.polynomial.laguerre.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.laguerre.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.laguerre.la": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "numpy.polynomial.laguerre.lag2poly": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "len": {
     "line number": [
      169
     ]
    },
    "polyadd": {
     "line number": [
      179,
      180
     ]
    },
    "polymulx": {
     "line number": [
      179,
      180
     ]
    },
    "polysub": {
     "line number": [
      178,
      179,
      180
     ]
    },
    "range": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagadd": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": {
    "len": {
     "line number": [
      343,
      343
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagcompanion": {
  "data": {
   "lineno": 1572,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1600
     ]
    },
    "len": {
     "line number": [
      1599,
      1601,
      1604
     ]
    },
    "numpy.arange": {
     "line number": [
      1609,
      1610
     ]
    },
    "numpy.array": {
     "line number": [
      1602
     ]
    },
    "numpy.zeros": {
     "line number": [
      1605
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagder": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      701,
      703,
      705
     ]
    },
    "int": {
     "line number": [
      698
     ]
    },
    "len": {
     "line number": [
      712
     ]
    },
    "numpy.array": {
     "line number": [
      695
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      706
     ]
    },
    "numpy.double": {
     "line number": [
      697
     ]
    },
    "numpy.empty": {
     "line number": [
      719
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      711,
      725
     ]
    },
    "range": {
     "line number": [
      716,
      720
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagdiv": {
  "data": {
   "lineno": 521,
   "symbols_in_volume": {
    "ZeroDivisionError": {
     "line number": [
      567
     ]
    },
    "len": {
     "line number": [
      569,
      570
     ]
    },
    "numpy.empty": {
     "line number": [
      576
     ]
    },
    "numpy.polynomial.laguerre.lagmul": {
     "line number": [
      579
     ]
    },
    "range": {
     "line number": [
      578
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagdomain": {
  "data": {
   "lineno": 188
  },
  "type": "constant"
 },
 "numpy.polynomial.laguerre.lagfit": {
  "data": {
   "lineno": 1371,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1501,
      1505,
      1507,
      1509,
      1511,
      1529,
      1531
     ]
    },
    "ValueError": {
     "line number": [
      1503
     ]
    },
    "issubclass": {
     "line number": [
      1542
     ]
    },
    "len": {
     "line number": [
      1510,
      1510,
      1520,
      1530,
      1530,
      1539
     ]
    },
    "numpy.asarray": {
     "line number": [
      1495,
      1496,
      1497,
      1527
     ]
    },
    "numpy.complexfloating": {
     "line number": [
      1542
     ]
    },
    "numpy.finfo": {
     "line number": [
      1539
     ]
    },
    "numpy.linalg.lstsq": {
     "line number": [
      1549
     ]
    },
    "numpy.polynomial.laguerre.lagvander": {
     "line number": [
      1516,
      1521
     ]
    },
    "numpy.polynomial.laguerre.warnings": {
     "line number": [
      1564
     ]
    },
    "numpy.sort": {
     "line number": [
      1518
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1543,
      1545
     ]
    },
    "numpy.square": {
     "line number": [
      1543,
      1543,
      1545
     ]
    },
    "numpy.zeros": {
     "line number": [
      1555,
      1557
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagfromroots": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      294
     ]
    },
    "len": {
     "line number": [
      286,
      292
     ]
    },
    "numpy.ones": {
     "line number": [
      287
     ]
    },
    "numpy.polynomial.laguerre.lagline": {
     "line number": [
      291
     ]
    },
    "numpy.polynomial.laguerre.lagmul": {
     "line number": [
      295,
      297
     ]
    },
    "range": {
     "line number": [
      295
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.laggauss": {
  "data": {
   "lineno": 1675,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1713
     ]
    },
    "int": {
     "line number": [
      1711
     ]
    },
    "numpy.abs": {
     "line number": [
      1729,
      1730
     ]
    },
    "numpy.array": {
     "line number": [
      1717
     ]
    },
    "numpy.linalg.eigvalsh": {
     "line number": [
      1719
     ]
    },
    "numpy.polynomial.laguerre.lagcompanion": {
     "line number": [
      1718
     ]
    },
    "numpy.polynomial.laguerre.lagder": {
     "line number": [
      1723
     ]
    },
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      1722,
      1723,
      1728
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.laggrid2d": {
  "data": {
   "lineno": 1008,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      1058,
      1059
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.laggrid3d": {
  "data": {
   "lineno": 1122,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      1175,
      1176,
      1177
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagint": {
  "data": {
   "lineno": 729,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      821,
      823,
      825,
      827,
      829,
      831
     ]
    },
    "int": {
     "line number": [
      818
     ]
    },
    "len": {
     "line number": [
      824,
      838,
      840
     ]
    },
    "list": {
     "line number": [
      838
     ]
    },
    "numpy.all": {
     "line number": [
      842
     ]
    },
    "numpy.array": {
     "line number": [
      813
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      832
     ]
    },
    "numpy.double": {
     "line number": [
      815
     ]
    },
    "numpy.empty": {
     "line number": [
      845
     ]
    },
    "numpy.iterable": {
     "line number": [
      816
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      837,
      853
     ]
    },
    "numpy.ndim": {
     "line number": [
      826,
      828
     ]
    },
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      851
     ]
    },
    "range": {
     "line number": [
      839,
      848
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagline": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      231,
      233
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagmul": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": {
    "len": {
     "line number": [
      496,
      496,
      503,
      506,
      510,
      513
     ]
    },
    "numpy.polynomial.laguerre.lagadd": {
     "line number": [
      517,
      518
     ]
    },
    "numpy.polynomial.laguerre.lagmulx": {
     "line number": [
      517,
      518
     ]
    },
    "numpy.polynomial.laguerre.lagsub": {
     "line number": [
      516,
      517,
      518
     ]
    },
    "range": {
     "line number": [
      513
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagmulx": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": {
    "len": {
     "line number": [
      442,
      445,
      448
     ]
    },
    "numpy.empty": {
     "line number": [
      445
     ]
    },
    "range": {
     "line number": [
      448
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagone": {
  "data": {
   "lineno": 194
  },
  "type": "constant"
 },
 "numpy.polynomial.laguerre.lagpow": {
  "data": {
   "lineno": 586,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      624,
      626
     ]
    },
    "int": {
     "line number": [
      622
     ]
    },
    "numpy.array": {
     "line number": [
      628
     ]
    },
    "numpy.polynomial.laguerre.lagmul": {
     "line number": [
      636
     ]
    },
    "pow": {
     "line number": [
      622,
      623
     ]
    },
    "range": {
     "line number": [
      635
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagroots": {
  "data": {
   "lineno": 1616,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1664,
      1666
     ]
    },
    "numpy.array": {
     "line number": [
      1665,
      1667
     ]
    },
    "numpy.linalg.eigvals": {
     "line number": [
      1670
     ]
    },
    "numpy.polynomial.laguerre.lagcompanion": {
     "line number": [
      1669
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagsub": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "len": {
     "line number": [
      391,
      391
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagtrim": {
  "data": {
   "lineno": 79
  },
  "type": "constant"
 },
 "numpy.polynomial.laguerre.lagval": {
  "data": {
   "lineno": 857,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      929,
      931
     ]
    },
    "len": {
     "line number": [
      934,
      937,
      941,
      944
     ]
    },
    "list": {
     "line number": [
      929
     ]
    },
    "numpy.array": {
     "line number": [
      926
     ]
    },
    "numpy.asarray": {
     "line number": [
      930
     ]
    },
    "numpy.double": {
     "line number": [
      928
     ]
    },
    "numpy.ndarray": {
     "line number": [
      931
     ]
    },
    "range": {
     "line number": [
      944
     ]
    },
    "tuple": {
     "line number": [
      929
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagval2d": {
  "data": {
   "lineno": 952,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1000
     ]
    },
    "ValueError": {
     "line number": [
      1001
     ]
    },
    "numpy.array": {
     "line number": [
      999
     ]
    },
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      1003,
      1004
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagval3d": {
  "data": {
   "lineno": 1063,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1113
     ]
    },
    "ValueError": {
     "line number": [
      1114
     ]
    },
    "numpy.array": {
     "line number": [
      1112
     ]
    },
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      1116,
      1117,
      1118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagvander": {
  "data": {
   "lineno": 1181,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1227,
      1229
     ]
    },
    "int": {
     "line number": [
      1225
     ]
    },
    "numpy.array": {
     "line number": [
      1231
     ]
    },
    "numpy.empty": {
     "line number": [
      1234
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      1240
     ]
    },
    "range": {
     "line number": [
      1238
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagvander2d": {
  "data": {
   "lineno": 1243,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1296
     ]
    },
    "id": {
     "line number": [
      1294,
      1294,
      1294
     ]
    },
    "int": {
     "line number": [
      1293
     ]
    },
    "numpy.array": {
     "line number": [
      1298
     ]
    },
    "numpy.polynomial.laguerre.lagvander": {
     "line number": [
      1300,
      1301
     ]
    },
    "zip": {
     "line number": [
      1294
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagvander3d": {
  "data": {
   "lineno": 1306,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1360
     ]
    },
    "id": {
     "line number": [
      1358,
      1358,
      1358
     ]
    },
    "int": {
     "line number": [
      1357
     ]
    },
    "numpy.array": {
     "line number": [
      1362
     ]
    },
    "numpy.polynomial.laguerre.lagvander": {
     "line number": [
      1364,
      1365,
      1366
     ]
    },
    "zip": {
     "line number": [
      1358
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagweight": {
  "data": {
   "lineno": 1739,
   "symbols_in_volume": {
    "numpy.exp": {
     "line number": [
      1762
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.lagx": {
  "data": {
   "lineno": 197
  },
  "type": "constant"
 },
 "numpy.polynomial.laguerre.lagzero": {
  "data": {
   "lineno": 191
  },
  "type": "constant"
 },
 "numpy.polynomial.laguerre.normalize_axis_index": {
  "data": {
   "shadows": "numpy.core.multiarray.normalize_axis_index"
  },
  "type": "import"
 },
 "numpy.polynomial.laguerre.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.laguerre.poly2lag": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "len": {
     "line number": [
      121
     ]
    },
    "numpy.polynomial.laguerre.lagadd": {
     "line number": [
      124
     ]
    },
    "numpy.polynomial.laguerre.lagmulx": {
     "line number": [
      124
     ]
    },
    "range": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.laguerre.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.laguerre.pu": {
  "data": {
   "shadows": "polyutils"
  },
  "type": "import"
 },
 "numpy.polynomial.laguerre.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.polynomial.legendre": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      219,
      222,
      225,
      228
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.legendre.Legendre": {
  "data": {
   "lineno": 1804,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1842,
      1843
     ]
    },
    "numpy.polynomial.legendre.legadd": {
     "line number": [
      1827
     ]
    },
    "numpy.polynomial.legendre.legder": {
     "line number": [
      1834
     ]
    },
    "numpy.polynomial.legendre.legdiv": {
     "line number": [
      1830
     ]
    },
    "numpy.polynomial.legendre.legdomain": {
     "line number": [
      1842,
      1843
     ]
    },
    "numpy.polynomial.legendre.legfit": {
     "line number": [
      1835
     ]
    },
    "numpy.polynomial.legendre.legfromroots": {
     "line number": [
      1838
     ]
    },
    "numpy.polynomial.legendre.legint": {
     "line number": [
      1833
     ]
    },
    "numpy.polynomial.legendre.legline": {
     "line number": [
      1836
     ]
    },
    "numpy.polynomial.legendre.legmul": {
     "line number": [
      1829
     ]
    },
    "numpy.polynomial.legendre.legpow": {
     "line number": [
      1831
     ]
    },
    "numpy.polynomial.legendre.legroots": {
     "line number": [
      1837
     ]
    },
    "numpy.polynomial.legendre.legsub": {
     "line number": [
      1828
     ]
    },
    "numpy.polynomial.legendre.legval": {
     "line number": [
      1832
     ]
    },
    "staticmethod": {
     "line number": [
      1827,
      1828,
      1829,
      1830,
      1831,
      1832,
      1833,
      1834,
      1835,
      1836,
      1837,
      1838
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.legendre.__all__": {
  "data": {
   "lineno": 94
  },
  "type": "constant"
 },
 "numpy.polynomial.legendre.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.legendre.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.legendre.la": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "numpy.polynomial.legendre.leg2poly": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "len": {
     "line number": [
      200
     ]
    },
    "polyadd": {
     "line number": [
      210,
      211
     ]
    },
    "polymulx": {
     "line number": [
      210,
      211
     ]
    },
    "polysub": {
     "line number": [
      209
     ]
    },
    "range": {
     "line number": [
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legadd": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": {
    "len": {
     "line number": [
      374,
      374
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legcompanion": {
  "data": {
   "lineno": 1605,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1634
     ]
    },
    "len": {
     "line number": [
      1633,
      1635,
      1638
     ]
    },
    "numpy.arange": {
     "line number": [
      1640,
      1643
     ]
    },
    "numpy.array": {
     "line number": [
      1636
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1640
     ]
    },
    "numpy.zeros": {
     "line number": [
      1639
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legder": {
  "data": {
   "lineno": 679,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      745,
      747,
      749
     ]
    },
    "int": {
     "line number": [
      742
     ]
    },
    "len": {
     "line number": [
      756
     ]
    },
    "numpy.array": {
     "line number": [
      739
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      750
     ]
    },
    "numpy.double": {
     "line number": [
      741
     ]
    },
    "numpy.empty": {
     "line number": [
      763
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      755,
      771
     ]
    },
    "range": {
     "line number": [
      760,
      764
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legdiv": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": {
    "ZeroDivisionError": {
     "line number": [
      609
     ]
    },
    "len": {
     "line number": [
      611,
      612
     ]
    },
    "numpy.empty": {
     "line number": [
      618
     ]
    },
    "numpy.polynomial.legendre.legmul": {
     "line number": [
      621
     ]
    },
    "range": {
     "line number": [
      620
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legdomain": {
  "data": {
   "lineno": 219
  },
  "type": "constant"
 },
 "numpy.polynomial.legendre.legfit": {
  "data": {
   "lineno": 1407,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1534,
      1538,
      1540,
      1542,
      1544,
      1562,
      1564
     ]
    },
    "ValueError": {
     "line number": [
      1536
     ]
    },
    "issubclass": {
     "line number": [
      1575
     ]
    },
    "len": {
     "line number": [
      1543,
      1543,
      1553,
      1563,
      1563,
      1572
     ]
    },
    "numpy.asarray": {
     "line number": [
      1528,
      1529,
      1530,
      1560
     ]
    },
    "numpy.complexfloating": {
     "line number": [
      1575
     ]
    },
    "numpy.finfo": {
     "line number": [
      1572
     ]
    },
    "numpy.linalg.lstsq": {
     "line number": [
      1582
     ]
    },
    "numpy.polynomial.legendre.legvander": {
     "line number": [
      1549,
      1554
     ]
    },
    "numpy.polynomial.legendre.warnings": {
     "line number": [
      1597
     ]
    },
    "numpy.sort": {
     "line number": [
      1551
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1576,
      1578
     ]
    },
    "numpy.square": {
     "line number": [
      1576,
      1576,
      1578
     ]
    },
    "numpy.zeros": {
     "line number": [
      1588,
      1590
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legfromroots": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      324
     ]
    },
    "len": {
     "line number": [
      316,
      322
     ]
    },
    "numpy.ones": {
     "line number": [
      317
     ]
    },
    "numpy.polynomial.legendre.legline": {
     "line number": [
      321
     ]
    },
    "numpy.polynomial.legendre.legmul": {
     "line number": [
      325,
      327
     ]
    },
    "range": {
     "line number": [
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.leggauss": {
  "data": {
   "lineno": 1705,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1743
     ]
    },
    "int": {
     "line number": [
      1741
     ]
    },
    "numpy.abs": {
     "line number": [
      1759,
      1760
     ]
    },
    "numpy.array": {
     "line number": [
      1747
     ]
    },
    "numpy.linalg.eigvalsh": {
     "line number": [
      1749
     ]
    },
    "numpy.polynomial.legendre.legcompanion": {
     "line number": [
      1748
     ]
    },
    "numpy.polynomial.legendre.legder": {
     "line number": [
      1753
     ]
    },
    "numpy.polynomial.legendre.legval": {
     "line number": [
      1752,
      1753,
      1758
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.leggrid2d": {
  "data": {
   "lineno": 1051,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legval": {
     "line number": [
      1101,
      1102
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.leggrid3d": {
  "data": {
   "lineno": 1165,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legval": {
     "line number": [
      1218,
      1219,
      1220
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legint": {
  "data": {
   "lineno": 775,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      868,
      870,
      872,
      874,
      876,
      878
     ]
    },
    "int": {
     "line number": [
      865
     ]
    },
    "len": {
     "line number": [
      871,
      885,
      887
     ]
    },
    "list": {
     "line number": [
      885
     ]
    },
    "numpy.all": {
     "line number": [
      889
     ]
    },
    "numpy.array": {
     "line number": [
      860
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      879
     ]
    },
    "numpy.double": {
     "line number": [
      862
     ]
    },
    "numpy.empty": {
     "line number": [
      892
     ]
    },
    "numpy.iterable": {
     "line number": [
      863
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      884,
      903
     ]
    },
    "numpy.ndim": {
     "line number": [
      873,
      875
     ]
    },
    "numpy.polynomial.legendre.legval": {
     "line number": [
      901
     ]
    },
    "range": {
     "line number": [
      886,
      897
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legline": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      262,
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legmul": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": {
    "len": {
     "line number": [
      535,
      535,
      542,
      545,
      549,
      552
     ]
    },
    "numpy.polynomial.legendre.legadd": {
     "line number": [
      556,
      557
     ]
    },
    "numpy.polynomial.legendre.legmulx": {
     "line number": [
      556,
      557
     ]
    },
    "numpy.polynomial.legendre.legsub": {
     "line number": [
      555
     ]
    },
    "range": {
     "line number": [
      552
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legmulx": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "len": {
     "line number": [
      477,
      480,
      483
     ]
    },
    "numpy.empty": {
     "line number": [
      480
     ]
    },
    "range": {
     "line number": [
      483
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legone": {
  "data": {
   "lineno": 225
  },
  "type": "constant"
 },
 "numpy.polynomial.legendre.legpow": {
  "data": {
   "lineno": 628,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      663,
      665
     ]
    },
    "int": {
     "line number": [
      661
     ]
    },
    "numpy.array": {
     "line number": [
      667
     ]
    },
    "numpy.polynomial.legendre.legmul": {
     "line number": [
      675
     ]
    },
    "pow": {
     "line number": [
      661,
      662
     ]
    },
    "range": {
     "line number": [
      674
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legroots": {
  "data": {
   "lineno": 1649,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1694,
      1696
     ]
    },
    "numpy.array": {
     "line number": [
      1695,
      1697
     ]
    },
    "numpy.linalg.eigvals": {
     "line number": [
      1700
     ]
    },
    "numpy.polynomial.legendre.legcompanion": {
     "line number": [
      1699
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legsub": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "len": {
     "line number": [
      426,
      426
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legtrim": {
  "data": {
   "lineno": 102
  },
  "type": "constant"
 },
 "numpy.polynomial.legendre.legval": {
  "data": {
   "lineno": 907,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      972,
      974
     ]
    },
    "len": {
     "line number": [
      977,
      980,
      984,
      987
     ]
    },
    "list": {
     "line number": [
      972
     ]
    },
    "numpy.array": {
     "line number": [
      969
     ]
    },
    "numpy.asarray": {
     "line number": [
      973
     ]
    },
    "numpy.double": {
     "line number": [
      971
     ]
    },
    "numpy.ndarray": {
     "line number": [
      974
     ]
    },
    "range": {
     "line number": [
      987
     ]
    },
    "tuple": {
     "line number": [
      972
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legval2d": {
  "data": {
   "lineno": 995,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1043
     ]
    },
    "ValueError": {
     "line number": [
      1044
     ]
    },
    "numpy.array": {
     "line number": [
      1042
     ]
    },
    "numpy.polynomial.legendre.legval": {
     "line number": [
      1046,
      1047
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legval3d": {
  "data": {
   "lineno": 1106,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1156
     ]
    },
    "ValueError": {
     "line number": [
      1157
     ]
    },
    "numpy.array": {
     "line number": [
      1155
     ]
    },
    "numpy.polynomial.legendre.legval": {
     "line number": [
      1159,
      1160,
      1161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legvander": {
  "data": {
   "lineno": 1224,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1261,
      1263
     ]
    },
    "int": {
     "line number": [
      1259
     ]
    },
    "numpy.array": {
     "line number": [
      1265
     ]
    },
    "numpy.empty": {
     "line number": [
      1268
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      1276
     ]
    },
    "range": {
     "line number": [
      1274
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legvander2d": {
  "data": {
   "lineno": 1279,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1332
     ]
    },
    "id": {
     "line number": [
      1330,
      1330,
      1330
     ]
    },
    "int": {
     "line number": [
      1329
     ]
    },
    "numpy.array": {
     "line number": [
      1334
     ]
    },
    "numpy.polynomial.legendre.legvander": {
     "line number": [
      1336,
      1337
     ]
    },
    "zip": {
     "line number": [
      1330
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legvander3d": {
  "data": {
   "lineno": 1342,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1396
     ]
    },
    "id": {
     "line number": [
      1394,
      1394,
      1394
     ]
    },
    "int": {
     "line number": [
      1393
     ]
    },
    "numpy.array": {
     "line number": [
      1398
     ]
    },
    "numpy.polynomial.legendre.legvander": {
     "line number": [
      1400,
      1401,
      1402
     ]
    },
    "zip": {
     "line number": [
      1394
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legweight": {
  "data": {
   "lineno": 1773
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.legx": {
  "data": {
   "lineno": 228
  },
  "type": "constant"
 },
 "numpy.polynomial.legendre.legzero": {
  "data": {
   "lineno": 222
  },
  "type": "constant"
 },
 "numpy.polynomial.legendre.normalize_axis_index": {
  "data": {
   "shadows": "numpy.core.multiarray.normalize_axis_index"
  },
  "type": "import"
 },
 "numpy.polynomial.legendre.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.legendre.poly2leg": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "len": {
     "line number": [
      146
     ]
    },
    "numpy.polynomial.legendre.legadd": {
     "line number": [
      149
     ]
    },
    "numpy.polynomial.legendre.legmulx": {
     "line number": [
      149
     ]
    },
    "range": {
     "line number": [
      148
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.legendre.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.legendre.pu": {
  "data": {
   "shadows": "polyutils"
  },
  "type": "import"
 },
 "numpy.polynomial.legendre.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.polynomial.polynomial": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      83,
      86,
      89,
      92
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.polynomial.Polynomial": {
  "data": {
   "lineno": 1614,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1652,
      1653
     ]
    },
    "numpy.polynomial.polynomial.polyadd": {
     "line number": [
      1637
     ]
    },
    "numpy.polynomial.polynomial.polyder": {
     "line number": [
      1644
     ]
    },
    "numpy.polynomial.polynomial.polydiv": {
     "line number": [
      1640
     ]
    },
    "numpy.polynomial.polynomial.polydomain": {
     "line number": [
      1652,
      1653
     ]
    },
    "numpy.polynomial.polynomial.polyfit": {
     "line number": [
      1645
     ]
    },
    "numpy.polynomial.polynomial.polyfromroots": {
     "line number": [
      1648
     ]
    },
    "numpy.polynomial.polynomial.polyint": {
     "line number": [
      1643
     ]
    },
    "numpy.polynomial.polynomial.polyline": {
     "line number": [
      1646
     ]
    },
    "numpy.polynomial.polynomial.polymul": {
     "line number": [
      1639
     ]
    },
    "numpy.polynomial.polynomial.polypow": {
     "line number": [
      1641
     ]
    },
    "numpy.polynomial.polynomial.polyroots": {
     "line number": [
      1647
     ]
    },
    "numpy.polynomial.polynomial.polysub": {
     "line number": [
      1638
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      1642
     ]
    },
    "staticmethod": {
     "line number": [
      1637,
      1638,
      1639,
      1640,
      1641,
      1642,
      1643,
      1644,
      1645,
      1646,
      1647,
      1648
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.polynomial.Polynomial._repr_latex_term": {
  "data": {
   "lineno": 1656,
   "symbols_in_volume": {
    "staticmethod": {
     "line number": [
      1656
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.__all__": {
  "data": {
   "lineno": 60
  },
  "type": "constant"
 },
 "numpy.polynomial.polynomial.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.polynomial.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.polynomial.la": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "numpy.polynomial.polynomial.normalize_axis_index": {
  "data": {
   "shadows": "numpy.core.multiarray.normalize_axis_index"
  },
  "type": "import"
 },
 "numpy.polynomial.polynomial.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.polynomial.polyadd": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "len": {
     "line number": [
      243,
      243
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polycompanion": {
  "data": {
   "lineno": 1512,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1540
     ]
    },
    "len": {
     "line number": [
      1539,
      1541,
      1544
     ]
    },
    "numpy.array": {
     "line number": [
      1542
     ]
    },
    "numpy.zeros": {
     "line number": [
      1545
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyder": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      547,
      549,
      551
     ]
    },
    "int": {
     "line number": [
      544
     ]
    },
    "len": {
     "line number": [
      558
     ]
    },
    "numpy.array": {
     "line number": [
      539
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      552
     ]
    },
    "numpy.empty": {
     "line number": [
      565
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      557,
      569
     ]
    },
    "range": {
     "line number": [
      562,
      566
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polydiv": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": {
    "ZeroDivisionError": {
     "line number": [
      412
     ]
    },
    "len": {
     "line number": [
      414,
      415
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polydomain": {
  "data": {
   "lineno": 83
  },
  "type": "constant"
 },
 "numpy.polynomial.polynomial.polyfit": {
  "data": {
   "lineno": 1293,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      1441,
      1445,
      1447,
      1449,
      1451,
      1469,
      1471
     ]
    },
    "ValueError": {
     "line number": [
      1443
     ]
    },
    "issubclass": {
     "line number": [
      1482
     ]
    },
    "len": {
     "line number": [
      1450,
      1450,
      1460,
      1470,
      1470,
      1479
     ]
    },
    "numpy.asarray": {
     "line number": [
      1435,
      1436,
      1437,
      1467
     ]
    },
    "numpy.complexfloating": {
     "line number": [
      1482
     ]
    },
    "numpy.finfo": {
     "line number": [
      1479
     ]
    },
    "numpy.linalg.lstsq": {
     "line number": [
      1489
     ]
    },
    "numpy.polynomial.polynomial.polyvander": {
     "line number": [
      1456,
      1461
     ]
    },
    "numpy.polynomial.polynomial.warnings": {
     "line number": [
      1504
     ]
    },
    "numpy.sort": {
     "line number": [
      1458
     ]
    },
    "numpy.sqrt": {
     "line number": [
      1483,
      1485
     ]
    },
    "numpy.square": {
     "line number": [
      1483,
      1483,
      1485
     ]
    },
    "numpy.zeros": {
     "line number": [
      1495,
      1497
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyfromroots": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      199
     ]
    },
    "len": {
     "line number": [
      191,
      197
     ]
    },
    "numpy.ones": {
     "line number": [
      192
     ]
    },
    "numpy.polynomial.polynomial.polyline": {
     "line number": [
      196
     ]
    },
    "numpy.polynomial.polynomial.polymul": {
     "line number": [
      200,
      202
     ]
    },
    "range": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polygrid2d": {
  "data": {
   "lineno": 937,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      987,
      988
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polygrid3d": {
  "data": {
   "lineno": 1051,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      1104,
      1105,
      1106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyint": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      661,
      663,
      665,
      667,
      669,
      671
     ]
    },
    "int": {
     "line number": [
      658
     ]
    },
    "len": {
     "line number": [
      664,
      677,
      680
     ]
    },
    "list": {
     "line number": [
      677
     ]
    },
    "numpy.all": {
     "line number": [
      682
     ]
    },
    "numpy.array": {
     "line number": [
      651
     ]
    },
    "numpy.core.multiarray.normalize_axis_index": {
     "line number": [
      672
     ]
    },
    "numpy.empty": {
     "line number": [
      685
     ]
    },
    "numpy.iterable": {
     "line number": [
      656
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      678,
      692
     ]
    },
    "numpy.ndim": {
     "line number": [
      666,
      668
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      690
     ]
    },
    "range": {
     "line number": [
      679,
      688
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyline": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      128,
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polymul": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": {
    "numpy.convolve": {
     "line number": [
      372
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polymulx": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "len": {
     "line number": [
      329,
      332
     ]
    },
    "numpy.empty": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyone": {
  "data": {
   "lineno": 89
  },
  "type": "constant"
 },
 "numpy.polynomial.polynomial.polypow": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      471,
      473
     ]
    },
    "int": {
     "line number": [
      469
     ]
    },
    "numpy.array": {
     "line number": [
      475
     ]
    },
    "numpy.convolve": {
     "line number": [
      483
     ]
    },
    "pow": {
     "line number": [
      469,
      470
     ]
    },
    "range": {
     "line number": [
      482
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyroots": {
  "data": {
   "lineno": 1552,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1599,
      1601
     ]
    },
    "numpy.array": {
     "line number": [
      1600,
      1602
     ]
    },
    "numpy.linalg.eigvals": {
     "line number": [
      1605
     ]
    },
    "numpy.polynomial.polynomial.polycompanion": {
     "line number": [
      1604
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polysub": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "len": {
     "line number": [
      288,
      288
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polytrim": {
  "data": {
   "lineno": 75
  },
  "type": "constant"
 },
 "numpy.polynomial.polynomial.polyval": {
  "data": {
   "lineno": 696,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      781,
      783
     ]
    },
    "len": {
     "line number": [
      787
     ]
    },
    "list": {
     "line number": [
      781
     ]
    },
    "numpy.array": {
     "line number": [
      777
     ]
    },
    "numpy.asarray": {
     "line number": [
      782
     ]
    },
    "numpy.ndarray": {
     "line number": [
      783
     ]
    },
    "range": {
     "line number": [
      787
     ]
    },
    "tuple": {
     "line number": [
      781
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyval2d": {
  "data": {
   "lineno": 880,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      929
     ]
    },
    "ValueError": {
     "line number": [
      930
     ]
    },
    "numpy.array": {
     "line number": [
      928
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      932,
      933
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyval3d": {
  "data": {
   "lineno": 992,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1042
     ]
    },
    "ValueError": {
     "line number": [
      1043
     ]
    },
    "numpy.array": {
     "line number": [
      1041
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      1045,
      1046,
      1047
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyvalfromroots": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      876
     ]
    },
    "isinstance": {
     "line number": [
      870,
      872
     ]
    },
    "list": {
     "line number": [
      870
     ]
    },
    "numpy.array": {
     "line number": [
      867
     ]
    },
    "numpy.asarray": {
     "line number": [
      871
     ]
    },
    "numpy.double": {
     "line number": [
      869
     ]
    },
    "numpy.ndarray": {
     "line number": [
      872
     ]
    },
    "numpy.prod": {
     "line number": [
      877
     ]
    },
    "tuple": {
     "line number": [
      870
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyvander": {
  "data": {
   "lineno": 1110,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1150,
      1152
     ]
    },
    "int": {
     "line number": [
      1148
     ]
    },
    "numpy.array": {
     "line number": [
      1154
     ]
    },
    "numpy.empty": {
     "line number": [
      1157
     ]
    },
    "numpy.moveaxis": {
     "line number": [
      1163
     ]
    },
    "range": {
     "line number": [
      1161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyvander2d": {
  "data": {
   "lineno": 1166,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1214
     ]
    },
    "id": {
     "line number": [
      1212,
      1212,
      1212
     ]
    },
    "int": {
     "line number": [
      1211
     ]
    },
    "numpy.array": {
     "line number": [
      1216
     ]
    },
    "numpy.polynomial.polynomial.polyvander": {
     "line number": [
      1218,
      1219
     ]
    },
    "zip": {
     "line number": [
      1212
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyvander3d": {
  "data": {
   "lineno": 1226,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1280
     ]
    },
    "id": {
     "line number": [
      1278,
      1278,
      1278
     ]
    },
    "int": {
     "line number": [
      1277
     ]
    },
    "numpy.array": {
     "line number": [
      1282
     ]
    },
    "numpy.polynomial.polynomial.polyvander": {
     "line number": [
      1284,
      1285,
      1286
     ]
    },
    "zip": {
     "line number": [
      1278
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polynomial.polyx": {
  "data": {
   "lineno": 92
  },
  "type": "constant"
 },
 "numpy.polynomial.polynomial.polyzero": {
  "data": {
   "lineno": 86
  },
  "type": "constant"
 },
 "numpy.polynomial.polynomial.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.polynomial.pu": {
  "data": {
   "shadows": "polyutils"
  },
  "type": "import"
 },
 "numpy.polynomial.polynomial.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.polynomial.polyutils": {
  "data": {},
  "type": "module"
 },
 "numpy.polynomial.polyutils.PolyBase": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "object": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.polyutils.PolyDomainError": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "numpy.polynomial.polyutils.PolyError": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.polyutils.PolyError": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.polyutils.RankWarning": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.polyutils.__all__": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "numpy.polynomial.polyutils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.polyutils.as_series": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      194
     ]
    },
    "ValueError": {
     "line number": [
      176,
      178,
      195
     ]
    },
    "any": {
     "line number": [
      177,
      182
     ]
    },
    "len": {
     "line number": [
      186
     ]
    },
    "min": {
     "line number": [
      175
     ]
    },
    "numpy.array": {
     "line number": [
      174,
      196
     ]
    },
    "numpy.common_type": {
     "line number": [
      193
     ]
    },
    "numpy.dtype": {
     "line number": [
      182,
      185,
      186
     ]
    },
    "numpy.empty": {
     "line number": [
      186
     ]
    },
    "numpy.polynomial.polyutils.trimseq": {
     "line number": [
      180
     ]
    },
    "object": {
     "line number": [
      182,
      185,
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polyutils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.polyutils.getdomain": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      296,
      296
     ]
    },
    "numpy.array": {
     "line number": [
      296,
      298
     ]
    },
    "numpy.polynomial.polyutils.as_series": {
     "line number": [
      292
     ]
    },
    "numpy.typecodes": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polyutils.mapdomain": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": {
    "numpy.asanyarray": {
     "line number": [
      410
     ]
    },
    "numpy.polynomial.polyutils.mapparms": {
     "line number": [
      411
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polyutils.mapparms": {
  "data": {
   "lineno": 300
  },
  "type": "function"
 },
 "numpy.polynomial.polyutils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.polyutils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.polyutils.trimcoef": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      245
     ]
    },
    "len": {
     "line number": [
      249
     ]
    },
    "numpy.abs": {
     "line number": [
      248
     ]
    },
    "numpy.nonzero": {
     "line number": [
      248
     ]
    },
    "numpy.polynomial.polyutils.as_series": {
     "line number": [
      247
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.polyutils.trimseq": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "len": {
     "line number": [
      115,
      118
     ]
    },
    "range": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      9
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      11
     ]
    },
    "numpy.polynomial.setup.configuration": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.polynomial.setup.configuration": {
  "data": {
   "lineno": 3,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      5
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.polynomial.test": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "numpy.polynomial.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.polynomial.tests.test_chebyshev": {
  "data": {
   "symbols_in_volume": {
    "numpy.polynomial.tests.test_chebyshev.T0": {
     "line number": [
      30
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.T1": {
     "line number": [
      30
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.T2": {
     "line number": [
      30
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.T3": {
     "line number": [
      30
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.T4": {
     "line number": [
      30
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.T5": {
     "line number": [
      30
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.T6": {
     "line number": [
      30
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.T7": {
     "line number": [
      30
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.T8": {
     "line number": [
      30
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.T9": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.tests.test_chebyshev.T0": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_chebyshev.T1": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_chebyshev.T2": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_chebyshev.T3": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_chebyshev.T4": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_chebyshev.T5": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_chebyshev.T6": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_chebyshev.T7": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_chebyshev.T8": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_chebyshev.T9": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_chebyshev.TestArithmetic": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "object": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebadd": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "max": {
     "line number": [
      71
     ]
    },
    "numpy.polynomial.chebyshev.chebadd": {
     "line number": [
      74
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.trim": {
     "line number": [
      75,
      75
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      75
     ]
    },
    "numpy.zeros": {
     "line number": [
      71
     ]
    },
    "range": {
     "line number": [
      68,
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebdiv": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebadd": {
     "line number": [
      111,
      113
     ]
    },
    "numpy.polynomial.chebyshev.chebdiv": {
     "line number": [
      112
     ]
    },
    "numpy.polynomial.chebyshev.chebmul": {
     "line number": [
      113
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.trim": {
     "line number": [
      114,
      114
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      114
     ]
    },
    "range": {
     "line number": [
      106,
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebmul": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "abs": {
     "line number": [
      101
     ]
    },
    "numpy.polynomial.chebyshev.chebmul": {
     "line number": [
      102
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.trim": {
     "line number": [
      103,
      103
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      103
     ]
    },
    "numpy.zeros": {
     "line number": [
      99
     ]
    },
    "range": {
     "line number": [
      96,
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebmulx": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebmulx": {
     "line number": [
      88,
      89,
      93
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      88,
      89,
      93
     ]
    },
    "range": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebpow": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      121
     ]
    },
    "numpy.arange": {
     "line number": [
      120
     ]
    },
    "numpy.array": {
     "line number": [
      121
     ]
    },
    "numpy.polynomial.chebyshev.chebmul": {
     "line number": [
      121
     ]
    },
    "numpy.polynomial.chebyshev.chebpow": {
     "line number": [
      122
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.trim": {
     "line number": [
      123,
      123
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      123
     ]
    },
    "range": {
     "line number": [
      117,
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebsub": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "max": {
     "line number": [
      81
     ]
    },
    "numpy.polynomial.chebyshev.chebsub": {
     "line number": [
      84
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.trim": {
     "line number": [
      85,
      85
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      85
     ]
    },
    "numpy.zeros": {
     "line number": [
      81
     ]
    },
    "range": {
     "line number": [
      78,
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestCompanion": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": {
    "object": {
     "line number": [
      512
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestCompanion.test_dimensions": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebcompanion": {
     "line number": [
      521
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      521
     ]
    },
    "range": {
     "line number": [
      519
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestCompanion.test_linear_root": {
  "data": {
   "lineno": 523,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebcompanion": {
     "line number": [
      524
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      524
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestCompanion.test_raises": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      515,
      516
     ]
    },
    "numpy.polynomial.chebyshev.chebcompanion": {
     "line number": [
      515,
      516
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      515,
      516
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestConstants": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "object": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebdomain": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebdomain": {
     "line number": [
      53
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebone": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebone": {
     "line number": [
      59
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebx": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebx": {
     "line number": [
      62
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebzero": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebzero": {
     "line number": [
      56
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestDerivative": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": {
    "object": {
     "line number": [
      322
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestDerivative.test_chebder": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      326,
      327
     ]
    },
    "numpy.polynomial.chebyshev.chebder": {
     "line number": [
      326,
      327,
      332,
      339,
      346
     ]
    },
    "numpy.polynomial.chebyshev.chebint": {
     "line number": [
      339,
      346
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.trim": {
     "line number": [
      333,
      333,
      340,
      340,
      347,
      347
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      340,
      347
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      333
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      326,
      327
     ]
    },
    "range": {
     "line number": [
      330,
      336,
      337,
      343,
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestDerivative.test_chebder_axis": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebder": {
     "line number": [
      353,
      354,
      357,
      358
     ]
    },
    "numpy.random.random": {
     "line number": [
      351
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      355,
      359
     ]
    },
    "numpy.vstack": {
     "line number": [
      353,
      357
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestEvaluation": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      128
     ]
    },
    "numpy.einsum": {
     "line number": [
      129,
      130
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      134
     ]
    },
    "numpy.random.random": {
     "line number": [
      133
     ]
    },
    "object": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebgrid2d": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      196
     ]
    },
    "numpy.ones": {
     "line number": [
      201
     ]
    },
    "numpy.polynomial.chebyshev.chebgrid2d": {
     "line number": [
      197,
      202
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      203
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebgrid3d": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      210
     ]
    },
    "numpy.ones": {
     "line number": [
      215
     ]
    },
    "numpy.polynomial.chebyshev.chebgrid3d": {
     "line number": [
      211,
      216
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      217
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      141
     ]
    },
    "numpy.polynomial.chebyshev.chebval": {
     "line number": [
      138,
      146,
      153,
      154,
      155
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      142
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.Tlist": {
     "line number": [
      142
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      147
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      138,
      153,
      154,
      155
     ]
    },
    "numpy.zeros": {
     "line number": [
      152
     ]
    },
    "range": {
     "line number": [
      143,
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval2d": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      162
     ]
    },
    "numpy.ones": {
     "line number": [
      170
     ]
    },
    "numpy.polynomial.chebyshev.chebval2d": {
     "line number": [
      162,
      166,
      171
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      172
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      167
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval3d": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      179
     ]
    },
    "numpy.ones": {
     "line number": [
      187
     ]
    },
    "numpy.polynomial.chebyshev.chebval3d": {
     "line number": [
      179,
      183,
      188
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      189
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      184
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestFitting": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": {
    "object": {
     "line number": [
      410
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      421,
      422,
      423,
      424,
      425,
      426,
      427,
      430
     ]
    },
    "ValueError": {
     "line number": [
      420,
      428,
      429
     ]
    },
    "f": {
     "line number": [
      434
     ]
    },
    "f2": {
     "line number": [
      479
     ]
    },
    "len": {
     "line number": [
      437,
      440,
      444,
      447,
      451
     ]
    },
    "numpy.array": {
     "line number": [
      454,
      455,
      456,
      457,
      468,
      469,
      470,
      471
     ]
    },
    "numpy.linspace": {
     "line number": [
      433,
      478
     ]
    },
    "numpy.polynomial.chebyshev.chebfit": {
     "line number": [
      420,
      421,
      422,
      423,
      424,
      425,
      426,
      427,
      428,
      429,
      430,
      436,
      439,
      443,
      446,
      450,
      454,
      456,
      463,
      465,
      468,
      470,
      475,
      476,
      480,
      482
     ]
    },
    "numpy.polynomial.chebyshev.chebval": {
     "line number": [
      438,
      441,
      445,
      448,
      452,
      481,
      483
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      438,
      441,
      445,
      448,
      452,
      455,
      457,
      464,
      466,
      469,
      471,
      475,
      476,
      481,
      483,
      484
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      437,
      440,
      444,
      447,
      451
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      420,
      421,
      422,
      423,
      424,
      425,
      426,
      427,
      428,
      429,
      430
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      459
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f": {
  "data": {
   "lineno": 413
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f2": {
  "data": {
   "lineno": 416
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestGauss": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": {
    "object": {
     "line number": [
      527
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestGauss.test_100": {
  "data": {
   "lineno": 529,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      536
     ]
    },
    "numpy.eye": {
     "line number": [
      539
     ]
    },
    "numpy.pi": {
     "line number": [
      542
     ]
    },
    "numpy.polynomial.chebyshev.chebgauss": {
     "line number": [
      530
     ]
    },
    "numpy.polynomial.chebyshev.chebvander": {
     "line number": [
      535
     ]
    },
    "numpy.sqrt": {
     "line number": [
      537
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      539,
      543
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestIntegral": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "object": {
     "line number": [
      220
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestIntegral.test_chebint": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      224,
      225,
      226,
      227,
      228,
      229
     ]
    },
    "list": {
     "line number": [
      282,
      292,
      302
     ]
    },
    "numpy.polynomial.chebyshev.cheb2poly": {
     "line number": [
      244,
      262
     ]
    },
    "numpy.polynomial.chebyshev.chebint": {
     "line number": [
      224,
      225,
      226,
      227,
      228,
      229,
      234,
      243,
      252,
      261,
      271,
      272,
      281,
      282,
      291,
      292,
      301,
      302
     ]
    },
    "numpy.polynomial.chebyshev.chebval": {
     "line number": [
      253
     ]
    },
    "numpy.polynomial.chebyshev.poly2cheb": {
     "line number": [
      242,
      251,
      260
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.trim": {
     "line number": [
      245,
      245,
      263,
      263,
      273,
      273,
      283,
      283,
      293,
      293,
      303,
      303
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      235,
      245,
      253,
      263,
      273,
      283,
      293,
      303
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      224,
      225,
      226,
      227,
      228,
      229
     ]
    },
    "range": {
     "line number": [
      232,
      238,
      248,
      256,
      266,
      267,
      270,
      276,
      277,
      280,
      282,
      286,
      287,
      290,
      292,
      296,
      297,
      300,
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestIntegral.test_chebint_axis": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebint": {
     "line number": [
      309,
      310,
      313,
      314,
      317,
      318
     ]
    },
    "numpy.random.random": {
     "line number": [
      307
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      311,
      315,
      319
     ]
    },
    "numpy.vstack": {
     "line number": [
      309,
      313,
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestInterpolate": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": {
    "object": {
     "line number": [
      487
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f": {
  "data": {
   "lineno": 489
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_approximation": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      505
     ]
    },
    "numpy.polynomial.chebyshev.chebinterpolate": {
     "line number": [
      508
     ]
    },
    "numpy.polynomial.chebyshev.chebval": {
     "line number": [
      509
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      509
     ]
    },
    "powx": {
     "line number": [
      509
     ]
    },
    "range": {
     "line number": [
      506,
      507
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_approximation.powx": {
  "data": {
   "lineno": 502
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_dimensions": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebinterpolate": {
     "line number": [
      498
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      498
     ]
    },
    "range": {
     "line number": [
      497
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_raises": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      494
     ]
    },
    "ValueError": {
     "line number": [
      493
     ]
    },
    "numpy.polynomial.chebyshev.chebinterpolate": {
     "line number": [
      493,
      494
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      493,
      494
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestMisc": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": {
    "object": {
     "line number": [
      546
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestMisc.test_cheb2poly": {
  "data": {
   "lineno": 579,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.cheb2poly": {
     "line number": [
      581
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.Tlist": {
     "line number": [
      581
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      581
     ]
    },
    "range": {
     "line number": [
      580
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebfromroots": {
  "data": {
   "lineno": 548,
   "symbols_in_volume": {
    "numpy.cos": {
     "line number": [
      552
     ]
    },
    "numpy.linspace": {
     "line number": [
      552
     ]
    },
    "numpy.pi": {
     "line number": [
      552
     ]
    },
    "numpy.polynomial.chebyshev.chebfromroots": {
     "line number": [
      549,
      554
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.trim": {
     "line number": [
      550,
      555,
      555
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      550,
      555
     ]
    },
    "range": {
     "line number": [
      551
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebline": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebline": {
     "line number": [
      577
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      577
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebpts1": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      595,
      596
     ]
    },
    "numpy.polynomial.chebyshev.chebpts1": {
     "line number": [
      595,
      596,
      600,
      602,
      604,
      606
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      600,
      602,
      604,
      606
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      595,
      596
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebpts2": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      610,
      611
     ]
    },
    "numpy.polynomial.chebyshev.chebpts2": {
     "line number": [
      610,
      611,
      615,
      617,
      619,
      621
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      615,
      617,
      619,
      621
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      610,
      611
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebroots": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      561
     ]
    },
    "numpy.polynomial.chebyshev.chebfromroots": {
     "line number": [
      562
     ]
    },
    "numpy.polynomial.chebyshev.chebroots": {
     "line number": [
      558,
      559,
      562
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.trim": {
     "line number": [
      563,
      563
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      558,
      559,
      563
     ]
    },
    "range": {
     "line number": [
      560
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebtrim": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      569
     ]
    },
    "numpy.polynomial.chebyshev.chebtrim": {
     "line number": [
      569,
      572,
      573,
      574
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      572,
      573,
      574
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      569
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestMisc.test_poly2cheb": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.poly2cheb": {
     "line number": [
      585
     ]
    },
    "numpy.polynomial.tests.test_chebyshev.Tlist": {
     "line number": [
      585
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      585
     ]
    },
    "range": {
     "line number": [
      584
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestMisc.test_weight": {
  "data": {
   "lineno": 587,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      588
     ]
    },
    "numpy.polynomial.chebyshev.chebweight": {
     "line number": [
      590
     ]
    },
    "numpy.sqrt": {
     "line number": [
      589,
      589
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      591
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestPrivate": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "object": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestPrivate.test__cseries_to_zseries": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      37,
      38
     ]
    },
    "numpy.double": {
     "line number": [
      37,
      38
     ]
    },
    "numpy.polynomial.chebyshev._cseries_to_zseries": {
     "line number": [
      39
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      40
     ]
    },
    "range": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestPrivate.test__zseries_to_cseries": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      44,
      45
     ]
    },
    "numpy.double": {
     "line number": [
      44,
      45
     ]
    },
    "numpy.polynomial.chebyshev._zseries_to_cseries": {
     "line number": [
      46
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      47
     ]
    },
    "range": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestVander": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": {
    "numpy.random.random": {
     "line number": [
      364
     ]
    },
    "object": {
     "line number": [
      362
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      368
     ]
    },
    "numpy.array": {
     "line number": [
      376
     ]
    },
    "numpy.polynomial.chebyshev.chebval": {
     "line number": [
      373,
      381
     ]
    },
    "numpy.polynomial.chebyshev.chebvander": {
     "line number": [
      369,
      377
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      370,
      378
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      373,
      381
     ]
    },
    "range": {
     "line number": [
      371,
      379
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander2d": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      389
     ]
    },
    "numpy.polynomial.chebyshev.chebval2d": {
     "line number": [
      388
     ]
    },
    "numpy.polynomial.chebyshev.chebvander2d": {
     "line number": [
      387,
      393
     ]
    },
    "numpy.random.random": {
     "line number": [
      386
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      394
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      390
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander3d": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      402
     ]
    },
    "numpy.polynomial.chebyshev.chebval3d": {
     "line number": [
      401
     ]
    },
    "numpy.polynomial.chebyshev.chebvander3d": {
     "line number": [
      400,
      406
     ]
    },
    "numpy.random.random": {
     "line number": [
      399
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      407
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      403
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_chebyshev.Tlist": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_chebyshev.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_chebyshev.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_chebyshev.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_chebyshev.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_chebyshev.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_chebyshev.cheb": {
  "data": {
   "shadows": "numpy.polynomial.chebyshev"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_chebyshev.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_chebyshev.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_chebyshev.polyval": {
  "data": {
   "shadows": "numpy.polynomial.polynomial.polyval"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_chebyshev.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_chebyshev.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_chebyshev.trim": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.polynomial.chebyshev.chebtrim": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes": {
  "data": {
   "symbols_in_volume": {
    "numpy.polynomial.Chebyshev": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.Hermite": {
     "line number": [
      27
     ]
    },
    "numpy.polynomial.HermiteE": {
     "line number": [
      27
     ]
    },
    "numpy.polynomial.Laguerre": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.Legendre": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.Polynomial": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      55,
      56
     ]
    },
    "numpy.polynomial.tests.test_classes.classes": {
     "line number": [
      29
     ]
    },
    "numpy.random.random": {
     "line number": [
      38
     ]
    },
    "tuple": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.tests.test_classes.Chebyshev": {
  "data": {
   "shadows": "numpy.polynomial.Chebyshev"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.Hermite": {
  "data": {
   "shadows": "numpy.polynomial.Hermite"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.HermiteE": {
  "data": {
   "shadows": "numpy.polynomial.HermiteE"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.Laguerre": {
  "data": {
   "shadows": "numpy.polynomial.Laguerre"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.Legendre": {
  "data": {
   "shadows": "numpy.polynomial.Legendre"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.Number": {
  "data": {
   "shadows": "numbers.Number"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.Poly": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "numpy.polynomial.tests.test_classes.classes": {
     "line number": [
      31
     ]
    },
    "numpy.polynomial.tests.test_classes.classids": {
     "line number": [
      31
     ]
    },
    "numpy.polynomial.tests.test_classes.pytest": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.Poly1": {
  "data": {
   "lineno": 55
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_classes.Poly2": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_classes.Polynomial": {
  "data": {
   "shadows": "numpy.polynomial.Polynomial"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.TestInterpolate": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": {
    "object": {
     "line number": [
      620
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_classes.TestInterpolate.f": {
  "data": {
   "lineno": 622
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.TestInterpolate.test_approximation": {
  "data": {
   "lineno": 633,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      638
     ]
    },
    "numpy.polynomial.Chebyshev.interpolate": {
     "line number": [
      641
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      642
     ]
    },
    "p": {
     "line number": [
      641,
      642
     ]
    },
    "powx": {
     "line number": [
      642
     ]
    },
    "range": {
     "line number": [
      639,
      640
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.TestInterpolate.test_approximation.powx": {
  "data": {
   "lineno": 635,
   "symbols_in_volume": {
    "p": {
     "line number": [
      636
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.TestInterpolate.test_dimensions": {
  "data": {
   "lineno": 629,
   "symbols_in_volume": {
    "numpy.polynomial.Chebyshev.interpolate": {
     "line number": [
      631
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      631
     ]
    },
    "range": {
     "line number": [
      630
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.TestInterpolate.test_raises": {
  "data": {
   "lineno": 625,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      627
     ]
    },
    "ValueError": {
     "line number": [
      626
     ]
    },
    "numpy.polynomial.Chebyshev.interpolate": {
     "line number": [
      626,
      627
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      626,
      627
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.TestLatexRepr": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": {
    "object": {
     "line number": [
      566
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_classes.TestLatexRepr.as_latex": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": {
    "str": {
     "line number": [
      573
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.TestLatexRepr.test_basis_func": {
  "data": {
   "lineno": 600,
   "symbols_in_volume": {
    "numpy.polynomial.Chebyshev": {
     "line number": [
      601,
      605
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      602,
      606
     ]
    },
    "p": {
     "line number": [
      601,
      602,
      605,
      606
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.TestLatexRepr.test_multichar_basis_func": {
  "data": {
   "lineno": 609,
   "symbols_in_volume": {
    "numpy.polynomial.HermiteE": {
     "line number": [
      610
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      611
     ]
    },
    "p": {
     "line number": [
      610,
      611
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.TestLatexRepr.test_simple_polynomial": {
  "data": {
   "lineno": 579,
   "symbols_in_volume": {
    "numpy.polynomial.Polynomial": {
     "line number": [
      581,
      586,
      591,
      596
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      582,
      587,
      592,
      597
     ]
    },
    "p": {
     "line number": [
      581,
      582,
      586,
      587,
      591,
      592,
      596,
      597
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.assert_poly_almost_equal": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      46,
      48
     ]
    },
    "numpy.all": {
     "line number": [
      43,
      44
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      43,
      44
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.classes": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_classes.classids": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_classes.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.op": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_classes.random": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_classes.test_add": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      216,
      217,
      219,
      221
     ]
    },
    "list": {
     "line number": [
      204,
      205
     ]
    },
    "numpy.array": {
     "line number": [
      214,
      215
     ]
    },
    "numpy.polynomial.Chebyshev": {
     "line number": [
      219
     ]
    },
    "numpy.polynomial.Polynomial": {
     "line number": [
      218,
      221
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      206,
      207,
      216,
      216,
      217,
      217,
      218
     ]
    },
    "numpy.polynomial.tests.test_classes.assert_poly_almost_equal": {
     "line number": [
      209,
      210,
      211,
      212,
      213,
      214,
      215
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      204,
      205
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      216,
      217,
      219,
      221
     ]
    },
    "operator.add": {
     "line number": [
      216,
      217,
      219,
      221
     ]
    },
    "p1": {
     "line number": [
      206,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      219,
      221
     ]
    },
    "p2": {
     "line number": [
      207,
      208,
      209
     ]
    },
    "p3": {
     "line number": [
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215
     ]
    },
    "tuple": {
     "line number": [
      212,
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_basis": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      109,
      110,
      111
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      109,
      110
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      112,
      113,
      114
     ]
    },
    "p": {
     "line number": [
      111
     ]
    },
    "p.coef": {
     "line number": [
      114
     ]
    },
    "p.domain": {
     "line number": [
      112
     ]
    },
    "p.window": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_call": {
  "data": {
   "lineno": 506,
   "symbols_in_volume": {
    "P": {
     "line number": [
      507,
      512
     ]
    },
    "numpy.linspace": {
     "line number": [
      509
     ]
    },
    "numpy.polynomial.Polynomial": {
     "line number": [
      507
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      508,
      512
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      515
     ]
    },
    "p": {
     "line number": [
      512,
      514
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_cast": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      77
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly1": {
     "line number": [
      80,
      81,
      82
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly2": {
     "line number": [
      84,
      85,
      86
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      78,
      80,
      81,
      84,
      85
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      88,
      89,
      90
     ]
    },
    "p1": {
     "line number": [
      82,
      86,
      90
     ]
    },
    "p2": {
     "line number": [
      86,
      90
     ]
    },
    "p2.domain": {
     "line number": [
      88
     ]
    },
    "p2.window": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_conversion": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      60
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly1": {
     "line number": [
      63,
      64,
      65
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly2": {
     "line number": [
      67,
      68,
      69
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      61,
      63,
      64,
      67,
      68
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      71,
      72,
      73
     ]
    },
    "p1": {
     "line number": [
      73
     ]
    },
    "p2": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_copy": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": {
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      413
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      415,
      416,
      417,
      418,
      419
     ]
    },
    "p1": {
     "line number": [
      413,
      415,
      416
     ]
    },
    "p1.coef": {
     "line number": [
      417
     ]
    },
    "p1.copy": {
     "line number": [
      414
     ]
    },
    "p1.domain": {
     "line number": [
      418
     ]
    },
    "p1.window": {
     "line number": [
      419
     ]
    },
    "p2": {
     "line number": [
      414,
      415,
      416
     ]
    },
    "p2.coef": {
     "line number": [
      417
     ]
    },
    "p2.domain": {
     "line number": [
      418
     ]
    },
    "p2.window": {
     "line number": [
      419
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_cutdeg": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      520,
      521
     ]
    },
    "len": {
     "line number": [
      522,
      523,
      524,
      525
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      519
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      522,
      523,
      524,
      525
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      520,
      521
     ]
    },
    "p": {
     "line number": [
      519
     ]
    },
    "p.cutdeg": {
     "line number": [
      520,
      521,
      522,
      523,
      524,
      525
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_degree": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": {
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      408
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      409
     ]
    },
    "p": {
     "line number": [
      408
     ]
    },
    "p.degree": {
     "line number": [
      409
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_deriv": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      454,
      455,
      456,
      462
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      454,
      455
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      459,
      460,
      465,
      466
     ]
    },
    "p1": {
     "line number": [
      456,
      462
     ]
    },
    "p1.coef": {
     "line number": [
      460,
      466
     ]
    },
    "p1.integ": {
     "line number": [
      457,
      458,
      463,
      464
     ]
    },
    "p2": {
     "line number": [
      457,
      463
     ]
    },
    "p2.deriv": {
     "line number": [
      459,
      460,
      465,
      466
     ]
    },
    "p3": {
     "line number": [
      458,
      464
     ]
    },
    "p3.coef": {
     "line number": [
      459,
      465
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_divmod": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      388,
      389,
      391,
      393
     ]
    },
    "divmod": {
     "line number": [
      361,
      364,
      367,
      370,
      373,
      376,
      379,
      382,
      385,
      388,
      389,
      391,
      393
     ]
    },
    "list": {
     "line number": [
      353,
      354,
      355,
      360
     ]
    },
    "numpy.array": {
     "line number": [
      376,
      379
     ]
    },
    "numpy.polynomial.Chebyshev": {
     "line number": [
      391
     ]
    },
    "numpy.polynomial.Polynomial": {
     "line number": [
      390,
      393
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      356,
      357,
      358,
      384,
      386,
      387,
      388,
      388,
      389,
      389,
      390
     ]
    },
    "numpy.polynomial.tests.test_classes.assert_poly_almost_equal": {
     "line number": [
      362,
      363,
      365,
      366,
      368,
      369,
      371,
      372,
      374,
      375,
      377,
      378,
      380,
      381,
      383,
      384,
      386,
      387
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      353,
      354,
      355
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      388,
      389,
      391,
      393
     ]
    },
    "p1": {
     "line number": [
      356,
      359,
      362,
      365,
      368,
      371,
      374,
      377,
      380,
      388,
      389,
      391,
      393
     ]
    },
    "p2": {
     "line number": [
      357,
      359,
      361,
      367,
      373,
      379,
      382,
      383,
      385
     ]
    },
    "p3": {
     "line number": [
      358,
      359,
      363,
      366,
      369,
      372,
      375,
      378,
      381
     ]
    },
    "tuple": {
     "line number": [
      370,
      373
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_equal": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      181,
      182,
      183,
      184
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      185,
      186,
      187,
      188
     ]
    },
    "p1": {
     "line number": [
      181,
      185,
      185,
      186,
      187,
      188
     ]
    },
    "p2": {
     "line number": [
      182,
      186
     ]
    },
    "p3": {
     "line number": [
      183,
      187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_fit": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "f": {
     "line number": [
      141
     ]
    },
    "numpy.linspace": {
     "line number": [
      140
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      144,
      150,
      151,
      152,
      156,
      162,
      163,
      164,
      165,
      166,
      167,
      173,
      174,
      175
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      150,
      151,
      171
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      145,
      146,
      153,
      154,
      155,
      157,
      158,
      159,
      176,
      177
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      147,
      163,
      164,
      166,
      167
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      170
     ]
    },
    "p": {
     "line number": [
      144,
      146,
      152,
      153,
      156,
      157,
      162,
      165
     ]
    },
    "p.degree": {
     "line number": [
      147
     ]
    },
    "p.domain": {
     "line number": [
      145,
      154,
      158,
      163,
      166
     ]
    },
    "p.window": {
     "line number": [
      155,
      159,
      164,
      167
     ]
    },
    "p1": {
     "line number": [
      173,
      176
     ]
    },
    "p2": {
     "line number": [
      174,
      176,
      177
     ]
    },
    "p3": {
     "line number": [
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_fit.f": {
  "data": {
   "lineno": 138
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_floordiv": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      288,
      290,
      292,
      294
     ]
    },
    "list": {
     "line number": [
      270,
      271,
      272,
      277
     ]
    },
    "numpy.array": {
     "line number": [
      283,
      284
     ]
    },
    "numpy.polynomial.Chebyshev": {
     "line number": [
      292
     ]
    },
    "numpy.polynomial.Polynomial": {
     "line number": [
      291,
      294
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      273,
      274,
      275,
      285,
      288,
      288,
      290,
      290,
      291
     ]
    },
    "numpy.polynomial.tests.test_classes.assert_poly_almost_equal": {
     "line number": [
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      285,
      286
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      270,
      271,
      272
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      287,
      289,
      292,
      294
     ]
    },
    "operator.floordiv": {
     "line number": [
      288,
      290,
      292,
      294
     ]
    },
    "p1": {
     "line number": [
      273,
      276,
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      288,
      290,
      292,
      294
     ]
    },
    "p2": {
     "line number": [
      274,
      276,
      278,
      280,
      282,
      284,
      285,
      286,
      286
     ]
    },
    "p3": {
     "line number": [
      275,
      276
     ]
    },
    "tuple": {
     "line number": [
      281,
      282
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_fromroots": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "len": {
     "line number": [
      124
     ]
    },
    "numpy.polynomial.Polynomial.cast": {
     "line number": [
      132
     ]
    },
    "numpy.polynomial.Polynomial.domain": {
     "line number": [
      130
     ]
    },
    "numpy.polynomial.Polynomial.window": {
     "line number": [
      131
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      120,
      121,
      123
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      120,
      121,
      122
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      127,
      133
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      124,
      125,
      126
     ]
    },
    "p1": {
     "line number": [
      123,
      127,
      132
     ]
    },
    "p1.degree": {
     "line number": [
      124
     ]
    },
    "p1.domain": {
     "line number": [
      125
     ]
    },
    "p1.window": {
     "line number": [
      126
     ]
    },
    "p2": {
     "line number": [
      132
     ]
    },
    "p2.coef": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_identity": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      101
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      99,
      100,
      102
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      99,
      100
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      105
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      103,
      104
     ]
    },
    "p": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_integ": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "P": {
     "line number": [
      425,
      428,
      429,
      431,
      434,
      435,
      437,
      440,
      441,
      444,
      447,
      448
     ]
    },
    "P.cast": {
     "line number": [
      426,
      427,
      432,
      433,
      438,
      439,
      445,
      446
     ]
    },
    "numpy.polynomial.Polynomial": {
     "line number": [
      423
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      425,
      431,
      437,
      443,
      444
     ]
    },
    "numpy.polynomial.tests.test_classes.assert_poly_almost_equal": {
     "line number": [
      428,
      429,
      434,
      435,
      440,
      441,
      447,
      448
     ]
    },
    "p1": {
     "line number": [
      426,
      428,
      432,
      434,
      438,
      440,
      445,
      447
     ]
    },
    "p2": {
     "line number": [
      427,
      429,
      433,
      435,
      439,
      441,
      446,
      448
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_linspace": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      474,
      480
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      470,
      471,
      472
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      470,
      471
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      477,
      478,
      483,
      484
     ]
    },
    "p": {
     "line number": [
      472,
      475,
      481
     ]
    },
    "p.linspace": {
     "line number": [
      476,
      482
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_mapparms": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": {
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      548,
      549,
      550,
      554
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      551,
      555
     ]
    },
    "p": {
     "line number": [
      550,
      554
     ]
    },
    "p.mapparms": {
     "line number": [
      551,
      555
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_mod": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      343,
      344,
      346,
      348
     ]
    },
    "list": {
     "line number": [
      326,
      327,
      328,
      333
     ]
    },
    "numpy.array": {
     "line number": [
      339,
      340
     ]
    },
    "numpy.polynomial.Chebyshev": {
     "line number": [
      346
     ]
    },
    "numpy.polynomial.Polynomial": {
     "line number": [
      345,
      348
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      329,
      330,
      331,
      341,
      342,
      343,
      343,
      344,
      344,
      345
     ]
    },
    "numpy.polynomial.tests.test_classes.assert_poly_almost_equal": {
     "line number": [
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      326,
      327,
      328
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      343,
      344,
      346,
      348
     ]
    },
    "operator.mod": {
     "line number": [
      343,
      344,
      346,
      348
     ]
    },
    "p1": {
     "line number": [
      329,
      332,
      343,
      344,
      346,
      348
     ]
    },
    "p2": {
     "line number": [
      330,
      332,
      334,
      336,
      338,
      340,
      341,
      342
     ]
    },
    "p3": {
     "line number": [
      331,
      332,
      334,
      335,
      336,
      337,
      338,
      339,
      340
     ]
    },
    "tuple": {
     "line number": [
      337,
      338
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_mul": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      261,
      262,
      264,
      266
     ]
    },
    "list": {
     "line number": [
      247,
      248
     ]
    },
    "numpy.array": {
     "line number": [
      257,
      258
     ]
    },
    "numpy.polynomial.Chebyshev": {
     "line number": [
      264
     ]
    },
    "numpy.polynomial.Polynomial": {
     "line number": [
      263,
      266
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      249,
      250,
      259,
      260,
      261,
      261,
      262,
      262,
      263
     ]
    },
    "numpy.polynomial.tests.test_classes.assert_poly_almost_equal": {
     "line number": [
      252,
      253,
      254,
      255,
      256,
      257,
      258,
      259,
      260
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      247,
      248
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      261,
      262,
      264,
      266
     ]
    },
    "operator.mul": {
     "line number": [
      261,
      262,
      264,
      266
     ]
    },
    "p1": {
     "line number": [
      249,
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258,
      259,
      259,
      260,
      260,
      261,
      262,
      264,
      266
     ]
    },
    "p2": {
     "line number": [
      250,
      251,
      252
     ]
    },
    "p3": {
     "line number": [
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258
     ]
    },
    "tuple": {
     "line number": [
      255,
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_not_equal": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      192,
      193,
      194,
      195
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      196,
      197,
      198,
      199
     ]
    },
    "p1": {
     "line number": [
      192,
      196,
      196,
      197,
      198,
      199
     ]
    },
    "p2": {
     "line number": [
      193,
      197
     ]
    },
    "p3": {
     "line number": [
      194,
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_pow": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      502,
      503
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      488,
      489,
      490,
      491,
      496,
      497
     ]
    },
    "numpy.polynomial.tests.test_classes.assert_poly_almost_equal": {
     "line number": [
      493,
      499
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      488,
      489
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      502,
      503
     ]
    },
    "operator.pow": {
     "line number": [
      502,
      503
     ]
    },
    "range": {
     "line number": [
      492,
      498
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_roots": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      399
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      397,
      398,
      400,
      403
     ]
    },
    "numpy.sort": {
     "line number": [
      400,
      403
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      401,
      404
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_sub": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      238,
      239,
      241,
      243
     ]
    },
    "list": {
     "line number": [
      226,
      227
     ]
    },
    "numpy.array": {
     "line number": [
      236,
      237
     ]
    },
    "numpy.polynomial.Chebyshev": {
     "line number": [
      241
     ]
    },
    "numpy.polynomial.Polynomial": {
     "line number": [
      240,
      243
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      228,
      229,
      238,
      238,
      239,
      239,
      240
     ]
    },
    "numpy.polynomial.tests.test_classes.assert_poly_almost_equal": {
     "line number": [
      231,
      232,
      233,
      234,
      235,
      236,
      237
     ]
    },
    "numpy.polynomial.tests.test_classes.random": {
     "line number": [
      226,
      227
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      238,
      239,
      241,
      243
     ]
    },
    "operator.sub": {
     "line number": [
      238,
      239,
      241,
      243
     ]
    },
    "p1": {
     "line number": [
      228,
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      241,
      243
     ]
    },
    "p2": {
     "line number": [
      229,
      230,
      231
     ]
    },
    "p3": {
     "line number": [
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237
     ]
    },
    "tuple": {
     "line number": [
      234,
      235
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_trim": {
  "data": {
   "lineno": 538,
   "symbols_in_volume": {
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      540
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      541,
      542,
      543
     ]
    },
    "p": {
     "line number": [
      540
     ]
    },
    "p.trim": {
     "line number": [
      541,
      542,
      543
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_truediv": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      308,
      312,
      316,
      318,
      319,
      321
     ]
    },
    "bool": {
     "line number": [
      304,
      317
     ]
    },
    "complex": {
     "line number": [
      313
     ]
    },
    "dict": {
     "line number": [
      317
     ]
    },
    "float": {
     "line number": [
      309
     ]
    },
    "int": {
     "line number": [
      309
     ]
    },
    "issubclass": {
     "line number": [
      304,
      304
     ]
    },
    "list": {
     "line number": [
      317
     ]
    },
    "numbers.Number": {
     "line number": [
      304
     ]
    },
    "numpy.ScalarType": {
     "line number": [
      303
     ]
    },
    "numpy.array": {
     "line number": [
      317
     ]
    },
    "numpy.compat.long": {
     "line number": [
      309
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      300
     ]
    },
    "numpy.polynomial.tests.test_classes.assert_poly_almost_equal": {
     "line number": [
      307,
      311,
      315
     ]
    },
    "numpy.polynomial.tests.test_classes.classes": {
     "line number": [
      320
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      308,
      312,
      316,
      318,
      319,
      321
     ]
    },
    "operator.truediv": {
     "line number": [
      307,
      308,
      311,
      312,
      315,
      316,
      318,
      319,
      321
     ]
    },
    "p1": {
     "line number": [
      300,
      301,
      307,
      311,
      315
     ]
    },
    "p2": {
     "line number": [
      301,
      307,
      308,
      311,
      312,
      315,
      316,
      318,
      319,
      321
     ]
    },
    "ptype": {
     "line number": [
      321
     ]
    },
    "stype": {
     "line number": [
      306,
      309,
      310,
      313,
      314
     ]
    },
    "tuple": {
     "line number": [
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_truncate": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      530,
      531
     ]
    },
    "len": {
     "line number": [
      532,
      533,
      534,
      535
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      529
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      532,
      533,
      534,
      535
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      530,
      531
     ]
    },
    "p": {
     "line number": [
      529
     ]
    },
    "p.truncate": {
     "line number": [
      530,
      531,
      532,
      533,
      534,
      535
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_classes.test_ufunc_override": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      561,
      562
     ]
    },
    "numpy.add": {
     "line number": [
      561,
      562
     ]
    },
    "numpy.ones": {
     "line number": [
      560
     ]
    },
    "numpy.polynomial.tests.test_classes.Poly": {
     "line number": [
      559
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      561,
      562
     ]
    },
    "p": {
     "line number": [
      559,
      561,
      562
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24
     ]
    },
    "numpy.polynomial.tests.test_hermite.H0": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite.H1": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite.H2": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite.H3": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite.H4": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite.H5": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite.H6": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite.H7": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite.H8": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite.H9": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.tests.test_hermite.H0": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite.H1": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite.H2": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite.H3": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite.H4": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite.H5": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite.H6": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite.H7": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite.H8": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite.H9": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite.Hlist": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite.TestArithmetic": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      49
     ]
    },
    "object": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermadd": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "max": {
     "line number": [
      55
     ]
    },
    "numpy.polynomial.hermite.hermadd": {
     "line number": [
      58
     ]
    },
    "numpy.polynomial.tests.test_hermite.trim": {
     "line number": [
      59,
      59
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      59
     ]
    },
    "numpy.zeros": {
     "line number": [
      55
     ]
    },
    "range": {
     "line number": [
      52,
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermdiv": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermadd": {
     "line number": [
      99,
      101
     ]
    },
    "numpy.polynomial.hermite.hermdiv": {
     "line number": [
      100
     ]
    },
    "numpy.polynomial.hermite.hermmul": {
     "line number": [
      101
     ]
    },
    "numpy.polynomial.tests.test_hermite.trim": {
     "line number": [
      102,
      102
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      102
     ]
    },
    "range": {
     "line number": [
      94,
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermmul": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "len": {
     "line number": [
      90
     ]
    },
    "numpy.polynomial.hermite.hermmul": {
     "line number": [
      88
     ]
    },
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      83,
      87,
      89
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      90
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      91
     ]
    },
    "range": {
     "line number": [
      81,
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermmulx": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermmulx": {
     "line number": [
      72,
      73,
      77
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      72,
      73,
      77
     ]
    },
    "range": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermpow": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      109
     ]
    },
    "numpy.arange": {
     "line number": [
      108
     ]
    },
    "numpy.array": {
     "line number": [
      109
     ]
    },
    "numpy.polynomial.hermite.hermmul": {
     "line number": [
      109
     ]
    },
    "numpy.polynomial.hermite.hermpow": {
     "line number": [
      110
     ]
    },
    "numpy.polynomial.tests.test_hermite.trim": {
     "line number": [
      111,
      111
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      111
     ]
    },
    "range": {
     "line number": [
      105,
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermsub": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "max": {
     "line number": [
      65
     ]
    },
    "numpy.polynomial.hermite.hermsub": {
     "line number": [
      68
     ]
    },
    "numpy.polynomial.tests.test_hermite.trim": {
     "line number": [
      69,
      69
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69
     ]
    },
    "numpy.zeros": {
     "line number": [
      65
     ]
    },
    "range": {
     "line number": [
      62,
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestCompanion": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": {
    "object": {
     "line number": [
      475
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite.TestCompanion.test_dimensions": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermcompanion": {
     "line number": [
      484
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      484
     ]
    },
    "range": {
     "line number": [
      482
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestCompanion.test_linear_root": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermcompanion": {
     "line number": [
      487
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      487
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestCompanion.test_raises": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      478,
      479
     ]
    },
    "numpy.polynomial.hermite.hermcompanion": {
     "line number": [
      478,
      479
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      478,
      479
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestConstants": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "object": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite.TestConstants.test_hermdomain": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermdomain": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestConstants.test_hermone": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermone": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestConstants.test_hermx": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermx": {
     "line number": [
      45
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestConstants.test_hermzero": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermzero": {
     "line number": [
      39
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestDerivative": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "object": {
     "line number": [
      310
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite.TestDerivative.test_hermder": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      314,
      315
     ]
    },
    "numpy.polynomial.hermite.hermder": {
     "line number": [
      314,
      315,
      320,
      327,
      334
     ]
    },
    "numpy.polynomial.hermite.hermint": {
     "line number": [
      327,
      334
     ]
    },
    "numpy.polynomial.tests.test_hermite.trim": {
     "line number": [
      321,
      321,
      328,
      328,
      335,
      335
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      328,
      335
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      321
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      314,
      315
     ]
    },
    "range": {
     "line number": [
      318,
      324,
      325,
      331,
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestDerivative.test_hermder_axis": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermder": {
     "line number": [
      341,
      342,
      345,
      346
     ]
    },
    "numpy.random.random": {
     "line number": [
      339
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      343,
      347
     ]
    },
    "numpy.vstack": {
     "line number": [
      341,
      345
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestEvaluation": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      116
     ]
    },
    "numpy.einsum": {
     "line number": [
      117,
      118
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      122
     ]
    },
    "numpy.random.random": {
     "line number": [
      121
     ]
    },
    "object": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermgrid2d": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      184
     ]
    },
    "numpy.ones": {
     "line number": [
      189
     ]
    },
    "numpy.polynomial.hermite.hermgrid2d": {
     "line number": [
      185,
      190
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      191
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermgrid3d": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      198
     ]
    },
    "numpy.ones": {
     "line number": [
      203
     ]
    },
    "numpy.polynomial.hermite.hermgrid3d": {
     "line number": [
      199,
      204
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      205
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      129
     ]
    },
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      126,
      134,
      141,
      142,
      143
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      130
     ]
    },
    "numpy.polynomial.tests.test_hermite.Hlist": {
     "line number": [
      130
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      135
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      126,
      141,
      142,
      143
     ]
    },
    "numpy.zeros": {
     "line number": [
      140
     ]
    },
    "range": {
     "line number": [
      131,
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval2d": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      150
     ]
    },
    "numpy.ones": {
     "line number": [
      158
     ]
    },
    "numpy.polynomial.hermite.hermval2d": {
     "line number": [
      150,
      154,
      159
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      160
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      155
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval3d": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      167
     ]
    },
    "numpy.ones": {
     "line number": [
      175
     ]
    },
    "numpy.polynomial.hermite.hermval3d": {
     "line number": [
      167,
      171,
      176
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      177
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      172
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestFitting": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "object": {
     "line number": [
      398
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      418
     ]
    },
    "ValueError": {
     "line number": [
      408,
      416,
      417
     ]
    },
    "f": {
     "line number": [
      422
     ]
    },
    "f2": {
     "line number": [
      467
     ]
    },
    "len": {
     "line number": [
      425,
      428,
      432,
      435,
      439
     ]
    },
    "numpy.array": {
     "line number": [
      442,
      443,
      444,
      445,
      456,
      457,
      458,
      459
     ]
    },
    "numpy.linspace": {
     "line number": [
      421,
      466
     ]
    },
    "numpy.polynomial.hermite.hermfit": {
     "line number": [
      408,
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      424,
      427,
      431,
      434,
      438,
      442,
      444,
      451,
      453,
      456,
      458,
      463,
      464,
      468,
      470
     ]
    },
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      426,
      429,
      433,
      436,
      440,
      469,
      471
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      426,
      429,
      433,
      436,
      440,
      443,
      445,
      452,
      454,
      457,
      459,
      463,
      464,
      469,
      471,
      472
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      425,
      428,
      432,
      435,
      439
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      408,
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      447
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f": {
  "data": {
   "lineno": 401
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f2": {
  "data": {
   "lineno": 404
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestGauss": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": {
    "object": {
     "line number": [
      490
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite.TestGauss.test_100": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      499
     ]
    },
    "numpy.eye": {
     "line number": [
      502
     ]
    },
    "numpy.pi": {
     "line number": [
      505
     ]
    },
    "numpy.polynomial.hermite.hermgauss": {
     "line number": [
      493
     ]
    },
    "numpy.polynomial.hermite.hermvander": {
     "line number": [
      498
     ]
    },
    "numpy.sqrt": {
     "line number": [
      500,
      505
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      502,
      506
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestIntegral": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "object": {
     "line number": [
      208
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite.TestIntegral.test_hermint": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      212,
      213,
      214,
      215,
      216,
      217
     ]
    },
    "list": {
     "line number": [
      270,
      280,
      290
     ]
    },
    "numpy.polynomial.hermite.herm2poly": {
     "line number": [
      232,
      250
     ]
    },
    "numpy.polynomial.hermite.hermint": {
     "line number": [
      212,
      213,
      214,
      215,
      216,
      217,
      222,
      231,
      240,
      249,
      259,
      260,
      269,
      270,
      279,
      280,
      289,
      290
     ]
    },
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      241
     ]
    },
    "numpy.polynomial.hermite.poly2herm": {
     "line number": [
      230,
      239,
      248
     ]
    },
    "numpy.polynomial.tests.test_hermite.trim": {
     "line number": [
      233,
      233,
      251,
      251,
      261,
      261,
      271,
      271,
      281,
      281,
      291,
      291
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      223,
      233,
      241,
      251,
      261,
      271,
      281,
      291
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      212,
      213,
      214,
      215,
      216,
      217
     ]
    },
    "range": {
     "line number": [
      220,
      226,
      236,
      244,
      254,
      255,
      258,
      264,
      265,
      268,
      270,
      274,
      275,
      278,
      280,
      284,
      285,
      288,
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestIntegral.test_hermint_axis": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermint": {
     "line number": [
      297,
      298,
      301,
      302,
      305,
      306
     ]
    },
    "numpy.random.random": {
     "line number": [
      295
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      299,
      303,
      307
     ]
    },
    "numpy.vstack": {
     "line number": [
      297,
      301,
      305
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestMisc": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": {
    "object": {
     "line number": [
      509
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite.TestMisc.test_herm2poly": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.herm2poly": {
     "line number": [
      547
     ]
    },
    "numpy.polynomial.tests.test_hermite.Hlist": {
     "line number": [
      547
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      547
     ]
    },
    "range": {
     "line number": [
      546
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestMisc.test_hermfromroots": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": {
    "len": {
     "line number": [
      519
     ]
    },
    "numpy.cos": {
     "line number": [
      515
     ]
    },
    "numpy.linspace": {
     "line number": [
      515
     ]
    },
    "numpy.pi": {
     "line number": [
      515
     ]
    },
    "numpy.polynomial.hermite.herm2poly": {
     "line number": [
      520
     ]
    },
    "numpy.polynomial.hermite.hermfromroots": {
     "line number": [
      512,
      516
     ]
    },
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      517
     ]
    },
    "numpy.polynomial.tests.test_hermite.trim": {
     "line number": [
      513
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      519
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      513,
      520,
      521
     ]
    },
    "range": {
     "line number": [
      514
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestMisc.test_hermline": {
  "data": {
   "lineno": 542,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermline": {
     "line number": [
      543
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      543
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestMisc.test_hermroots": {
  "data": {
   "lineno": 523,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      527
     ]
    },
    "numpy.polynomial.hermite.hermfromroots": {
     "line number": [
      528
     ]
    },
    "numpy.polynomial.hermite.hermroots": {
     "line number": [
      524,
      525,
      528
     ]
    },
    "numpy.polynomial.tests.test_hermite.trim": {
     "line number": [
      529,
      529
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      524,
      525,
      529
     ]
    },
    "range": {
     "line number": [
      526
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestMisc.test_hermtrim": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      535
     ]
    },
    "numpy.polynomial.hermite.hermtrim": {
     "line number": [
      535,
      538,
      539,
      540
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      538,
      539,
      540
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      535
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestMisc.test_poly2herm": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.poly2herm": {
     "line number": [
      551
     ]
    },
    "numpy.polynomial.tests.test_hermite.Hlist": {
     "line number": [
      551
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      551
     ]
    },
    "range": {
     "line number": [
      550
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestMisc.test_weight": {
  "data": {
   "lineno": 553,
   "symbols_in_volume": {
    "numpy.exp": {
     "line number": [
      555
     ]
    },
    "numpy.linspace": {
     "line number": [
      554
     ]
    },
    "numpy.polynomial.hermite.hermweight": {
     "line number": [
      556
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      557
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestVander": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": {
    "numpy.random.random": {
     "line number": [
      352
     ]
    },
    "object": {
     "line number": [
      350
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite.TestVander.test_hermvander": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      356
     ]
    },
    "numpy.array": {
     "line number": [
      364
     ]
    },
    "numpy.polynomial.hermite.hermval": {
     "line number": [
      361,
      369
     ]
    },
    "numpy.polynomial.hermite.hermvander": {
     "line number": [
      357,
      365
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      358,
      366
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      361,
      369
     ]
    },
    "range": {
     "line number": [
      359,
      367
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestVander.test_hermvander2d": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      377
     ]
    },
    "numpy.polynomial.hermite.hermval2d": {
     "line number": [
      376
     ]
    },
    "numpy.polynomial.hermite.hermvander2d": {
     "line number": [
      375,
      381
     ]
    },
    "numpy.random.random": {
     "line number": [
      374
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      382
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      378
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.TestVander.test_hermvander3d": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      390
     ]
    },
    "numpy.polynomial.hermite.hermval3d": {
     "line number": [
      389
     ]
    },
    "numpy.polynomial.hermite.hermvander3d": {
     "line number": [
      388,
      394
     ]
    },
    "numpy.random.random": {
     "line number": [
      387
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      395
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      391
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite.herm": {
  "data": {
   "shadows": "numpy.polynomial.hermite"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite.polyval": {
  "data": {
   "shadows": "numpy.polynomial.polynomial.polyval"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite.trim": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "numpy.polynomial.hermite.hermtrim": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.He0": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.He1": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.He2": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.He3": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.He4": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.He5": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.He6": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.He7": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.He8": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.He9": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.tests.test_hermite_e.He0": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite_e.He1": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite_e.He2": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite_e.He3": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite_e.He4": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite_e.He5": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite_e.He6": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite_e.He7": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite_e.He8": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite_e.He9": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite_e.Helist": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_hermite_e.TestArithmetic": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      49
     ]
    },
    "object": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermeadd": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "max": {
     "line number": [
      55
     ]
    },
    "numpy.polynomial.hermite_e.hermeadd": {
     "line number": [
      58
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.trim": {
     "line number": [
      59,
      59
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      59
     ]
    },
    "numpy.zeros": {
     "line number": [
      55
     ]
    },
    "range": {
     "line number": [
      52,
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermediv": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermeadd": {
     "line number": [
      99,
      101
     ]
    },
    "numpy.polynomial.hermite_e.hermediv": {
     "line number": [
      100
     ]
    },
    "numpy.polynomial.hermite_e.hermemul": {
     "line number": [
      101
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.trim": {
     "line number": [
      102,
      102
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      102
     ]
    },
    "range": {
     "line number": [
      94,
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermemul": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "len": {
     "line number": [
      90
     ]
    },
    "numpy.polynomial.hermite_e.hermemul": {
     "line number": [
      88
     ]
    },
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      83,
      87,
      89
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      90
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      91
     ]
    },
    "range": {
     "line number": [
      81,
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermemulx": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermemulx": {
     "line number": [
      72,
      73,
      77
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      72,
      73,
      77
     ]
    },
    "range": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermepow": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      109
     ]
    },
    "numpy.arange": {
     "line number": [
      108
     ]
    },
    "numpy.array": {
     "line number": [
      109
     ]
    },
    "numpy.polynomial.hermite_e.hermemul": {
     "line number": [
      109
     ]
    },
    "numpy.polynomial.hermite_e.hermepow": {
     "line number": [
      110
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.trim": {
     "line number": [
      111,
      111
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      111
     ]
    },
    "range": {
     "line number": [
      105,
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermesub": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "max": {
     "line number": [
      65
     ]
    },
    "numpy.polynomial.hermite_e.hermesub": {
     "line number": [
      68
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.trim": {
     "line number": [
      69,
      69
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69
     ]
    },
    "numpy.zeros": {
     "line number": [
      65
     ]
    },
    "range": {
     "line number": [
      62,
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestCompanion": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": {
    "object": {
     "line number": [
      476
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite_e.TestCompanion.test_dimensions": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermecompanion": {
     "line number": [
      485
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      485
     ]
    },
    "range": {
     "line number": [
      483
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestCompanion.test_linear_root": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermecompanion": {
     "line number": [
      488
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      488
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestCompanion.test_raises": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      479,
      480
     ]
    },
    "numpy.polynomial.hermite_e.hermecompanion": {
     "line number": [
      479,
      480
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      479,
      480
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestConstants": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "object": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermedomain": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermedomain": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermeone": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermeone": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermex": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermex": {
     "line number": [
      45
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermezero": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermezero": {
     "line number": [
      39
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestDerivative": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "object": {
     "line number": [
      310
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite_e.TestDerivative.test_hermeder": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      314,
      315
     ]
    },
    "numpy.polynomial.hermite_e.hermeder": {
     "line number": [
      314,
      315,
      320,
      327,
      334
     ]
    },
    "numpy.polynomial.hermite_e.hermeint": {
     "line number": [
      327,
      335
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.trim": {
     "line number": [
      321,
      321,
      328,
      328,
      336,
      336
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      328,
      336
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      321
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      314,
      315
     ]
    },
    "range": {
     "line number": [
      318,
      324,
      325,
      331,
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestDerivative.test_hermeder_axis": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermeder": {
     "line number": [
      342,
      343,
      346,
      347
     ]
    },
    "numpy.random.random": {
     "line number": [
      340
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      344,
      348
     ]
    },
    "numpy.vstack": {
     "line number": [
      342,
      346
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestEvaluation": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      116
     ]
    },
    "numpy.einsum": {
     "line number": [
      117,
      118
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      122
     ]
    },
    "numpy.random.random": {
     "line number": [
      121
     ]
    },
    "object": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermegrid2d": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      184
     ]
    },
    "numpy.ones": {
     "line number": [
      189
     ]
    },
    "numpy.polynomial.hermite_e.hermegrid2d": {
     "line number": [
      185,
      190
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      191
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermegrid3d": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      198
     ]
    },
    "numpy.ones": {
     "line number": [
      203
     ]
    },
    "numpy.polynomial.hermite_e.hermegrid3d": {
     "line number": [
      199,
      204
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      205
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      129
     ]
    },
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      126,
      134,
      141,
      142,
      143
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      130
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.Helist": {
     "line number": [
      130
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      135
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      126,
      141,
      142,
      143
     ]
    },
    "numpy.zeros": {
     "line number": [
      140
     ]
    },
    "range": {
     "line number": [
      131,
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval2d": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      150
     ]
    },
    "numpy.ones": {
     "line number": [
      158
     ]
    },
    "numpy.polynomial.hermite_e.hermeval2d": {
     "line number": [
      150,
      154,
      159
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      160
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      155
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval3d": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      167
     ]
    },
    "numpy.ones": {
     "line number": [
      175
     ]
    },
    "numpy.polynomial.hermite_e.hermeval3d": {
     "line number": [
      167,
      171,
      176
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      177
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      172
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestFitting": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": {
    "object": {
     "line number": [
      399
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      419
     ]
    },
    "ValueError": {
     "line number": [
      409,
      417,
      418
     ]
    },
    "f": {
     "line number": [
      423
     ]
    },
    "f2": {
     "line number": [
      468
     ]
    },
    "len": {
     "line number": [
      426,
      429,
      433,
      436,
      440
     ]
    },
    "numpy.array": {
     "line number": [
      443,
      444,
      445,
      446,
      457,
      458,
      459,
      460
     ]
    },
    "numpy.linspace": {
     "line number": [
      422,
      467
     ]
    },
    "numpy.polynomial.hermite_e.hermefit": {
     "line number": [
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      419,
      425,
      428,
      432,
      435,
      439,
      443,
      445,
      452,
      454,
      457,
      459,
      464,
      465,
      469,
      471
     ]
    },
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      427,
      430,
      434,
      437,
      441,
      470,
      472
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      427,
      430,
      434,
      437,
      441,
      444,
      446,
      453,
      455,
      458,
      460,
      464,
      465,
      470,
      472,
      473
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      426,
      429,
      433,
      436,
      440
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      419
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      448
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f": {
  "data": {
   "lineno": 402
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f2": {
  "data": {
   "lineno": 405
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestGauss": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": {
    "object": {
     "line number": [
      491
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite_e.TestGauss.test_100": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      500
     ]
    },
    "numpy.eye": {
     "line number": [
      503
     ]
    },
    "numpy.pi": {
     "line number": [
      506
     ]
    },
    "numpy.polynomial.hermite_e.hermegauss": {
     "line number": [
      494
     ]
    },
    "numpy.polynomial.hermite_e.hermevander": {
     "line number": [
      499
     ]
    },
    "numpy.sqrt": {
     "line number": [
      501,
      506
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      503,
      507
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestIntegral": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "object": {
     "line number": [
      208
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite_e.TestIntegral.test_hermeint": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      212,
      213,
      214,
      215,
      216,
      217
     ]
    },
    "list": {
     "line number": [
      270,
      280,
      290
     ]
    },
    "numpy.polynomial.hermite_e.herme2poly": {
     "line number": [
      232,
      250
     ]
    },
    "numpy.polynomial.hermite_e.hermeint": {
     "line number": [
      212,
      213,
      214,
      215,
      216,
      217,
      222,
      231,
      240,
      249,
      259,
      260,
      269,
      270,
      279,
      280,
      289,
      290
     ]
    },
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      241
     ]
    },
    "numpy.polynomial.hermite_e.poly2herme": {
     "line number": [
      230,
      239,
      248
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.trim": {
     "line number": [
      233,
      233,
      251,
      251,
      261,
      261,
      271,
      271,
      281,
      281,
      291,
      291
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      223,
      233,
      241,
      251,
      261,
      271,
      281,
      291
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      212,
      213,
      214,
      215,
      216,
      217
     ]
    },
    "range": {
     "line number": [
      220,
      226,
      236,
      244,
      254,
      255,
      258,
      264,
      265,
      268,
      270,
      274,
      275,
      278,
      280,
      284,
      285,
      288,
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestIntegral.test_hermeint_axis": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermeint": {
     "line number": [
      297,
      298,
      301,
      302,
      305,
      306
     ]
    },
    "numpy.random.random": {
     "line number": [
      295
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      299,
      303,
      307
     ]
    },
    "numpy.vstack": {
     "line number": [
      297,
      301,
      305
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestMisc": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": {
    "object": {
     "line number": [
      510
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite_e.TestMisc.test_herme2poly": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.herme2poly": {
     "line number": [
      548
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.Helist": {
     "line number": [
      548
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      548
     ]
    },
    "range": {
     "line number": [
      547
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermefromroots": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": {
    "len": {
     "line number": [
      520
     ]
    },
    "numpy.cos": {
     "line number": [
      516
     ]
    },
    "numpy.linspace": {
     "line number": [
      516
     ]
    },
    "numpy.pi": {
     "line number": [
      516
     ]
    },
    "numpy.polynomial.hermite_e.herme2poly": {
     "line number": [
      521
     ]
    },
    "numpy.polynomial.hermite_e.hermefromroots": {
     "line number": [
      513,
      517
     ]
    },
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      518
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.trim": {
     "line number": [
      514
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      520
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      514,
      521,
      522
     ]
    },
    "range": {
     "line number": [
      515
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermeline": {
  "data": {
   "lineno": 543,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermeline": {
     "line number": [
      544
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      544
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermeroots": {
  "data": {
   "lineno": 524,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      528
     ]
    },
    "numpy.polynomial.hermite_e.hermefromroots": {
     "line number": [
      529
     ]
    },
    "numpy.polynomial.hermite_e.hermeroots": {
     "line number": [
      525,
      526,
      529
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.trim": {
     "line number": [
      530,
      530
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      525,
      526,
      530
     ]
    },
    "range": {
     "line number": [
      527
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermetrim": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      536
     ]
    },
    "numpy.polynomial.hermite_e.hermetrim": {
     "line number": [
      536,
      539,
      540,
      541
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      539,
      540,
      541
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      536
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestMisc.test_poly2herme": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.poly2herme": {
     "line number": [
      552
     ]
    },
    "numpy.polynomial.tests.test_hermite_e.Helist": {
     "line number": [
      552
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      552
     ]
    },
    "range": {
     "line number": [
      551
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestMisc.test_weight": {
  "data": {
   "lineno": 554,
   "symbols_in_volume": {
    "numpy.exp": {
     "line number": [
      556
     ]
    },
    "numpy.linspace": {
     "line number": [
      555
     ]
    },
    "numpy.polynomial.hermite_e.hermeweight": {
     "line number": [
      557
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      558
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestVander": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "numpy.random.random": {
     "line number": [
      353
     ]
    },
    "object": {
     "line number": [
      351
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      357
     ]
    },
    "numpy.array": {
     "line number": [
      365
     ]
    },
    "numpy.polynomial.hermite_e.hermeval": {
     "line number": [
      362,
      370
     ]
    },
    "numpy.polynomial.hermite_e.hermevander": {
     "line number": [
      358,
      366
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      359,
      367
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      362,
      370
     ]
    },
    "range": {
     "line number": [
      360,
      368
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander2d": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      378
     ]
    },
    "numpy.polynomial.hermite_e.hermeval2d": {
     "line number": [
      377
     ]
    },
    "numpy.polynomial.hermite_e.hermevander2d": {
     "line number": [
      376,
      382
     ]
    },
    "numpy.random.random": {
     "line number": [
      375
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      383
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      379
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander3d": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      391
     ]
    },
    "numpy.polynomial.hermite_e.hermeval3d": {
     "line number": [
      390
     ]
    },
    "numpy.polynomial.hermite_e.hermevander3d": {
     "line number": [
      389,
      395
     ]
    },
    "numpy.random.random": {
     "line number": [
      388
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      396
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      392
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_hermite_e.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite_e.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite_e.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite_e.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite_e.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite_e.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite_e.herme": {
  "data": {
   "shadows": "numpy.polynomial.hermite_e"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite_e.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite_e.polyval": {
  "data": {
   "shadows": "numpy.polynomial.polynomial.polyval"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite_e.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite_e.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_hermite_e.trim": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "numpy.polynomial.hermite_e.hermetrim": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      15,
      16,
      17,
      18,
      19,
      20,
      21
     ]
    },
    "numpy.polynomial.tests.test_laguerre.L0": {
     "line number": [
      23
     ]
    },
    "numpy.polynomial.tests.test_laguerre.L1": {
     "line number": [
      23
     ]
    },
    "numpy.polynomial.tests.test_laguerre.L2": {
     "line number": [
      23
     ]
    },
    "numpy.polynomial.tests.test_laguerre.L3": {
     "line number": [
      23
     ]
    },
    "numpy.polynomial.tests.test_laguerre.L4": {
     "line number": [
      23
     ]
    },
    "numpy.polynomial.tests.test_laguerre.L5": {
     "line number": [
      23
     ]
    },
    "numpy.polynomial.tests.test_laguerre.L6": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.tests.test_laguerre.L0": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_laguerre.L1": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_laguerre.L2": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_laguerre.L3": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_laguerre.L4": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_laguerre.L5": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_laguerre.L6": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_laguerre.Llist": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_laguerre.TestArithmetic": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      46
     ]
    },
    "object": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagadd": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "max": {
     "line number": [
      52
     ]
    },
    "numpy.polynomial.laguerre.lagadd": {
     "line number": [
      55
     ]
    },
    "numpy.polynomial.tests.test_laguerre.trim": {
     "line number": [
      56,
      56
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      56
     ]
    },
    "numpy.zeros": {
     "line number": [
      52
     ]
    },
    "range": {
     "line number": [
      49,
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagdiv": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagadd": {
     "line number": [
      96,
      98
     ]
    },
    "numpy.polynomial.laguerre.lagdiv": {
     "line number": [
      97
     ]
    },
    "numpy.polynomial.laguerre.lagmul": {
     "line number": [
      98
     ]
    },
    "numpy.polynomial.tests.test_laguerre.trim": {
     "line number": [
      99,
      99
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      99
     ]
    },
    "range": {
     "line number": [
      91,
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagmul": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "len": {
     "line number": [
      87
     ]
    },
    "numpy.polynomial.laguerre.lagmul": {
     "line number": [
      85
     ]
    },
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      80,
      84,
      86
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      87
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      88
     ]
    },
    "range": {
     "line number": [
      78,
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagmulx": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagmulx": {
     "line number": [
      69,
      70,
      74
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      74
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69,
      70
     ]
    },
    "range": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagpow": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      106
     ]
    },
    "numpy.arange": {
     "line number": [
      105
     ]
    },
    "numpy.array": {
     "line number": [
      106
     ]
    },
    "numpy.polynomial.laguerre.lagmul": {
     "line number": [
      106
     ]
    },
    "numpy.polynomial.laguerre.lagpow": {
     "line number": [
      107
     ]
    },
    "numpy.polynomial.tests.test_laguerre.trim": {
     "line number": [
      108,
      108
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      108
     ]
    },
    "range": {
     "line number": [
      102,
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagsub": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "max": {
     "line number": [
      62
     ]
    },
    "numpy.polynomial.laguerre.lagsub": {
     "line number": [
      65
     ]
    },
    "numpy.polynomial.tests.test_laguerre.trim": {
     "line number": [
      66,
      66
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      66
     ]
    },
    "numpy.zeros": {
     "line number": [
      62
     ]
    },
    "range": {
     "line number": [
      59,
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestCompanion": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": {
    "object": {
     "line number": [
      457
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_laguerre.TestCompanion.test_dimensions": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagcompanion": {
     "line number": [
      466
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      466
     ]
    },
    "range": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestCompanion.test_linear_root": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagcompanion": {
     "line number": [
      469
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestCompanion.test_raises": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      460,
      461
     ]
    },
    "numpy.polynomial.laguerre.lagcompanion": {
     "line number": [
      460,
      461
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      460,
      461
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestConstants": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "object": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_laguerre.TestConstants.test_lagdomain": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagdomain": {
     "line number": [
      33
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestConstants.test_lagone": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagone": {
     "line number": [
      39
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestConstants.test_lagx": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagx": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestConstants.test_lagzero": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagzero": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestDerivative": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "object": {
     "line number": [
      307
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_laguerre.TestDerivative.test_lagder": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      311,
      312
     ]
    },
    "numpy.polynomial.laguerre.lagder": {
     "line number": [
      311,
      312,
      317,
      324,
      331
     ]
    },
    "numpy.polynomial.laguerre.lagint": {
     "line number": [
      324,
      331
     ]
    },
    "numpy.polynomial.tests.test_laguerre.trim": {
     "line number": [
      318,
      318,
      325,
      325,
      332,
      332
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      325,
      332
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      318
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      311,
      312
     ]
    },
    "range": {
     "line number": [
      315,
      321,
      322,
      328,
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestDerivative.test_lagder_axis": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagder": {
     "line number": [
      338,
      339,
      342,
      343
     ]
    },
    "numpy.random.random": {
     "line number": [
      336
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      340,
      344
     ]
    },
    "numpy.vstack": {
     "line number": [
      338,
      342
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestEvaluation": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      113
     ]
    },
    "numpy.einsum": {
     "line number": [
      114,
      115
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      119
     ]
    },
    "numpy.random.random": {
     "line number": [
      118
     ]
    },
    "object": {
     "line number": [
      111
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_laguerre.TestEvaluation.test_laggrid2d": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      181
     ]
    },
    "numpy.ones": {
     "line number": [
      186
     ]
    },
    "numpy.polynomial.laguerre.laggrid2d": {
     "line number": [
      182,
      187
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      188
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestEvaluation.test_laggrid3d": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      195
     ]
    },
    "numpy.ones": {
     "line number": [
      200
     ]
    },
    "numpy.polynomial.laguerre.laggrid3d": {
     "line number": [
      196,
      201
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      202
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      126
     ]
    },
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      123,
      131,
      138,
      139,
      140
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      127
     ]
    },
    "numpy.polynomial.tests.test_laguerre.Llist": {
     "line number": [
      127
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      132
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      123,
      138,
      139,
      140
     ]
    },
    "numpy.zeros": {
     "line number": [
      137
     ]
    },
    "range": {
     "line number": [
      128,
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval2d": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      147
     ]
    },
    "numpy.ones": {
     "line number": [
      155
     ]
    },
    "numpy.polynomial.laguerre.lagval2d": {
     "line number": [
      147,
      151,
      156
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      157
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      152
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval3d": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      164
     ]
    },
    "numpy.ones": {
     "line number": [
      172
     ]
    },
    "numpy.polynomial.laguerre.lagval3d": {
     "line number": [
      164,
      168,
      173
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      174
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      169
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      164
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestFitting": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": {
    "object": {
     "line number": [
      395
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      403,
      404,
      405,
      406,
      407,
      408,
      409,
      412
     ]
    },
    "ValueError": {
     "line number": [
      402,
      410,
      411
     ]
    },
    "f": {
     "line number": [
      416
     ]
    },
    "len": {
     "line number": [
      419,
      422,
      426,
      429
     ]
    },
    "numpy.array": {
     "line number": [
      432,
      433,
      434,
      435,
      446,
      447,
      448,
      449
     ]
    },
    "numpy.linspace": {
     "line number": [
      415
     ]
    },
    "numpy.polynomial.laguerre.lagfit": {
     "line number": [
      402,
      403,
      404,
      405,
      406,
      407,
      408,
      409,
      410,
      411,
      412,
      418,
      421,
      425,
      428,
      432,
      434,
      441,
      443,
      446,
      448,
      453,
      454
     ]
    },
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      420,
      423,
      427,
      430
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      420,
      423,
      427,
      430,
      433,
      435,
      442,
      444,
      447,
      449,
      453,
      454
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      419,
      422,
      426,
      429
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      402,
      403,
      404,
      405,
      406,
      407,
      408,
      409,
      410,
      411,
      412
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      437
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f": {
  "data": {
   "lineno": 398
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestGauss": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": {
    "object": {
     "line number": [
      472
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_laguerre.TestGauss.test_100": {
  "data": {
   "lineno": 474,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      481
     ]
    },
    "numpy.eye": {
     "line number": [
      484
     ]
    },
    "numpy.polynomial.laguerre.laggauss": {
     "line number": [
      475
     ]
    },
    "numpy.polynomial.laguerre.lagvander": {
     "line number": [
      480
     ]
    },
    "numpy.sqrt": {
     "line number": [
      482
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      484,
      488
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestIntegral": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "object": {
     "line number": [
      205
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_laguerre.TestIntegral.test_lagint": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      209,
      210,
      211,
      212,
      213,
      214
     ]
    },
    "list": {
     "line number": [
      267,
      277,
      287
     ]
    },
    "numpy.polynomial.laguerre.lag2poly": {
     "line number": [
      229,
      247
     ]
    },
    "numpy.polynomial.laguerre.lagint": {
     "line number": [
      209,
      210,
      211,
      212,
      213,
      214,
      219,
      228,
      237,
      246,
      256,
      257,
      266,
      267,
      276,
      277,
      286,
      287
     ]
    },
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      238
     ]
    },
    "numpy.polynomial.laguerre.poly2lag": {
     "line number": [
      227,
      236,
      245
     ]
    },
    "numpy.polynomial.tests.test_laguerre.trim": {
     "line number": [
      230,
      230,
      248,
      248,
      258,
      258,
      268,
      268,
      278,
      278,
      288,
      288
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      220,
      230,
      238,
      248,
      258,
      268,
      278,
      288
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      209,
      210,
      211,
      212,
      213,
      214
     ]
    },
    "range": {
     "line number": [
      217,
      223,
      233,
      241,
      251,
      252,
      255,
      261,
      262,
      265,
      267,
      271,
      272,
      275,
      277,
      281,
      282,
      285,
      287
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestIntegral.test_lagint_axis": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagint": {
     "line number": [
      294,
      295,
      298,
      299,
      302,
      303
     ]
    },
    "numpy.random.random": {
     "line number": [
      292
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      296,
      300,
      304
     ]
    },
    "numpy.vstack": {
     "line number": [
      294,
      298,
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestMisc": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": {
    "object": {
     "line number": [
      491
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_laguerre.TestMisc.test_lag2poly": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lag2poly": {
     "line number": [
      529
     ]
    },
    "numpy.polynomial.tests.test_laguerre.Llist": {
     "line number": [
      529
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      529
     ]
    },
    "range": {
     "line number": [
      528
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestMisc.test_lagfromroots": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": {
    "len": {
     "line number": [
      501
     ]
    },
    "numpy.cos": {
     "line number": [
      497
     ]
    },
    "numpy.linspace": {
     "line number": [
      497
     ]
    },
    "numpy.pi": {
     "line number": [
      497
     ]
    },
    "numpy.polynomial.laguerre.lag2poly": {
     "line number": [
      502
     ]
    },
    "numpy.polynomial.laguerre.lagfromroots": {
     "line number": [
      494,
      498
     ]
    },
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      499
     ]
    },
    "numpy.polynomial.tests.test_laguerre.trim": {
     "line number": [
      495
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      501
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      495,
      502,
      503
     ]
    },
    "range": {
     "line number": [
      496
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestMisc.test_lagline": {
  "data": {
   "lineno": 524,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagline": {
     "line number": [
      525
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      525
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestMisc.test_lagroots": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      509
     ]
    },
    "numpy.polynomial.laguerre.lagfromroots": {
     "line number": [
      510
     ]
    },
    "numpy.polynomial.laguerre.lagroots": {
     "line number": [
      506,
      507,
      510
     ]
    },
    "numpy.polynomial.tests.test_laguerre.trim": {
     "line number": [
      511,
      511
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      506,
      507,
      511
     ]
    },
    "range": {
     "line number": [
      508
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestMisc.test_lagtrim": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      517
     ]
    },
    "numpy.polynomial.laguerre.lagtrim": {
     "line number": [
      517,
      520,
      521,
      522
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      520,
      521,
      522
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      517
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestMisc.test_poly2lag": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.poly2lag": {
     "line number": [
      533
     ]
    },
    "numpy.polynomial.tests.test_laguerre.Llist": {
     "line number": [
      533
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      533
     ]
    },
    "range": {
     "line number": [
      532
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestMisc.test_weight": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": {
    "numpy.exp": {
     "line number": [
      537
     ]
    },
    "numpy.linspace": {
     "line number": [
      536
     ]
    },
    "numpy.polynomial.laguerre.lagweight": {
     "line number": [
      538
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      539
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestVander": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": {
    "numpy.random.random": {
     "line number": [
      349
     ]
    },
    "object": {
     "line number": [
      347
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      353
     ]
    },
    "numpy.array": {
     "line number": [
      361
     ]
    },
    "numpy.polynomial.laguerre.lagval": {
     "line number": [
      358,
      366
     ]
    },
    "numpy.polynomial.laguerre.lagvander": {
     "line number": [
      354,
      362
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      355,
      363
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      358,
      366
     ]
    },
    "range": {
     "line number": [
      356,
      364
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander2d": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      374
     ]
    },
    "numpy.polynomial.laguerre.lagval2d": {
     "line number": [
      373
     ]
    },
    "numpy.polynomial.laguerre.lagvander2d": {
     "line number": [
      372,
      378
     ]
    },
    "numpy.random.random": {
     "line number": [
      371
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      379
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      375
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander3d": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      387
     ]
    },
    "numpy.polynomial.laguerre.lagval3d": {
     "line number": [
      386
     ]
    },
    "numpy.polynomial.laguerre.lagvander3d": {
     "line number": [
      385,
      391
     ]
    },
    "numpy.random.random": {
     "line number": [
      384
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      392
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      388
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_laguerre.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_laguerre.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_laguerre.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_laguerre.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_laguerre.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_laguerre.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_laguerre.lag": {
  "data": {
   "shadows": "numpy.polynomial.laguerre"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_laguerre.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_laguerre.polyval": {
  "data": {
   "shadows": "numpy.polynomial.polynomial.polyval"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_laguerre.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_laguerre.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_laguerre.trim": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "numpy.polynomial.laguerre.lagtrim": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre": {
  "data": {
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24
     ]
    },
    "numpy.polynomial.tests.test_legendre.L0": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_legendre.L1": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_legendre.L2": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_legendre.L3": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_legendre.L4": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_legendre.L5": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_legendre.L6": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_legendre.L7": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_legendre.L8": {
     "line number": [
      26
     ]
    },
    "numpy.polynomial.tests.test_legendre.L9": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.tests.test_legendre.L0": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_legendre.L1": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_legendre.L2": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_legendre.L3": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_legendre.L4": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_legendre.L5": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_legendre.L6": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_legendre.L7": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_legendre.L8": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_legendre.L9": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_legendre.Llist": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_legendre.TestArithmetic": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      49
     ]
    },
    "object": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_legendre.TestArithmetic.test_legadd": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "max": {
     "line number": [
      55
     ]
    },
    "numpy.polynomial.legendre.legadd": {
     "line number": [
      58
     ]
    },
    "numpy.polynomial.tests.test_legendre.trim": {
     "line number": [
      59,
      59
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      59
     ]
    },
    "numpy.zeros": {
     "line number": [
      55
     ]
    },
    "range": {
     "line number": [
      52,
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestArithmetic.test_legdiv": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legadd": {
     "line number": [
      100,
      102
     ]
    },
    "numpy.polynomial.legendre.legdiv": {
     "line number": [
      101
     ]
    },
    "numpy.polynomial.legendre.legmul": {
     "line number": [
      102
     ]
    },
    "numpy.polynomial.tests.test_legendre.trim": {
     "line number": [
      103,
      103
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      103
     ]
    },
    "range": {
     "line number": [
      95,
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestArithmetic.test_legmul": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "len": {
     "line number": [
      91
     ]
    },
    "numpy.polynomial.legendre.legmul": {
     "line number": [
      89
     ]
    },
    "numpy.polynomial.legendre.legval": {
     "line number": [
      84,
      88,
      90
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      91
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      92
     ]
    },
    "range": {
     "line number": [
      82,
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestArithmetic.test_legmulx": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legmulx": {
     "line number": [
      72,
      73,
      78
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      72,
      73,
      78
     ]
    },
    "range": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestArithmetic.test_legpow": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      110
     ]
    },
    "numpy.arange": {
     "line number": [
      109
     ]
    },
    "numpy.array": {
     "line number": [
      110
     ]
    },
    "numpy.polynomial.legendre.legmul": {
     "line number": [
      110
     ]
    },
    "numpy.polynomial.legendre.legpow": {
     "line number": [
      111
     ]
    },
    "numpy.polynomial.tests.test_legendre.trim": {
     "line number": [
      112,
      112
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      112
     ]
    },
    "range": {
     "line number": [
      106,
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestArithmetic.test_legsub": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "max": {
     "line number": [
      65
     ]
    },
    "numpy.polynomial.legendre.legsub": {
     "line number": [
      68
     ]
    },
    "numpy.polynomial.tests.test_legendre.trim": {
     "line number": [
      69,
      69
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      69
     ]
    },
    "numpy.zeros": {
     "line number": [
      65
     ]
    },
    "range": {
     "line number": [
      62,
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestCompanion": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": {
    "object": {
     "line number": [
      476
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_legendre.TestCompanion.test_dimensions": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legcompanion": {
     "line number": [
      485
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      485
     ]
    },
    "range": {
     "line number": [
      483
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestCompanion.test_linear_root": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legcompanion": {
     "line number": [
      488
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      488
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestCompanion.test_raises": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      479,
      480
     ]
    },
    "numpy.polynomial.legendre.legcompanion": {
     "line number": [
      479,
      480
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      479,
      480
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestConstants": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "object": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_legendre.TestConstants.test_legdomain": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legdomain": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestConstants.test_legone": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legone": {
     "line number": [
      42
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestConstants.test_legx": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legx": {
     "line number": [
      45
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestConstants.test_legzero": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legzero": {
     "line number": [
      39
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestDerivative": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": {
    "object": {
     "line number": [
      311
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_legendre.TestDerivative.test_legder": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      315,
      316
     ]
    },
    "numpy.polynomial.legendre.legder": {
     "line number": [
      315,
      316,
      321,
      328,
      335
     ]
    },
    "numpy.polynomial.legendre.legint": {
     "line number": [
      328,
      335
     ]
    },
    "numpy.polynomial.tests.test_legendre.trim": {
     "line number": [
      322,
      322,
      329,
      329,
      336,
      336
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      329,
      336
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      322
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      315,
      316
     ]
    },
    "range": {
     "line number": [
      319,
      325,
      326,
      332,
      333
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestDerivative.test_legder_axis": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legder": {
     "line number": [
      342,
      343,
      346,
      347
     ]
    },
    "numpy.random.random": {
     "line number": [
      340
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      344,
      348
     ]
    },
    "numpy.vstack": {
     "line number": [
      342,
      346
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestEvaluation": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      117
     ]
    },
    "numpy.einsum": {
     "line number": [
      118,
      119
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      123
     ]
    },
    "numpy.random.random": {
     "line number": [
      122
     ]
    },
    "object": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_legendre.TestEvaluation.test_leggrid2d": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      185
     ]
    },
    "numpy.ones": {
     "line number": [
      190
     ]
    },
    "numpy.polynomial.legendre.leggrid2d": {
     "line number": [
      186,
      191
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      192
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestEvaluation.test_leggrid3d": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      199
     ]
    },
    "numpy.ones": {
     "line number": [
      204
     ]
    },
    "numpy.polynomial.legendre.leggrid3d": {
     "line number": [
      200,
      205
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      206
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      130
     ]
    },
    "numpy.polynomial.legendre.legval": {
     "line number": [
      127,
      135,
      142,
      143,
      144
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      131
     ]
    },
    "numpy.polynomial.tests.test_legendre.Llist": {
     "line number": [
      131
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      136
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      127,
      142,
      143,
      144
     ]
    },
    "numpy.zeros": {
     "line number": [
      141
     ]
    },
    "range": {
     "line number": [
      132,
      139
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval2d": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      151
     ]
    },
    "numpy.ones": {
     "line number": [
      159
     ]
    },
    "numpy.polynomial.legendre.legval2d": {
     "line number": [
      151,
      155,
      160
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      161
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      156
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      151
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval3d": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      168
     ]
    },
    "numpy.ones": {
     "line number": [
      176
     ]
    },
    "numpy.polynomial.legendre.legval3d": {
     "line number": [
      168,
      172,
      177
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      178
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      173
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestFitting": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": {
    "object": {
     "line number": [
      399
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      419
     ]
    },
    "ValueError": {
     "line number": [
      409,
      417,
      418
     ]
    },
    "f": {
     "line number": [
      423
     ]
    },
    "f2": {
     "line number": [
      468
     ]
    },
    "len": {
     "line number": [
      426,
      429,
      433,
      436,
      440
     ]
    },
    "numpy.array": {
     "line number": [
      443,
      444,
      445,
      446,
      457,
      458,
      459,
      460
     ]
    },
    "numpy.linspace": {
     "line number": [
      422,
      467
     ]
    },
    "numpy.polynomial.legendre.legfit": {
     "line number": [
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      419,
      425,
      428,
      432,
      435,
      439,
      443,
      445,
      452,
      454,
      457,
      459,
      464,
      465,
      469,
      471
     ]
    },
    "numpy.polynomial.legendre.legval": {
     "line number": [
      427,
      430,
      434,
      437,
      441,
      470,
      472
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      427,
      430,
      434,
      437,
      441,
      444,
      446,
      453,
      455,
      458,
      460,
      464,
      465,
      470,
      472,
      473
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      426,
      429,
      433,
      436,
      440
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      419
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      448
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f": {
  "data": {
   "lineno": 402
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f2": {
  "data": {
   "lineno": 405
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestGauss": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": {
    "object": {
     "line number": [
      491
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_legendre.TestGauss.test_100": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      500
     ]
    },
    "numpy.eye": {
     "line number": [
      503
     ]
    },
    "numpy.polynomial.legendre.leggauss": {
     "line number": [
      494
     ]
    },
    "numpy.polynomial.legendre.legvander": {
     "line number": [
      499
     ]
    },
    "numpy.sqrt": {
     "line number": [
      501
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      503,
      507
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestIntegral": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "object": {
     "line number": [
      209
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_legendre.TestIntegral.test_legint": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      213,
      214,
      215,
      216,
      217,
      218
     ]
    },
    "list": {
     "line number": [
      271,
      281,
      291
     ]
    },
    "numpy.polynomial.legendre.leg2poly": {
     "line number": [
      233,
      251
     ]
    },
    "numpy.polynomial.legendre.legint": {
     "line number": [
      213,
      214,
      215,
      216,
      217,
      218,
      223,
      232,
      241,
      250,
      260,
      261,
      270,
      271,
      280,
      281,
      290,
      291
     ]
    },
    "numpy.polynomial.legendre.legval": {
     "line number": [
      242
     ]
    },
    "numpy.polynomial.legendre.poly2leg": {
     "line number": [
      231,
      240,
      249
     ]
    },
    "numpy.polynomial.tests.test_legendre.trim": {
     "line number": [
      234,
      234,
      252,
      252,
      262,
      262,
      272,
      272,
      282,
      282,
      292,
      292
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      224,
      234,
      242,
      252,
      262,
      272,
      282,
      292
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      213,
      214,
      215,
      216,
      217,
      218
     ]
    },
    "range": {
     "line number": [
      221,
      227,
      237,
      245,
      255,
      256,
      259,
      265,
      266,
      269,
      271,
      275,
      276,
      279,
      281,
      285,
      286,
      289,
      291
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestIntegral.test_legint_axis": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legint": {
     "line number": [
      298,
      299,
      302,
      303,
      306,
      307
     ]
    },
    "numpy.random.random": {
     "line number": [
      296
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      300,
      304,
      308
     ]
    },
    "numpy.vstack": {
     "line number": [
      298,
      302,
      306
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestMisc": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": {
    "object": {
     "line number": [
      510
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_legendre.TestMisc.test_leg2poly": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.leg2poly": {
     "line number": [
      548
     ]
    },
    "numpy.polynomial.tests.test_legendre.Llist": {
     "line number": [
      548
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      548
     ]
    },
    "range": {
     "line number": [
      547
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestMisc.test_legfromroots": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": {
    "len": {
     "line number": [
      520
     ]
    },
    "numpy.cos": {
     "line number": [
      516
     ]
    },
    "numpy.linspace": {
     "line number": [
      516
     ]
    },
    "numpy.pi": {
     "line number": [
      516
     ]
    },
    "numpy.polynomial.legendre.leg2poly": {
     "line number": [
      521
     ]
    },
    "numpy.polynomial.legendre.legfromroots": {
     "line number": [
      513,
      517
     ]
    },
    "numpy.polynomial.legendre.legval": {
     "line number": [
      518
     ]
    },
    "numpy.polynomial.tests.test_legendre.trim": {
     "line number": [
      514
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      520
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      514,
      521,
      522
     ]
    },
    "range": {
     "line number": [
      515
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestMisc.test_legline": {
  "data": {
   "lineno": 543,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legline": {
     "line number": [
      544
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      544
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestMisc.test_legroots": {
  "data": {
   "lineno": 524,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      528
     ]
    },
    "numpy.polynomial.legendre.legfromroots": {
     "line number": [
      529
     ]
    },
    "numpy.polynomial.legendre.legroots": {
     "line number": [
      525,
      526,
      529
     ]
    },
    "numpy.polynomial.tests.test_legendre.trim": {
     "line number": [
      530,
      530
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      525,
      526,
      530
     ]
    },
    "range": {
     "line number": [
      527
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestMisc.test_legtrim": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      536
     ]
    },
    "numpy.polynomial.legendre.legtrim": {
     "line number": [
      536,
      539,
      540,
      541
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      539,
      540,
      541
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      536
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestMisc.test_poly2leg": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.poly2leg": {
     "line number": [
      552
     ]
    },
    "numpy.polynomial.tests.test_legendre.Llist": {
     "line number": [
      552
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      552
     ]
    },
    "range": {
     "line number": [
      551
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestMisc.test_weight": {
  "data": {
   "lineno": 554,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      555
     ]
    },
    "numpy.polynomial.legendre.legweight": {
     "line number": [
      557
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      558
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestVander": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "numpy.random.random": {
     "line number": [
      353
     ]
    },
    "object": {
     "line number": [
      351
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_legendre.TestVander.test_legvander": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      357
     ]
    },
    "numpy.array": {
     "line number": [
      365
     ]
    },
    "numpy.polynomial.legendre.legval": {
     "line number": [
      362,
      370
     ]
    },
    "numpy.polynomial.legendre.legvander": {
     "line number": [
      358,
      366
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      359,
      367
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      362,
      370
     ]
    },
    "range": {
     "line number": [
      360,
      368
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestVander.test_legvander2d": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      378
     ]
    },
    "numpy.polynomial.legendre.legval2d": {
     "line number": [
      377
     ]
    },
    "numpy.polynomial.legendre.legvander2d": {
     "line number": [
      376,
      382
     ]
    },
    "numpy.random.random": {
     "line number": [
      375
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      383
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      379
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.TestVander.test_legvander3d": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      391
     ]
    },
    "numpy.polynomial.legendre.legval3d": {
     "line number": [
      390
     ]
    },
    "numpy.polynomial.legendre.legvander3d": {
     "line number": [
      389,
      395
     ]
    },
    "numpy.random.random": {
     "line number": [
      388
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      396
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      392
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_legendre.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_legendre.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_legendre.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_legendre.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_legendre.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_legendre.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_legendre.leg": {
  "data": {
   "shadows": "numpy.polynomial.legendre"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_legendre.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_legendre.polyval": {
  "data": {
   "shadows": "numpy.polynomial.polynomial.polyval"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_legendre.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_legendre.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_legendre.trim": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "numpy.polynomial.legendre.legtrim": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial": {
  "data": {
   "symbols_in_volume": {
    "numpy.polynomial.tests.test_polynomial.T0": {
     "line number": [
      29
     ]
    },
    "numpy.polynomial.tests.test_polynomial.T1": {
     "line number": [
      29
     ]
    },
    "numpy.polynomial.tests.test_polynomial.T2": {
     "line number": [
      29
     ]
    },
    "numpy.polynomial.tests.test_polynomial.T3": {
     "line number": [
      29
     ]
    },
    "numpy.polynomial.tests.test_polynomial.T4": {
     "line number": [
      29
     ]
    },
    "numpy.polynomial.tests.test_polynomial.T5": {
     "line number": [
      29
     ]
    },
    "numpy.polynomial.tests.test_polynomial.T6": {
     "line number": [
      29
     ]
    },
    "numpy.polynomial.tests.test_polynomial.T7": {
     "line number": [
      29
     ]
    },
    "numpy.polynomial.tests.test_polynomial.T8": {
     "line number": [
      29
     ]
    },
    "numpy.polynomial.tests.test_polynomial.T9": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.polynomial.tests.test_polynomial.T0": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_polynomial.T1": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_polynomial.T2": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_polynomial.T3": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_polynomial.T4": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_polynomial.T5": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_polynomial.T6": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_polynomial.T7": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_polynomial.T8": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_polynomial.T9": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_polynomial.TestArithmetic": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "object": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polyadd": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "max": {
     "line number": [
      53
     ]
    },
    "numpy.polynomial.polynomial.polyadd": {
     "line number": [
      56
     ]
    },
    "numpy.polynomial.tests.test_polynomial.trim": {
     "line number": [
      57,
      57
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      57
     ]
    },
    "numpy.zeros": {
     "line number": [
      53
     ]
    },
    "range": {
     "line number": [
      50,
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polydiv": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "ZeroDivisionError": {
     "line number": [
      88
     ]
    },
    "numpy.polynomial.polynomial.polyadd": {
     "line number": [
      102,
      104
     ]
    },
    "numpy.polynomial.polynomial.polydiv": {
     "line number": [
      88,
      91,
      93,
      103
     ]
    },
    "numpy.polynomial.polynomial.polymul": {
     "line number": [
      104
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      92,
      94,
      105
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      88
     ]
    },
    "range": {
     "line number": [
      97,
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polymul": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polymul": {
     "line number": [
      83
     ]
    },
    "numpy.polynomial.tests.test_polynomial.trim": {
     "line number": [
      84,
      84
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      84
     ]
    },
    "numpy.zeros": {
     "line number": [
      81
     ]
    },
    "range": {
     "line number": [
      78,
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polymulx": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polymulx": {
     "line number": [
      70,
      71,
      75
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      70,
      71,
      75
     ]
    },
    "range": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polypow": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "functools.reduce": {
     "line number": [
      112
     ]
    },
    "numpy.arange": {
     "line number": [
      111
     ]
    },
    "numpy.array": {
     "line number": [
      112
     ]
    },
    "numpy.polynomial.polynomial.polymul": {
     "line number": [
      112
     ]
    },
    "numpy.polynomial.polynomial.polypow": {
     "line number": [
      113
     ]
    },
    "numpy.polynomial.tests.test_polynomial.trim": {
     "line number": [
      114,
      114
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      114
     ]
    },
    "range": {
     "line number": [
      108,
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polysub": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "max": {
     "line number": [
      63
     ]
    },
    "numpy.polynomial.polynomial.polysub": {
     "line number": [
      66
     ]
    },
    "numpy.polynomial.tests.test_polynomial.trim": {
     "line number": [
      67,
      67
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      67
     ]
    },
    "numpy.zeros": {
     "line number": [
      63
     ]
    },
    "range": {
     "line number": [
      60,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestCompanion": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": {
    "object": {
     "line number": [
      462
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_polynomial.TestCompanion.test_dimensions": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polycompanion": {
     "line number": [
      471
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      471
     ]
    },
    "range": {
     "line number": [
      469
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestCompanion.test_linear_root": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polycompanion": {
     "line number": [
      474
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      474
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestCompanion.test_raises": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      465,
      466
     ]
    },
    "numpy.polynomial.polynomial.polycompanion": {
     "line number": [
      465,
      466
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      465,
      466
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestConstants": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "object": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_polynomial.TestConstants.test_polydomain": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polydomain": {
     "line number": [
      35
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestConstants.test_polyone": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polyone": {
     "line number": [
      41
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestConstants.test_polyx": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polyx": {
     "line number": [
      44
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestConstants.test_polyzero": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polyzero": {
     "line number": [
      38
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestDerivative": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": {
    "object": {
     "line number": [
      374
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_polynomial.TestDerivative.test_polyder": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      378,
      379
     ]
    },
    "numpy.polynomial.polynomial.polyder": {
     "line number": [
      378,
      379,
      384,
      391,
      398
     ]
    },
    "numpy.polynomial.polynomial.polyint": {
     "line number": [
      391,
      398
     ]
    },
    "numpy.polynomial.tests.test_polynomial.trim": {
     "line number": [
      385,
      385,
      392,
      392,
      399,
      399
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      392,
      399
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      385
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      378,
      379
     ]
    },
    "range": {
     "line number": [
      382,
      388,
      389,
      395,
      396
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestDerivative.test_polyder_axis": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polyder": {
     "line number": [
      405,
      406,
      409,
      410
     ]
    },
    "numpy.random.random": {
     "line number": [
      403
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      407,
      411
     ]
    },
    "numpy.vstack": {
     "line number": [
      405,
      409
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestEvaluation": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      119
     ]
    },
    "numpy.einsum": {
     "line number": [
      120,
      121
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      125
     ]
    },
    "numpy.random.random": {
     "line number": [
      124
     ]
    },
    "object": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polygrid2d": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      253
     ]
    },
    "numpy.ones": {
     "line number": [
      258
     ]
    },
    "numpy.polynomial.polynomial.polygrid2d": {
     "line number": [
      254,
      259
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      260
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      255
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polygrid3d": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": {
    "numpy.einsum": {
     "line number": [
      267
     ]
    },
    "numpy.ones": {
     "line number": [
      272
     ]
    },
    "numpy.polynomial.polynomial.polygrid3d": {
     "line number": [
      268,
      273
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      274
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      269
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      132
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      129,
      136,
      139,
      146,
      147,
      148
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      137,
      140
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      129,
      146,
      147,
      148
     ]
    },
    "numpy.zeros": {
     "line number": [
      145
     ]
    },
    "range": {
     "line number": [
      133,
      134,
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval2d": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      219
     ]
    },
    "numpy.ones": {
     "line number": [
      227
     ]
    },
    "numpy.polynomial.polynomial.polyval2d": {
     "line number": [
      219,
      223,
      228
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      229
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      224
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      219
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval3d": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      236
     ]
    },
    "numpy.ones": {
     "line number": [
      244
     ]
    },
    "numpy.polynomial.polynomial.polyval3d": {
     "line number": [
      236,
      240,
      245
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      246
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      241
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      236
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyvalfromroots": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      153
     ]
    },
    "numpy.arange": {
     "line number": [
      197
     ]
    },
    "numpy.empty": {
     "line number": [
      200,
      208
     ]
    },
    "numpy.linspace": {
     "line number": [
      169,
      190
     ]
    },
    "numpy.ones": {
     "line number": [
      166
     ]
    },
    "numpy.polynomial.polynomial.polyroots": {
     "line number": [
      189
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      191
     ]
    },
    "numpy.polynomial.polynomial.polyvalfromroots": {
     "line number": [
      153,
      157,
      158,
      161,
      162,
      165,
      166,
      173,
      176,
      183,
      184,
      185,
      192,
      199,
      202,
      207,
      211
     ]
    },
    "numpy.random.randint": {
     "line number": [
      198
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      158,
      162,
      166
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      174,
      177,
      191
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      157,
      161,
      165,
      183,
      184,
      185,
      203,
      212
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      153
     ]
    },
    "numpy.vstack": {
     "line number": [
      206
     ]
    },
    "numpy.zeros": {
     "line number": [
      182
     ]
    },
    "range": {
     "line number": [
      170,
      171,
      180,
      201,
      209,
      210
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestIntegral": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": {
    "object": {
     "line number": [
      277
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_polynomial.TestIntegral.test_polyint": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      281,
      282,
      283,
      284,
      285,
      286
     ]
    },
    "list": {
     "line number": [
      334,
      344,
      354
     ]
    },
    "numpy.polynomial.polynomial.polyint": {
     "line number": [
      281,
      282,
      283,
      284,
      285,
      286,
      291,
      299,
      306,
      314,
      323,
      324,
      333,
      334,
      343,
      344,
      353,
      354
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      307
     ]
    },
    "numpy.polynomial.tests.test_polynomial.trim": {
     "line number": [
      300,
      300,
      315,
      315,
      325,
      325,
      335,
      335,
      345,
      345,
      355,
      355
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      292,
      300,
      307,
      315,
      325,
      335,
      345,
      355
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      281,
      282,
      283,
      284,
      285,
      286
     ]
    },
    "range": {
     "line number": [
      289,
      295,
      303,
      310,
      318,
      319,
      322,
      328,
      329,
      332,
      334,
      338,
      339,
      342,
      344,
      348,
      349,
      352,
      354
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestIntegral.test_polyint_axis": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polyint": {
     "line number": [
      361,
      362,
      365,
      366,
      369,
      370
     ]
    },
    "numpy.random.random": {
     "line number": [
      359
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      363,
      367,
      371
     ]
    },
    "numpy.vstack": {
     "line number": [
      361,
      365,
      369
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestMisc": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": {
    "object": {
     "line number": [
      477
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      505,
      506,
      507,
      508,
      509,
      510,
      511,
      514
     ]
    },
    "ValueError": {
     "line number": [
      504,
      512,
      513
     ]
    },
    "f": {
     "line number": [
      518
     ]
    },
    "f2": {
     "line number": [
      559
     ]
    },
    "len": {
     "line number": [
      521,
      524,
      528,
      531
     ]
    },
    "numpy.array": {
     "line number": [
      534,
      535,
      536,
      537,
      548,
      549,
      550,
      551
     ]
    },
    "numpy.linspace": {
     "line number": [
      517,
      558
     ]
    },
    "numpy.polynomial.polynomial.polyfit": {
     "line number": [
      504,
      505,
      506,
      507,
      508,
      509,
      510,
      511,
      512,
      513,
      514,
      520,
      523,
      527,
      530,
      534,
      536,
      543,
      545,
      548,
      550,
      555,
      556,
      560,
      562
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      522,
      525,
      529,
      532,
      561,
      563
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      522,
      525,
      529,
      532,
      535,
      537,
      544,
      546,
      549,
      551,
      555,
      556,
      561,
      563,
      564
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      521,
      524,
      528,
      531
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      504,
      505,
      506,
      507,
      508,
      509,
      510,
      511,
      512,
      513,
      514
     ]
    },
    "numpy.zeros_like": {
     "line number": [
      539
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f": {
  "data": {
   "lineno": 497
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f2": {
  "data": {
   "lineno": 500
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfromroots": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": {
    "numpy.cos": {
     "line number": [
      483
     ]
    },
    "numpy.linspace": {
     "line number": [
      483
     ]
    },
    "numpy.pi": {
     "line number": [
      483
     ]
    },
    "numpy.polynomial.polynomial.polyfromroots": {
     "line number": [
      480,
      485
     ]
    },
    "numpy.polynomial.tests.test_polynomial.Tlist": {
     "line number": [
      484
     ]
    },
    "numpy.polynomial.tests.test_polynomial.trim": {
     "line number": [
      481,
      486,
      486
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      481,
      486
     ]
    },
    "range": {
     "line number": [
      482
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyline": {
  "data": {
   "lineno": 577,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polyline": {
     "line number": [
      578
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      578
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyroots": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "numpy.linspace": {
     "line number": [
      492
     ]
    },
    "numpy.polynomial.polynomial.polyfromroots": {
     "line number": [
      493
     ]
    },
    "numpy.polynomial.polynomial.polyroots": {
     "line number": [
      489,
      490,
      493
     ]
    },
    "numpy.polynomial.tests.test_polynomial.trim": {
     "line number": [
      494,
      494
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      489,
      490,
      494
     ]
    },
    "range": {
     "line number": [
      491
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestMisc.test_polytrim": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      570
     ]
    },
    "numpy.polynomial.polynomial.polytrim": {
     "line number": [
      570,
      573,
      574,
      575
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      573,
      574,
      575
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      570
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestVander": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": {
    "numpy.random.random": {
     "line number": [
      416
     ]
    },
    "object": {
     "line number": [
      414
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      420
     ]
    },
    "numpy.array": {
     "line number": [
      428
     ]
    },
    "numpy.polynomial.polynomial.polyval": {
     "line number": [
      425,
      433
     ]
    },
    "numpy.polynomial.polynomial.polyvander": {
     "line number": [
      421,
      429
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      422,
      430
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      425,
      433
     ]
    },
    "range": {
     "line number": [
      423,
      431
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander2d": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      441
     ]
    },
    "numpy.polynomial.polynomial.polyval2d": {
     "line number": [
      440
     ]
    },
    "numpy.polynomial.polynomial.polyvander2d": {
     "line number": [
      439,
      445
     ]
    },
    "numpy.random.random": {
     "line number": [
      438
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      446
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      442
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander3d": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": {
    "numpy.dot": {
     "line number": [
      454
     ]
    },
    "numpy.polynomial.polynomial.polyval3d": {
     "line number": [
      453
     ]
    },
    "numpy.polynomial.polynomial.polyvander3d": {
     "line number": [
      452,
      458
     ]
    },
    "numpy.random.random": {
     "line number": [
      451
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      459
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      455
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polynomial.Tlist": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy.polynomial.tests.test_polynomial.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polynomial.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polynomial.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polynomial.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polynomial.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polynomial.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polynomial.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polynomial.poly": {
  "data": {
   "shadows": "numpy.polynomial.polynomial"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polynomial.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polynomial.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polynomial.trim": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "numpy.polynomial.polynomial.polytrim": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polyutils": {
  "data": {},
  "type": "module"
 },
 "numpy.polynomial.tests.test_polyutils.TestDomain": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "object": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_polyutils.TestDomain.test_getdomain": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "numpy.polynomial.polyutils.getdomain": {
     "line number": [
      52,
      58
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      53,
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polyutils.TestDomain.test_mapdomain": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      93
     ]
    },
    "numpy.array": {
     "line number": [
      80,
      81,
      91
     ]
    },
    "numpy.polynomial.polyutils.mapdomain": {
     "line number": [
      66,
      74,
      82,
      92
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      93
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      67,
      75,
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polyutils.TestDomain.test_mapdomain.MyNDArray": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_polyutils.TestDomain.test_mapparms": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "numpy.polynomial.polyutils.mapparms": {
     "line number": [
      100,
      107
     ]
    },
    "numpy.testing.assert_almost_equal": {
     "line number": [
      101,
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polyutils.TestMisc": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "object": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_polyutils.TestMisc.test_as_series": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      23,
      24,
      25
     ]
    },
    "len": {
     "line number": [
      28
     ]
    },
    "numpy.ones": {
     "line number": [
      30,
      31
     ]
    },
    "numpy.polynomial.polyutils.as_series": {
     "line number": [
      23,
      24,
      25,
      32
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      33,
      34
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      23,
      24,
      25
     ]
    },
    "range": {
     "line number": [
      28,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polyutils.TestMisc.test_trimcoef": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      39
     ]
    },
    "numpy.polynomial.polyutils.trimcoef": {
     "line number": [
      39,
      41,
      42,
      43
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      41,
      42,
      43
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polyutils.TestMisc.test_trimseq": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "numpy.polynomial.polyutils.trimseq": {
     "line number": [
      18
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      19
     ]
    },
    "range": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_polyutils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polyutils.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polyutils.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polyutils.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polyutils.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polyutils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polyutils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polyutils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_polyutils.pu": {
  "data": {
   "shadows": "numpy.polynomial.polyutils"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_printing": {
  "data": {},
  "type": "module"
 },
 "numpy.polynomial.tests.test_printing.TestRepr": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "object": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_printing.TestRepr.test_chebyshev_str": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "numpy.polynomial.Chebyshev": {
     "line number": [
      46
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      48
     ]
    },
    "repr": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.TestRepr.test_hermiteE_repr": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "numpy.polynomial.HermiteE": {
     "line number": [
      61
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      63
     ]
    },
    "repr": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.TestRepr.test_hermite_repr": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "numpy.polynomial.Hermite": {
     "line number": [
      56
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      58
     ]
    },
    "repr": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.TestRepr.test_laguerre_repr": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "numpy.polynomial.Laguerre": {
     "line number": [
      66
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      68
     ]
    },
    "repr": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.TestRepr.test_legendre_repr": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "numpy.polynomial.Legendre": {
     "line number": [
      51
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      53
     ]
    },
    "repr": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.TestRepr.test_polynomial_str": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "numpy.polynomial.Polynomial": {
     "line number": [
      41
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      43
     ]
    },
    "repr": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.TestStr": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "object": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.polynomial.tests.test_printing.TestStr.test_chebyshev_str": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "numpy.polynomial.Chebyshev": {
     "line number": [
      14
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      16
     ]
    },
    "str": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.TestStr.test_hermiteE_str": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "numpy.polynomial.HermiteE": {
     "line number": [
      29
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      31
     ]
    },
    "str": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.TestStr.test_hermite_str": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "numpy.polynomial.Hermite": {
     "line number": [
      24
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      26
     ]
    },
    "str": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.TestStr.test_laguerre_str": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "numpy.polynomial.Laguerre": {
     "line number": [
      34
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      36
     ]
    },
    "str": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.TestStr.test_legendre_str": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "numpy.polynomial.Legendre": {
     "line number": [
      19
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      21
     ]
    },
    "str": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.TestStr.test_polynomial_str": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "numpy.polynomial.Polynomial": {
     "line number": [
      9
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      11
     ]
    },
    "str": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.polynomial.tests.test_printing.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_printing.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_printing.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_printing.poly": {
  "data": {
   "shadows": "numpy.polynomial"
  },
  "type": "import"
 },
 "numpy.polynomial.tests.test_printing.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.random": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      165
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      165,
      166
     ]
    },
    "numpy.random.__all__": {
     "line number": [
      147
     ]
    },
    "numpy.random.warnings": {
     "line number": [
      141,
      142
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.random.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.random.__RandomState_ctor": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "RandomState": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.__all__": {
  "data": {
   "lineno": 91
  },
  "type": "constant"
 },
 "numpy.random.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.random.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.random.info": {
  "data": {},
  "type": "module"
 },
 "numpy.random.info.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.random.info.depends": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "numpy.random.info.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.random.info.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.random.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.random.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      61
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      63
     ]
    },
    "numpy.random.setup.configuration": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.random.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.random.setup.configuration": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      21
     ]
    },
    "numpy.random.setup.needs_mingw_ftime_workaround": {
     "line number": [
      39
     ]
    },
    "numpy.random.setup.sys": {
     "line number": [
      33
     ]
    },
    "os.path.join": {
     "line number": [
      45,
      49,
      50,
      51,
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.setup.configuration.generate_libraries": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.get_mathlibs": {
     "line number": [
      25
     ]
    },
    "numpy.random.setup.sys": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.random.setup.get_mathlibs": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_mathlibs"
  },
  "type": "import"
 },
 "numpy.random.setup.get_msvc_build_version": {
  "data": {
   "shadows": "distutils.msvccompiler.get_build_version"
  },
  "type": "import"
 },
 "numpy.random.setup.join": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "numpy.random.setup.needs_mingw_ftime_workaround": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": {
    "distutils.msvccompiler.get_build_version": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.setup.newer": {
  "data": {
   "shadows": "distutils.dep_util.newer"
  },
  "type": "import"
 },
 "numpy.random.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.random.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.random.setup.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.random.test": {
  "data": {
   "lineno": 165
  },
  "type": "constant"
 },
 "numpy.random.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.random.tests.test_random": {
  "data": {},
  "type": "module"
 },
 "numpy.random.tests.test_random.TestBinomial": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "object": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_random.TestBinomial.test_n_zero": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "numpy.random.binomial": {
     "line number": [
      59,
      60
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      59
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      60
     ]
    },
    "numpy.zeros": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBinomial.test_p_is_nan": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      64
     ]
    },
    "numpy.nan": {
     "line number": [
      64
     ]
    },
    "numpy.random.binomial": {
     "line number": [
      64
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast": {
  "data": {
   "lineno": 963,
   "symbols_in_volume": {
    "object": {
     "line number": [
      963
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_random.TestBroadcast.setSeed": {
  "data": {
   "lineno": 969,
   "symbols_in_volume": {
    "numpy.random.seed": {
     "line number": [
      970
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.setup": {
  "data": {
   "lineno": 966
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_beta": {
  "data": {
   "lineno": 1010,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1023,
      1024,
      1029,
      1030
     ]
    },
    "beta": {
     "line number": [
      1021,
      1023,
      1024,
      1027,
      1029,
      1030
     ]
    },
    "numpy.array": {
     "line number": [
      1016
     ]
    },
    "numpy.random.beta": {
     "line number": [
      1015
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1022,
      1028
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1023,
      1024,
      1029,
      1030
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_binomial": {
  "data": {
   "lineno": 1391,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1403,
      1404,
      1405,
      1410,
      1411,
      1412
     ]
    },
    "binom": {
     "line number": [
      1401,
      1403,
      1404,
      1405,
      1408,
      1410,
      1411,
      1412
     ]
    },
    "numpy.array": {
     "line number": [
      1398
     ]
    },
    "numpy.random.binomial": {
     "line number": [
      1397
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1402,
      1409
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1403,
      1404,
      1405,
      1410,
      1411,
      1412
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_chisquare": {
  "data": {
   "lineno": 1141,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1152
     ]
    },
    "chisquare": {
     "line number": [
      1150,
      1152
     ]
    },
    "numpy.array": {
     "line number": [
      1145
     ]
    },
    "numpy.random.chisquare": {
     "line number": [
      1144
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1151
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1152
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_exponential": {
  "data": {
   "lineno": 1032,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1043
     ]
    },
    "exponential": {
     "line number": [
      1041,
      1043
     ]
    },
    "numpy.array": {
     "line number": [
      1036
     ]
    },
    "numpy.random.exponential": {
     "line number": [
      1035
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1042
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1043
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_f": {
  "data": {
   "lineno": 1080,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1093,
      1094,
      1099,
      1100
     ]
    },
    "f": {
     "line number": [
      1091,
      1093,
      1094,
      1097,
      1099,
      1100
     ]
    },
    "numpy.array": {
     "line number": [
      1086
     ]
    },
    "numpy.random.f": {
     "line number": [
      1085
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1092,
      1098
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1093,
      1094,
      1099,
      1100
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_gamma": {
  "data": {
   "lineno": 1058,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1071,
      1072,
      1077,
      1078
     ]
    },
    "gamma": {
     "line number": [
      1069,
      1071,
      1072,
      1075,
      1077,
      1078
     ]
    },
    "numpy.array": {
     "line number": [
      1064
     ]
    },
    "numpy.random.gamma": {
     "line number": [
      1063
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1070,
      1076
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1071,
      1072,
      1077,
      1078
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_geometric": {
  "data": {
   "lineno": 1466,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1476,
      1477
     ]
    },
    "geom": {
     "line number": [
      1474,
      1476,
      1477
     ]
    },
    "numpy.array": {
     "line number": [
      1471
     ]
    },
    "numpy.random.geometric": {
     "line number": [
      1470
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1475
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1476,
      1477
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_gumbel": {
  "data": {
   "lineno": 1266,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1278,
      1283
     ]
    },
    "gumbel": {
     "line number": [
      1276,
      1278,
      1281,
      1283
     ]
    },
    "numpy.array": {
     "line number": [
      1271
     ]
    },
    "numpy.random.gumbel": {
     "line number": [
      1270
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1277,
      1282
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1278,
      1283
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_hypergeometric": {
  "data": {
   "lineno": 1479,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1493,
      1494,
      1495,
      1496,
      1501,
      1502,
      1503,
      1504,
      1509,
      1510,
      1511,
      1512
     ]
    },
    "hypergeom": {
     "line number": [
      1491,
      1493,
      1494,
      1495,
      1496,
      1499,
      1501,
      1502,
      1503,
      1504,
      1507,
      1509,
      1510,
      1511,
      1512
     ]
    },
    "numpy.array": {
     "line number": [
      1488
     ]
    },
    "numpy.random.hypergeometric": {
     "line number": [
      1487
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1492,
      1500,
      1508
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1493,
      1494,
      1495,
      1496,
      1501,
      1502,
      1503,
      1504,
      1509,
      1510,
      1511,
      1512
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_laplace": {
  "data": {
   "lineno": 1247,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1259,
      1264
     ]
    },
    "laplace": {
     "line number": [
      1257,
      1259,
      1262,
      1264
     ]
    },
    "numpy.array": {
     "line number": [
      1252
     ]
    },
    "numpy.random.laplace": {
     "line number": [
      1251
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1258,
      1263
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1259,
      1264
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_logistic": {
  "data": {
   "lineno": 1285,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1297,
      1302
     ]
    },
    "logistic": {
     "line number": [
      1295,
      1297,
      1300,
      1302
     ]
    },
    "numpy.array": {
     "line number": [
      1290
     ]
    },
    "numpy.random.logistic": {
     "line number": [
      1289
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1296,
      1301
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1297,
      1302
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_lognormal": {
  "data": {
   "lineno": 1304,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1316,
      1321
     ]
    },
    "lognormal": {
     "line number": [
      1314,
      1316,
      1319,
      1321
     ]
    },
    "numpy.array": {
     "line number": [
      1309
     ]
    },
    "numpy.random.lognormal": {
     "line number": [
      1308
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1315,
      1320
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1316,
      1321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_logseries": {
  "data": {
   "lineno": 1514,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1524,
      1525
     ]
    },
    "logseries": {
     "line number": [
      1522,
      1524,
      1525
     ]
    },
    "numpy.array": {
     "line number": [
      1519
     ]
    },
    "numpy.random.logseries": {
     "line number": [
      1518
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1523
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1524,
      1525
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_negative_binomial": {
  "data": {
   "lineno": 1414,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1426,
      1427,
      1428,
      1433,
      1434,
      1435
     ]
    },
    "neg_binom": {
     "line number": [
      1424,
      1426,
      1427,
      1428,
      1431,
      1433,
      1434,
      1435
     ]
    },
    "numpy.array": {
     "line number": [
      1421
     ]
    },
    "numpy.random.negative_binomial": {
     "line number": [
      1420
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1425,
      1432
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1426,
      1427,
      1428,
      1433,
      1434,
      1435
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_noncentral_chisquare": {
  "data": {
   "lineno": 1154,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1167,
      1168,
      1173,
      1174
     ]
    },
    "nonc_chi": {
     "line number": [
      1165,
      1167,
      1168,
      1171,
      1173,
      1174
     ]
    },
    "numpy.array": {
     "line number": [
      1160
     ]
    },
    "numpy.random.noncentral_chisquare": {
     "line number": [
      1159
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1166,
      1172
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1167,
      1168,
      1173,
      1174
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_noncentral_f": {
  "data": {
   "lineno": 1102,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1117,
      1118,
      1119,
      1124,
      1125,
      1126,
      1131,
      1132,
      1133
     ]
    },
    "nonc_f": {
     "line number": [
      1115,
      1117,
      1118,
      1119,
      1122,
      1124,
      1125,
      1126,
      1129,
      1131,
      1132,
      1133
     ]
    },
    "numpy.array": {
     "line number": [
      1110
     ]
    },
    "numpy.random.noncentral_f": {
     "line number": [
      1109
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1116,
      1123,
      1130
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1117,
      1118,
      1119,
      1124,
      1125,
      1126,
      1131,
      1132,
      1133
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_noncentral_f_small_df": {
  "data": {
   "lineno": 1135,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1137
     ]
    },
    "numpy.random.noncentral_f": {
     "line number": [
      1138
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1139
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_normal": {
  "data": {
   "lineno": 991,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1003,
      1008
     ]
    },
    "normal": {
     "line number": [
      1001,
      1003,
      1006,
      1008
     ]
    },
    "numpy.array": {
     "line number": [
      996
     ]
    },
    "numpy.random.normal": {
     "line number": [
      995
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1002,
      1007
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1003,
      1008
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_pareto": {
  "data": {
   "lineno": 1208,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1219
     ]
    },
    "numpy.array": {
     "line number": [
      1212
     ]
    },
    "numpy.random.pareto": {
     "line number": [
      1211
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1218
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1219
     ]
    },
    "pareto": {
     "line number": [
      1217,
      1219
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_poisson": {
  "data": {
   "lineno": 1437,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1449,
      1450
     ]
    },
    "numpy.array": {
     "line number": [
      1444
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      1438
     ]
    },
    "numpy.random.poisson": {
     "line number": [
      1443
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1448
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1449,
      1450
     ]
    },
    "poisson": {
     "line number": [
      1447,
      1449,
      1450
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_power": {
  "data": {
   "lineno": 1234,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1245
     ]
    },
    "numpy.array": {
     "line number": [
      1238
     ]
    },
    "numpy.random.power": {
     "line number": [
      1237
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1244
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1245
     ]
    },
    "power": {
     "line number": [
      1243,
      1245
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_rayleigh": {
  "data": {
   "lineno": 1323,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1334
     ]
    },
    "numpy.array": {
     "line number": [
      1327
     ]
    },
    "numpy.random.rayleigh": {
     "line number": [
      1326
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1333
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1334
     ]
    },
    "rayleigh": {
     "line number": [
      1332,
      1334
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_standard_gamma": {
  "data": {
   "lineno": 1045,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1056
     ]
    },
    "numpy.array": {
     "line number": [
      1049
     ]
    },
    "numpy.random.standard_gamma": {
     "line number": [
      1048
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1055
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1056
     ]
    },
    "std_gamma": {
     "line number": [
      1054,
      1056
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_standard_t": {
  "data": {
   "lineno": 1176,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1187
     ]
    },
    "numpy.array": {
     "line number": [
      1180
     ]
    },
    "numpy.random.standard_t": {
     "line number": [
      1179
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1186
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1187
     ]
    },
    "t": {
     "line number": [
      1185,
      1187
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_triangular": {
  "data": {
   "lineno": 1358,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1373,
      1374,
      1375,
      1380,
      1381,
      1382,
      1387,
      1388,
      1389
     ]
    },
    "numpy.array": {
     "line number": [
      1366
     ]
    },
    "numpy.random.triangular": {
     "line number": [
      1365
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1372,
      1379,
      1386
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1373,
      1374,
      1375,
      1380,
      1381,
      1382,
      1387,
      1388,
      1389
     ]
    },
    "triangular": {
     "line number": [
      1371,
      1373,
      1374,
      1375,
      1378,
      1380,
      1381,
      1382,
      1385,
      1387,
      1388,
      1389
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_uniform": {
  "data": {
   "lineno": 975,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      979
     ]
    },
    "numpy.random.uniform": {
     "line number": [
      978
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      985,
      989
     ]
    },
    "uniform": {
     "line number": [
      984,
      988
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_vonmises": {
  "data": {
   "lineno": 1189,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1201,
      1206
     ]
    },
    "numpy.array": {
     "line number": [
      1194
     ]
    },
    "numpy.random.vonmises": {
     "line number": [
      1193
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1200,
      1205
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1201,
      1206
     ]
    },
    "vonmises": {
     "line number": [
      1199,
      1201,
      1204,
      1206
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_wald": {
  "data": {
   "lineno": 1336,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1349,
      1350,
      1355,
      1356
     ]
    },
    "numpy.array": {
     "line number": [
      1342
     ]
    },
    "numpy.random.wald": {
     "line number": [
      1341
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1348,
      1354
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1349,
      1350,
      1355,
      1356
     ]
    },
    "wald": {
     "line number": [
      1347,
      1349,
      1350,
      1353,
      1355,
      1356
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_weibull": {
  "data": {
   "lineno": 1221,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1232
     ]
    },
    "numpy.array": {
     "line number": [
      1225
     ]
    },
    "numpy.random.weibull": {
     "line number": [
      1224
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1231
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1232
     ]
    },
    "weibull": {
     "line number": [
      1230,
      1232
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestBroadcast.test_zipf": {
  "data": {
   "lineno": 1452,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1461,
      1463,
      1464
     ]
    },
    "numpy.array": {
     "line number": [
      1456
     ]
    },
    "numpy.errstate": {
     "line number": [
      1462
     ]
    },
    "numpy.nan": {
     "line number": [
      1463,
      1464
     ]
    },
    "numpy.random.zipf": {
     "line number": [
      1455
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1460
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1461,
      1463,
      1464
     ]
    },
    "zipf": {
     "line number": [
      1459,
      1461,
      1463,
      1464
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestMultinomial": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "object": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_random.TestMultinomial.test_basic": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "numpy.random.multinomial": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestMultinomial.test_int_negative_interval": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      77,
      78
     ]
    },
    "numpy.random.randint": {
     "line number": [
      75,
      76
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      75,
      77,
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestMultinomial.test_size": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      91
     ]
    },
    "float": {
     "line number": [
      92
     ]
    },
    "numpy.array": {
     "line number": [
      88
     ]
    },
    "numpy.random.multinomial": {
     "line number": [
      83,
      84,
      85,
      86,
      87,
      88,
      91
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      83,
      84,
      85,
      86,
      87,
      88
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      91
     ]
    },
    "numpy.uint32": {
     "line number": [
      83,
      84,
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestMultinomial.test_zero_probability": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "numpy.random.multinomial": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandint": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      148
     ]
    },
    "numpy.int16": {
     "line number": [
      148
     ]
    },
    "numpy.int32": {
     "line number": [
      149
     ]
    },
    "numpy.int64": {
     "line number": [
      149
     ]
    },
    "numpy.int8": {
     "line number": [
      148
     ]
    },
    "numpy.random.randint": {
     "line number": [
      145
     ]
    },
    "numpy.uint16": {
     "line number": [
      148
     ]
    },
    "numpy.uint32": {
     "line number": [
      149
     ]
    },
    "numpy.uint64": {
     "line number": [
      149
     ]
    },
    "numpy.uint8": {
     "line number": [
      148
     ]
    },
    "object": {
     "line number": [
      143
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_random.TestRandint.test_bounds_checking": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      158,
      159,
      160,
      161
     ]
    },
    "numpy.bool_": {
     "line number": [
      156,
      157
     ]
    },
    "numpy.iinfo": {
     "line number": [
      156,
      157
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      158,
      159,
      160,
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandint.test_full_range": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      187
     ]
    },
    "Exception": {
     "line number": [
      186
     ]
    },
    "numpy.bool_": {
     "line number": [
      181,
      182
     ]
    },
    "numpy.iinfo": {
     "line number": [
      181,
      182
     ]
    },
    "str": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandint.test_in_bounds_fuzz": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      201
     ]
    },
    "numpy.random.seed": {
     "line number": [
      193
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      198,
      199,
      203,
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandint.test_int64_uint64_corner_case": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "numpy.iinfo": {
     "line number": [
      253,
      254,
      255
     ]
    },
    "numpy.int64": {
     "line number": [
      252,
      253,
      254,
      254,
      255
     ]
    },
    "numpy.random.randint": {
     "line number": [
      259
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      260
     ]
    },
    "numpy.uint64": {
     "line number": [
      255
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandint.test_repeatability": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      235,
      237
     ]
    },
    "numpy.dtype": {
     "line number": [
      231,
      237
     ]
    },
    "numpy.int8": {
     "line number": [
      230,
      235
     ]
    },
    "numpy.random.seed": {
     "line number": [
      222,
      234
     ]
    },
    "numpy.random.tests.test_random.hashlib": {
     "line number": [
      230,
      236
     ]
    },
    "numpy.random.tests.test_random.sys": {
     "line number": [
      225
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      231,
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandint.test_respect_dtype_singleton": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      271,
      272,
      273
     ]
    },
    "hasattr": {
     "line number": [
      277
     ]
    },
    "int": {
     "line number": [
      271
     ]
    },
    "numpy.bool_": {
     "line number": [
      265,
      266
     ]
    },
    "numpy.dtype": {
     "line number": [
      269
     ]
    },
    "numpy.iinfo": {
     "line number": [
      265,
      266,
      272,
      273
     ]
    },
    "numpy.long": {
     "line number": [
      271
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      277
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      269,
      278
     ]
    },
    "type": {
     "line number": [
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandint.test_rng_zero_and_extremes": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "numpy.bool_": {
     "line number": [
      165,
      166
     ]
    },
    "numpy.iinfo": {
     "line number": [
      165,
      166
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      169,
      172,
      175
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandint.test_unsupported_type": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      152
     ]
    },
    "float": {
     "line number": [
      152
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": {
    "object": {
     "line number": [
      281
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_random.TestRandomDist.setup": {
  "data": {
   "lineno": 285
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_beta": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      506
     ]
    },
    "numpy.random.beta": {
     "line number": [
      505
     ]
    },
    "numpy.random.seed": {
     "line number": [
      504
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      510
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_binomial": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      515
     ]
    },
    "numpy.random.binomial": {
     "line number": [
      514
     ]
    },
    "numpy.random.seed": {
     "line number": [
      513
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      518
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_bytes": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": {
    "numpy.random.bytes": {
     "line number": [
      458
     ]
    },
    "numpy.random.seed": {
     "line number": [
      457
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      460
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_chisquare": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      523
     ]
    },
    "numpy.random.chisquare": {
     "line number": [
      522
     ]
    },
    "numpy.random.seed": {
     "line number": [
      521
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      526
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_choice_exceptions": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      393,
      394,
      395,
      396,
      397,
      399,
      400,
      401,
      402,
      403
     ]
    },
    "numpy.random.choice": {
     "line number": [
      392
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      393,
      394,
      395,
      396,
      397,
      399,
      400,
      401,
      402,
      403
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_choice_nan_probabilities": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      454
     ]
    },
    "numpy.array": {
     "line number": [
      452
     ]
    },
    "numpy.random.choice": {
     "line number": [
      454
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      454
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_choice_noninteger": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      388
     ]
    },
    "numpy.random.choice": {
     "line number": [
      387
     ]
    },
    "numpy.random.seed": {
     "line number": [
      386
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      389
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_choice_nonuniform_noreplace": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      382
     ]
    },
    "numpy.random.choice": {
     "line number": [
      380
     ]
    },
    "numpy.random.seed": {
     "line number": [
      379
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      383
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_choice_nonuniform_replace": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      369
     ]
    },
    "numpy.random.choice": {
     "line number": [
      368
     ]
    },
    "numpy.random.seed": {
     "line number": [
      367
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      370
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_choice_return_shape": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      449
     ]
    },
    "numpy.arange": {
     "line number": [
      440
     ]
    },
    "numpy.array": {
     "line number": [
      415,
      428
     ]
    },
    "numpy.empty": {
     "line number": [
      416,
      429
     ]
    },
    "numpy.isscalar": {
     "line number": [
      409,
      410,
      411,
      412,
      413,
      422,
      423,
      424,
      425,
      426
     ]
    },
    "numpy.random.choice": {
     "line number": [
      409,
      410,
      411,
      412,
      413,
      414,
      418,
      422,
      423,
      424,
      425,
      426,
      427,
      431,
      436,
      437,
      438,
      439,
      440,
      446,
      447,
      448,
      449
     ]
    },
    "numpy.random.randint": {
     "line number": [
      443,
      444,
      445
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      409,
      410,
      411,
      412,
      413,
      414,
      418,
      422,
      423,
      424,
      425,
      426,
      427,
      431
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      436,
      437,
      438,
      439,
      440,
      443,
      444,
      445,
      446,
      447,
      448
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      449
     ]
    },
    "object": {
     "line number": [
      416,
      429
     ]
    },
    "tuple": {
     "line number": [
      421
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_choice_uniform_noreplace": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      375
     ]
    },
    "numpy.random.choice": {
     "line number": [
      374
     ]
    },
    "numpy.random.seed": {
     "line number": [
      373
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      376
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_choice_uniform_replace": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      363
     ]
    },
    "numpy.random.choice": {
     "line number": [
      362
     ]
    },
    "numpy.random.seed": {
     "line number": [
      361
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      364
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_dirichlet": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      530,
      532
     ]
    },
    "numpy.random.mtrand.dirichlet": {
     "line number": [
      531
     ]
    },
    "numpy.random.seed": {
     "line number": [
      529
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      538
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_dirichlet_bad_alpha": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      555
     ]
    },
    "numpy.array": {
     "line number": [
      554
     ]
    },
    "numpy.random.mtrand.dirichlet": {
     "line number": [
      555
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      555
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_dirichlet_size": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      550
     ]
    },
    "float": {
     "line number": [
      550
     ]
    },
    "numpy.array": {
     "line number": [
      542,
      548
     ]
    },
    "numpy.random.dirichlet": {
     "line number": [
      543,
      544,
      545,
      546,
      547,
      548,
      550
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      543,
      544,
      545,
      546,
      547,
      548
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      550
     ]
    },
    "numpy.uint32": {
     "line number": [
      543,
      544,
      545
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_exponential": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      560
     ]
    },
    "numpy.random.exponential": {
     "line number": [
      559
     ]
    },
    "numpy.random.seed": {
     "line number": [
      558
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      563
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_exponential_0": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      567
     ]
    },
    "numpy.random.exponential": {
     "line number": [
      566,
      567
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      566
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      567
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_f": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      572
     ]
    },
    "numpy.random.f": {
     "line number": [
      571
     ]
    },
    "numpy.random.seed": {
     "line number": [
      570
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      575
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_gamma": {
  "data": {
   "lineno": 577,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      580
     ]
    },
    "numpy.random.gamma": {
     "line number": [
      579
     ]
    },
    "numpy.random.seed": {
     "line number": [
      578
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      583
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_gamma_0": {
  "data": {
   "lineno": 585,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      587
     ]
    },
    "numpy.random.gamma": {
     "line number": [
      586,
      587
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      586
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      587
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_geometric": {
  "data": {
   "lineno": 589,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      592
     ]
    },
    "numpy.random.geometric": {
     "line number": [
      591
     ]
    },
    "numpy.random.seed": {
     "line number": [
      590
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      595
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_gumbel": {
  "data": {
   "lineno": 597,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      600
     ]
    },
    "numpy.random.gumbel": {
     "line number": [
      599
     ]
    },
    "numpy.random.seed": {
     "line number": [
      598
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      603
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_gumbel_0": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      607
     ]
    },
    "numpy.random.gumbel": {
     "line number": [
      606,
      607
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      606
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      607
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_hypergeometric": {
  "data": {
   "lineno": 609,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      612,
      619,
      623,
      628,
      632
     ]
    },
    "numpy.random.hypergeometric": {
     "line number": [
      611,
      618,
      622,
      627,
      631
     ]
    },
    "numpy.random.seed": {
     "line number": [
      610
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      615,
      620,
      624,
      629,
      633
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_laplace": {
  "data": {
   "lineno": 635,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      638
     ]
    },
    "numpy.random.laplace": {
     "line number": [
      637
     ]
    },
    "numpy.random.seed": {
     "line number": [
      636
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      641
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_laplace_0": {
  "data": {
   "lineno": 643,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      645
     ]
    },
    "numpy.random.laplace": {
     "line number": [
      644,
      645
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      644
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      645
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_logistic": {
  "data": {
   "lineno": 647,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      650
     ]
    },
    "numpy.random.logistic": {
     "line number": [
      649
     ]
    },
    "numpy.random.seed": {
     "line number": [
      648
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      653
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_lognormal": {
  "data": {
   "lineno": 655,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      658
     ]
    },
    "numpy.random.lognormal": {
     "line number": [
      657
     ]
    },
    "numpy.random.seed": {
     "line number": [
      656
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      661
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_lognormal_0": {
  "data": {
   "lineno": 663,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      665
     ]
    },
    "numpy.random.lognormal": {
     "line number": [
      664,
      665
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      664
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      665
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_logseries": {
  "data": {
   "lineno": 667,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      670
     ]
    },
    "numpy.random.logseries": {
     "line number": [
      669
     ]
    },
    "numpy.random.seed": {
     "line number": [
      668
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      673
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_multinomial": {
  "data": {
   "lineno": 675,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      678
     ]
    },
    "numpy.random.multinomial": {
     "line number": [
      677
     ]
    },
    "numpy.random.seed": {
     "line number": [
      676
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      684
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_multivariate_normal": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      710
     ]
    },
    "ValueError": {
     "line number": [
      717
     ]
    },
    "numpy.array": {
     "line number": [
      692,
      703
     ]
    },
    "numpy.random.multivariate_normal": {
     "line number": [
      691,
      702,
      710,
      713,
      717
     ]
    },
    "numpy.random.seed": {
     "line number": [
      687
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      699,
      704
     ]
    },
    "numpy.testing.assert_no_warnings": {
     "line number": [
      713
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      717
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      710
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_negative_binomial": {
  "data": {
   "lineno": 720,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      723
     ]
    },
    "numpy.random.negative_binomial": {
     "line number": [
      722
     ]
    },
    "numpy.random.seed": {
     "line number": [
      721
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      726
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_noncentral_chisquare": {
  "data": {
   "lineno": 728,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      731,
      737,
      744
     ]
    },
    "numpy.random.noncentral_chisquare": {
     "line number": [
      730,
      736,
      743
     ]
    },
    "numpy.random.seed": {
     "line number": [
      729,
      742
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      734,
      740,
      747
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_noncentral_f": {
  "data": {
   "lineno": 749,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      753
     ]
    },
    "numpy.random.noncentral_f": {
     "line number": [
      751
     ]
    },
    "numpy.random.seed": {
     "line number": [
      750
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      756
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_normal": {
  "data": {
   "lineno": 758,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      761
     ]
    },
    "numpy.random.normal": {
     "line number": [
      760
     ]
    },
    "numpy.random.seed": {
     "line number": [
      759
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      764
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_normal_0": {
  "data": {
   "lineno": 766,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      768
     ]
    },
    "numpy.random.normal": {
     "line number": [
      767,
      768
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      767
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      768
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_pareto": {
  "data": {
   "lineno": 770,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      773
     ]
    },
    "numpy.random.pareto": {
     "line number": [
      772
     ]
    },
    "numpy.random.seed": {
     "line number": [
      771
     ]
    },
    "numpy.testing.assert_array_almost_equal_nulp": {
     "line number": [
      783
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_poisson": {
  "data": {
   "lineno": 785,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      788
     ]
    },
    "numpy.random.poisson": {
     "line number": [
      787
     ]
    },
    "numpy.random.seed": {
     "line number": [
      786
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      791
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_poisson_exceptions": {
  "data": {
   "lineno": 793,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      796,
      797,
      798,
      799
     ]
    },
    "numpy.iinfo": {
     "line number": [
      794
     ]
    },
    "numpy.random.poisson": {
     "line number": [
      796,
      797,
      798,
      799
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      796,
      797,
      798,
      799
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_power": {
  "data": {
   "lineno": 801,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      804
     ]
    },
    "numpy.random.power": {
     "line number": [
      803
     ]
    },
    "numpy.random.seed": {
     "line number": [
      802
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      807
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_rand": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      291
     ]
    },
    "numpy.random.rand": {
     "line number": [
      290
     ]
    },
    "numpy.random.seed": {
     "line number": [
      289
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      294
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_randint": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      307
     ]
    },
    "numpy.random.randint": {
     "line number": [
      306
     ]
    },
    "numpy.random.seed": {
     "line number": [
      305
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      310
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_randn": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      299
     ]
    },
    "numpy.random.randn": {
     "line number": [
      298
     ]
    },
    "numpy.random.seed": {
     "line number": [
      297
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_random_integers": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      315
     ]
    },
    "len": {
     "line number": [
      317
     ]
    },
    "numpy.array": {
     "line number": [
      318
     ]
    },
    "numpy.random.random_integers": {
     "line number": [
      316
     ]
    },
    "numpy.random.seed": {
     "line number": [
      313
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      317
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      321
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      314
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_random_integers_deprecated": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      340,
      343,
      348
     ]
    },
    "numpy.iinfo": {
     "line number": [
      345,
      350,
      350
     ]
    },
    "numpy.random.random_integers": {
     "line number": [
      344,
      349
     ]
    },
    "numpy.random.tests.test_random.warnings": {
     "line number": [
      339,
      340
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      343,
      348
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_random_integers_max_int": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      330
     ]
    },
    "len": {
     "line number": [
      333
     ]
    },
    "numpy.iinfo": {
     "line number": [
      331,
      332,
      335
     ]
    },
    "numpy.random.random_integers": {
     "line number": [
      331
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      333
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      336
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_random_sample": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      355
     ]
    },
    "numpy.random.random_sample": {
     "line number": [
      354
     ]
    },
    "numpy.random.seed": {
     "line number": [
      353
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      358
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_rayleigh": {
  "data": {
   "lineno": 809,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      812
     ]
    },
    "numpy.random.rayleigh": {
     "line number": [
      811
     ]
    },
    "numpy.random.seed": {
     "line number": [
      810
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      815
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_rayleigh_0": {
  "data": {
   "lineno": 817,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      819
     ]
    },
    "numpy.random.rayleigh": {
     "line number": [
      818,
      819
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      818
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      819
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation": {
  "data": {
   "lineno": 898,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      910,
      917
     ]
    },
    "numpy.array": {
     "line number": [
      909,
      916
     ]
    },
    "numpy.random.hypergeometric": {
     "line number": [
      917
     ]
    },
    "numpy.random.uniform": {
     "line number": [
      910
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      910,
      917
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation.ThrowingFloat": {
  "data": {
   "lineno": 905,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      905
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation.ThrowingFloat.__float__": {
  "data": {
   "lineno": 906,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      907
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation.ThrowingInteger": {
  "data": {
   "lineno": 912,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      912
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation.ThrowingInteger.__int__": {
  "data": {
   "lineno": 913,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      914
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_shuffle": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": {
    "conv": {
     "line number": [
      483,
      486
     ]
    },
    "int": {
     "line number": [
      476,
      476
     ]
    },
    "numpy.array": {
     "line number": [
      465
     ]
    },
    "numpy.asarray": {
     "line number": [
      467,
      468,
      469,
      470,
      472,
      475,
      479
     ]
    },
    "numpy.complex64": {
     "line number": [
      469
     ]
    },
    "numpy.float32": {
     "line number": [
      468
     ]
    },
    "numpy.int32": {
     "line number": [
      481
     ]
    },
    "numpy.int8": {
     "line number": [
      467
     ]
    },
    "numpy.random.seed": {
     "line number": [
      482
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      484
     ]
    },
    "numpy.recarray": {
     "line number": [
      477
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      487
     ]
    },
    "numpy.vstack": {
     "line number": [
      473
     ]
    },
    "object": {
     "line number": [
      470,
      480
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_shuffle_masked": {
  "data": {
   "lineno": 489,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      492
     ]
    },
    "numpy.ma.masked_values": {
     "line number": [
      491,
      492
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      496,
      499
     ]
    },
    "numpy.reshape": {
     "line number": [
      491
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      497,
      500
     ]
    },
    "range": {
     "line number": [
      491,
      495
     ]
    },
    "sorted": {
     "line number": [
      498,
      498,
      501,
      501
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_standard_cauchy": {
  "data": {
   "lineno": 821,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      824
     ]
    },
    "numpy.random.seed": {
     "line number": [
      822
     ]
    },
    "numpy.random.standard_cauchy": {
     "line number": [
      823
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      827
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_standard_exponential": {
  "data": {
   "lineno": 829,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      832
     ]
    },
    "numpy.random.seed": {
     "line number": [
      830
     ]
    },
    "numpy.random.standard_exponential": {
     "line number": [
      831
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      835
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_standard_gamma": {
  "data": {
   "lineno": 837,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      840
     ]
    },
    "numpy.random.seed": {
     "line number": [
      838
     ]
    },
    "numpy.random.standard_gamma": {
     "line number": [
      839
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      843
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_standard_gamma_0": {
  "data": {
   "lineno": 845,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      847
     ]
    },
    "numpy.random.standard_gamma": {
     "line number": [
      846,
      847
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      846
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      847
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_standard_normal": {
  "data": {
   "lineno": 849,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      852
     ]
    },
    "numpy.random.seed": {
     "line number": [
      850
     ]
    },
    "numpy.random.standard_normal": {
     "line number": [
      851
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      855
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_standard_t": {
  "data": {
   "lineno": 857,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      860
     ]
    },
    "numpy.random.seed": {
     "line number": [
      858
     ]
    },
    "numpy.random.standard_t": {
     "line number": [
      859
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      863
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_triangular": {
  "data": {
   "lineno": 865,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      869
     ]
    },
    "numpy.random.seed": {
     "line number": [
      866
     ]
    },
    "numpy.random.triangular": {
     "line number": [
      867
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      872
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_uniform": {
  "data": {
   "lineno": 874,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      877
     ]
    },
    "numpy.random.seed": {
     "line number": [
      875
     ]
    },
    "numpy.random.uniform": {
     "line number": [
      876
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      880
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_uniform_range_bounds": {
  "data": {
   "lineno": 882,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      887,
      888,
      889,
      890,
      891
     ]
    },
    "numpy.finfo": {
     "line number": [
      883,
      884
     ]
    },
    "numpy.inf": {
     "line number": [
      887,
      888,
      890,
      891
     ]
    },
    "numpy.nextafter": {
     "line number": [
      896
     ]
    },
    "numpy.random.uniform": {
     "line number": [
      886,
      896
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      887,
      888,
      889,
      890,
      891
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_vonmises": {
  "data": {
   "lineno": 919,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      922
     ]
    },
    "numpy.random.seed": {
     "line number": [
      920
     ]
    },
    "numpy.random.vonmises": {
     "line number": [
      921
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      925
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_vonmises_small": {
  "data": {
   "lineno": 927,
   "symbols_in_volume": {
    "numpy.isfinite": {
     "line number": [
      931
     ]
    },
    "numpy.random.seed": {
     "line number": [
      929
     ]
    },
    "numpy.random.vonmises": {
     "line number": [
      930
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      931
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_wald": {
  "data": {
   "lineno": 933,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      936
     ]
    },
    "numpy.random.seed": {
     "line number": [
      934
     ]
    },
    "numpy.random.wald": {
     "line number": [
      935
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      939
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_weibull": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      944
     ]
    },
    "numpy.random.seed": {
     "line number": [
      942
     ]
    },
    "numpy.random.weibull": {
     "line number": [
      943
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      947
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_weibull_0": {
  "data": {
   "lineno": 949,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      952
     ]
    },
    "numpy.random.seed": {
     "line number": [
      950
     ]
    },
    "numpy.random.weibull": {
     "line number": [
      951,
      952
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      951
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      952
     ]
    },
    "numpy.zeros": {
     "line number": [
      951
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestRandomDist.test_zipf": {
  "data": {
   "lineno": 954,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      957
     ]
    },
    "numpy.random.seed": {
     "line number": [
      955
     ]
    },
    "numpy.random.zipf": {
     "line number": [
      956
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      960
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSeed": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "object": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_random.TestSeed.test_array": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      24
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      22,
      24,
      26,
      28
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      23,
      25,
      27,
      29
     ]
    },
    "range": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSeed.test_invalid_array": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      38
     ]
    },
    "ValueError": {
     "line number": [
      39,
      40,
      41,
      42
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      38,
      39,
      40,
      41,
      42
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      38,
      39,
      40,
      41,
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSeed.test_invalid_array_shape": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      46,
      47,
      48
     ]
    },
    "numpy.array": {
     "line number": [
      46
     ]
    },
    "numpy.int64": {
     "line number": [
      46
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      46,
      47,
      48
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      46,
      47,
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSeed.test_invalid_scalar": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      33
     ]
    },
    "ValueError": {
     "line number": [
      34
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      33,
      34
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      33,
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSeed.test_scalar": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "numpy.random.RandomState": {
     "line number": [
      16,
      18
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      17,
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSetState": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "object": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_random.TestSetState.setup": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "numpy.random.RandomState": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSetState.test_backwards_compatibility": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      134,
      135
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      134,
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSetState.test_basic": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      105
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSetState.test_gaussian_reset": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      112
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSetState.test_gaussian_reset_in_media_res": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      123
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSetState.test_negative_binomial": {
  "data": {
   "lineno": 137
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSingleEltArrayInput": {
  "data": {
   "lineno": 1570,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1570
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_random.TestSingleEltArrayInput.setup": {
  "data": {
   "lineno": 1571,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1572,
      1573,
      1574
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSingleEltArrayInput.test_one_arg_funcs": {
  "data": {
   "lineno": 1577,
   "symbols_in_volume": {
    "func": {
     "line number": [
      1589,
      1592
     ]
    },
    "numpy.array": {
     "line number": [
      1589
     ]
    },
    "numpy.random.chisquare": {
     "line number": [
      1579
     ]
    },
    "numpy.random.exponential": {
     "line number": [
      1578
     ]
    },
    "numpy.random.geometric": {
     "line number": [
      1583,
      1585
     ]
    },
    "numpy.random.logseries": {
     "line number": [
      1583,
      1585
     ]
    },
    "numpy.random.pareto": {
     "line number": [
      1580
     ]
    },
    "numpy.random.poisson": {
     "line number": [
      1582
     ]
    },
    "numpy.random.power": {
     "line number": [
      1581
     ]
    },
    "numpy.random.rayleigh": {
     "line number": [
      1581
     ]
    },
    "numpy.random.standard_gamma": {
     "line number": [
      1578
     ]
    },
    "numpy.random.standard_t": {
     "line number": [
      1579
     ]
    },
    "numpy.random.weibull": {
     "line number": [
      1580
     ]
    },
    "numpy.random.zipf": {
     "line number": [
      1582
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1594
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSingleEltArrayInput.test_three_arg_funcs": {
  "data": {
   "lineno": 1641,
   "symbols_in_volume": {
    "func": {
     "line number": [
      1645,
      1646,
      1649,
      1652
     ]
    },
    "numpy.random.hypergeometric": {
     "line number": [
      1643
     ]
    },
    "numpy.random.noncentral_f": {
     "line number": [
      1642
     ]
    },
    "numpy.random.triangular": {
     "line number": [
      1642
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1647,
      1650,
      1653
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestSingleEltArrayInput.test_two_arg_funcs": {
  "data": {
   "lineno": 1596,
   "symbols_in_volume": {
    "func": {
     "line number": [
      1607,
      1608,
      1614,
      1617,
      1620
     ]
    },
    "numpy.array": {
     "line number": [
      1609
     ]
    },
    "numpy.random.beta": {
     "line number": [
      1598
     ]
    },
    "numpy.random.binomial": {
     "line number": [
      1603,
      1605
     ]
    },
    "numpy.random.f": {
     "line number": [
      1599
     ]
    },
    "numpy.random.gamma": {
     "line number": [
      1598
     ]
    },
    "numpy.random.gumbel": {
     "line number": [
      1601
     ]
    },
    "numpy.random.laplace": {
     "line number": [
      1600
     ]
    },
    "numpy.random.logistic": {
     "line number": [
      1601
     ]
    },
    "numpy.random.lognormal": {
     "line number": [
      1602
     ]
    },
    "numpy.random.negative_binomial": {
     "line number": [
      1603,
      1605
     ]
    },
    "numpy.random.noncentral_chisquare": {
     "line number": [
      1599
     ]
    },
    "numpy.random.normal": {
     "line number": [
      1597
     ]
    },
    "numpy.random.uniform": {
     "line number": [
      1597
     ]
    },
    "numpy.random.vonmises": {
     "line number": [
      1600
     ]
    },
    "numpy.random.wald": {
     "line number": [
      1602
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1615,
      1618,
      1621
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestThread": {
  "data": {
   "lineno": 1527,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1527
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_random.TestThread.check_function": {
  "data": {
   "lineno": 1532,
   "symbols_in_volume": {
    "function": {
     "line number": [
      1546
     ]
    },
    "len": {
     "line number": [
      1535,
      1536
     ]
    },
    "numpy.empty": {
     "line number": [
      1535,
      1536
     ]
    },
    "numpy.intp": {
     "line number": [
      1549
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      1539,
      1546
     ]
    },
    "numpy.random.tests.test_random.sys": {
     "line number": [
      1549
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      1550
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      1552
     ]
    },
    "t": {
     "line number": [
      1539,
      1541,
      1542
     ]
    },
    "threading.Thread": {
     "line number": [
      1539
     ]
    },
    "zip": {
     "line number": [
      1540,
      1545
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestThread.setup": {
  "data": {
   "lineno": 1529,
   "symbols_in_volume": {
    "range": {
     "line number": [
      1530
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestThread.test_exp": {
  "data": {
   "lineno": 1559
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestThread.test_exp.gen_random": {
  "data": {
   "lineno": 1560,
   "symbols_in_volume": {
    "numpy.ones": {
     "line number": [
      1561
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestThread.test_multinomial": {
  "data": {
   "lineno": 1564
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestThread.test_multinomial.gen_random": {
  "data": {
   "lineno": 1565
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestThread.test_normal": {
  "data": {
   "lineno": 1554
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.TestThread.test_normal.gen_random": {
  "data": {
   "lineno": 1555
  },
  "type": "function"
 },
 "numpy.random.tests.test_random.Thread": {
  "data": {
   "shadows": "threading.Thread"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.assert_no_warnings": {
  "data": {
   "shadows": "numpy.testing.assert_no_warnings"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.random": {
  "data": {
   "shadows": "numpy.random"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.random.tests.test_random.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.random.tests.test_regression": {
  "data": {},
  "type": "module"
 },
 "numpy.random.tests.test_regression.TestRegression": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "object": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_regression.TestRegression.test_VonMises_range": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      19,
      19
     ]
    },
    "numpy.linspace": {
     "line number": [
      17
     ]
    },
    "numpy.pi": {
     "line number": [
      19,
      19
     ]
    },
    "numpy.random.mtrand.vonmises": {
     "line number": [
      18
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_beta_small_parameters": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "numpy.any": {
     "line number": [
      93
     ]
    },
    "numpy.isnan": {
     "line number": [
      93
     ]
    },
    "numpy.random.beta": {
     "line number": [
      92
     ]
    },
    "numpy.random.seed": {
     "line number": [
      91
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_call_within_randomstate": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      73
     ]
    },
    "numpy.ones": {
     "line number": [
      78
     ]
    },
    "numpy.random.RandomState": {
     "line number": [
      72
     ]
    },
    "numpy.random.seed": {
     "line number": [
      75
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      78
     ]
    },
    "range": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_choice_sum_of_probs_tolerance": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      106
     ]
    },
    "numpy.array": {
     "line number": [
      103
     ]
    },
    "numpy.float16": {
     "line number": [
      102
     ]
    },
    "numpy.float32": {
     "line number": [
      102
     ]
    },
    "numpy.float64": {
     "line number": [
      102
     ]
    },
    "numpy.random.choice": {
     "line number": [
      104,
      106
     ]
    },
    "numpy.random.seed": {
     "line number": [
      99
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      105
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      106
     ]
    },
    "sum": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_hypergeometric_range": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "numpy.all": {
     "line number": [
      23,
      24
     ]
    },
    "numpy.random.hypergeometric": {
     "line number": [
      23,
      24,
      34
     ]
    },
    "numpy.random.tests.test_regression.sys": {
     "line number": [
      30,
      31
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      23,
      24,
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_logseries_convergence": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "float": {
     "line number": [
      44,
      48
     ]
    },
    "numpy.random.logseries": {
     "line number": [
      40
     ]
    },
    "numpy.random.seed": {
     "line number": [
      39
     ]
    },
    "numpy.sum": {
     "line number": [
      44,
      48
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      46,
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_multivariate_normal_size_types": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "numpy.int64": {
     "line number": [
      86
     ]
    },
    "numpy.int_": {
     "line number": [
      85
     ]
    },
    "numpy.random.multivariate_normal": {
     "line number": [
      84,
      85,
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_permutation_longs": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "numpy.compat.long": {
     "line number": [
      56
     ]
    },
    "numpy.random.permutation": {
     "line number": [
      54,
      56
     ]
    },
    "numpy.random.seed": {
     "line number": [
      53,
      55
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_permutation_subclass": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "M": {
     "line number": [
      154
     ]
    },
    "numpy.arange": {
     "line number": [
      142,
      145,
      157
     ]
    },
    "numpy.array": {
     "line number": [
      144,
      156
     ]
    },
    "numpy.random.permutation": {
     "line number": [
      143,
      155
     ]
    },
    "numpy.random.seed": {
     "line number": [
      141,
      153
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      144,
      145,
      156,
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_permutation_subclass.M": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      148
     ]
    },
    "object": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_regression.TestRegression.test_permutation_subclass.M.__array__": {
  "data": {
   "lineno": 150
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_permutation_subclass.N": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.random.tests.test_regression.TestRegression.test_shuffle_mixed_dimension": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "list": {
     "line number": [
      66
     ]
    },
    "numpy.random.seed": {
     "line number": [
      65
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      67
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_shuffle_of_array_of_different_length_strings": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      114
     ]
    },
    "numpy.random.seed": {
     "line number": [
      112
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      117
     ]
    },
    "numpy.random.tests.test_regression.gc": {
     "line number": [
      121
     ]
    },
    "range": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.TestRegression.test_shuffle_of_array_of_objects": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      128,
      128
     ]
    },
    "numpy.array": {
     "line number": [
      128
     ]
    },
    "numpy.random.seed": {
     "line number": [
      127
     ]
    },
    "numpy.random.shuffle": {
     "line number": [
      131
     ]
    },
    "numpy.random.tests.test_regression.gc": {
     "line number": [
      135
     ]
    },
    "range": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.random.tests.test_regression.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.random.tests.test_regression.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.random.tests.test_regression.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.random.tests.test_regression.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.random.tests.test_regression.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.random.tests.test_regression.gc": {
  "data": {
   "shadows": "gc"
  },
  "type": "import"
 },
 "numpy.random.tests.test_regression.long": {
  "data": {
   "shadows": "numpy.compat.long"
  },
  "type": "import"
 },
 "numpy.random.tests.test_regression.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.random.tests.test_regression.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.random.tests.test_regression.random": {
  "data": {
   "shadows": "numpy.random"
  },
  "type": "import"
 },
 "numpy.random.tests.test_regression.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.random.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      27
     ]
    },
    "print": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.setup.configuration": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.show_config": {
  "data": {
   "shadows": "numpy.__config__.show"
  },
  "type": "import"
 },
 "numpy.str": {
  "data": {
   "shadows": "__builtin__.str"
  },
  "type": "import"
 },
 "numpy.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.test": {
  "data": {
   "lineno": 191
  },
  "type": "constant"
 },
 "numpy.testing": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      21
     ]
    },
    "numpy._pytesttester.PytestTester": {
     "line number": [
      21,
      22
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing.PytestTester": {
  "data": {
   "shadows": "numpy._pytesttester.PytestTester"
  },
  "type": "import"
 },
 "numpy.testing.TestCase": {
  "data": {
   "shadows": "unittest.TestCase"
  },
  "type": "import"
 },
 "numpy.testing.Tester": {
  "data": {
   "shadows": "NoseTester"
  },
  "type": "import"
 },
 "numpy.testing.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.testing._private": {
  "data": {},
  "type": "module"
 },
 "numpy.testing._private.decorators": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      22
     ]
    },
    "numpy.testing._private.decorators.skipif": {
     "line number": [
      292
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing._private.decorators.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "numpy.testing._private.decorators._needs_refcount": {
  "data": {
   "lineno": 292
  },
  "type": "constant"
 },
 "numpy.testing._private.decorators.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing._private.decorators.collections_abc": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "numpy.testing._private.decorators.deprecated": {
  "data": {
   "lineno": 230
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.deprecated.deprecate_decorator": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": {
    "collections.Callable": {
     "line number": [
      265
     ]
    },
    "conditional": {
     "line number": [
      266,
      268
     ]
    },
    "f": {
     "line number": [
      270,
      272
     ]
    },
    "isinstance": {
     "line number": [
      265
     ]
    },
    "numpy.testing._private.decorators.nose": {
     "line number": [
      270
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.deprecated.deprecate_decorator._deprecated_imp": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      262
     ]
    },
    "assert_warns": {
     "line number": [
      262
     ]
    },
    "f": {
     "line number": [
      263
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing._private.decorators.knownfailureif": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "collections.Callable": {
     "line number": [
      210
     ]
    },
    "fail_condition": {
     "line number": [
      211,
      213
     ]
    },
    "isinstance": {
     "line number": [
      210
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.knownfailureif.knownfail_decorator": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "f": {
     "line number": [
      226
     ]
    },
    "numpy.testing._private.decorators.nose": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.knownfailureif.knownfail_decorator.knownfailer": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "KnownFailureException": {
     "line number": [
      223
     ]
    },
    "f": {
     "line number": [
      225
     ]
    },
    "fail_val": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.nose": {
  "data": {
   "shadows": "nose"
  },
  "type": "import"
 },
 "numpy.testing._private.decorators.parametrize": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": {
    "input": {
     "line number": [
      290
     ]
    },
    "parameterized": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing._private.decorators.setastest": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.setastest.set_test": {
  "data": {
   "lineno": 94
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.skipif": {
  "data": {
   "lineno": 99
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.skipif.skip_decorator": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "collections.Callable": {
     "line number": [
      134
     ]
    },
    "f": {
     "line number": [
      166,
      171
     ]
    },
    "isinstance": {
     "line number": [
      134
     ]
    },
    "numpy.testing._private.decorators.nose": {
     "line number": [
      166,
      171
     ]
    },
    "skip_condition": {
     "line number": [
      135,
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.skipif.skip_decorator.get_msg": {
  "data": {
   "lineno": 139
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.skipif.skip_decorator.skipper_func": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "SkipTest": {
     "line number": [
      153
     ]
    },
    "f": {
     "line number": [
      155
     ]
    },
    "get_msg": {
     "line number": [
      153
     ]
    },
    "skip_val": {
     "line number": [
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.skipif.skip_decorator.skipper_gen": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "SkipTest": {
     "line number": [
      160
     ]
    },
    "f": {
     "line number": [
      160,
      162
     ]
    },
    "get_msg": {
     "line number": [
      160
     ]
    },
    "skip_val": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.decorators.slow": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing._private.noseclasses.KnownFailurePlugin": {
     "line number": [
      318
     ]
    },
    "numpy.testing._private.noseclasses.numpy": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing._private.noseclasses.ErrorClass": {
  "data": {
   "shadows": "nose.plugins.errorclass.ErrorClass"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.ErrorClassPlugin": {
  "data": {
   "shadows": "nose.plugins.errorclass.ErrorClassPlugin"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.FPUModeCheckPlugin": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": {
    "nose.plugins.base.Plugin": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase": {
  "data": {
   "lineno": 327
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase.run": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      337,
      340
     ]
    },
    "numpy.core._multiarray_tests.get_fpu_mode": {
     "line number": [
      331,
      333
     ]
    },
    "numpy.testing._private.noseclasses.sys": {
     "line number": [
      341
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.KnownFailure": {
  "data": {
   "lineno": 318
  },
  "type": "constant"
 },
 "numpy.testing._private.noseclasses.KnownFailurePlugin": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "nose.plugins.errorclass.ErrorClass": {
     "line number": [
      299
     ]
    },
    "nose.plugins.errorclass.ErrorClassPlugin": {
     "line number": [
      292
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.noseclasses.KnownFailurePlugin.configure": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      314
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.KnownFailurePlugin.options": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": {
    "numpy.testing._private.noseclasses.os": {
     "line number": [
      303
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.NumpyDocTestCase": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "nose.plugins.doctests.DocTestCase": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "numpy.testing._private.noseclasses.doctest": {
     "line number": [
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.NumpyDocTestFinder": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "numpy.testing._private.noseclasses.doctest": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.noseclasses.NumpyDocTestFinder._find": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      94
     ]
    },
    "getattr": {
     "line number": [
      93,
      95
     ]
    },
    "inspect.isclass": {
     "line number": [
      82,
      89,
      98
     ]
    },
    "inspect.isfunction": {
     "line number": [
      98
     ]
    },
    "inspect.ismethod": {
     "line number": [
      99
     ]
    },
    "inspect.ismodule": {
     "line number": [
      79
     ]
    },
    "inspect.isroutine": {
     "line number": [
      82
     ]
    },
    "isinstance": {
     "line number": [
      92,
      94,
      99
     ]
    },
    "numpy.testing._private.noseclasses.doctest": {
     "line number": [
      66
     ]
    },
    "property": {
     "line number": [
      99
     ]
    },
    "staticmethod": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.NumpyDocTestFinder._from_module": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      58
     ]
    },
    "hasattr": {
     "line number": [
      53
     ]
    },
    "isinstance": {
     "line number": [
      55
     ]
    },
    "numpy.testing._private.noseclasses.inspect": {
     "line number": [
      39,
      41,
      43,
      45,
      51,
      52
     ]
    },
    "object": {
     "line number": [
      39,
      41,
      43,
      45,
      51,
      52,
      53,
      55
     ]
    },
    "object.__globals__": {
     "line number": [
      40
     ]
    },
    "object.__module__": {
     "line number": [
      42,
      44,
      54
     ]
    },
    "object.__self__.__class__.__module__": {
     "line number": [
      50
     ]
    },
    "property": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.NumpyDoctest": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "nose.plugins.doctests.Doctest": {
     "line number": [
      151
     ]
    },
    "numpy.testing._private.noseclasses.NumpyDocTestCase": {
     "line number": [
      163
     ]
    },
    "numpy.testing._private.noseclasses.NumpyDocTestFinder": {
     "line number": [
      165
     ]
    },
    "numpy.testing._private.noseclasses.NumpyOutputChecker": {
     "line number": [
      164
     ]
    },
    "numpy.testing._private.noseclasses.doctest": {
     "line number": [
      156,
      156
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.noseclasses.NumpyDoctest.afterContext": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "numpy.testing._private.noseclasses.numpy": {
     "line number": [
      261
     ]
    },
    "numpy.testing._private.noseclasses.print_state": {
     "line number": [
      261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.NumpyDoctest.configure": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "nose.plugins.base.Plugin.configure": {
     "line number": [
      179
     ]
    },
    "numpy.testing._private.noseclasses.doctest": {
     "line number": [
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.NumpyDoctest.loadTestsFromModule": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      238
     ]
    },
    "nose.plugins.doctests.log.debug": {
     "line number": [
      234
     ]
    },
    "nose.util.src": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.NumpyDoctest.options": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "nose.plugins.base.Plugin.options": {
     "line number": [
      169
     ]
    },
    "numpy.testing._private.noseclasses.os": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.NumpyDoctest.set_test_context": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "__import__": {
     "line number": [
      227
     ]
    },
    "get_package_name": {
     "line number": [
      209
     ]
    },
    "numpy.testing._private.noseclasses.numpy": {
     "line number": [
      222
     ]
    },
    "numpy.testing._private.noseclasses.os": {
     "line number": [
      209
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.NumpyDoctest.wantFile": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": {
    "nose.plugins.doctests.Doctest.wantFile": {
     "line number": [
      268
     ]
    },
    "numpy.testing._private.noseclasses.os": {
     "line number": [
      265
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.NumpyOutputChecker": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "numpy.testing._private.noseclasses.doctest": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.noseclasses.NumpyOutputChecker.check_output": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "numpy.testing._private.noseclasses.doctest": {
     "line number": [
      111,
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.NumpyTestProgram": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "numpy.testing._private.noseclasses.nose": {
     "line number": [
      348
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.noseclasses.NumpyTestProgram.runTests": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": {
    "numpy.testing._private.noseclasses.nose": {
     "line number": [
      358
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.Plugin": {
  "data": {
   "shadows": "nose.plugins.base.Plugin"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.Unplugger": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": {
    "object": {
     "line number": [
      271
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.noseclasses.Unplugger.__init__": {
  "data": {
   "lineno": 280
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.Unplugger.configure": {
  "data": {
   "lineno": 286
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.Unplugger.options": {
  "data": {
   "lineno": 283
  },
  "type": "function"
 },
 "numpy.testing._private.noseclasses.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.doctest": {
  "data": {
   "shadows": "doctest"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.get_fpu_mode": {
  "data": {
   "shadows": "numpy.core._multiarray_tests.get_fpu_mode"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.isclass": {
  "data": {
   "shadows": "inspect.isclass"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.isfunction": {
  "data": {
   "shadows": "inspect.isfunction"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.ismethod": {
  "data": {
   "shadows": "inspect.ismethod"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.ismodule": {
  "data": {
   "shadows": "inspect.ismodule"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.isroutine": {
  "data": {
   "shadows": "inspect.isroutine"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.nose": {
  "data": {
   "shadows": "nose"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.npd": {
  "data": {
   "shadows": "nose.plugins.doctests"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.print_state": {
  "data": {
   "lineno": 149
  },
  "type": "constant"
 },
 "numpy.testing._private.noseclasses.src": {
  "data": {
   "shadows": "nose.util.src"
  },
  "type": "import"
 },
 "numpy.testing._private.noseclasses.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester": {
  "data": {},
  "type": "module"
 },
 "numpy.testing._private.nosetester.EntryPointPluginManager": {
  "data": {
   "shadows": "nose.plugins.EntryPointPluginManager"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.NoseTester": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "object": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.nosetester.NoseTester.__init__": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      175
     ]
    },
    "getattr": {
     "line number": [
      180
     ]
    },
    "isinstance": {
     "line number": [
      178
     ]
    },
    "numpy.testing._private.nosetester.get_package_name": {
     "line number": [
      189
     ]
    },
    "numpy.testing._private.nosetester.os": {
     "line number": [
      176,
      178,
      179
     ]
    },
    "numpy.testing._private.nosetester.sys": {
     "line number": [
      172
     ]
    },
    "str": {
     "line number": [
      182
     ]
    },
    "type": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.nosetester.NoseTester._get_custom_doctester": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": {
    "NumpyDoctest": {
     "line number": [
      263
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.nosetester.NoseTester._show_system_info": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": {
    "import_nose": {
     "line number": [
      236
     ]
    },
    "numpy.testing._private.nosetester.numpy": {
     "line number": [
      239,
      240,
      242
     ]
    },
    "numpy.testing._private.nosetester.os": {
     "line number": [
      242,
      248
     ]
    },
    "numpy.testing._private.nosetester.scipy": {
     "line number": [
      247,
      248
     ]
    },
    "numpy.testing._private.nosetester.sys": {
     "line number": [
      251
     ]
    },
    "print": {
     "line number": [
      239,
      241,
      243,
      247,
      249,
      252,
      253
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.nosetester.NoseTester._test_argv": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      218
     ]
    },
    "isinstance": {
     "line number": [
      217
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      217
     ]
    },
    "str": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.nosetester.NoseTester.bench": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": {
    "Unplugger": {
     "line number": [
      551
     ]
    },
    "import_nose": {
     "line number": [
      547
     ]
    },
    "numpy.testing._private.nosetester.os": {
     "line number": [
      544
     ]
    },
    "print": {
     "line number": [
      540
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.nosetester.NoseTester.prepare_test_args": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "FPUModeCheckPlugin": {
     "line number": [
      301
     ]
    },
    "ImportError": {
     "line number": [
      308
     ]
    },
    "KnownFailurePlugin": {
     "line number": [
      298
     ]
    },
    "Unplugger": {
     "line number": [
      324
     ]
    },
    "import_nose": {
     "line number": [
      279
     ]
    },
    "int": {
     "line number": [
      290
     ]
    },
    "isinstance": {
     "line number": [
      290
     ]
    },
    "nose.plugins.EntryPointPluginManager": {
     "line number": [
      305
     ]
    },
    "p": {
     "line number": [
      299,
      299,
      307,
      307
     ]
    },
    "str": {
     "line number": [
      291
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.nosetester.NoseTester.test": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      459,
      462,
      463,
      464,
      465,
      466,
      473
     ]
    },
    "NumpyTestProgram": {
     "line number": [
      478
     ]
    },
    "UserWarning": {
     "line number": [
      452
     ]
    },
    "Warning": {
     "line number": [
      422
     ]
    },
    "dict": {
     "line number": [
      422
     ]
    },
    "isinstance": {
     "line number": [
      424
     ]
    },
    "min": {
     "line number": [
      400
     ]
    },
    "numpy.compat.basestring": {
     "line number": [
      424
     ]
    },
    "numpy.testing._private.nosetester.doctest": {
     "line number": [
      417
     ]
    },
    "numpy.testing._private.nosetester.numpy": {
     "line number": [
      441
     ]
    },
    "numpy.testing._private.nosetester.sys": {
     "line number": [
      455,
      455
     ]
    },
    "numpy.testing._private.nosetester.threading": {
     "line number": [
      461
     ]
    },
    "numpy.testing._private.nosetester.warnings": {
     "line number": [
      430,
      433,
      436,
      449,
      450,
      472
     ]
    },
    "print": {
     "line number": [
      409,
      411
     ]
    },
    "suppress_warnings": {
     "line number": [
      427
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.nosetester.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "numpy.testing._private.nosetester._numpy_tester": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": {
    "hasattr": {
     "line number": [
      557
     ]
    },
    "numpy.testing._private.nosetester.NoseTester": {
     "line number": [
      561
     ]
    },
    "numpy.testing._private.nosetester.numpy": {
     "line number": [
      557,
      557
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.nosetester.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.basestring": {
  "data": {
   "shadows": "numpy.compat.basestring"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.doctest": {
  "data": {
   "shadows": "doctest"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.get_package_name": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "numpy.testing._private.nosetester.os": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.nosetester.nose.plugins.builtin": {
  "data": {
   "shadows": "nose.plugins.builtin"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.run_module_suite": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      103
     ]
    },
    "KnownFailurePlugin": {
     "line number": [
      112
     ]
    },
    "import_nose": {
     "line number": [
      110
     ]
    },
    "numpy.testing._private.nosetester.sys": {
     "line number": [
      100,
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.nosetester.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "numpy.testing._private.nosetester.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.testing._private.parameterized": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      43
     ]
    },
    "bytes": {
     "line number": [
      59
     ]
    },
    "collections.OrderedDict": {
     "line number": [
      44
     ]
    },
    "collections.namedtuple": {
     "line number": [
      73
     ]
    },
    "dict": {
     "line number": [
      44
     ]
    },
    "list": {
     "line number": [
      56
     ]
    },
    "numpy.testing._private.parameterized.PY3": {
     "line number": [
      52
     ]
    },
    "numpy.testing._private.parameterized.sys": {
     "line number": [
      48,
      49
     ]
    },
    "set": {
     "line number": [
      258
     ]
    },
    "str": {
     "line number": [
      57,
      58,
      68
     ]
    },
    "zip": {
     "line number": [
      56,
      66
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing._private.parameterized.InstanceType": {
  "data": {
   "shadows": "types.InstanceType"
  },
  "type": "import"
 },
 "numpy.testing._private.parameterized.MaybeOrderedDict": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized.MethodType": {
  "data": {
   "shadows": "types.MethodType"
  },
  "type": "import"
 },
 "numpy.testing._private.parameterized.PY2": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized.PY3": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized.QuietOrderedDict": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "collections.OrderedDict": {
     "line number": [
      142
     ]
    },
    "dict.__repr__": {
     "line number": [
      146
     ]
    },
    "dict.__str__": {
     "line number": [
      145
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.parameterized.TestCase": {
  "data": {
   "shadows": "unittest.TestCase"
  },
  "type": "import"
 },
 "numpy.testing._private.parameterized._param": {
  "data": {
   "lineno": 73
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized._test_runner_aliases": {
  "data": {
   "lineno": 259
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized._test_runner_guess": {
  "data": {
   "lineno": 257
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized._test_runner_override": {
  "data": {
   "lineno": 256
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized._test_runners": {
  "data": {
   "lineno": 258
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized.bytes_type": {
  "data": {
   "lineno": 68
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized.default_doc_func": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": {
    "len": {
     "line number": [
      244
     ]
    },
    "numpy.testing._private.parameterized.parameterized_argument_value_pairs": {
     "line number": [
      231
     ]
    },
    "numpy.testing._private.parameterized.short_repr": {
     "line number": [
      234
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.default_name_func": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      250
     ]
    },
    "len": {
     "line number": [
      250
     ]
    },
    "numpy.testing._private.parameterized.string_types": {
     "line number": [
      250
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.detect_runner": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "numpy.testing._private.parameterized._test_runner_aliases": {
     "line number": [
      285,
      286
     ]
    },
    "numpy.testing._private.parameterized._test_runner_guess": {
     "line number": [
      280,
      288,
      291,
      294,
      295
     ]
    },
    "numpy.testing._private.parameterized._test_runner_override": {
     "line number": [
      277,
      278
     ]
    },
    "numpy.testing._private.parameterized._test_runners": {
     "line number": [
      287
     ]
    },
    "numpy.testing._private.parameterized.inspect": {
     "line number": [
      281
     ]
    },
    "reversed": {
     "line number": [
      282
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "numpy.testing._private.parameterized.lzip": {
  "data": {
   "lineno": 66
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized.make_method": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "type": {
     "line number": [
      71
     ]
    },
    "types.MethodType": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "numpy.testing._private.parameterized.param": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "numpy.testing._private.parameterized._param": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.parameterized.param.__new__": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "numpy.testing._private.parameterized._param": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.param.__repr__": {
  "data": {
   "lineno": 138
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.param.explicit": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      100
     ]
    },
    "cls": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.param.from_decorator": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      130,
      133
     ]
    },
    "classmethod": {
     "line number": [
      114
     ]
    },
    "cls": {
     "line number": [
      129
     ]
    },
    "isinstance": {
     "line number": [
      124,
      126
     ]
    },
    "numpy.testing._private.parameterized.param": {
     "line number": [
      124
     ]
    },
    "numpy.testing._private.parameterized.string_types": {
     "line number": [
      126
     ]
    },
    "str": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "object": {
     "line number": [
      297
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing._private.parameterized.parameterized.__call__": {
  "data": {
   "lineno": 322
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized.__call__.wrapper": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      330
     ]
    },
    "delattr": {
     "line number": [
      354
     ]
    },
    "enumerate": {
     "line number": [
      339
     ]
    },
    "functools.wraps": {
     "line number": [
      325
     ]
    },
    "issubclass": {
     "line number": [
      329
     ]
    },
    "numpy.testing._private.parameterized.param": {
     "line number": [
      340
     ]
    },
    "setattr": {
     "line number": [
      350
     ]
    },
    "type": {
     "line number": [
      327
     ]
    },
    "types.InstanceType": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized.__init__": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": {
    "input": {
     "line number": [
      319
     ]
    },
    "numpy.testing._private.parameterized.default_doc_func": {
     "line number": [
      320
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized._terrible_magic_get_defining_classes": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": {
    "eval": {
     "line number": [
      402
     ]
    },
    "len": {
     "line number": [
      394
     ]
    },
    "numpy.testing._private.parameterized.inspect": {
     "line number": [
      393
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized.assert_not_in_testcase_subclass": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      383
     ]
    },
    "any": {
     "line number": [
      382
     ]
    },
    "cls": {
     "line number": [
      382,
      382
     ]
    },
    "issubclass": {
     "line number": [
      382
     ]
    },
    "unittest.TestCase": {
     "line number": [
      382
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized.check_input_values": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      411
     ]
    },
    "isinstance": {
     "line number": [
      418
     ]
    },
    "list": {
     "line number": [
      418,
      419
     ]
    },
    "numpy.testing._private.parameterized.param": {
     "line number": [
      420
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized.expand": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      441,
      447
     ]
    },
    "classmethod": {
     "line number": [
      422
     ]
    },
    "numpy.testing._private.parameterized.default_doc_func": {
     "line number": [
      451
     ]
    },
    "numpy.testing._private.parameterized.default_name_func": {
     "line number": [
      452
     ]
    },
    "numpy.testing._private.parameterized.warnings": {
     "line number": [
      440,
      446
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized.expand.parameterized_expand_wrapper": {
  "data": {
   "lineno": 454,
   "symbols_in_volume": {
    "cls.input_as_callable": {
     "line number": [
      459
     ]
    },
    "cls.param_as_standalone_func": {
     "line number": [
      462
     ]
    },
    "doc_func": {
     "line number": [
      463
     ]
    },
    "enumerate": {
     "line number": [
      460
     ]
    },
    "input": {
     "line number": [
      459
     ]
    },
    "name_func": {
     "line number": [
      461
     ]
    },
    "numpy.testing._private.parameterized.inspect": {
     "line number": [
      455
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized.input_as_callable": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": {
    "callable": {
     "line number": [
      406
     ]
    },
    "classmethod": {
     "line number": [
      404
     ]
    },
    "cls.check_input_values": {
     "line number": [
      407,
      408
     ]
    },
    "input": {
     "line number": [
      406,
      407,
      408
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized.param_as_nose_tuple": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": {
    "func": {
     "line number": [
      362,
      363
     ]
    },
    "functools.wraps": {
     "line number": [
      362
     ]
    },
    "numpy.testing._private.parameterized.PY2": {
     "line number": [
      374
     ]
    },
    "numpy.testing._private.parameterized.detect_runner": {
     "line number": [
      374
     ]
    },
    "numpy.testing._private.parameterized.make_method": {
     "line number": [
      377
     ]
    },
    "type": {
     "line number": [
      377
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized.param_as_standalone_func": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      484
     ]
    },
    "classmethod": {
     "line number": [
      468
     ]
    },
    "func": {
     "line number": [
      477
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized.param_as_standalone_func.standalone_func": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": {
    "func": {
     "line number": [
      472,
      470
     ]
    },
    "functools.wraps": {
     "line number": [
      470
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized.to_safe_name": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      488
     ]
    },
    "numpy.testing._private.parameterized.re": {
     "line number": [
      490
     ]
    },
    "str": {
     "line number": [
      490
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.parameterized_argument_value_pairs": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "len": {
     "line number": [
      184,
      185
     ]
    },
    "numpy.testing._private.parameterized.QuietOrderedDict": {
     "line number": [
      194
     ]
    },
    "numpy.testing._private.parameterized.inspect": {
     "line number": [
      178
     ]
    },
    "numpy.testing._private.parameterized.lzip": {
     "line number": [
      183
     ]
    },
    "sorted": {
     "line number": [
      194
     ]
    },
    "tuple": {
     "line number": [
      201
     ]
    },
    "zip": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.testing._private.parameterized.set_test_runner": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      266
     ]
    },
    "numpy.testing._private.parameterized._test_runner_override": {
     "line number": [
      270
     ]
    },
    "numpy.testing._private.parameterized._test_runners": {
     "line number": [
      265,
      268
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.short_repr": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "UnicodeDecodeError": {
     "line number": [
      221
     ]
    },
    "isinstance": {
     "line number": [
      218
     ]
    },
    "len": {
     "line number": [
      223,
      224
     ]
    },
    "numpy.testing._private.parameterized.bytes_type": {
     "line number": [
      218
     ]
    },
    "numpy.testing._private.parameterized.text_type": {
     "line number": [
      220,
      222
     ]
    },
    "repr": {
     "line number": [
      217
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing._private.parameterized.string_types": {
  "data": {
   "lineno": 69
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.testing._private.parameterized.text_type": {
  "data": {
   "lineno": 67
  },
  "type": "constant"
 },
 "numpy.testing._private.parameterized.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.testing._private.parameterized.wraps": {
  "data": {
   "shadows": "functools.wraps"
  },
  "type": "import"
 },
 "numpy.testing.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing.dec": {
  "data": {
   "shadows": "decorators"
  },
  "type": "import"
 },
 "numpy.testing.decorators": {
  "data": {
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      13
     ]
    },
    "numpy.testing.decorators.warnings": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing.decorators.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing.decorators.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing.decorators.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing.decorators.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.testing.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing.noseclasses": {
  "data": {
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      12
     ]
    },
    "numpy.testing.noseclasses.warnings": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing.noseclasses.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing.noseclasses.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing.noseclasses.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing.noseclasses.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.testing.nosetester": {
  "data": {
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      13
     ]
    },
    "numpy.testing.nosetester.warnings": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing.nosetester.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.testing.nosetester.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing.nosetester.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing.nosetester.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing.nosetester.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.testing.print_coercion_tables": {
  "data": {
   "symbols_in_volume": {
    "numpy.testing.print_coercion_tables.print_cancast_table": {
     "line number": [
      74
     ]
    },
    "numpy.testing.print_coercion_tables.print_coercion_table": {
     "line number": [
      79,
      82,
      85,
      88,
      91
     ]
    },
    "numpy.typecodes": {
     "line number": [
      74,
      79,
      82,
      85,
      88,
      91
     ]
    },
    "print": {
     "line number": [
      73,
      75,
      76,
      77,
      78,
      80,
      81,
      83,
      84,
      86,
      87,
      89,
      90
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing.print_coercion_tables.GenericObject": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "numpy.dtype": {
     "line number": [
      20
     ]
    },
    "object": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.print_coercion_tables.GenericObject.__add__": {
  "data": {
   "lineno": 14
  },
  "type": "function"
 },
 "numpy.testing.print_coercion_tables.GenericObject.__init__": {
  "data": {
   "lineno": 11
  },
  "type": "function"
 },
 "numpy.testing.print_coercion_tables.GenericObject.__radd__": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "numpy.testing.print_coercion_tables.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing.print_coercion_tables.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing.print_coercion_tables.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.testing.print_coercion_tables.print_cancast_table": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "int": {
     "line number": [
      30
     ]
    },
    "numpy.can_cast": {
     "line number": [
      30
     ]
    },
    "print": {
     "line number": [
      23,
      25,
      26,
      28,
      30,
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.print_coercion_tables.print_coercion_table": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "OverflowError": {
     "line number": [
      66
     ]
    },
    "TypeError": {
     "line number": [
      68
     ]
    },
    "ValueError": {
     "line number": [
      64
     ]
    },
    "coltype": {
     "line number": [
      55
     ]
    },
    "isinstance": {
     "line number": [
      60
     ]
    },
    "numpy.add": {
     "line number": [
      59
     ]
    },
    "numpy.array": {
     "line number": [
      52
     ]
    },
    "numpy.dtype": {
     "line number": [
      63
     ]
    },
    "numpy.ndarray": {
     "line number": [
      60
     ]
    },
    "numpy.obj2sctype": {
     "line number": [
      42,
      49
     ]
    },
    "numpy.promote_types": {
     "line number": [
      57
     ]
    },
    "numpy.testing.print_coercion_tables.GenericObject": {
     "line number": [
      40,
      47
     ]
    },
    "print": {
     "line number": [
      34,
      36,
      37,
      44,
      70,
      71
     ]
    },
    "rowtype": {
     "line number": [
      52,
      52,
      54
     ]
    },
    "type": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.print_coercion_tables.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing.setup": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      13
     ]
    },
    "numpy.distutils.core.setup": {
     "line number": [
      15
     ]
    },
    "numpy.testing.setup.configuration": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing.setup.Configuration": {
  "data": {
   "shadows": "numpy.distutils.misc_util.Configuration"
  },
  "type": "import"
 },
 "numpy.testing.setup.configuration": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": {
    "numpy.distutils.misc_util.Configuration": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.setup.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing.setup.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing.setup.setup": {
  "data": {
   "shadows": "numpy.distutils.core.setup"
  },
  "type": "import"
 },
 "numpy.testing.test": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "numpy.testing.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.testing.tests.test_decorators": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing.tests.test_decorators.HAVE_NOSE": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "numpy.testing.tests.test_decorators.KnownFailureException": {
  "data": {
   "shadows": "numpy.testing.KnownFailureException"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_decorators.SkipTest": {
  "data": {
   "shadows": "numpy.testing.SkipTest"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "numpy.testing.tests.test_decorators.HAVE_NOSE": {
     "line number": [
      23
     ]
    },
    "numpy.testing.tests.test_decorators.pytest": {
     "line number": [
      23
     ]
    },
    "object": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.DidntSkipException": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_deprecated": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      189,
      197
     ]
    },
    "ValueError": {
     "line number": [
      195
     ]
    },
    "deprecated_func": {
     "line number": [
      191
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      189,
      195,
      197
     ]
    },
    "numpy.testing.tests.test_decorators.warnings": {
     "line number": [
      192,
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_deprecated.deprecated_func": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      175
     ]
    },
    "numpy.testing.dec.deprecated": {
     "line number": [
      172
     ]
    },
    "numpy.testing.tests.test_decorators.warnings": {
     "line number": [
      175
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_deprecated.deprecated_func2": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      181
     ]
    },
    "numpy.testing.dec.deprecated": {
     "line number": [
      177
     ]
    },
    "numpy.testing.tests.test_decorators.warnings": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_deprecated.deprecated_func3": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "numpy.testing.dec.deprecated": {
     "line number": [
      183
     ]
    },
    "numpy.testing.tests.test_decorators.warnings": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_deprecated.non_deprecated_func": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "numpy.testing.dec.deprecated": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_parametrize": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "check_parametrize": {
     "line number": [
      211
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      214
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_parametrize.check_parametrize": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      208
     ]
    },
    "numpy.testing.dec.parametrize": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_setastest": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      51,
      52,
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_setastest.f_default": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "numpy.testing.dec.setastest": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_setastest.f_isnottest": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "numpy.testing.dec.setastest": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_setastest.f_istest": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "numpy.testing.dec.setastest": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_callable": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      90,
      104
     ]
    },
    "f1": {
     "line number": [
      88
     ]
    },
    "f2": {
     "line number": [
      100
     ]
    },
    "numpy.testing.SkipTest": {
     "line number": [
      91,
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_callable.f1": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "numpy.testing.dec.skipif": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_callable.f2": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "numpy.testing.dec.skipif": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_callable.skip_tester": {
  "data": {
   "lineno": 79
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_hardcoded": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      63,
      76
     ]
    },
    "f1": {
     "line number": [
      61
     ]
    },
    "f2": {
     "line number": [
      72
     ]
    },
    "numpy.testing.SkipTest": {
     "line number": [
      64,
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_hardcoded.f1": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "numpy.testing.dec.skipif": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_hardcoded.f2": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "numpy.testing.dec.skipif": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_callable": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      150,
      163
     ]
    },
    "g1": {
     "line number": [
      145
     ]
    },
    "g2": {
     "line number": [
      160
     ]
    },
    "numpy.testing.KnownFailureException": {
     "line number": [
      147,
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_callable.g1": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "numpy.testing.dec.knownfailureif": {
     "line number": [
      138
     ]
    },
    "range": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_callable.g2": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "numpy.testing.dec.knownfailureif": {
     "line number": [
      152
     ]
    },
    "range": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_callable.skip_tester": {
  "data": {
   "lineno": 135
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_hardcoded": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      118,
      130
     ]
    },
    "g1": {
     "line number": [
      113
     ]
    },
    "g2": {
     "line number": [
      127
     ]
    },
    "numpy.testing.KnownFailureException": {
     "line number": [
      115,
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_hardcoded.g1": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "numpy.testing.dec.knownfailureif": {
     "line number": [
      107
     ]
    },
    "range": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_hardcoded.g2": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "numpy.testing.dec.knownfailureif": {
     "line number": [
      120
     ]
    },
    "range": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_slow": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "numpy.testing.assert_": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.TestNoseDecorators.test_slow.slow_func": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "numpy.testing.dec.slow": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_decorators.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_decorators.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_decorators.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_decorators.dec": {
  "data": {
   "shadows": "numpy.testing.dec"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_decorators.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_decorators.nose": {
  "data": {
   "shadows": "nose"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_decorators.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_decorators.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_decorators.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_doctesting": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      54
     ]
    },
    "numpy.testing.noseclasses.NumpyDoctest": {
     "line number": [
      59
     ]
    },
    "numpy.testing.tests.test_doctesting.argv": {
     "line number": [
      59
     ]
    },
    "numpy.testing.tests.test_doctesting.nose": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing.tests.test_doctesting.NumpyDoctest": {
  "data": {
   "shadows": "numpy.testing.noseclasses.NumpyDoctest"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_doctesting.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_doctesting.argv": {
  "data": {
   "lineno": 58
  },
  "type": "constant"
 },
 "numpy.testing.tests.test_doctesting.check_empty_output": {
  "data": {
   "lineno": 35
  },
  "type": "function"
 },
 "numpy.testing.tests.test_doctesting.check_implicit_np": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "numpy.testing.tests.test_doctesting.check_random_directive": {
  "data": {
   "lineno": 10
  },
  "type": "function"
 },
 "numpy.testing.tests.test_doctesting.check_skip": {
  "data": {
   "lineno": 45
  },
  "type": "function"
 },
 "numpy.testing.tests.test_doctesting.check_whitespace_enabled": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "numpy.testing.tests.test_doctesting.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_doctesting.nose": {
  "data": {
   "shadows": "nose"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_doctesting.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils": {
  "data": {},
  "type": "module"
 },
 "numpy.testing.tests.test_utils.HAS_REFCOUNT": {
  "data": {
   "shadows": "numpy.testing.HAS_REFCOUNT"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual": {
  "data": {
   "lineno": 446,
   "symbols_in_volume": {
    "numpy.testing.tests.test_utils._GenericTest": {
     "line number": [
      446
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.setup": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": {
    "numpy.testing.assert_almost_equal": {
     "line number": [
      449
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_closeness": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      460,
      465
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      460,
      465
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_complex": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      497,
      497,
      498,
      498,
      499,
      499
     ]
    },
    "numpy.array": {
     "line number": [
      497,
      498,
      499
     ]
    },
    "numpy.nan": {
     "line number": [
      497,
      498
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_complex_item": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      489,
      489,
      490,
      490,
      491,
      491,
      492,
      492,
      493,
      493,
      494,
      494
     ]
    },
    "numpy.inf": {
     "line number": [
      491,
      491,
      494
     ]
    },
    "numpy.nan": {
     "line number": [
      490,
      490,
      491,
      491,
      492,
      493,
      493,
      494,
      494
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_error_message": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      511,
      527,
      539,
      551
     ]
    },
    "numpy.array": {
     "line number": [
      507,
      508,
      537,
      538,
      549,
      550
     ]
    },
    "numpy.inf": {
     "line number": [
      537,
      538
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      514,
      515,
      516,
      517,
      520,
      530,
      531,
      532,
      533,
      534,
      542,
      543,
      544,
      545,
      546,
      554,
      555,
      556
     ]
    },
    "numpy.testing.tests.test_utils.pytest": {
     "line number": [
      511,
      527,
      539,
      551
     ]
    },
    "str": {
     "line number": [
      513,
      529,
      541,
      553
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_inf_item": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      480,
      482
     ]
    },
    "numpy.inf": {
     "line number": [
      478,
      478,
      479,
      479,
      481,
      483,
      483
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      480,
      482
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_nan_item": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      470,
      472,
      474
     ]
    },
    "numpy.inf": {
     "line number": [
      473,
      475
     ]
    },
    "numpy.nan": {
     "line number": [
      469,
      469,
      471,
      473,
      475
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      470,
      472,
      474
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_simple_item": {
  "data": {
   "lineno": 485
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      573
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      563
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.__eq__": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      565
     ]
    },
    "super": {
     "line number": [
      565
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.__lt__": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      568
     ]
    },
    "super": {
     "line number": [
      568
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all": {
  "data": {
   "lineno": 570,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      571
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestApproxEqual": {
  "data": {
   "lineno": 577,
   "symbols_in_volume": {
    "object": {
     "line number": [
      577
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestApproxEqual.setup": {
  "data": {
   "lineno": 579,
   "symbols_in_volume": {
    "numpy.testing.assert_approx_equal": {
     "line number": [
      580
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestApproxEqual.test_nan_array": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      606,
      607,
      608
     ]
    },
    "numpy.array": {
     "line number": [
      602,
      603,
      604
     ]
    },
    "numpy.inf": {
     "line number": [
      604
     ]
    },
    "numpy.nan": {
     "line number": [
      602
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      606,
      607,
      608
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestApproxEqual.test_nan_items": {
  "data": {
   "lineno": 610,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      615,
      616,
      617
     ]
    },
    "numpy.array": {
     "line number": [
      611,
      612,
      613
     ]
    },
    "numpy.inf": {
     "line number": [
      613
     ]
    },
    "numpy.nan": {
     "line number": [
      611
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      615,
      616,
      617
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestApproxEqual.test_simple_arrays": {
  "data": {
   "lineno": 582,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      588
     ]
    },
    "numpy.array": {
     "line number": [
      583,
      584
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      588
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestApproxEqual.test_simple_items": {
  "data": {
   "lineno": 591,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      598
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      598
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "numpy.testing.tests.test_utils._GenericTest": {
     "line number": [
      348
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual.setup": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": {
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      351
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_closeness": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      362,
      367
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      362,
      367
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_inf": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      395,
      398
     ]
    },
    "numpy.array": {
     "line number": [
      392
     ]
    },
    "numpy.inf": {
     "line number": [
      394,
      397
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      395,
      398
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_nan": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      384,
      386,
      388
     ]
    },
    "numpy.array": {
     "line number": [
      380,
      381,
      382
     ]
    },
    "numpy.inf": {
     "line number": [
      382
     ]
    },
    "numpy.nan": {
     "line number": [
      380
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      384,
      386,
      388
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_simple": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      376
     ]
    },
    "numpy.array": {
     "line number": [
      371,
      372
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      376
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      402,
      411,
      415,
      419,
      423
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      410,
      418,
      422
     ]
    },
    "numpy.ma.masked": {
     "line number": [
      414
     ]
    },
    "numpy.ma.masked_array": {
     "line number": [
      403
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      442
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      432
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.__eq__": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      434
     ]
    },
    "super": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.__lt__": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      437
     ]
    },
    "super": {
     "line number": [
      437
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      440
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp": {
  "data": {
   "lineno": 875,
   "symbols_in_volume": {
    "object": {
     "line number": [
      875
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex128_fail": {
  "data": {
   "lineno": 994,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      1003,
      1005,
      1010,
      1015,
      1017,
      1020
     ]
    },
    "numpy.finfo": {
     "line number": [
      1001,
      1013
     ]
    },
    "numpy.float64": {
     "line number": [
      996
     ]
    },
    "numpy.linspace": {
     "line number": [
      996
     ]
    },
    "numpy.r_": {
     "line number": [
      998
     ]
    },
    "numpy.testing.assert_array_almost_equal_nulp": {
     "line number": [
      1003,
      1005,
      1010,
      1015,
      1017,
      1020
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1003,
      1005,
      1010,
      1015,
      1017,
      1020
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex128_pass": {
  "data": {
   "lineno": 971,
   "symbols_in_volume": {
    "numpy.finfo": {
     "line number": [
      978,
      987
     ]
    },
    "numpy.float64": {
     "line number": [
      973
     ]
    },
    "numpy.linspace": {
     "line number": [
      973
     ]
    },
    "numpy.r_": {
     "line number": [
      975
     ]
    },
    "numpy.testing.assert_array_almost_equal_nulp": {
     "line number": [
      980,
      981,
      985,
      989,
      990,
      992
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex64_fail": {
  "data": {
   "lineno": 1044,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      1053,
      1055,
      1058,
      1063,
      1065,
      1068
     ]
    },
    "numpy.finfo": {
     "line number": [
      1051,
      1061
     ]
    },
    "numpy.float32": {
     "line number": [
      1046
     ]
    },
    "numpy.linspace": {
     "line number": [
      1046
     ]
    },
    "numpy.r_": {
     "line number": [
      1048
     ]
    },
    "numpy.testing.assert_array_almost_equal_nulp": {
     "line number": [
      1053,
      1055,
      1058,
      1063,
      1065,
      1068
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1053,
      1055,
      1058,
      1063,
      1065,
      1068
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex64_pass": {
  "data": {
   "lineno": 1023,
   "symbols_in_volume": {
    "numpy.finfo": {
     "line number": [
      1030,
      1037
     ]
    },
    "numpy.float32": {
     "line number": [
      1025
     ]
    },
    "numpy.linspace": {
     "line number": [
      1025
     ]
    },
    "numpy.r_": {
     "line number": [
      1027
     ]
    },
    "numpy.testing.assert_array_almost_equal_nulp": {
     "line number": [
      1032,
      1033,
      1035,
      1039,
      1040,
      1042
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float16_fail": {
  "data": {
   "lineno": 955,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      963,
      968
     ]
    },
    "numpy.finfo": {
     "line number": [
      961,
      966
     ]
    },
    "numpy.float16": {
     "line number": [
      957
     ]
    },
    "numpy.linspace": {
     "line number": [
      957
     ]
    },
    "numpy.r_": {
     "line number": [
      959
     ]
    },
    "numpy.testing.assert_array_almost_equal_nulp": {
     "line number": [
      963,
      968
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      963,
      968
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float16_pass": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": {
    "numpy.finfo": {
     "line number": [
      947,
      951
     ]
    },
    "numpy.float16": {
     "line number": [
      943
     ]
    },
    "numpy.linspace": {
     "line number": [
      943
     ]
    },
    "numpy.r_": {
     "line number": [
      945
     ]
    },
    "numpy.testing.assert_array_almost_equal_nulp": {
     "line number": [
      949,
      953
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float32_fail": {
  "data": {
   "lineno": 925,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      933,
      938
     ]
    },
    "numpy.finfo": {
     "line number": [
      931,
      936
     ]
    },
    "numpy.float32": {
     "line number": [
      927
     ]
    },
    "numpy.linspace": {
     "line number": [
      927
     ]
    },
    "numpy.r_": {
     "line number": [
      929
     ]
    },
    "numpy.testing.assert_array_almost_equal_nulp": {
     "line number": [
      933,
      938
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      933,
      938
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float32_pass": {
  "data": {
   "lineno": 911,
   "symbols_in_volume": {
    "numpy.finfo": {
     "line number": [
      917,
      921
     ]
    },
    "numpy.float32": {
     "line number": [
      913
     ]
    },
    "numpy.linspace": {
     "line number": [
      913
     ]
    },
    "numpy.r_": {
     "line number": [
      915
     ]
    },
    "numpy.testing.assert_array_almost_equal_nulp": {
     "line number": [
      919,
      923
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float64_fail": {
  "data": {
   "lineno": 895,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      903,
      908
     ]
    },
    "numpy.finfo": {
     "line number": [
      901,
      906
     ]
    },
    "numpy.float64": {
     "line number": [
      897
     ]
    },
    "numpy.linspace": {
     "line number": [
      897
     ]
    },
    "numpy.r_": {
     "line number": [
      899
     ]
    },
    "numpy.testing.assert_array_almost_equal_nulp": {
     "line number": [
      903,
      908
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      903,
      908
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float64_pass": {
  "data": {
   "lineno": 877,
   "symbols_in_volume": {
    "numpy.finfo": {
     "line number": [
      886,
      891
     ]
    },
    "numpy.float64": {
     "line number": [
      881
     ]
    },
    "numpy.linspace": {
     "line number": [
      881
     ]
    },
    "numpy.r_": {
     "line number": [
      883
     ]
    },
    "numpy.testing.assert_array_almost_equal_nulp": {
     "line number": [
      888,
      893
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAssertLess": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": {
    "object": {
     "line number": [
      620
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestArrayAssertLess.setup": {
  "data": {
   "lineno": 622,
   "symbols_in_volume": {
    "numpy.testing.assert_array_less": {
     "line number": [
      623
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAssertLess.test_inf_compare": {
  "data": {
   "lineno": 704,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      711,
      712,
      713,
      714,
      715
     ]
    },
    "numpy.array": {
     "line number": [
      705,
      706
     ]
    },
    "numpy.inf": {
     "line number": [
      706
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      711,
      712,
      713,
      714,
      715
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAssertLess.test_inf_compare_array": {
  "data": {
   "lineno": 717,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      721,
      722,
      723,
      724,
      725
     ]
    },
    "numpy.array": {
     "line number": [
      718,
      719
     ]
    },
    "numpy.inf": {
     "line number": [
      718,
      719
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      721,
      722,
      723,
      724,
      725
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAssertLess.test_nan_noncompare": {
  "data": {
   "lineno": 677,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      682,
      683,
      684,
      685
     ]
    },
    "numpy.array": {
     "line number": [
      678,
      679,
      680
     ]
    },
    "numpy.inf": {
     "line number": [
      680
     ]
    },
    "numpy.nan": {
     "line number": [
      678
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      682,
      683,
      684,
      685
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAssertLess.test_nan_noncompare_array": {
  "data": {
   "lineno": 687,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      691,
      692,
      696,
      697,
      702
     ]
    },
    "numpy.array": {
     "line number": [
      688,
      689,
      694,
      699
     ]
    },
    "numpy.nan": {
     "line number": [
      689,
      694,
      699
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      691,
      692,
      696,
      697,
      702
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAssertLess.test_rank2": {
  "data": {
   "lineno": 637,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      642,
      646,
      647
     ]
    },
    "numpy.array": {
     "line number": [
      638,
      639,
      644
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      642,
      646,
      647
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAssertLess.test_rank3": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      654,
      658,
      659
     ]
    },
    "numpy.ones": {
     "line number": [
      650,
      651
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      654,
      658,
      659
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAssertLess.test_simple_arrays": {
  "data": {
   "lineno": 625,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      630,
      634,
      635
     ]
    },
    "numpy.array": {
     "line number": [
      626,
      627,
      632
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      630,
      634,
      635
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayAssertLess.test_simple_items": {
  "data": {
   "lineno": 661,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      666,
      671,
      675
     ]
    },
    "numpy.array": {
     "line number": [
      668,
      673
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      666,
      671,
      675
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "numpy.testing.tests.test_utils._GenericTest": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.setup": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "numpy.testing.assert_array_equal": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "foo": {
     "line number": [
      86,
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1.foo": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "foo": {
     "line number": [
      105,
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3.foo": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "numpy.empty": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_masked_nan_inf": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      153,
      157
     ]
    },
    "numpy.inf": {
     "line number": [
      157
     ]
    },
    "numpy.ma.MaskedArray": {
     "line number": [
      152,
      156
     ]
    },
    "numpy.nan": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_nan_array": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      113,
      114,
      118
     ]
    },
    "numpy.nan": {
     "line number": [
      113,
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_recarrays": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "FutureWarning": {
     "line number": [
      146
     ]
    },
    "float": {
     "line number": [
      134,
      134,
      141,
      141
     ]
    },
    "len": {
     "line number": [
      148
     ]
    },
    "numpy.empty": {
     "line number": [
      134,
      141
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      148
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_string_arrays": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      123,
      124,
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_subclass_that_does_not_implement_npall": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      190
     ]
    },
    "numpy.all": {
     "line number": [
      191
     ]
    },
    "numpy.array": {
     "line number": [
      187,
      188
     ]
    },
    "numpy.core.overrides.ENABLE_ARRAY_FUNCTION": {
     "line number": [
      189
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_subclass_that_does_not_implement_npall.MyArray": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_subclass_that_does_not_implement_npall.MyArray.__array_function__": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": {
    "NotImplemented": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_subclass_that_overrides_eq": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      175
     ]
    },
    "numpy.array": {
     "line number": [
      173,
      174
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      175,
      176,
      177
     ]
    },
    "type": {
     "line number": [
      175
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_subclass_that_overrides_eq.MyArray": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "numpy.ndarray": {
     "line number": [
      166
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_subclass_that_overrides_eq.MyArray.__eq__": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      168
     ]
    },
    "numpy.equal": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestArrayEqual.test_subclass_that_overrides_eq.MyArray.__ne__": {
  "data": {
   "lineno": 170
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertAllclose": {
  "data": {
   "lineno": 815,
   "symbols_in_volume": {
    "object": {
     "line number": [
      815
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestAssertAllclose.test_equal_nan": {
  "data": {
   "lineno": 852,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      853,
      854
     ]
    },
    "numpy.nan": {
     "line number": [
      853,
      854
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      856
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertAllclose.test_equal_nan_default": {
  "data": {
   "lineno": 863,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      867,
      868
     ]
    },
    "numpy.nan": {
     "line number": [
      867,
      868
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      872
     ]
    },
    "numpy.testing.assert_array_almost_equal": {
     "line number": [
      870
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      869
     ]
    },
    "numpy.testing.assert_array_less": {
     "line number": [
      871
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertAllclose.test_min_int": {
  "data": {
   "lineno": 837,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      838
     ]
    },
    "numpy.iinfo": {
     "line number": [
      838
     ]
    },
    "numpy.int_": {
     "line number": [
      838,
      838
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      840
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertAllclose.test_not_equal_nan": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      861
     ]
    },
    "numpy.array": {
     "line number": [
      859,
      860
     ]
    },
    "numpy.nan": {
     "line number": [
      859,
      860
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      861
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      861
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertAllclose.test_report_fail_percentage": {
  "data": {
   "lineno": 842,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      846
     ]
    },
    "numpy.array": {
     "line number": [
      843,
      844
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      849
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      847
     ]
    },
    "numpy.testing.tests.test_utils.pytest": {
     "line number": [
      846
     ]
    },
    "str": {
     "line number": [
      848
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertAllclose.test_simple": {
  "data": {
   "lineno": 817,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      822,
      828,
      832,
      835
     ]
    },
    "numpy.array": {
     "line number": [
      824,
      825
     ]
    },
    "numpy.testing.assert_allclose": {
     "line number": [
      821,
      822,
      827,
      828,
      831,
      832,
      834,
      835
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      822,
      828,
      832,
      835
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertNoGcCycles": {
  "data": {
   "lineno": 1474,
   "symbols_in_volume": {
    "numpy.testing.HAS_REFCOUNT": {
     "line number": [
      1474
     ]
    },
    "numpy.testing.tests.test_utils.pytest": {
     "line number": [
      1474
     ]
    },
    "object": {
     "line number": [
      1475
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_asserts": {
  "data": {
   "lineno": 1488,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      1495,
      1499
     ]
    },
    "make_cycle": {
     "line number": [
      1497,
      1500
     ]
    },
    "numpy.testing.assert_no_gc_cycles": {
     "line number": [
      1496,
      1500
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1495,
      1499
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_asserts.make_cycle": {
  "data": {
   "lineno": 1489
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails": {
  "data": {
   "lineno": 1502,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      1533
     ]
    },
    "ReferenceCycleInDel": {
     "line number": [
      1528
     ]
    },
    "ReferenceCycleInDel.make_cycle": {
     "line number": [
      1542
     ]
    },
    "RuntimeError": {
     "line number": [
      1530
     ]
    },
    "numpy.testing.assert_no_gc_cycles": {
     "line number": [
      1532
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1530
     ]
    },
    "numpy.testing.tests.test_utils.pytest": {
     "line number": [
      1537
     ]
    },
    "numpy.testing.tests.test_utils.weakref": {
     "line number": [
      1528
     ]
    },
    "w": {
     "line number": [
      1536
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel": {
  "data": {
   "lineno": 1508,
   "symbols_in_volume": {
    "make_cycle": {
     "line number": [
      1513
     ]
    },
    "object": {
     "line number": [
      1508
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__del__": {
  "data": {
   "lineno": 1518,
   "symbols_in_volume": {
    "ReferenceCycleInDel": {
     "line number": [
      1525
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__": {
  "data": {
   "lineno": 1515
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_passes": {
  "data": {
   "lineno": 1477,
   "symbols_in_volume": {
    "no_cycle": {
     "line number": [
      1484,
      1486
     ]
    },
    "numpy.testing.assert_no_gc_cycles": {
     "line number": [
      1483,
      1486
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_passes.no_cycle": {
  "data": {
   "lineno": 1478
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestBuildErrorMessage": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "object": {
     "line number": [
      197
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_custom_names": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      220,
      221
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      228
     ]
    },
    "numpy.testing.build_err_msg": {
     "line number": [
      224
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_custom_precision": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      231,
      232
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      239
     ]
    },
    "numpy.testing.build_err_msg": {
     "line number": [
      235
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_defaults": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      200,
      201
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      208
     ]
    },
    "numpy.testing.build_err_msg": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_no_verbose": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      211,
      212
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      217
     ]
    },
    "numpy.testing.build_err_msg": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestEqual": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "numpy.testing.tests.test_utils.TestArrayEqual": {
     "line number": [
      242
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestEqual.setup": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestEqual.test_complex": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      324,
      324,
      325,
      325
     ]
    },
    "numpy.array": {
     "line number": [
      324,
      325
     ]
    },
    "numpy.nan": {
     "line number": [
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestEqual.test_complex_item": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "complex": {
     "line number": [
      314,
      314,
      315,
      315,
      316,
      316,
      317,
      317,
      318,
      318
     ]
    },
    "numpy.inf": {
     "line number": [
      318
     ]
    },
    "numpy.nan": {
     "line number": [
      315,
      315,
      316,
      317,
      317,
      318,
      318
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestEqual.test_datetime": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": {
    "numpy.datetime64": {
     "line number": [
      260,
      261,
      264,
      265,
      270,
      271,
      274,
      275
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestEqual.test_error_message": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      330,
      344
     ]
    },
    "numpy.array": {
     "line number": [
      331,
      331
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      343,
      345
     ]
    },
    "numpy.testing.tests.test_utils.pytest": {
     "line number": [
      330
     ]
    },
    "numpy.testing.tests.test_utils.textwrap": {
     "line number": [
      334
     ]
    },
    "str": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestEqual.test_inf_items": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": {
    "numpy.inf": {
     "line number": [
      254,
      254,
      255,
      255,
      256,
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestEqual.test_nan_items": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "numpy.nan": {
     "line number": [
      248,
      248,
      249,
      249,
      250,
      250,
      251
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestEqual.test_nat_items": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "numpy.datetime64": {
     "line number": [
      280,
      281,
      282,
      304,
      305
     ]
    },
    "numpy.testing.tests.test_utils.itertools": {
     "line number": [
      290,
      295,
      300
     ]
    },
    "numpy.timedelta64": {
     "line number": [
      284,
      285,
      286,
      306,
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestEqual.test_negative_zero": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": {
    "numpy.NZERO": {
     "line number": [
      321
     ]
    },
    "numpy.PZERO": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestEqual.test_non_numeric": {
  "data": {
   "lineno": 309
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestRaises": {
  "data": {
   "lineno": 729,
   "symbols_in_volume": {
    "numpy.testing.tests.test_utils.pytest": {
     "line number": [
      729
     ]
    },
    "object": {
     "line number": [
      730
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestRaises.does_not_raise_exception": {
  "data": {
   "lineno": 741
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestRaises.raises_exception": {
  "data": {
   "lineno": 738
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestRaises.setup": {
  "data": {
   "lineno": 732
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestRaises.setup.MyException": {
  "data": {
   "lineno": 733,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      733
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestRaises.test_catch_no_raise": {
  "data": {
   "lineno": 755,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      758,
      761
     ]
    },
    "numpy.testing.raises": {
     "line number": [
      757
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestRaises.test_correct_catch": {
  "data": {
   "lineno": 744,
   "symbols_in_volume": {
    "numpy.testing.raises": {
     "line number": [
      745
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestRaises.test_wrong_exception": {
  "data": {
   "lineno": 747,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      753
     ]
    },
    "RuntimeError": {
     "line number": [
      749,
      750
     ]
    },
    "numpy.testing.raises": {
     "line number": [
      749
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestStringEqual": {
  "data": {
   "lineno": 1128,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1128
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestStringEqual.test_regex": {
  "data": {
   "lineno": 1141,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      1144
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1144
     ]
    },
    "numpy.testing.assert_string_equal": {
     "line number": [
      1142,
      1145
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestStringEqual.test_simple": {
  "data": {
   "lineno": 1129,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      1133,
      1138
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1136
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1138
     ]
    },
    "numpy.testing.assert_string_equal": {
     "line number": [
      1130,
      1131,
      1134,
      1139
     ]
    },
    "numpy.testing.tests.test_utils.pytest": {
     "line number": [
      1133
     ]
    },
    "str": {
     "line number": [
      1135
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestULP": {
  "data": {
   "lineno": 1072,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1072
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestULP.test_double": {
  "data": {
   "lineno": 1085,
   "symbols_in_volume": {
    "numpy.finfo": {
     "line number": [
      1089
     ]
    },
    "numpy.float64": {
     "line number": [
      1087,
      1088,
      1089
     ]
    },
    "numpy.ones": {
     "line number": [
      1087
     ]
    },
    "numpy.random.randn": {
     "line number": [
      1088
     ]
    },
    "numpy.testing.assert_array_max_ulp": {
     "line number": [
      1090
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestULP.test_equal": {
  "data": {
   "lineno": 1074,
   "symbols_in_volume": {
    "numpy.random.randn": {
     "line number": [
      1075
     ]
    },
    "numpy.testing.assert_array_max_ulp": {
     "line number": [
      1076
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestULP.test_inf": {
  "data": {
   "lineno": 1092,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      1094,
      1095
     ]
    },
    "numpy.finfo": {
     "line number": [
      1095
     ]
    },
    "numpy.float32": {
     "line number": [
      1093
     ]
    },
    "numpy.float64": {
     "line number": [
      1093
     ]
    },
    "numpy.inf": {
     "line number": [
      1094
     ]
    },
    "numpy.testing.assert_array_max_ulp": {
     "line number": [
      1096
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestULP.test_nan": {
  "data": {
   "lineno": 1098,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      1111,
      1114,
      1117,
      1120,
      1123
     ]
    },
    "numpy.NZERO": {
     "line number": [
      1110
     ]
    },
    "numpy.PZERO": {
     "line number": [
      1109
     ]
    },
    "numpy.array": {
     "line number": [
      1105,
      1106,
      1107,
      1108,
      1109,
      1110
     ]
    },
    "numpy.finfo": {
     "line number": [
      1107,
      1108
     ]
    },
    "numpy.float32": {
     "line number": [
      1100,
      1101
     ]
    },
    "numpy.float64": {
     "line number": [
      1100
     ]
    },
    "numpy.inf": {
     "line number": [
      1105
     ]
    },
    "numpy.nan": {
     "line number": [
      1106
     ]
    },
    "numpy.testing.assert_array_max_ulp": {
     "line number": [
      1112,
      1115,
      1118,
      1121,
      1124
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      1111,
      1114,
      1117,
      1120,
      1123
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestULP.test_single": {
  "data": {
   "lineno": 1078,
   "symbols_in_volume": {
    "numpy.finfo": {
     "line number": [
      1082
     ]
    },
    "numpy.float32": {
     "line number": [
      1080,
      1081,
      1082
     ]
    },
    "numpy.ones": {
     "line number": [
      1080
     ]
    },
    "numpy.random.randn": {
     "line number": [
      1081
     ]
    },
    "numpy.testing.assert_array_max_ulp": {
     "line number": [
      1083
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestWarns": {
  "data": {
   "lineno": 764,
   "symbols_in_volume": {
    "object": {
     "line number": [
      764
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.TestWarns.test_context_manager": {
  "data": {
   "lineno": 782,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      793
     ]
    },
    "UserWarning": {
     "line number": [
      785
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      794
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      793
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      785
     ]
    },
    "numpy.testing.tests.test_utils.sys": {
     "line number": [
      784,
      787
     ]
    },
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      786
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestWarns.test_context_manager.no_warnings": {
  "data": {
   "lineno": 789,
   "symbols_in_volume": {
    "numpy.testing.assert_no_warnings": {
     "line number": [
      790
     ]
    },
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      791
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestWarns.test_warn": {
  "data": {
   "lineno": 766,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      775
     ]
    },
    "UserWarning": {
     "line number": [
      772
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      772,
      776,
      779
     ]
    },
    "numpy.testing.assert_no_warnings": {
     "line number": [
      775,
      776
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      775
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      772
     ]
    },
    "numpy.testing.tests.test_utils.sys": {
     "line number": [
      771,
      773
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestWarns.test_warn.f": {
  "data": {
   "lineno": 767,
   "symbols_in_volume": {
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      768
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning": {
  "data": {
   "lineno": 797,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      812
     ]
    },
    "DeprecationWarning": {
     "line number": [
      803,
      808
     ]
    },
    "UserWarning": {
     "line number": [
      806
     ]
    },
    "numpy.testing.assert_warns": {
     "line number": [
      806
     ]
    },
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      802,
      803
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f": {
  "data": {
   "lineno": 798,
   "symbols_in_volume": {
    "DeprecationWarning": {
     "line number": [
      799
     ]
    },
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      799
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils._GenericTest": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "object": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils._GenericTest._test_equal": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils._GenericTest._test_not_equal": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      28
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils._GenericTest.test_array_diffshape": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      54,
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils._GenericTest.test_array_likes": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils._GenericTest.test_array_rank1_eq": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      33,
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils._GenericTest.test_array_rank1_noteq": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      40,
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils._GenericTest.test_array_rank2_eq": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      47,
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils._GenericTest.test_objarray": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      61
     ]
    },
    "object": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils._get_fresh_mod": {
  "data": {
   "lineno": 1210,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      1215
     ]
    },
    "__name__": {
     "line number": [
      1212
     ]
    },
    "numpy.testing.tests.test_utils.sys": {
     "line number": [
      1212
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_approx_equal": {
  "data": {
   "shadows": "numpy.testing.assert_approx_equal"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_array_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_array_almost_equal_nulp": {
  "data": {
   "shadows": "numpy.testing.assert_array_almost_equal_nulp"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_array_less": {
  "data": {
   "shadows": "numpy.testing.assert_array_less"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_array_max_ulp": {
  "data": {
   "shadows": "numpy.testing.assert_array_max_ulp"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_no_gc_cycles": {
  "data": {
   "shadows": "numpy.testing.assert_no_gc_cycles"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_no_warnings": {
  "data": {
   "shadows": "numpy.testing.assert_no_warnings"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_string_equal": {
  "data": {
   "shadows": "numpy.testing.assert_string_equal"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.assert_warn_len_equal": {
  "data": {
   "lineno": 1148,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      1151
     ]
    },
    "len": {
     "line number": [
      1161
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1180
     ]
    },
    "numpy.testing.tests.test_utils.sys": {
     "line number": [
      1174,
      1177
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.assert_warns": {
  "data": {
   "shadows": "numpy.testing.assert_warns"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.build_err_msg": {
  "data": {
   "shadows": "numpy.testing.build_err_msg"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.clear_and_catch_warnings": {
  "data": {
   "shadows": "numpy.testing.clear_and_catch_warnings"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.my_cacw": {
  "data": {
   "lineno": 1460,
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      1462
     ]
    },
    "numpy.testing.clear_and_catch_warnings": {
     "line number": [
      1460
     ]
    },
    "numpy.testing.tests.test_utils.sys": {
     "line number": [
      1462
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.raises": {
  "data": {
   "shadows": "numpy.testing.raises"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.suppress_warnings": {
  "data": {
   "shadows": "numpy.testing.suppress_warnings"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.tempdir": {
  "data": {
   "shadows": "numpy.testing.tempdir"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.temppath": {
  "data": {
   "shadows": "numpy.testing.temppath"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.test_clear_and_catch_warnings": {
  "data": {
   "lineno": 1222,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      1225
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1225,
      1229
     ]
    },
    "numpy.testing.clear_and_catch_warnings": {
     "line number": [
      1226,
      1232,
      1237,
      1244
     ]
    },
    "numpy.testing.tests.test_utils._get_fresh_mod": {
     "line number": [
      1224
     ]
    },
    "numpy.testing.tests.test_utils.assert_warn_len_equal": {
     "line number": [
      1235,
      1240,
      1247
     ]
    },
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      1227,
      1228,
      1233,
      1234,
      1238,
      1239,
      1245,
      1246
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_clear_and_catch_warnings_inherit": {
  "data": {
   "lineno": 1465,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      1471
     ]
    },
    "numpy.testing.tests.test_utils._get_fresh_mod": {
     "line number": [
      1467
     ]
    },
    "numpy.testing.tests.test_utils.my_cacw": {
     "line number": [
      1468
     ]
    },
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      1469,
      1470
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_suppress_warnings_decorate_no_record": {
  "data": {
   "lineno": 1325,
   "symbols_in_volume": {
    "RuntimeWarning": {
     "line number": [
      1336
     ]
    },
    "UserWarning": {
     "line number": [
      1327,
      1335
     ]
    },
    "len": {
     "line number": [
      1337
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1337
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1326
     ]
    },
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      1333,
      1334
     ]
    },
    "warn": {
     "line number": [
      1335,
      1336
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_suppress_warnings_decorate_no_record.warn": {
  "data": {
   "lineno": 1329,
   "symbols_in_volume": {
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      1331
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_suppress_warnings_forwarding": {
  "data": {
   "lineno": 1380,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1395,
      1404,
      1414,
      1424
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1395,
      1404,
      1414,
      1424
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1389,
      1391,
      1397,
      1399,
      1406,
      1408,
      1416,
      1418
     ]
    },
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      1393,
      1401,
      1402,
      1410,
      1411,
      1420,
      1421
     ]
    },
    "range": {
     "line number": [
      1392,
      1400,
      1409,
      1419
     ]
    },
    "warn_other_module": {
     "line number": [
      1412,
      1422
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_suppress_warnings_forwarding.warn_other_module": {
  "data": {
   "lineno": 1381,
   "symbols_in_volume": {
    "numpy.apply_along_axis": {
     "line number": [
      1387
     ]
    },
    "warn": {
     "line number": [
      1387
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_suppress_warnings_forwarding.warn_other_module.warn": {
  "data": {
   "lineno": 1384,
   "symbols_in_volume": {
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      1385
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_suppress_warnings_module": {
  "data": {
   "lineno": 1250,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      1266
     ]
    },
    "getattr": {
     "line number": [
      1253
     ]
    },
    "len": {
     "line number": [
      1274
     ]
    },
    "numpy.lib.shape_base": {
     "line number": [
      1269
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1253,
      1274,
      1275
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1265,
      1277,
      1291
     ]
    },
    "numpy.testing.tests.test_utils._get_fresh_mod": {
     "line number": [
      1252
     ]
    },
    "numpy.testing.tests.test_utils.assert_warn_len_equal": {
     "line number": [
      1264,
      1276,
      1282,
      1287,
      1294
     ]
    },
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      1270,
      1281,
      1286,
      1292,
      1293
     ]
    },
    "warn_other_module": {
     "line number": [
      1271
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_suppress_warnings_module.warn_other_module": {
  "data": {
   "lineno": 1255,
   "symbols_in_volume": {
    "numpy.apply_along_axis": {
     "line number": [
      1261
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_suppress_warnings_module.warn_other_module.warn": {
  "data": {
   "lineno": 1258,
   "symbols_in_volume": {
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      1259
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_suppress_warnings_record": {
  "data": {
   "lineno": 1340,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1351,
      1352,
      1353,
      1364,
      1365,
      1366,
      1376,
      1377
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1351,
      1352,
      1353,
      1354,
      1364,
      1365,
      1366,
      1367,
      1376,
      1377
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1341,
      1370,
      1372
     ]
    },
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      1347,
      1348,
      1349,
      1360,
      1361,
      1362,
      1374,
      1375
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_suppress_warnings_type": {
  "data": {
   "lineno": 1296,
   "symbols_in_volume": {
    "UserWarning": {
     "line number": [
      1303,
      1307
     ]
    },
    "getattr": {
     "line number": [
      1299
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      1299
     ]
    },
    "numpy.testing.suppress_warnings": {
     "line number": [
      1302,
      1306,
      1319
     ]
    },
    "numpy.testing.tests.test_utils._get_fresh_mod": {
     "line number": [
      1298
     ]
    },
    "numpy.testing.tests.test_utils.assert_warn_len_equal": {
     "line number": [
      1305,
      1310,
      1315,
      1322
     ]
    },
    "numpy.testing.tests.test_utils.warnings": {
     "line number": [
      1304,
      1309,
      1314,
      1320,
      1321
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_tempdir": {
  "data": {
   "lineno": 1427,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1437,
      1438
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1432,
      1440,
      1441
     ]
    },
    "numpy.testing.tempdir": {
     "line number": [
      1428,
      1436
     ]
    },
    "numpy.testing.tests.test_utils.os": {
     "line number": [
      1429,
      1432,
      1441
     ]
    },
    "open": {
     "line number": [
      1430
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_temppath": {
  "data": {
   "lineno": 1444,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      1453,
      1454
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      1448,
      1456,
      1457
     ]
    },
    "numpy.testing.temppath": {
     "line number": [
      1445,
      1452
     ]
    },
    "numpy.testing.tests.test_utils.os": {
     "line number": [
      1448,
      1457
     ]
    },
    "open": {
     "line number": [
      1446
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_warn_len_equal_call_scenarios": {
  "data": {
   "lineno": 1182,
   "symbols_in_volume": {
    "mod": {
     "line number": [
      1193,
      1205
     ]
    },
    "numpy.testing.tests.test_utils.assert_warn_len_equal": {
     "line number": [
      1195,
      1206
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.test_warn_len_equal_call_scenarios.mod": {
  "data": {
   "lineno": 1200,
   "symbols_in_volume": {
    "object": {
     "line number": [
      1200
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.testing.tests.test_utils.test_warn_len_equal_call_scenarios.mod.__init__": {
  "data": {
   "lineno": 1201
  },
  "type": "function"
 },
 "numpy.testing.tests.test_utils.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.testing.tests.test_utils.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "numpy.testing.utils": {
  "data": {
   "symbols_in_volume": {
    "ImportWarning": {
     "line number": [
      13
     ]
    },
    "numpy.testing.utils.warnings": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.testing.utils.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.testing.utils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.testing.utils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.testing.utils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.testing.utils.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "numpy.tests": {
  "data": {},
  "type": "module"
 },
 "numpy.tests.test_ctypeslib": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      14
     ]
    },
    "OSError": {
     "line number": [
      22,
      26
     ]
    },
    "hasattr": {
     "line number": [
      19
     ]
    },
    "numpy.core._multiarray_tests.__file__": {
     "line number": [
      25,
      31
     ]
    },
    "numpy.core._multiarray_umath.__file__": {
     "line number": [
      21,
      29
     ]
    },
    "numpy.ctypeslib.load_library": {
     "line number": [
      21,
      25,
      29,
      31
     ]
    },
    "numpy.tests.test_ctypeslib.cdll": {
     "line number": [
      28
     ]
    },
    "numpy.tests.test_ctypeslib.sys": {
     "line number": [
      19
     ]
    },
    "numpy.tests.test_ctypeslib.test_cdll": {
     "line number": [
      30,
      33
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.tests.test_ctypeslib.POINTER": {
  "data": {
   "shadows": "ctypes.POINTER"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.Structure": {
  "data": {
   "shadows": "ctypes.Structure"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.TestAsArray": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      187
     ]
    },
    "numpy.tests.test_ctypeslib.pytest": {
     "line number": [
      187
     ]
    },
    "object": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.tests.test_ctypeslib.TestAsArray.test_array": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "ctypes.c_int": {
     "line number": [
      193
     ]
    },
    "numpy.array": {
     "line number": [
      196,
      199
     ]
    },
    "numpy.ctypeslib.as_array": {
     "line number": [
      194,
      197
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      196,
      199
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      195,
      198
     ]
    },
    "pair_t": {
     "line number": [
      194,
      197,
      197,
      197,
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsArray.test_pointer": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      215
     ]
    },
    "ctypes.POINTER": {
     "line number": [
      204
     ]
    },
    "ctypes.c_int": {
     "line number": [
      204,
      204
     ]
    },
    "ctypes.cast": {
     "line number": [
      204
     ]
    },
    "numpy.arange": {
     "line number": [
      208,
      212
     ]
    },
    "numpy.ctypeslib.as_array": {
     "line number": [
      206,
      210,
      215
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      208,
      212
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      207,
      211
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      215
     ]
    },
    "range": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsArray.test_reference_cycles": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      252
     ]
    },
    "numpy.ctypeslib.as_array": {
     "line number": [
      261
     ]
    },
    "numpy.ctypeslib.as_ctypes": {
     "line number": [
      255
     ]
    },
    "numpy.short": {
     "line number": [
      252
     ]
    },
    "numpy.testing.assert_no_gc_cycles": {
     "line number": [
      257
     ]
    },
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      259,
      259,
      259
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsArray.test_segmentation_fault": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "arr_ref": {
     "line number": [
      272
     ]
    },
    "numpy.ctypeslib.as_ctypes": {
     "line number": [
      267
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      272
     ]
    },
    "numpy.tests.test_ctypeslib.weakref": {
     "line number": [
      268
     ]
    },
    "numpy.zeros": {
     "line number": [
      266
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsArray.test_struct_array_pointer": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "Struct": {
     "line number": [
      226,
      226,
      226,
      227,
      227,
      227
     ]
    },
    "Struct3": {
     "line number": [
      226,
      227
     ]
    },
    "check": {
     "line number": [
      240,
      241,
      242,
      243
     ]
    },
    "ctypes.pointer": {
     "line number": [
      241,
      242,
      243
     ]
    },
    "numpy.array": {
     "line number": [
      230
     ]
    },
    "numpy.ctypeslib.as_array": {
     "line number": [
      240,
      241,
      242,
      243
     ]
    },
    "numpy.int16": {
     "line number": [
      233
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsArray.test_struct_array_pointer.Struct": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "ctypes.Structure": {
     "line number": [
      220
     ]
    },
    "ctypes.c_int16": {
     "line number": [
      221
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.tests.test_ctypeslib.TestAsArray.test_struct_array_pointer.check": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      236,
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsCtypesType": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      278
     ]
    },
    "numpy.tests.test_ctypeslib.pytest": {
     "line number": [
      278
     ]
    },
    "object": {
     "line number": [
      280
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.tests.test_ctypeslib.TestAsCtypesType.test_overlapping": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      367
     ]
    },
    "dict": {
     "line number": [
      362
     ]
    },
    "numpy.ctypeslib.as_ctypes_type": {
     "line number": [
      367
     ]
    },
    "numpy.dtype": {
     "line number": [
      362
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      367
     ]
    },
    "numpy.uint32": {
     "line number": [
      365,
      365
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsCtypesType.test_padded_union": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      345
     ]
    },
    "issubclass": {
     "line number": [
      353
     ]
    },
    "numpy.ctypeslib.as_ctypes_type": {
     "line number": [
      352
     ]
    },
    "numpy.dtype": {
     "line number": [
      345
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      353
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      354,
      355
     ]
    },
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      353,
      354,
      356,
      357,
      358
     ]
    },
    "numpy.uint16": {
     "line number": [
      348
     ]
    },
    "numpy.uint32": {
     "line number": [
      348
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsCtypesType.test_scalar": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "numpy.ctypeslib.as_ctypes_type": {
     "line number": [
      284,
      288,
      292
     ]
    },
    "numpy.dtype": {
     "line number": [
      283,
      287,
      291
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      285,
      289,
      293
     ]
    },
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      285,
      289,
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsCtypesType.test_structure": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      307
     ]
    },
    "numpy.ctypeslib.as_ctypes_type": {
     "line number": [
      306
     ]
    },
    "numpy.dtype": {
     "line number": [
      301
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      307
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      308,
      309
     ]
    },
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      307,
      308,
      310,
      311
     ]
    },
    "numpy.uint16": {
     "line number": [
      302
     ]
    },
    "numpy.uint32": {
     "line number": [
      303
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsCtypesType.test_structure_aligned": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "issubclass": {
     "line number": [
      321
     ]
    },
    "numpy.ctypeslib.as_ctypes_type": {
     "line number": [
      320
     ]
    },
    "numpy.dtype": {
     "line number": [
      315
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      321
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      322,
      323
     ]
    },
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      321,
      322,
      324,
      325,
      326
     ]
    },
    "numpy.uint16": {
     "line number": [
      316
     ]
    },
    "numpy.uint32": {
     "line number": [
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsCtypesType.test_subarray": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": {
    "numpy.ctypeslib.as_ctypes_type": {
     "line number": [
      297
     ]
    },
    "numpy.dtype": {
     "line number": [
      296
     ]
    },
    "numpy.int32": {
     "line number": [
      296
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      298
     ]
    },
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestAsCtypesType.test_union": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      330
     ]
    },
    "issubclass": {
     "line number": [
      337
     ]
    },
    "numpy.ctypeslib.as_ctypes_type": {
     "line number": [
      336
     ]
    },
    "numpy.dtype": {
     "line number": [
      330
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      337
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      338,
      339
     ]
    },
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      337,
      338,
      340,
      341
     ]
    },
    "numpy.uint16": {
     "line number": [
      333
     ]
    },
    "numpy.uint32": {
     "line number": [
      333
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestLoadLibrary": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      36
     ]
    },
    "numpy.tests.test_ctypeslib.pytest": {
     "line number": [
      36,
      38
     ]
    },
    "numpy.tests.test_ctypeslib.sys": {
     "line number": [
      38
     ]
    },
    "object": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.tests.test_ctypeslib.TestLoadLibrary.test_basic": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      45
     ]
    },
    "numpy.core._multiarray_umath.__file__": {
     "line number": [
      44
     ]
    },
    "numpy.ctypeslib.load_library": {
     "line number": [
      44
     ]
    },
    "print": {
     "line number": [
      48
     ]
    },
    "str": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestLoadLibrary.test_basic2": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      58,
      60
     ]
    },
    "numpy.core._multiarray_umath.__file__": {
     "line number": [
      57
     ]
    },
    "numpy.ctypeslib.load_library": {
     "line number": [
      57
     ]
    },
    "numpy.distutils.misc_util.get_shared_lib_extension": {
     "line number": [
      55
     ]
    },
    "print": {
     "line number": [
      59,
      63
     ]
    },
    "str": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestNdpointer": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "object": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.tests.test_ctypeslib.TestNdpointer.test_cache": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "numpy.ctypeslib.ndpointer": {
     "line number": [
      122,
      122,
      125,
      125,
      128,
      128,
      129,
      129
     ]
    },
    "numpy.float64": {
     "line number": [
      122,
      122
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      122,
      125,
      128,
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestNdpointer.test_dtype": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      77,
      90
     ]
    },
    "numpy.array": {
     "line number": [
      70,
      73,
      76,
      78
     ]
    },
    "numpy.ctypeslib.ndpointer": {
     "line number": [
      69,
      72,
      75,
      83,
      86
     ]
    },
    "numpy.dtype": {
     "line number": [
      74,
      82,
      85,
      88
     ]
    },
    "numpy.float64": {
     "line number": [
      80
     ]
    },
    "numpy.intc": {
     "line number": [
      68,
      80
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      70,
      73,
      84,
      87,
      92
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      77,
      90
     ]
    },
    "numpy.zeros": {
     "line number": [
      84,
      87,
      90,
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestNdpointer.test_flags": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      116,
      119
     ]
    },
    "numpy.array": {
     "line number": [
      112,
      119
     ]
    },
    "numpy.ctypeslib.ndpointer": {
     "line number": [
      113,
      115,
      117
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      114,
      118
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      116,
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestNdpointer.test_ndim": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      97,
      99
     ]
    },
    "numpy.array": {
     "line number": [
      96,
      97,
      99,
      100,
      102
     ]
    },
    "numpy.ctypeslib.ndpointer": {
     "line number": [
      95,
      98,
      101
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      96,
      100,
      102
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      97,
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestNdpointer.test_shape": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      107
     ]
    },
    "numpy.array": {
     "line number": [
      106,
      107,
      109
     ]
    },
    "numpy.ctypeslib.ndpointer": {
     "line number": [
      105,
      108
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      106,
      109
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestNdpointerCFunc": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      131
     ]
    },
    "numpy.tests.test_ctypeslib.pytest": {
     "line number": [
      131
     ]
    },
    "object": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.tests.test_ctypeslib.TestNdpointerCFunc.test_arguments": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "numpy.ctypeslib.ndpointer": {
     "line number": [
      137
     ]
    },
    "numpy.testing.assert_raises": {
     "line number": [
      141
     ]
    },
    "numpy.tests.test_ctypeslib.c_forward_pointer": {
     "line number": [
      136,
      137,
      139,
      142
     ]
    },
    "numpy.tests.test_ctypeslib.ctypes": {
     "line number": [
      136,
      142
     ]
    },
    "numpy.zeros": {
     "line number": [
      139,
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestNdpointerCFunc.test_return": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      147
     ]
    },
    "float": {
     "line number": [
      146
     ]
    },
    "numpy.ctypeslib.ndpointer": {
     "line number": [
      161
     ]
    },
    "numpy.dtype": {
     "line number": [
      147
     ]
    },
    "numpy.testing.assert_equal": {
     "line number": [
      168,
      169,
      170
     ]
    },
    "numpy.tests.test_ctypeslib.c_forward_pointer": {
     "line number": [
      163,
      164,
      167
     ]
    },
    "numpy.tests.test_ctypeslib.pytest": {
     "line number": [
      144
     ]
    },
    "numpy.zeros": {
     "line number": [
      160
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.TestNdpointerCFunc.test_vague_return_value": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      184
     ]
    },
    "numpy.ctypeslib.ndpointer": {
     "line number": [
      178
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      184
     ]
    },
    "numpy.tests.test_ctypeslib.c_forward_pointer": {
     "line number": [
      180,
      181,
      183
     ]
    },
    "numpy.zeros": {
     "line number": [
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_ctypeslib.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.as_array": {
  "data": {
   "shadows": "numpy.ctypeslib.as_array"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.assert_raises": {
  "data": {
   "shadows": "numpy.testing.assert_raises"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.c_forward_pointer": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "numpy.tests.test_ctypeslib.c_int": {
  "data": {
   "shadows": "ctypes.c_int"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.c_int16": {
  "data": {
   "shadows": "ctypes.c_int16"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.cast": {
  "data": {
   "shadows": "ctypes.cast"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.cdll": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "numpy.tests.test_ctypeslib.ctypes": {
  "data": {
   "shadows": "ctypes"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.get_shared_lib_extension": {
  "data": {
   "shadows": "numpy.distutils.misc_util.get_shared_lib_extension"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.load_library": {
  "data": {
   "shadows": "numpy.ctypeslib.load_library"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.ndpointer": {
  "data": {
   "shadows": "numpy.ctypeslib.ndpointer"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.pointer": {
  "data": {
   "shadows": "ctypes.pointer"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.tests.test_ctypeslib.test_cdll": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "numpy.tests.test_ctypeslib.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "numpy.tests.test_matlib": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      8
     ]
    },
    "numpy.tests.test_matlib.pytest": {
     "line number": [
      6
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.tests.test_matlib.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.tests.test_matlib.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.tests.test_matlib.assert_array_equal": {
  "data": {
   "shadows": "numpy.testing.assert_array_equal"
  },
  "type": "import"
 },
 "numpy.tests.test_matlib.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.tests.test_matlib.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.tests.test_matlib.numpy.matlib": {
  "data": {
   "shadows": "numpy.matlib"
  },
  "type": "import"
 },
 "numpy.tests.test_matlib.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.tests.test_matlib.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.tests.test_matlib.pytestmark": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "numpy.tests.test_matlib.test_empty": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      17
     ]
    },
    "numpy.matlib.empty": {
     "line number": [
      16
     ]
    },
    "numpy.matrix": {
     "line number": [
      17
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      17,
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_matlib.test_eye": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "int": {
     "line number": [
      39,
      46
     ]
    },
    "numpy.matlib.eye": {
     "line number": [
      39,
      46
     ]
    },
    "numpy.matrix": {
     "line number": [
      40,
      47
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      40,
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_matlib.test_identity": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "int": {
     "line number": [
      35
     ]
    },
    "numpy.matlib.identity": {
     "line number": [
      35
     ]
    },
    "numpy.matrix": {
     "line number": [
      36
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_matlib.test_ones": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.matlib.ones": {
     "line number": [
      21,
      25
     ]
    },
    "numpy.matrix": {
     "line number": [
      22,
      25
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      21,
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_matlib.test_rand": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "numpy.matlib.rand": {
     "line number": [
      54
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_matlib.test_randn": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "numpy.matlib.randn": {
     "line number": [
      59
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_matlib.test_repmat": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "numpy.arange": {
     "line number": [
      64
     ]
    },
    "numpy.array": {
     "line number": [
      66
     ]
    },
    "numpy.matlib.repmat": {
     "line number": [
      65
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_matlib.test_zeros": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "numpy.matlib.zeros": {
     "line number": [
      28,
      32
     ]
    },
    "numpy.matrix": {
     "line number": [
      29,
      32
     ]
    },
    "numpy.testing.assert_array_equal": {
     "line number": [
      28,
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_numpy_version": {
  "data": {},
  "type": "module"
 },
 "numpy.tests.test_numpy_version.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.tests.test_numpy_version.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.tests.test_numpy_version.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.tests.test_numpy_version.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.tests.test_numpy_version.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.tests.test_numpy_version.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "numpy.tests.test_numpy_version.test_valid_numpy_version": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "numpy.__version__": {
     "line number": [
      15,
      17,
      19
     ]
    },
    "numpy.testing.assert_": {
     "line number": [
      19
     ]
    },
    "numpy.tests.test_numpy_version.re": {
     "line number": [
      15,
      17
     ]
    },
    "numpy.version.release": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_public_api": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.tests.test_public_api.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.tests.test_public_api.check_dir": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "dir": {
     "line number": [
      17
     ]
    },
    "getattr": {
     "line number": [
      18
     ]
    },
    "hasattr": {
     "line number": [
      19,
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_public_api.ctypes": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "numpy.tests.test_public_api.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.tests.test_public_api.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.tests.test_public_api.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.tests.test_public_api.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.tests.test_public_api.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.tests.test_public_api.test_NPY_NO_EXPORT": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      87
     ]
    },
    "numpy.core._multiarray_tests.__file__": {
     "line number": [
      85
     ]
    },
    "numpy.tests.test_public_api.ctypes": {
     "line number": [
      85,
      82
     ]
    },
    "numpy.tests.test_public_api.pytest": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_public_api.test_numpy_fft": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "numpy.fft": {
     "line number": [
      79
     ]
    },
    "numpy.tests.test_public_api.check_dir": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_public_api.test_numpy_linalg": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "numpy.linalg": {
     "line number": [
      74
     ]
    },
    "numpy.tests.test_public_api.check_dir": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_public_api.test_numpy_namespace": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      66
     ]
    },
    "numpy": {
     "line number": [
      67
     ]
    },
    "numpy.tests.test_public_api.check_dir": {
     "line number": [
      67
     ]
    },
    "numpy.tests.test_public_api.pytest": {
     "line number": [
      25
     ]
    },
    "numpy.tests.test_public_api.sys": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_scripts": {
  "data": {
   "symbols_in_volume": {
    "numpy.__file__": {
     "line number": [
      17
     ]
    },
    "os.path.dirname": {
     "line number": [
      17
     ]
    },
    "os.path.isfile": {
     "line number": [
      17
     ]
    },
    "os.path.join": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.tests.test_scripts.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.assert_": {
  "data": {
   "shadows": "numpy.testing.assert_"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.basestring": {
  "data": {
   "shadows": "numpy.compat.py3k.basestring"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.dirname": {
  "data": {
   "shadows": "os.path.dirname"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.find_f2py_commands": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.tests.test_scripts.os": {
     "line number": [
      24,
      26
     ]
    },
    "numpy.tests.test_scripts.sys": {
     "line number": [
      21,
      22,
      32
     ]
    },
    "os.path.dirname": {
     "line number": [
      22
     ]
    },
    "str": {
     "line number": [
      33,
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_scripts.is_inplace": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "numpy.tests.test_scripts.isfile": {
  "data": {
   "shadows": "os.path.isfile"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.pathjoin": {
  "data": {
   "shadows": "os.path.join"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.tests.test_scripts.test_f2py": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      44
     ]
    },
    "numpy.tests.test_scripts.find_f2py_commands": {
     "line number": [
      40
     ]
    },
    "numpy.tests.test_scripts.is_inplace": {
     "line number": [
      38
     ]
    },
    "numpy.tests.test_scripts.pytest": {
     "line number": [
      38,
      39,
      40
     ]
    },
    "numpy.tests.test_scripts.subprocess": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_scripts.test_pep338": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "numpy.testing.assert_equal": {
     "line number": [
      49
     ]
    },
    "numpy.tests.test_scripts.subprocess": {
     "line number": [
      48
     ]
    },
    "numpy.tests.test_scripts.sys": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_warnings": {
  "data": {
   "symbols_in_volume": {
    "numpy.tests.test_warnings.sys": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.tests.test_warnings.FindFuncs": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "numpy.tests.test_warnings.ast": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.tests.test_warnings.FindFuncs.__init__": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "super": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_warnings.FindFuncs.visit_Call": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      40,
      57
     ]
    },
    "len": {
     "line number": [
      45,
      52
     ]
    },
    "numpy.tests.test_warnings.ParseCall": {
     "line number": [
      34
     ]
    },
    "numpy.tests.test_warnings.ast": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_warnings.ParseCall": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "numpy.tests.test_warnings.ast": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "numpy.tests.test_warnings.ParseCall.__init__": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "numpy.tests.test_warnings.ParseCall.visit_Attribute": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "numpy.tests.test_warnings.ast": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_warnings.ParseCall.visit_Name": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "numpy.tests.test_warnings.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "numpy.tests.test_warnings.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "numpy.tests.test_warnings.ast": {
  "data": {
   "shadows": "ast"
  },
  "type": "import"
 },
 "numpy.tests.test_warnings.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "numpy.tests.test_warnings.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "numpy.tests.test_warnings.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "numpy.tests.test_warnings.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "numpy.tests.test_warnings.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "numpy.tests.test_warnings.test_warning_calls": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "numpy.tests.test_warnings.FindFuncs": {
     "line number": [
      78
     ]
    },
    "numpy.tests.test_warnings.ast": {
     "line number": [
      77
     ]
    },
    "numpy.tests.test_warnings.numpy": {
     "line number": [
      65
     ]
    },
    "numpy.tests.test_warnings.pytest": {
     "line number": [
      62
     ]
    },
    "numpy.tests.test_warnings.tokenize": {
     "line number": [
      76
     ]
    },
    "pathlib.Path": {
     "line number": [
      65
     ]
    },
    "str": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "numpy.tests.test_warnings.tokenize": {
  "data": {
   "shadows": "tokenize"
  },
  "type": "import"
 },
 "numpy.unicode": {
  "data": {
   "shadows": "__builtin__.unicode"
  },
  "type": "import"
 },
 "numpy.version": {
  "data": {
   "symbols_in_volume": {
    "numpy.version.full_version": {
     "line number": [
      12
     ]
    },
    "numpy.version.release": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "numpy.version.full_version": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "numpy.version.git_revision": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "numpy.version.release": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "numpy.version.short_version": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "numpy.version.version": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "numpy.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 }
}