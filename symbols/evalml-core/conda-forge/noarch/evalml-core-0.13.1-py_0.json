{
 "evalml": {
  "lineno": null,
  "symbols_in_volume": [
   "warnings.catch_warnings",
   "warnings.filterwarnings",
   "warnings.simplefilter"
  ],
  "type": "module"
 },
 "evalml.__main__": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.__main__.cli": {
  "lineno": 6,
  "symbols_in_volume": [
   "click.group"
  ],
  "type": "function"
 },
 "evalml.__main__.info": {
  "lineno": 11,
  "symbols_in_volume": [
   "click.command",
   "evalml.utils.cli_utils.print_info"
  ],
  "type": "function"
 },
 "evalml.automl": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.automl.automl_algorithm": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.automl.automl_algorithm.automl_algorithm": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm": {
  "lineno": 12,
  "symbols_in_volume": [
   "abc.ABC"
  ],
  "type": "class"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm.__init__": {
  "lineno": 15,
  "symbols_in_volume": [
   "evalml.tuners.SKOptTuner",
   "evalml.utils.get_random_state"
  ],
  "type": "function"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm.add_result": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm.batch_number": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm.next_batch": {
  "lineno": 40,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithm.pipeline_number": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_algorithm.automl_algorithm.AutoMLAlgorithmException": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.IterativeAlgorithm": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.IterativeAlgorithm.__init__": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.IterativeAlgorithm._transform_parameters": {
  "lineno": 76,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils.handle_component_class",
   "inspect.signature"
  ],
  "type": "function"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.IterativeAlgorithm.add_result": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_algorithm.iterative_algorithm.IterativeAlgorithm.next_batch": {
  "lineno": 40,
  "symbols_in_volume": [
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger"
  ],
  "type": "module"
 },
 "evalml.automl.automl_search.AutoMLSearch": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.automl.automl_search.AutoMLSearch.__init__": {
  "lineno": 62,
  "symbols_in_volume": [
   "evalml.objectives.get_objective",
   "evalml.objectives.get_objectives",
   "evalml.problem_types.handle_problem_types",
   "evalml.tuners.SKOptTuner",
   "evalml.utils.convert_to_seconds",
   "evalml.utils.get_random_state",
   "sklearn.model_selection.BaseCrossValidator"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.__str__": {
  "lineno": 219,
  "symbols_in_volume": [
   "evalml.objectives.get_objective",
   "evalml.problem_types.handle_problem_types"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.__str__._get_funct_name": {
  "lineno": 224,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.__str__._print_list": {
  "lineno": 220,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._add_baseline_pipelines": {
  "lineno": 508,
  "symbols_in_volume": [
   "evalml.pipelines.MeanBaselineRegressionPipeline",
   "evalml.pipelines.ModeBaselineBinaryPipeline",
   "evalml.pipelines.ModeBaselineMulticlassPipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "evalml.utils.logger.update_pipeline"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._add_result": {
  "lineno": 630,
  "symbols_in_volume": [
   "warnings.catch_warnings",
   "warnings.simplefilter"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._check_stopping_condition": {
  "lineno": 467,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._compute_cv_scores": {
  "lineno": 559,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "evalml.exceptions.PipelineScoreError",
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.model_selection.train_test_split",
   "time.time"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._evaluate": {
  "lineno": 660,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._handle_keyboard_interrupt": {
  "lineno": 285,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._validate_data_checks": {
  "lineno": 257,
  "symbols_in_volume": [
   "evalml.data_checks.DataChecks",
   "evalml.data_checks.DefaultDataChecks",
   "evalml.data_checks.EmptyDataChecks"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch._validate_problem_type": {
  "lineno": 499,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.add_to_rankings": {
  "lineno": 748,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.best_pipeline": {
  "lineno": 811,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineNotFoundError"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.data_check_results": {
  "lineno": 215,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.describe_pipeline": {
  "lineno": 694,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineNotFoundError",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.utils.logger.log_subtitle",
   "numpy.inf",
   "pandas.DataFrame",
   "pandas.option_context"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.full_rankings": {
  "lineno": 793,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.get_pipeline": {
  "lineno": 674,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineNotFoundError"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.has_searched": {
  "lineno": 782,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.load": {
  "lineno": 837,
  "symbols_in_volume": [
   "cloudpickle.load"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.rankings": {
  "lineno": 788,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.results": {
  "lineno": 773,
  "symbols_in_volume": [
   "copy.deepcopy"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.save": {
  "lineno": 824,
  "symbols_in_volume": [
   "cloudpickle.DEFAULT_PROTOCOL",
   "cloudpickle.dump"
  ],
  "type": "function"
 },
 "evalml.automl.automl_search.AutoMLSearch.search": {
  "lineno": 311,
  "symbols_in_volume": [
   "evalml.automl.automl_algorithm.IterativeAlgorithm",
   "evalml.automl.data_splitters.TrainingValidationSplit",
   "evalml.data_checks.data_check_message_type.DataCheckMessageType.ERROR",
   "evalml.data_checks.data_check_message_type.DataCheckMessageType.WARNING",
   "evalml.exceptions.AutoMLSearchException",
   "evalml.pipelines.components.utils.get_estimators",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "evalml.utils.logger.log_title",
   "evalml.utils.logger.time_elapsed",
   "evalml.utils.logger.update_pipeline",
   "numpy.array",
   "numpy.isnan",
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.model_selection.KFold",
   "sklearn.model_selection.StratifiedKFold",
   "time.time"
  ],
  "type": "function"
 },
 "evalml.automl.data_splitters": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.automl.data_splitters.training_validation_split": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.automl.data_splitters.training_validation_split.TrainingValidationSplit": {
  "lineno": 5,
  "symbols_in_volume": [
   "sklearn.model_selection._split.BaseCrossValidator"
  ],
  "type": "class"
 },
 "evalml.automl.data_splitters.training_validation_split.TrainingValidationSplit.__init__": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.data_splitters.training_validation_split.TrainingValidationSplit.get_n_splits": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.automl.data_splitters.training_validation_split.TrainingValidationSplit.split": {
  "lineno": 34,
  "symbols_in_volume": [
   "sklearn.model_selection.train_test_split"
  ],
  "type": "function"
 },
 "evalml.automl.pipeline_search_plots": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.automl.pipeline_search_plots.PipelineSearchPlots": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.automl.pipeline_search_plots.PipelineSearchPlots.__init__": {
  "lineno": 70,
  "symbols_in_volume": [
   "evalml.utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.automl.pipeline_search_plots.PipelineSearchPlots.search_iteration_plot": {
  "lineno": 79,
  "symbols_in_volume": [
   "evalml.utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.automl.pipeline_search_plots.SearchIterationPlot": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.automl.pipeline_search_plots.SearchIterationPlot.__init__": {
  "lineno": 5,
  "symbols_in_volume": [
   "evalml.utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.automl.pipeline_search_plots.SearchIterationPlot.update": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.data_check.DataCheck": {
  "lineno": 6,
  "symbols_in_volume": [
   "abc.ABC"
  ],
  "type": "class"
 },
 "evalml.data_checks.data_check.DataCheck.name": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.utils.classproperty"
  ],
  "type": "function"
 },
 "evalml.data_checks.data_check.DataCheck.validate": {
  "lineno": 14,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.data_checks.data_check_message": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.data_check_message.DataCheckError": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.data_check_message.DataCheckMessage": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.data_check_message.DataCheckMessage.__eq__": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.data_check_message.DataCheckMessage.__init__": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.data_check_message.DataCheckMessage.__str__": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.data_check_message.DataCheckWarning": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.data_check_message_type": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.data_check_message_type.DataCheckMessageType": {
  "lineno": 4,
  "symbols_in_volume": [
   "enum.Enum"
  ],
  "type": "class"
 },
 "evalml.data_checks.data_checks": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.data_checks.DataChecks": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.data_checks.DataChecks.__init__": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.data_checks.DataChecks.validate": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.default_data_checks": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.default_data_checks.DefaultDataChecks": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.default_data_checks.DefaultDataChecks.__init__": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.highly_null_data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck.__init__": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck.validate": {
  "lineno": 22,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.data_checks.id_columns_data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck.__init__": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck.validate": {
  "lineno": 20,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.data_checks.invalid_targets_data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck.validate": {
  "lineno": 15,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.categorical_dtypes",
   "evalml.utils.gen_utils.numeric_and_boolean_dtypes",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.data_checks.label_leakage_data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck.__init__": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck.validate": {
  "lineno": 25,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.numeric_and_boolean_dtypes",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.data_checks.no_variance_data_check": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger"
  ],
  "type": "module"
 },
 "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck.__init__": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck._check_for_errors": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck.validate": {
  "lineno": 45,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.data_checks.outliers_data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.outliers_data_check.OutliersDataCheck": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.outliers_data_check.OutliersDataCheck.__init__": {
  "lineno": 15,
  "symbols_in_volume": [
   "evalml.utils.get_random_state"
  ],
  "type": "function"
 },
 "evalml.data_checks.outliers_data_check.OutliersDataCheck.validate": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.numeric_dtypes",
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.ensemble.IsolationForest"
  ],
  "type": "function"
 },
 "evalml.data_checks.outliers_data_check.OutliersDataCheck.validate.get_IQR": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.data_checks.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.data_checks.utils.EmptyDataChecks": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.data_checks.utils.EmptyDataChecks.__init__": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.demos": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.demos.breast_cancer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.demos.breast_cancer.load_breast_cancer": {
  "lineno": 5,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.datasets.load_breast_cancer"
  ],
  "type": "function"
 },
 "evalml.demos.churn": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.demos.churn.load_churn": {
  "lineno": 6,
  "symbols_in_volume": [
   "evalml.preprocessing.load_data",
   "os.path.abspath",
   "os.path.dirname",
   "os.path.join"
  ],
  "type": "function"
 },
 "evalml.demos.diabetes": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.demos.diabetes.load_diabetes": {
  "lineno": 5,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.datasets.load_diabetes"
  ],
  "type": "function"
 },
 "evalml.demos.fraud": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.demos.fraud.load_fraud": {
  "lineno": 6,
  "symbols_in_volume": [
   "evalml.preprocessing.load_data",
   "os.path.abspath",
   "os.path.dirname",
   "os.path.join"
  ],
  "type": "function"
 },
 "evalml.demos.wine": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.demos.wine.load_wine": {
  "lineno": 5,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.datasets.load_wine"
  ],
  "type": "function"
 },
 "evalml.exceptions": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.exceptions.exceptions": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.exceptions.exceptions.AutoMLSearchException": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.exceptions.exceptions.ComponentNotYetFittedError": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.exceptions.exceptions.IllFormattedClassNameError": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.exceptions.exceptions.MethodPropertyNotFoundError": {
  "lineno": 1,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.exceptions.exceptions.MissingComponentError": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.exceptions.exceptions.ObjectiveNotFoundError": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.exceptions.exceptions.PipelineNotFoundError": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.exceptions.exceptions.PipelineNotYetFittedError": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.exceptions.exceptions.PipelineScoreError": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.exceptions.exceptions.PipelineScoreError.__init__": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_family": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.model_family.model_family": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.model_family.model_family.ModelFamily": {
  "lineno": 4,
  "symbols_in_volume": [
   "enum.Enum"
  ],
  "type": "class"
 },
 "evalml.model_family.model_family.ModelFamily.__str__": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_family.model_family.ModelFamily.is_tree_estimator": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_family.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.model_family.utils.handle_model_family": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.model_understanding.graphs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.model_understanding.graphs._calculate_axis_range": {
  "lineno": 447,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.graphs.binary_objective_vs_threshold": {
  "lineno": 329,
  "symbols_in_volume": [
   "copy.copy",
   "evalml.objectives.utils.get_objective",
   "evalml.problem_types.ProblemTypes.BINARY",
   "numpy.linspace",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.calculate_permutation_importance": {
  "lineno": 249,
  "symbols_in_volume": [
   "evalml.objectives.utils.get_objective",
   "pandas.DataFrame",
   "sklearn.inspection.permutation_importance"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.calculate_permutation_importance.scorer": {
  "lineno": 269,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.graphs.confusion_matrix": {
  "lineno": 24,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.metrics.confusion_matrix",
   "sklearn.utils.multiclass.unique_labels"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.graph_binary_objective_vs_threshold": {
  "lineno": 361,
  "symbols_in_volume": [
   "evalml.objectives.utils.get_objective",
   "evalml.utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.graph_confusion_matrix": {
  "lineno": 203,
  "symbols_in_volume": [
   "evalml.utils.import_or_raise",
   "pandas.Series",
   "sklearn.metrics.confusion_matrix"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.graph_partial_dependence": {
  "lineno": 416,
  "symbols_in_volume": [
   "evalml.utils.import_or_raise",
   "sklearn.inspection.partial_dependence"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.graph_permutation_importance": {
  "lineno": 282,
  "symbols_in_volume": [
   "evalml.utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.graph_precision_recall_curve": {
  "lineno": 96,
  "symbols_in_volume": [
   "evalml.utils.import_or_raise",
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.metrics.precision_recall_curve"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.graph_roc_curve": {
  "lineno": 150,
  "symbols_in_volume": [
   "evalml.utils.import_or_raise",
   "numpy.isnan",
   "numpy.logical_or",
   "numpy.unique",
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.metrics.roc_curve",
   "sklearn.preprocessing.LabelBinarizer"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.normalize_confusion_matrix": {
  "lineno": 48,
  "symbols_in_volume": [
   "numpy.newaxis",
   "warnings.catch_warnings"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.partial_dependence": {
  "lineno": 389,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.BASELINE",
   "evalml.model_family.ModelFamily.CATBOOST",
   "pandas.DataFrame",
   "sklearn.inspection.partial_dependence"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.precision_recall_curve": {
  "lineno": 72,
  "symbols_in_volume": [
   "sklearn.metrics.auc",
   "sklearn.metrics.precision_recall_curve"
  ],
  "type": "function"
 },
 "evalml.model_understanding.graphs.roc_curve": {
  "lineno": 126,
  "symbols_in_volume": [
   "sklearn.metrics.auc",
   "sklearn.metrics.roc_curve"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.model_understanding.prediction_explanations._algorithms": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.utils.get_logger"
  ],
  "type": "module"
 },
 "evalml.model_understanding.prediction_explanations._algorithms._compute_shap_values": {
  "lineno": 33,
  "symbols_in_volume": [
   "evalml.model_family.model_family.ModelFamily.BASELINE",
   "evalml.model_family.model_family.ModelFamily.CATBOOST",
   "evalml.model_family.model_family.ModelFamily.XGBOOST",
   "evalml.problem_types.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.problem_types.ProblemTypes.REGRESSION",
   "numpy.ndarray",
   "numpy.zeros",
   "shap.KernelExplainer",
   "shap.TreeExplainer",
   "shap.sample",
   "sklearn.utils.check_array",
   "warnings.catch_warnings"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._algorithms._create_dictionary": {
  "lineno": 14,
  "symbols_in_volume": [
   "numpy.atleast_2d",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._algorithms._normalize_shap_values": {
  "lineno": 140,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._algorithms._normalize_values_dict": {
  "lineno": 113,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.newaxis",
   "numpy.stack"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._ClassificationPredictedValuesMaker": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._ClassificationPredictedValuesMaker.__call__": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._ClassificationPredictedValuesMaker.__init__": {
  "lineno": 242,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._EmptyPredictedValuesMaker": {
  "lineno": 232,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._EmptyPredictedValuesMaker.__call__": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._HeadingMaker": {
  "lineno": 217,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._HeadingMaker.__call__": {
  "lineno": 228,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._HeadingMaker.__init__": {
  "lineno": 224,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._RegressionPredictedValuesMaker": {
  "lineno": 261,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._RegressionPredictedValuesMaker.__call__": {
  "lineno": 270,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._RegressionPredictedValuesMaker.__init__": {
  "lineno": 264,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._ReportSectionMaker": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._ReportSectionMaker.__init__": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._ReportSectionMaker.make_report_section": {
  "lineno": 177,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SHAPBinaryTableMaker": {
  "lineno": 98,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SHAPBinaryTableMaker.__call__": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SHAPMultiClassTableMaker": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SHAPMultiClassTableMaker.__call__": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SHAPMultiClassTableMaker.__init__": {
  "lineno": 110,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SHAPRegressionTableMaker": {
  "lineno": 91,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SHAPRegressionTableMaker.__call__": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SHAPTableMaker": {
  "lineno": 277,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SHAPTableMaker.__call__": {
  "lineno": 292,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SHAPTableMaker.__init__": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SectionMaker": {
  "lineno": 200,
  "symbols_in_volume": [
   "abc.ABC"
  ],
  "type": "class"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._SectionMaker.__call__": {
  "lineno": 208,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._TableMaker": {
  "lineno": 83,
  "symbols_in_volume": [
   "abc.ABC"
  ],
  "type": "class"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._TableMaker.__call__": {
  "lineno": 86,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._make_rows": {
  "lineno": 13,
  "symbols_in_volume": [
   "pandas.api.types.is_bool",
   "pandas.api.types.is_number"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._make_single_prediction_shap_table": {
  "lineno": 123,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations._algorithms._compute_shap_values",
   "evalml.model_understanding.prediction_explanations._algorithms._normalize_shap_values",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations._user_interface._make_table": {
  "lineno": 51,
  "symbols_in_volume": [
   "texttable.Texttable",
   "texttable.Texttable.HEADER"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations.explainers": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "module"
 },
 "evalml.model_understanding.prediction_explanations.explainers.abs_error": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.abs"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations.explainers.cross_entropy": {
  "lineno": 53,
  "symbols_in_volume": [
   "numpy.log",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations.explainers.explain_prediction": {
  "lineno": 20,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations._user_interface._make_single_prediction_shap_table"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations.explainers.explain_predictions": {
  "lineno": 73,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations._user_interface._EmptyPredictedValuesMaker",
   "evalml.model_understanding.prediction_explanations._user_interface._HeadingMaker",
   "evalml.model_understanding.prediction_explanations._user_interface._ReportSectionMaker",
   "evalml.model_understanding.prediction_explanations._user_interface._SHAPTableMaker",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.model_understanding.prediction_explanations.explainers.explain_predictions_best_worst": {
  "lineno": 104,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineScoreError",
   "evalml.model_understanding.prediction_explanations._user_interface._ClassificationPredictedValuesMaker",
   "evalml.model_understanding.prediction_explanations._user_interface._HeadingMaker",
   "evalml.model_understanding.prediction_explanations._user_interface._RegressionPredictedValuesMaker",
   "evalml.model_understanding.prediction_explanations._user_interface._ReportSectionMaker",
   "evalml.model_understanding.prediction_explanations._user_interface._SHAPTableMaker",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pandas.DataFrame",
   "pandas.Series",
   "sys.exc_info",
   "traceback.format_tb"
  ],
  "type": "function"
 },
 "evalml.objectives": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.objectives.binary_classification_objective": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.problem_types.ProblemTypes.BINARY"
  ],
  "type": "class"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective.can_optimize_threshold": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective.decision_function": {
  "lineno": 49,
  "symbols_in_volume": [
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective.optimize_threshold": {
  "lineno": 25,
  "symbols_in_volume": [
   "scipy.optimize.minimize_scalar"
  ],
  "type": "function"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective.optimize_threshold.cost": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.objectives.binary_classification_objective.BinaryClassificationObjective.validate_inputs": {
  "lineno": 66,
  "symbols_in_volume": [
   "numpy.unique"
  ],
  "type": "function"
 },
 "evalml.objectives.cost_benefit_matrix": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.objectives.cost_benefit_matrix.CostBenefitMatrix": {
  "lineno": 9,
  "symbols_in_volume": [
   "numpy.inf"
  ],
  "type": "class"
 },
 "evalml.objectives.cost_benefit_matrix.CostBenefitMatrix.__init__": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.objectives.cost_benefit_matrix.CostBenefitMatrix.objective_function": {
  "lineno": 35,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.confusion_matrix",
   "numpy.array",
   "numpy.multiply"
  ],
  "type": "function"
 },
 "evalml.objectives.fraud_cost": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.objectives.fraud_cost.FraudCost": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.fraud_cost.FraudCost.__init__": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.objectives.fraud_cost.FraudCost.decision_function": {
  "lineno": 34,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.objectives.fraud_cost.FraudCost.objective_function": {
  "lineno": 54,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.objectives.lead_scoring": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.objectives.lead_scoring.LeadScoring": {
  "lineno": 8,
  "symbols_in_volume": [
   "math.inf"
  ],
  "type": "class"
 },
 "evalml.objectives.lead_scoring.LeadScoring.__init__": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.objectives.lead_scoring.LeadScoring.objective_function": {
  "lineno": 25,
  "symbols_in_volume": [
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.objectives.multiclass_classification_objective": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.objectives.multiclass_classification_objective.MulticlassClassificationObjective": {
  "lineno": 6,
  "symbols_in_volume": [
   "evalml.problem_types.ProblemTypes.MULTICLASS"
  ],
  "type": "class"
 },
 "evalml.objectives.objective_base": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.objectives.objective_base.ObjectiveBase": {
  "lineno": 7,
  "symbols_in_volume": [
   "abc.ABC"
  ],
  "type": "class"
 },
 "evalml.objectives.objective_base.ObjectiveBase._standardize_input_type": {
  "lineno": 64,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.calculate_percent_difference": {
  "lineno": 99,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.nan",
   "pandas.isna"
  ],
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.greater_is_better": {
  "lineno": 16,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.name": {
  "lineno": 10,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.objective_function": {
  "lineno": 35,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.perfect_score": {
  "lineno": 29,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.score": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.score_needs_proba": {
  "lineno": 22,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.objectives.objective_base.ObjectiveBase.validate_inputs": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.isinf",
   "numpy.isnan"
  ],
  "type": "function"
 },
 "evalml.objectives.regression_objective": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.objectives.regression_objective.RegressionObjective": {
  "lineno": 6,
  "symbols_in_volume": [
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "class"
 },
 "evalml.objectives.standard_metrics": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.objectives.standard_metrics.AUC": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AUC.objective_function": {
  "lineno": 197,
  "symbols_in_volume": [
   "sklearn.metrics.roc_auc_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.AUCMacro": {
  "lineno": 213,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AUCMacro.objective_function": {
  "lineno": 220,
  "symbols_in_volume": [
   "sklearn.metrics.roc_auc_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.AUCMicro": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AUCMicro.objective_function": {
  "lineno": 208,
  "symbols_in_volume": [
   "sklearn.metrics.roc_auc_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.AUCWeighted": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AUCWeighted.objective_function": {
  "lineno": 232,
  "symbols_in_volume": [
   "sklearn.metrics.roc_auc_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.AccuracyBinary": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AccuracyBinary.objective_function": {
  "lineno": 21,
  "symbols_in_volume": [
   "sklearn.metrics.accuracy_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.AccuracyMulticlass": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.AccuracyMulticlass.objective_function": {
  "lineno": 32,
  "symbols_in_volume": [
   "sklearn.metrics.accuracy_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.BalancedAccuracyBinary": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.BalancedAccuracyBinary.objective_function": {
  "lineno": 43,
  "symbols_in_volume": [
   "sklearn.metrics.balanced_accuracy_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.BalancedAccuracyMulticlass": {
  "lineno": 47,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.BalancedAccuracyMulticlass.objective_function": {
  "lineno": 54,
  "symbols_in_volume": [
   "sklearn.metrics.balanced_accuracy_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.ExpVariance": {
  "lineno": 381,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.ExpVariance.objective_function": {
  "lineno": 388,
  "symbols_in_volume": [
   "sklearn.metrics.explained_variance_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.F1": {
  "lineno": 58,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.F1.objective_function": {
  "lineno": 65,
  "symbols_in_volume": [
   "sklearn.metrics.f1_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.F1Macro": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.F1Macro.objective_function": {
  "lineno": 87,
  "symbols_in_volume": [
   "sklearn.metrics.f1_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.F1Micro": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.F1Micro.objective_function": {
  "lineno": 76,
  "symbols_in_volume": [
   "sklearn.metrics.f1_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.F1Weighted": {
  "lineno": 91,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.F1Weighted.objective_function": {
  "lineno": 98,
  "symbols_in_volume": [
   "sklearn.metrics.f1_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.LogLossBinary": {
  "lineno": 237,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.LogLossBinary.objective_function": {
  "lineno": 244,
  "symbols_in_volume": [
   "sklearn.metrics.log_loss"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.LogLossMulticlass": {
  "lineno": 248,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.LogLossMulticlass.objective_function": {
  "lineno": 255,
  "symbols_in_volume": [
   "sklearn.metrics.log_loss"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MAE": {
  "lineno": 337,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MAE.objective_function": {
  "lineno": 344,
  "symbols_in_volume": [
   "sklearn.metrics.mean_absolute_error"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MCCBinary": {
  "lineno": 259,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MCCBinary.objective_function": {
  "lineno": 266,
  "symbols_in_volume": [
   "sklearn.metrics.matthews_corrcoef",
   "warnings.catch_warnings",
   "warnings.simplefilter"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MCCMulticlass": {
  "lineno": 273,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MCCMulticlass.objective_function": {
  "lineno": 280,
  "symbols_in_volume": [
   "sklearn.metrics.matthews_corrcoef",
   "warnings.catch_warnings",
   "warnings.simplefilter"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MSE": {
  "lineno": 348,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MSE.objective_function": {
  "lineno": 355,
  "symbols_in_volume": [
   "sklearn.metrics.mean_squared_error"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MaxError": {
  "lineno": 370,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MaxError.objective_function": {
  "lineno": 377,
  "symbols_in_volume": [
   "sklearn.metrics.max_error"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MeanSquaredLogError": {
  "lineno": 312,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MeanSquaredLogError.objective_function": {
  "lineno": 322,
  "symbols_in_volume": [
   "sklearn.metrics.mean_squared_log_error"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.MedianAE": {
  "lineno": 359,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.MedianAE.objective_function": {
  "lineno": 366,
  "symbols_in_volume": [
   "sklearn.metrics.median_absolute_error"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.Precision": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.Precision.objective_function": {
  "lineno": 109,
  "symbols_in_volume": [
   "sklearn.metrics.precision_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.PrecisionMacro": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.PrecisionMacro.objective_function": {
  "lineno": 131,
  "symbols_in_volume": [
   "sklearn.metrics.precision_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.PrecisionMicro": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.PrecisionMicro.objective_function": {
  "lineno": 120,
  "symbols_in_volume": [
   "sklearn.metrics.precision_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.PrecisionWeighted": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.PrecisionWeighted.objective_function": {
  "lineno": 142,
  "symbols_in_volume": [
   "sklearn.metrics.precision_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.R2": {
  "lineno": 326,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.R2.objective_function": {
  "lineno": 333,
  "symbols_in_volume": [
   "sklearn.metrics.r2_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.Recall": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.Recall.objective_function": {
  "lineno": 153,
  "symbols_in_volume": [
   "sklearn.metrics.recall_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.RecallMacro": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.RecallMacro.objective_function": {
  "lineno": 175,
  "symbols_in_volume": [
   "sklearn.metrics.recall_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.RecallMicro": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.RecallMicro.objective_function": {
  "lineno": 164,
  "symbols_in_volume": [
   "sklearn.metrics.recall_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.RecallWeighted": {
  "lineno": 179,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.RecallWeighted.objective_function": {
  "lineno": 186,
  "symbols_in_volume": [
   "sklearn.metrics.recall_score"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.RootMeanSquaredError": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.RootMeanSquaredError.objective_function": {
  "lineno": 294,
  "symbols_in_volume": [
   "sklearn.metrics.mean_squared_error"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics.RootMeanSquaredLogError": {
  "lineno": 298,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.objectives.standard_metrics.RootMeanSquaredLogError.objective_function": {
  "lineno": 308,
  "symbols_in_volume": [
   "numpy.sqrt",
   "sklearn.metrics.mean_squared_log_error"
  ],
  "type": "function"
 },
 "evalml.objectives.standard_metrics._handle_predictions": {
  "lineno": 392,
  "symbols_in_volume": [
   "numpy.unique",
   "sklearn.preprocessing.label_binarize"
  ],
  "type": "function"
 },
 "evalml.objectives.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.objectives.utils.get_objective": {
  "lineno": 38,
  "symbols_in_volume": [
   "evalml.exceptions.ObjectiveNotFoundError"
  ],
  "type": "function"
 },
 "evalml.objectives.utils.get_objectives": {
  "lineno": 59,
  "symbols_in_volume": [
   "evalml.problem_types.handle_problem_types"
  ],
  "type": "function"
 },
 "evalml.pipelines": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.binary_classification_pipeline": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.binary_classification_pipeline.BinaryClassificationPipeline": {
  "lineno": 8,
  "symbols_in_volume": [
   "evalml.pipelines.classification_pipeline.ClassificationPipeline",
   "evalml.problem_types.ProblemTypes.BINARY"
  ],
  "type": "class"
 },
 "evalml.pipelines.binary_classification_pipeline.BinaryClassificationPipeline._predict": {
  "lineno": 13,
  "symbols_in_volume": [
   "evalml.objectives.get_objective",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.binary_classification_pipeline.BinaryClassificationPipeline._score": {
  "lineno": 51,
  "symbols_in_volume": [
   "evalml.pipelines.classification_pipeline.ClassificationPipeline._score"
  ],
  "type": "function"
 },
 "evalml.pipelines.binary_classification_pipeline.BinaryClassificationPipeline.predict_proba": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.classification": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.classification.baseline_binary": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.classification.baseline_binary.BaselineBinaryPipeline": {
  "lineno": 4,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.pipelines.classification.baseline_binary.ModeBaselineBinaryPipeline": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.pipelines.classification.baseline_multiclass": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.classification.baseline_multiclass.BaselineMulticlassPipeline": {
  "lineno": 4,
  "symbols_in_volume": [
   "evalml.pipelines.MulticlassClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.pipelines.classification.baseline_multiclass.ModeBaselineMulticlassPipeline": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.pipelines.MulticlassClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.pipelines.classification_pipeline": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.pipelines.PipelineBase"
  ],
  "type": "class"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline.__init__": {
  "lineno": 12,
  "symbols_in_volume": [
   "sklearn.preprocessing.LabelEncoder"
  ],
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline._classes": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline._compute_predictions": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline._decode_targets": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline._encode_targets": {
  "lineno": 48,
  "symbols_in_volume": [
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline._predict": {
  "lineno": 69,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline.fit": {
  "lineno": 26,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline.predict": {
  "lineno": 84,
  "symbols_in_volume": [
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline.predict_proba": {
  "lineno": 97,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.classification_pipeline.ClassificationPipeline.score": {
  "lineno": 114,
  "symbols_in_volume": [
   "evalml.objectives.get_objective",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.components": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.component_base": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.utils.get_logger"
  ],
  "type": "module"
 },
 "evalml.pipelines.components.component_base.ComponentBase": {
  "lineno": 18,
  "symbols_in_volume": [
   "abc.ABC",
   "evalml.pipelines.components.component_base_meta.ComponentBaseMeta"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.component_base.ComponentBase.__init__": {
  "lineno": 22,
  "symbols_in_volume": [
   "evalml.utils.get_random_state"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.clone": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.default_parameters": {
  "lineno": 53,
  "symbols_in_volume": [
   "evalml.utils.classproperty"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.describe": {
  "lineno": 95,
  "symbols_in_volume": [
   "evalml.utils.log_subtitle"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.fit": {
  "lineno": 79,
  "symbols_in_volume": [
   "evalml.exceptions.MethodPropertyNotFoundError"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.load": {
  "lineno": 129,
  "symbols_in_volume": [
   "cloudpickle.load"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.model_family": {
  "lineno": 34,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.name": {
  "lineno": 28,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.needs_fitting": {
  "lineno": 40,
  "symbols_in_volume": [
   "evalml.utils.classproperty"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.parameters": {
  "lineno": 48,
  "symbols_in_volume": [
   "copy.copy"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.component_base.ComponentBase.save": {
  "lineno": 116,
  "symbols_in_volume": [
   "cloudpickle.DEFAULT_PROTOCOL",
   "cloudpickle.dump"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.component_base_meta": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.component_base_meta.ComponentBaseMeta": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.utils.base_meta.BaseMeta"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.component_base_meta.ComponentBaseMeta.check_for_fit": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.component_base_meta.ComponentBaseMeta.check_for_fit._check_for_fit": {
  "lineno": 17,
  "symbols_in_volume": [
   "evalml.exceptions.ComponentNotYetFittedError",
   "functools.wraps"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.BASELINE",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.__init__": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.classes_": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.feature_importance": {
  "lineno": 82,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.fit": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.unique",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.predict": {
  "lineno": 60,
  "symbols_in_volume": [
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.baseline_classifier.BaselineClassifier.predict_proba": {
  "lineno": 69,
  "symbols_in_volume": [
   "numpy.array",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.CatBoostClassifier": {
  "lineno": 15,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.CATBOOST",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.utils.SEED_BOUNDS.max_bound",
   "skopt.space.Integer",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.CatBoostClassifier.__init__": {
  "lineno": 34,
  "symbols_in_volume": [
   "copy.copy",
   "evalml.utils.get_random_seed",
   "evalml.utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.CatBoostClassifier.feature_importance": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.CatBoostClassifier.fit": {
  "lineno": 57,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.categorical_dtypes",
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.preprocessing.LabelEncoder"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.catboost_classifier.CatBoostClassifier.predict": {
  "lineno": 71,
  "symbols_in_volume": [
   "numpy.int64",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.ElasticNetClassifier": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.ElasticNetClassifier.__init__": {
  "lineno": 20,
  "symbols_in_volume": [
   "sklearn.linear_model.SGDClassifier"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.elasticnet_classifier.ElasticNetClassifier.feature_importance": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.linalg.norm"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.et_classifier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.et_classifier.ExtraTreesClassifier": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.EXTRA_TREES",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "skopt.space.Integer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.et_classifier.ExtraTreesClassifier.__init__": {
  "lineno": 20,
  "symbols_in_volume": [
   "sklearn.ensemble.ExtraTreesClassifier"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.LogisticRegressionClassifier": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.LogisticRegressionClassifier.__init__": {
  "lineno": 22,
  "symbols_in_volume": [
   "sklearn.linear_model.LogisticRegression"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.logistic_regression.LogisticRegressionClassifier.feature_importance": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.linalg.norm"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier.RandomForestClassifier": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.RANDOM_FOREST",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "skopt.space.Integer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier.RandomForestClassifier.__init__": {
  "lineno": 19,
  "symbols_in_volume": [
   "sklearn.ensemble.RandomForestClassifier"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.rf_classifier.RandomForestClassifier.feature_importance": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.XGBOOST",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "skopt.space.Integer",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier.__init__": {
  "lineno": 27,
  "symbols_in_volume": [
   "evalml.utils.get_random_seed",
   "evalml.utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier.feature_importance": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier.fit": {
  "lineno": 44,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier.predict": {
  "lineno": 50,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.classifiers.xgboost_classifier.XGBoostClassifier.predict_proba": {
  "lineno": 55,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.estimator": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.estimator.Estimator": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.pipelines.components.ComponentBase"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.estimator.Estimator.feature_importance": {
  "lineno": 61,
  "symbols_in_volume": [
   "evalml.exceptions.MethodPropertyNotFoundError"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.estimator.Estimator.predict": {
  "lineno": 27,
  "symbols_in_volume": [
   "evalml.exceptions.MethodPropertyNotFoundError",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.estimator.Estimator.predict_proba": {
  "lineno": 44,
  "symbols_in_volume": [
   "evalml.exceptions.MethodPropertyNotFoundError",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.estimator.Estimator.supported_problem_types": {
  "lineno": 21,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.BaselineRegressor": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.BASELINE",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.BaselineRegressor.__init__": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.BaselineRegressor.feature_importance": {
  "lineno": 55,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.BaselineRegressor.fit": {
  "lineno": 38,
  "symbols_in_volume": [
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.baseline_regressor.BaselineRegressor.predict": {
  "lineno": 52,
  "symbols_in_volume": [
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.CatBoostRegressor": {
  "lineno": 13,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.CATBOOST",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "evalml.utils.SEED_BOUNDS.max_bound",
   "skopt.space.Integer",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.CatBoostRegressor.__init__": {
  "lineno": 32,
  "symbols_in_volume": [
   "copy.copy",
   "evalml.utils.get_random_seed",
   "evalml.utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.CatBoostRegressor.feature_importance": {
  "lineno": 72,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.catboost_regressor.CatBoostRegressor.fit": {
  "lineno": 54,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.categorical_dtypes",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor.ElasticNetRegressor": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor.ElasticNetRegressor.__init__": {
  "lineno": 19,
  "symbols_in_volume": [
   "sklearn.linear_model.ElasticNet"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.elasticnet_regressor.ElasticNetRegressor.feature_importance": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.et_regressor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.et_regressor.ExtraTreesRegressor": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.EXTRA_TREES",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "skopt.space.Integer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.et_regressor.ExtraTreesRegressor.__init__": {
  "lineno": 20,
  "symbols_in_volume": [
   "sklearn.ensemble.ExtraTreesRegressor"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor.LinearRegressor": {
  "lineno": 8,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor.LinearRegressor.__init__": {
  "lineno": 18,
  "symbols_in_volume": [
   "sklearn.linear_model.LinearRegression"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.linear_regressor.LinearRegressor.feature_importance": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor.RandomForestRegressor": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.RANDOM_FOREST",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "skopt.space.Integer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor.RandomForestRegressor.__init__": {
  "lineno": 19,
  "symbols_in_volume": [
   "sklearn.ensemble.RandomForestRegressor"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.rf_regressor.RandomForestRegressor.feature_importance": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.XGBoostRegressor": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.XGBOOST",
   "evalml.pipelines.components.estimators.Estimator",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "skopt.space.Integer",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.XGBoostRegressor.__init__": {
  "lineno": 27,
  "symbols_in_volume": [
   "evalml.utils.get_random_seed",
   "evalml.utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.XGBoostRegressor.feature_importance": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.XGBoostRegressor.fit": {
  "lineno": 43,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.estimators.regressors.xgboost_regressor.XGBoostRegressor.predict": {
  "lineno": 49,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.column_selectors": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.Transformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector.__init__": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector._check_input_for_columns": {
  "lineno": 26,
  "symbols_in_volume": [
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector._modify_columns": {
  "lineno": 40,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector.fit": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector.fit_transform": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.ColumnSelector.transform": {
  "lineno": 58,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.DropColumns": {
  "lineno": 84,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.column_selectors.DropColumns._modify_columns": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.DropColumns.transform": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.SelectColumns": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.column_selectors.SelectColumns._modify_columns": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.column_selectors.SelectColumns.transform": {
  "lineno": 115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.encoders": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.encoders.encoder": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.encoders.encoder.CategoricalEncoder": {
  "lineno": 5,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.Transformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.encoders.encoder.CategoricalEncoder.get_feature_names": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.OneHotEncoder": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.OneHotEncoder.__init__": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.OneHotEncoder._get_cat_cols": {
  "lineno": 62,
  "symbols_in_volume": [
   "numpy.object",
   "pandas.api.types.is_categorical_dtype"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.OneHotEncoder.fit": {
  "lineno": 70,
  "symbols_in_volume": [
   "numpy.nan",
   "numpy.sort",
   "pandas.DataFrame",
   "sklearn.preprocessing.OneHotEncoder"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.encoders.onehot_encoder.OneHotEncoder.transform": {
  "lineno": 110,
  "symbols_in_volume": [
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.concat"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.feature_selection": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector.FeatureSelector": {
  "lineno": 6,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.Transformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector.FeatureSelector.fit_transform": {
  "lineno": 44,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector.FeatureSelector.get_names": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.feature_selection.feature_selector.FeatureSelector.transform": {
  "lineno": 18,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_classifier_feature_selector": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_classifier_feature_selector.RFClassifierSelectFromModel": {
  "lineno": 9,
  "symbols_in_volume": [
   "numpy.inf",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_classifier_feature_selector.RFClassifierSelectFromModel.__init__": {
  "lineno": 17,
  "symbols_in_volume": [
   "numpy.inf",
   "sklearn.ensemble.RandomForestClassifier",
   "sklearn.feature_selection.SelectFromModel"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_regressor_feature_selector": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_regressor_feature_selector.RFRegressorSelectFromModel": {
  "lineno": 9,
  "symbols_in_volume": [
   "numpy.inf",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.feature_selection.rf_regressor_feature_selector.RFRegressorSelectFromModel.__init__": {
  "lineno": 17,
  "symbols_in_volume": [
   "numpy.inf",
   "sklearn.ensemble.RandomForestRegressor",
   "sklearn.feature_selection.SelectFromModel"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.imputers.imputer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.Imputer": {
  "lineno": 8,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.Transformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.Imputer.__init__": {
  "lineno": 18,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.imputers.SimpleImputer"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.Imputer.fit": {
  "lineno": 54,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.boolean",
   "evalml.utils.gen_utils.categorical_dtypes",
   "evalml.utils.gen_utils.numeric_dtypes",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.imputer.Imputer.transform": {
  "lineno": 82,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.PerColumnImputer": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.Transformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.PerColumnImputer.__init__": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.PerColumnImputer.fit": {
  "lineno": 42,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.PerColumnImputer.fit_transform": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.per_column_imputer.PerColumnImputer.transform": {
  "lineno": 65,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer": {
  "lineno": 7,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.Transformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer.__init__": {
  "lineno": 12,
  "symbols_in_volume": [
   "sklearn.impute.SimpleImputer"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer.fit": {
  "lineno": 32,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer.fit_transform": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.imputers.simple_imputer.SimpleImputer.transform": {
  "lineno": 48,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer.DateTimeFeaturizer": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.Transformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer.DateTimeFeaturizer.__init__": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer.DateTimeFeaturizer.fit": {
  "lineno": 54,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.datetime_dtypes",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer.DateTimeFeaturizer.transform": {
  "lineno": 60,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_day_of_week": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_hour": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_month": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.datetime_featurizer._extract_year": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns.DropNullColumns": {
  "lineno": 6,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.Transformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns.DropNullColumns.__init__": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns.DropNullColumns.fit": {
  "lineno": 29,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.drop_null_columns.DropNullColumns.transform": {
  "lineno": 41,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.lsa": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.preprocessing.lsa.LSA": {
  "lineno": 11,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.preprocessing.TextTransformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.preprocessing.lsa.LSA.__init__": {
  "lineno": 16,
  "symbols_in_volume": [
   "sklearn.decomposition.TruncatedSVD",
   "sklearn.feature_extraction.text.TfidfVectorizer",
   "sklearn.pipeline.make_pipeline"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.lsa.LSA.fit": {
  "lineno": 28,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.lsa.LSA.transform": {
  "lineno": 40,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer": {
  "lineno": 12,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.preprocessing.TextTransformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer.__init__": {
  "lineno": 17,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.preprocessing.LSA",
   "evalml.utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer._clean_text": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer._clean_text.normalize": {
  "lineno": 40,
  "symbols_in_volume": [
   "string.punctuation"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer._make_entity_set": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer.fit": {
  "lineno": 68,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_featurizer.TextFeaturizer.transform": {
  "lineno": 92,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.concat"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_transformer": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger"
  ],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_transformer.TextTransformer": {
  "lineno": 7,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.Transformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_transformer.TextTransformer.__init__": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.preprocessing.text_transformer.TextTransformer._get_text_columns": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.scalers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.scalers.standard_scaler": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.scalers.standard_scaler.StandardScaler": {
  "lineno": 6,
  "symbols_in_volume": [
   "evalml.pipelines.components.transformers.Transformer"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.scalers.standard_scaler.StandardScaler.__init__": {
  "lineno": 11,
  "symbols_in_volume": [
   "sklearn.preprocessing.StandardScaler"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.transformer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.components.transformers.transformer.Transformer": {
  "lineno": 8,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.NONE",
   "evalml.pipelines.components.ComponentBase"
  ],
  "type": "class"
 },
 "evalml.pipelines.components.transformers.transformer.Transformer.fit_transform": {
  "lineno": 40,
  "symbols_in_volume": [
   "evalml.exceptions.MethodPropertyNotFoundError",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.transformers.transformer.Transformer.transform": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.exceptions.MethodPropertyNotFoundError",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.utils": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.utils.get_logger"
  ],
  "type": "module"
 },
 "evalml.pipelines.components.utils._all_estimators": {
  "lineno": 14,
  "symbols_in_volume": [
   "evalml.pipelines.components.Estimator",
   "evalml.utils.gen_utils.get_importable_subclasses"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.utils._all_estimators_used_in_search": {
  "lineno": 18,
  "symbols_in_volume": [
   "evalml.pipelines.components.Estimator",
   "evalml.utils.gen_utils.get_importable_subclasses"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.utils._all_transformers": {
  "lineno": 22,
  "symbols_in_volume": [
   "evalml.pipelines.components.Transformer",
   "evalml.utils.gen_utils.get_importable_subclasses"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.utils.all_components": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.components.utils.allowed_model_families": {
  "lineno": 30,
  "symbols_in_volume": [
   "evalml.problem_types.handle_problem_types"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.utils.get_estimators": {
  "lineno": 49,
  "symbols_in_volume": [
   "evalml.model_family.utils.handle_model_family",
   "evalml.problem_types.handle_problem_types"
  ],
  "type": "function"
 },
 "evalml.pipelines.components.utils.handle_component_class": {
  "lineno": 83,
  "symbols_in_volume": [
   "evalml.exceptions.MissingComponentError",
   "evalml.pipelines.components.ComponentBase",
   "inspect.isclass"
  ],
  "type": "function"
 },
 "evalml.pipelines.multiclass_classification_pipeline": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.multiclass_classification_pipeline.MulticlassClassificationPipeline": {
  "lineno": 5,
  "symbols_in_volume": [
   "evalml.pipelines.classification_pipeline.ClassificationPipeline",
   "evalml.problem_types.ProblemTypes.MULTICLASS"
  ],
  "type": "class"
 },
 "evalml.pipelines.pipeline_base": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.utils.get_logger"
  ],
  "type": "module"
 },
 "evalml.pipelines.pipeline_base.PipelineBase": {
  "lineno": 34,
  "symbols_in_volume": [
   "abc.ABC",
   "evalml.pipelines.pipeline_base_meta.PipelineBaseMeta"
  ],
  "type": "class"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.__getitem__": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.__init__": {
  "lineno": 51,
  "symbols_in_volume": [
   "evalml.utils.get_random_state"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.__setitem__": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._fit": {
  "lineno": 190,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._instantiate_component": {
  "lineno": 113,
  "symbols_in_volume": [
   "evalml.exceptions.MissingComponentError"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._score": {
  "lineno": 243,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._score_all_objectives": {
  "lineno": 247,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "evalml.exceptions.PipelineScoreError",
   "sys.exc_info",
   "traceback.format_tb"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._transform": {
  "lineno": 176,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase._validate_estimator_problem_type": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.clone": {
  "lineno": 461,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.component_graph": {
  "lineno": 37,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.default_parameters": {
  "lineno": 304,
  "symbols_in_volume": [
   "evalml.utils.classproperty"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.describe": {
  "lineno": 153,
  "symbols_in_volume": [
   "evalml.utils.log_subtitle",
   "evalml.utils.log_title"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.feature_importance": {
  "lineno": 318,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.fit": {
  "lineno": 200,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.get_component": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.graph": {
  "lineno": 327,
  "symbols_in_volume": [
   "evalml.utils.import_or_raise",
   "os.path.splitext"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.graph_feature_importance": {
  "lineno": 391,
  "symbols_in_volume": [
   "evalml.utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.hyperparameters": {
  "lineno": 282,
  "symbols_in_volume": [
   "copy.copy",
   "evalml.utils.classproperty"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.load": {
  "lineno": 448,
  "symbols_in_volume": [
   "cloudpickle.load"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.model_family": {
  "lineno": 276,
  "symbols_in_volume": [
   "copy.copy",
   "evalml.utils.classproperty"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.name": {
  "lineno": 73,
  "symbols_in_volume": [
   "evalml.exceptions.IllFormattedClassNameError",
   "evalml.utils.classproperty",
   "re.compile"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.parameters": {
  "lineno": 295,
  "symbols_in_volume": [
   "copy.copy"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.predict": {
  "lineno": 214,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.save": {
  "lineno": 435,
  "symbols_in_volume": [
   "cloudpickle.DEFAULT_PROTOCOL",
   "cloudpickle.dump"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.score": {
  "lineno": 230,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base.PipelineBase.summary": {
  "lineno": 87,
  "symbols_in_volume": [
   "copy.copy",
   "evalml.utils.classproperty",
   "inspect.isclass"
  ],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base_meta": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.pipeline_base_meta.PipelineBaseMeta": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.utils.base_meta.BaseMeta"
  ],
  "type": "class"
 },
 "evalml.pipelines.pipeline_base_meta.PipelineBaseMeta.check_for_fit": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.pipelines.pipeline_base_meta.PipelineBaseMeta.check_for_fit._check_for_fit": {
  "lineno": 17,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineNotYetFittedError",
   "functools.wraps"
  ],
  "type": "function"
 },
 "evalml.pipelines.regression": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.regression.baseline_regression": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.regression.baseline_regression.BaselineRegressionPipeline": {
  "lineno": 4,
  "symbols_in_volume": [
   "evalml.pipelines.RegressionPipeline"
  ],
  "type": "class"
 },
 "evalml.pipelines.regression.baseline_regression.MeanBaselineRegressionPipeline": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.pipelines.RegressionPipeline"
  ],
  "type": "class"
 },
 "evalml.pipelines.regression_pipeline": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.pipelines.regression_pipeline.RegressionPipeline": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.pipelines.PipelineBase",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "class"
 },
 "evalml.pipelines.regression_pipeline.RegressionPipeline.fit": {
  "lineno": 14,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.numeric_dtypes",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.regression_pipeline.RegressionPipeline.score": {
  "lineno": 36,
  "symbols_in_volume": [
   "evalml.objectives.get_objective",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.pipelines.utils": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.utils.get_logger"
  ],
  "type": "module"
 },
 "evalml.pipelines.utils._get_preprocessing_components": {
  "lineno": 27,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.CatBoostClassifier",
   "evalml.pipelines.components.CatBoostRegressor",
   "evalml.pipelines.components.DateTimeFeaturizer",
   "evalml.pipelines.components.DropNullColumns",
   "evalml.pipelines.components.Imputer",
   "evalml.pipelines.components.OneHotEncoder",
   "evalml.pipelines.components.StandardScaler",
   "evalml.utils.gen_utils.categorical_dtypes",
   "evalml.utils.gen_utils.datetime_dtypes",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.utils.make_pipeline": {
  "lineno": 63,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils.get_estimators",
   "evalml.problem_types.handle_problem_types",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.pipelines.utils.make_pipeline.GeneratedPipeline": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.pipelines.utils.make_pipeline.get_pipeline_base_class": {
  "lineno": 88,
  "symbols_in_volume": [
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "function"
 },
 "evalml.preprocessing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.preprocessing.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.preprocessing.utils.drop_nan_target_rows": {
  "lineno": 111,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.preprocessing.utils.label_distribution": {
  "lineno": 98,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.preprocessing.utils.load_data": {
  "lineno": 5,
  "symbols_in_volume": [
   "pandas.read_csv"
  ],
  "type": "function"
 },
 "evalml.preprocessing.utils.number_of_features": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.preprocessing.utils.split_data": {
  "lineno": 40,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series",
   "sklearn.model_selection.ShuffleSplit",
   "sklearn.model_selection.StratifiedShuffleSplit"
  ],
  "type": "function"
 },
 "evalml.problem_types": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.problem_types.problem_types": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.problem_types.problem_types.ProblemTypes": {
  "lineno": 4,
  "symbols_in_volume": [
   "enum.Enum"
  ],
  "type": "class"
 },
 "evalml.problem_types.problem_types.ProblemTypes.__str__": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.problem_types.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.problem_types.utils.handle_problem_types": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.automl_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.automl_tests.test_automl": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.automl_tests.test_automl.KeyboardInterruptOnKthPipeline": {
  "lineno": 858,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl.KeyboardInterruptOnKthPipeline.__call__": {
  "lineno": 865,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.KeyboardInterruptOnKthPipeline.__init__": {
  "lineno": 861,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.MockDataCheckErrorAndWarning": {
  "lineno": 337,
  "symbols_in_volume": [
   "evalml.data_checks.DataCheck"
  ],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl.MockDataCheckErrorAndWarning.validate": {
  "lineno": 338,
  "symbols_in_volume": [
   "evalml.data_checks.DataCheckError",
   "evalml.data_checks.DataCheckWarning"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_add_to_rankings": {
  "lineno": 646,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_add_to_rankings_duplicate": {
  "lineno": 676,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_add_to_rankings_no_search": {
  "lineno": 664,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_add_to_rankings_trained": {
  "lineno": 692,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_add_to_rankings_trained.CoolBinaryClassificationPipeline": {
  "lineno": 705,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl.test_allowed_pipelines_with_incorrect_problem_type": {
  "lineno": 589,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_algorithm": {
  "lineno": 452,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_allowed_pipelines_algorithm": {
  "lineno": 470,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.model_family.ModelFamily.RANDOM_FOREST",
   "evalml.pipelines.components.utils.get_estimators",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_bad_data_check_parameter_type": {
  "lineno": 362,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.data_checks.DataChecks",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_data_check_results_is_none_before_search": {
  "lineno": 292,
  "symbols_in_volume": [
   "evalml.AutoMLSearch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_data_checks_raises_error": {
  "lineno": 342,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.data_checks.DataChecks",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.mark.parametrize",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_default_data_checks": {
  "lineno": 320,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.data_checks.DataCheckWarning",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_empty_data_checks": {
  "lineno": 297,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pandas.DataFrame",
   "pandas.Series",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_feature_selection": {
  "lineno": 416,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "unittest.mock.MagicMock",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_feature_selection.MockFeatureSelectionPipeline": {
  "lineno": 422,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_feature_selection.MockFeatureSelectionPipeline.fit": {
  "lineno": 425,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_serialization": {
  "lineno": 495,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "os.path.join",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_serialization_protocol": {
  "lineno": 510,
  "symbols_in_volume": [
   "cloudpickle.DEFAULT_PROTOCOL",
   "evalml.AutoMLSearch",
   "os.path.join",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_str_no_param_search": {
  "lineno": 379,
  "symbols_in_volume": [
   "evalml.AutoMLSearch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_str_search": {
  "lineno": 224,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.tuners.RandomSearchTuner",
   "sklearn.model_selection.StratifiedKFold",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_str_search._dummy_callback": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_automl_tuner_exception": {
  "lineno": 439,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.tuners.NoParamsException",
   "evalml.tuners.RandomSearchTuner",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_catch_keyboard_interrupt": {
  "lineno": 884,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.mark.parametrize",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_checks_at_search_time": {
  "lineno": 617,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_default_objective": {
  "lineno": 634,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_describe_pipeline": {
  "lineno": 775,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_error_during_train_test_split": {
  "lineno": 950,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "numpy.isnan",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_get_pipeline_invalid": {
  "lineno": 750,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.exceptions.PipelineNotFoundError",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_has_searched": {
  "lineno": 715,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_incompatible_additional_objectives": {
  "lineno": 629,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_init_objective": {
  "lineno": 610,
  "symbols_in_volume": [
   "evalml.AutoMLSearch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_init_problem_type_error": {
  "lineno": 602,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_invalid_data_splitter": {
  "lineno": 525,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pandas.DataFrame",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_large_dataset_binary": {
  "lineno": 531,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.automl.TrainingValidationSplit",
   "evalml.objectives.FraudCost",
   "pandas.DataFrame",
   "pandas.Series",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_large_dataset_multiclass": {
  "lineno": 555,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.automl.TrainingValidationSplit",
   "pandas.DataFrame",
   "pandas.Series",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_large_dataset_regression": {
  "lineno": 572,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.automl.TrainingValidationSplit",
   "pandas.DataFrame",
   "pandas.Series",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_main_objective_problem_type_mismatch": {
  "lineno": 597,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_max_batches_must_be_non_negative": {
  "lineno": 1068,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "numpy.inf",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_max_batches_plays_nice_with_other_stopping_criteria": {
  "lineno": 1046,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_max_batches_works": {
  "lineno": 1016,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.mark.parametrize",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_no_search": {
  "lineno": 728,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.exceptions.PipelineNotFoundError",
   "pandas.DataFrame",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_objective_score_raises": {
  "lineno": 189,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "numpy.isnan",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_percent_better_than_baseline_in_rankings": {
  "lineno": 963,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.objectives.utils.OPTIONS.items",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "itertools.product",
   "numpy.nan",
   "numpy.testing.assert_almost_equal",
   "pytest.mark.parametrize",
   "unittest.mock.MagicMock",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_percent_better_than_baseline_in_rankings.DummyPipeline": {
  "lineno": 985,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl.test_percent_better_than_baseline_in_rankings.DummyPipeline.fit": {
  "lineno": 988,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_percent_better_than_baseline_in_rankings.Pipeline1": {
  "lineno": 991,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl.test_percent_better_than_baseline_in_rankings.Pipeline2": {
  "lineno": 994,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl.test_pipeline_fit_raises": {
  "lineno": 148,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "numpy.isnan",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_pipeline_limits": {
  "lineno": 88,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pytest.mark.parametrize",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_pipeline_score_raises": {
  "lineno": 170,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "numpy.isnan",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_pipelines_in_batch_return_nan": {
  "lineno": 917,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.exceptions.AutoMLSearchException",
   "numpy.nan",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_pipelines_in_batch_return_none": {
  "lineno": 937,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.exceptions.AutoMLSearchException",
   "numpy.nan",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_rankings": {
  "lineno": 209,
  "symbols_in_volume": [
   "evalml.AutoMLSearch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_results_getter": {
  "lineno": 805,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_search_results": {
  "lineno": 39,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.pipelines.MulticlassClassificationPipeline",
   "evalml.pipelines.RegressionPipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "numpy.all",
   "numpy.bool_",
   "numpy.dtype",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl.test_targets_data_types_classification": {
  "lineno": 825,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.demos.load_breast_cancer",
   "evalml.demos.load_wine",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.utils.gen_utils.categorical_dtypes",
   "evalml.utils.gen_utils.numeric_and_boolean_dtypes",
   "pandas.Categorical",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_algorithm": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.DummyAlgorithm": {
  "lineno": 11,
  "symbols_in_volume": [
   "evalml.automl.automl_algorithm.AutoMLAlgorithm"
  ],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.DummyAlgorithm.__init__": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.DummyAlgorithm.next_batch": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.test_automl_algorithm_dummy": {
  "lineno": 24,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_algorithm.test_automl_algorithm_init_base": {
  "lineno": 6,
  "symbols_in_volume": [
   "evalml.automl.automl_algorithm.AutoMLAlgorithm",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_additional_objectives": {
  "lineno": 191,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.objectives.FraudCost"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_init_allowed_both_not_specified_binary": {
  "lineno": 517,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.pipelines.components.utils.get_estimators",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_init_allowed_both_not_specified_multi": {
  "lineno": 533,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.pipelines.components.utils.get_estimators",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_init_allowed_both_specified_binary": {
  "lineno": 549,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.model_family.ModelFamily.RANDOM_FOREST",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_init_allowed_both_specified_multi": {
  "lineno": 566,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.model_family.ModelFamily.RANDOM_FOREST",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_no_allowed_pipelines": {
  "lineno": 418,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_search": {
  "lineno": 583,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.pipelines.ModeBaselineBinaryPipeline",
   "unittest.mock.MagicMock",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_specified_allowed_model_families_binary": {
  "lineno": 463,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.model_family.ModelFamily.RANDOM_FOREST",
   "evalml.pipelines.components.utils.get_estimators",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_specified_allowed_model_families_multi": {
  "lineno": 490,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.model_family.ModelFamily.RANDOM_FOREST",
   "evalml.pipelines.components.utils.get_estimators",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_specified_allowed_pipelines_binary": {
  "lineno": 429,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.model_family.ModelFamily.NONE",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_automl_allowed_pipelines_specified_allowed_pipelines_multi": {
  "lineno": 446,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.model_family.ModelFamily.NONE",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_binary_auto": {
  "lineno": 100,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "numpy.unique"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_callback": {
  "lineno": 167,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.objectives.Precision"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_callback.add_result_callback": {
  "lineno": 178,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_callback.start_iteration_callback": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_categorical_classification": {
  "lineno": 149,
  "symbols_in_volume": [
   "evalml.AutoMLSearch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_data_split": {
  "lineno": 61,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pandas.DataFrame",
   "sklearn.model_selection.StratifiedKFold",
   "sklearn.model_selection.TimeSeriesSplit"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_describe_pipeline_objective_ordered": {
  "lineno": 264,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.objectives.get_objective"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_early_stopping": {
  "lineno": 300,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises",
   "time.time"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_get_pipeline_none": {
  "lineno": 55,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.exceptions.PipelineNotFoundError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_init": {
  "lineno": 27,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.pipelines.PipelineBase",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_init_objective": {
  "lineno": 48,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.objectives.Precision"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_max_pipelines": {
  "lineno": 77,
  "symbols_in_volume": [
   "evalml.AutoMLSearch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_max_time": {
  "lineno": 410,
  "symbols_in_volume": [
   "evalml.AutoMLSearch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_max_time_units": {
  "lineno": 280,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_multi_auto": {
  "lineno": 111,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.objectives.PrecisionMicro",
   "evalml.objectives.get_objectives",
   "numpy.unique"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_multi_objective": {
  "lineno": 129,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_non_optimizable_threshold": {
  "lineno": 249,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_optimizable_threshold_disabled": {
  "lineno": 229,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_optimizable_threshold_enabled": {
  "lineno": 205,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_plot_disabled_missing_dependency": {
  "lineno": 325,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_plot_iterations_ipython_mock": {
  "lineno": 372,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.automl.pipeline_search_plots.SearchIterationPlot",
   "pytest.importorskip",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_plot_iterations_ipython_mock_import_failure": {
  "lineno": 386,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pandas.Series",
   "pytest.importorskip",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_plot_iterations_max_pipelines": {
  "lineno": 336,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pandas.Series",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_plot_iterations_max_time": {
  "lineno": 354,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pandas.Series",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_random_state": {
  "lineno": 156,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.objectives.Precision"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_recall_error": {
  "lineno": 85,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.exceptions.ObjectiveNotFoundError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_classification.test_recall_object": {
  "lineno": 92,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.objectives.Recall"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_init_allowed_both_not_specified": {
  "lineno": 213,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.pipelines.components.utils.get_estimators",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_init_allowed_both_specified": {
  "lineno": 229,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.model_family.ModelFamily.RANDOM_FOREST",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_no_allowed_pipelines": {
  "lineno": 159,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_search": {
  "lineno": 246,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.pipelines.MeanBaselineRegressionPipeline",
   "unittest.mock.MagicMock",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_specified_allowed_model_families": {
  "lineno": 185,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.model_family.ModelFamily.RANDOM_FOREST",
   "evalml.pipelines.components.utils.get_estimators",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_automl_allowed_pipelines_specified_allowed_pipelines": {
  "lineno": 167,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.model_family.ModelFamily.NONE",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_callback": {
  "lineno": 56,
  "symbols_in_volume": [
   "evalml.AutoMLSearch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_callback.add_result_callback": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_callback.start_iteration_callback": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_categorical_regression": {
  "lineno": 49,
  "symbols_in_volume": [
   "evalml.AutoMLSearch"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_early_stopping": {
  "lineno": 80,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "time.time"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_init": {
  "lineno": 17,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.pipelines.PipelineBase",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_log_metrics_only_passed_directly": {
  "lineno": 150,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.exceptions.ObjectiveNotFoundError",
   "evalml.objectives.MeanSquaredLogError",
   "evalml.objectives.RootMeanSquaredLogError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_plot_disabled_missing_dependency": {
  "lineno": 103,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_plot_iterations_max_pipelines": {
  "lineno": 114,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pandas.Series",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_plot_iterations_max_time": {
  "lineno": 132,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pandas.Series",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_automl_search_regression.test_random_state": {
  "lineno": 37,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes": {
  "lineno": 33,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes.MockBinaryClassificationPipeline1": {
  "lineno": 44,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes.MockBinaryClassificationPipeline2": {
  "lineno": 48,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes.MockBinaryClassificationPipeline3": {
  "lineno": 52,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes.MockEstimator": {
  "lineno": 35,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.NONE",
   "evalml.pipelines.components.Estimator",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS"
  ],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.dummy_binary_pipeline_classes.MockEstimator.__init__": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.test_iterative_algorithm_allowed_pipelines": {
  "lineno": 25,
  "symbols_in_volume": [
   "evalml.automl.automl_algorithm.IterativeAlgorithm"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.test_iterative_algorithm_empty": {
  "lineno": 61,
  "symbols_in_volume": [
   "evalml.automl.automl_algorithm.AutoMLAlgorithmException",
   "evalml.automl.automl_algorithm.IterativeAlgorithm",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.test_iterative_algorithm_init": {
  "lineno": 18,
  "symbols_in_volume": [
   "evalml.automl.automl_algorithm.IterativeAlgorithm"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.test_iterative_algorithm_init_iterative": {
  "lineno": 14,
  "symbols_in_volume": [
   "evalml.automl.automl_algorithm.IterativeAlgorithm"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_iterative_algorithm.test_iterative_algorithm_results": {
  "lineno": 78,
  "symbols_in_volume": [
   "evalml.automl.automl_algorithm.IterativeAlgorithm",
   "numpy.arange"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.test_search_iteration_plot_class": {
  "lineno": 7,
  "symbols_in_volume": [
   "evalml.automl.pipeline_search_plots.SearchIterationPlot",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.test_search_iteration_plot_class.MockObjective": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.test_search_iteration_plot_class.MockObjective.__init__": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.test_search_iteration_plot_class.MockResults": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.automl_tests.test_pipeline_search_plots.test_search_iteration_plot_class.MockResults.__init__": {
  "lineno": 16,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_baseline_classifier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_binary_mode": {
  "lineno": 28,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineClassifier",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_binary_random": {
  "lineno": 42,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineClassifier",
   "evalml.utils.get_random_state",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "numpy.unique"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_binary_random_weighted": {
  "lineno": 55,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineClassifier",
   "evalml.utils.get_random_state",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "numpy.unique"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_init": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.BASELINE",
   "evalml.pipelines.components.BaselineClassifier"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_invalid_strategy": {
  "lineno": 17,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineClassifier",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_multiclass_mode": {
  "lineno": 70,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineClassifier",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_multiclass_random": {
  "lineno": 84,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineClassifier",
   "evalml.utils.get_random_state",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "numpy.unique"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_multiclass_random_weighted": {
  "lineno": 97,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineClassifier",
   "evalml.utils.get_random_state",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "numpy.unique"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_no_mode": {
  "lineno": 112,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineClassifier",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_classifier.test_baseline_y_is_None": {
  "lineno": 22,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineClassifier",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_regressor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_baseline_regressor.test_baseline_init": {
  "lineno": 8,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.BASELINE",
   "evalml.pipelines.components.BaselineRegressor"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_regressor.test_baseline_invalid_strategy": {
  "lineno": 14,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineRegressor",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_regressor.test_baseline_mean": {
  "lineno": 25,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineRegressor",
   "numpy.array",
   "numpy.testing.assert_allclose"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_regressor.test_baseline_median": {
  "lineno": 34,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineRegressor",
   "numpy.array",
   "numpy.median",
   "numpy.testing.assert_allclose"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_baseline_regressor.test_baseline_y_is_None": {
  "lineno": 19,
  "symbols_in_volume": [
   "evalml.pipelines.components.BaselineRegressor",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_classifier": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "evalml.tests.component_tests.test_catboost_classifier.test_catboost_classifier_random_state_bounds_rng": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.pipelines.components.CatBoostClassifier",
   "evalml.pipelines.components.CatBoostClassifier.SEED_MAX",
   "evalml.pipelines.components.CatBoostClassifier.SEED_MIN",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_classifier.test_catboost_classifier_random_state_bounds_rng.make_mock_random_state": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_classifier.test_catboost_classifier_random_state_bounds_rng.make_mock_random_state.MockRandomState": {
  "lineno": 28,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_catboost_classifier.test_catboost_classifier_random_state_bounds_rng.make_mock_random_state.MockRandomState.randint": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_classifier.test_catboost_classifier_random_state_bounds_seed": {
  "lineno": 11,
  "symbols_in_volume": [
   "evalml.pipelines.components.CatBoostClassifier",
   "evalml.utils.SEED_BOUNDS.max_bound",
   "evalml.utils.SEED_BOUNDS.min_bound",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_regressor": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "evalml.tests.component_tests.test_catboost_regressor.test_catboost_regressor_random_state_bounds_rng": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.pipelines.components.CatBoostRegressor",
   "evalml.pipelines.components.CatBoostRegressor.SEED_MAX",
   "evalml.pipelines.components.CatBoostRegressor.SEED_MIN",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_regressor.test_catboost_regressor_random_state_bounds_rng.make_mock_random_state": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_regressor.test_catboost_regressor_random_state_bounds_rng.make_mock_random_state.MockRandomState": {
  "lineno": 28,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_catboost_regressor.test_catboost_regressor_random_state_bounds_rng.make_mock_random_state.MockRandomState.randint": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_catboost_regressor.test_catboost_regressor_random_state_bounds_seed": {
  "lineno": 11,
  "symbols_in_volume": [
   "evalml.pipelines.components.CatBoostRegressor",
   "evalml.utils.SEED_BOUNDS.max_bound",
   "evalml.utils.SEED_BOUNDS.min_bound",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_empty_X": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropColumns",
   "evalml.pipelines.components.SelectColumns",
   "pandas.DataFrame",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_fit_transform": {
  "lineno": 67,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropColumns",
   "evalml.pipelines.components.SelectColumns",
   "pandas.DataFrame",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_init": {
  "lineno": 8,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropColumns",
   "evalml.pipelines.components.SelectColumns",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_int_col_names": {
  "lineno": 129,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropColumns",
   "evalml.pipelines.components.SelectColumns",
   "numpy.arange",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_numpy": {
  "lineno": 107,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropColumns",
   "evalml.pipelines.components.SelectColumns",
   "numpy.arange",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_column_transformer_transform": {
  "lineno": 40,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropColumns",
   "evalml.pipelines.components.SelectColumns",
   "pandas.DataFrame",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_column_selector_transformers.test_drop_column_transformer_input_invalid_col_name": {
  "lineno": 86,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropColumns",
   "evalml.pipelines.components.SelectColumns",
   "numpy.arange",
   "pandas.DataFrame",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_components.MockFitComponent": {
  "lineno": 78,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.NONE",
   "evalml.pipelines.components.ComponentBase"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.MockFitComponent.__init__": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.MockFitComponent.fit": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.MockFitComponent.predict": {
  "lineno": 91,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_all_estimators_check_fit": {
  "lineno": 696,
  "symbols_in_volume": [
   "evalml.exceptions.ComponentNotYetFittedError",
   "evalml.pipelines.components.utils._all_estimators",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_all_transformers_check_fit": {
  "lineno": 678,
  "symbols_in_volume": [
   "evalml.exceptions.ComponentNotYetFittedError",
   "evalml.pipelines.components.utils._all_transformers",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_all_transformers_needs_fitting": {
  "lineno": 670,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils._all_estimators",
   "evalml.pipelines.components.utils._all_transformers"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_classes": {
  "lineno": 47,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_classes.MockComponent": {
  "lineno": 49,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.NONE",
   "evalml.pipelines.components.ComponentBase"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_classes.MockEstimator": {
  "lineno": 53,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.Estimator"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_classes.MockTransformer": {
  "lineno": 58,
  "symbols_in_volume": [
   "evalml.pipelines.components.Transformer"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_clone_fitted": {
  "lineno": 378,
  "symbols_in_volume": [
   "evalml.exceptions.ComponentNotYetFittedError",
   "numpy.testing.assert_almost_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_clone_init": {
  "lineno": 359,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_clone_random_state": {
  "lineno": 366,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_describe": {
  "lineno": 331,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit": {
  "lineno": 212,
  "symbols_in_volume": [
   "evalml.pipelines.components.ComponentBase"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit.MockComponent": {
  "lineno": 219,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.Estimator"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit.MockComponent.__init__": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit.MockEstimator": {
  "lineno": 215,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit.MockEstimator.fit": {
  "lineno": 216,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform": {
  "lineno": 236,
  "symbols_in_volume": [
   "evalml.exceptions.MethodPropertyNotFoundError",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitAndTransform": {
  "lineno": 265,
  "symbols_in_volume": [
   "evalml.pipelines.components.Transformer"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitAndTransform.__init__": {
  "lineno": 275,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitAndTransform.fit": {
  "lineno": 269,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitAndTransform.transform": {
  "lineno": 272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransform": {
  "lineno": 239,
  "symbols_in_volume": [
   "evalml.pipelines.components.Transformer"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransform.__init__": {
  "lineno": 246,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransform.fit_transform": {
  "lineno": 243,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransformButError": {
  "lineno": 252,
  "symbols_in_volume": [
   "evalml.pipelines.components.Transformer"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransformButError.__init__": {
  "lineno": 259,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithFitTransformButError.fit_transform": {
  "lineno": 256,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithOnlyFit": {
  "lineno": 281,
  "symbols_in_volume": [
   "evalml.pipelines.components.Transformer"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithOnlyFit.__init__": {
  "lineno": 288,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_fit_transform.MockTransformerWithOnlyFit.fit": {
  "lineno": 285,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_has_random_state": {
  "lineno": 419,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils.all_components",
   "inspect.signature"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_parameters_getter": {
  "lineno": 339,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_component_parameters_init": {
  "lineno": 347,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils.all_components"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_components_init_kwargs": {
  "lineno": 398,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils.all_components",
   "importlib.import_module",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_components_init_kwargs.all_init": {
  "lineno": 409,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_default_parameters": {
  "lineno": 513,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils.all_components",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_default_parameters_raise_no_warnings": {
  "lineno": 519,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils.all_components",
   "pytest.mark.parametrize",
   "warnings.catch_warnings",
   "warnings.simplefilter"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_describe": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_describe_component": {
  "lineno": 113,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropColumns",
   "evalml.pipelines.components.ElasticNetClassifier",
   "evalml.pipelines.components.ElasticNetRegressor",
   "evalml.pipelines.components.ExtraTreesClassifier",
   "evalml.pipelines.components.ExtraTreesRegressor",
   "evalml.pipelines.components.LinearRegressor",
   "evalml.pipelines.components.LogisticRegressionClassifier",
   "evalml.pipelines.components.OneHotEncoder",
   "evalml.pipelines.components.PerColumnImputer",
   "evalml.pipelines.components.RFClassifierSelectFromModel",
   "evalml.pipelines.components.RandomForestClassifier",
   "evalml.pipelines.components.RandomForestRegressor",
   "evalml.pipelines.components.SimpleImputer",
   "evalml.pipelines.components.StandardScaler",
   "evalml.pipelines.components.XGBoostClassifier",
   "numpy.inf"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit": {
  "lineno": 527,
  "symbols_in_volume": [
   "evalml.exceptions.ComponentNotYetFittedError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimator": {
  "lineno": 541,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.Estimator"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimator.__init__": {
  "lineno": 546,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimatorObj": {
  "lineno": 528,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimatorObj.__init__": {
  "lineno": 529,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimatorObj.fit": {
  "lineno": 532,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimatorObj.predict": {
  "lineno": 535,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit.MockEstimatorObj.predict_proba": {
  "lineno": 538,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides": {
  "lineno": 562,
  "symbols_in_volume": [
   "evalml.exceptions.ComponentNotYetFittedError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverrides": {
  "lineno": 563,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.Estimator"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverrides.fit": {
  "lineno": 568,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverrides.predict": {
  "lineno": 571,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverrides.predict_proba": {
  "lineno": 574,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverridesSubclass": {
  "lineno": 577,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.Estimator"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverridesSubclass.fit": {
  "lineno": 582,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverridesSubclass.predict": {
  "lineno": 585,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_check_for_fit_with_overrides.MockEstimatorWithOverridesSubclass.predict_proba": {
  "lineno": 588,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_needs_fitting_false": {
  "lineno": 64,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_needs_fitting_false.MockEstimatorNeedsFittingFalse": {
  "lineno": 66,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.Estimator"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_estimator_needs_fitting_false.MockEstimatorNeedsFittingFalse.predict": {
  "lineno": 72,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_estimator_predict_output_type": {
  "lineno": 472,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils._all_estimators_used_in_search",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "numpy.ndarray",
   "numpy.unique",
   "pandas.DataFrame",
   "pandas.RangeIndex",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_init": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_missing_attributes": {
  "lineno": 155,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_missing_attributes.MockComponentModelFamily": {
  "lineno": 162,
  "symbols_in_volume": [
   "evalml.pipelines.components.ComponentBase"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_missing_attributes.MockComponentName": {
  "lineno": 156,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.NONE",
   "evalml.pipelines.components.ComponentBase"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_missing_attributes.MockEstimatorWithoutAttribute": {
  "lineno": 168,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.Estimator"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_missing_methods_on_components": {
  "lineno": 176,
  "symbols_in_volume": [
   "evalml.exceptions.MethodPropertyNotFoundError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_missing_methods_on_components.MockTransformerWithFit": {
  "lineno": 180,
  "symbols_in_volume": [
   "evalml.pipelines.components.Transformer"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_missing_methods_on_components.MockTransformerWithFit.fit": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_model_family_components": {
  "lineno": 314,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.model_family.ModelFamily.NONE"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_no_fitting_required_components": {
  "lineno": 722,
  "symbols_in_volume": [
   "evalml.pipelines.components.Estimator",
   "evalml.pipelines.components.utils.all_components"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_regressor_call_predict_proba": {
  "lineno": 322,
  "symbols_in_volume": [
   "evalml.exceptions.MethodPropertyNotFoundError",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_serialization": {
  "lineno": 733,
  "symbols_in_volume": [
   "cloudpickle.DEFAULT_PROTOCOL",
   "evalml.pipelines.components.ComponentBase.load",
   "evalml.pipelines.components.Estimator",
   "evalml.pipelines.components.utils.all_components",
   "os.path.join"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_serialization_protocol": {
  "lineno": 752,
  "symbols_in_volume": [
   "cloudpickle.DEFAULT_PROTOCOL",
   "evalml.pipelines.components.LogisticRegressionClassifier",
   "os.path.join",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit": {
  "lineno": 609,
  "symbols_in_volume": [
   "evalml.exceptions.ComponentNotYetFittedError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformer": {
  "lineno": 620,
  "symbols_in_volume": [
   "evalml.pipelines.components.Transformer"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformer.__init__": {
  "lineno": 623,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformerObj": {
  "lineno": 610,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformerObj.__init__": {
  "lineno": 611,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformerObj.fit": {
  "lineno": 614,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit.MockTransformerObj.transform": {
  "lineno": 617,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides": {
  "lineno": 636,
  "symbols_in_volume": [
   "evalml.exceptions.ComponentNotYetFittedError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverride": {
  "lineno": 637,
  "symbols_in_volume": [
   "evalml.pipelines.components.Transformer"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverride.fit": {
  "lineno": 640,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverride.transform": {
  "lineno": 643,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverrideSubclass": {
  "lineno": 646,
  "symbols_in_volume": [
   "evalml.pipelines.components.Transformer"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverrideSubclass.fit": {
  "lineno": 649,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_check_for_fit_with_overrides.MockTransformerWithOverrideSubclass.transform": {
  "lineno": 652,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_components.test_transformer_transform_output_type": {
  "lineno": 425,
  "symbols_in_volume": [
   "evalml.pipelines.components.SelectColumns",
   "evalml.pipelines.components.utils._all_transformers",
   "numpy.ndarray",
   "pandas.DataFrame",
   "pandas.Index",
   "pandas.RangeIndex",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_custom_features_to_extract": {
  "lineno": 63,
  "symbols_in_volume": [
   "evalml.pipelines.components.DateTimeFeaturizer",
   "pandas.DataFrame",
   "pandas.date_range"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_fit_transform": {
  "lineno": 36,
  "symbols_in_volume": [
   "evalml.pipelines.components.DateTimeFeaturizer",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.date_range"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_init": {
  "lineno": 8,
  "symbols_in_volume": [
   "evalml.pipelines.components.DateTimeFeaturizer",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_no_col_names": {
  "lineno": 48,
  "symbols_in_volume": [
   "evalml.pipelines.components.DateTimeFeaturizer",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.date_range"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_no_datetime_cols": {
  "lineno": 71,
  "symbols_in_volume": [
   "evalml.pipelines.components.DateTimeFeaturizer",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_no_features_to_extract": {
  "lineno": 55,
  "symbols_in_volume": [
   "evalml.pipelines.components.DateTimeFeaturizer",
   "pandas.DataFrame",
   "pandas.date_range"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_numpy_array_input": {
  "lineno": 78,
  "symbols_in_volume": [
   "evalml.pipelines.components.DateTimeFeaturizer",
   "numpy.array"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_datetime_featurizer.test_datetime_featurizer_transform": {
  "lineno": 19,
  "symbols_in_volume": [
   "evalml.pipelines.components.DateTimeFeaturizer",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.date_range"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_fit_transform": {
  "lineno": 67,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropNullColumns",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_init": {
  "lineno": 8,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropNullColumns",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_np_array": {
  "lineno": 96,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropNullColumns",
   "numpy.array",
   "numpy.delete",
   "numpy.nan",
   "numpy.testing.assert_allclose",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_transform_boundary_pct_null_threshold": {
  "lineno": 50,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropNullColumns",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_transform_custom_pct_null_threshold": {
  "lineno": 36,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropNullColumns",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_drop_null_columns_transformer.test_drop_null_transformer_transform_default_pct_null_threshold": {
  "lineno": 28,
  "symbols_in_volume": [
   "evalml.pipelines.components.DropNullColumns",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_en_classifier.test_en_parameters": {
  "lineno": 15,
  "symbols_in_volume": [
   "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_feature_importance": {
  "lineno": 76,
  "symbols_in_volume": [
   "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier",
   "numpy.testing.assert_almost_equal",
   "sklearn.linear_model.SGDClassifier"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_feature_importance_multi": {
  "lineno": 93,
  "symbols_in_volume": [
   "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier",
   "numpy.linalg.norm",
   "numpy.testing.assert_almost_equal",
   "sklearn.linear_model.SGDClassifier"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_fit_predict_binary": {
  "lineno": 32,
  "symbols_in_volume": [
   "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier",
   "numpy.testing.assert_almost_equal",
   "sklearn.linear_model.SGDClassifier"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_fit_predict_multi": {
  "lineno": 54,
  "symbols_in_volume": [
   "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier",
   "numpy.testing.assert_almost_equal",
   "sklearn.linear_model.SGDClassifier"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_model_family": {
  "lineno": 11,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier.model_family"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_classifier.test_problem_types": {
  "lineno": 26,
  "symbols_in_volume": [
   "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier.supported_problem_types",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_regressor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_en_regressor.test_en_parameters": {
  "lineno": 15,
  "symbols_in_volume": [
   "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_regressor.test_feature_importance": {
  "lineno": 49,
  "symbols_in_volume": [
   "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor",
   "numpy.testing.assert_almost_equal",
   "sklearn.linear_model.ElasticNet"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_regressor.test_fit_predict": {
  "lineno": 31,
  "symbols_in_volume": [
   "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor",
   "numpy.testing.assert_almost_equal",
   "sklearn.linear_model.ElasticNet"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_regressor.test_model_family": {
  "lineno": 11,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor.model_family"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_en_regressor.test_problem_types": {
  "lineno": 26,
  "symbols_in_volume": [
   "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor.supported_problem_types",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_estimators": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_estimators.test_binary_classification_estimators_predict_proba_col_order": {
  "lineno": 34,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils._all_estimators_used_in_search",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.handle_problem_types",
   "numpy.array",
   "numpy.concatenate",
   "numpy.ones",
   "numpy.round",
   "numpy.testing.assert_allclose",
   "numpy.zeros",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_estimators.test_estimators_feature_name_with_random_ascii": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils._all_estimators_used_in_search",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "evalml.problem_types.handle_problem_types",
   "numpy.isnan",
   "pandas.DataFrame",
   "string.printable"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_et_classifier.test_et_parameters": {
  "lineno": 19,
  "symbols_in_volume": [
   "evalml.pipelines.ExtraTreesClassifier"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier.test_feature_importance": {
  "lineno": 66,
  "symbols_in_volume": [
   "evalml.pipelines.ExtraTreesClassifier",
   "numpy.testing.assert_almost_equal",
   "sklearn.ensemble.ExtraTreesClassifier"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier.test_fit_predict_binary": {
  "lineno": 32,
  "symbols_in_volume": [
   "evalml.pipelines.ExtraTreesClassifier",
   "numpy.testing.assert_almost_equal",
   "sklearn.ensemble.ExtraTreesClassifier"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier.test_fit_predict_multi": {
  "lineno": 49,
  "symbols_in_volume": [
   "evalml.pipelines.ExtraTreesClassifier",
   "numpy.testing.assert_almost_equal",
   "sklearn.ensemble.ExtraTreesClassifier"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier.test_model_family": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.EXTRA_TREES",
   "evalml.pipelines.ExtraTreesClassifier.model_family"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_classifier.test_problem_types": {
  "lineno": 13,
  "symbols_in_volume": [
   "evalml.pipelines.ExtraTreesClassifier.supported_problem_types",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_regressor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_et_regressor.test_et_parameters": {
  "lineno": 18,
  "symbols_in_volume": [
   "evalml.pipelines.ExtraTreesRegressor"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_regressor.test_feature_importance": {
  "lineno": 45,
  "symbols_in_volume": [
   "evalml.pipelines.ExtraTreesRegressor",
   "numpy.testing.assert_almost_equal",
   "sklearn.ensemble.ExtraTreesRegressor"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_regressor.test_fit_predict": {
  "lineno": 31,
  "symbols_in_volume": [
   "evalml.pipelines.ExtraTreesRegressor",
   "numpy.testing.assert_almost_equal",
   "sklearn.ensemble.ExtraTreesRegressor"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_regressor.test_model_family": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.EXTRA_TREES",
   "evalml.pipelines.ExtraTreesRegressor.model_family"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_et_regressor.test_problem_types": {
  "lineno": 13,
  "symbols_in_volume": [
   "evalml.pipelines.ExtraTreesRegressor.supported_problem_types",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_feature_selectors": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_feature_selectors.make_rf_feature_selectors": {
  "lineno": 12,
  "symbols_in_volume": [
   "evalml.pipelines.components.RFClassifierSelectFromModel",
   "evalml.pipelines.components.RFRegressorSelectFromModel"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_feature_selectors.test_component_fit": {
  "lineno": 36,
  "symbols_in_volume": [
   "evalml.pipelines.components.ComponentBase"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_feature_selectors.test_feature_selector_missing_component_obj": {
  "lineno": 47,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_feature_selectors.test_feature_selector_missing_component_obj.MockFeatureSelector": {
  "lineno": 48,
  "symbols_in_volume": [
   "evalml.pipelines.components.FeatureSelector"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_feature_selectors.test_feature_selector_missing_component_obj.MockFeatureSelector.fit": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_feature_selectors.test_init": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_imputer.imputer_test_data": {
  "lineno": 9,
  "symbols_in_volume": [
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_categorical_and_numeric_input": {
  "lineno": 110,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_categorical_only_input": {
  "lineno": 88,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_drop_all_columns": {
  "lineno": 135,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "pandas.Series",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_datetime_input": {
  "lineno": 167,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal",
   "pandas.to_datetime"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_default_parameters": {
  "lineno": 34,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_empty_data": {
  "lineno": 184,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "numpy.array",
   "pandas.DataFrame",
   "pandas.Index",
   "pandas.Int64Index",
   "pandas.Series",
   "pandas.testing.assert_frame_equal",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_fill_value": {
  "lineno": 225,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_init": {
  "lineno": 45,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_no_nans": {
  "lineno": 248,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_imputer_resets_index": {
  "lineno": 204,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "numpy.arange",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_invalid_strategy_parameters": {
  "lineno": 27,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_numeric_only_input": {
  "lineno": 68,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_imputer.test_typed_imputer_numpy_input": {
  "lineno": 149,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "numpy.array",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_lsa.test_all_missing_col_names": {
  "lineno": 81,
  "symbols_in_volume": [
   "evalml.pipelines.components.LSA",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa.test_empty_text_column": {
  "lineno": 90,
  "symbols_in_volume": [
   "evalml.pipelines.components.LSA",
   "pandas.DataFrame",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa.test_index_col_names": {
  "lineno": 117,
  "symbols_in_volume": [
   "evalml.pipelines.components.LSA",
   "numpy.array",
   "numpy.float64"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa.test_int_col_names": {
  "lineno": 134,
  "symbols_in_volume": [
   "evalml.pipelines.components.LSA",
   "numpy.float64",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa.test_invalid_text_column": {
  "lineno": 97,
  "symbols_in_volume": [
   "evalml.pipelines.components.LSA",
   "numpy.nan",
   "pandas.DataFrame",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa.test_lsa_no_text": {
  "lineno": 55,
  "symbols_in_volume": [
   "evalml.pipelines.components.LSA",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa.test_lsa_only_text": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.pipelines.components.LSA",
   "numpy.float64"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa.test_lsa_output": {
  "lineno": 169,
  "symbols_in_volume": [
   "evalml.pipelines.components.LSA",
   "numpy.testing.assert_almost_equal",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa.test_lsa_with_nontext": {
  "lineno": 38,
  "symbols_in_volume": [
   "evalml.pipelines.components.LSA",
   "numpy.float64"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa.test_repeat_col_names": {
  "lineno": 155,
  "symbols_in_volume": [
   "evalml.pipelines.components.LSA",
   "numpy.array",
   "numpy.float64",
   "numpy.testing.assert_array_equal",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa.test_some_missing_col_names": {
  "lineno": 63,
  "symbols_in_volume": [
   "evalml.pipelines.components.LSA",
   "logging.WARNING",
   "numpy.float64"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_lsa.text_df": {
  "lineno": 10,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_all_numerical_dtype": {
  "lineno": 293,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_categorical_dtype": {
  "lineno": 273,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_categories": {
  "lineno": 173,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "pandas.DataFrame",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_data_types": {
  "lineno": 330,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "numpy.array",
   "numpy.identity",
   "numpy.testing.assert_array_equal",
   "pandas.DataFrame",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_drop": {
  "lineno": 109,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_handle_unknown": {
  "lineno": 122,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "pandas.DataFrame",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_init": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_invalid_inputs": {
  "lineno": 31,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "pandas.DataFrame",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_large_number_of_categories": {
  "lineno": 314,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "numpy.arange",
   "numpy.array",
   "numpy.concatenate",
   "numpy.repeat",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_less_than_top_n_unique_values": {
  "lineno": 200,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_more_top_n_unique_values": {
  "lineno": 216,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "evalml.utils.get_random_state",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_more_top_n_unique_values_large": {
  "lineno": 249,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "evalml.utils.get_random_state",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_no_top_n": {
  "lineno": 141,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "pandas.DataFrame",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_null_values_in_dataframe": {
  "lineno": 54,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "numpy.nan",
   "pandas.DataFrame",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_numpy_input": {
  "lineno": 306,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder",
   "numpy.array",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_one_hot_encoder.test_parameters": {
  "lineno": 19,
  "symbols_in_volume": [
   "evalml.pipelines.components.OneHotEncoder"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_per_column_imputer.non_numeric_df": {
  "lineno": 9,
  "symbols_in_volume": [
   "numpy.nan",
   "pandas.DataFrame",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_all_strategies": {
  "lineno": 29,
  "symbols_in_volume": [
   "evalml.pipelines.components.PerColumnImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_fit_transform": {
  "lineno": 55,
  "symbols_in_volume": [
   "evalml.pipelines.components.PerColumnImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_fit_transform_drop_all_nan_columns": {
  "lineno": 134,
  "symbols_in_volume": [
   "evalml.pipelines.components.PerColumnImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_invalid_parameters": {
  "lineno": 19,
  "symbols_in_volume": [
   "evalml.pipelines.components.PerColumnImputer",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_non_numeric_errors": {
  "lineno": 81,
  "symbols_in_volume": [
   "evalml.pipelines.components.PerColumnImputer",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_non_numeric_valid": {
  "lineno": 104,
  "symbols_in_volume": [
   "evalml.pipelines.components.PerColumnImputer",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_transform_drop_all_nan_columns": {
  "lineno": 150,
  "symbols_in_volume": [
   "evalml.pipelines.components.PerColumnImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_per_column_imputer.test_transform_drop_all_nan_columns_empty": {
  "lineno": 166,
  "symbols_in_volume": [
   "evalml.pipelines.components.PerColumnImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_col_with_non_numeric": {
  "lineno": 65,
  "symbols_in_volume": [
   "evalml.pipelines.components.SimpleImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_constant": {
  "lineno": 38,
  "symbols_in_volume": [
   "evalml.pipelines.components.SimpleImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_fit_transform_drop_all_nan_columns": {
  "lineno": 101,
  "symbols_in_volume": [
   "evalml.pipelines.components.SimpleImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_mean": {
  "lineno": 25,
  "symbols_in_volume": [
   "evalml.pipelines.components.SimpleImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_median": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.pipelines.components.SimpleImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_most_frequent": {
  "lineno": 52,
  "symbols_in_volume": [
   "evalml.pipelines.components.SimpleImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_numpy_input": {
  "lineno": 140,
  "symbols_in_volume": [
   "evalml.pipelines.components.SimpleImputer",
   "numpy.allclose",
   "numpy.array",
   "numpy.nan",
   "numpy.testing.assert_almost_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_simple_imputer_fill_value": {
  "lineno": 154,
  "symbols_in_volume": [
   "evalml.pipelines.components.SimpleImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_simple_imputer_resets_index": {
  "lineno": 187,
  "symbols_in_volume": [
   "evalml.pipelines.components.SimpleImputer",
   "numpy.arange",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_transform_drop_all_nan_columns": {
  "lineno": 115,
  "symbols_in_volume": [
   "evalml.pipelines.components.SimpleImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_simple_imputer.test_transform_drop_all_nan_columns_empty": {
  "lineno": 128,
  "symbols_in_volume": [
   "evalml.pipelines.components.SimpleImputer",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_all_missing_col_names": {
  "lineno": 111,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_diversity_primitive_output": {
  "lineno": 196,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "numpy.testing.assert_almost_equal",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_featurizer_no_text": {
  "lineno": 76,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_featurizer_only_text": {
  "lineno": 26,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "numpy.float64"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_featurizer_with_nontext": {
  "lineno": 50,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "numpy.float64"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_index_col_names": {
  "lineno": 140,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "numpy.array",
   "numpy.float64"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_int_col_names": {
  "lineno": 166,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "numpy.float64",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_invalid_text_column": {
  "lineno": 120,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "numpy.nan",
   "pandas.DataFrame",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_lsa_primitive_output": {
  "lineno": 210,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "numpy.testing.assert_almost_equal",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_mean_characters_primitive_output": {
  "lineno": 227,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "numpy.testing.assert_almost_equal",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_part_of_speech_primitive_output": {
  "lineno": 241,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "numpy.testing.assert_almost_equal",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_polarity_primitive_output": {
  "lineno": 258,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "numpy.testing.assert_almost_equal",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.test_some_missing_col_names": {
  "lineno": 84,
  "symbols_in_volume": [
   "evalml.pipelines.components.TextFeaturizer",
   "logging.WARNING",
   "numpy.float64"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_text_featurizer.text_df": {
  "lineno": 13,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.component_tests.test_utils.test_all_components": {
  "lineno": 13,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils.all_components"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_utils.test_handle_component_class_names": {
  "lineno": 20,
  "symbols_in_volume": [
   "evalml.exceptions.MissingComponentError",
   "evalml.pipelines.components.ComponentBase",
   "evalml.pipelines.components.utils.all_components",
   "evalml.pipelines.components.utils.handle_component_class",
   "inspect.isclass",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_utils.test_handle_component_class_names.NonComponent": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.component_tests.test_xgboost_classifier": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.test_xgboost_classifier_random_state_bounds_rng": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.pipelines.components.XGBoostClassifier",
   "evalml.pipelines.components.XGBoostClassifier.SEED_MAX",
   "evalml.pipelines.components.XGBoostClassifier.SEED_MIN",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.test_xgboost_classifier_random_state_bounds_rng.make_mock_random_state": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.test_xgboost_classifier_random_state_bounds_rng.make_mock_random_state.MockRandomState": {
  "lineno": 28,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.test_xgboost_classifier_random_state_bounds_rng.make_mock_random_state.MockRandomState.randint": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_classifier.test_xgboost_classifier_random_state_bounds_seed": {
  "lineno": 11,
  "symbols_in_volume": [
   "evalml.pipelines.components.XGBoostClassifier",
   "evalml.utils.SEED_BOUNDS.max_bound",
   "evalml.utils.SEED_BOUNDS.min_bound",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_regressor": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.test_xgboost_regressor_random_state_bounds_rng": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.pipelines.components.XGBoostRegressor",
   "evalml.pipelines.components.XGBoostRegressor.SEED_MAX",
   "evalml.pipelines.components.XGBoostRegressor.SEED_MIN",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.test_xgboost_regressor_random_state_bounds_rng.make_mock_random_state": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.test_xgboost_regressor_random_state_bounds_rng.make_mock_random_state.MockRandomState": {
  "lineno": 28,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "class"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.test_xgboost_regressor_random_state_bounds_rng.make_mock_random_state.MockRandomState.randint": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.component_tests.test_xgboost_regressor.test_xgboost_regressor_random_state_bounds_seed": {
  "lineno": 11,
  "symbols_in_volume": [
   "evalml.pipelines.components.XGBoostRegressor",
   "evalml.utils.SEED_BOUNDS.max_bound",
   "evalml.utils.SEED_BOUNDS.min_bound",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.conftest": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.conftest.X_y_binary": {
  "lineno": 80,
  "symbols_in_volume": [
   "pytest.fixture",
   "sklearn.datasets.make_classification"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.X_y_categorical_classification": {
  "lineno": 115,
  "symbols_in_volume": [
   "os.path.dirname",
   "os.path.join",
   "pandas.read_csv",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.X_y_categorical_regression": {
  "lineno": 102,
  "symbols_in_volume": [
   "os.path.dirname",
   "os.path.join",
   "pandas.read_csv",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.X_y_multi": {
  "lineno": 95,
  "symbols_in_volume": [
   "pytest.fixture",
   "sklearn.datasets.make_classification"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.X_y_regression": {
  "lineno": 88,
  "symbols_in_volume": [
   "pytest.fixture",
   "sklearn.datasets.make_regression"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.all_binary_pipeline_classes": {
  "lineno": 44,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.all_multiclass_pipeline_classes": {
  "lineno": 49,
  "symbols_in_volume": [
   "evalml.pipelines.MulticlassClassificationPipeline",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.all_pipeline_classes": {
  "lineno": 35,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils._all_estimators",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.assert_allowed_pipelines_equal_helper": {
  "lineno": 65,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.assert_allowed_pipelines_equal_helper.assert_allowed_pipelines_equal_helper": {
  "lineno": 67,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.pipelines.MulticlassClassificationPipeline",
   "evalml.pipelines.RegressionPipeline"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.create_mock_pipeline": {
  "lineno": 20,
  "symbols_in_volume": [
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.create_mock_pipeline.MockBinaryPipelineWithOnlyEstimator": {
  "lineno": 22,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.conftest.create_mock_pipeline.MockMulticlassPipelineWithOnlyEstimator": {
  "lineno": 26,
  "symbols_in_volume": [
   "evalml.pipelines.MulticlassClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.conftest.create_mock_pipeline.MockRegressionPipelineWithOnlyEstimator": {
  "lineno": 30,
  "symbols_in_volume": [
   "evalml.pipelines.RegressionPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.conftest.dummy_binary_pipeline_class": {
  "lineno": 170,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.dummy_binary_pipeline_class.MockBinaryClassificationPipeline": {
  "lineno": 174,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.conftest.dummy_classifier_estimator_class": {
  "lineno": 153,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.dummy_classifier_estimator_class.MockEstimator": {
  "lineno": 155,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.NONE",
   "evalml.pipelines.components.Estimator",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS"
  ],
  "type": "class"
 },
 "evalml.tests.conftest.dummy_classifier_estimator_class.MockEstimator.__init__": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.conftest.dummy_classifier_estimator_class.MockEstimator.fit": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.conftest.dummy_multiclass_pipeline_class": {
  "lineno": 181,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.dummy_multiclass_pipeline_class.MockMulticlassClassificationPipeline": {
  "lineno": 185,
  "symbols_in_volume": [
   "evalml.pipelines.MulticlassClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.conftest.dummy_pipeline_hyperparameters": {
  "lineno": 125,
  "symbols_in_volume": [
   "numpy.inf",
   "pytest.fixture",
   "skopt.space.Integer",
   "skopt.space.Real"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.dummy_pipeline_hyperparameters_small": {
  "lineno": 145,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.dummy_pipeline_hyperparameters_unicode": {
  "lineno": 135,
  "symbols_in_volume": [
   "numpy.inf",
   "pytest.fixture",
   "skopt.space.Integer",
   "skopt.space.Real"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.dummy_regression_pipeline_class": {
  "lineno": 209,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.dummy_regression_pipeline_class.MockRegressionPipeline": {
  "lineno": 213,
  "symbols_in_volume": [
   "evalml.pipelines.RegressionPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.conftest.dummy_regressor_estimator_class": {
  "lineno": 192,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.dummy_regressor_estimator_class.MockRegressor": {
  "lineno": 194,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.NONE",
   "evalml.pipelines.components.Estimator",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "class"
 },
 "evalml.tests.conftest.dummy_regressor_estimator_class.MockRegressor.__init__": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.conftest.dummy_regressor_estimator_class.MockRegressor.fit": {
  "lineno": 203,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.conftest.has_minimal_dependencies": {
  "lineno": 60,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.linear_regression_pipeline_class": {
  "lineno": 233,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.linear_regression_pipeline_class.LinearRegressionPipeline": {
  "lineno": 235,
  "symbols_in_volume": [
   "evalml.pipelines.RegressionPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.conftest.logistic_regression_binary_pipeline_class": {
  "lineno": 226,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.logistic_regression_binary_pipeline_class.LogisticRegressionBinaryPipeline": {
  "lineno": 228,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.conftest.logistic_regression_multiclass_pipeline_class": {
  "lineno": 218,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.conftest.logistic_regression_multiclass_pipeline_class.LogisticRegressionMulticlassPipeline": {
  "lineno": 220,
  "symbols_in_volume": [
   "evalml.pipelines.MulticlassClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.conftest.pytest_addoption": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.data_checks_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_data_check.mock_data_check_class": {
  "lineno": 11,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.mock_data_check_class.MockDataCheck": {
  "lineno": 13,
  "symbols_in_volume": [
   "evalml.data_checks.data_check.DataCheck"
  ],
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_check.mock_data_check_class.MockDataCheck.validate": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_name": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_name.Funky_Name1DataCheck": {
  "lineno": 23,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_validate_simple": {
  "lineno": 34,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError",
   "evalml.data_checks.data_check_message.DataCheckWarning"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_validate_simple.MockDataCheck": {
  "lineno": 37,
  "symbols_in_volume": [
   "evalml.data_checks.data_check.DataCheck"
  ],
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_validate_simple.MockDataCheck.validate": {
  "lineno": 38,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError",
   "evalml.data_checks.data_check_message.DataCheckWarning"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_with_param": {
  "lineno": 45,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_with_param.MockDataCheckWithParam": {
  "lineno": 48,
  "symbols_in_volume": [
   "evalml.data_checks.data_check.DataCheck"
  ],
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_with_param.MockDataCheckWithParam.__init__": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_data_check_with_param.MockDataCheckWithParam.validate": {
  "lineno": 52,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check.test_empty_data_check_validate": {
  "lineno": 30,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.data_check_error": {
  "lineno": 25,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.data_check_message": {
  "lineno": 11,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckMessage",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.data_check_warning": {
  "lineno": 18,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_error_attributes": {
  "lineno": 68,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message_type.DataCheckMessageType.ERROR"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_error_eq": {
  "lineno": 78,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_error_str": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_message_attributes": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_message_eq": {
  "lineno": 42,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckMessage"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_message_str": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_warning_attributes": {
  "lineno": 50,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message_type.DataCheckMessageType.WARNING"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_warning_eq": {
  "lineno": 60,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_data_check_warning_str": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_check_message.test_warning_error_eq": {
  "lineno": 86,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError",
   "evalml.data_checks.data_check_message.DataCheckWarning"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError",
   "evalml.data_checks.data_check_message.DataCheckWarning"
  ],
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks": {
  "lineno": 14,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError",
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.data_checks.DataChecks"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheck": {
  "lineno": 17,
  "symbols_in_volume": [
   "evalml.data_checks.data_check.DataCheck"
  ],
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheck.validate": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckError": {
  "lineno": 25,
  "symbols_in_volume": [
   "evalml.data_checks.data_check.DataCheck"
  ],
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckError.validate": {
  "lineno": 26,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckErrorAndWarning": {
  "lineno": 29,
  "symbols_in_volume": [
   "evalml.data_checks.data_check.DataCheck"
  ],
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckErrorAndWarning.validate": {
  "lineno": 30,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError",
   "evalml.data_checks.data_check_message.DataCheckWarning"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckWarning": {
  "lineno": 21,
  "symbols_in_volume": [
   "evalml.data_checks.data_check.DataCheck"
  ],
  "type": "class"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_data_checks.MockDataCheckWarning.validate": {
  "lineno": 22,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_default_data_checks_classification": {
  "lineno": 56,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.default_data_checks.DefaultDataChecks",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_default_data_checks_regression": {
  "lineno": 76,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError",
   "evalml.data_checks.default_data_checks.DefaultDataChecks",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_data_checks.test_empty_data_checks": {
  "lineno": 41,
  "symbols_in_volume": [
   "evalml.data_checks.utils.EmptyDataChecks"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check.test_highly_null_data_check_init": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check.test_highly_null_data_check_input_formats": {
  "lineno": 42,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck",
   "numpy.array",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_highly_null_data_check.test_highly_null_data_check_warnings": {
  "lineno": 28,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.highly_null_data_check.HighlyNullDataCheck",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.test_id_cols_data_check_init": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.test_id_cols_data_check_input_formats": {
  "lineno": 69,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck",
   "numpy.array",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.test_id_columns_strings": {
  "lineno": 49,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck",
   "pandas.DataFrame.from_dict"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_id_columns_data_check.test_id_columns_warning": {
  "lineno": 28,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.id_columns_data_check.IDColumnsDataCheck",
   "pandas.DataFrame.from_dict"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.test_invalid_target_data_check_invalid_data_types_error": {
  "lineno": 36,
  "symbols_in_volume": [
   "evalml.data_checks.DataCheckError",
   "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck",
   "evalml.utils.gen_utils.categorical_dtypes",
   "evalml.utils.gen_utils.numeric_and_boolean_dtypes",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.date_range"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.test_invalid_target_data_check_nan_error": {
  "lineno": 14,
  "symbols_in_volume": [
   "evalml.data_checks.DataCheckError",
   "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.test_invalid_target_data_check_numeric_binary_classification_error": {
  "lineno": 28,
  "symbols_in_volume": [
   "evalml.data_checks.DataCheckError",
   "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.test_invalid_target_data_check_numeric_binary_classification_valid_float": {
  "lineno": 22,
  "symbols_in_volume": [
   "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_invalid_targets_data_check.test_invalid_target_data_input_formats": {
  "lineno": 49,
  "symbols_in_volume": [
   "evalml.data_checks.DataCheckError",
   "evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck",
   "numpy.array",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check.test_label_leakage_data_check_init": {
  "lineno": 8,
  "symbols_in_volume": [
   "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check.test_label_leakage_data_check_input_formats": {
  "lineno": 44,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_label_leakage_data_check.test_label_leakage_data_check_warnings": {
  "lineno": 27,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckError",
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck.name",
   "numpy.arange",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_no_variance_data_check.test_no_variance_data_check_warnings": {
  "lineno": 49,
  "symbols_in_volume": [
   "evalml.data_checks.no_variance_data_check.NoVarianceDataCheck",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check.test_outliers_data_check_init": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.data_checks.outliers_data_check.OutliersDataCheck",
   "evalml.utils.get_random_state"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check.test_outliers_data_check_input_formats": {
  "lineno": 34,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.outliers_data_check.OutliersDataCheck",
   "numpy.arange",
   "numpy.random.randn",
   "numpy.tile",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.data_checks_tests.test_outliers_data_check.test_outliers_data_check_warnings": {
  "lineno": 17,
  "symbols_in_volume": [
   "evalml.data_checks.data_check_message.DataCheckWarning",
   "evalml.data_checks.outliers_data_check.OutliersDataCheck",
   "numpy.arange",
   "numpy.random.randn",
   "numpy.tile",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.demo_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.demo_tests.test_datasets": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.demo_tests.test_datasets.test_breast_cancer": {
  "lineno": 20,
  "symbols_in_volume": [
   "evalml.demos.load_breast_cancer"
  ],
  "type": "function"
 },
 "evalml.tests.demo_tests.test_datasets.test_churn": {
  "lineno": 32,
  "symbols_in_volume": [
   "evalml.demos.load_churn"
  ],
  "type": "function"
 },
 "evalml.tests.demo_tests.test_datasets.test_diabetes": {
  "lineno": 26,
  "symbols_in_volume": [
   "evalml.demos.load_diabetes"
  ],
  "type": "function"
 },
 "evalml.tests.demo_tests.test_datasets.test_fraud": {
  "lineno": 4,
  "symbols_in_volume": [
   "evalml.demos.load_fraud"
  ],
  "type": "function"
 },
 "evalml.tests.demo_tests.test_datasets.test_wine": {
  "lineno": 14,
  "symbols_in_volume": [
   "evalml.demos.load_wine"
  ],
  "type": "function"
 },
 "evalml.tests.model_family_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.model_family_tests.test_model_family": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.model_family_tests.test_model_family.correct_model_families": {
  "lineno": 6,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.BASELINE",
   "evalml.model_family.ModelFamily.CATBOOST",
   "evalml.model_family.ModelFamily.EXTRA_TREES",
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.model_family.ModelFamily.NONE",
   "evalml.model_family.ModelFamily.RANDOM_FOREST",
   "evalml.model_family.ModelFamily.XGBOOST",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.model_family_tests.test_model_family.test_handle_incorrect_type": {
  "lineno": 28,
  "symbols_in_volume": [
   "evalml.model_family.handle_model_family",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_family_tests.test_model_family.test_handle_model_family": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.model_family.handle_model_family"
  ],
  "type": "function"
 },
 "evalml.tests.model_family_tests.test_model_family.test_handle_string": {
  "lineno": 12,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.model_family.handle_model_family",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.model_family.model_family.ModelFamily.BASELINE",
   "evalml.model_family.model_family.ModelFamily.XGBOOST",
   "evalml.pipelines.components.utils._all_estimators_used_in_search",
   "evalml.problem_types.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "module"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms.calculate_shap_for_test": {
  "lineno": 86,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations._algorithms._compute_shap_values",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms.make_test_pipeline": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms.make_test_pipeline.Pipeline": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms.test_create_dictionary_exception": {
  "lineno": 76,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations._algorithms._create_dictionary",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms.test_normalize_values": {
  "lineno": 149,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations._algorithms._normalize_shap_values",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms.test_normalize_values.check_equal_dicts": {
  "lineno": 160,
  "symbols_in_volume": [
   "numpy.testing.assert_almost_equal"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms.test_normalize_values_exceptions": {
  "lineno": 143,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations._algorithms._normalize_shap_values",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms.test_shap": {
  "lineno": 99,
  "symbols_in_volume": [
   "evalml.model_family.model_family.ModelFamily.CATBOOST",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.problem_types.ProblemTypes.REGRESSION",
   "itertools.product",
   "pytest.mark.parametrize",
   "pytest.skip"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms.test_value_errors_raised": {
  "lineno": 55,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations._algorithms._compute_shap_values",
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.pipelines.MeanBaselineRegressionPipeline",
   "evalml.pipelines.ModeBaselineBinaryPipeline",
   "evalml.pipelines.ModeBaselineMulticlassPipeline",
   "evalml.pipelines.MulticlassClassificationPipeline",
   "evalml.pipelines.RegressionPipeline",
   "evalml.pipelines.components.CatBoostClassifier",
   "evalml.pipelines.components.LinearRegressor",
   "evalml.pipelines.components.RandomForestClassifier",
   "evalml.pipelines.components.XGBoostClassifier",
   "evalml.pipelines.components.XGBoostRegressor",
   "numpy.random.random",
   "pandas.DataFrame",
   "pytest.importorskip",
   "pytest.mark.parametrize",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.ones",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "module"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.compare_two_tables": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.test_error_metrics": {
  "lineno": 107,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations.explainers.abs_error",
   "evalml.model_understanding.prediction_explanations.explainers.cross_entropy",
   "numpy.log",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_series_equal"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.test_explain_prediction": {
  "lineno": 73,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations.explainers.explain_prediction",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pandas.DataFrame",
   "pytest.mark.parametrize",
   "unittest.mock.MagicMock",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.test_explain_prediction_value_error": {
  "lineno": 28,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations.explainers.explain_prediction",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.test_explain_predictions_best_worst_and_explain_predictions": {
  "lineno": 270,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations.explainers.explain_predictions",
   "evalml.model_understanding.prediction_explanations.explainers.explain_predictions_best_worst",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.mark.parametrize",
   "unittest.mock.MagicMock",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.test_explain_predictions_best_worst_custom_metric": {
  "lineno": 377,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations.explainers.explain_predictions_best_worst",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pandas.DataFrame",
   "pandas.Series",
   "unittest.mock.MagicMock",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.test_explain_predictions_best_worst_custom_metric.sum": {
  "lineno": 390,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.test_explain_predictions_best_worst_value_errors": {
  "lineno": 122,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations.explainers.explain_predictions_best_worst",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.test_explain_predictions_custom_index": {
  "lineno": 320,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations.explainers.explain_predictions",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.mark.parametrize",
   "unittest.mock.MagicMock",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.test_explain_predictions_raises_pipeline_score_error": {
  "lineno": 128,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineScoreError",
   "evalml.model_understanding.prediction_explanations.explainers.explain_predictions_best_worst",
   "evalml.problem_types.ProblemTypes.BINARY",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.raises",
   "unittest.mock.MagicMock"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.test_explain_predictions_raises_pipeline_score_error.raise_zero_division": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers.test_explain_predictions_value_errors": {
  "lineno": 140,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations.explainers.explain_predictions",
   "pandas.DataFrame",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface": {
  "lineno": null,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "module"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface.test_make_rows_and_make_table": {
  "lineno": 26,
  "symbols_in_volume": [
   "copy.deepcopy",
   "evalml.model_understanding.prediction_explanations._user_interface._make_rows",
   "evalml.model_understanding.prediction_explanations._user_interface._make_table",
   "itertools.product",
   "numpy.datetime64",
   "pandas.DataFrame",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface.test_make_single_prediction_table": {
  "lineno": 209,
  "symbols_in_volume": [
   "evalml.model_understanding.prediction_explanations._user_interface._SHAPBinaryTableMaker",
   "evalml.model_understanding.prediction_explanations._user_interface._SHAPMultiClassTableMaker",
   "evalml.model_understanding.prediction_explanations._user_interface._SHAPRegressionTableMaker",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.model_understanding_tests.test_graphs.binarized_ys": {
  "lineno": 126,
  "symbols_in_volume": [
   "numpy.random.RandomState",
   "pytest.fixture",
   "sklearn.preprocessing.label_binarize"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_binary_objective_vs_threshold": {
  "lineno": 486,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.binary_objective_vs_threshold",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_binary_objective_vs_threshold_steps": {
  "lineno": 506,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.binary_objective_vs_threshold",
   "evalml.objectives.CostBenefitMatrix",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_confusion_matrix": {
  "lineno": 49,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.confusion_matrix",
   "numpy.allclose",
   "numpy.array",
   "numpy.array_equal",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_cost_benefit_matrix_vs_threshold": {
  "lineno": 472,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.binary_objective_vs_threshold",
   "evalml.objectives.CostBenefitMatrix"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_get_permutation_importance_binary": {
  "lineno": 377,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.calculate_permutation_importance",
   "evalml.objectives.get_objectives",
   "evalml.problem_types.ProblemTypes.BINARY",
   "numpy.random.RandomState",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_get_permutation_importance_correlated_features": {
  "lineno": 411,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.calculate_permutation_importance",
   "numpy.random.RandomState",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_get_permutation_importance_invalid_objective": {
  "lineno": 370,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.calculate_permutation_importance",
   "numpy.random.RandomState",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_get_permutation_importance_multiclass": {
  "lineno": 391,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.calculate_permutation_importance",
   "evalml.objectives.get_objectives",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_get_permutation_importance_regression": {
  "lineno": 401,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.calculate_permutation_importance",
   "evalml.objectives.get_objectives",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_binary_objective_vs_threshold": {
  "lineno": 521,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.graph_binary_objective_vs_threshold",
   "evalml.objectives.CostBenefitMatrix",
   "numpy.any",
   "numpy.array_equal",
   "numpy.isnan",
   "pandas.DataFrame",
   "pytest.importorskip",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_confusion_matrix_default": {
  "lineno": 307,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.confusion_matrix",
   "evalml.model_understanding.graphs.graph_confusion_matrix",
   "numpy.all",
   "numpy.array",
   "numpy.array_equal",
   "numpy.random.RandomState",
   "numpy.round",
   "pandas.Series",
   "pytest.importorskip",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_confusion_matrix_norm_disabled": {
  "lineno": 335,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.confusion_matrix",
   "evalml.model_understanding.graphs.graph_confusion_matrix",
   "numpy.all",
   "numpy.array",
   "numpy.array_equal",
   "numpy.random.RandomState",
   "numpy.round",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_confusion_matrix_title_addition": {
  "lineno": 359,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.graph_confusion_matrix",
   "numpy.random.RandomState",
   "numpy.round",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_partial_dependence": {
  "lineno": 607,
  "symbols_in_volume": [
   "evalml.demos.load_breast_cancer",
   "evalml.model_understanding.graphs.graph_partial_dependence",
   "evalml.model_understanding.graphs.partial_dependence",
   "numpy.array_equal",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_permutation_importance": {
  "lineno": 427,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.calculate_permutation_importance",
   "evalml.model_understanding.graphs.graph_permutation_importance",
   "numpy.array_equal",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_permutation_importance_show_all_features": {
  "lineno": 446,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.graph_permutation_importance",
   "numpy.any",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.importorskip",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_permutation_importance_threshold": {
  "lineno": 458,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.graph_permutation_importance",
   "numpy.all",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.importorskip",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_precision_recall_curve": {
  "lineno": 163,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.graph_precision_recall_curve",
   "evalml.model_understanding.graphs.precision_recall_curve",
   "numpy.array_equal",
   "numpy.random.RandomState",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.importorskip",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_precision_recall_curve_title_addition": {
  "lineno": 185,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.graph_precision_recall_curve",
   "numpy.random.RandomState",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_roc_curve_binary": {
  "lineno": 220,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.graph_roc_curve",
   "evalml.model_understanding.graphs.roc_curve",
   "numpy.array",
   "numpy.array_equal",
   "numpy.random.RandomState",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.importorskip",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_roc_curve_multiclass": {
  "lineno": 257,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.graph_roc_curve",
   "evalml.model_understanding.graphs.roc_curve",
   "numpy.array",
   "numpy.array_equal",
   "pytest.importorskip",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_roc_curve_multiclass_custom_class_names": {
  "lineno": 278,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.graph_roc_curve",
   "evalml.model_understanding.graphs.roc_curve",
   "numpy.array",
   "numpy.array_equal",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_roc_curve_nans": {
  "lineno": 243,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.graph_roc_curve",
   "numpy.allclose",
   "numpy.array",
   "numpy.array_equal",
   "numpy.nan",
   "pytest.importorskip",
   "pytest.warns",
   "sklearn.exceptions.UndefinedMetricWarning"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_graph_roc_curve_title_addition": {
  "lineno": 296,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.graph_roc_curve",
   "numpy.random.RandomState",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_normalize_confusion_matrix": {
  "lineno": 76,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.normalize_confusion_matrix",
   "numpy.array",
   "pandas.DataFrame",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_normalize_confusion_matrix_error": {
  "lineno": 109,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.normalize_confusion_matrix",
   "numpy.array",
   "pytest.raises",
   "warnings.simplefilter"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_partial_dependence_baseline": {
  "lineno": 577,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.partial_dependence",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_partial_dependence_baseline.BaselineTestPipeline": {
  "lineno": 581,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_partial_dependence_catboost": {
  "lineno": 589,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.partial_dependence"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_partial_dependence_catboost.CatBoostTestPipeline": {
  "lineno": 593,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_partial_dependence_not_fitted": {
  "lineno": 600,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.partial_dependence",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_partial_dependence_problem_types": {
  "lineno": 541,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.partial_dependence",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_partial_dependence_string_feature": {
  "lineno": 566,
  "symbols_in_volume": [
   "evalml.demos.load_breast_cancer",
   "evalml.model_understanding.graphs.partial_dependence"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_pipeline": {
  "lineno": 32,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_pipeline.TestPipeline": {
  "lineno": 34,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_pipeline.TestPipeline.__init__": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_precision_recall_curve": {
  "lineno": 145,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.precision_recall_curve",
   "numpy.array",
   "numpy.testing.assert_almost_equal"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_precision_recall_curve_return_type": {
  "lineno": 135,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.precision_recall_curve",
   "numpy.array",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "evalml.tests.model_understanding_tests.test_graphs.test_roc_curve_binary": {
  "lineno": 196,
  "symbols_in_volume": [
   "evalml.model_understanding.graphs.roc_curve",
   "numpy.array",
   "numpy.array_equal",
   "numpy.ndarray",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.approx",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.test_can_optimize_threshold": {
  "lineno": 26,
  "symbols_in_volume": [
   "evalml.objectives.standard_metrics.AUC",
   "evalml.objectives.standard_metrics.F1"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.test_decision_function": {
  "lineno": 31,
  "symbols_in_volume": [
   "evalml.objectives.standard_metrics.F1",
   "numpy.arange",
   "numpy.array",
   "pandas.Series",
   "pandas.testing.assert_series_equal"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.test_decision_function_neg": {
  "lineno": 44,
  "symbols_in_volume": [
   "evalml.objectives.standard_metrics.F1",
   "numpy.arange",
   "numpy.array",
   "pandas.Series",
   "pandas.testing.assert_series_equal"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.test_optimize_threshold": {
  "lineno": 8,
  "symbols_in_volume": [
   "evalml.objectives.standard_metrics.F1",
   "numpy.array",
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_binary_classification_objective.test_optimize_threshold_neg": {
  "lineno": 17,
  "symbols_in_volume": [
   "evalml.objectives.standard_metrics.AUC",
   "numpy.array",
   "numpy.random.seed",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_cost_benefit_matrix": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.objective_tests.test_cost_benefit_matrix.test_cbm_binary_more_than_two_unique_values": {
  "lineno": 107,
  "symbols_in_volume": [
   "evalml.objectives.CostBenefitMatrix",
   "pandas.Series",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_cost_benefit_matrix.test_cbm_different_input_lengths": {
  "lineno": 84,
  "symbols_in_volume": [
   "evalml.objectives.CostBenefitMatrix",
   "pandas.Series",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_cost_benefit_matrix.test_cbm_init": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.objectives.CostBenefitMatrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_cost_benefit_matrix.test_cbm_input_contains_inf": {
  "lineno": 70,
  "symbols_in_volume": [
   "evalml.objectives.CostBenefitMatrix",
   "numpy.array",
   "numpy.inf",
   "pandas.Series",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_cost_benefit_matrix.test_cbm_input_contains_nan": {
  "lineno": 56,
  "symbols_in_volume": [
   "evalml.objectives.CostBenefitMatrix",
   "numpy.nan",
   "pandas.Series",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_cost_benefit_matrix.test_cbm_objective_automl": {
  "lineno": 24,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.objectives.CostBenefitMatrix",
   "numpy.isnan",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_cost_benefit_matrix.test_cbm_objective_function": {
  "lineno": 40,
  "symbols_in_volume": [
   "evalml.objectives.CostBenefitMatrix",
   "numpy.isclose",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_cost_benefit_matrix.test_cbm_objective_function_floats": {
  "lineno": 48,
  "symbols_in_volume": [
   "evalml.objectives.CostBenefitMatrix",
   "numpy.isclose",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_cost_benefit_matrix.test_cbm_zero_input_lengths": {
  "lineno": 98,
  "symbols_in_volume": [
   "evalml.objectives.CostBenefitMatrix",
   "pandas.Series",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_binary_more_than_two_unique_values": {
  "lineno": 87,
  "symbols_in_volume": [
   "evalml.objectives.FraudCost",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_different_input_lengths": {
  "lineno": 66,
  "symbols_in_volume": [
   "evalml.objectives.FraudCost",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_fraud_objective": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.objectives.FraudCost"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_fraud_objective_function_amount_col": {
  "lineno": 27,
  "symbols_in_volume": [
   "evalml.objectives.FraudCost",
   "pandas.Series",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_fraud_objective_score": {
  "lineno": 100,
  "symbols_in_volume": [
   "evalml.objectives.FraudCost",
   "numpy.array",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_input_contains_inf": {
  "lineno": 53,
  "symbols_in_volume": [
   "evalml.objectives.FraudCost",
   "numpy.array",
   "numpy.inf",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_input_contains_nan": {
  "lineno": 40,
  "symbols_in_volume": [
   "evalml.objectives.FraudCost",
   "numpy.array",
   "numpy.nan",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_fraud_detection.test_zero_input_lengths": {
  "lineno": 79,
  "symbols_in_volume": [
   "evalml.objectives.FraudCost",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_binary_more_than_two_unique_values": {
  "lineno": 87,
  "symbols_in_volume": [
   "evalml.objectives.LeadScoring",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_different_input_lengths": {
  "lineno": 64,
  "symbols_in_volume": [
   "evalml.objectives.LeadScoring",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_input_contains_inf": {
  "lineno": 50,
  "symbols_in_volume": [
   "evalml.objectives.LeadScoring",
   "numpy.array",
   "numpy.inf",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_input_contains_nan": {
  "lineno": 36,
  "symbols_in_volume": [
   "evalml.objectives.LeadScoring",
   "numpy.array",
   "numpy.nan",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_lead_scoring_objective": {
  "lineno": 9,
  "symbols_in_volume": [
   "evalml.AutoMLSearch",
   "evalml.objectives.LeadScoring",
   "numpy.array",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_lead_scoring.test_zero_input_lengths": {
  "lineno": 78,
  "symbols_in_volume": [
   "evalml.objectives.LeadScoring",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_objectives": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.objective_tests.test_objectives.test_create_custom_objective": {
  "lineno": 18,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_objectives.test_create_custom_objective.MockEmptyObjective": {
  "lineno": 19,
  "symbols_in_volume": [
   "evalml.objectives.objective_base.ObjectiveBase"
  ],
  "type": "class"
 },
 "evalml.tests.objective_tests.test_objectives.test_create_custom_objective.MockEmptyObjective.objective_function": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_objectives.test_create_custom_objective.MockNoObjectiveFunctionObjective": {
  "lineno": 26,
  "symbols_in_volume": [
   "evalml.objectives.objective_base.ObjectiveBase",
   "evalml.problem_types.ProblemTypes.BINARY"
  ],
  "type": "class"
 },
 "evalml.tests.objective_tests.test_objectives.test_get_objective": {
  "lineno": 34,
  "symbols_in_volume": [
   "evalml.exceptions.ObjectiveNotFoundError",
   "evalml.objectives.Precision",
   "evalml.objectives.get_objective",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_objectives.test_get_objectives_types": {
  "lineno": 46,
  "symbols_in_volume": [
   "evalml.objectives.get_objectives",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_objectives.test_objective_outputs": {
  "lineno": 53,
  "symbols_in_volume": [
   "evalml.objectives.BinaryClassificationObjective",
   "evalml.objectives.MulticlassClassificationObjective",
   "evalml.objectives.RegressionObjective",
   "evalml.objectives.get_objectives",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "numpy.concatenate",
   "numpy.ndarray",
   "numpy.testing.assert_almost_equal",
   "numpy.unique",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.objectives.ObjectiveBase",
   "evalml.utils.gen_utils._get_subclasses"
  ],
  "type": "module"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_accuracy_binary": {
  "lineno": 134,
  "symbols_in_volume": [
   "evalml.objectives.AccuracyBinary",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_accuracy_multi": {
  "lineno": 144,
  "symbols_in_volume": [
   "evalml.objectives.AccuracyMulticlass",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_balanced_accuracy_binary": {
  "lineno": 158,
  "symbols_in_volume": [
   "evalml.objectives.BalancedAccuracyBinary",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_balanced_accuracy_multi": {
  "lineno": 170,
  "symbols_in_volume": [
   "evalml.objectives.BalancedAccuracyMulticlass",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_binary_more_than_two_unique_values": {
  "lineno": 118,
  "symbols_in_volume": [
   "evalml.objectives.BinaryClassificationObjective",
   "evalml.objectives.utils.OPTIONS.values",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_calculate_percent_difference": {
  "lineno": 417,
  "symbols_in_volume": [
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_calculate_percent_difference_negative_and_equal_numbers": {
  "lineno": 439,
  "symbols_in_volume": [
   "evalml.objectives.CostBenefitMatrix.calculate_percent_difference",
   "evalml.objectives.LogLossBinary.calculate_percent_difference"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_calculate_percent_difference_with_nan": {
  "lineno": 429,
  "symbols_in_volume": [
   "itertools.product",
   "numpy.nan",
   "pandas.isna",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_different_input_lengths": {
  "lineno": 72,
  "symbols_in_volume": [
   "evalml.objectives.utils.OPTIONS.values",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_f1_binary": {
  "lineno": 182,
  "symbols_in_volume": [
   "evalml.objectives.F1",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_f1_macro_multi": {
  "lineno": 212,
  "symbols_in_volume": [
   "evalml.objectives.F1Macro",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_f1_micro_multi": {
  "lineno": 197,
  "symbols_in_volume": [
   "evalml.objectives.F1Micro",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_f1_weighted_multi": {
  "lineno": 228,
  "symbols_in_volume": [
   "evalml.objectives.F1Weighted",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_input_contains_inf": {
  "lineno": 58,
  "symbols_in_volume": [
   "evalml.objectives.utils.OPTIONS.values",
   "numpy.array",
   "numpy.inf",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_input_contains_nan": {
  "lineno": 44,
  "symbols_in_volume": [
   "evalml.objectives.utils.OPTIONS.values",
   "numpy.array",
   "numpy.nan",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_log_linear_model": {
  "lineno": 361,
  "symbols_in_volume": [
   "evalml.objectives.MeanSquaredLogError",
   "evalml.objectives.RootMeanSquaredLogError",
   "numpy.array",
   "numpy.sqrt",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_mcc_catches_warnings": {
  "lineno": 405,
  "symbols_in_volume": [
   "evalml.objectives.MCCBinary",
   "evalml.objectives.MCCMulticlass",
   "pytest.warns",
   "sklearn.metrics.matthews_corrcoef"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_mse_linear_model": {
  "lineno": 383,
  "symbols_in_volume": [
   "evalml.objectives.MSE",
   "evalml.objectives.RootMeanSquaredError",
   "numpy.array",
   "numpy.sqrt",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_negative_with_log": {
  "lineno": 110,
  "symbols_in_volume": [
   "evalml.objectives.MeanSquaredLogError",
   "evalml.objectives.RootMeanSquaredLogError",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_precision_binary": {
  "lineno": 244,
  "symbols_in_volume": [
   "evalml.objectives.Precision",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_precision_macro_multi": {
  "lineno": 274,
  "symbols_in_volume": [
   "evalml.objectives.PrecisionMacro",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_precision_micro_multi": {
  "lineno": 259,
  "symbols_in_volume": [
   "evalml.objectives.PrecisionMicro",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_precision_weighted_multi": {
  "lineno": 289,
  "symbols_in_volume": [
   "evalml.objectives.PrecisionWeighted",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_probabilities_not_in_0_1_range": {
  "lineno": 94,
  "symbols_in_volume": [
   "evalml.objectives.utils.OPTIONS.values",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_recall_binary": {
  "lineno": 304,
  "symbols_in_volume": [
   "evalml.objectives.Recall",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_recall_macro_multi": {
  "lineno": 331,
  "symbols_in_volume": [
   "evalml.objectives.RecallMacro",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_recall_micro_multi": {
  "lineno": 316,
  "symbols_in_volume": [
   "evalml.objectives.RecallMicro",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_recall_weighted_multi": {
  "lineno": 346,
  "symbols_in_volume": [
   "evalml.objectives.RecallWeighted",
   "numpy.array",
   "pytest.approx"
  ],
  "type": "function"
 },
 "evalml.tests.objective_tests.test_standard_metrics.test_zero_input_lengths": {
  "lineno": 86,
  "symbols_in_volume": [
   "evalml.objectives.utils.OPTIONS.values",
   "numpy.array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_binary_mode": {
  "lineno": 47,
  "symbols_in_volume": [
   "evalml.pipelines.BaselineBinaryPipeline",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_binary_random": {
  "lineno": 8,
  "symbols_in_volume": [
   "evalml.pipelines.BaselineBinaryPipeline",
   "evalml.utils.get_random_state",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "numpy.unique"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_binary_random_weighted": {
  "lineno": 26,
  "symbols_in_volume": [
   "evalml.pipelines.BaselineBinaryPipeline",
   "evalml.utils.get_random_state",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "numpy.unique"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_multi_mode": {
  "lineno": 104,
  "symbols_in_volume": [
   "evalml.pipelines.BaselineMulticlassPipeline",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_multi_random": {
  "lineno": 65,
  "symbols_in_volume": [
   "evalml.pipelines.BaselineMulticlassPipeline",
   "evalml.utils.get_random_state",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "numpy.unique"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification.test_baseline_multi_random_weighted": {
  "lineno": 83,
  "symbols_in_volume": [
   "evalml.pipelines.BaselineMulticlassPipeline",
   "evalml.utils.get_random_state",
   "numpy.array",
   "numpy.testing.assert_allclose",
   "numpy.unique"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification.test_binary_classification_pipeline_predict": {
  "lineno": 7,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification.test_binary_predict_pipeline_objective_mismatch": {
  "lineno": 62,
  "symbols_in_volume": [
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification.test_new_unique_targets_in_score": {
  "lineno": 9,
  "symbols_in_volume": [
   "pandas.Series",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification.test_pipeline_has_classes_property": {
  "lineno": 25,
  "symbols_in_volume": [
   "evalml.demos.load_breast_cancer",
   "evalml.demos.load_wine",
   "itertools.product",
   "pandas.Series",
   "pandas.testing.assert_series_equal",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_baseline_regression": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_baseline_regression.test_baseline_mean": {
  "lineno": 6,
  "symbols_in_volume": [
   "evalml.pipelines.BaselineRegressionPipeline",
   "numpy.array",
   "numpy.testing.assert_allclose"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_baseline_regression.test_baseline_median": {
  "lineno": 20,
  "symbols_in_volume": [
   "evalml.pipelines.BaselineRegressionPipeline",
   "numpy.array",
   "numpy.median",
   "numpy.testing.assert_allclose"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression.test_invalid_targets_regression_pipeline": {
  "lineno": 7,
  "symbols_in_volume": [
   "evalml.demos.load_breast_cancer",
   "evalml.demos.load_wine",
   "pandas.Categorical",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_backend": {
  "lineno": 38,
  "symbols_in_volume": [
   "graphviz.backend.ExecutableNotFound",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_graph_feature_importance": {
  "lineno": 82,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_graph_feature_importance_show_all_features": {
  "lineno": 90,
  "symbols_in_volume": [
   "numpy.any",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_graph_feature_importance_threshold": {
  "lineno": 103,
  "symbols_in_volume": [
   "numpy.all",
   "pytest.importorskip",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_invalid_format": {
  "lineno": 66,
  "symbols_in_volume": [
   "os.path.join",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_invalid_path": {
  "lineno": 73,
  "symbols_in_volume": [
   "os.path.exists",
   "os.path.join",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_missing_file_extension": {
  "lineno": 59,
  "symbols_in_volume": [
   "os.path.join",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_pipeline": {
  "lineno": 13,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_pipeline.TestPipeline": {
  "lineno": 15,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_pipeline.TestPipeline.__init__": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_pipeline.TestPipeline.feature_importance": {
  "lineno": 27,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_returns_digraph_object": {
  "lineno": 46,
  "symbols_in_volume": [
   "graphviz.Digraph"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_graphs.test_saving_png_file": {
  "lineno": 52,
  "symbols_in_volume": [
   "os.path.isfile",
   "os.path.join"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_binary_pipeline": {
  "lineno": 523,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_binary_pipeline.MockBinaryClassificationPipeline": {
  "lineno": 524,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_multiclass_pipeline": {
  "lineno": 530,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_multiclass_pipeline.MockMulticlassClassificationPipeline": {
  "lineno": 531,
  "symbols_in_volume": [
   "evalml.pipelines.MulticlassClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_regression_pipeline": {
  "lineno": 516,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.make_mock_regression_pipeline.MockRegressionPipeline": {
  "lineno": 517,
  "symbols_in_volume": [
   "evalml.pipelines.RegressionPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.pickled_pipeline_path": {
  "lineno": 275,
  "symbols_in_volume": [
   "os.path.join",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_all_estimators": {
  "lineno": 65,
  "symbols_in_volume": [
   "evalml.pipelines.components.utils._all_estimators_used_in_search"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_allowed_model_families": {
  "lineno": 52,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.CATBOOST",
   "evalml.model_family.ModelFamily.EXTRA_TREES",
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.model_family.ModelFamily.RANDOM_FOREST",
   "evalml.model_family.ModelFamily.XGBOOST",
   "evalml.pipelines.components.utils.allowed_model_families",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.REGRESSION"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_clone_fitted": {
  "lineno": 916,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineNotYetFittedError",
   "pandas.testing.assert_frame_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_clone_init": {
  "lineno": 880,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_clone_random_state": {
  "lineno": 896,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_component_not_found": {
  "lineno": 960,
  "symbols_in_volume": [
   "evalml.exceptions.MissingComponentError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_component_not_found.FakePipeline": {
  "lineno": 961,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_correct_parameters": {
  "lineno": 730,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_describe": {
  "lineno": 342,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_describe_fitted": {
  "lineno": 358,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_drop_columns_in_pipeline": {
  "lineno": 855,
  "symbols_in_volume": [
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_drop_columns_in_pipeline.PipelineWithDropCol": {
  "lineno": 856,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_estimator_not_last": {
  "lineno": 431,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_estimator_not_last.MockBinaryClassificationPipelineWithoutEstimator": {
  "lineno": 432,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_feature_importance_has_feature_names": {
  "lineno": 933,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_get_default_parameters": {
  "lineno": 967,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_get_estimators": {
  "lineno": 72,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.utils.get_estimators",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters": {
  "lineno": 748,
  "symbols_in_volume": [
   "skopt.space.Integer"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters.MockPipeline": {
  "lineno": 749,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters_none": {
  "lineno": 797,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters_none.MockPipelineNone": {
  "lineno": 800,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters_override": {
  "lineno": 767,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_hyperparameters_override.MockPipelineOverRide": {
  "lineno": 768,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_indexing": {
  "lineno": 325,
  "symbols_in_volume": [
   "evalml.pipelines.components.Imputer",
   "evalml.pipelines.components.OneHotEncoder",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_init_components_invalid_parameters": {
  "lineno": 716,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_init_components_invalid_parameters.TestPipeline": {
  "lineno": 717,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_load_pickled_pipeline_with_custom_objective": {
  "lineno": 285,
  "symbols_in_volume": [
   "evalml.objectives.Precision",
   "evalml.pipelines.PipelineBase.load",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline": {
  "lineno": 110,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.pipelines.MulticlassClassificationPipeline",
   "evalml.pipelines.RegressionPipeline",
   "evalml.pipelines.components.DateTimeFeaturizer",
   "evalml.pipelines.components.DropNullColumns",
   "evalml.pipelines.components.ElasticNetClassifier",
   "evalml.pipelines.components.ElasticNetRegressor",
   "evalml.pipelines.components.Imputer",
   "evalml.pipelines.components.LinearRegressor",
   "evalml.pipelines.components.LogisticRegressionClassifier",
   "evalml.pipelines.components.OneHotEncoder",
   "evalml.pipelines.components.RandomForestClassifier",
   "evalml.pipelines.components.RandomForestRegressor",
   "evalml.pipelines.components.StandardScaler",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.date_range"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_all_nan_no_categoricals": {
  "lineno": 96,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.pipelines.components.DropNullColumns",
   "evalml.pipelines.components.Imputer",
   "evalml.pipelines.components.LogisticRegressionClassifier",
   "evalml.pipelines.components.RandomForestClassifier",
   "evalml.pipelines.components.StandardScaler",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_no_column_names": {
  "lineno": 195,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.pipelines.MulticlassClassificationPipeline",
   "evalml.pipelines.RegressionPipeline",
   "evalml.pipelines.components.DropNullColumns",
   "evalml.pipelines.components.Imputer",
   "evalml.pipelines.components.LogisticRegressionClassifier",
   "evalml.pipelines.components.OneHotEncoder",
   "evalml.pipelines.components.RandomForestRegressor",
   "evalml.pipelines.components.StandardScaler",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_no_datetimes": {
  "lineno": 174,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.pipelines.MulticlassClassificationPipeline",
   "evalml.pipelines.RegressionPipeline",
   "evalml.pipelines.components.DropNullColumns",
   "evalml.pipelines.components.Imputer",
   "evalml.pipelines.components.LogisticRegressionClassifier",
   "evalml.pipelines.components.OneHotEncoder",
   "evalml.pipelines.components.RandomForestRegressor",
   "evalml.pipelines.components.StandardScaler",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_no_nulls": {
  "lineno": 152,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.pipelines.MulticlassClassificationPipeline",
   "evalml.pipelines.RegressionPipeline",
   "evalml.pipelines.components.DateTimeFeaturizer",
   "evalml.pipelines.components.Imputer",
   "evalml.pipelines.components.LogisticRegressionClassifier",
   "evalml.pipelines.components.OneHotEncoder",
   "evalml.pipelines.components.RandomForestRegressor",
   "evalml.pipelines.components.StandardScaler",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.date_range"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_numpy_input": {
  "lineno": 214,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.pipelines.MulticlassClassificationPipeline",
   "evalml.pipelines.RegressionPipeline",
   "evalml.pipelines.components.DropNullColumns",
   "evalml.pipelines.components.Imputer",
   "evalml.pipelines.components.LogisticRegressionClassifier",
   "evalml.pipelines.components.RandomForestRegressor",
   "evalml.pipelines.components.StandardScaler",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "numpy.array",
   "numpy.nan"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_make_pipeline_problem_type_mismatch": {
  "lineno": 233,
  "symbols_in_volume": [
   "evalml.pipelines.components.LinearRegressor",
   "evalml.pipelines.components.LinearRegressor.name",
   "evalml.pipelines.components.LogisticRegressionClassifier",
   "evalml.pipelines.components.LogisticRegressionClassifier.name",
   "evalml.pipelines.components.Transformer",
   "evalml.pipelines.components.Transformer.name",
   "evalml.pipelines.utils.make_pipeline",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_multi_format_creation": {
  "lineno": 441,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.Imputer",
   "evalml.pipelines.components.LogisticRegressionClassifier",
   "evalml.pipelines.components.OneHotEncoder",
   "evalml.pipelines.components.StandardScaler"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_multi_format_creation.TestPipeline": {
  "lineno": 444,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.pipelines.components.StandardScaler",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_multiple_feature_selectors": {
  "lineno": 480,
  "symbols_in_volume": [
   "evalml.model_family.ModelFamily.LINEAR_MODEL",
   "evalml.pipelines.components.Imputer",
   "evalml.pipelines.components.LogisticRegressionClassifier",
   "evalml.pipelines.components.OneHotEncoder",
   "evalml.pipelines.components.RFClassifierSelectFromModel",
   "evalml.pipelines.components.StandardScaler"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_multiple_feature_selectors.TestPipeline": {
  "lineno": 483,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline",
   "evalml.pipelines.components.StandardScaler",
   "skopt.space.Real"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_name": {
  "lineno": 411,
  "symbols_in_volume": [
   "evalml.exceptions.IllFormattedClassNameError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_name.TestDefinedNamePipeline": {
  "lineno": 415,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_name.TestNamePipeline": {
  "lineno": 412,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_name.testillformattednamepipeline": {
  "lineno": 419,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_no_default_parameters": {
  "lineno": 695,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_no_default_parameters.MockComponent": {
  "lineno": 696,
  "symbols_in_volume": [
   "evalml.pipelines.components.Transformer"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_no_default_parameters.MockComponent.__init__": {
  "lineno": 702,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_no_default_parameters.TestPipeline": {
  "lineno": 707,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_parameters": {
  "lineno": 376,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_not_fitted_error": {
  "lineno": 1026,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineNotYetFittedError",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pytest.mark.parametrize",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary": {
  "lineno": 833,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary.MockPipeline": {
  "lineno": 850,
  "symbols_in_volume": [
   "evalml.pipelines.PipelineBase"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary.MockPipelineWithNoComponents": {
  "lineno": 846,
  "symbols_in_volume": [
   "evalml.pipelines.PipelineBase"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary.MockPipelineWithOnlyAnEstimator": {
  "lineno": 842,
  "symbols_in_volume": [
   "evalml.pipelines.PipelineBase"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary.MockPipelineWithSingleComponent": {
  "lineno": 838,
  "symbols_in_volume": [
   "evalml.pipelines.PipelineBase"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_pipeline_summary.MockPipelineWithoutEstimator": {
  "lineno": 834,
  "symbols_in_volume": [
   "evalml.pipelines.PipelineBase"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_problem_types": {
  "lineno": 508,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_problem_types.TestPipeline": {
  "lineno": 509,
  "symbols_in_volume": [
   "evalml.pipelines.BinaryClassificationPipeline"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_reproducibility": {
  "lineno": 296,
  "symbols_in_volume": [
   "evalml.objectives.FraudCost"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_required_fields": {
  "lineno": 242,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_required_fields.TestPipelineWithoutComponentGraph": {
  "lineno": 243,
  "symbols_in_volume": [
   "evalml.pipelines.PipelineBase"
  ],
  "type": "class"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_auc": {
  "lineno": 826,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_binary_list": {
  "lineno": 597,
  "symbols_in_volume": [
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_binary_objective_error": {
  "lineno": 650,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineScoreError",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_binary_single": {
  "lineno": 550,
  "symbols_in_volume": [
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_multi_list": {
  "lineno": 614,
  "symbols_in_volume": [
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_multiclass_objective_error": {
  "lineno": 672,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineScoreError",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_multiclass_single": {
  "lineno": 567,
  "symbols_in_volume": [
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_regression_list": {
  "lineno": 584,
  "symbols_in_volume": [
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_regression_objective_error": {
  "lineno": 629,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineScoreError",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_regression_single": {
  "lineno": 537,
  "symbols_in_volume": [
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_score_with_objective_that_requires_predict_proba": {
  "lineno": 807,
  "symbols_in_volume": [
   "evalml.exceptions.PipelineScoreError",
   "numpy.array",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_serialization": {
  "lineno": 250,
  "symbols_in_volume": [
   "evalml.pipelines.PipelineBase.load",
   "os.path.join"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_serialization_protocol": {
  "lineno": 259,
  "symbols_in_volume": [
   "cloudpickle.DEFAULT_PROTOCOL",
   "os.path.join",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.pipeline_tests.test_pipelines.test_targets_data_types_classification_pipelines": {
  "lineno": 991,
  "symbols_in_volume": [
   "evalml.demos.load_breast_cancer",
   "evalml.demos.load_wine",
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.utils.gen_utils.categorical_dtypes",
   "evalml.utils.gen_utils.numeric_and_boolean_dtypes",
   "pandas.Categorical",
   "pytest.mark.parametrize",
   "pytest.skip"
  ],
  "type": "function"
 },
 "evalml.tests.preprocessing_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.X_y_na": {
  "lineno": 9,
  "symbols_in_volume": [
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.test_drop_nan_target_rows": {
  "lineno": 20,
  "symbols_in_volume": [
   "evalml.preprocessing.utils.drop_nan_target_rows",
   "pandas.Series",
   "pandas.testing.assert_frame_equal",
   "pandas.testing.assert_series_equal"
  ],
  "type": "function"
 },
 "evalml.tests.preprocessing_tests.test_drop_na_rows.test_with_numpy_input": {
  "lineno": 29,
  "symbols_in_volume": [
   "evalml.preprocessing.utils.drop_nan_target_rows",
   "numpy.array",
   "numpy.nan",
   "pandas.DataFrame",
   "pandas.Series",
   "pandas.testing.assert_frame_equal",
   "pandas.testing.assert_series_equal"
  ],
  "type": "function"
 },
 "evalml.tests.preprocessing_tests.test_split_data": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.preprocessing_tests.test_split_data.test_split_classification": {
  "lineno": 16,
  "symbols_in_volume": [
   "evalml.preprocessing.split_data"
  ],
  "type": "function"
 },
 "evalml.tests.preprocessing_tests.test_split_data.test_split_regression": {
  "lineno": 4,
  "symbols_in_volume": [
   "evalml.preprocessing.split_data"
  ],
  "type": "function"
 },
 "evalml.tests.problem_type_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.problem_type_tests.test_problem_types": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.problem_type_tests.test_problem_types.correct_problem_types": {
  "lineno": 6,
  "symbols_in_volume": [
   "evalml.problem_types.ProblemTypes.BINARY",
   "evalml.problem_types.ProblemTypes.MULTICLASS",
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.problem_type_tests.test_problem_types.test_handle_incorrect_type": {
  "lineno": 28,
  "symbols_in_volume": [
   "evalml.problem_types.handle_problem_types",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.problem_type_tests.test_problem_types.test_handle_problem_types": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.problem_types.handle_problem_types"
  ],
  "type": "function"
 },
 "evalml.tests.problem_type_tests.test_problem_types.test_handle_string": {
  "lineno": 12,
  "symbols_in_volume": [
   "evalml.problem_types.ProblemTypes.REGRESSION",
   "evalml.problem_types.handle_problem_types",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.test_all_test_dirs_included": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.test_all_test_dirs_included.test_all_test_dirs_included": {
  "lineno": 6,
  "symbols_in_volume": [
   "os.path.dirname",
   "os.path.split",
   "os.walk",
   "setuptools.find_packages"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_basic": {
  "lineno": 31,
  "symbols_in_volume": [
   "evalml.tuners.GridSearchTuner"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_inheritance": {
  "lineno": 7,
  "symbols_in_volume": [
   "evalml.tuners.GridSearchTuner",
   "evalml.tuners.tuner.Tuner"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_invalid_space": {
  "lineno": 68,
  "symbols_in_volume": [
   "evalml.tuners.GridSearchTuner",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_no_params": {
  "lineno": 23,
  "symbols_in_volume": [
   "evalml.tuners.GridSearchTuner",
   "evalml.tuners.NoParamsException",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_space_types": {
  "lineno": 58,
  "symbols_in_volume": [
   "evalml.tuners.GridSearchTuner"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_grid_search_tuner.test_grid_search_tuner_unique_values": {
  "lineno": 11,
  "symbols_in_volume": [
   "evalml.tuners.GridSearchTuner"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_basic": {
  "lineno": 43,
  "symbols_in_volume": [
   "evalml.tuners.RandomSearchTuner",
   "numpy.inf"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_inheritance": {
  "lineno": 10,
  "symbols_in_volume": [
   "evalml.tuners.RandomSearchTuner",
   "evalml.tuners.tuner.Tuner"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_invalid_space": {
  "lineno": 80,
  "symbols_in_volume": [
   "evalml.tuners.RandomSearchTuner",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_no_params": {
  "lineno": 26,
  "symbols_in_volume": [
   "evalml.tuners.NoParamsException",
   "evalml.tuners.RandomSearchTuner",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_space_types": {
  "lineno": 70,
  "symbols_in_volume": [
   "evalml.tuners.RandomSearchTuner"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_unique_values": {
  "lineno": 14,
  "symbols_in_volume": [
   "evalml.tuners.RandomSearchTuner"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_random_search_tuner.test_random_search_tuner_with_replacement": {
  "lineno": 34,
  "symbols_in_volume": [
   "evalml.tuners.RandomSearchTuner"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_basic": {
  "lineno": 40,
  "symbols_in_volume": [
   "evalml.tuners.Tuner",
   "evalml.tuners.skopt_tuner.SKOptTuner",
   "numpy.inf",
   "skopt.space.Integer",
   "skopt.space.Real"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_init": {
  "lineno": 20,
  "symbols_in_volume": [
   "evalml.tuners.skopt_tuner.SKOptTuner",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_invalid_parameters_score": {
  "lineno": 95,
  "symbols_in_volume": [
   "evalml.tuners.ParameterError",
   "evalml.tuners.skopt_tuner.SKOptTuner",
   "numpy.inf",
   "numpy.nan",
   "pytest.raises",
   "skopt.space.Integer",
   "skopt.space.Real",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_invalid_ranges": {
  "lineno": 68,
  "symbols_in_volume": [
   "evalml.tuners.skopt_tuner.SKOptTuner",
   "pytest.raises",
   "skopt.space.Integer",
   "skopt.space.Real"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_is_search_space_exhausted": {
  "lineno": 35,
  "symbols_in_volume": [
   "evalml.tuners.skopt_tuner.SKOptTuner"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_skopt_tuner_propose": {
  "lineno": 135,
  "symbols_in_volume": [
   "evalml.tuners.skopt_tuner.SKOptTuner",
   "skopt.space.Integer",
   "skopt.space.Real"
  ],
  "type": "function"
 },
 "evalml.tests.tuner_tests.test_skopt_tuner.test_tuner_init": {
  "lineno": 15,
  "symbols_in_volume": [
   "evalml.tuners.Tuner",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.utils_tests.test_cli_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.utils_tests.test_cli_utils.current_dir": {
  "lineno": 19,
  "symbols_in_volume": [
   "os.path.abspath",
   "os.path.dirname",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_get_core_requirements": {
  "lineno": 24,
  "symbols_in_volume": [
   "evalml.utils.cli_utils.get_core_requirements"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_get_evalml_root": {
  "lineno": 92,
  "symbols_in_volume": [
   "evalml.utils.cli_utils.get_evalml_root",
   "os.path.abspath",
   "os.path.join"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_installed_packages": {
  "lineno": 86,
  "symbols_in_volume": [
   "evalml.utils.cli_utils.get_core_requirements",
   "evalml.utils.cli_utils.get_installed_packages"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_print_cli_cmd": {
  "lineno": 28,
  "symbols_in_volume": [
   "click.testing.CliRunner",
   "evalml.__main__.cli"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_print_cli_info_cmd": {
  "lineno": 35,
  "symbols_in_volume": [
   "click.testing.CliRunner",
   "evalml.__main__.cli"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_print_deps_info": {
  "lineno": 60,
  "symbols_in_volume": [
   "evalml.utils.cli_utils.get_core_requirements",
   "evalml.utils.cli_utils.print_deps"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_print_info": {
  "lineno": 45,
  "symbols_in_volume": [
   "evalml.utils.cli_utils.print_info"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_print_sys_info": {
  "lineno": 54,
  "symbols_in_volume": [
   "evalml.utils.cli_utils.print_sys_info"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_sys_info": {
  "lineno": 69,
  "symbols_in_volume": [
   "evalml.utils.cli_utils.get_sys_info"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_cli_utils.test_sys_info_error": {
  "lineno": 79,
  "symbols_in_volume": [
   "evalml.utils.cli_utils.get_sys_info",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_dependencies": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.utils_tests.test_dependencies.test_has_minimal_deps": {
  "lineno": 7,
  "symbols_in_volume": [
   "importlib.import_module",
   "pathlib.Path",
   "requirements.parse"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_class_property": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_class_property.MockClass": {
  "lineno": 159,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_class_property.MockClass.caps_name": {
  "lineno": 162,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.classproperty"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_convert_to_seconds": {
  "lineno": 42,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.convert_to_seconds",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_importable_subclasses_wont_get_custom_classes": {
  "lineno": 169,
  "symbols_in_volume": [
   "evalml.pipelines.components.ComponentBase",
   "evalml.utils.gen_utils.get_importable_subclasses"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_importable_subclasses_wont_get_custom_classes.ChildClass": {
  "lineno": 171,
  "symbols_in_volume": [
   "evalml.pipelines.components.ComponentBase"
  ],
  "type": "class"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_int": {
  "lineno": 98,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.SEED_BOUNDS.max_bound",
   "evalml.utils.gen_utils.SEED_BOUNDS.min_bound",
   "evalml.utils.gen_utils.get_random_seed",
   "inspect.signature",
   "numpy.arange",
   "numpy.testing.assert_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_int.get_random_seed_vec": {
  "lineno": 123,
  "symbols_in_volume": [
   "numpy.vectorize"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_int.get_random_seed_vec.get_random_seed_wrapper": {
  "lineno": 125,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.get_random_seed"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_int.make_expected_values": {
  "lineno": 136,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_rng": {
  "lineno": 76,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.SEED_BOUNDS.max_bound",
   "evalml.utils.gen_utils.SEED_BOUNDS.min_bound",
   "evalml.utils.gen_utils.get_random_seed"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_rng.make_mock_random_state": {
  "lineno": 78,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_rng.make_mock_random_state.MockRandomState": {
  "lineno": 80,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "class"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_rng.make_mock_random_state.MockRandomState.__init__": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_seed_rng.make_mock_random_state.MockRandomState.randint": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_get_random_state_int": {
  "lineno": 62,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.SEED_BOUNDS.max_bound",
   "evalml.utils.gen_utils.SEED_BOUNDS.min_bound",
   "evalml.utils.gen_utils.get_random_state",
   "numpy.random.RandomState",
   "pytest.raises"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_import_or_raise_errors": {
  "lineno": 19,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.import_or_raise",
   "pytest.raises",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_import_or_raise_errors._mock_import_function": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_gen_utils.test_import_or_raise_imports": {
  "lineno": 37,
  "symbols_in_volume": [
   "evalml.utils.gen_utils.import_or_raise"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tests.utils_tests.test_logger.logger_env_cleanup": {
  "lineno": 14,
  "symbols_in_volume": [
   "logging.Logger.manager.loggerDict",
   "os.environ.get",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger": {
  "lineno": 25,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger",
   "logging.Logger"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_default": {
  "lineno": 76,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger",
   "logging.DEBUG",
   "os.environ.get",
   "pathlib.Path",
   "unittest.mock.call",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_exception": {
  "lineno": 184,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger",
   "os.environ.get",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_path_empty": {
  "lineno": 163,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger",
   "os.environ.get",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_path_invalid": {
  "lineno": 118,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger",
   "os.environ.get",
   "pathlib.Path",
   "tempfile.TemporaryDirectory",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_path_valid": {
  "lineno": 94,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger",
   "logging.DEBUG",
   "os.environ.get",
   "pathlib.Path",
   "tempfile.TemporaryDirectory",
   "unittest.mock.call",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_get_logger_path_valid_but_dir": {
  "lineno": 141,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger",
   "os.environ.get",
   "tempfile.TemporaryDirectory",
   "unittest.mock.patch"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_logger_critical": {
  "lineno": 69,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_logger_error": {
  "lineno": 62,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_logger_info": {
  "lineno": 48,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_logger_title": {
  "lineno": 38,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger",
   "evalml.utils.logger.log_subtitle",
   "evalml.utils.logger.log_title"
  ],
  "type": "function"
 },
 "evalml.tests.utils_tests.test_logger.test_logger_warn": {
  "lineno": 55,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger"
  ],
  "type": "function"
 },
 "evalml.tuners": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tuners.grid_search_tuner": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tuners.grid_search_tuner.GridSearchTuner": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tuners.grid_search_tuner.GridSearchTuner.__init__": {
  "lineno": 19,
  "symbols_in_volume": [
   "itertools.product",
   "skopt.space.Integer",
   "skopt.space.Real"
  ],
  "type": "function"
 },
 "evalml.tuners.grid_search_tuner.GridSearchTuner.add": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tuners.grid_search_tuner.GridSearchTuner.is_search_space_exhausted": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tuners.grid_search_tuner.GridSearchTuner.propose": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tuners.random_search_tuner": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner": {
  "lineno": 7,
  "symbols_in_volume": [
   "evalml.tuners.Tuner"
  ],
  "type": "class"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner.__init__": {
  "lineno": 17,
  "symbols_in_volume": [
   "evalml.utils.get_random_state",
   "skopt.Space"
  ],
  "type": "function"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner._get_sample": {
  "lineno": 47,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner.add": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner.is_search_space_exhausted": {
  "lineno": 67,
  "symbols_in_volume": [
   "evalml.tuners.NoParamsException"
  ],
  "type": "function"
 },
 "evalml.tuners.random_search_tuner.RandomSearchTuner.propose": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tuners.skopt_tuner": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.utils.logger.get_logger"
  ],
  "type": "module"
 },
 "evalml.tuners.skopt_tuner.SKOptTuner": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tuners.skopt_tuner.SKOptTuner.__init__": {
  "lineno": 17,
  "symbols_in_volume": [
   "skopt.Optimizer"
  ],
  "type": "function"
 },
 "evalml.tuners.skopt_tuner.SKOptTuner.add": {
  "lineno": 27,
  "symbols_in_volume": [
   "pandas.isnull"
  ],
  "type": "function"
 },
 "evalml.tuners.skopt_tuner.SKOptTuner.propose": {
  "lineno": 53,
  "symbols_in_volume": [
   "warnings.catch_warnings",
   "warnings.simplefilter"
  ],
  "type": "function"
 },
 "evalml.tuners.tuner": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tuners.tuner.Tuner": {
  "lineno": 4,
  "symbols_in_volume": [
   "abc.ABC"
  ],
  "type": "class"
 },
 "evalml.tuners.tuner.Tuner.__init__": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tuners.tuner.Tuner._convert_to_flat_parameters": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tuners.tuner.Tuner._convert_to_pipeline_parameters": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tuners.tuner.Tuner.add": {
  "lineno": 54,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.tuners.tuner.Tuner.is_search_space_exhausted": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.tuners.tuner.Tuner.propose": {
  "lineno": 66,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "evalml.tuners.tuner_exceptions": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.tuners.tuner_exceptions.NoParamsException": {
  "lineno": 1,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.tuners.tuner_exceptions.ParameterError": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.utils.base_meta": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.utils.base_meta.BaseMeta": {
  "lineno": 7,
  "symbols_in_volume": [
   "abc.ABCMeta"
  ],
  "type": "class"
 },
 "evalml.utils.base_meta.BaseMeta.__new__": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.utils.base_meta.BaseMeta.set_fit": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.utils.base_meta.BaseMeta.set_fit._set_fit": {
  "lineno": 12,
  "symbols_in_volume": [
   "functools.wraps"
  ],
  "type": "function"
 },
 "evalml.utils.cli_utils": {
  "lineno": null,
  "symbols_in_volume": [
   "evalml.utils.get_logger"
  ],
  "type": "module"
 },
 "evalml.utils.cli_utils.get_core_requirements": {
  "lineno": 18,
  "symbols_in_volume": [
   "evalml.__file__",
   "os.path.dirname",
   "os.path.join",
   "requirements.parse"
  ],
  "type": "function"
 },
 "evalml.utils.cli_utils.get_evalml_root": {
  "lineno": 118,
  "symbols_in_volume": [
   "evalml.__file__",
   "os.path.dirname"
  ],
  "type": "function"
 },
 "evalml.utils.cli_utils.get_installed_packages": {
  "lineno": 106,
  "symbols_in_volume": [
   "pkg_resources.working_set"
  ],
  "type": "function"
 },
 "evalml.utils.cli_utils.get_sys_info": {
  "lineno": 76,
  "symbols_in_volume": [
   "locale.getlocale",
   "os.environ.get",
   "platform.uname",
   "psutil._common.bytes2human",
   "psutil.cpu_count",
   "psutil.virtual_memory",
   "struct.calcsize",
   "sys.byteorder",
   "sys.version_info"
  ],
  "type": "function"
 },
 "evalml.utils.cli_utils.print_deps": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.utils.cli_utils.print_info": {
  "lineno": 27,
  "symbols_in_volume": [
   "evalml.__version__"
  ],
  "type": "function"
 },
 "evalml.utils.cli_utils.print_sys_info": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.utils.gen_utils": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "evalml.utils.get_logger",
   "numpy.datetime64"
  ],
  "type": "module"
 },
 "evalml.utils.gen_utils._get_subclasses": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.utils.gen_utils.classproperty": {
  "lineno": 98,
  "symbols_in_volume": [],
  "type": "class"
 },
 "evalml.utils.gen_utils.classproperty.__get__": {
  "lineno": 119,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.utils.gen_utils.classproperty.__init__": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.utils.gen_utils.convert_to_seconds": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.utils.gen_utils.get_importable_subclasses": {
  "lineno": 153,
  "symbols_in_volume": [
   "evalml.exceptions.MissingComponentError"
  ],
  "type": "function"
 },
 "evalml.utils.gen_utils.get_random_seed": {
  "lineno": 76,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "evalml.utils.gen_utils.get_random_state": {
  "lineno": 65,
  "symbols_in_volume": [
   "numpy.integer",
   "sklearn.utils.check_random_state"
  ],
  "type": "function"
 },
 "evalml.utils.gen_utils.import_or_raise": {
  "lineno": 20,
  "symbols_in_volume": [
   "importlib.import_module"
  ],
  "type": "function"
 },
 "evalml.utils.logger": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "evalml.utils.logger.get_logger": {
  "lineno": 12,
  "symbols_in_volume": [
   "logging.DEBUG",
   "logging.Formatter",
   "logging.INFO",
   "logging.StreamHandler",
   "logging.getLogger",
   "logging.handlers.RotatingFileHandler",
   "os.W_OK",
   "os.access",
   "os.environ.get",
   "pathlib.Path",
   "sys.exc_info",
   "sys.stdout",
   "traceback.format_tb"
  ],
  "type": "function"
 },
 "evalml.utils.logger.log_subtitle": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.utils.logger.log_title": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "evalml.utils.logger.time_elapsed": {
  "lineno": 56,
  "symbols_in_volume": [
   "time.time",
   "tqdm.std.tqdm.format_interval"
  ],
  "type": "function"
 },
 "evalml.utils.logger.update_pipeline": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 }
}