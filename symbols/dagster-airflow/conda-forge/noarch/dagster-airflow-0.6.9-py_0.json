{
 "dagster_airflow": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "dagster_airflow.cli": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "dagster_airflow.cli.main"
   ]
  },
  "type": "module"
 },
 "dagster_airflow.cli.IndentingStringIoPrinter": {
  "data": {
   "shadows": "dagster.utils.indenting_printer.IndentingStringIoPrinter"
  },
  "type": "import"
 },
 "dagster_airflow.cli.check": {
  "data": {
   "shadows": "dagster.check"
  },
  "type": "import"
 },
 "dagster_airflow.cli.click": {
  "data": {
   "shadows": "click"
  },
  "type": "import"
 },
 "dagster_airflow.cli.construct_environment_yaml": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "dagster.cli.load_handle.handle_for_pipeline_cli_args",
    "dagster.seven.get_system_temp_directory",
    "dagster.utils.load_yaml_from_glob_list",
    "dagster_airflow.cli.click",
    "dagster_airflow.cli.os",
    "dagster_airflow.cli.six",
    "list"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.cli.construct_scaffolded_file_contents": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "dagster.utils.indenting_printer.IndentingStringIoPrinter",
    "dagster_airflow.cli.yaml",
    "datetime.datetime.now",
    "datetime.timedelta"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.cli.datetime": {
  "data": {
   "shadows": "datetime.datetime"
  },
  "type": "import"
 },
 "dagster_airflow.cli.handle_for_pipeline_cli_args": {
  "data": {
   "shadows": "dagster.cli.load_handle.handle_for_pipeline_cli_args"
  },
  "type": "import"
 },
 "dagster_airflow.cli.load_yaml_from_glob_list": {
  "data": {
   "shadows": "dagster.utils.load_yaml_from_glob_list"
  },
  "type": "import"
 },
 "dagster_airflow.cli.main": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "dagster_airflow.cli.click"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.cli.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dagster_airflow.cli.scaffold": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "dagster.check.invariant",
    "dagster_airflow.cli.click",
    "dagster_airflow.cli.construct_environment_yaml",
    "dagster_airflow.cli.construct_scaffolded_file_contents",
    "dagster_airflow.cli.main",
    "dagster_airflow.cli.os",
    "isinstance",
    "open",
    "tuple"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.cli.seven": {
  "data": {
   "shadows": "dagster.seven"
  },
  "type": "import"
 },
 "dagster_airflow.cli.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "dagster_airflow.cli.timedelta": {
  "data": {
   "shadows": "datetime.timedelta"
  },
  "type": "import"
 },
 "dagster_airflow.cli.yaml": {
  "data": {
   "shadows": "yaml"
  },
  "type": "import"
 },
 "dagster_airflow.compile": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.compile.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "dagster_airflow.compile._coalesce_solid_order": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "reversed"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.compile.check": {
  "data": {
   "shadows": "dagster.check"
  },
  "type": "import"
 },
 "dagster_airflow.compile.coalesce_execution_steps": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "collections.OrderedDict",
    "collections.defaultdict",
    "dagster.check.invariant",
    "dagster_airflow.compile._coalesce_solid_order",
    "dagster_airflow.compile.itertools",
    "len",
    "list"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.compile.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "dagster_airflow.compile.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "dagster_airflow.factory": {
  "data": {
   "symbols_in_volume": [
    "dagster_airflow.factory.datetime"
   ]
  },
  "type": "module"
 },
 "dagster_airflow.factory.AIRFLOW_MAX_DAG_NAME_LEN": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "dagster_airflow.factory.BaseOperator": {
  "data": {
   "shadows": "airflow.operators.BaseOperator"
  },
  "type": "import"
 },
 "dagster_airflow.factory.DAG": {
  "data": {
   "shadows": "airflow.DAG"
  },
  "type": "import"
 },
 "dagster_airflow.factory.DEFAULT_ARGS": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "dagster_airflow.factory.DagsterInstance": {
  "data": {
   "shadows": "dagster.core.instance.DagsterInstance"
  },
  "type": "import"
 },
 "dagster_airflow.factory.ExecutionTargetHandle": {
  "data": {
   "shadows": "dagster.ExecutionTargetHandle"
  },
  "type": "import"
 },
 "dagster_airflow.factory.RunConfig": {
  "data": {
   "shadows": "dagster.RunConfig"
  },
  "type": "import"
 },
 "dagster_airflow.factory._make_airflow_dag": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "airflow.DAG",
    "airflow.operators.BaseOperator",
    "coalesce_execution_steps",
    "dagster.ExecutionTargetHandle",
    "dagster.RunConfig",
    "dagster.check.inst_param",
    "dagster.check.opt_dict_param",
    "dagster.check.opt_str_param",
    "dagster.check.str_param",
    "dagster.check.subclass_param",
    "dagster.core.execution.api.create_execution_plan",
    "dagster.core.instance.DagsterInstance",
    "dagster.core.instance.DagsterInstance.get",
    "dagster.seven.get_system_temp_directory",
    "dagster_airflow.factory.DEFAULT_ARGS",
    "dagster_airflow.factory._make_dag_description",
    "dagster_airflow.factory._rename_for_airflow",
    "dict",
    "operator",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.factory._make_dag_description": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "dagster_airflow.factory._rename_for_airflow": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "dagster_airflow.factory.AIRFLOW_MAX_DAG_NAME_LEN",
    "dagster_airflow.factory.re"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.factory.check": {
  "data": {
   "shadows": "dagster.check"
  },
  "type": "import"
 },
 "dagster_airflow.factory.create_execution_plan": {
  "data": {
   "shadows": "dagster.core.execution.api.create_execution_plan"
  },
  "type": "import"
 },
 "dagster_airflow.factory.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "dagster_airflow.factory.make_airflow_dag": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "dagster.ExecutionTargetHandle.for_pipeline_module",
    "dagster.check.str_param",
    "dagster_airflow.factory._make_airflow_dag"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.factory.make_airflow_dag_containerized": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "dagster.ExecutionTargetHandle.for_pipeline_module",
    "dagster.check.opt_dict_param",
    "dagster.check.str_param",
    "dagster_airflow.factory._make_airflow_dag",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.factory.make_airflow_dag_containerized_for_handle": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "dagster.check.opt_dict_param",
    "dagster_airflow.factory._make_airflow_dag",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.factory.make_airflow_dag_for_handle": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "dagster_airflow.factory._make_airflow_dag"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.factory.make_airflow_dag_kubernetized_for_handle": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "dagster.check.opt_dict_param",
    "dagster_airflow.factory._make_airflow_dag",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.factory.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "dagster_airflow.factory.seven": {
  "data": {
   "shadows": "dagster.seven"
  },
  "type": "import"
 },
 "dagster_airflow.format": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.format.IndentingStringIoPrinter": {
  "data": {
   "shadows": "dagster.utils.indenting_printer.IndentingStringIoPrinter"
  },
  "type": "import"
 },
 "dagster_airflow.format.check": {
  "data": {
   "shadows": "dagster.check"
  },
  "type": "import"
 },
 "dagster_airflow.format.format_dict_for_graphql": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "_format_subdict",
    "dagster.check.dict_param",
    "dagster.check.failed",
    "dict",
    "isinstance",
    "repr",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.format.format_dict_for_graphql._format_item": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "_format_subdict",
    "_format_sublist",
    "bool",
    "dagster.utils.indenting_printer.IndentingStringIoPrinter",
    "dict",
    "isinstance",
    "list",
    "repr"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.format.format_dict_for_graphql._format_subdict": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "_format_item",
    "dagster.check.dict_param",
    "dagster.utils.indenting_printer.IndentingStringIoPrinter",
    "enumerate",
    "len",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.format.format_dict_for_graphql._format_sublist": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "_format_item",
    "dagster.utils.indenting_printer.IndentingStringIoPrinter",
    "enumerate",
    "len"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.operators.docker_operator": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.operators.docker_operator.APIClient": {
  "data": {
   "shadows": "docker.APIClient"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.AirflowException": {
  "data": {
   "shadows": "airflow.exceptions.AirflowException"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.DOCKER_TEMPDIR": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "dagster_airflow.operators.docker_operator.DagsterDockerOperator": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "dagster_airflow.operators.docker_operator.ModifiedDockerOperator"
   ]
  },
  "type": "class"
 },
 "dagster_airflow.operators.docker_operator.DagsterDockerOperator.__get_tls_config": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "dagster_airflow.operators.docker_operator.DagsterDockerOperator",
    "super"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.DagsterDockerOperator.__init__": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "Exception",
    "airflow.exceptions.AirflowException",
    "dagster.check.opt_dict_param",
    "dagster.check.opt_inst_param",
    "dagster.check.opt_list_param",
    "dagster.check.str_param",
    "dagster.core.instance.DagsterInstance.from_ref",
    "dagster.core.instance.InstanceRef",
    "dagster.seven.get_system_temp_directory",
    "dagster_airflow.operators.docker_operator.DOCKER_TEMPDIR",
    "dagster_airflow.operators.docker_operator.DagsterDockerOperator",
    "dagster_airflow.operators.docker_operator.warnings",
    "dict",
    "docker.from_env",
    "get_aws_environment",
    "str",
    "super"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.DagsterDockerOperator.execute": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "ImportError",
    "airflow.exceptions.AirflowException",
    "check_events_for_failures",
    "check_events_for_skips",
    "dagster.core.definitions.pipeline.ExecutionSelector",
    "dagster.core.storage.pipeline_run.PipelineRun",
    "dagster.core.storage.pipeline_run.PipelineRunStatus.MANAGED",
    "dagster.utils.error.serializable_error_info_from_exc_info",
    "dagster_airflow.operators.docker_operator.DagsterDockerOperator",
    "dagster_airflow.operators.docker_operator.sys",
    "dagster_graphql.client.mutations.DagsterGraphQLClientError",
    "dagster_graphql.client.mutations.handle_execute_plan_result_raw",
    "dagster_graphql.client.mutations.handle_execution_errors",
    "dagster_graphql.implementation.pipeline_execution_manager.build_synthetic_pipeline_error_record",
    "events",
    "parse_raw_res",
    "super"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.DagsterDockerOperator.get_command": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "dagster_airflow.operators.docker_operator.ast"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.DagsterDockerOperator.get_hook": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "_DummyHook",
    "dagster_airflow.operators.docker_operator.DagsterDockerOperator",
    "super"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.DagsterDockerOperator.get_hook._DummyHook": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "dagster_airflow.operators.docker_operator.DagsterDockerOperator.get_hook._DummyHook.get_conn": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "docker.from_env"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.DagsterDockerOperator.get_host_tmp_dir": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "contextlib.contextmanager"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.DagsterDockerOperator.query": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "construct_variables",
    "dagster.seven.json.dumps",
    "dagster_graphql.client.query.RAW_EXECUTE_PLAN_MUTATION",
    "property"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.DagsterDockerOperator.run_id": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.DagsterGraphQLClientError": {
  "data": {
   "shadows": "dagster_graphql.client.mutations.DagsterGraphQLClientError"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.DagsterInstance": {
  "data": {
   "shadows": "dagster.core.instance.DagsterInstance"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.DockerOperator": {
  "data": {
   "shadows": "dagster_airflow.vendor.docker_operator.DockerOperator"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.ExecutionSelector": {
  "data": {
   "shadows": "dagster.core.definitions.pipeline.ExecutionSelector"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.InstanceRef": {
  "data": {
   "shadows": "dagster.core.instance.InstanceRef"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.ModifiedDockerOperator": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "dagster_airflow.vendor.docker_operator.DockerOperator"
   ]
  },
  "type": "class"
 },
 "dagster_airflow.operators.docker_operator.ModifiedDockerOperator.__get_tls_config": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "dagster_airflow.operators.docker_operator.ModifiedDockerOperator",
    "super"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.ModifiedDockerOperator.__init__": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "dagster_airflow.operators.docker_operator.ModifiedDockerOperator",
    "super"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.ModifiedDockerOperator.execute": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "airflow.exceptions.AirflowException",
    "dagster.seven.json.loads",
    "docker.APIClient",
    "hasattr",
    "int",
    "len",
    "repr",
    "round",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.ModifiedDockerOperator.get_host_tmp_dir": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "airflow.utils.file.TemporaryDirectory",
    "contextlib.contextmanager"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.docker_operator.PipelineRun": {
  "data": {
   "shadows": "dagster.core.storage.pipeline_run.PipelineRun"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.PipelineRunStatus": {
  "data": {
   "shadows": "dagster.core.storage.pipeline_run.PipelineRunStatus"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.RAW_EXECUTE_PLAN_MUTATION": {
  "data": {
   "shadows": "dagster_graphql.client.query.RAW_EXECUTE_PLAN_MUTATION"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.TemporaryDirectory": {
  "data": {
   "shadows": "airflow.utils.file.TemporaryDirectory"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.ast": {
  "data": {
   "shadows": "ast"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.build_synthetic_pipeline_error_record": {
  "data": {
   "shadows": "dagster_graphql.implementation.pipeline_execution_manager.build_synthetic_pipeline_error_record"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.check": {
  "data": {
   "shadows": "dagster.check"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.from_env": {
  "data": {
   "shadows": "docker.from_env"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.handle_execute_plan_result_raw": {
  "data": {
   "shadows": "dagster_graphql.client.mutations.handle_execute_plan_result_raw"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.handle_execution_errors": {
  "data": {
   "shadows": "dagster_graphql.client.mutations.handle_execution_errors"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.serializable_error_info_from_exc_info": {
  "data": {
   "shadows": "dagster.utils.error.serializable_error_info_from_exc_info"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.seven": {
  "data": {
   "shadows": "dagster.seven"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dagster_airflow.operators.docker_operator.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.operators.kubernetes_operator.AirflowException": {
  "data": {
   "shadows": "airflow.exceptions.AirflowException"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.DagsterGraphQLClientError": {
  "data": {
   "shadows": "dagster_graphql.client.mutations.DagsterGraphQLClientError"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.DagsterInstance": {
  "data": {
   "shadows": "dagster.core.instance.DagsterInstance"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.DagsterKubernetesPodOperator": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "dagster_airflow.vendor.kubernetes_pod_operator.KubernetesPodOperator"
   ]
  },
  "type": "class"
 },
 "dagster_airflow.operators.kubernetes_operator.DagsterKubernetesPodOperator.__init__": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "airflow.exceptions.AirflowException",
    "dagster.__version__",
    "dagster.check.invariant",
    "dagster.check.opt_dict_param",
    "dagster.check.opt_inst_param",
    "dagster.check.opt_list_param",
    "dagster.check.str_param",
    "dagster.core.instance.DagsterInstance.from_ref",
    "dagster.core.instance.InstanceRef",
    "dagster_airflow.operators.kubernetes_operator.DagsterKubernetesPodOperator",
    "get_aws_environment",
    "str",
    "super"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.kubernetes_operator.DagsterKubernetesPodOperator.execute": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "ImportError",
    "airflow.contrib.kubernetes.kube_client.get_kube_client",
    "airflow.contrib.kubernetes.pod_generator.PodGenerator",
    "airflow.contrib.kubernetes.pod_launcher.PodLauncher",
    "airflow.exceptions.AirflowException",
    "airflow.utils.state.State.SUCCESS",
    "check_events_for_failures",
    "check_events_for_skips",
    "dagster.core.definitions.pipeline.ExecutionSelector",
    "dagster.core.storage.pipeline_run.PipelineRun",
    "dagster.core.storage.pipeline_run.PipelineRunStatus.MANAGED",
    "dagster.utils.error.serializable_error_info_from_exc_info",
    "dagster_airflow.operators.kubernetes_operator.LOG_RETRIEVAL_MAX_ATTEMPTS",
    "dagster_airflow.operators.kubernetes_operator.LOG_RETRIEVAL_WAITS_BETWEEN_ATTEMPTS_SEC",
    "dagster_airflow.operators.kubernetes_operator.sys",
    "dagster_airflow.operators.kubernetes_operator.time",
    "dagster_graphql.client.mutations.DagsterGraphQLClientError",
    "dagster_graphql.client.mutations.handle_execute_plan_result_raw",
    "dagster_graphql.client.mutations.handle_execution_errors",
    "dagster_graphql.implementation.pipeline_execution_manager.build_synthetic_pipeline_error_record",
    "events",
    "parse_raw_res",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.kubernetes_operator.DagsterKubernetesPodOperator.query": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "construct_variables",
    "dagster.seven.json.dumps",
    "dagster_graphql.client.query.RAW_EXECUTE_PLAN_MUTATION",
    "property"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.kubernetes_operator.DagsterKubernetesPodOperator.run_id": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "getattr",
    "property"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.kubernetes_operator.ExecutionSelector": {
  "data": {
   "shadows": "dagster.core.definitions.pipeline.ExecutionSelector"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.InstanceRef": {
  "data": {
   "shadows": "dagster.core.instance.InstanceRef"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.KubernetesPodOperator": {
  "data": {
   "shadows": "dagster_airflow.vendor.kubernetes_pod_operator.KubernetesPodOperator"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.LOG_RETRIEVAL_MAX_ATTEMPTS": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "dagster_airflow.operators.kubernetes_operator.LOG_RETRIEVAL_WAITS_BETWEEN_ATTEMPTS_SEC": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "dagster_airflow.operators.kubernetes_operator.PipelineRun": {
  "data": {
   "shadows": "dagster.core.storage.pipeline_run.PipelineRun"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.PipelineRunStatus": {
  "data": {
   "shadows": "dagster.core.storage.pipeline_run.PipelineRunStatus"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.RAW_EXECUTE_PLAN_MUTATION": {
  "data": {
   "shadows": "dagster_graphql.client.query.RAW_EXECUTE_PLAN_MUTATION"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.State": {
  "data": {
   "shadows": "airflow.utils.state.State"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.build_synthetic_pipeline_error_record": {
  "data": {
   "shadows": "dagster_graphql.implementation.pipeline_execution_manager.build_synthetic_pipeline_error_record"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.check": {
  "data": {
   "shadows": "dagster.check"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.dagster_version": {
  "data": {
   "shadows": "dagster.__version__"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.handle_execute_plan_result_raw": {
  "data": {
   "shadows": "dagster_graphql.client.mutations.handle_execute_plan_result_raw"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.handle_execution_errors": {
  "data": {
   "shadows": "dagster_graphql.client.mutations.handle_execution_errors"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.kube_client": {
  "data": {
   "shadows": "airflow.contrib.kubernetes.kube_client"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.pod_generator": {
  "data": {
   "shadows": "airflow.contrib.kubernetes.pod_generator"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.pod_launcher": {
  "data": {
   "shadows": "airflow.contrib.kubernetes.pod_launcher"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.serializable_error_info_from_exc_info": {
  "data": {
   "shadows": "dagster.utils.error.serializable_error_info_from_exc_info"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.seven": {
  "data": {
   "shadows": "dagster.seven"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dagster_airflow.operators.kubernetes_operator.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "dagster_airflow.operators.python_operator": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.operators.python_operator.AirflowException": {
  "data": {
   "shadows": "airflow.exceptions.AirflowException"
  },
  "type": "import"
 },
 "dagster_airflow.operators.python_operator.DagsterInstance": {
  "data": {
   "shadows": "dagster.core.instance.DagsterInstance"
  },
  "type": "import"
 },
 "dagster_airflow.operators.python_operator.DagsterPythonOperator": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "dagster_airflow.vendor.python_operator.PythonOperator"
   ]
  },
  "type": "class"
 },
 "dagster_airflow.operators.python_operator.DagsterPythonOperator.__init__": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "airflow.exceptions.AirflowException",
    "dagster.check.invariant",
    "dagster_airflow.operators.python_operator.DagsterPythonOperator",
    "super"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.python_operator.DagsterPythonOperator.__init__.python_callable": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "check_events_for_failures",
    "check_events_for_skips",
    "construct_variables",
    "dagster.core.definitions.pipeline.ExecutionSelector",
    "dagster.core.instance.DagsterInstance.from_ref",
    "dagster.core.storage.pipeline_run.PipelineRun",
    "dagster.core.storage.pipeline_run.PipelineRunStatus.MANAGED",
    "dagster.seven.json.dumps",
    "dagster_airflow.operators.python_operator.logging",
    "dagster_graphql.client.mutations.execute_execute_plan_mutation",
    "dagster_graphql.client.query.EXECUTE_PLAN_MUTATION",
    "events"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.python_operator.EXECUTE_PLAN_MUTATION": {
  "data": {
   "shadows": "dagster_graphql.client.query.EXECUTE_PLAN_MUTATION"
  },
  "type": "import"
 },
 "dagster_airflow.operators.python_operator.ExecutionSelector": {
  "data": {
   "shadows": "dagster.core.definitions.pipeline.ExecutionSelector"
  },
  "type": "import"
 },
 "dagster_airflow.operators.python_operator.PipelineRun": {
  "data": {
   "shadows": "dagster.core.storage.pipeline_run.PipelineRun"
  },
  "type": "import"
 },
 "dagster_airflow.operators.python_operator.PipelineRunStatus": {
  "data": {
   "shadows": "dagster.core.storage.pipeline_run.PipelineRunStatus"
  },
  "type": "import"
 },
 "dagster_airflow.operators.python_operator.PythonOperator": {
  "data": {
   "shadows": "dagster_airflow.vendor.python_operator.PythonOperator"
  },
  "type": "import"
 },
 "dagster_airflow.operators.python_operator.check": {
  "data": {
   "shadows": "dagster.check"
  },
  "type": "import"
 },
 "dagster_airflow.operators.python_operator.execute_execute_plan_mutation": {
  "data": {
   "shadows": "dagster_graphql.client.mutations.execute_execute_plan_mutation"
  },
  "type": "import"
 },
 "dagster_airflow.operators.python_operator.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dagster_airflow.operators.python_operator.seven": {
  "data": {
   "shadows": "dagster.seven"
  },
  "type": "import"
 },
 "dagster_airflow.operators.util": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.operators.util.AirflowException": {
  "data": {
   "shadows": "airflow.exceptions.AirflowException"
  },
  "type": "import"
 },
 "dagster_airflow.operators.util.AirflowSkipException": {
  "data": {
   "shadows": "airflow.exceptions.AirflowSkipException"
  },
  "type": "import"
 },
 "dagster_airflow.operators.util.DagsterEvent": {
  "data": {
   "shadows": "dagster.core.events.DagsterEvent"
  },
  "type": "import"
 },
 "dagster_airflow.operators.util.DagsterEventType": {
  "data": {
   "shadows": "dagster.DagsterEventType"
  },
  "type": "import"
 },
 "dagster_airflow.operators.util.check": {
  "data": {
   "shadows": "dagster.check"
  },
  "type": "import"
 },
 "dagster_airflow.operators.util.check_events_for_failures": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "airflow.exceptions.AirflowException",
    "dagster.check.list_param",
    "dagster.core.events.DagsterEvent",
    "events"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.util.check_events_for_skips": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "airflow.exceptions.AirflowSkipException",
    "any",
    "dagster.DagsterEventType.STEP_SKIPPED.value",
    "dagster.check.list_param",
    "dagster.core.events.DagsterEvent",
    "events"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.util.construct_variables": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "dagster.check.list_param",
    "dagster.check.opt_str_param",
    "dagster.check.str_param",
    "dagster_airflow.operators.util.convert_airflow_datestr_to_epoch_ts",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.util.convert_airflow_datestr_to_epoch_ts": {
  "data": {
   "lineno": 95
  },
  "type": "function"
 },
 "dagster_airflow.operators.util.dateutil.parser": {
  "data": {
   "shadows": "dateutil.parser"
  },
  "type": "import"
 },
 "dagster_airflow.operators.util.get_aws_environment": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "ValueError",
    "dagster_airflow.operators.util.os"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.util.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dagster_airflow.operators.util.parse_raw_res": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "dagster.seven.JSONDecodeError",
    "dagster.seven.json.loads",
    "reversed"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.operators.util.seven": {
  "data": {
   "shadows": "dagster.seven"
  },
  "type": "import"
 },
 "dagster_airflow.test_fixtures": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.test_fixtures.AirflowSkipException": {
  "data": {
   "shadows": "airflow.exceptions.AirflowSkipException"
  },
  "type": "import"
 },
 "dagster_airflow.test_fixtures.DAG": {
  "data": {
   "shadows": "airflow.DAG"
  },
  "type": "import"
 },
 "dagster_airflow.test_fixtures.LOG_FORMAT": {
  "data": {
   "shadows": "airflow.settings.LOG_FORMAT"
  },
  "type": "import"
 },
 "dagster_airflow.test_fixtures.TaskInstance": {
  "data": {
   "shadows": "airflow.models.TaskInstance"
  },
  "type": "import"
 },
 "dagster_airflow.test_fixtures.dagster_airflow_docker_operator_pipeline": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "dagster_airflow.test_fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.test_fixtures.dagster_airflow_docker_operator_pipeline._pipeline_fn": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "airflow.DAG",
    "airflow.utils.timezone.utcnow",
    "dagster.utils.load_yaml_from_glob_list",
    "dagster_airflow.test_fixtures.execute_tasks_in_dag",
    "dagster_airflow.test_fixtures.uuid",
    "isinstance",
    "make_airflow_dag_containerized_for_handle",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.test_fixtures.dagster_airflow_k8s_operator_pipeline": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "dagster_airflow.test_fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.test_fixtures.dagster_airflow_k8s_operator_pipeline._pipeline_fn": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "airflow.DAG",
    "airflow.utils.timezone.utcnow",
    "dagster.utils.load_yaml_from_glob_list",
    "dagster_airflow.test_fixtures.execute_tasks_in_dag",
    "dagster_airflow.test_fixtures.uuid",
    "isinstance",
    "make_airflow_dag_kubernetized_for_handle",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.test_fixtures.dagster_airflow_python_operator_pipeline": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "dagster_airflow.test_fixtures.pytest"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.test_fixtures.dagster_airflow_python_operator_pipeline._pipeline_fn": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "airflow.DAG",
    "airflow.utils.timezone.utcnow",
    "dagster.utils.load_yaml_from_glob_list",
    "dagster_airflow.test_fixtures.execute_tasks_in_dag",
    "dagster_airflow.test_fixtures.uuid",
    "isinstance",
    "make_airflow_dag_for_handle",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.test_fixtures.execute_tasks_in_dag": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "airflow.DAG",
    "airflow.exceptions.AirflowSkipException",
    "airflow.models.TaskInstance",
    "airflow.settings.LOG_FORMAT",
    "dagster_airflow.test_fixtures.logging",
    "dagster_airflow.test_fixtures.sys",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.test_fixtures.load_yaml_from_glob_list": {
  "data": {
   "shadows": "dagster.utils.load_yaml_from_glob_list"
  },
  "type": "import"
 },
 "dagster_airflow.test_fixtures.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "dagster_airflow.test_fixtures.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "dagster_airflow.test_fixtures.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "dagster_airflow.test_fixtures.timezone": {
  "data": {
   "shadows": "airflow.utils.timezone"
  },
  "type": "import"
 },
 "dagster_airflow.test_fixtures.uuid": {
  "data": {
   "shadows": "uuid"
  },
  "type": "import"
 },
 "dagster_airflow.vendor": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.vendor.docker_operator": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.vendor.docker_operator.APIClient": {
  "data": {
   "shadows": "docker.APIClient"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.docker_operator.AirflowException": {
  "data": {
   "shadows": "airflow.exceptions.AirflowException"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.docker_operator.BaseOperator": {
  "data": {
   "shadows": "airflow.models.BaseOperator"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.docker_operator.DockerHook": {
  "data": {
   "shadows": "airflow.hooks.docker_hook.DockerHook"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.docker_operator.DockerOperator": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "airflow.models.BaseOperator"
   ]
  },
  "type": "class"
 },
 "dagster_airflow.vendor.docker_operator.DockerOperator.__get_tls_config": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "docker.tls.TLSConfig"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.vendor.docker_operator.DockerOperator.__init__": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "airflow.utils.decorators.apply_defaults",
    "dagster_airflow.vendor.docker_operator.DockerOperator",
    "super"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.vendor.docker_operator.DockerOperator.execute": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "airflow.exceptions.AirflowException",
    "airflow.utils.file.TemporaryDirectory",
    "dagster_airflow.vendor.docker_operator.json",
    "docker.APIClient",
    "hasattr",
    "int",
    "len",
    "repr",
    "round",
    "str"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.vendor.docker_operator.DockerOperator.get_command": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "dagster_airflow.vendor.docker_operator.ast"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.vendor.docker_operator.DockerOperator.get_hook": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "airflow.hooks.docker_hook.DockerHook"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.vendor.docker_operator.DockerOperator.on_kill": {
  "data": {
   "lineno": 260
  },
  "type": "function"
 },
 "dagster_airflow.vendor.docker_operator.TemporaryDirectory": {
  "data": {
   "shadows": "airflow.utils.file.TemporaryDirectory"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.docker_operator.apply_defaults": {
  "data": {
   "shadows": "airflow.utils.decorators.apply_defaults"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.docker_operator.ast": {
  "data": {
   "shadows": "ast"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.docker_operator.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.docker_operator.tls": {
  "data": {
   "shadows": "docker.tls"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator.AirflowException": {
  "data": {
   "shadows": "airflow.exceptions.AirflowException"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator.BaseOperator": {
  "data": {
   "shadows": "airflow.models.BaseOperator"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator.KubernetesPodOperator": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "airflow.models.BaseOperator"
   ]
  },
  "type": "class"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator.KubernetesPodOperator.__init__": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "airflow.contrib.kubernetes.pod.Resources",
    "airflow.utils.decorators.apply_defaults",
    "dagster_airflow.vendor.kubernetes_pod_operator.KubernetesPodOperator",
    "super"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator.KubernetesPodOperator.execute": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "airflow.contrib.kubernetes.kube_client.get_kube_client",
    "airflow.contrib.kubernetes.pod_generator.PodGenerator",
    "airflow.contrib.kubernetes.pod_launcher.PodLauncher",
    "airflow.exceptions.AirflowException",
    "airflow.utils.state.State.SUCCESS"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator.Resources": {
  "data": {
   "shadows": "airflow.contrib.kubernetes.pod.Resources"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator.State": {
  "data": {
   "shadows": "airflow.utils.state.State"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator.apply_defaults": {
  "data": {
   "shadows": "airflow.utils.decorators.apply_defaults"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator.kube_client": {
  "data": {
   "shadows": "airflow.contrib.kubernetes.kube_client"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator.pod_generator": {
  "data": {
   "shadows": "airflow.contrib.kubernetes.pod_generator"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.kubernetes_pod_operator.pod_launcher": {
  "data": {
   "shadows": "airflow.contrib.kubernetes.pod_launcher"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.python_operator": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.vendor.python_operator.AirflowException": {
  "data": {
   "shadows": "airflow.exceptions.AirflowException"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.python_operator.BaseOperator": {
  "data": {
   "shadows": "airflow.models.BaseOperator"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.python_operator.PythonOperator": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "airflow.models.BaseOperator"
   ]
  },
  "type": "class"
 },
 "dagster_airflow.vendor.python_operator.PythonOperator.__init__": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "airflow.exceptions.AirflowException",
    "airflow.utils.decorators.apply_defaults",
    "callable",
    "dagster_airflow.vendor.python_operator.PythonOperator",
    "super"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.vendor.python_operator.PythonOperator.execute": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "airflow.utils.operator_helpers.context_to_airflow_vars",
    "dagster_airflow.vendor.python_operator.os"
   ]
  },
  "type": "function"
 },
 "dagster_airflow.vendor.python_operator.PythonOperator.execute_callable": {
  "data": {
   "lineno": 112
  },
  "type": "function"
 },
 "dagster_airflow.vendor.python_operator.apply_defaults": {
  "data": {
   "shadows": "airflow.utils.decorators.apply_defaults"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.python_operator.context_to_airflow_vars": {
  "data": {
   "shadows": "airflow.utils.operator_helpers.context_to_airflow_vars"
  },
  "type": "import"
 },
 "dagster_airflow.vendor.python_operator.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "dagster_airflow.version": {
  "data": {},
  "type": "module"
 },
 "dagster_airflow.version.__nightly__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "dagster_airflow.version.__version__": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 }
}