{
 "workflows": {
  "data": {},
  "type": "module"
 },
 "workflows.Disconnected": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "workflows.Error"
   ]
  },
  "type": "class"
 },
 "workflows.Error": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "workflows.__version__": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "workflows.contrib": {
  "data": {},
  "type": "module"
 },
 "workflows.contrib.start_service": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "workflows.contrib.start_service.ServiceStarter"
   ]
  },
  "type": "module"
 },
 "workflows.contrib.start_service.OptionParser": {
  "data": {
   "shadows": "optparse.OptionParser"
  },
  "type": "import"
 },
 "workflows.contrib.start_service.SUPPRESS_HELP": {
  "data": {
   "shadows": "optparse.SUPPRESS_HELP"
  },
  "type": "import"
 },
 "workflows.contrib.start_service.ServiceStarter": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "workflows.contrib.start_service.ServiceStarter.before_frontend_construction": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.start_service.ServiceStarter.on_frontend_preparation": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.start_service.ServiceStarter.on_parser_preparation": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.start_service.ServiceStarter.on_parsing": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.start_service.ServiceStarter.on_transport_factory_preparation": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.start_service.ServiceStarter.on_transport_preparation": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.start_service.ServiceStarter.run": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "KeyboardInterrupt",
    "len",
    "optparse.OptionParser",
    "optparse.SUPPRESS_HELP",
    "print",
    "workflows.contrib.start_service.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.start_service.ServiceStarter.run.on_transport_preparation_hook": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "true_transport_factory_call"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.start_service.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.contrib.start_service.workflows.frontend": {
  "data": {
   "shadows": "workflows.frontend"
  },
  "type": "import"
 },
 "workflows.contrib.start_service.workflows.services": {
  "data": {
   "shadows": "workflows.services"
  },
  "type": "import"
 },
 "workflows.contrib.start_service.workflows.transport": {
  "data": {
   "shadows": "workflows.transport"
  },
  "type": "import"
 },
 "workflows.contrib.status_monitor": {
  "data": {
   "symbols_in_volume": [
    "bytes",
    "str"
   ]
  },
  "type": "module"
 },
 "workflows.contrib.status_monitor.CommonService": {
  "data": {
   "shadows": "workflows.services.common_service.CommonService"
  },
  "type": "import"
 },
 "workflows.contrib.status_monitor.Monitor": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "workflows.contrib.status_monitor.Monitor.__init__": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "isinstance",
    "transport",
    "workflows.contrib.status_monitor.basestring",
    "workflows.contrib.status_monitor.threading"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.status_monitor.Monitor._boxwin": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "workflows.contrib.status_monitor.curses"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.status_monitor.Monitor._erase_card": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "int",
    "len",
    "workflows.contrib.status_monitor.curses"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.status_monitor.Monitor._get_card": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "RuntimeError",
    "int",
    "len",
    "workflows.contrib.status_monitor.curses"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.status_monitor.Monitor._redraw_screen": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "workflows.contrib.status_monitor.curses"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.status_monitor.Monitor._run": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "KeyboardInterrupt",
    "int",
    "len",
    "str",
    "workflows.contrib.status_monitor.curses",
    "workflows.contrib.status_monitor.time",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_ERROR",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_IDLE",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_PROCESSING",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_TIMER",
    "workflows.services.common_service.CommonService.human_readable_state.get"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.status_monitor.Monitor.run": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "workflows.contrib.status_monitor.curses"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.status_monitor.Monitor.update_status": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "str",
    "workflows.contrib.status_monitor.curses"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.status_monitor.basestring": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "workflows.contrib.status_monitor.curses": {
  "data": {
   "shadows": "curses"
  },
  "type": "import"
 },
 "workflows.contrib.status_monitor.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "workflows.contrib.status_monitor.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "workflows.contrib.status_monitor.workflows.transport": {
  "data": {
   "shadows": "workflows.transport"
  },
  "type": "import"
 },
 "workflows.contrib.test_start_service": {
  "data": {},
  "type": "module"
 },
 "workflows.contrib.test_start_service.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.contrib.test_start_service.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "workflows.contrib.test_start_service.test_get_command_line_help": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "SystemExit",
    "workflows.contrib.test_start_service.pytest"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.test_start_service.test_script_initialises_transport_and_starts_frontend": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "workflows.contrib.test_start_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.contrib.test_start_service.workflows.contrib.start_service": {
  "data": {
   "shadows": "workflows.contrib.start_service"
  },
  "type": "import"
 },
 "workflows.contrib.test_status_monitor": {
  "data": {},
  "type": "module"
 },
 "workflows.contrib.test_status_monitor.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.contrib.test_status_monitor.status_monitor": {
  "data": {
   "shadows": "workflows.contrib.status_monitor"
  },
  "type": "import"
 },
 "workflows.contrib.test_status_monitor.test_status_monitor_connects_to_transport_layer": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "KeyboardInterrupt",
    "run_method",
    "workflows.contrib.status_monitor.Monitor",
    "workflows.contrib.test_status_monitor.mock"
   ]
  },
  "type": "function"
 },
 "workflows.frontend": {
  "data": {
   "symbols_in_volume": [
    "bytes",
    "str"
   ]
  },
  "type": "module"
 },
 "workflows.frontend.CommonService": {
  "data": {
   "shadows": "workflows.services.common_service.CommonService"
  },
  "type": "import"
 },
 "workflows.frontend.Frontend": {
  "data": {
   "lineno": 16
  },
  "type": "class"
 },
 "workflows.frontend.Frontend.__init__": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "LogAdapter",
    "hasattr",
    "isinstance",
    "workflows.frontend.basestring",
    "workflows.frontend.logging",
    "workflows.frontend.threading",
    "workflows.frontend.workflows",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_NEW",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_NONE"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.__init__.LogAdapter": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "status_fn"
   ]
  },
  "type": "class"
 },
 "workflows.frontend.Frontend.__init__.LogAdapter.__getitem__": {
  "data": {
   "lineno": 92
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.__init__.LogAdapter.__iter__": {
  "data": {
   "lineno": 86
  },
  "type": "function"
 },
 "workflows.frontend.Frontend._terminate_service": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService.SERVICE_STATUS_END",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_TEARDOWN"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.exponential_backoff": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "min",
    "workflows.frontend.time"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.get_host_id": {
  "data": {
   "lineno": 333
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.get_status": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "workflows.frontend.workflows",
    "workflows.services.common_service.CommonService.human_readable_state.get"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.parse_band_log": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "delattr",
    "dir",
    "getattr",
    "hasattr",
    "setattr",
    "str",
    "workflows.frontend.logging"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.parse_band_request_termination": {
  "data": {
   "lineno": 312
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.parse_band_set_name": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.parse_band_status_update": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.process_transport_command": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "dict",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.run": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "AttributeError",
    "EOFError",
    "dict",
    "getattr",
    "handler",
    "isinstance",
    "str",
    "workflows.frontend.time",
    "workflows.frontend.workflows",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_END",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_ERROR",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_NEW",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_NONE",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_STARTING",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_TEARDOWN",
    "workflows.services.common_service.CommonService.human_readable_state.get"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.send_command": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.switch_service": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "isinstance",
    "workflows.frontend.basestring",
    "workflows.frontend.multiprocessing",
    "workflows.frontend.time",
    "workflows.frontend.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.Frontend.update_status": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "workflows.frontend.time",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_IDLE"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.basestring": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "workflows.frontend.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "workflows.frontend.multiprocessing": {
  "data": {
   "shadows": "multiprocessing"
  },
  "type": "import"
 },
 "workflows.frontend.test_frontend": {
  "data": {},
  "type": "module"
 },
 "workflows.frontend.test_frontend.CommonService": {
  "data": {
   "shadows": "workflows.services.common_service.CommonService"
  },
  "type": "import"
 },
 "workflows.frontend.test_frontend.MockPipe": {
  "data": {
   "lineno": 20
  },
  "type": "class"
 },
 "workflows.frontend.test_frontend.MockPipe.__init__": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.MockPipe.assert_empty": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "Exception",
    "all",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.MockPipe.close": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.MockPipe.poll": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.MockPipe.recv": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "EOFError",
    "Exception",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.ServiceCrashingOnInit": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService"
   ]
  },
  "type": "class"
 },
 "workflows.frontend.test_frontend.ServiceCrashingOnInit.initializing": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.assert_single_call_only": {
  "data": {
   "lineno": 52
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.assert_single_call_only.wrapper": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "Exception",
    "hasattr",
    "setattr",
    "str",
    "target"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.frontend.test_frontend.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "workflows.frontend.test_frontend.test_frontend_can_handle_service_initialization_segfaults": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "EOFError",
    "workflows.frontend.test_frontend.mock",
    "workflows.frontend.test_frontend.pytest"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_can_handle_unhandled_service_initialization_exceptions": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "workflows.frontend.test_frontend.ServiceCrashingOnInit",
    "workflows.frontend.test_frontend.assert_single_call_only",
    "workflows.frontend.test_frontend.mock",
    "workflows.frontend.test_frontend.pytest",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_END",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_ERROR",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_NEW",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_STARTING"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_connects_to_transport_layer": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "workflows.frontend.test_frontend.mock"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_does_not_restart_nonrestartable_service_on_error": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": [
    "Exception",
    "workflows.frontend.test_frontend.MockPipe",
    "workflows.frontend.test_frontend.mock",
    "workflows.frontend.test_frontend.pytest",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_ERROR",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_NEW",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_PROCESSING",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_STARTING"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_does_not_restart_nonrestartable_service_on_segfault": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "EOFError",
    "Exception",
    "workflows.frontend.test_frontend.mock",
    "workflows.frontend.test_frontend.pytest"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_does_restart_restartable_service_on_error": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": [
    "Exception",
    "workflows.frontend.test_frontend.mock"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_does_restart_restartable_service_on_error.pipe_creator": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": [
    "workflows.frontend.test_frontend.MockPipe",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_ERROR",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_NEW",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_PROCESSING",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_STARTING"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_does_restart_restartable_service_on_segfault": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": [
    "EOFError",
    "Exception",
    "workflows.frontend.test_frontend.mock",
    "workflows.frontend.test_frontend.pytest"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_parses_status_updates": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "workflows.frontend.test_frontend.MockPipe",
    "workflows.frontend.test_frontend.mock",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_END",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_NEW",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_PROCESSING",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_SHUTDOWN",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_STARTING",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_TEARDOWN"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_parses_status_updates.intercept": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "original_status_update_fn"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_parses_termination_requests": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "RuntimeError",
    "original_status_update_fn",
    "workflows.frontend.test_frontend.MockPipe",
    "workflows.frontend.test_frontend.mock",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_END",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_NEW",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_PROCESSING",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_STARTING",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_TEARDOWN"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_parses_termination_requests.intercept": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "original_status_update_fn"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_sends_status_updates": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": [
    "workflows.frontend.test_frontend.mock",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_IDLE",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_NONE",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_PROCESSING",
    "workflows.services.common_service.CommonService.SERVICE_STATUS_STARTING"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_subscribes_to_command_channel": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "frontend_with_message",
    "workflows.frontend.test_frontend.mock"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_subscribes_to_command_channel.frontend_with_message": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "workflows.frontend.test_frontend.mock"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_frontend_terminates_on_transport_disconnection": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "Exception",
    "workflows.frontend.test_frontend.mock",
    "workflows.frontend.test_frontend.pytest"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_get_frontend_status": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "workflows.frontend.test_frontend.mock"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.test_start_service_in_frontend": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "workflows.frontend.test_frontend.mock"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_frontend.workflows.frontend": {
  "data": {
   "shadows": "workflows.frontend"
  },
  "type": "import"
 },
 "workflows.frontend.test_utilization": {
  "data": {},
  "type": "module"
 },
 "workflows.frontend.test_utilization.Status": {
  "data": {
   "shadows": "workflows.services.common_service.Status"
  },
  "type": "import"
 },
 "workflows.frontend.test_utilization.about": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "Comparator"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_utilization.about.Comparator": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "workflows.frontend.test_utilization.about.Comparator.__eq__": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "workflows.frontend.test_utilization.about.Comparator.__ge__": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "workflows.frontend.test_utilization.about.Comparator.__le__": {
  "data": {
   "lineno": 12
  },
  "type": "function"
 },
 "workflows.frontend.test_utilization.about.Comparator.__ne__": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "workflows.frontend.test_utilization.about.Comparator.__repr__": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_utilization.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.frontend.test_utilization.test_get_empty_statistics_report": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "workflows.services.common_service.Status.NEW.intval"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_utilization.test_near_equality_helper_class": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "workflows.frontend.test_utilization.about"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_utilization.test_statistics_report_contains_correctly_aggregated_information": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "workflows.frontend.test_utilization.about",
    "workflows.frontend.test_utilization.mock",
    "workflows.services.common_service.Status.IDLE.intval",
    "workflows.services.common_service.Status.NEW.intval"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.test_utilization.workflows.frontend.utilization": {
  "data": {
   "shadows": "workflows.frontend.utilization"
  },
  "type": "import"
 },
 "workflows.frontend.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "workflows.frontend.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "workflows.frontend.utilization": {
  "data": {},
  "type": "module"
 },
 "workflows.frontend.utilization.CommonService": {
  "data": {
   "shadows": "workflows.services.common_service.CommonService"
  },
  "type": "import"
 },
 "workflows.frontend.utilization.UtilizationStatistics": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "workflows.frontend.utilization.UtilizationStatistics.__init__": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService.SERVICE_STATUS_NEW"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.utilization.UtilizationStatistics.report": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "max",
    "round",
    "sum",
    "workflows.frontend.utilization.time"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.utilization.UtilizationStatistics.update_status": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "workflows.frontend.utilization.time"
   ]
  },
  "type": "function"
 },
 "workflows.frontend.utilization.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "workflows.frontend.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.frontend.workflows.frontend.utilization": {
  "data": {
   "shadows": "workflows.frontend.utilization"
  },
  "type": "import"
 },
 "workflows.frontend.workflows.services": {
  "data": {
   "shadows": "workflows.services"
  },
  "type": "import"
 },
 "workflows.frontend.workflows.transport": {
  "data": {
   "shadows": "workflows.transport"
  },
  "type": "import"
 },
 "workflows.frontend.workflows.util": {
  "data": {
   "shadows": "workflows.util"
  },
  "type": "import"
 },
 "workflows.logging": {
  "data": {},
  "type": "module"
 },
 "workflows.logging.CallbackHandler": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "workflows.logging.logging"
   ]
  },
  "type": "class"
 },
 "workflows.logging.CallbackHandler.__init__": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "workflows.logging.CallbackHandler.emit": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "function"
 },
 "workflows.logging.CallbackHandler.prepare": {
  "data": {
   "lineno": 36
  },
  "type": "function"
 },
 "workflows.logging.get_exception_source": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "workflows.logging.linecache",
    "workflows.logging.sys"
   ]
  },
  "type": "function"
 },
 "workflows.logging.linecache": {
  "data": {
   "shadows": "linecache"
  },
  "type": "import"
 },
 "workflows.logging.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "workflows.logging.os.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "workflows.logging.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "workflows.logging.test_logging": {
  "data": {},
  "type": "module"
 },
 "workflows.logging.test_logging.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "workflows.logging.test_logging.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.logging.test_logging.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "workflows.logging.test_logging.test_callback_handler_works_within_logging_framework": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "AttributeError",
    "isinstance",
    "workflows.logging.test_logging.logging",
    "workflows.logging.test_logging.mock"
   ]
  },
  "type": "function"
 },
 "workflows.logging.test_logging.test_obtain_exception_source": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "Exception",
    "crashfunction",
    "workflows.logging.test_logging.os"
   ]
  },
  "type": "function"
 },
 "workflows.logging.test_logging.test_obtain_exception_source.crashfunction": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "print"
   ]
  },
  "type": "function"
 },
 "workflows.logging.test_logging.workflows.logging": {
  "data": {
   "shadows": "workflows.logging"
  },
  "type": "import"
 },
 "workflows.recipe": {
  "data": {},
  "type": "module"
 },
 "workflows.recipe.Recipe": {
  "data": {
   "shadows": "workflows.recipe.recipe.Recipe"
  },
  "type": "import"
 },
 "workflows.recipe.RecipeWrapper": {
  "data": {
   "shadows": "workflows.recipe.wrapper.RecipeWrapper"
  },
  "type": "import"
 },
 "workflows.recipe.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "workflows.recipe._wrap_subscription": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "subscription_call"
   ]
  },
  "type": "function"
 },
 "workflows.recipe._wrap_subscription.unwrap_recipe": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "callback",
    "log_extender",
    "workflows.recipe.wrapper.RecipeWrapper"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe": {
  "data": {
   "symbols_in_volume": [
    "bytes",
    "str"
   ]
  },
  "type": "module"
 },
 "workflows.recipe.recipe.Recipe": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "workflows.recipe.recipe.Recipe.__contains__": {
  "data": {
   "lineno": 62
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.__eq__": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "dict",
    "isinstance",
    "workflows.recipe.recipe.Recipe"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.__getitem__": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.__hash__": {
  "data": {
   "lineno": 83
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.__init__": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "isinstance",
    "workflows.recipe.recipe.basestring"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.__ne__": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "NotImplemented"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe._sanitize": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "dict",
    "int",
    "isinstance",
    "list",
    "staticmethod",
    "tuple"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.apply_parameters": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "SafeDict",
    "_recursive_apply",
    "workflows.recipe.recipe.string"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.apply_parameters.SafeDict": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "workflows.recipe.recipe.Recipe.apply_parameters.SafeDict.__missing__": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "SafeString"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.apply_parameters.SafeString": {
  "data": {
   "lineno": 211
  },
  "type": "class"
 },
 "workflows.recipe.recipe.Recipe.apply_parameters.SafeString.__getitem__": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "SafeString"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.apply_parameters.SafeString.__init__": {
  "data": {
   "lineno": 212
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.apply_parameters.SafeString.__repr__": {
  "data": {
   "lineno": 215
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.apply_parameters.SafeString.__str__": {
  "data": {
   "lineno": 218
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.apply_parameters._recursive_apply": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "KeyError",
    "_recursive_apply",
    "dict",
    "isinstance",
    "list",
    "tuple",
    "workflows.recipe.recipe.basestring",
    "workflows.recipe.recipe.copy"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.apply_parameters.ds_format_field": {
  "data": {
   "lineno": 239
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.deserialize": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "workflows.recipe.recipe.json",
    "workflows.recipe.recipe.string"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.merge": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "filter",
    "int",
    "isinstance",
    "list",
    "max",
    "translate",
    "tuple",
    "workflows.recipe.recipe.Recipe",
    "workflows.recipe.recipe.basestring"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.merge.translate": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "dict",
    "isinstance",
    "list",
    "map",
    "translate",
    "tuple"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.pretty": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "workflows.recipe.recipe.json"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.serialize": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "workflows.recipe.recipe.json"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.validate": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "all",
    "any",
    "filter",
    "find_cycles",
    "int",
    "isinstance",
    "len",
    "list",
    "str",
    "tuple",
    "workflows.recipe.recipe.basestring",
    "workflows.recipe.recipe.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.validate.find_cycles": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "find_cycles",
    "flatten_links",
    "str",
    "workflows.recipe.recipe.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.Recipe.validate.flatten_links": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "all",
    "dict",
    "flatten_links",
    "int",
    "isinstance",
    "list",
    "str",
    "workflows.recipe.recipe.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.recipe.basestring": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "workflows.recipe.recipe.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "workflows.recipe.recipe.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "workflows.recipe.recipe.string": {
  "data": {
   "shadows": "string"
  },
  "type": "import"
 },
 "workflows.recipe.recipe.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.recipe.test_recipe": {
  "data": {},
  "type": "module"
 },
 "workflows.recipe.test_recipe.generate_recipes": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "RecipeA",
    "workflows.recipe.test_recipe.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.generate_recipes.RecipeA": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "workflows.recipe.test_recipe.workflows"
   ]
  },
  "type": "class"
 },
 "workflows.recipe.test_recipe.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.recipe.test_recipe.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "workflows.recipe.test_recipe.test_can_generate_recipe_objects": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "len",
    "workflows.recipe.test_recipe.generate_recipes"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.test_equality_and_inequality_operator": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "workflows.recipe.test_recipe.generate_recipes"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.test_in_operator": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "workflows.recipe.test_recipe.generate_recipes"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.test_merging_recipes": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "any",
    "dict",
    "isinstance",
    "len",
    "map",
    "workflows.recipe.test_recipe.generate_recipes",
    "workflows.recipe.test_recipe.mock",
    "workflows.recipe.test_recipe.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.test_replacing_parameters_in_recipe": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "workflows.recipe.test_recipe.generate_recipes"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.test_replacing_parameters_in_recipe_should_keep_unknown_parameter_strings": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "workflows.recipe.test_recipe.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.test_replacing_parameters_in_recipe_with_datastructures": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "workflows.recipe.test_recipe.generate_recipes"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.test_serializing_and_deserializing_recipes": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "workflows.recipe.test_recipe.generate_recipes"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.test_validate_tests_for_cycles": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "str",
    "workflows.recipe.test_recipe.generate_recipes",
    "workflows.recipe.test_recipe.pytest",
    "workflows.recipe.test_recipe.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.test_validate_tests_for_empty_recipe": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "workflows.recipe.test_recipe.generate_recipes",
    "workflows.recipe.test_recipe.pytest",
    "workflows.recipe.test_recipe.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.test_validate_tests_for_invalid_links": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "str",
    "workflows.recipe.test_recipe.generate_recipes",
    "workflows.recipe.test_recipe.pytest",
    "workflows.recipe.test_recipe.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.test_validate_tests_for_invalid_nodes": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "str",
    "workflows.recipe.test_recipe.generate_recipes",
    "workflows.recipe.test_recipe.pytest",
    "workflows.recipe.test_recipe.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_recipe.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.recipe.test_recipe.workflows.recipe": {
  "data": {
   "shadows": "workflows.recipe"
  },
  "type": "import"
 },
 "workflows.recipe.test_validate": {
  "data": {},
  "type": "module"
 },
 "workflows.recipe.test_validate.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "workflows.recipe.test_validate.main": {
  "data": {
   "shadows": "workflows.recipe.validate.main"
  },
  "type": "import"
 },
 "workflows.recipe.test_validate.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.recipe.test_validate.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "workflows.recipe.test_validate.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "workflows.recipe.test_validate.test_command_line_validation_multiple_arguments": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "workflows.recipe.test_validate.mock",
    "workflows.recipe.test_validate.sys",
    "workflows.recipe.validate.main"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_validate.test_command_line_validation_one_argument": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "workflows.recipe.test_validate.mock",
    "workflows.recipe.test_validate.sys",
    "workflows.recipe.validate.main"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_validate.test_exit_when_command_line_validation_given_no_arguments": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "SystemExit",
    "workflows.recipe.test_validate.mock",
    "workflows.recipe.test_validate.pytest",
    "workflows.recipe.test_validate.sys",
    "workflows.recipe.validate.main"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_validate.test_no_errors_when_validating_healthy_recipe": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "workflows.recipe.validate.validate_recipe"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_validate.test_system_exit_when_error_raised_from_command_line_validation": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "Exception",
    "SystemExit",
    "workflows.recipe.test_validate.mock",
    "workflows.recipe.test_validate.pytest",
    "workflows.recipe.test_validate.sys",
    "workflows.recipe.validate.main"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_validate.test_validate_returns_type_error_when_called_without_parameters": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "TypeError",
    "workflows.recipe.test_validate.pytest",
    "workflows.recipe.validate.validate_recipe"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_validate.test_value_error_when_validating_bad_json": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "workflows.recipe.test_validate.json",
    "workflows.recipe.test_validate.pytest",
    "workflows.recipe.validate.validate_recipe"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_validate.test_workflows_error_when_validating_incorrect_workflows_recipe": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "workflows.recipe.test_validate.pytest",
    "workflows.recipe.test_validate.workflows",
    "workflows.recipe.validate.validate_recipe"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_validate.validate_recipe": {
  "data": {
   "shadows": "workflows.recipe.validate.validate_recipe"
  },
  "type": "import"
 },
 "workflows.recipe.test_validate.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.recipe.test_wrap_subscription": {
  "data": {},
  "type": "module"
 },
 "workflows.recipe.test_wrap_subscription.check_message_handling_via_unwrapper": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "callback",
    "workflows.recipe.test_wrap_subscription.mock"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrap_subscription.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.recipe.test_wrap_subscription.test_wrapping_a_broadcast_subscription": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "callback",
    "workflows.recipe.test_wrap_subscription.check_message_handling_via_unwrapper",
    "workflows.recipe.test_wrap_subscription.mock",
    "workflows.recipe.test_wrap_subscription.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrap_subscription.test_wrapping_a_subscription": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "callback",
    "workflows.recipe.test_wrap_subscription.check_message_handling_via_unwrapper",
    "workflows.recipe.test_wrap_subscription.mock",
    "workflows.recipe.test_wrap_subscription.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrap_subscription.test_wrapping_a_subscription_allowing_non_recipe_messages": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "callback",
    "workflows.recipe.test_wrap_subscription.check_message_handling_via_unwrapper",
    "workflows.recipe.test_wrap_subscription.mock",
    "workflows.recipe.test_wrap_subscription.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrap_subscription.test_wrapping_a_subscription_with_log_extension": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "callback",
    "workflows.recipe.test_wrap_subscription.mock",
    "workflows.recipe.test_wrap_subscription.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrap_subscription.test_wrapping_a_subscription_with_log_extension.recipient": {
  "data": {
   "lineno": 151
  },
  "type": "function"
 },
 "workflows.recipe.test_wrap_subscription.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.recipe.test_wrap_subscription.workflows.recipe": {
  "data": {
   "shadows": "workflows.recipe"
  },
  "type": "import"
 },
 "workflows.recipe.test_wrapped_recipe": {
  "data": {},
  "type": "module"
 },
 "workflows.recipe.test_wrapped_recipe.Recipe": {
  "data": {
   "shadows": "workflows.recipe.Recipe"
  },
  "type": "import"
 },
 "workflows.recipe.test_wrapped_recipe.RecipeWrapper": {
  "data": {
   "shadows": "workflows.recipe.wrapper.RecipeWrapper"
  },
  "type": "import"
 },
 "workflows.recipe.test_wrapped_recipe.generate_recipe_message": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "workflows.recipe.test_wrapped_recipe.mock"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.recipe.test_wrapped_recipe.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "workflows.recipe.test_wrapped_recipe.test_checkpointing_via_recipewrapper": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "ValueError",
    "downstream_message",
    "workflows.recipe.test_wrapped_recipe.generate_recipe_message",
    "workflows.recipe.test_wrapped_recipe.mock",
    "workflows.recipe.test_wrapped_recipe.pytest",
    "workflows.recipe.test_wrapped_recipe.workflows",
    "workflows.recipe.wrapper.RecipeWrapper"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_checkpointing_via_recipewrapper.downstream_message": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "workflows.recipe.test_wrapped_recipe.generate_recipe_message"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_downstream_message_sending_via_recipewrapper_with_named_outputs": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "downstream_message",
    "workflows.recipe.test_wrapped_recipe.generate_recipe_message",
    "workflows.recipe.test_wrapped_recipe.mock",
    "workflows.recipe.test_wrapped_recipe.workflows",
    "workflows.recipe.wrapper.RecipeWrapper"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_downstream_message_sending_via_recipewrapper_with_named_outputs.downstream_message": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "workflows.recipe.test_wrapped_recipe.generate_recipe_message"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_downstream_message_sending_via_recipewrapper_with_unnamed_output": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "downstream_message",
    "workflows.recipe.test_wrapped_recipe.mock",
    "workflows.recipe.test_wrapped_recipe.workflows",
    "workflows.recipe.wrapper.RecipeWrapper"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_downstream_message_sending_via_recipewrapper_with_unnamed_output.downstream_message": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "list",
    "workflows.recipe.test_wrapped_recipe.generate_recipe_message"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_parameter_replacement_in_recipe_wrapper": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "workflows.recipe.Recipe",
    "workflows.recipe.test_wrapped_recipe.generate_recipe_message",
    "workflows.recipe.test_wrapped_recipe.mock",
    "workflows.recipe.wrapper.RecipeWrapper"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_recipe_wrapper_empty_constructor_fails": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "ValueError",
    "workflows.recipe.test_wrapped_recipe.pytest",
    "workflows.recipe.wrapper.RecipeWrapper"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_recipe_wrapper_instantiated_from_message": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "workflows.recipe.Recipe",
    "workflows.recipe.test_wrapped_recipe.generate_recipe_message",
    "workflows.recipe.test_wrapped_recipe.mock",
    "workflows.recipe.wrapper.RecipeWrapper"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_recipe_wrapper_instantiated_from_message_with_string_conversion": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "str",
    "workflows.recipe.test_wrapped_recipe.generate_recipe_message",
    "workflows.recipe.wrapper.RecipeWrapper"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_recipe_wrapper_instantiated_from_recipe": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "workflows.recipe.Recipe",
    "workflows.recipe.test_wrapped_recipe.generate_recipe_message",
    "workflows.recipe.wrapper.RecipeWrapper"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_start_command_via_recipewrapper": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "ValueError",
    "downstream_message",
    "workflows.recipe.test_wrapped_recipe.generate_recipe_message",
    "workflows.recipe.test_wrapped_recipe.mock",
    "workflows.recipe.test_wrapped_recipe.pytest",
    "workflows.recipe.test_wrapped_recipe.workflows",
    "workflows.recipe.wrapper.RecipeWrapper"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.test_start_command_via_recipewrapper.downstream_message": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "workflows.recipe.test_wrapped_recipe.generate_recipe_message",
    "workflows.recipe.test_wrapped_recipe.mock"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.test_wrapped_recipe.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.recipe.validate": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "workflows.recipe.validate.main"
   ]
  },
  "type": "module"
 },
 "workflows.recipe.validate.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "workflows.recipe.validate.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "workflows.recipe.validate.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "workflows.recipe.validate.main": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "Exception",
    "print",
    "workflows.recipe.validate.argparse",
    "workflows.recipe.validate.sys",
    "workflows.recipe.validate.validate_recipe"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.validate.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "workflows.recipe.validate.validate_recipe": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "Exception",
    "open",
    "workflows.recipe.validate.json",
    "workflows.recipe.validate.logging",
    "workflows.recipe.validate.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.validate.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.recipe.validate.workflows.recipe": {
  "data": {
   "shadows": "workflows.recipe"
  },
  "type": "import"
 },
 "workflows.recipe.validate_recipe": {
  "data": {
   "shadows": "workflows.recipe.validate.validate_recipe"
  },
  "type": "import"
 },
 "workflows.recipe.wrap_subscribe": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "callback",
    "workflows.recipe._wrap_subscription"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.wrap_subscribe_broadcast": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "callback",
    "workflows.recipe._wrap_subscription"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.wrapper": {
  "data": {},
  "type": "module"
 },
 "workflows.recipe.wrapper.RecipeWrapper": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "workflows.recipe.wrapper.RecipeWrapper.__init__": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.wrapper.RecipeWrapper._generate_full_recipe_message": {
  "data": {
   "lineno": 166
  },
  "type": "function"
 },
 "workflows.recipe.wrapper.RecipeWrapper._send_to_destination": {
  "data": {
   "lineno": 191
  },
  "type": "function"
 },
 "workflows.recipe.wrapper.RecipeWrapper._send_to_destinations": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "isinstance",
    "list"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.wrapper.RecipeWrapper.apply_parameters": {
  "data": {
   "lineno": 156
  },
  "type": "function"
 },
 "workflows.recipe.wrapper.RecipeWrapper.checkpoint": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.wrapper.RecipeWrapper.send": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.wrapper.RecipeWrapper.send_to": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.wrapper.RecipeWrapper.set_default_channel": {
  "data": {
   "lineno": 109
  },
  "type": "function"
 },
 "workflows.recipe.wrapper.RecipeWrapper.start": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "workflows.recipe.wrapper.workflows.recipe": {
  "data": {
   "shadows": "workflows.recipe"
  },
  "type": "import"
 },
 "workflows.services": {
  "data": {},
  "type": "module"
 },
 "workflows.services.common_service": {
  "data": {},
  "type": "module"
 },
 "workflows.services.common_service.Commands": {
  "data": {
   "lineno": 470
  },
  "type": "class"
 },
 "workflows.services.common_service.CommonService": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "workflows.services.common_service.Status",
    "workflows.services.common_service.logging"
   ]
  },
  "type": "class"
 },
 "workflows.services.common_service.CommonService.__command_queue_listener": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "EOFError",
    "next",
    "workflows.services.common_service.Priority",
    "workflows.services.common_service.itertools",
    "workflows.services.common_service.queue"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.__init__": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "workflows.services.common_service.logging",
    "workflows.services.common_service.queue"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.__process_command": {
  "data": {
   "lineno": 464
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.__send_service_status_to_frontend": {
  "data": {
   "lineno": 300
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.__send_to_frontend": {
  "data": {
   "lineno": 153
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.__start_command_queue_listener": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "QueueListenerThread",
    "hasattr"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.__start_command_queue_listener.QueueListenerThread": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "workflows.services.common_service.threading"
   ]
  },
  "type": "class"
 },
 "workflows.services.common_service.CommonService.__start_command_queue_listener.QueueListenerThread.run": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "thread_function"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.__update_service_status": {
  "data": {
   "lineno": 294
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService._log_send": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "setattr"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService._register": {
  "data": {
   "lineno": 284
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService._register_idle": {
  "data": {
   "lineno": 288
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService._request_termination": {
  "data": {
   "lineno": 315
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService._set_name": {
  "data": {
   "lineno": 310
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService._shutdown": {
  "data": {
   "lineno": 319
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService._transport_interceptor": {
  "data": {
   "lineno": 183
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService._transport_interceptor.add_item_to_queue": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "next",
    "workflows.services.common_service.Priority"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.connect": {
  "data": {
   "lineno": 201
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.extend_log": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "Exception",
    "setattr",
    "workflows.services.common_service.contextlib"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.get_name": {
  "data": {
   "lineno": 306
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.in_shutdown": {
  "data": {
   "lineno": 100
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.initialize_logging": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "list",
    "workflows.services.common_service.logging",
    "workflows.services.common_service.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.initializing": {
  "data": {
   "lineno": 93
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.process_uncaught_exception": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "dir",
    "filter",
    "getattr",
    "workflows.services.common_service.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.start": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "Exception",
    "KeyboardInterrupt",
    "callback",
    "processor",
    "workflows.services.common_service.Priority",
    "workflows.services.common_service.queue"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.start_transport": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "RuntimeError",
    "workflows.services.common_service.itertools"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.CommonService.transport": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "AttributeError"
   ]
  },
  "type": "function"
 },
 "workflows.services.common_service.Priority": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "workflows.services.common_service.enum"
   ]
  },
  "type": "class"
 },
 "workflows.services.common_service.Status": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "workflows.services.common_service.enum"
   ]
  },
  "type": "class"
 },
 "workflows.services.common_service.Status.__init__": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "workflows.services.common_service.contextlib": {
  "data": {
   "shadows": "contextlib"
  },
  "type": "import"
 },
 "workflows.services.common_service.enum": {
  "data": {
   "shadows": "enum"
  },
  "type": "import"
 },
 "workflows.services.common_service.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "workflows.services.common_service.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "workflows.services.common_service.queue": {
  "data": {
   "shadows": "queue"
  },
  "type": "import"
 },
 "workflows.services.common_service.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "workflows.services.common_service.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.services.common_service.workflows.logging": {
  "data": {
   "shadows": "workflows.logging"
  },
  "type": "import"
 },
 "workflows.services.get_known_services": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "hasattr",
    "setattr",
    "workflows.services.pkg_resources"
   ]
  },
  "type": "function"
 },
 "workflows.services.lookup": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "get_known_services"
   ]
  },
  "type": "function"
 },
 "workflows.services.pkg_resources": {
  "data": {
   "shadows": "pkg_resources"
  },
  "type": "import"
 },
 "workflows.services.sample_consumer": {
  "data": {},
  "type": "module"
 },
 "workflows.services.sample_consumer.CommonService": {
  "data": {
   "shadows": "workflows.services.common_service.CommonService"
  },
  "type": "import"
 },
 "workflows.services.sample_consumer.SampleConsumer": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService"
   ]
  },
  "type": "class"
 },
 "workflows.services.sample_consumer.SampleConsumer.consume_message": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "dict",
    "isinstance",
    "print",
    "workflows.services.sample_consumer.json",
    "workflows.services.sample_consumer.time"
   ]
  },
  "type": "function"
 },
 "workflows.services.sample_consumer.SampleConsumer.initializing": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "workflows.services.sample_consumer.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "workflows.services.sample_consumer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "workflows.services.sample_producer": {
  "data": {},
  "type": "module"
 },
 "workflows.services.sample_producer.CommonService": {
  "data": {
   "shadows": "workflows.services.common_service.CommonService"
  },
  "type": "import"
 },
 "workflows.services.sample_producer.SampleProducer": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService"
   ]
  },
  "type": "class"
 },
 "workflows.services.sample_producer.SampleProducer.create_message": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "workflows.services.sample_producer.time"
   ]
  },
  "type": "function"
 },
 "workflows.services.sample_producer.SampleProducer.initializing": {
  "data": {
   "lineno": 19
  },
  "type": "function"
 },
 "workflows.services.sample_producer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "workflows.services.sample_transaction": {
  "data": {},
  "type": "module"
 },
 "workflows.services.sample_transaction.CommonService": {
  "data": {
   "shadows": "workflows.services.common_service.CommonService"
  },
  "type": "import"
 },
 "workflows.services.sample_transaction.SampleTxn": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService"
   ]
  },
  "type": "class"
 },
 "workflows.services.sample_transaction.SampleTxn.crashpoint": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "staticmethod",
    "workflows.services.sample_transaction.random"
   ]
  },
  "type": "function"
 },
 "workflows.services.sample_transaction.SampleTxn.initializing": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "workflows.services.sample_transaction.SampleTxn.receive_message": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "print",
    "str"
   ]
  },
  "type": "function"
 },
 "workflows.services.sample_transaction.SampleTxnProducer": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService"
   ]
  },
  "type": "class"
 },
 "workflows.services.sample_transaction.SampleTxnProducer.create_message": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "workflows.services.sample_transaction.time"
   ]
  },
  "type": "function"
 },
 "workflows.services.sample_transaction.SampleTxnProducer.initializing": {
  "data": {
   "lineno": 76
  },
  "type": "function"
 },
 "workflows.services.sample_transaction.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "workflows.services.sample_transaction.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "workflows.services.test_common_service": {
  "data": {},
  "type": "module"
 },
 "workflows.services.test_common_service.Commands": {
  "data": {
   "shadows": "workflows.services.common_service.Commands"
  },
  "type": "import"
 },
 "workflows.services.test_common_service.CommonService": {
  "data": {
   "shadows": "workflows.services.common_service.CommonService"
  },
  "type": "import"
 },
 "workflows.services.test_common_service.Pipe": {
  "data": {
   "shadows": "multiprocessing.Pipe"
  },
  "type": "import"
 },
 "workflows.services.test_common_service.Priority": {
  "data": {
   "shadows": "workflows.services.common_service.Priority"
  },
  "type": "import"
 },
 "workflows.services.test_common_service.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.services.test_common_service.pprint": {
  "data": {
   "shadows": "pprint"
  },
  "type": "import"
 },
 "workflows.services.test_common_service.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "workflows.services.test_common_service.queue": {
  "data": {
   "shadows": "queue"
  },
  "type": "import"
 },
 "workflows.services.test_common_service.test_adding_fieldvalue_pairs_to_log_messages": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "getattr",
    "workflows.services.common_service.CommonService",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_callbacks_are_routed_correctly": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "AssertionError",
    "multiprocessing.Pipe",
    "workflows.services.common_service.Commands.SHUTDOWN",
    "workflows.services.common_service.CommonService",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_can_pass_environment_to_service": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "EnvironmentPassingService",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_can_pass_environment_to_service.EnvironmentPassingService": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService"
   ]
  },
  "type": "class"
 },
 "workflows.services.test_common_service.test_can_pass_environment_to_service.EnvironmentPassingService.get_environment": {
  "data": {
   "lineno": 439
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_commands_are_processed_from_main_queue_before_transport": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": [
    "multiprocessing.Pipe",
    "workflows.services.common_service.Commands.SHUTDOWN",
    "workflows.services.common_service.CommonService",
    "workflows.services.common_service.Priority.COMMAND",
    "workflows.services.common_service.Priority.TRANSPORT",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_idle_timer_is_triggered": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "AssertionError",
    "multiprocessing.Pipe",
    "workflows.services.common_service.Commands.SHUTDOWN",
    "workflows.services.common_service.CommonService",
    "workflows.services.common_service.Priority.COMMAND",
    "workflows.services.test_common_service.mock",
    "workflows.services.test_common_service.queue"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_instantiate_basic_service": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_log_message_fieldvalue_pairs_are_attached_to_unhandled_exceptions_and_logged_properly": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "ZeroDivisionError",
    "dir",
    "getattr",
    "workflows.services.common_service.CommonService",
    "workflows.services.test_common_service.mock",
    "workflows.services.test_common_service.pprint"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_log_message_fieldvalue_pairs_are_removed_outside_their_context": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "ZeroDivisionError",
    "getattr",
    "workflows.services.common_service.CommonService",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_log_unknown_band_data": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "AssertionError",
    "len",
    "multiprocessing.Pipe",
    "str",
    "workflows.services.common_service.Commands.SHUTDOWN",
    "workflows.services.common_service.CommonService",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_logging_to_frontend": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "str",
    "workflows.services.common_service.CommonService",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_main_queue_can_deal_with_being_empty": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": [
    "AssertionError",
    "multiprocessing.Pipe",
    "workflows.services.common_service.Commands.SHUTDOWN",
    "workflows.services.common_service.CommonService",
    "workflows.services.common_service.Priority.COMMAND",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_observe_shutdown_command": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "AssertionError",
    "multiprocessing.Pipe",
    "workflows.services.common_service.Commands.SHUTDOWN",
    "workflows.services.common_service.CommonService",
    "workflows.services.common_service.Priority.COMMAND",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_receive_frontend_commands": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "AssertionError",
    "EOFError",
    "workflows.services.common_service.CommonService",
    "workflows.services.common_service.Priority.COMMAND",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_service_can_change_name_and_shut_itself_down": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "NameChangingService",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_service_can_change_name_and_shut_itself_down.NameChangingService": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService"
   ]
  },
  "type": "class"
 },
 "workflows.services.test_common_service.test_service_can_change_name_and_shut_itself_down.NameChangingService.initializing": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": [
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_service_can_mark_itself_as_unstable": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "UnstableService",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_service_can_mark_itself_as_unstable.UnstableService": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService"
   ]
  },
  "type": "class"
 },
 "workflows.services.test_common_service.test_service_can_mark_itself_as_unstable.UnstableService.initializing": {
  "data": {
   "lineno": 417
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_service_initialization_crashes_are_handled_correctly": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "CrashOnInitService",
    "filter",
    "list",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_service_initialization_crashes_are_handled_correctly.CrashOnInitService": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService"
   ]
  },
  "type": "class"
 },
 "workflows.services.test_common_service.test_service_initialization_crashes_are_handled_correctly.CrashOnInitService.initializing": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_transport_callbacks_are_processed_from_main_queue": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": [
    "AssertionError",
    "multiprocessing.Pipe",
    "workflows.services.common_service.Commands.SHUTDOWN",
    "workflows.services.common_service.CommonService",
    "workflows.services.common_service.Priority.COMMAND",
    "workflows.services.common_service.Priority.TRANSPORT",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_transport_connection_is_started_on_initialization": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_transport_object_can_be_injected": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": [
    "workflows.services.common_service.CommonService",
    "workflows.services.test_common_service.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_common_service.test_transport_object_can_not_be_overwritten": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": [
    "AttributeError",
    "workflows.services.common_service.CommonService",
    "workflows.services.test_common_service.mock",
    "workflows.services.test_common_service.pytest"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_consumer": {
  "data": {},
  "type": "module"
 },
 "workflows.services.test_sample_service_consumer.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.services.test_sample_service_consumer.test_service_can_be_looked_up": {
  "data": {
   "lineno": 6
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_consumer.test_service_can_consume_messages": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "workflows.services.test_sample_service_consumer.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_consumer.test_service_subscribes_to_channel": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "setattr",
    "workflows.services.test_sample_service_consumer.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_consumer.workflows.services": {
  "data": {
   "shadows": "workflows.services"
  },
  "type": "import"
 },
 "workflows.services.test_sample_service_consumer.workflows.services.sample_consumer": {
  "data": {
   "shadows": "workflows.services.sample_consumer"
  },
  "type": "import"
 },
 "workflows.services.test_sample_service_producer": {
  "data": {},
  "type": "module"
 },
 "workflows.services.test_sample_service_producer.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.services.test_sample_service_producer.test_service_can_be_looked_up": {
  "data": {
   "lineno": 6
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_producer.test_service_produces_messages": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "setattr",
    "workflows.services.test_sample_service_producer.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_producer.test_service_registers_idle_timer": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "setattr",
    "workflows.services.test_sample_service_producer.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_producer.workflows.services": {
  "data": {
   "shadows": "workflows.services"
  },
  "type": "import"
 },
 "workflows.services.test_sample_service_producer.workflows.services.sample_producer": {
  "data": {
   "shadows": "workflows.services.sample_producer"
  },
  "type": "import"
 },
 "workflows.services.test_sample_service_transaction": {
  "data": {},
  "type": "module"
 },
 "workflows.services.test_sample_service_transaction.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.services.test_sample_service_transaction.setup_txnservice": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "setattr",
    "workflows.services.test_sample_service_transaction.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_transaction.test_services_can_be_looked_up": {
  "data": {
   "lineno": 6
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_transaction.test_txnproducer_produces_messages": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "setattr",
    "workflows.services.test_sample_service_transaction.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_transaction.test_txnproducer_registers_idle_timer": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "setattr",
    "workflows.services.test_sample_service_transaction.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_transaction.test_txnservice_crash_function_crashes_sometimes": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "all",
    "any",
    "fn",
    "range"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_transaction.test_txnservice_subscribes_to_channel": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "setattr",
    "workflows.services.test_sample_service_transaction.mock"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_transaction.test_txnservice_uses_transactions_correctly": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "workflows.services.test_sample_service_transaction.mock",
    "workflows.services.test_sample_service_transaction.setup_txnservice"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_sample_service_transaction.workflows.services": {
  "data": {
   "shadows": "workflows.services"
  },
  "type": "import"
 },
 "workflows.services.test_sample_service_transaction.workflows.services.sample_transaction": {
  "data": {
   "shadows": "workflows.services.sample_transaction"
  },
  "type": "import"
 },
 "workflows.services.test_services": {
  "data": {},
  "type": "module"
 },
 "workflows.services.test_services.test_known_services_is_a_dictionary": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "dict",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "workflows.services.test_services.workflows.services": {
  "data": {
   "shadows": "workflows.services"
  },
  "type": "import"
 },
 "workflows.test_basics": {
  "data": {},
  "type": "module"
 },
 "workflows.test_basics.test_workflows_version_returns_sensible_value": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "workflows.test_basics.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.test_basics.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.transport": {
  "data": {},
  "type": "module"
 },
 "workflows.transport.add_command_line_options": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "get_known_transports",
    "transport"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport": {
  "data": {},
  "type": "module"
 },
 "workflows.transport.common_transport.CommonTransport": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "set",
    "workflows.transport.common_transport.logging"
   ]
  },
  "type": "class"
 },
 "workflows.transport.common_transport.CommonTransport._ack": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport._broadcast": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport._mangle_for_receiving": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport._mangle_for_sending": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport._nack": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport._send": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport._subscribe": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport._subscribe_broadcast": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport._transaction_abort": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport._transaction_begin": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport._transaction_commit": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport._unsubscribe": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.ack": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "dict",
    "isinstance",
    "workflows.transport.common_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.broadcast": {
  "data": {
   "lineno": 201
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.connect": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.disconnect": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.drop_callback_reference": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "workflows.transport.common_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.is_connected": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.nack": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "dict",
    "isinstance",
    "workflows.transport.common_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.raw_broadcast": {
  "data": {
   "lineno": 215
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.raw_send": {
  "data": {
   "lineno": 187
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.send": {
  "data": {
   "lineno": 173
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.subscribe": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "callback"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.subscribe.mangled_callback": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "callback"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.subscribe_broadcast": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "callback"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.subscribe_broadcast.mangled_callback": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "callback"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.subscription_callback": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "callback",
    "workflows.transport.common_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.subscription_callback_set_intercept": {
  "data": {
   "lineno": 163
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.transaction_abort": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "workflows.transport.common_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.transaction_begin": {
  "data": {
   "lineno": 285
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.transaction_commit": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "workflows.transport.common_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.CommonTransport.unsubscribe": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "workflows.transport.common_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.common_transport.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "workflows.transport.common_transport.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.transport.default_transport": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "workflows.transport.get_known_transports": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "hasattr",
    "setattr",
    "workflows.transport.pkg_resources"
   ]
  },
  "type": "function"
 },
 "workflows.transport.lookup": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "get_known_transports",
    "workflows.transport.default_transport"
   ]
  },
  "type": "function"
 },
 "workflows.transport.pkg_resources": {
  "data": {
   "shadows": "pkg_resources"
  },
  "type": "import"
 },
 "workflows.transport.stomp_transport": {
  "data": {},
  "type": "module"
 },
 "workflows.transport.stomp_transport.CommonTransport": {
  "data": {
   "shadows": "workflows.transport.common_transport.CommonTransport"
  },
  "type": "import"
 },
 "workflows.transport.stomp_transport.StompTransport": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "workflows.transport.common_transport.CommonTransport"
   ]
  },
  "type": "class"
 },
 "workflows.transport.stomp_transport.StompTransport.__init__": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "workflows.transport.stomp_transport.stomp",
    "workflows.transport.stomp_transport.threading"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._ack": {
  "data": {
   "lineno": 443
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._broadcast": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "int",
    "workflows.transport.stomp_transport.stomp",
    "workflows.transport.stomp_transport.time"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._mangle_for_receiving": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "staticmethod",
    "workflows.transport.stomp_transport.json"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._mangle_for_sending": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": [
    "staticmethod",
    "workflows.transport.stomp_transport.json"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._nack": {
  "data": {
   "lineno": 454
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._on_message": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "int",
    "repr",
    "target_function",
    "workflows.transport.stomp_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._send": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "int",
    "workflows.transport.stomp_transport.stomp",
    "workflows.transport.stomp_transport.time",
    "workflows.transport.stomp_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._subscribe": {
  "data": {
   "lineno": 281
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._subscribe_broadcast": {
  "data": {
   "lineno": 324
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._transaction_abort": {
  "data": {
   "lineno": 429
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._transaction_begin": {
  "data": {
   "lineno": 422
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._transaction_commit": {
  "data": {
   "lineno": 436
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport._unsubscribe": {
  "data": {
   "lineno": 349
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport.add_command_line_options": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "classmethod",
    "dir"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport.add_command_line_options_argparse": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "classmethod",
    "int",
    "str"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport.add_command_line_options_argparse.SetParameter": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "workflows.transport.stomp_transport.argparse"
   ]
  },
  "type": "class"
 },
 "workflows.transport.stomp_transport.StompTransport.add_command_line_options_argparse.SetParameter.__call__": {
  "data": {
   "lineno": 79
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport.add_command_line_options_optparse": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport.add_command_line_options_optparse.set_parameter": {
  "data": {
   "lineno": 138
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport.broadcast_status": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "int",
    "str",
    "workflows.transport.stomp_transport.json",
    "workflows.transport.stomp_transport.time"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport.connect": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "int",
    "workflows.transport.stomp_transport.stomp",
    "workflows.transport.stomp_transport.threading",
    "workflows.transport.stomp_transport.time",
    "workflows.transport.stomp_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport.disconnect": {
  "data": {
   "lineno": 267
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport.get_namespace": {
  "data": {
   "lineno": 36
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport.is_connected": {
  "data": {
   "lineno": 262
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.StompTransport.load_configuration_file": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "classmethod",
    "workflows.transport.stomp_transport.configparser",
    "workflows.transport.stomp_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.stomp_transport.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "workflows.transport.stomp_transport.configparser": {
  "data": {
   "shadows": "configparser"
  },
  "type": "import"
 },
 "workflows.transport.stomp_transport.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "workflows.transport.stomp_transport.stomp": {
  "data": {
   "shadows": "stomp"
  },
  "type": "import"
 },
 "workflows.transport.stomp_transport.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "workflows.transport.stomp_transport.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "workflows.transport.stomp_transport.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.transport.test_common_transport": {
  "data": {},
  "type": "module"
 },
 "workflows.transport.test_common_transport.CommonTransport": {
  "data": {
   "shadows": "workflows.transport.common_transport.CommonTransport"
  },
  "type": "import"
 },
 "workflows.transport.test_common_transport.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.transport.test_common_transport.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "workflows.transport.test_common_transport.test_broadcast_subscription_messages_pass_mangling_function": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "workflows.transport.common_transport.CommonTransport",
    "workflows.transport.test_common_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_common_transport.test_callbacks_can_be_intercepted": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "workflows.transport.common_transport.CommonTransport",
    "workflows.transport.test_common_transport.mock",
    "workflows.transport.test_common_transport.pytest"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_common_transport.test_create_and_destroy_transactions": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "workflows.transport.common_transport.CommonTransport",
    "workflows.transport.test_common_transport.mock",
    "workflows.transport.test_common_transport.pytest",
    "workflows.transport.test_common_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_common_transport.test_messages_can_be_acknowledged_and_rejected": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "workflows.transport.common_transport.CommonTransport",
    "workflows.transport.test_common_transport.mock",
    "workflows.transport.test_common_transport.pytest",
    "workflows.transport.test_common_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_common_transport.test_simple_broadcast_message": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "workflows.transport.common_transport.CommonTransport",
    "workflows.transport.test_common_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_common_transport.test_simple_send_message": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "workflows.transport.common_transport.CommonTransport",
    "workflows.transport.test_common_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_common_transport.test_simple_subscribe_unsubscribe_a_broadcast": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "callback",
    "workflows.transport.common_transport.CommonTransport",
    "workflows.transport.test_common_transport.mock",
    "workflows.transport.test_common_transport.pytest",
    "workflows.transport.test_common_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_common_transport.test_subscribe_unsubscribe_a_channel": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "callback",
    "workflows.transport.common_transport.CommonTransport",
    "workflows.transport.test_common_transport.mock",
    "workflows.transport.test_common_transport.pytest",
    "workflows.transport.test_common_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_common_transport.test_subscription_messages_pass_mangling_function": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "workflows.transport.common_transport.CommonTransport",
    "workflows.transport.test_common_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_common_transport.test_unimplemented_communication_methods_should_fail": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "NotImplementedError",
    "getattr",
    "workflows.transport.common_transport.CommonTransport",
    "workflows.transport.test_common_transport.mock",
    "workflows.transport.test_common_transport.pytest"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_common_transport.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport": {
  "data": {},
  "type": "module"
 },
 "workflows.transport.test_stomp_transport.StompTransport": {
  "data": {
   "shadows": "workflows.transport.stomp_transport.StompTransport"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.optparse": {
  "data": {
   "shadows": "optparse"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.reload": {
  "data": {
   "shadows": "imp.reload"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.stomppy": {
  "data": {
   "shadows": "stomp"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.test_ack_message": {
  "data": {
   "lineno": 611,
   "symbols_in_volume": [
    "stomp",
    "stomp._ack",
    "stomp._subscribe",
    "stomp.connect",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_add_command_line_help_argparse": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.inspect",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_add_command_line_help_optparse": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_adding_arguments_to_argparser": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.argparse"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_anonymous_connection": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "globals",
    "imp.reload",
    "stomp",
    "stomp.add_command_line_options",
    "stomp.connect",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock",
    "workflows.transport.test_stomp_transport.optparse",
    "workflows.transport.test_stomp_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_broadcast_status": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "int",
    "stomp",
    "stomp.broadcast_status",
    "stomp.connect",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.json",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_broadcasting_message_with_expiration": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "int",
    "stomp",
    "stomp._broadcast",
    "stomp.connect",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_check_config_file_behaviour": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "globals",
    "imp.reload",
    "stomp",
    "stomp.add_command_line_options",
    "stomp.connect",
    "stomp.get_namespace",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock",
    "workflows.transport.test_stomp_transport.optparse",
    "workflows.transport.test_stomp_transport.os",
    "workflows.transport.test_stomp_transport.pytest",
    "workflows.transport.test_stomp_transport.tempfile",
    "workflows.transport.test_stomp_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_error_handling_on_broadcast": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "stomp",
    "stomp._broadcast",
    "stomp.connect",
    "stomp.exception",
    "stomp.exception.NotConnectedException",
    "stomp.is_connected",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock",
    "workflows.transport.test_stomp_transport.pytest"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_error_handling_on_send": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "stomp",
    "stomp._send",
    "stomp.connect",
    "stomp.exception",
    "stomp.exception.NotConnectedException",
    "stomp.is_connected",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock",
    "workflows.transport.test_stomp_transport.pytest",
    "workflows.transport.test_stomp_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_error_handling_when_connecting_to_broker": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "stomp",
    "stomp.connect",
    "stomp.exception.ConnectFailedException",
    "stomp.is_connected",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock",
    "workflows.transport.test_stomp_transport.pytest",
    "workflows.transport.test_stomp_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_instantiate_link_and_connect_to_broker": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "stomp",
    "stomp.connect",
    "stomp.disconnect",
    "stomp.is_connected",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_lookup_and_initialize_stomp_transport_layer": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "stomp",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.workflows"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_messages_are_deserialized_after_transport": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": [
    "message_handler",
    "stomp",
    "stomp.connect",
    "stomp.subscribe",
    "stomp.subscribe_broadcast",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_messages_are_not_serialized_for_raw_transport": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "stomp",
    "stomp.connect",
    "stomp.raw_broadcast",
    "stomp.raw_send",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_messages_are_serialized_for_transport": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "Exception",
    "stomp",
    "stomp.broadcast",
    "stomp.connect",
    "stomp.send",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock",
    "workflows.transport.test_stomp_transport.pytest"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_nack_message": {
  "data": {
   "lineno": 628,
   "symbols_in_volume": [
    "stomp",
    "stomp._nack",
    "stomp._subscribe",
    "stomp.connect",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_namespace_is_used_correctly": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": [
    "stomp",
    "stomp._broadcast",
    "stomp._send",
    "stomp._subscribe",
    "stomp._subscribe_broadcast",
    "stomp.broadcast_status",
    "stomp.connect",
    "stomp.get_namespace",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.stomp_transport.StompTransport.defaults",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_send_broadcast": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "stomp",
    "stomp._broadcast",
    "stomp.connect",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_send_message": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "stomp",
    "stomp._send",
    "stomp.connect",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_sending_message_with_expiration": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "int",
    "stomp",
    "stomp._send",
    "stomp.connect",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_subscribe_to_broadcast": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": [
    "stomp",
    "stomp._subscribe_broadcast",
    "stomp._unsubscribe",
    "stomp.connect",
    "stomp.subscription_callback",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_subscribe_to_broadcast.callback_resolver": {
  "data": {
   "lineno": 537,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_subscribe_to_queue": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "stomp",
    "stomp._subscribe",
    "stomp._unsubscribe",
    "stomp.connect",
    "stomp.subscription_callback",
    "str",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_subscribe_to_queue.callback_resolver": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.test_transaction_calls": {
  "data": {
   "lineno": 586,
   "symbols_in_volume": [
    "stomp",
    "stomp._send",
    "stomp._transaction_abort",
    "stomp._transaction_begin",
    "stomp._transaction_commit",
    "stomp.connect",
    "workflows.transport.stomp_transport.StompTransport",
    "workflows.transport.test_stomp_transport.mock"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_stomp_transport.workflows": {
  "data": {
   "shadows": "workflows"
  },
  "type": "import"
 },
 "workflows.transport.test_stomp_transport.workflows.transport": {
  "data": {
   "shadows": "workflows.transport"
  },
  "type": "import"
 },
 "workflows.transport.test_transport": {
  "data": {},
  "type": "module"
 },
 "workflows.transport.test_transport.test_known_transports_is_a_dictionary": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "dict",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "workflows.transport.test_transport.test_load_any_transport": {
  "data": {
   "lineno": 9
  },
  "type": "function"
 },
 "workflows.transport.test_transport.workflows.transport": {
  "data": {
   "shadows": "workflows.transport"
  },
  "type": "import"
 },
 "workflows.util": {
  "data": {},
  "type": "module"
 },
 "workflows.util.generate_unique_host_id": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "reversed",
    "workflows.util.os",
    "workflows.util.socket"
   ]
  },
  "type": "function"
 },
 "workflows.util.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "workflows.util.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "workflows.util.test_util": {
  "data": {},
  "type": "module"
 },
 "workflows.util.test_util.test_generated_host_ids_are_somewhat_sensible": {
  "data": {
   "lineno": 4
  },
  "type": "function"
 },
 "workflows.util.test_util.workflows.util": {
  "data": {
   "shadows": "workflows.util"
  },
  "type": "import"
 },
 "workflows.version": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "workflows.__version__"
   ]
  },
  "type": "function"
 }
}