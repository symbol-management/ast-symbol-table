{
 "eolearn": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "eolearn.mask": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "eolearn.mask.cloud_mask": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "eolearn.mask.cloud_mask.AddCloudMaskTask": {
  "lineno": 35,
  "symbols_in_volume": [
   "eolearn.core.EOTask"
  ],
  "type": "class"
 },
 "eolearn.mask.cloud_mask.AddCloudMaskTask.__init__": {
  "lineno": 51,
  "symbols_in_volume": [
   "s2cloudless.MODEL_EVALSCRIPT",
   "sentinelhub.DataSource.SENTINEL2_L1C",
   "sentinelhub.MimeType.TIFF_d32f",
   "sentinelhub.exceptions.SHDeprecationWarning",
   "warnings.warn"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddCloudMaskTask._downscaling": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddCloudMaskTask._get_rescale_factors": {
  "lineno": 127,
  "symbols_in_volume": [
   "sentinelhub.ServiceType",
   "sentinelhub.ServiceType.PROCESSING_API",
   "sentinelhub.ServiceType.WCS",
   "sentinelhub.ServiceType.WMS"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddCloudMaskTask._get_wcs_request": {
  "lineno": 112,
  "symbols_in_volume": [
   "sentinelhub.WcsRequest"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddCloudMaskTask._get_wms_request": {
  "lineno": 96,
  "symbols_in_volume": [
   "sentinelhub.WmsRequest"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddCloudMaskTask._make_request": {
  "lineno": 212,
  "symbols_in_volume": [
   "eolearn.core.get_common_timestamps",
   "numpy.asarray",
   "sentinelhub.CustomUrlParam.EVALSCRIPT",
   "sentinelhub.CustomUrlParam.SHOWLOGO",
   "sentinelhub.CustomUrlParam.TRANSPARENT",
   "sentinelhub.ServiceType",
   "sentinelhub.ServiceType.WCS",
   "sentinelhub.ServiceType.WMS"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddCloudMaskTask._upsampling": {
  "lineno": 188,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddCloudMaskTask.execute": {
  "lineno": 259,
  "symbols_in_volume": [
   "eolearn.core.execute_with_mp_lock",
   "numpy.bool",
   "numpy.float32"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask": {
  "lineno": 315,
  "symbols_in_volume": [
   "eolearn.core.EOTask",
   "os.path.dirname",
   "os.path.join"
  ],
  "type": "class"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask.__init__": {
  "lineno": 355,
  "symbols_in_volume": [
   "eolearn.core.FeatureType.DATA",
   "eolearn.core.FeatureType.MASK",
   "numpy.sum",
   "numpy.uint8",
   "skimage.morphology.disk"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._average": {
  "lineno": 603,
  "symbols_in_volume": [
   "cv2.BORDER_REFLECT",
   "cv2.filter2D",
   "numpy.float64"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._average_all": {
  "lineno": 632,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._dilate": {
  "lineno": 606,
  "symbols_in_volume": [
   "cv2.dilate",
   "numpy.uint8"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._dilate_all": {
  "lineno": 638,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._extract_multi_features": {
  "lineno": 787,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.empty",
   "numpy.prod"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._frame_indices": {
  "lineno": 546,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._get_max": {
  "lineno": 504,
  "symbols_in_volume": [
   "numpy.ma.max"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._get_mean": {
  "lineno": 514,
  "symbols_in_volume": [
   "numpy.ma.mean"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._get_min": {
  "lineno": 509,
  "symbols_in_volume": [
   "numpy.ma.min"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._get_std": {
  "lineno": 519,
  "symbols_in_volume": [
   "numpy.ma.std"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._map_sequence": {
  "lineno": 609,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._map_sequence.func3d": {
  "lineno": 622,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._map_sequence.func4d": {
  "lineno": 625,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._mono_iterations": {
  "lineno": 683,
  "symbols_in_volume": [
   "eolearn.core.execute_with_mp_lock",
   "numpy.empty",
   "numpy.prod"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._multi_iterations": {
  "lineno": 708,
  "symbols_in_volume": [
   "eolearn.core.execute_with_mp_lock",
   "numpy.empty",
   "numpy.ma.array",
   "numpy.prod"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._parse_resolution_arg": {
  "lineno": 471,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._red_ssim": {
  "lineno": 565,
  "symbols_in_volume": [
   "cv2.BORDER_REFLECT",
   "cv2.GaussianBlur",
   "numpy.divide",
   "numpy.float64"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._scale_factors": {
  "lineno": 524,
  "symbols_in_volume": [
   "sentinelhub.bbox_to_resolution"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._ssim_stats": {
  "lineno": 644,
  "symbols_in_volume": [
   "numpy.delete",
   "numpy.empty",
   "numpy.empty_like",
   "numpy.float32",
   "numpy.ma.array",
   "numpy.stack"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._update_batches": {
  "lineno": 749,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._win_avg": {
  "lineno": 593,
  "symbols_in_volume": [
   "cv2.BORDER_REFLECT",
   "cv2.GaussianBlur",
   "numpy.float64"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask._win_prevar": {
  "lineno": 598,
  "symbols_in_volume": [
   "cv2.BORDER_REFLECT",
   "cv2.GaussianBlur",
   "numpy.float64"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask.execute": {
  "lineno": 831,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float32",
   "numpy.uint8"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask.mono_classifier": {
  "lineno": 486,
  "symbols_in_volume": [
   "joblib.load",
   "os.path.join"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.AddMultiCloudMaskTask.multi_classifier": {
  "lineno": 495,
  "symbols_in_volume": [
   "joblib.load",
   "os.path.join"
  ],
  "type": "function"
 },
 "eolearn.mask.cloud_mask.get_s2_pixel_cloud_detector": {
  "lineno": 301,
  "symbols_in_volume": [
   "s2cloudless.S2PixelCloudDetector"
  ],
  "type": "function"
 },
 "eolearn.mask.mask_counting": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "eolearn.mask.mask_counting.ClassFrequencyTask": {
  "lineno": 18,
  "symbols_in_volume": [
   "eolearn.core.MapFeatureTask"
  ],
  "type": "class"
 },
 "eolearn.mask.mask_counting.ClassFrequencyTask.__init__": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.mask_counting.ClassFrequencyTask.map_method": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.count_nonzero",
   "numpy.divide",
   "numpy.errstate",
   "numpy.float32"
  ],
  "type": "function"
 },
 "eolearn.mask.masking": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "eolearn.mask.masking.AddValidDataMaskTask": {
  "lineno": 19,
  "symbols_in_volume": [
   "eolearn.core.EOTask"
  ],
  "type": "class"
 },
 "eolearn.mask.masking.AddValidDataMaskTask.__init__": {
  "lineno": 25,
  "symbols_in_volume": [
   "eolearn.core.FeatureType.MASK"
  ],
  "type": "function"
 },
 "eolearn.mask.masking.AddValidDataMaskTask.execute": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.masking.MaskFeature": {
  "lineno": 50,
  "symbols_in_volume": [
   "eolearn.core.EOTask"
  ],
  "type": "class"
 },
 "eolearn.mask.masking.MaskFeature.__init__": {
  "lineno": 58,
  "symbols_in_volume": [
   "eolearn.core.FeatureType.DATA",
   "eolearn.core.FeatureType.MASK",
   "numpy.nan"
  ],
  "type": "function"
 },
 "eolearn.mask.masking.MaskFeature.execute": {
  "lineno": 80,
  "symbols_in_volume": [
   "numpy.copy"
  ],
  "type": "function"
 },
 "eolearn.mask.masking.apply_mask": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.snow_mask": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "eolearn.mask.snow_mask.BaseSnowMask": {
  "lineno": 26,
  "symbols_in_volume": [
   "eolearn.core.EOTask"
  ],
  "type": "class"
 },
 "eolearn.mask.snow_mask.BaseSnowMask.__init__": {
  "lineno": 28,
  "symbols_in_volume": [
   "eolearn.core.FeatureType.MASK"
  ],
  "type": "function"
 },
 "eolearn.mask.snow_mask.BaseSnowMask._apply_dilation": {
  "lineno": 44,
  "symbols_in_volume": [
   "numpy.array",
   "skimage.morphology.binary_dilation",
   "skimage.morphology.disk"
  ],
  "type": "function"
 },
 "eolearn.mask.snow_mask.BaseSnowMask.execute": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.snow_mask.SnowMask": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "class"
 },
 "eolearn.mask.snow_mask.SnowMask.__init__": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.snow_mask.SnowMask.execute": {
  "lineno": 83,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.bool",
   "numpy.errstate",
   "numpy.isfinite",
   "numpy.logical_and",
   "numpy.logical_or",
   "numpy.newaxis.astype",
   "numpy.where"
  ],
  "type": "function"
 },
 "eolearn.mask.snow_mask.TheiaSnowMask": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "class"
 },
 "eolearn.mask.snow_mask.TheiaSnowMask.__init__": {
  "lineno": 122,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.snow_mask.TheiaSnowMask._adjust_cloud_mask": {
  "lineno": 192,
  "symbols_in_volume": [
   "numpy.logical_and",
   "numpy.logical_or",
   "numpy.ones",
   "numpy.uint8",
   "numpy.where"
  ],
  "type": "function"
 },
 "eolearn.mask.snow_mask.TheiaSnowMask._apply_first_pass": {
  "lineno": 203,
  "symbols_in_volume": [
   "itertools.product",
   "numpy.array",
   "numpy.ceil",
   "numpy.histogram",
   "numpy.linspace",
   "numpy.logical_and",
   "numpy.logical_not",
   "numpy.logical_or",
   "numpy.max",
   "numpy.min",
   "numpy.sum",
   "numpy.where",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "eolearn.mask.snow_mask.TheiaSnowMask._apply_second_pass": {
  "lineno": 231,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.argmax",
   "numpy.logical_and",
   "numpy.logical_not",
   "numpy.sum",
   "numpy.where",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "eolearn.mask.snow_mask.TheiaSnowMask._resample_red": {
  "lineno": 178,
  "symbols_in_volume": [
   "numpy.newaxis"
  ],
  "type": "function"
 },
 "eolearn.mask.snow_mask.TheiaSnowMask._validate_params": {
  "lineno": 171,
  "symbols_in_volume": [],
  "type": "function"
 },
 "eolearn.mask.snow_mask.TheiaSnowMask.execute": {
  "lineno": 247,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.errstate",
   "numpy.isfinite",
   "numpy.logical_or",
   "numpy.newaxis.astype"
  ],
  "type": "function"
 },
 "eolearn.mask.utilities": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "eolearn.mask.utilities.map_over_axis": {
  "lineno": 17,
  "symbols_in_volume": [
   "numpy.moveaxis",
   "numpy.stack"
  ],
  "type": "function"
 },
 "eolearn.mask.utilities.resize_images": {
  "lineno": 54,
  "symbols_in_volume": [
   "cv2.INTER_CUBIC",
   "cv2.INTER_LINEAR",
   "cv2.INTER_NEAREST"
  ],
  "type": "function"
 },
 "eolearn.mask.utilities.resize_images._resize2d": {
  "lineno": 103,
  "symbols_in_volume": [
   "cv2.BORDER_REFLECT",
   "cv2.GaussianBlur",
   "cv2.resize"
  ],
  "type": "function"
 }
}