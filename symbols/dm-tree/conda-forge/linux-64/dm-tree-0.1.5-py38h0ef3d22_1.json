{
 "tree.tree_benchmark": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      71
     ]
    },
    "tree.tree_benchmark.benchmark_map": {
     "line number": [
      57,
      58,
      59,
      60,
      61,
      62
     ]
    },
    "tree.tree_benchmark.collections": {
     "line number": [
      56
     ]
    },
    "tree.tree_benchmark.main": {
     "line number": [
      72
     ]
    },
    "tree.tree_benchmark.map_to_list": {
     "line number": [
      60,
      61,
      62
     ]
    },
    "tree.tree_benchmark.tree": {
     "line number": [
      57,
      58,
      59
     ]
    }
   }
  },
  "type": "module"
 },
 "tree.tree_benchmark.BENCHMARKS": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "tree.tree_benchmark.TIME_UNITS": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tree.tree_benchmark.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tree.tree_benchmark.benchmark_map": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "tree.tree_benchmark.benchmark_map.benchmark_fn": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "map_fn": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_benchmark.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tree.tree_benchmark.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tree.tree_benchmark.format_time": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "tree.tree_benchmark.TIME_UNITS": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_benchmark.main": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "print": {
     "line number": [
      68
     ]
    },
    "tree.tree_benchmark.BENCHMARKS": {
     "line number": [
      67
     ]
    },
    "tree.tree_benchmark.format_time": {
     "line number": [
      68
     ]
    },
    "tree.tree_benchmark.run_benchmark": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_benchmark.map_to_list": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "list": {
     "line number": [
      47
     ]
    },
    "map": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_benchmark.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tree.tree_benchmark.run_benchmark": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "tree.tree_benchmark.timeit": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_benchmark.timeit": {
  "data": {
   "shadows": "timeit"
  },
  "type": "import"
 },
 "tree.tree_benchmark.tree": {
  "data": {
   "shadows": "tree"
  },
  "type": "import"
 },
 "tree.tree_test": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      1027
     ]
    },
    "tree.tree_test.unittest": {
     "line number": [
      1028
     ]
    }
   }
  },
  "type": "module"
 },
 "tree.tree_test.DoctestTest": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "absl.testing.parameterized.TestCase": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "tree.tree_test.DoctestTest.testDoctest": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "tree.tree_test.doctest": {
     "line number": [
      42,
      43
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      43,
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "absl.testing.parameterized.TestCase": {
     "line number": [
      48
     ]
    },
    "tree.tree_test.collections": {
     "line number": [
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258,
      934,
      935
     ]
    }
   }
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.SameNamedType1": {
  "data": {
   "lineno": 261
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.assertAllEquals": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "numpy.asarray": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "bytearray": {
     "line number": [
      270
     ]
    },
    "numpy.array": {
     "line number": [
      271
     ]
    },
    "tree.tree_test.STRUCTURE1": {
     "line number": [
      266
     ]
    },
    "tree.tree_test.STRUCTURE2": {
     "line number": [
      266
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      266,
      267,
      268,
      269,
      270,
      271
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_classWrappingNamedTuple": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      386
     ]
    },
    "tree.tree_test.NestTest": {
     "line number": [
      387,
      387
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      386
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_dictionaryDifferentKeys": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      356
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      357
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNameNamedStructures": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      378
     ]
    },
    "tree.tree_test.NestTest": {
     "line number": [
      379,
      379
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      378
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNamedTuples": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      330
     ]
    },
    "tree.tree_test.NestTest": {
     "line number": [
      331,
      331
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      330
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNesting": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      316
     ]
    },
    "tree.tree_test.STRUCTURE1": {
     "line number": [
      319
     ]
    },
    "tree.tree_test.STRUCTURE_DIFFERENT_NESTING": {
     "line number": [
      319
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      319
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNumElements": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      275
     ]
    },
    "tree.tree_test.STRUCTURE1": {
     "line number": [
      286
     ]
    },
    "tree.tree_test.STRUCTURE_DIFFERENT_NUM_ELEMENTS": {
     "line number": [
      286
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      286
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentlyNestedLists": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      343
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      346
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_intVsList": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      301
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      308
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_listStructureWithAndWithoutTypes": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      350
     ]
    },
    "tree.tree_test.STRUCTURE1": {
     "line number": [
      351,
      352,
      353
     ]
    },
    "tree.tree_test.STRUCTURE2": {
     "line number": [
      352
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      351,
      352,
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_listVsNdArray": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      290
     ]
    },
    "numpy.array": {
     "line number": [
      297
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      297
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameDifferentFieldNames": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      382
     ]
    },
    "tree.tree_test.NestTest": {
     "line number": [
      383,
      383
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      382
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameNamedTuples": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": {
    "tree.tree_test.NestTest": {
     "line number": [
      360,
      361
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      360
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameNamedTuplesDifferentStructure": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      372
     ]
    },
    "tree.tree_test.NestTest": {
     "line number": [
      374,
      374,
      375,
      375
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      373
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameNamedTuplesNested": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": {
    "tree.tree_test.NestTest": {
     "line number": [
      367,
      367,
      368,
      368
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      366
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNamedTupleDifferentContents": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "tree.tree_test.NestTest": {
     "line number": [
      326,
      327
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      326
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNamedTupleDifferentStructuredContents": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      335
     ]
    },
    "tree.tree_test.NestTest": {
     "line number": [
      338,
      339
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      338
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_tupleVsList": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      312
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_tupleVsNamedTuple": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      322
     ]
    },
    "tree.tree_test.NestTest": {
     "line number": [
      323
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertShallowStructure": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      486
     ]
    },
    "ValueError": {
     "line number": [
      477,
      498
     ]
    },
    "len": {
     "line number": [
      479,
      480
     ]
    },
    "tree.tree_test.collections": {
     "line number": [
      502,
      503
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      478,
      481,
      487,
      490,
      492,
      499,
      500,
      504,
      507
     ]
    },
    "type": {
     "line number": [
      488,
      489
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAttrsFlattenAndUnflatten": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "BadAttr": {
     "line number": [
      76
     ]
    },
    "SampleAttr": {
     "line number": [
      65,
      71
     ]
    },
    "TypeError": {
     "line number": [
      75
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      66,
      67,
      68,
      70,
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAttrsFlattenAndUnflatten.BadAttr": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "object": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.testAttrsFlattenAndUnflatten.SampleAttr": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "object": {
     "line number": [
      60
     ]
    },
    "tree.tree_test.attr": {
     "line number": [
      61,
      62,
      59
     ]
    }
   }
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.testAttrsMapStructure": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "SampleAttr": {
     "line number": [
      93
     ]
    },
    "absl.testing.parameterized.parameters": {
     "line number": [
      78
     ]
    },
    "tree.tree_test.collections": {
     "line number": [
      82,
      84
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      94
     ]
    },
    "tree.tree_test.wrapt": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAttrsMapStructure.SampleAttr": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "object": {
     "line number": [
      88
     ]
    },
    "tree.tree_test.attr": {
     "line number": [
      89,
      90,
      91,
      87
     ]
    }
   }
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.testByteStringsNotTreatedAsIterable": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": {
    "tree.tree_test.tree": {
     "line number": [
      668
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenAndUnflatten": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      125
     ]
    },
    "ValueError": {
     "line number": [
      122,
      128
     ]
    },
    "numpy.array": {
     "line number": [
      116,
      116,
      120,
      120
     ]
    },
    "point": {
     "line number": [
      105,
      105
     ]
    },
    "tree.tree_test.collections": {
     "line number": [
      104
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      100,
      102,
      107,
      108,
      115,
      116,
      118,
      120,
      123,
      126,
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenAndUnflatten_withDicts": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "list": {
     "line number": [
      194
     ]
    },
    "named_tuple": {
     "line number": [
      155,
      174
     ]
    },
    "tree.tree_test.collections": {
     "line number": [
      152,
      159,
      178,
      193
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      169,
      188,
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenDictOrder": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "tree.tree_test.collections": {
     "line number": [
      132
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      134,
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenUpTo": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": {
    "ABAttr": {
     "line number": [
      550,
      551
     ]
    },
    "TypeError": {
     "line number": [
      632,
      641,
      651,
      660
     ]
    },
    "ab_tuple": {
     "line number": [
      537,
      538,
      539,
      559,
      569,
      576
     ]
    },
    "tree.tree_test.collections": {
     "line number": [
      537,
      558,
      560,
      565,
      571,
      572,
      577
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      513,
      514,
      521,
      523,
      531,
      540,
      552,
      562,
      566,
      573,
      583,
      584,
      590,
      591,
      598,
      599,
      605,
      606,
      614,
      615,
      622,
      623,
      633,
      634,
      635,
      642,
      643,
      644,
      652,
      653,
      654,
      661,
      662,
      663
     ]
    },
    "type": {
     "line number": [
      633,
      642,
      652,
      661
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenUpTo.ABAttr": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": {
    "object": {
     "line number": [
      547
     ]
    },
    "tree.tree_test.attr": {
     "line number": [
      548,
      549,
      546
     ]
    }
   }
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.testFlattenWithPath": {
  "data": {
   "lineno": 938,
   "symbols_in_volume": {
    "Bar": {
     "line number": [
      942,
      944,
      944,
      947,
      949,
      951
     ]
    },
    "Foo": {
     "line number": [
      942,
      944
     ]
    },
    "absl.testing.parameterized.parameters": {
     "line number": [
      938
     ]
    },
    "dict": {
     "line number": [
      939,
      940,
      941,
      942,
      944,
      947,
      949,
      951
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      955
     ]
    },
    "tree.tree_test.wrapt": {
     "line number": [
      951
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenWithPathUpTo": {
  "data": {
   "lineno": 671,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      863,
      875,
      888,
      900
     ]
    },
    "ValueError": {
     "line number": [
      804
     ]
    },
    "ab_tuple": {
     "line number": [
      727,
      728,
      729,
      740,
      762,
      772
     ]
    },
    "get_paths_and_values": {
     "line number": [
      683,
      685,
      697,
      719,
      731,
      744,
      755,
      767,
      780,
      782,
      791,
      793,
      808,
      814,
      816,
      825,
      827,
      838,
      840,
      850,
      852,
      866,
      868,
      878,
      880,
      891,
      893,
      903,
      905
     ]
    },
    "len": {
     "line number": [
      806,
      807
     ]
    },
    "tree.tree_test.collections": {
     "line number": [
      727,
      739,
      741,
      753,
      764,
      765,
      773
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      700,
      702,
      805,
      864,
      876,
      889,
      901
     ]
    },
    "type": {
     "line number": [
      864,
      876,
      889,
      901
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenWithPathUpTo.get_paths_and_values": {
  "data": {
   "lineno": 673,
   "symbols_in_volume": {
    "tree.tree_test.tree": {
     "line number": [
      674
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlatten_bytearrayIsNotFlattened": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "bytearray": {
     "line number": [
      208,
      213
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      209,
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlatten_numpyIsNotFlattened": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "numpy.array": {
     "line number": [
      197
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlatten_stringIsNotFlattened": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "tree.tree_test.tree": {
     "line number": [
      203,
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testIsSequence": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "bytearray": {
     "line number": [
      237
     ]
    },
    "numpy.ones": {
     "line number": [
      243,
      246
     ]
    },
    "numpy.tanh": {
     "line number": [
      245
     ]
    },
    "set": {
     "line number": [
      242
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      234,
      235,
      236,
      237,
      238,
      239,
      240,
      241,
      242,
      244,
      245,
      246
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapStructure": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      418,
      430,
      437
     ]
    },
    "ValueError": {
     "line number": [
      421,
      424,
      427,
      433,
      443,
      447,
      450
     ]
    },
    "empty_nt": {
     "line number": [
      412,
      413
     ]
    },
    "tree.tree_test.STRUCTURE1": {
     "line number": [
      392,
      393,
      398,
      438,
      440,
      448,
      451
     ]
    },
    "tree.tree_test.collections": {
     "line number": [
      411
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      392,
      393,
      396,
      397,
      403,
      405,
      408,
      409,
      410,
      412,
      416,
      419,
      422,
      425,
      428,
      431,
      434,
      438,
      440,
      444,
      448,
      451
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapStructureUpTo": {
  "data": {
   "lineno": 909,
   "symbols_in_volume": {
    "ab_tuple": {
     "line number": [
      911,
      913,
      914
     ]
    },
    "len": {
     "line number": [
      928
     ]
    },
    "op_tuple": {
     "line number": [
      914,
      914
     ]
    },
    "tree.tree_test.collections": {
     "line number": [
      911,
      912
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      915,
      927
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapStructureWithStrings": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": {
    "ab_tuple": {
     "line number": [
      455,
      456,
      464
     ]
    },
    "tree.tree_test.collections": {
     "line number": [
      454
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      457,
      466,
      468
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapWithPathCompatibleStructures": {
  "data": {
   "lineno": 957,
   "symbols_in_volume": {
    "absl.testing.parameterized.named_parameters": {
     "line number": [
      957
     ]
    },
    "dict": {
     "line number": [
      958,
      960,
      962,
      964
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      975
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapWithPathCompatibleStructures.path_and_sum": {
  "data": {
   "lineno": 972,
   "symbols_in_volume": {
    "sum": {
     "line number": [
      973
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapWithPathIncompatibleStructures": {
  "data": {
   "lineno": 979,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      984
     ]
    },
    "ValueError": {
     "line number": [
      981,
      983,
      988
     ]
    },
    "absl.testing.parameterized.named_parameters": {
     "line number": [
      979
     ]
    },
    "dict": {
     "line number": [
      980,
      982,
      984,
      985
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      992
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMappingProxyType": {
  "data": {
   "lineno": 994,
   "symbols_in_volume": {
    "tree.tree_test.six": {
     "line number": [
      995
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      1000,
      1001,
      1002
     ]
    },
    "tree.tree_test.types": {
     "line number": [
      998,
      999
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testTraverseEarlyTermination": {
  "data": {
   "lineno": 1013,
   "symbols_in_volume": {
    "tree.tree_test.tree": {
     "line number": [
      1020
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testTraverseEarlyTermination.visit": {
  "data": {
   "lineno": 1016,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1018
     ]
    },
    "len": {
     "line number": [
      1018
     ]
    },
    "tuple": {
     "line number": [
      1018
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testTraverseListsToTuples": {
  "data": {
   "lineno": 1004,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1009
     ]
    },
    "list": {
     "line number": [
      1009
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      1008
     ]
    },
    "tuple": {
     "line number": [
      1009
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenDictOrder": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "tree.tree_test.collections": {
     "line number": [
      140,
      146
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      143,
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenSequenceAs_defaultdict": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "list": {
     "line number": [
      227,
      230
     ]
    },
    "tree.tree_test.collections": {
     "line number": [
      226,
      229
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenSequenceAs_notIterableError": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      216
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      217
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenSequenceAs_wrongLengthsError": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      221
     ]
    },
    "tree.tree_test.tree": {
     "line number": [
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "tree.tree_test.STRUCTURE1": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tree.tree_test.STRUCTURE2": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tree.tree_test.STRUCTURE_DIFFERENT_NESTING": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tree.tree_test.STRUCTURE_DIFFERENT_NUM_ELEMENTS": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tree.tree_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tree.tree_test.attr": {
  "data": {
   "shadows": "attr"
  },
  "type": "import"
 },
 "tree.tree_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tree.tree_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tree.tree_test.doctest": {
  "data": {
   "shadows": "doctest"
  },
  "type": "import"
 },
 "tree.tree_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tree.tree_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tree.tree_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tree.tree_test.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tree.tree_test.tree": {
  "data": {
   "shadows": "tree"
  },
  "type": "import"
 },
 "tree.tree_test.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "tree.tree_test.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "tree.tree_test.wrapt": {
  "data": {
   "shadows": "wrapt"
  },
  "type": "import"
 }
}