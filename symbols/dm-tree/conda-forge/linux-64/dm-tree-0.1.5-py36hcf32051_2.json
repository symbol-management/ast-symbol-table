{
 "tree.tree_benchmark": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tree.tree_benchmark.benchmark_map",
    "tree.tree_benchmark.collections",
    "tree.tree_benchmark.main",
    "tree.tree_benchmark.map_to_list",
    "tree.tree_benchmark.tree"
   ]
  },
  "type": "module"
 },
 "tree.tree_benchmark.BENCHMARKS": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "tree.tree_benchmark.TIME_UNITS": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tree.tree_benchmark.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tree.tree_benchmark.benchmark_map": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "tree.tree_benchmark.benchmark_map.benchmark_fn": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "map_fn"
   ]
  },
  "type": "function"
 },
 "tree.tree_benchmark.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tree.tree_benchmark.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tree.tree_benchmark.format_time": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tree.tree_benchmark.TIME_UNITS"
   ]
  },
  "type": "function"
 },
 "tree.tree_benchmark.main": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "print",
    "tree.tree_benchmark.BENCHMARKS",
    "tree.tree_benchmark.format_time",
    "tree.tree_benchmark.run_benchmark"
   ]
  },
  "type": "function"
 },
 "tree.tree_benchmark.map_to_list": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "list",
    "map"
   ]
  },
  "type": "function"
 },
 "tree.tree_benchmark.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tree.tree_benchmark.run_benchmark": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tree.tree_benchmark.timeit"
   ]
  },
  "type": "function"
 },
 "tree.tree_benchmark.timeit": {
  "data": {
   "shadows": "timeit"
  },
  "type": "import"
 },
 "tree.tree_benchmark.tree": {
  "data": {
   "shadows": "tree"
  },
  "type": "import"
 },
 "tree.tree_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tree.tree_test.unittest"
   ]
  },
  "type": "module"
 },
 "tree.tree_test.DoctestTest": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase"
   ]
  },
  "type": "class"
 },
 "tree.tree_test.DoctestTest.testDoctest": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tree.tree_test.doctest",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tree.tree_test.collections"
   ]
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.SameNamedType1": {
  "data": {
   "lineno": 261
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.assertAllEquals": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "numpy.asarray"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "bytearray",
    "numpy.array",
    "tree.tree_test.STRUCTURE1",
    "tree.tree_test.STRUCTURE2",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_classWrappingNamedTuple": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": [
    "TypeError",
    "tree.tree_test.NestTest",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_dictionaryDifferentKeys": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "ValueError",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNameNamedStructures": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "TypeError",
    "tree.tree_test.NestTest",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNamedTuples": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "TypeError",
    "tree.tree_test.NestTest",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNesting": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "ValueError",
    "tree.tree_test.STRUCTURE1",
    "tree.tree_test.STRUCTURE_DIFFERENT_NESTING",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNumElements": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "ValueError",
    "tree.tree_test.STRUCTURE1",
    "tree.tree_test.STRUCTURE_DIFFERENT_NUM_ELEMENTS",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentlyNestedLists": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "ValueError",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_intVsList": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "ValueError",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_listStructureWithAndWithoutTypes": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "TypeError",
    "tree.tree_test.STRUCTURE1",
    "tree.tree_test.STRUCTURE2",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_listVsNdArray": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameDifferentFieldNames": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "TypeError",
    "tree.tree_test.NestTest",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameNamedTuples": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "tree.tree_test.NestTest",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameNamedTuplesDifferentStructure": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "ValueError",
    "tree.tree_test.NestTest",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameNamedTuplesNested": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "tree.tree_test.NestTest",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNamedTupleDifferentContents": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "tree.tree_test.NestTest",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNamedTupleDifferentStructuredContents": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "ValueError",
    "tree.tree_test.NestTest",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_tupleVsList": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "TypeError",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_tupleVsNamedTuple": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "TypeError",
    "tree.tree_test.NestTest",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertShallowStructure": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "len",
    "tree.tree_test.collections",
    "tree.tree_test.tree",
    "type"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAttrsFlattenAndUnflatten": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "BadAttr",
    "SampleAttr",
    "TypeError",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAttrsFlattenAndUnflatten.BadAttr": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.testAttrsFlattenAndUnflatten.SampleAttr": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "object",
    "tree.tree_test.attr"
   ]
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.testAttrsMapStructure": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "SampleAttr",
    "absl.testing.parameterized.parameters",
    "tree.tree_test.collections",
    "tree.tree_test.tree",
    "tree.tree_test.wrapt"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testAttrsMapStructure.SampleAttr": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "object",
    "tree.tree_test.attr"
   ]
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.testByteStringsNotTreatedAsIterable": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": [
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenAndUnflatten": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "numpy.array",
    "point",
    "tree.tree_test.collections",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenAndUnflatten_withDicts": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "list",
    "named_tuple",
    "tree.tree_test.collections",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenDictOrder": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "tree.tree_test.collections",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenUpTo": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": [
    "ABAttr",
    "TypeError",
    "ab_tuple",
    "tree.tree_test.collections",
    "tree.tree_test.tree",
    "type"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenUpTo.ABAttr": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": [
    "object",
    "tree.tree_test.attr"
   ]
  },
  "type": "class"
 },
 "tree.tree_test.NestTest.testFlattenWithPath": {
  "data": {
   "lineno": 938,
   "symbols_in_volume": [
    "Bar",
    "Foo",
    "absl.testing.parameterized.parameters",
    "dict",
    "tree.tree_test.tree",
    "tree.tree_test.wrapt"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenWithPathUpTo": {
  "data": {
   "lineno": 671,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "ab_tuple",
    "get_paths_and_values",
    "len",
    "tree.tree_test.collections",
    "tree.tree_test.tree",
    "type"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenWithPathUpTo.get_paths_and_values": {
  "data": {
   "lineno": 673,
   "symbols_in_volume": [
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlatten_bytearrayIsNotFlattened": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "bytearray",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlatten_numpyIsNotFlattened": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "numpy.array",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlatten_stringIsNotFlattened": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testIsSequence": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "bytearray",
    "numpy.ones",
    "numpy.tanh",
    "set",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapStructure": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "empty_nt",
    "tree.tree_test.STRUCTURE1",
    "tree.tree_test.collections",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapStructureUpTo": {
  "data": {
   "lineno": 909,
   "symbols_in_volume": [
    "ab_tuple",
    "len",
    "op_tuple",
    "tree.tree_test.collections",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapStructureWithStrings": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": [
    "ab_tuple",
    "tree.tree_test.collections",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapWithPathCompatibleStructures": {
  "data": {
   "lineno": 957,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "dict",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapWithPathCompatibleStructures.path_and_sum": {
  "data": {
   "lineno": 972,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapWithPathIncompatibleStructures": {
  "data": {
   "lineno": 979,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "absl.testing.parameterized.named_parameters",
    "dict",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testMappingProxyType": {
  "data": {
   "lineno": 994,
   "symbols_in_volume": [
    "tree.tree_test.six",
    "tree.tree_test.tree",
    "tree.tree_test.types"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testTraverseEarlyTermination": {
  "data": {
   "lineno": 1013,
   "symbols_in_volume": [
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testTraverseEarlyTermination.visit": {
  "data": {
   "lineno": 1016,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testTraverseListsToTuples": {
  "data": {
   "lineno": 1004,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "tree.tree_test.tree",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenDictOrder": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "tree.tree_test.collections",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenSequenceAs_defaultdict": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "list",
    "tree.tree_test.collections",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenSequenceAs_notIterableError": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "TypeError",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenSequenceAs_wrongLengthsError": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "ValueError",
    "tree.tree_test.tree"
   ]
  },
  "type": "function"
 },
 "tree.tree_test.STRUCTURE1": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tree.tree_test.STRUCTURE2": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tree.tree_test.STRUCTURE_DIFFERENT_NESTING": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tree.tree_test.STRUCTURE_DIFFERENT_NUM_ELEMENTS": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tree.tree_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tree.tree_test.attr": {
  "data": {
   "shadows": "attr"
  },
  "type": "import"
 },
 "tree.tree_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tree.tree_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tree.tree_test.doctest": {
  "data": {
   "shadows": "doctest"
  },
  "type": "import"
 },
 "tree.tree_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tree.tree_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tree.tree_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tree.tree_test.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tree.tree_test.tree": {
  "data": {
   "shadows": "tree"
  },
  "type": "import"
 },
 "tree.tree_test.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "tree.tree_test.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "tree.tree_test.wrapt": {
  "data": {
   "shadows": "wrapt"
  },
  "type": "import"
 }
}