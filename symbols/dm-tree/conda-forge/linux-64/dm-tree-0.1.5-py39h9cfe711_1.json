{
 "tree": {
  "lineno": null,
  "symbols_in_volume": [
   "six.binary_type",
   "six.text_type",
   "sys.modules",
   "tree._tree",
   "typing.Mapping",
   "typing.Sequence",
   "typing.Text",
   "typing.TypeVar",
   "typing.Union",
   "wrapt.ObjectProxy"
  ],
  "type": "module"
 },
 "tree.ObjectProxy": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tree._DotString": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tree._DotString.__repr__": {
  "lineno": 320,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree._DotString.__str__": {
  "lineno": 317,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree._assert_shallow_structure": {
  "lineno": 592,
  "symbols_in_volume": [
   "collections.Mapping",
   "tree._tree.same_namedtuples"
  ],
  "type": "function"
 },
 "tree._assert_shallow_structure.get_matching_input_branch": {
  "lineno": 680,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree._get_attrs_items": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree._is_attrs": {
  "lineno": 147,
  "symbols_in_volume": [
   "tree._tree.is_attrs"
  ],
  "type": "function"
 },
 "tree._is_namedtuple": {
  "lineno": 151,
  "symbols_in_volume": [
   "tree._tree.is_namedtuple"
  ],
  "type": "function"
 },
 "tree._num_elements": {
  "lineno": 251,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree._packed_nest_with_indices": {
  "lineno": 375,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree._sequence_like": {
  "lineno": 167,
  "symbols_in_volume": [
   "collections.Mapping",
   "collections.MappingView",
   "collections.defaultdict",
   "six.PY3",
   "six.moves.zip",
   "types.MappingProxyType"
  ],
  "type": "function"
 },
 "tree._sorted": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree._yield_flat_up_to": {
  "lineno": 559,
  "symbols_in_volume": [
   "collections.Mapping",
   "collections.Sequence"
  ],
  "type": "function"
 },
 "tree._yield_sorted_items": {
  "lineno": 217,
  "symbols_in_volume": [
   "collections.Mapping"
  ],
  "type": "function"
 },
 "tree._yield_value": {
  "lineno": 212,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.assert_same_structure": {
  "lineno": 327,
  "symbols_in_volume": [
   "tree._tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.flatten": {
  "lineno": 276,
  "symbols_in_volume": [
   "tree._tree.flatten"
  ],
  "type": "function"
 },
 "tree.flatten_up_to": {
  "lineno": 693,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.flatten_with_path": {
  "lineno": 861,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.flatten_with_path_up_to": {
  "lineno": 735,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.is_nested": {
  "lineno": 258,
  "symbols_in_volume": [
   "tree._tree.is_sequence"
  ],
  "type": "function"
 },
 "tree.map_structure": {
  "lineno": 465,
  "symbols_in_volume": [
   "six.moves.map",
   "six.moves.zip"
  ],
  "type": "function"
 },
 "tree.map_structure_up_to": {
  "lineno": 767,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.map_structure_with_path": {
  "lineno": 519,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.map_structure_with_path_up_to": {
  "lineno": 808,
  "symbols_in_volume": [
   "six.moves.zip"
  ],
  "type": "function"
 },
 "tree.traverse": {
  "lineno": 889,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.traverse.traverse_subtrees": {
  "lineno": 930,
  "symbols_in_volume": [
   "functools.partial",
   "six.moves.map"
  ],
  "type": "function"
 },
 "tree.tree_benchmark": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "tree.map_structure"
  ],
  "type": "module"
 },
 "tree.tree_benchmark.benchmark_map": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.tree_benchmark.benchmark_map.benchmark_fn": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.tree_benchmark.format_time": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.tree_benchmark.main": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.tree_benchmark.map_to_list": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.tree_benchmark.run_benchmark": {
  "lineno": 41,
  "symbols_in_volume": [
   "timeit.repeat"
  ],
  "type": "function"
 },
 "tree.tree_test": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "tree.tree_test.DoctestTest": {
  "lineno": 39,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase"
  ],
  "type": "class"
 },
 "tree.tree_test.DoctestTest.testDoctest": {
  "lineno": 41,
  "symbols_in_volume": [
   "doctest.ELLIPSIS",
   "doctest.testmod",
   "tree"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest": {
  "lineno": 48,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tree.tree_test.NestTest.SameNamedType1": {
  "lineno": 261,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tree.tree_test.NestTest.assertAllEquals": {
  "lineno": 50,
  "symbols_in_volume": [
   "numpy.asarray"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure": {
  "lineno": 265,
  "symbols_in_volume": [
   "numpy.array",
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_classWrappingNamedTuple": {
  "lineno": 385,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_dictionaryDifferentKeys": {
  "lineno": 355,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNameNamedStructures": {
  "lineno": 377,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNamedTuples": {
  "lineno": 329,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNesting": {
  "lineno": 314,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentNumElements": {
  "lineno": 273,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_differentlyNestedLists": {
  "lineno": 341,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_intVsList": {
  "lineno": 299,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_listStructureWithAndWithoutTypes": {
  "lineno": 348,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_listVsNdArray": {
  "lineno": 288,
  "symbols_in_volume": [
   "numpy.array",
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameDifferentFieldNames": {
  "lineno": 381,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameNamedTuples": {
  "lineno": 359,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameNamedTuplesDifferentStructure": {
  "lineno": 370,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNameNamedTuplesNested": {
  "lineno": 363,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNamedTupleDifferentContents": {
  "lineno": 325,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_sameNamedTupleDifferentStructuredContents": {
  "lineno": 333,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_tupleVsList": {
  "lineno": 310,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertSameStructure_tupleVsNamedTuple": {
  "lineno": 321,
  "symbols_in_volume": [
   "tree.assert_same_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAssertShallowStructure": {
  "lineno": 473,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "tree._SHALLOW_TREE_HAS_INVALID_KEYS.format",
   "tree._STRUCTURES_HAVE_MISMATCHING_LENGTHS.format",
   "tree._STRUCTURES_HAVE_MISMATCHING_TYPES.format",
   "tree._assert_shallow_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAttrsFlattenAndUnflatten": {
  "lineno": 53,
  "symbols_in_volume": [
   "tree._is_attrs",
   "tree.flatten",
   "tree.unflatten_as"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAttrsFlattenAndUnflatten.BadAttr": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tree.tree_test.NestTest.testAttrsFlattenAndUnflatten.SampleAttr": {
  "lineno": 59,
  "symbols_in_volume": [
   "attr.ib",
   "attr.s"
  ],
  "type": "class"
 },
 "tree.tree_test.NestTest.testAttrsMapStructure": {
  "lineno": 78,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "collections.namedtuple",
   "tree.map_structure",
   "wrapt.ObjectProxy"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testAttrsMapStructure.SampleAttr": {
  "lineno": 87,
  "symbols_in_volume": [
   "attr.ib",
   "attr.s"
  ],
  "type": "class"
 },
 "tree.tree_test.NestTest.testByteStringsNotTreatedAsIterable": {
  "lineno": 666,
  "symbols_in_volume": [
   "tree.flatten_up_to"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenAndUnflatten": {
  "lineno": 97,
  "symbols_in_volume": [
   "collections.namedtuple",
   "numpy.array",
   "tree.flatten",
   "tree.unflatten_as"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenAndUnflatten_withDicts": {
  "lineno": 150,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "collections.namedtuple",
   "tree.flatten",
   "tree.unflatten_as"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenDictOrder": {
  "lineno": 131,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "tree.flatten"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenUpTo": {
  "lineno": 509,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "collections.namedtuple",
   "tree._IF_SHALLOW_IS_SEQ_INPUT_MUST_BE_SEQ.format",
   "tree.flatten",
   "tree.flatten_up_to"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenUpTo.ABAttr": {
  "lineno": 546,
  "symbols_in_volume": [
   "attr.ib",
   "attr.s"
  ],
  "type": "class"
 },
 "tree.tree_test.NestTest.testFlattenWithPath": {
  "lineno": 938,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tree.flatten_with_path",
   "wrapt.ObjectProxy"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenWithPathUpTo": {
  "lineno": 671,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "collections.namedtuple",
   "tree._IF_SHALLOW_IS_SEQ_INPUT_MUST_BE_SEQ.format",
   "tree._STRUCTURES_HAVE_MISMATCHING_LENGTHS.format",
   "tree.flatten",
   "tree.flatten_with_path"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlattenWithPathUpTo.get_paths_and_values": {
  "lineno": 673,
  "symbols_in_volume": [
   "tree.flatten_with_path_up_to"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlatten_bytearrayIsNotFlattened": {
  "lineno": 207,
  "symbols_in_volume": [
   "tree.flatten",
   "tree.unflatten_as"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlatten_numpyIsNotFlattened": {
  "lineno": 196,
  "symbols_in_volume": [
   "numpy.array",
   "tree.flatten"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testFlatten_stringIsNotFlattened": {
  "lineno": 201,
  "symbols_in_volume": [
   "tree.flatten",
   "tree.unflatten_as"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testIsSequence": {
  "lineno": 233,
  "symbols_in_volume": [
   "numpy.ones",
   "numpy.tanh",
   "tree.is_nested"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapStructure": {
  "lineno": 390,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tree.assert_same_structure",
   "tree.flatten",
   "tree.map_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapStructureUpTo": {
  "lineno": 909,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tree.map_structure_up_to"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapStructureWithStrings": {
  "lineno": 453,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tree.assert_same_structure",
   "tree.map_structure"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapWithPathCompatibleStructures": {
  "lineno": 957,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tree.map_structure_with_path"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapWithPathCompatibleStructures.path_and_sum": {
  "lineno": 972,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.tree_test.NestTest.testMapWithPathIncompatibleStructures": {
  "lineno": 979,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tree.map_structure_with_path"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testMappingProxyType": {
  "lineno": 994,
  "symbols_in_volume": [
   "six.PY2",
   "tree.flatten",
   "tree.map_structure",
   "tree.unflatten_as",
   "types.MappingProxyType"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testTraverseEarlyTermination": {
  "lineno": 1013,
  "symbols_in_volume": [
   "tree.traverse"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testTraverseEarlyTermination.visit": {
  "lineno": 1016,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tree.tree_test.NestTest.testTraverseListsToTuples": {
  "lineno": 1004,
  "symbols_in_volume": [
   "tree.traverse"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenDictOrder": {
  "lineno": 139,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "tree.unflatten_as"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenSequenceAs_defaultdict": {
  "lineno": 225,
  "symbols_in_volume": [
   "collections.defaultdict",
   "tree.unflatten_as"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenSequenceAs_notIterableError": {
  "lineno": 215,
  "symbols_in_volume": [
   "tree.unflatten_as"
  ],
  "type": "function"
 },
 "tree.tree_test.NestTest.testUnflattenSequenceAs_wrongLengthsError": {
  "lineno": 219,
  "symbols_in_volume": [
   "tree.unflatten_as"
  ],
  "type": "function"
 },
 "tree.unflatten_as": {
  "lineno": 406,
  "symbols_in_volume": [],
  "type": "function"
 }
}